
LUFA_PROJECTS_USB_TO_SERIAL1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00002942  00800100  00018592  00018626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00018592  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00004202  00802a42  00802a42  0001af68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0001af68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001af98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000018e8  00000000  00000000  0001afd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0003455e  00000000  00000000  0001c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000258a  00000000  00000000  00050e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001aa9a  00000000  00000000  000533a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00007898  00000000  00000000  0006de44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00032c64  00000000  00000000  000756dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003dada  00000000  00000000  000a8340  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003888  00000000  00000000  000e5e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00009917  00000000  00000000  000e96a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 41 bf 	jmp	0x17e82	; 0x17e82 <__vector_10>
      2c:	0c 94 04 c0 	jmp	0x18008	; 0x18008 <__vector_11>
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c0       	rjmp	.+318    	; 0x174 <__bad_interrupt>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 bc ba 	jmp	0x17578	; 0x17578 <__vector_25>
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	71 c0       	rjmp	.+226    	; 0x174 <__bad_interrupt>
      92:	00 00       	nop
      94:	6f c0       	rjmp	.+222    	; 0x174 <__bad_interrupt>
	...

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
      a8:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
      b8:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f6:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     106:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     116:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000124 <DeviceDescriptor>:
     124:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
     134:	dc 01                                               ..

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d0 e2       	ldi	r29, 0x20	; 32
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	1a e2       	ldi	r17, 0x2A	; 42
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e2 e9       	ldi	r30, 0x92	; 146
     14a:	f5 e8       	ldi	r31, 0x85	; 133
     14c:	01 e0       	ldi	r16, 0x01	; 1
     14e:	0b bf       	out	0x3b, r16	; 59
     150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x14>
     152:	07 90       	elpm	r0, Z+
     154:	0d 92       	st	X+, r0
     156:	a2 34       	cpi	r26, 0x42	; 66
     158:	b1 07       	cpc	r27, r17
     15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0x10>

0000015c <__do_clear_bss>:
     15c:	2c e6       	ldi	r18, 0x6C	; 108
     15e:	a2 e4       	ldi	r26, 0x42	; 66
     160:	ba e2       	ldi	r27, 0x2A	; 42
     162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
     164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
     166:	a4 34       	cpi	r26, 0x44	; 68
     168:	b2 07       	cpc	r27, r18
     16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
     16c:	0e 94 ba b9 	call	0x17374	; 0x17374 <main>
     170:	0c 94 c7 c2 	jmp	0x1858e	; 0x1858e <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <gc_collect>:
void gc_collect(void)
{
     176:	08 95       	ret

00000178 <mp_builtin_open_obj>:
	//No Action!
}

void mp_builtin_open_obj(void)
{
     178:	08 95       	ret

0000017a <mp_import_stat>:
	//No Action!
}

void mp_import_stat(void)
{
     17a:	08 95       	ret

0000017c <mp_lexer_new_from_file>:
	//No Action!
}

void mp_lexer_new_from_file(void)
{
     17c:	08 95       	ret

0000017e <mp_frozen_mpy_names>:
	//No Action!
}

void mp_frozen_mpy_names(void)
{
     17e:	08 95       	ret

00000180 <mp_frozen_mpy_content>:
	//No Action!
}

void mp_frozen_mpy_content(void)
{
     180:	08 95       	ret

00000182 <mp_qstr_frozen_const_pool>:
	//No Action!
}

void mp_qstr_frozen_const_pool(void)
{
     182:	08 95       	ret

00000184 <find_qstr>:
    #endif
    if (mp_import_stat(filename) != MP_IMPORT_STAT_FILE) {
        return 1; // success (no file is the same as an empty file executing without fail)
    }
    return pyexec_file(filename);
}
     184:	e0 91 68 6b 	lds	r30, 0x6B68	; 0x806b68 <mp_state_ctx+0xe>
     188:	f0 91 69 6b 	lds	r31, 0x6B69	; 0x806b69 <mp_state_ctx+0xf>
     18c:	22 81       	ldd	r18, Z+2	; 0x02
     18e:	33 81       	ldd	r19, Z+3	; 0x03
     190:	82 17       	cp	r24, r18
     192:	93 07       	cpc	r25, r19
     194:	40 f4       	brcc	.+16     	; 0x1a6 <find_qstr+0x22>
     196:	01 90       	ld	r0, Z+
     198:	f0 81       	ld	r31, Z
     19a:	e0 2d       	mov	r30, r0
     19c:	22 81       	ldd	r18, Z+2	; 0x02
     19e:	33 81       	ldd	r19, Z+3	; 0x03
     1a0:	82 17       	cp	r24, r18
     1a2:	93 07       	cpc	r25, r19
     1a4:	c0 f3       	brcs	.-16     	; 0x196 <find_qstr+0x12>
     1a6:	82 1b       	sub	r24, r18
     1a8:	93 0b       	sbc	r25, r19
     1aa:	04 96       	adiw	r24, 0x04	; 4
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	e8 0f       	add	r30, r24
     1b2:	f9 1f       	adc	r31, r25
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
     1b8:	08 95       	ret

000001ba <plat_print_strn>:
     1ba:	08 95       	ret

000001bc <unichar_isspace>:
     1bc:	80 38       	cpi	r24, 0x80	; 128
     1be:	91 05       	cpc	r25, r1
     1c0:	38 f4       	brcc	.+14     	; 0x1d0 <unichar_isspace+0x14>
     1c2:	fc 01       	movw	r30, r24
     1c4:	e5 56       	subi	r30, 0x65	; 101
     1c6:	f6 4d       	sbci	r31, 0xD6	; 214
     1c8:	80 81       	ld	r24, Z
     1ca:	86 95       	lsr	r24
     1cc:	81 70       	andi	r24, 0x01	; 1
     1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <unichar_isspace+0x16>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	81 70       	andi	r24, 0x01	; 1
     1d4:	08 95       	ret

000001d6 <unichar_isalpha>:
     1d6:	80 38       	cpi	r24, 0x80	; 128
     1d8:	91 05       	cpc	r25, r1
     1da:	40 f4       	brcc	.+16     	; 0x1ec <unichar_isalpha+0x16>
     1dc:	fc 01       	movw	r30, r24
     1de:	e5 56       	subi	r30, 0x65	; 101
     1e0:	f6 4d       	sbci	r31, 0xD6	; 214
     1e2:	80 81       	ld	r24, Z
     1e4:	83 fb       	bst	r24, 3
     1e6:	88 27       	eor	r24, r24
     1e8:	80 f9       	bld	r24, 0
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <unichar_isalpha+0x18>
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	81 70       	andi	r24, 0x01	; 1
     1f0:	08 95       	ret

000001f2 <unichar_isdigit>:
     1f2:	80 38       	cpi	r24, 0x80	; 128
     1f4:	91 05       	cpc	r25, r1
     1f6:	40 f4       	brcc	.+16     	; 0x208 <unichar_isdigit+0x16>
     1f8:	fc 01       	movw	r30, r24
     1fa:	e5 56       	subi	r30, 0x65	; 101
     1fc:	f6 4d       	sbci	r31, 0xD6	; 214
     1fe:	80 81       	ld	r24, Z
     200:	82 fb       	bst	r24, 2
     202:	88 27       	eor	r24, r24
     204:	80 f9       	bld	r24, 0
     206:	01 c0       	rjmp	.+2      	; 0x20a <unichar_isdigit+0x18>
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	08 95       	ret

0000020e <unichar_isupper>:
     20e:	80 38       	cpi	r24, 0x80	; 128
     210:	91 05       	cpc	r25, r1
     212:	38 f4       	brcc	.+14     	; 0x222 <unichar_isupper+0x14>
     214:	fc 01       	movw	r30, r24
     216:	e5 56       	subi	r30, 0x65	; 101
     218:	f6 4d       	sbci	r31, 0xD6	; 214
     21a:	80 81       	ld	r24, Z
     21c:	82 95       	swap	r24
     21e:	81 70       	andi	r24, 0x01	; 1
     220:	01 c0       	rjmp	.+2      	; 0x224 <unichar_isupper+0x16>
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	81 70       	andi	r24, 0x01	; 1
     226:	08 95       	ret

00000228 <unichar_islower>:
     228:	80 38       	cpi	r24, 0x80	; 128
     22a:	91 05       	cpc	r25, r1
     22c:	40 f4       	brcc	.+16     	; 0x23e <unichar_islower+0x16>
     22e:	fc 01       	movw	r30, r24
     230:	e5 56       	subi	r30, 0x65	; 101
     232:	f6 4d       	sbci	r31, 0xD6	; 214
     234:	80 81       	ld	r24, Z
     236:	85 fb       	bst	r24, 5
     238:	88 27       	eor	r24, r24
     23a:	80 f9       	bld	r24, 0
     23c:	01 c0       	rjmp	.+2      	; 0x240 <unichar_islower+0x18>
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	81 70       	andi	r24, 0x01	; 1
     242:	08 95       	ret

00000244 <unichar_tolower>:
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
     24a:	e1 df       	rcall	.-62     	; 0x20e <unichar_isupper>
     24c:	88 23       	and	r24, r24
     24e:	19 f0       	breq	.+6      	; 0x256 <unichar_tolower+0x12>
     250:	ce 01       	movw	r24, r28
     252:	80 96       	adiw	r24, 0x20	; 32
     254:	01 c0       	rjmp	.+2      	; 0x258 <unichar_tolower+0x14>
     256:	ce 01       	movw	r24, r28
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	08 95       	ret

0000025e <unichar_toupper>:
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	ec 01       	movw	r28, r24
     264:	e1 df       	rcall	.-62     	; 0x228 <unichar_islower>
     266:	88 23       	and	r24, r24
     268:	19 f0       	breq	.+6      	; 0x270 <unichar_toupper+0x12>
     26a:	ce 01       	movw	r24, r28
     26c:	80 97       	sbiw	r24, 0x20	; 32
     26e:	01 c0       	rjmp	.+2      	; 0x272 <unichar_toupper+0x14>
     270:	ce 01       	movw	r24, r28
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <mp_reader_mem_readbyte>:
     278:	fc 01       	movw	r30, r24
     27a:	a4 81       	ldd	r26, Z+4	; 0x04
     27c:	b5 81       	ldd	r27, Z+5	; 0x05
     27e:	86 81       	ldd	r24, Z+6	; 0x06
     280:	97 81       	ldd	r25, Z+7	; 0x07
     282:	a8 17       	cp	r26, r24
     284:	b9 07       	cpc	r27, r25
     286:	38 f4       	brcc	.+14     	; 0x296 <mp_reader_mem_readbyte+0x1e>
     288:	cd 01       	movw	r24, r26
     28a:	01 96       	adiw	r24, 0x01	; 1
     28c:	95 83       	std	Z+5, r25	; 0x05
     28e:	84 83       	std	Z+4, r24	; 0x04
     290:	8c 91       	ld	r24, X
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	9f ef       	ldi	r25, 0xFF	; 255
     29a:	08 95       	ret

0000029c <next_char>:
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	ec 01       	movw	r28, r24
     2a2:	88 85       	ldd	r24, Y+8	; 0x08
     2a4:	99 85       	ldd	r25, Y+9	; 0x09
     2a6:	8a 30       	cpi	r24, 0x0A	; 10
     2a8:	91 05       	cpc	r25, r1
     2aa:	51 f4       	brne	.+20     	; 0x2c0 <next_char+0x24>
     2ac:	8e 85       	ldd	r24, Y+14	; 0x0e
     2ae:	9f 85       	ldd	r25, Y+15	; 0x0f
     2b0:	01 96       	adiw	r24, 0x01	; 1
     2b2:	9f 87       	std	Y+15, r25	; 0x0f
     2b4:	8e 87       	std	Y+14, r24	; 0x0e
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	99 8b       	std	Y+17, r25	; 0x11
     2bc:	88 8b       	std	Y+16, r24	; 0x10
     2be:	0f c0       	rjmp	.+30     	; 0x2de <next_char+0x42>
     2c0:	09 97       	sbiw	r24, 0x09	; 9
     2c2:	41 f4       	brne	.+16     	; 0x2d4 <next_char+0x38>
     2c4:	88 89       	ldd	r24, Y+16	; 0x10
     2c6:	99 89       	ldd	r25, Y+17	; 0x11
     2c8:	07 96       	adiw	r24, 0x07	; 7
     2ca:	88 7f       	andi	r24, 0xF8	; 248
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	99 8b       	std	Y+17, r25	; 0x11
     2d0:	88 8b       	std	Y+16, r24	; 0x10
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <next_char+0x42>
     2d4:	88 89       	ldd	r24, Y+16	; 0x10
     2d6:	99 89       	ldd	r25, Y+17	; 0x11
     2d8:	01 96       	adiw	r24, 0x01	; 1
     2da:	99 8b       	std	Y+17, r25	; 0x11
     2dc:	88 8b       	std	Y+16, r24	; 0x10
     2de:	8a 85       	ldd	r24, Y+10	; 0x0a
     2e0:	9b 85       	ldd	r25, Y+11	; 0x0b
     2e2:	99 87       	std	Y+9, r25	; 0x09
     2e4:	88 87       	std	Y+8, r24	; 0x08
     2e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     2e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     2ea:	9b 87       	std	Y+11, r25	; 0x0b
     2ec:	8a 87       	std	Y+10, r24	; 0x0a
     2ee:	ec 81       	ldd	r30, Y+4	; 0x04
     2f0:	fd 81       	ldd	r31, Y+5	; 0x05
     2f2:	8a 81       	ldd	r24, Y+2	; 0x02
     2f4:	9b 81       	ldd	r25, Y+3	; 0x03
     2f6:	09 95       	icall
     2f8:	9d 87       	std	Y+13, r25	; 0x0d
     2fa:	8c 87       	std	Y+12, r24	; 0x0c
     2fc:	2a 85       	ldd	r18, Y+10	; 0x0a
     2fe:	3b 85       	ldd	r19, Y+11	; 0x0b
     300:	2d 30       	cpi	r18, 0x0D	; 13
     302:	31 05       	cpc	r19, r1
     304:	69 f4       	brne	.+26     	; 0x320 <next_char+0x84>
     306:	2a e0       	ldi	r18, 0x0A	; 10
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	3b 87       	std	Y+11, r19	; 0x0b
     30c:	2a 87       	std	Y+10, r18	; 0x0a
     30e:	0a 97       	sbiw	r24, 0x0a	; 10
     310:	b9 f4       	brne	.+46     	; 0x340 <next_char+0xa4>
     312:	ec 81       	ldd	r30, Y+4	; 0x04
     314:	fd 81       	ldd	r31, Y+5	; 0x05
     316:	8a 81       	ldd	r24, Y+2	; 0x02
     318:	9b 81       	ldd	r25, Y+3	; 0x03
     31a:	09 95       	icall
     31c:	9d 87       	std	Y+13, r25	; 0x0d
     31e:	8c 87       	std	Y+12, r24	; 0x0c
     320:	8c 85       	ldd	r24, Y+12	; 0x0c
     322:	9d 85       	ldd	r25, Y+13	; 0x0d
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	61 f4       	brne	.+24     	; 0x340 <next_char+0xa4>
     328:	8a 85       	ldd	r24, Y+10	; 0x0a
     32a:	9b 85       	ldd	r25, Y+11	; 0x0b
     32c:	8f 3f       	cpi	r24, 0xFF	; 255
     32e:	2f ef       	ldi	r18, 0xFF	; 255
     330:	92 07       	cpc	r25, r18
     332:	31 f0       	breq	.+12     	; 0x340 <next_char+0xa4>
     334:	0a 97       	sbiw	r24, 0x0a	; 10
     336:	21 f0       	breq	.+8      	; 0x340 <next_char+0xa4>
     338:	8a e0       	ldi	r24, 0x0A	; 10
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	9d 87       	std	Y+13, r25	; 0x0d
     33e:	8c 87       	std	Y+12, r24	; 0x0c
     340:	df 91       	pop	r29
     342:	cf 91       	pop	r28
     344:	08 95       	ret

00000346 <compile_error_set_line>:
     346:	fc 01       	movw	r30, r24
     348:	27 81       	ldd	r18, Z+7	; 0x07
     34a:	30 85       	ldd	r19, Z+8	; 0x08
     34c:	23 2b       	or	r18, r19
     34e:	71 f4       	brne	.+28     	; 0x36c <compile_error_set_line+0x26>
     350:	61 15       	cp	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	59 f0       	breq	.+22     	; 0x36c <compile_error_set_line+0x26>
     356:	9b 01       	movw	r18, r22
     358:	23 70       	andi	r18, 0x03	; 3
     35a:	33 27       	eor	r19, r19
     35c:	23 2b       	or	r18, r19
     35e:	31 f4       	brne	.+12     	; 0x36c <compile_error_set_line+0x26>
     360:	fb 01       	movw	r30, r22
     362:	20 81       	ld	r18, Z
     364:	31 81       	ldd	r19, Z+1	; 0x01
     366:	fc 01       	movw	r30, r24
     368:	30 87       	std	Z+8, r19	; 0x08
     36a:	27 83       	std	Z+7, r18	; 0x07
     36c:	08 95       	ret

0000036e <apply_to_single_or_list>:
     36e:	af 92       	push	r10
     370:	bf 92       	push	r11
     372:	cf 92       	push	r12
     374:	df 92       	push	r13
     376:	ef 92       	push	r14
     378:	ff 92       	push	r15
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	61 15       	cp	r22, r1
     384:	71 05       	cpc	r23, r1
     386:	a9 f1       	breq	.+106    	; 0x3f2 <apply_to_single_or_list+0x84>
     388:	59 01       	movw	r10, r18
     38a:	fb 01       	movw	r30, r22
     38c:	8c 01       	movw	r16, r24
     38e:	cb 01       	movw	r24, r22
     390:	83 70       	andi	r24, 0x03	; 3
     392:	99 27       	eor	r25, r25
     394:	89 2b       	or	r24, r25
     396:	49 f5       	brne	.+82     	; 0x3ea <apply_to_single_or_list+0x7c>
     398:	84 81       	ldd	r24, Z+4	; 0x04
     39a:	95 81       	ldd	r25, Z+5	; 0x05
     39c:	a6 81       	ldd	r26, Z+6	; 0x06
     39e:	b7 81       	ldd	r27, Z+7	; 0x07
     3a0:	6c 01       	movw	r12, r24
     3a2:	7d 01       	movw	r14, r26
     3a4:	dd 24       	eor	r13, r13
     3a6:	ee 24       	eor	r14, r14
     3a8:	ff 24       	eor	r15, r15
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	c4 16       	cp	r12, r20
     3b2:	d5 06       	cpc	r13, r21
     3b4:	e6 06       	cpc	r14, r22
     3b6:	f7 06       	cpc	r15, r23
     3b8:	c1 f4       	brne	.+48     	; 0x3ea <apply_to_single_or_list+0x7c>
     3ba:	89 2f       	mov	r24, r25
     3bc:	9a 2f       	mov	r25, r26
     3be:	ab 2f       	mov	r26, r27
     3c0:	bb 27       	eor	r27, r27
     3c2:	18 16       	cp	r1, r24
     3c4:	19 06       	cpc	r1, r25
     3c6:	ac f4       	brge	.+42     	; 0x3f2 <apply_to_single_or_list+0x84>
     3c8:	ef 01       	movw	r28, r30
     3ca:	28 96       	adiw	r28, 0x08	; 8
     3cc:	04 96       	adiw	r24, 0x04	; 4
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	6f 01       	movw	r12, r30
     3d4:	c8 0e       	add	r12, r24
     3d6:	d9 1e       	adc	r13, r25
     3d8:	69 91       	ld	r22, Y+
     3da:	79 91       	ld	r23, Y+
     3dc:	c8 01       	movw	r24, r16
     3de:	f5 01       	movw	r30, r10
     3e0:	09 95       	icall
     3e2:	cc 15       	cp	r28, r12
     3e4:	dd 05       	cpc	r29, r13
     3e6:	c1 f7       	brne	.-16     	; 0x3d8 <apply_to_single_or_list+0x6a>
     3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <apply_to_single_or_list+0x84>
     3ea:	bf 01       	movw	r22, r30
     3ec:	c8 01       	movw	r24, r16
     3ee:	f5 01       	movw	r30, r10
     3f0:	09 95       	icall
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	1f 91       	pop	r17
     3f8:	0f 91       	pop	r16
     3fa:	ff 90       	pop	r15
     3fc:	ef 90       	pop	r14
     3fe:	df 90       	pop	r13
     400:	cf 90       	pop	r12
     402:	bf 90       	pop	r11
     404:	af 90       	pop	r10
     406:	08 95       	ret

00000408 <compile_del_stmt>:
     408:	fb 01       	movw	r30, r22
     40a:	60 85       	ldd	r22, Z+8	; 0x08
     40c:	71 85       	ldd	r23, Z+9	; 0x09
     40e:	26 ec       	ldi	r18, 0xC6	; 198
     410:	3e e6       	ldi	r19, 0x6E	; 110
     412:	41 e9       	ldi	r20, 0x91	; 145
     414:	ac cf       	rjmp	.-168    	; 0x36e <apply_to_single_or_list>
     416:	08 95       	ret

00000418 <compile_import_name>:
     418:	fb 01       	movw	r30, r22
     41a:	60 85       	ldd	r22, Z+8	; 0x08
     41c:	71 85       	ldd	r23, Z+9	; 0x09
     41e:	23 ed       	ldi	r18, 0xD3	; 211
     420:	30 e8       	ldi	r19, 0x80	; 128
     422:	45 e6       	ldi	r20, 0x65	; 101
     424:	a4 cf       	rjmp	.-184    	; 0x36e <apply_to_single_or_list>
     426:	08 95       	ret

00000428 <mp_identity>:
     428:	08 95       	ret

0000042a <mp_identity_getiter>:
     42a:	08 95       	ret

0000042c <mp_generic_unary_op>:
     42c:	86 30       	cpi	r24, 0x06	; 6
     42e:	29 f4       	brne	.+10     	; 0x43a <mp_generic_unary_op+0xe>
     430:	cb 01       	movw	r24, r22
     432:	88 0f       	add	r24, r24
     434:	99 1f       	adc	r25, r25
     436:	81 60       	ori	r24, 0x01	; 1
     438:	08 95       	ret
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	08 95       	ret

00000440 <dict_unary_op>:
     440:	84 30       	cpi	r24, 0x04	; 4
     442:	19 f0       	breq	.+6      	; 0x44a <dict_unary_op+0xa>
     444:	85 30       	cpi	r24, 0x05	; 5
     446:	b1 f0       	breq	.+44     	; 0x474 <dict_unary_op+0x34>
     448:	29 c0       	rjmp	.+82     	; 0x49c <dict_unary_op+0x5c>
     44a:	fb 01       	movw	r30, r22
     44c:	22 81       	ldd	r18, Z+2	; 0x02
     44e:	26 95       	lsr	r18
     450:	26 95       	lsr	r18
     452:	26 95       	lsr	r18
     454:	33 81       	ldd	r19, Z+3	; 0x03
     456:	43 2f       	mov	r20, r19
     458:	42 95       	swap	r20
     45a:	44 0f       	add	r20, r20
     45c:	40 7e       	andi	r20, 0xE0	; 224
     45e:	84 2f       	mov	r24, r20
     460:	82 2b       	or	r24, r18
     462:	93 2f       	mov	r25, r19
     464:	96 95       	lsr	r25
     466:	96 95       	lsr	r25
     468:	96 95       	lsr	r25
     46a:	89 2b       	or	r24, r25
     46c:	d1 f4       	brne	.+52     	; 0x4a2 <dict_unary_op+0x62>
     46e:	8e e0       	ldi	r24, 0x0E	; 14
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	08 95       	ret
     474:	fb 01       	movw	r30, r22
     476:	22 81       	ldd	r18, Z+2	; 0x02
     478:	26 95       	lsr	r18
     47a:	26 95       	lsr	r18
     47c:	26 95       	lsr	r18
     47e:	33 81       	ldd	r19, Z+3	; 0x03
     480:	43 2f       	mov	r20, r19
     482:	42 95       	swap	r20
     484:	44 0f       	add	r20, r20
     486:	40 7e       	andi	r20, 0xE0	; 224
     488:	84 2f       	mov	r24, r20
     48a:	82 2b       	or	r24, r18
     48c:	93 2f       	mov	r25, r19
     48e:	96 95       	lsr	r25
     490:	96 95       	lsr	r25
     492:	96 95       	lsr	r25
     494:	88 0f       	add	r24, r24
     496:	99 1f       	adc	r25, r25
     498:	81 60       	ori	r24, 0x01	; 1
     49a:	08 95       	ret
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	08 95       	ret
     4a2:	8e e1       	ldi	r24, 0x1E	; 30
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	08 95       	ret

000004a8 <mp_obj_int_unary_op>:
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	08 95       	ret

000004ae <list_unary_op>:
     4ae:	84 30       	cpi	r24, 0x04	; 4
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <list_unary_op+0xa>
     4b2:	85 30       	cpi	r24, 0x05	; 5
     4b4:	49 f0       	breq	.+18     	; 0x4c8 <list_unary_op+0x1a>
     4b6:	0f c0       	rjmp	.+30     	; 0x4d6 <list_unary_op+0x28>
     4b8:	fb 01       	movw	r30, r22
     4ba:	84 81       	ldd	r24, Z+4	; 0x04
     4bc:	95 81       	ldd	r25, Z+5	; 0x05
     4be:	89 2b       	or	r24, r25
     4c0:	69 f4       	brne	.+26     	; 0x4dc <list_unary_op+0x2e>
     4c2:	8e e0       	ldi	r24, 0x0E	; 14
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	08 95       	ret
     4c8:	fb 01       	movw	r30, r22
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	95 81       	ldd	r25, Z+5	; 0x05
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	08 95       	ret
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	08 95       	ret
     4dc:	8e e1       	ldi	r24, 0x1E	; 30
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <list_it_iternext>:
     4e2:	dc 01       	movw	r26, r24
     4e4:	14 96       	adiw	r26, 0x04	; 4
     4e6:	ed 91       	ld	r30, X+
     4e8:	fc 91       	ld	r31, X
     4ea:	15 97       	sbiw	r26, 0x05	; 5
     4ec:	16 96       	adiw	r26, 0x06	; 6
     4ee:	2d 91       	ld	r18, X+
     4f0:	3c 91       	ld	r19, X
     4f2:	17 97       	sbiw	r26, 0x07	; 7
     4f4:	84 81       	ldd	r24, Z+4	; 0x04
     4f6:	95 81       	ldd	r25, Z+5	; 0x05
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	88 f4       	brcc	.+34     	; 0x520 <list_it_iternext+0x3e>
     4fe:	a9 01       	movw	r20, r18
     500:	44 0f       	add	r20, r20
     502:	55 1f       	adc	r21, r21
     504:	06 80       	ldd	r0, Z+6	; 0x06
     506:	f7 81       	ldd	r31, Z+7	; 0x07
     508:	e0 2d       	mov	r30, r0
     50a:	e4 0f       	add	r30, r20
     50c:	f5 1f       	adc	r31, r21
     50e:	80 81       	ld	r24, Z
     510:	91 81       	ldd	r25, Z+1	; 0x01
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
     516:	17 96       	adiw	r26, 0x07	; 7
     518:	3c 93       	st	X, r19
     51a:	2e 93       	st	-X, r18
     51c:	16 97       	sbiw	r26, 0x06	; 6
     51e:	08 95       	ret
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <list_getiter>:
     526:	fb 01       	movw	r30, r22
     528:	2a e9       	ldi	r18, 0x9A	; 154
     52a:	3c e1       	ldi	r19, 0x1C	; 28
     52c:	31 83       	std	Z+1, r19	; 0x01
     52e:	20 83       	st	Z, r18
     530:	21 e7       	ldi	r18, 0x71	; 113
     532:	32 e0       	ldi	r19, 0x02	; 2
     534:	33 83       	std	Z+3, r19	; 0x03
     536:	22 83       	std	Z+2, r18	; 0x02
     538:	95 83       	std	Z+5, r25	; 0x05
     53a:	84 83       	std	Z+4, r24	; 0x04
     53c:	17 82       	std	Z+7, r1	; 0x07
     53e:	16 82       	std	Z+6, r1	; 0x06
     540:	cb 01       	movw	r24, r22
     542:	08 95       	ret

00000544 <polymorph_it_iternext>:
     544:	dc 01       	movw	r26, r24
     546:	12 96       	adiw	r26, 0x02	; 2
     548:	ed 91       	ld	r30, X+
     54a:	fc 91       	ld	r31, X
     54c:	13 97       	sbiw	r26, 0x03	; 3
     54e:	09 95       	icall
     550:	08 95       	ret

00000552 <range_it_iternext>:
     552:	fc 01       	movw	r30, r24
     554:	46 81       	ldd	r20, Z+6	; 0x06
     556:	57 81       	ldd	r21, Z+7	; 0x07
     558:	14 16       	cp	r1, r20
     55a:	15 06       	cpc	r1, r21
     55c:	3c f4       	brge	.+14     	; 0x56c <range_it_iternext+0x1a>
     55e:	22 81       	ldd	r18, Z+2	; 0x02
     560:	33 81       	ldd	r19, Z+3	; 0x03
     562:	84 81       	ldd	r24, Z+4	; 0x04
     564:	95 81       	ldd	r25, Z+5	; 0x05
     566:	28 17       	cp	r18, r24
     568:	39 07       	cpc	r19, r25
     56a:	4c f0       	brlt	.+18     	; 0x57e <range_it_iternext+0x2c>
     56c:	55 23       	and	r21, r21
     56e:	94 f4       	brge	.+36     	; 0x594 <range_it_iternext+0x42>
     570:	22 81       	ldd	r18, Z+2	; 0x02
     572:	33 81       	ldd	r19, Z+3	; 0x03
     574:	84 81       	ldd	r24, Z+4	; 0x04
     576:	95 81       	ldd	r25, Z+5	; 0x05
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	74 f4       	brge	.+28     	; 0x59a <range_it_iternext+0x48>
     57e:	22 81       	ldd	r18, Z+2	; 0x02
     580:	33 81       	ldd	r19, Z+3	; 0x03
     582:	c9 01       	movw	r24, r18
     584:	88 0f       	add	r24, r24
     586:	99 1f       	adc	r25, r25
     588:	24 0f       	add	r18, r20
     58a:	35 1f       	adc	r19, r21
     58c:	33 83       	std	Z+3, r19	; 0x03
     58e:	22 83       	std	Z+2, r18	; 0x02
     590:	81 60       	ori	r24, 0x01	; 1
     592:	08 95       	ret
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	08 95       	ret
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	08 95       	ret

000005a0 <range_len>:
     5a0:	fc 01       	movw	r30, r24
     5a2:	66 81       	ldd	r22, Z+6	; 0x06
     5a4:	77 81       	ldd	r23, Z+7	; 0x07
     5a6:	84 81       	ldd	r24, Z+4	; 0x04
     5a8:	95 81       	ldd	r25, Z+5	; 0x05
     5aa:	22 81       	ldd	r18, Z+2	; 0x02
     5ac:	33 81       	ldd	r19, Z+3	; 0x03
     5ae:	82 1b       	sub	r24, r18
     5b0:	93 0b       	sbc	r25, r19
     5b2:	86 0f       	add	r24, r22
     5b4:	97 1f       	adc	r25, r23
     5b6:	16 16       	cp	r1, r22
     5b8:	17 06       	cpc	r1, r23
     5ba:	14 f4       	brge	.+4      	; 0x5c0 <range_len+0x20>
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <range_len+0x22>
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
     5c6:	cb 01       	movw	r24, r22
     5c8:	99 23       	and	r25, r25
     5ca:	14 f4       	brge	.+4      	; 0x5d0 <range_len+0x30>
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	08 95       	ret

000005d2 <range_unary_op>:
     5d2:	cf 93       	push	r28
     5d4:	c8 2f       	mov	r28, r24
     5d6:	cb 01       	movw	r24, r22
     5d8:	e3 df       	rcall	.-58     	; 0x5a0 <range_len>
     5da:	c4 30       	cpi	r28, 0x04	; 4
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <range_unary_op+0x12>
     5de:	c5 30       	cpi	r28, 0x05	; 5
     5e0:	39 f0       	breq	.+14     	; 0x5f0 <range_unary_op+0x1e>
     5e2:	0a c0       	rjmp	.+20     	; 0x5f8 <range_unary_op+0x26>
     5e4:	18 16       	cp	r1, r24
     5e6:	19 06       	cpc	r1, r25
     5e8:	54 f0       	brlt	.+20     	; 0x5fe <range_unary_op+0x2c>
     5ea:	8e e0       	ldi	r24, 0x0E	; 14
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	09 c0       	rjmp	.+18     	; 0x602 <range_unary_op+0x30>
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	81 60       	ori	r24, 0x01	; 1
     5f6:	05 c0       	rjmp	.+10     	; 0x602 <range_unary_op+0x30>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <range_unary_op+0x30>
     5fe:	8e e1       	ldi	r24, 0x1E	; 30
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <range_getiter>:
     606:	dc 01       	movw	r26, r24
     608:	fb 01       	movw	r30, r22
     60a:	16 96       	adiw	r26, 0x06	; 6
     60c:	8d 91       	ld	r24, X+
     60e:	9c 91       	ld	r25, X
     610:	17 97       	sbiw	r26, 0x07	; 7
     612:	14 96       	adiw	r26, 0x04	; 4
     614:	2d 91       	ld	r18, X+
     616:	3c 91       	ld	r19, X
     618:	15 97       	sbiw	r26, 0x05	; 5
     61a:	12 96       	adiw	r26, 0x02	; 2
     61c:	4d 91       	ld	r20, X+
     61e:	5c 91       	ld	r21, X
     620:	13 97       	sbiw	r26, 0x03	; 3
     622:	6a e5       	ldi	r22, 0x5A	; 90
     624:	7c e1       	ldi	r23, 0x1C	; 28
     626:	71 83       	std	Z+1, r23	; 0x01
     628:	60 83       	st	Z, r22
     62a:	53 83       	std	Z+3, r21	; 0x03
     62c:	42 83       	std	Z+2, r20	; 0x02
     62e:	35 83       	std	Z+5, r19	; 0x05
     630:	24 83       	std	Z+4, r18	; 0x04
     632:	97 83       	std	Z+7, r25	; 0x07
     634:	86 83       	std	Z+6, r24	; 0x06
     636:	cf 01       	movw	r24, r30
     638:	08 95       	ret

0000063a <str_to_int>:
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	dc 01       	movw	r26, r24
     640:	ea 01       	movw	r28, r20
     642:	86 17       	cp	r24, r22
     644:	97 07       	cpc	r25, r23
     646:	18 f5       	brcc	.+70     	; 0x68e <str_to_int+0x54>
     648:	8c 91       	ld	r24, X
     64a:	80 53       	subi	r24, 0x30	; 48
     64c:	8a 30       	cpi	r24, 0x0A	; 10
     64e:	f8 f4       	brcc	.+62     	; 0x68e <str_to_int+0x54>
     650:	19 82       	std	Y+1, r1	; 0x01
     652:	18 82       	st	Y, r1
     654:	e8 81       	ld	r30, Y
     656:	f9 81       	ldd	r31, Y+1	; 0x01
     658:	9f 01       	movw	r18, r30
     65a:	22 0f       	add	r18, r18
     65c:	33 1f       	adc	r19, r19
     65e:	ee 0f       	add	r30, r30
     660:	ff 1f       	adc	r31, r31
     662:	ee 0f       	add	r30, r30
     664:	ff 1f       	adc	r31, r31
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	2e 0f       	add	r18, r30
     66c:	3f 1f       	adc	r19, r31
     66e:	ed 91       	ld	r30, X+
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	f0 97       	sbiw	r30, 0x30	; 48
     674:	2e 0f       	add	r18, r30
     676:	3f 1f       	adc	r19, r31
     678:	39 83       	std	Y+1, r19	; 0x01
     67a:	28 83       	st	Y, r18
     67c:	6a 17       	cp	r22, r26
     67e:	7b 07       	cpc	r23, r27
     680:	29 f0       	breq	.+10     	; 0x68c <str_to_int+0x52>
     682:	8c 91       	ld	r24, X
     684:	80 53       	subi	r24, 0x30	; 48
     686:	8a 30       	cpi	r24, 0x0A	; 10
     688:	28 f3       	brcs	.-54     	; 0x654 <str_to_int+0x1a>
     68a:	01 c0       	rjmp	.+2      	; 0x68e <str_to_int+0x54>
     68c:	db 01       	movw	r26, r22
     68e:	cd 01       	movw	r24, r26
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <arg_looks_integer>:
     696:	8e 30       	cpi	r24, 0x0E	; 14
     698:	91 05       	cpc	r25, r1
     69a:	b9 f0       	breq	.+46     	; 0x6ca <arg_looks_integer+0x34>
     69c:	8e 31       	cpi	r24, 0x1E	; 30
     69e:	91 05       	cpc	r25, r1
     6a0:	b9 f0       	breq	.+46     	; 0x6d0 <arg_looks_integer+0x3a>
     6a2:	9c 01       	movw	r18, r24
     6a4:	21 70       	andi	r18, 0x01	; 1
     6a6:	33 27       	eor	r19, r19
     6a8:	80 fd       	sbrc	r24, 0
     6aa:	15 c0       	rjmp	.+42     	; 0x6d6 <arg_looks_integer+0x40>
     6ac:	ac 01       	movw	r20, r24
     6ae:	43 70       	andi	r20, 0x03	; 3
     6b0:	55 27       	eor	r21, r21
     6b2:	45 2b       	or	r20, r21
     6b4:	91 f4       	brne	.+36     	; 0x6da <arg_looks_integer+0x44>
     6b6:	51 e0       	ldi	r21, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	80 81       	ld	r24, Z
     6bc:	91 81       	ldd	r25, Z+1	; 0x01
     6be:	88 5b       	subi	r24, 0xB8	; 184
     6c0:	9d 41       	sbci	r25, 0x1D	; 29
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <arg_looks_integer+0x30>
     6c4:	50 e0       	ldi	r21, 0x00	; 0
     6c6:	25 2f       	mov	r18, r21
     6c8:	08 c0       	rjmp	.+16     	; 0x6da <arg_looks_integer+0x44>
     6ca:	21 e0       	ldi	r18, 0x01	; 1
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	05 c0       	rjmp	.+10     	; 0x6da <arg_looks_integer+0x44>
     6d0:	21 e0       	ldi	r18, 0x01	; 1
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <arg_looks_integer+0x44>
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	82 2f       	mov	r24, r18
     6dc:	81 70       	andi	r24, 0x01	; 1
     6de:	08 95       	ret

000006e0 <mp_obj_new_str_iterator>:
     6e0:	fb 01       	movw	r30, r22
     6e2:	2a e9       	ldi	r18, 0x9A	; 154
     6e4:	3c e1       	ldi	r19, 0x1C	; 28
     6e6:	31 83       	std	Z+1, r19	; 0x01
     6e8:	20 83       	st	Z, r18
     6ea:	28 e0       	ldi	r18, 0x08	; 8
     6ec:	31 e8       	ldi	r19, 0x81	; 129
     6ee:	33 83       	std	Z+3, r19	; 0x03
     6f0:	22 83       	std	Z+2, r18	; 0x02
     6f2:	95 83       	std	Z+5, r25	; 0x05
     6f4:	84 83       	std	Z+4, r24	; 0x04
     6f6:	17 82       	std	Z+7, r1	; 0x07
     6f8:	16 82       	std	Z+6, r1	; 0x06
     6fa:	cb 01       	movw	r24, r22
     6fc:	08 95       	ret

000006fe <mp_obj_new_bytes_iterator>:
     6fe:	fb 01       	movw	r30, r22
     700:	2a e9       	ldi	r18, 0x9A	; 154
     702:	3c e1       	ldi	r19, 0x1C	; 28
     704:	31 83       	std	Z+1, r19	; 0x01
     706:	20 83       	st	Z, r18
     708:	26 e4       	ldi	r18, 0x46	; 70
     70a:	3c e0       	ldi	r19, 0x0C	; 12
     70c:	33 83       	std	Z+3, r19	; 0x03
     70e:	22 83       	std	Z+2, r18	; 0x02
     710:	95 83       	std	Z+5, r25	; 0x05
     712:	84 83       	std	Z+4, r24	; 0x04
     714:	17 82       	std	Z+7, r1	; 0x07
     716:	16 82       	std	Z+6, r1	; 0x06
     718:	cb 01       	movw	r24, r22
     71a:	08 95       	ret

0000071c <tuple_it_iternext>:
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	dc 01       	movw	r26, r24
     722:	16 96       	adiw	r26, 0x06	; 6
     724:	2d 91       	ld	r18, X+
     726:	3c 91       	ld	r19, X
     728:	17 97       	sbiw	r26, 0x07	; 7
     72a:	14 96       	adiw	r26, 0x04	; 4
     72c:	cd 91       	ld	r28, X+
     72e:	dc 91       	ld	r29, X
     730:	15 97       	sbiw	r26, 0x05	; 5
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	9b 81       	ldd	r25, Y+3	; 0x03
     736:	28 17       	cp	r18, r24
     738:	39 07       	cpc	r19, r25
     73a:	78 f4       	brcc	.+30     	; 0x75a <tuple_it_iternext+0x3e>
     73c:	f9 01       	movw	r30, r18
     73e:	32 96       	adiw	r30, 0x02	; 2
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ec 0f       	add	r30, r28
     746:	fd 1f       	adc	r31, r29
     748:	80 81       	ld	r24, Z
     74a:	91 81       	ldd	r25, Z+1	; 0x01
     74c:	2f 5f       	subi	r18, 0xFF	; 255
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	17 96       	adiw	r26, 0x07	; 7
     752:	3c 93       	st	X, r19
     754:	2e 93       	st	-X, r18
     756:	16 97       	sbiw	r26, 0x06	; 6
     758:	02 c0       	rjmp	.+4      	; 0x75e <tuple_it_iternext+0x42>
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <mp_obj_tuple_getiter>:
     764:	fb 01       	movw	r30, r22
     766:	2a e9       	ldi	r18, 0x9A	; 154
     768:	3c e1       	ldi	r19, 0x1C	; 28
     76a:	31 83       	std	Z+1, r19	; 0x01
     76c:	20 83       	st	Z, r18
     76e:	2e e8       	ldi	r18, 0x8E	; 142
     770:	33 e0       	ldi	r19, 0x03	; 3
     772:	33 83       	std	Z+3, r19	; 0x03
     774:	22 83       	std	Z+2, r18	; 0x02
     776:	95 83       	std	Z+5, r25	; 0x05
     778:	84 83       	std	Z+4, r24	; 0x04
     77a:	17 82       	std	Z+7, r1	; 0x07
     77c:	16 82       	std	Z+6, r1	; 0x06
     77e:	cb 01       	movw	r24, r22
     780:	08 95       	ret

00000782 <instance_count_native_bases>:
     782:	fc 01       	movw	r30, r24
     784:	8a 5b       	subi	r24, 0xBA	; 186
     786:	9c 41       	sbci	r25, 0x1C	; 28
     788:	11 f1       	breq	.+68     	; 0x7ce <instance_count_native_bases+0x4c>
     78a:	80 85       	ldd	r24, Z+8	; 0x08
     78c:	91 85       	ldd	r25, Z+9	; 0x09
     78e:	8f 53       	subi	r24, 0x3F	; 63
     790:	9b 44       	sbci	r25, 0x4B	; 75
     792:	59 f4       	brne	.+22     	; 0x7aa <instance_count_native_bases+0x28>
     794:	04 8c       	ldd	r0, Z+28	; 0x1c
     796:	f5 8d       	ldd	r31, Z+29	; 0x1d
     798:	e0 2d       	mov	r30, r0
     79a:	30 97       	sbiw	r30, 0x00	; 0
     79c:	89 f4       	brne	.+34     	; 0x7c0 <instance_count_native_bases+0x3e>
     79e:	1a c0       	rjmp	.+52     	; 0x7d4 <instance_count_native_bases+0x52>
     7a0:	80 85       	ldd	r24, Z+8	; 0x08
     7a2:	91 85       	ldd	r25, Z+9	; 0x09
     7a4:	8f 53       	subi	r24, 0x3F	; 63
     7a6:	9b 44       	sbci	r25, 0x4B	; 75
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <instance_count_native_bases+0x34>
     7aa:	db 01       	movw	r26, r22
     7ac:	ed 93       	st	X+, r30
     7ae:	fc 93       	st	X, r31
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	08 95       	ret
     7b6:	04 8c       	ldd	r0, Z+28	; 0x1c
     7b8:	f5 8d       	ldd	r31, Z+29	; 0x1d
     7ba:	e0 2d       	mov	r30, r0
     7bc:	30 97       	sbiw	r30, 0x00	; 0
     7be:	69 f0       	breq	.+26     	; 0x7da <instance_count_native_bases+0x58>
     7c0:	bc e1       	ldi	r27, 0x1C	; 28
     7c2:	ea 3b       	cpi	r30, 0xBA	; 186
     7c4:	fb 07       	cpc	r31, r27
     7c6:	61 f7       	brne	.-40     	; 0x7a0 <instance_count_native_bases+0x1e>
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	08 95       	ret
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	08 95       	ret

000007e0 <native_base_init_wrapper>:
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	00 d0       	rcall	.+0      	; 0x7f2 <native_base_init_wrapper+0x12>
     7f2:	cd b7       	in	r28, 0x3d	; 61
     7f4:	de b7       	in	r29, 0x3e	; 62
     7f6:	7c 01       	movw	r14, r24
     7f8:	06 2f       	mov	r16, r22
     7fa:	17 2f       	mov	r17, r23
     7fc:	d8 01       	movw	r26, r16
     7fe:	cd 90       	ld	r12, X+
     800:	dd 90       	ld	r13, X+
     802:	8d 01       	movw	r16, r26
     804:	1a 82       	std	Y+2, r1	; 0x02
     806:	19 82       	std	Y+1, r1	; 0x01
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	f6 01       	movw	r30, r12
     810:	80 81       	ld	r24, Z
     812:	91 81       	ldd	r25, Z+1	; 0x01
     814:	b6 df       	rcall	.-148    	; 0x782 <instance_count_native_bases>
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	b7 01       	movw	r22, r14
     81c:	61 50       	subi	r22, 0x01	; 1
     81e:	71 09       	sbc	r23, r1
     820:	dc 01       	movw	r26, r24
     822:	18 96       	adiw	r26, 0x08	; 8
     824:	ed 91       	ld	r30, X+
     826:	fc 91       	ld	r31, X
     828:	19 97       	sbiw	r26, 0x09	; 9
     82a:	98 01       	movw	r18, r16
     82c:	40 e0       	ldi	r20, 0x00	; 0
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	09 95       	icall
     832:	f6 01       	movw	r30, r12
     834:	91 87       	std	Z+9, r25	; 0x09
     836:	80 87       	std	Z+8, r24	; 0x08
     838:	86 e0       	ldi	r24, 0x06	; 6
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <mp_builtin_globals>:
     852:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
     856:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
     85a:	08 95       	ret

0000085c <mp_builtin_locals>:
     85c:	80 91 5e 6b 	lds	r24, 0x6B5E	; 0x806b5e <mp_state_ctx+0x4>
     860:	90 91 5f 6b 	lds	r25, 0x6B5F	; 0x806b5f <mp_state_ctx+0x5>
     864:	08 95       	ret

00000866 <peek_result>:
     866:	dc 01       	movw	r26, r24
     868:	18 96       	adiw	r26, 0x08	; 8
     86a:	2d 91       	ld	r18, X+
     86c:	3c 91       	ld	r19, X
     86e:	19 97       	sbiw	r26, 0x09	; 9
     870:	62 17       	cp	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	10 f0       	brcs	.+4      	; 0x87a <peek_result+0x14>
     876:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     87a:	21 50       	subi	r18, 0x01	; 1
     87c:	30 48       	sbci	r19, 0x80	; 128
     87e:	26 1b       	sub	r18, r22
     880:	37 0b       	sbc	r19, r23
     882:	22 0f       	add	r18, r18
     884:	33 1f       	adc	r19, r19
     886:	dc 01       	movw	r26, r24
     888:	1a 96       	adiw	r26, 0x0a	; 10
     88a:	ed 91       	ld	r30, X+
     88c:	fc 91       	ld	r31, X
     88e:	1b 97       	sbiw	r26, 0x0b	; 11
     890:	e2 0f       	add	r30, r18
     892:	f3 1f       	adc	r31, r19
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	08 95       	ret

0000089a <pop_result>:
     89a:	dc 01       	movw	r26, r24
     89c:	18 96       	adiw	r26, 0x08	; 8
     89e:	2d 91       	ld	r18, X+
     8a0:	3c 91       	ld	r19, X
     8a2:	19 97       	sbiw	r26, 0x09	; 9
     8a4:	21 15       	cp	r18, r1
     8a6:	31 05       	cpc	r19, r1
     8a8:	11 f4       	brne	.+4      	; 0x8ae <pop_result+0x14>
     8aa:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     8ae:	1a 96       	adiw	r26, 0x0a	; 10
     8b0:	ed 91       	ld	r30, X+
     8b2:	fc 91       	ld	r31, X
     8b4:	1b 97       	sbiw	r26, 0x0b	; 11
     8b6:	21 50       	subi	r18, 0x01	; 1
     8b8:	31 09       	sbc	r19, r1
     8ba:	19 96       	adiw	r26, 0x09	; 9
     8bc:	3c 93       	st	X, r19
     8be:	2e 93       	st	-X, r18
     8c0:	18 97       	sbiw	r26, 0x08	; 8
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	e2 0f       	add	r30, r18
     8c8:	f3 1f       	adc	r31, r19
     8ca:	80 81       	ld	r24, Z
     8cc:	91 81       	ldd	r25, Z+1	; 0x01
     8ce:	08 95       	ret

000008d0 <emit_get_cur_to_write_code_info>:
     8d0:	fc 01       	movw	r30, r24
     8d2:	83 81       	ldd	r24, Z+3	; 0x03
     8d4:	84 30       	cpi	r24, 0x04	; 4
     8d6:	40 f4       	brcc	.+16     	; 0x8e8 <emit_get_cur_to_write_code_info+0x18>
     8d8:	81 89       	ldd	r24, Z+17	; 0x11
     8da:	92 89       	ldd	r25, Z+18	; 0x12
     8dc:	68 0f       	add	r22, r24
     8de:	79 1f       	adc	r23, r25
     8e0:	72 8b       	std	Z+18, r23	; 0x12
     8e2:	61 8b       	std	Z+17, r22	; 0x11
     8e4:	cf 01       	movw	r24, r30
     8e6:	08 95       	ret
     8e8:	81 89       	ldd	r24, Z+17	; 0x11
     8ea:	92 89       	ldd	r25, Z+18	; 0x12
     8ec:	68 0f       	add	r22, r24
     8ee:	79 1f       	adc	r23, r25
     8f0:	23 89       	ldd	r18, Z+19	; 0x13
     8f2:	34 89       	ldd	r19, Z+20	; 0x14
     8f4:	26 17       	cp	r18, r22
     8f6:	37 07       	cpc	r19, r23
     8f8:	10 f4       	brcc	.+4      	; 0x8fe <emit_get_cur_to_write_code_info+0x2e>
     8fa:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     8fe:	21 8d       	ldd	r18, Z+25	; 0x19
     900:	32 8d       	ldd	r19, Z+26	; 0x1a
     902:	72 8b       	std	Z+18, r23	; 0x12
     904:	61 8b       	std	Z+17, r22	; 0x11
     906:	82 0f       	add	r24, r18
     908:	93 1f       	adc	r25, r19
     90a:	08 95       	ret

0000090c <emit_write_code_info_byte>:
     90c:	cf 93       	push	r28
     90e:	c6 2f       	mov	r28, r22
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	dd df       	rcall	.-70     	; 0x8d0 <emit_get_cur_to_write_code_info>
     916:	fc 01       	movw	r30, r24
     918:	c0 83       	st	Z, r28
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <emit_get_cur_to_write_bytecode>:
     91e:	fc 01       	movw	r30, r24
     920:	83 81       	ldd	r24, Z+3	; 0x03
     922:	84 30       	cpi	r24, 0x04	; 4
     924:	40 f4       	brcc	.+16     	; 0x936 <emit_get_cur_to_write_bytecode+0x18>
     926:	85 89       	ldd	r24, Z+21	; 0x15
     928:	96 89       	ldd	r25, Z+22	; 0x16
     92a:	68 0f       	add	r22, r24
     92c:	79 1f       	adc	r23, r25
     92e:	76 8b       	std	Z+22, r23	; 0x16
     930:	65 8b       	std	Z+21, r22	; 0x15
     932:	cf 01       	movw	r24, r30
     934:	08 95       	ret
     936:	25 89       	ldd	r18, Z+21	; 0x15
     938:	36 89       	ldd	r19, Z+22	; 0x16
     93a:	62 0f       	add	r22, r18
     93c:	73 1f       	adc	r23, r19
     93e:	87 89       	ldd	r24, Z+23	; 0x17
     940:	90 8d       	ldd	r25, Z+24	; 0x18
     942:	86 17       	cp	r24, r22
     944:	97 07       	cpc	r25, r23
     946:	10 f4       	brcc	.+4      	; 0x94c <emit_get_cur_to_write_bytecode+0x2e>
     948:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     94c:	83 89       	ldd	r24, Z+19	; 0x13
     94e:	94 89       	ldd	r25, Z+20	; 0x14
     950:	82 0f       	add	r24, r18
     952:	93 1f       	adc	r25, r19
     954:	21 8d       	ldd	r18, Z+25	; 0x19
     956:	32 8d       	ldd	r19, Z+26	; 0x1a
     958:	76 8b       	std	Z+22, r23	; 0x16
     95a:	65 8b       	std	Z+21, r22	; 0x15
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	08 95       	ret

00000962 <emit_write_bytecode_raw_byte>:
     962:	cf 93       	push	r28
     964:	c6 2f       	mov	r28, r22
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	d9 df       	rcall	.-78     	; 0x91e <emit_get_cur_to_write_bytecode>
     96c:	fc 01       	movw	r30, r24
     96e:	c0 83       	st	Z, r28
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <dict_iter_next>:
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	fc 01       	movw	r30, r24
     97e:	c4 81       	ldd	r28, Z+4	; 0x04
     980:	d5 81       	ldd	r29, Z+5	; 0x05
     982:	fb 01       	movw	r30, r22
     984:	20 81       	ld	r18, Z
     986:	31 81       	ldd	r19, Z+1	; 0x01
     988:	2c 17       	cp	r18, r28
     98a:	3d 07       	cpc	r19, r29
     98c:	b0 f4       	brcc	.+44     	; 0x9ba <dict_iter_next+0x46>
     98e:	fc 01       	movw	r30, r24
     990:	06 81       	ldd	r16, Z+6	; 0x06
     992:	17 81       	ldd	r17, Z+7	; 0x07
     994:	f9 01       	movw	r30, r18
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	ee 0f       	add	r30, r30
     99c:	ff 1f       	adc	r31, r31
     99e:	e0 0f       	add	r30, r16
     9a0:	f1 1f       	adc	r31, r17
     9a2:	df 01       	movw	r26, r30
     9a4:	a0 1b       	sub	r26, r16
     9a6:	b1 0b       	sbc	r27, r17
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	41 15       	cp	r20, r1
     9ae:	51 05       	cpc	r21, r1
     9b0:	61 f1       	breq	.+88     	; 0xa0a <dict_iter_next+0x96>
     9b2:	44 30       	cpi	r20, 0x04	; 4
     9b4:	51 05       	cpc	r21, r1
     9b6:	f1 f4       	brne	.+60     	; 0x9f4 <dict_iter_next+0x80>
     9b8:	28 c0       	rjmp	.+80     	; 0xa0a <dict_iter_next+0x96>
     9ba:	fc 01       	movw	r30, r24
     9bc:	62 81       	ldd	r22, Z+2	; 0x02
     9be:	66 95       	lsr	r22
     9c0:	66 95       	lsr	r22
     9c2:	66 95       	lsr	r22
     9c4:	83 81       	ldd	r24, Z+3	; 0x03
     9c6:	98 2f       	mov	r25, r24
     9c8:	92 95       	swap	r25
     9ca:	99 0f       	add	r25, r25
     9cc:	90 7e       	andi	r25, 0xE0	; 224
     9ce:	49 2f       	mov	r20, r25
     9d0:	46 2b       	or	r20, r22
     9d2:	58 2f       	mov	r21, r24
     9d4:	56 95       	lsr	r21
     9d6:	56 95       	lsr	r21
     9d8:	56 95       	lsr	r21
     9da:	45 2b       	or	r20, r21
     9dc:	29 f0       	breq	.+10     	; 0x9e8 <dict_iter_next+0x74>
     9de:	c2 17       	cp	r28, r18
     9e0:	d3 07       	cpc	r29, r19
     9e2:	29 f0       	breq	.+10     	; 0x9ee <dict_iter_next+0x7a>
     9e4:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	15 c0       	rjmp	.+42     	; 0xa18 <dict_iter_next+0xa4>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	12 c0       	rjmp	.+36     	; 0xa18 <dict_iter_next+0xa4>
     9f4:	2f 5f       	subi	r18, 0xFF	; 255
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	fb 01       	movw	r30, r22
     9fa:	31 83       	std	Z+1, r19	; 0x01
     9fc:	20 83       	st	Z, r18
     9fe:	fc 01       	movw	r30, r24
     a00:	86 81       	ldd	r24, Z+6	; 0x06
     a02:	97 81       	ldd	r25, Z+7	; 0x07
     a04:	8a 0f       	add	r24, r26
     a06:	9b 1f       	adc	r25, r27
     a08:	07 c0       	rjmp	.+14     	; 0xa18 <dict_iter_next+0xa4>
     a0a:	2f 5f       	subi	r18, 0xFF	; 255
     a0c:	3f 4f       	sbci	r19, 0xFF	; 255
     a0e:	34 96       	adiw	r30, 0x04	; 4
     a10:	2c 17       	cp	r18, r28
     a12:	3d 07       	cpc	r19, r29
     a14:	30 f2       	brcs	.-116    	; 0x9a2 <dict_iter_next+0x2e>
     a16:	d1 cf       	rjmp	.-94     	; 0x9ba <dict_iter_next+0x46>
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	08 95       	ret

00000a22 <dict_view_getiter>:
     a22:	dc 01       	movw	r26, r24
     a24:	fb 01       	movw	r30, r22
     a26:	83 70       	andi	r24, 0x03	; 3
     a28:	99 27       	eor	r25, r25
     a2a:	89 2b       	or	r24, r25
     a2c:	31 f4       	brne	.+12     	; 0xa3a <dict_view_getiter+0x18>
     a2e:	8d 91       	ld	r24, X+
     a30:	9c 91       	ld	r25, X
     a32:	11 97       	sbiw	r26, 0x01	; 1
     a34:	86 50       	subi	r24, 0x06	; 6
     a36:	93 42       	sbci	r25, 0x23	; 35
     a38:	11 f0       	breq	.+4      	; 0xa3e <dict_view_getiter+0x1c>
     a3a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     a3e:	86 ee       	ldi	r24, 0xE6	; 230
     a40:	92 e2       	ldi	r25, 0x22	; 34
     a42:	91 83       	std	Z+1, r25	; 0x01
     a44:	80 83       	st	Z, r24
     a46:	14 96       	adiw	r26, 0x04	; 4
     a48:	8c 91       	ld	r24, X
     a4a:	14 97       	sbiw	r26, 0x04	; 4
     a4c:	82 83       	std	Z+2, r24	; 0x02
     a4e:	12 96       	adiw	r26, 0x02	; 2
     a50:	8d 91       	ld	r24, X+
     a52:	9c 91       	ld	r25, X
     a54:	13 97       	sbiw	r26, 0x03	; 3
     a56:	94 83       	std	Z+4, r25	; 0x04
     a58:	83 83       	std	Z+3, r24	; 0x03
     a5a:	16 82       	std	Z+6, r1	; 0x06
     a5c:	15 82       	std	Z+5, r1	; 0x05
     a5e:	cb 01       	movw	r24, r22
     a60:	08 95       	ret

00000a62 <dict_getiter>:
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	fb 01       	movw	r30, r22
     a68:	9c 01       	movw	r18, r24
     a6a:	23 70       	andi	r18, 0x03	; 3
     a6c:	33 27       	eor	r19, r19
     a6e:	23 2b       	or	r18, r19
     a70:	51 f4       	brne	.+20     	; 0xa86 <dict_getiter+0x24>
     a72:	ec 01       	movw	r28, r24
     a74:	a8 81       	ld	r26, Y
     a76:	b9 81       	ldd	r27, Y+1	; 0x01
     a78:	18 96       	adiw	r26, 0x08	; 8
     a7a:	2d 91       	ld	r18, X+
     a7c:	3c 91       	ld	r19, X
     a7e:	19 97       	sbiw	r26, 0x09	; 9
     a80:	2a 5a       	subi	r18, 0xAA	; 170
     a82:	39 48       	sbci	r19, 0x89	; 137
     a84:	11 f0       	breq	.+4      	; 0xa8a <dict_getiter+0x28>
     a86:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     a8a:	26 ee       	ldi	r18, 0xE6	; 230
     a8c:	32 e2       	ldi	r19, 0x22	; 34
     a8e:	31 83       	std	Z+1, r19	; 0x01
     a90:	20 83       	st	Z, r18
     a92:	21 e0       	ldi	r18, 0x01	; 1
     a94:	22 83       	std	Z+2, r18	; 0x02
     a96:	94 83       	std	Z+4, r25	; 0x04
     a98:	83 83       	std	Z+3, r24	; 0x03
     a9a:	16 82       	std	Z+6, r1	; 0x06
     a9c:	15 82       	std	Z+5, r1	; 0x05
     a9e:	cb 01       	movw	r24, r22
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <list_reverse>:
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
     aaa:	0f 93       	push	r16
     aac:	1f 93       	push	r17
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	dc 01       	movw	r26, r24
     ab4:	83 70       	andi	r24, 0x03	; 3
     ab6:	99 27       	eor	r25, r25
     ab8:	89 2b       	or	r24, r25
     aba:	31 f4       	brne	.+12     	; 0xac8 <list_reverse+0x22>
     abc:	8d 91       	ld	r24, X+
     abe:	9c 91       	ld	r25, X
     ac0:	11 97       	sbiw	r26, 0x01	; 1
     ac2:	8c 52       	subi	r24, 0x2C	; 44
     ac4:	9d 41       	sbci	r25, 0x1D	; 29
     ac6:	11 f0       	breq	.+4      	; 0xacc <list_reverse+0x26>
     ac8:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
     acc:	14 96       	adiw	r26, 0x04	; 4
     ace:	cd 91       	ld	r28, X+
     ad0:	dc 91       	ld	r29, X
     ad2:	15 97       	sbiw	r26, 0x05	; 5
     ad4:	8e 01       	movw	r16, r28
     ad6:	dd 23       	and	r29, r29
     ad8:	14 f4       	brge	.+4      	; 0xade <list_reverse+0x38>
     ada:	0f 5f       	subi	r16, 0xFF	; 255
     adc:	1f 4f       	sbci	r17, 0xFF	; 255
     ade:	15 95       	asr	r17
     ae0:	07 95       	ror	r16
     ae2:	10 16       	cp	r1, r16
     ae4:	11 06       	cpc	r1, r17
     ae6:	5c f5       	brge	.+86     	; 0xb3e <list_reverse+0x98>
     ae8:	00 0f       	add	r16, r16
     aea:	11 1f       	adc	r17, r17
     aec:	cc 0f       	add	r28, r28
     aee:	dd 1f       	adc	r29, r29
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	7e 01       	movw	r14, r28
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	e8 1a       	sub	r14, r24
     afa:	f1 08       	sbc	r15, r1
     afc:	16 96       	adiw	r26, 0x06	; 6
     afe:	6d 91       	ld	r22, X+
     b00:	7c 91       	ld	r23, X
     b02:	17 97       	sbiw	r26, 0x07	; 7
     b04:	fb 01       	movw	r30, r22
     b06:	e2 0f       	add	r30, r18
     b08:	f3 1f       	adc	r31, r19
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	a7 01       	movw	r20, r14
     b10:	42 1b       	sub	r20, r18
     b12:	53 0b       	sbc	r21, r19
     b14:	64 0f       	add	r22, r20
     b16:	75 1f       	adc	r23, r21
     b18:	eb 01       	movw	r28, r22
     b1a:	68 81       	ld	r22, Y
     b1c:	79 81       	ldd	r23, Y+1	; 0x01
     b1e:	71 83       	std	Z+1, r23	; 0x01
     b20:	60 83       	st	Z, r22
     b22:	16 96       	adiw	r26, 0x06	; 6
     b24:	6d 91       	ld	r22, X+
     b26:	7c 91       	ld	r23, X
     b28:	17 97       	sbiw	r26, 0x07	; 7
     b2a:	fb 01       	movw	r30, r22
     b2c:	e4 0f       	add	r30, r20
     b2e:	f5 1f       	adc	r31, r21
     b30:	91 83       	std	Z+1, r25	; 0x01
     b32:	80 83       	st	Z, r24
     b34:	2e 5f       	subi	r18, 0xFE	; 254
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	20 17       	cp	r18, r16
     b3a:	31 07       	cpc	r19, r17
     b3c:	f9 f6       	brne	.-66     	; 0xafc <list_reverse+0x56>
     b3e:	86 e0       	ldi	r24, 0x06	; 6
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	08 95       	ret

00000b50 <is_string_or_bytes>:
     b50:	fc 01       	movw	r30, r24
     b52:	20 85       	ldd	r18, Z+8	; 0x08
     b54:	31 85       	ldd	r19, Z+9	; 0x09
     b56:	27 32       	cpi	r18, 0x27	; 39
     b58:	31 05       	cpc	r19, r1
     b5a:	c9 f1       	breq	.+114    	; 0xbce <is_string_or_bytes+0x7e>
     b5c:	22 32       	cpi	r18, 0x22	; 34
     b5e:	31 05       	cpc	r19, r1
     b60:	c9 f1       	breq	.+114    	; 0xbd4 <is_string_or_bytes+0x84>
     b62:	25 37       	cpi	r18, 0x75	; 117
     b64:	31 05       	cpc	r19, r1
     b66:	29 f0       	breq	.+10     	; 0xb72 <is_string_or_bytes+0x22>
     b68:	a9 01       	movw	r20, r18
     b6a:	4f 7e       	andi	r20, 0xEF	; 239
     b6c:	42 36       	cpi	r20, 0x62	; 98
     b6e:	51 05       	cpc	r21, r1
     b70:	49 f4       	brne	.+18     	; 0xb84 <is_string_or_bytes+0x34>
     b72:	fc 01       	movw	r30, r24
     b74:	42 85       	ldd	r20, Z+10	; 0x0a
     b76:	53 85       	ldd	r21, Z+11	; 0x0b
     b78:	47 32       	cpi	r20, 0x27	; 39
     b7a:	51 05       	cpc	r21, r1
     b7c:	71 f1       	breq	.+92     	; 0xbda <is_string_or_bytes+0x8a>
     b7e:	42 32       	cpi	r20, 0x22	; 34
     b80:	51 05       	cpc	r21, r1
     b82:	71 f1       	breq	.+92     	; 0xbe0 <is_string_or_bytes+0x90>
     b84:	22 37       	cpi	r18, 0x72	; 114
     b86:	31 05       	cpc	r19, r1
     b88:	91 f5       	brne	.+100    	; 0xbee <is_string_or_bytes+0x9e>
     b8a:	fc 01       	movw	r30, r24
     b8c:	22 85       	ldd	r18, Z+10	; 0x0a
     b8e:	33 85       	ldd	r19, Z+11	; 0x0b
     b90:	22 36       	cpi	r18, 0x62	; 98
     b92:	31 05       	cpc	r19, r1
     b94:	49 f0       	breq	.+18     	; 0xba8 <is_string_or_bytes+0x58>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	27 c0       	rjmp	.+78     	; 0xbea <is_string_or_bytes+0x9a>
     b9c:	fc 01       	movw	r30, r24
     b9e:	22 85       	ldd	r18, Z+10	; 0x0a
     ba0:	33 85       	ldd	r19, Z+11	; 0x0b
     ba2:	22 37       	cpi	r18, 0x72	; 114
     ba4:	31 05       	cpc	r19, r1
     ba6:	f9 f4       	brne	.+62     	; 0xbe6 <is_string_or_bytes+0x96>
     ba8:	fc 01       	movw	r30, r24
     baa:	84 85       	ldd	r24, Z+12	; 0x0c
     bac:	95 85       	ldd	r25, Z+13	; 0x0d
     bae:	87 32       	cpi	r24, 0x27	; 39
     bb0:	91 05       	cpc	r25, r1
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <is_string_or_bytes+0x74>
     bb4:	31 e0       	ldi	r19, 0x01	; 1
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	82 97       	sbiw	r24, 0x22	; 34
     bba:	09 f0       	breq	.+2      	; 0xbbe <is_string_or_bytes+0x6e>
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	83 2f       	mov	r24, r19
     bc0:	92 2f       	mov	r25, r18
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <is_string_or_bytes+0x78>
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	81 70       	andi	r24, 0x01	; 1
     bca:	99 27       	eor	r25, r25
     bcc:	0e c0       	rjmp	.+28     	; 0xbea <is_string_or_bytes+0x9a>
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0b c0       	rjmp	.+22     	; 0xbea <is_string_or_bytes+0x9a>
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 c0       	rjmp	.+16     	; 0xbea <is_string_or_bytes+0x9a>
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	05 c0       	rjmp	.+10     	; 0xbea <is_string_or_bytes+0x9a>
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <is_string_or_bytes+0x9a>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	81 70       	andi	r24, 0x01	; 1
     bec:	08 95       	ret
     bee:	22 36       	cpi	r18, 0x62	; 98
     bf0:	31 05       	cpc	r19, r1
     bf2:	a1 f2       	breq	.-88     	; 0xb9c <is_string_or_bytes+0x4c>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	f8 cf       	rjmp	.-16     	; 0xbea <is_string_or_bytes+0x9a>

00000bfa <skip_whitespace>:
     bfa:	df 92       	push	r13
     bfc:	ef 92       	push	r14
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
     c0a:	e6 2e       	mov	r14, r22
     c0c:	f1 2c       	mov	r15, r1
     c0e:	dd 24       	eor	r13, r13
     c10:	d3 94       	inc	r13
     c12:	34 c0       	rjmp	.+104    	; 0xc7c <skip_whitespace+0x82>
     c14:	0a 30       	cpi	r16, 0x0A	; 10
     c16:	11 05       	cpc	r17, r1
     c18:	51 f4       	brne	.+20     	; 0xc2e <skip_whitespace+0x34>
     c1a:	ee 20       	and	r14, r14
     c1c:	21 f0       	breq	.+8      	; 0xc26 <skip_whitespace+0x2c>
     c1e:	8c 89       	ldd	r24, Y+20	; 0x14
     c20:	9d 89       	ldd	r25, Y+21	; 0x15
     c22:	89 2b       	or	r24, r25
     c24:	b9 f1       	breq	.+110    	; 0xc94 <skip_whitespace+0x9a>
     c26:	ce 01       	movw	r24, r28
     c28:	39 db       	rcall	.-2446   	; 0x29c <next_char>
     c2a:	fd 2c       	mov	r15, r13
     c2c:	27 c0       	rjmp	.+78     	; 0xc7c <skip_whitespace+0x82>
     c2e:	c8 01       	movw	r24, r16
     c30:	c5 da       	rcall	.-2678   	; 0x1bc <unichar_isspace>
     c32:	88 23       	and	r24, r24
     c34:	19 f0       	breq	.+6      	; 0xc3c <skip_whitespace+0x42>
     c36:	ce 01       	movw	r24, r28
     c38:	31 db       	rcall	.-2462   	; 0x29c <next_char>
     c3a:	20 c0       	rjmp	.+64     	; 0xc7c <skip_whitespace+0x82>
     c3c:	03 32       	cpi	r16, 0x23	; 35
     c3e:	11 05       	cpc	r17, r1
     c40:	a9 f4       	brne	.+42     	; 0xc6c <skip_whitespace+0x72>
     c42:	ce 01       	movw	r24, r28
     c44:	2b db       	rcall	.-2474   	; 0x29c <next_char>
     c46:	88 85       	ldd	r24, Y+8	; 0x08
     c48:	99 85       	ldd	r25, Y+9	; 0x09
     c4a:	8f 3f       	cpi	r24, 0xFF	; 255
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	92 07       	cpc	r25, r18
     c50:	a9 f0       	breq	.+42     	; 0xc7c <skip_whitespace+0x82>
     c52:	0a 97       	sbiw	r24, 0x0a	; 10
     c54:	99 f0       	breq	.+38     	; 0xc7c <skip_whitespace+0x82>
     c56:	ce 01       	movw	r24, r28
     c58:	21 db       	rcall	.-2494   	; 0x29c <next_char>
     c5a:	88 85       	ldd	r24, Y+8	; 0x08
     c5c:	99 85       	ldd	r25, Y+9	; 0x09
     c5e:	8f 3f       	cpi	r24, 0xFF	; 255
     c60:	2f ef       	ldi	r18, 0xFF	; 255
     c62:	92 07       	cpc	r25, r18
     c64:	59 f0       	breq	.+22     	; 0xc7c <skip_whitespace+0x82>
     c66:	0a 97       	sbiw	r24, 0x0a	; 10
     c68:	b1 f7       	brne	.-20     	; 0xc56 <skip_whitespace+0x5c>
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <skip_whitespace+0x82>
     c6c:	0c 35       	cpi	r16, 0x5C	; 92
     c6e:	11 05       	cpc	r17, r1
     c70:	89 f4       	brne	.+34     	; 0xc94 <skip_whitespace+0x9a>
     c72:	8a 85       	ldd	r24, Y+10	; 0x0a
     c74:	9b 85       	ldd	r25, Y+11	; 0x0b
     c76:	0a 97       	sbiw	r24, 0x0a	; 10
     c78:	69 f4       	brne	.+26     	; 0xc94 <skip_whitespace+0x9a>
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <skip_whitespace+0x90>
     c7c:	08 85       	ldd	r16, Y+8	; 0x08
     c7e:	19 85       	ldd	r17, Y+9	; 0x09
     c80:	0f 3f       	cpi	r16, 0xFF	; 255
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	18 07       	cpc	r17, r24
     c86:	31 f6       	brne	.-116    	; 0xc14 <skip_whitespace+0x1a>
     c88:	05 c0       	rjmp	.+10     	; 0xc94 <skip_whitespace+0x9a>
     c8a:	ce 01       	movw	r24, r28
     c8c:	07 db       	rcall	.-2546   	; 0x29c <next_char>
     c8e:	ce 01       	movw	r24, r28
     c90:	05 db       	rcall	.-2550   	; 0x29c <next_char>
     c92:	f4 cf       	rjmp	.-24     	; 0xc7c <skip_whitespace+0x82>
     c94:	8f 2d       	mov	r24, r15
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	08 95       	ret

00000ca6 <CALLBACK_USB_GetDescriptor>:
     ca6:	29 2f       	mov	r18, r25
     ca8:	33 27       	eor	r19, r19
     caa:	22 30       	cpi	r18, 0x02	; 2
     cac:	31 05       	cpc	r19, r1
     cae:	59 f0       	breq	.+22     	; 0xcc6 <CALLBACK_USB_GetDescriptor+0x20>
     cb0:	23 30       	cpi	r18, 0x03	; 3
     cb2:	31 05       	cpc	r19, r1
     cb4:	69 f0       	breq	.+26     	; 0xcd0 <CALLBACK_USB_GetDescriptor+0x2a>
     cb6:	21 30       	cpi	r18, 0x01	; 1
     cb8:	31 05       	cpc	r19, r1
     cba:	21 f5       	brne	.+72     	; 0xd04 <CALLBACK_USB_GetDescriptor+0x5e>
     cbc:	82 e1       	ldi	r24, 0x12	; 18
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	24 e2       	ldi	r18, 0x24	; 36
     cc2:	31 e0       	ldi	r19, 0x01	; 1
     cc4:	28 c0       	rjmp	.+80     	; 0xd16 <CALLBACK_USB_GetDescriptor+0x70>
     cc6:	8e e3       	ldi	r24, 0x3E	; 62
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	26 ee       	ldi	r18, 0xE6	; 230
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	23 c0       	rjmp	.+70     	; 0xd16 <CALLBACK_USB_GetDescriptor+0x70>
     cd0:	99 27       	eor	r25, r25
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	91 05       	cpc	r25, r1
     cd6:	51 f0       	breq	.+20     	; 0xcec <CALLBACK_USB_GetDescriptor+0x46>
     cd8:	18 f0       	brcs	.+6      	; 0xce0 <CALLBACK_USB_GetDescriptor+0x3a>
     cda:	02 97       	sbiw	r24, 0x02	; 2
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <CALLBACK_USB_GetDescriptor+0x52>
     cde:	17 c0       	rjmp	.+46     	; 0xd0e <CALLBACK_USB_GetDescriptor+0x68>
     ce0:	e2 ee       	ldi	r30, 0xE2	; 226
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	84 91       	lpm	r24, Z
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9f 01       	movw	r18, r30
     cea:	15 c0       	rjmp	.+42     	; 0xd16 <CALLBACK_USB_GetDescriptor+0x70>
     cec:	e8 ec       	ldi	r30, 0xC8	; 200
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	84 91       	lpm	r24, Z
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	9f 01       	movw	r18, r30
     cf6:	0f c0       	rjmp	.+30     	; 0xd16 <CALLBACK_USB_GetDescriptor+0x70>
     cf8:	e8 e9       	ldi	r30, 0x98	; 152
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	84 91       	lpm	r24, Z
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9f 01       	movw	r18, r30
     d02:	09 c0       	rjmp	.+18     	; 0xd16 <CALLBACK_USB_GetDescriptor+0x70>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <CALLBACK_USB_GetDescriptor+0x70>
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	fa 01       	movw	r30, r20
     d18:	31 83       	std	Z+1, r19	; 0x01
     d1a:	20 83       	st	Z, r18
     d1c:	08 95       	ret

00000d1e <nlr_push_tail>:
     d1e:	ea e5       	ldi	r30, 0x5A	; 90
     d20:	fb e6       	ldi	r31, 0x6B	; 107
     d22:	20 85       	ldd	r18, Z+8	; 0x08
     d24:	31 85       	ldd	r19, Z+9	; 0x09
     d26:	dc 01       	movw	r26, r24
     d28:	2d 93       	st	X+, r18
     d2a:	3c 93       	st	X, r19
     d2c:	91 87       	std	Z+9, r25	; 0x09
     d2e:	80 87       	std	Z+8, r24	; 0x08
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	08 95       	ret

00000d36 <nlr_pop>:
     d36:	ea e5       	ldi	r30, 0x5A	; 90
     d38:	fb e6       	ldi	r31, 0x6B	; 107
     d3a:	a0 85       	ldd	r26, Z+8	; 0x08
     d3c:	b1 85       	ldd	r27, Z+9	; 0x09
     d3e:	8d 91       	ld	r24, X+
     d40:	9c 91       	ld	r25, X
     d42:	91 87       	std	Z+9, r25	; 0x09
     d44:	80 87       	std	Z+8, r24	; 0x08
     d46:	08 95       	ret

00000d48 <gc_init>:
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	ec 01       	movw	r28, r24
     d4e:	fb 01       	movw	r30, r22
     d50:	e8 7f       	andi	r30, 0xF8	; 248
     d52:	9f 01       	movw	r18, r30
     d54:	28 1b       	sub	r18, r24
     d56:	39 0b       	sbc	r19, r25
     d58:	af e3       	ldi	r26, 0x3F	; 63
     d5a:	b8 ef       	ldi	r27, 0xF8	; 248
     d5c:	0e 94 31 c2 	call	0x18462	; 0x18462 <__umulhisi3>
     d60:	ac 01       	movw	r20, r24
     d62:	56 95       	lsr	r21
     d64:	47 95       	ror	r20
     d66:	52 95       	swap	r21
     d68:	42 95       	swap	r20
     d6a:	4f 70       	andi	r20, 0x0F	; 15
     d6c:	45 27       	eor	r20, r21
     d6e:	5f 70       	andi	r21, 0x0F	; 15
     d70:	45 27       	eor	r20, r21
     d72:	50 93 ad 6b 	sts	0x6BAD, r21	; 0x806bad <mp_state_ctx+0x53>
     d76:	40 93 ac 6b 	sts	0x6BAC, r20	; 0x806bac <mp_state_ctx+0x52>
     d7a:	d0 93 ab 6b 	sts	0x6BAB, r29	; 0x806bab <mp_state_ctx+0x51>
     d7e:	c0 93 aa 6b 	sts	0x6BAA, r28	; 0x806baa <mp_state_ctx+0x50>
     d82:	ca 01       	movw	r24, r20
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	82 95       	swap	r24
     d8a:	92 95       	swap	r25
     d8c:	90 7f       	andi	r25, 0xF0	; 240
     d8e:	98 27       	eor	r25, r24
     d90:	80 7f       	andi	r24, 0xF0	; 240
     d92:	98 27       	eor	r25, r24
     d94:	9f 01       	movw	r18, r30
     d96:	28 1b       	sub	r18, r24
     d98:	39 0b       	sbc	r19, r25
     d9a:	30 93 af 6b 	sts	0x6BAF, r19	; 0x806baf <mp_state_ctx+0x55>
     d9e:	20 93 ae 6b 	sts	0x6BAE, r18	; 0x806bae <mp_state_ctx+0x54>
     da2:	f0 93 b1 6b 	sts	0x6BB1, r31	; 0x806bb1 <mp_state_ctx+0x57>
     da6:	e0 93 b0 6b 	sts	0x6BB0, r30	; 0x806bb0 <mp_state_ctx+0x56>
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	ce 01       	movw	r24, r28
     db0:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
     db4:	10 92 37 6c 	sts	0x6C37, r1	; 0x806c37 <mp_state_ctx+0xdd>
     db8:	10 92 36 6c 	sts	0x6C36, r1	; 0x806c36 <mp_state_ctx+0xdc>
     dbc:	10 92 5d 6b 	sts	0x6B5D, r1	; 0x806b5d <mp_state_ctx+0x3>
     dc0:	10 92 5c 6b 	sts	0x6B5C, r1	; 0x806b5c <mp_state_ctx+0x2>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	90 93 35 6c 	sts	0x6C35, r25	; 0x806c35 <mp_state_ctx+0xdb>
     dcc:	80 93 34 6c 	sts	0x6C34, r24	; 0x806c34 <mp_state_ctx+0xda>
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <gc_lock>:
     dd6:	ea e5       	ldi	r30, 0x5A	; 90
     dd8:	fb e6       	ldi	r31, 0x6B	; 107
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	93 83       	std	Z+3, r25	; 0x03
     de2:	82 83       	std	Z+2, r24	; 0x02
     de4:	08 95       	ret

00000de6 <mp_micropython_heap_lock>:
     de6:	f7 df       	rcall	.-18     	; 0xdd6 <gc_lock>
     de8:	86 e0       	ldi	r24, 0x06	; 6
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	08 95       	ret

00000dee <gc_unlock>:
     dee:	ea e5       	ldi	r30, 0x5A	; 90
     df0:	fb e6       	ldi	r31, 0x6B	; 107
     df2:	82 81       	ldd	r24, Z+2	; 0x02
     df4:	93 81       	ldd	r25, Z+3	; 0x03
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	93 83       	std	Z+3, r25	; 0x03
     dfa:	82 83       	std	Z+2, r24	; 0x02
     dfc:	08 95       	ret

00000dfe <mp_micropython_heap_unlock>:
     dfe:	f7 df       	rcall	.-18     	; 0xdee <gc_unlock>
     e00:	80 91 5c 6b 	lds	r24, 0x6B5C	; 0x806b5c <mp_state_ctx+0x2>
     e04:	90 91 5d 6b 	lds	r25, 0x6B5D	; 0x806b5d <mp_state_ctx+0x3>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	81 60       	ori	r24, 0x01	; 1
     e0e:	08 95       	ret

00000e10 <gc_alloc>:
     e10:	8f 92       	push	r8
     e12:	9f 92       	push	r9
     e14:	af 92       	push	r10
     e16:	bf 92       	push	r11
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	07 96       	adiw	r24, 0x07	; 7
     e2a:	ec 01       	movw	r28, r24
     e2c:	d6 95       	lsr	r29
     e2e:	c7 95       	ror	r28
     e30:	d6 95       	lsr	r29
     e32:	c7 95       	ror	r28
     e34:	d6 95       	lsr	r29
     e36:	c7 95       	ror	r28
     e38:	20 97       	sbiw	r28, 0x00	; 0
     e3a:	09 f4       	brne	.+2      	; 0xe3e <gc_alloc+0x2e>
     e3c:	f1 c0       	rjmp	.+482    	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
     e3e:	80 91 5c 6b 	lds	r24, 0x6B5C	; 0x806b5c <mp_state_ctx+0x2>
     e42:	90 91 5d 6b 	lds	r25, 0x6B5D	; 0x806b5d <mp_state_ctx+0x3>
     e46:	89 2b       	or	r24, r25
     e48:	09 f0       	breq	.+2      	; 0xe4c <gc_alloc+0x3c>
     e4a:	ed c0       	rjmp	.+474    	; 0x1026 <__EEPROM_REGION_LENGTH__+0x26>
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	20 91 34 6c 	lds	r18, 0x6C34	; 0x806c34 <mp_state_ctx+0xda>
     e54:	30 91 35 6c 	lds	r19, 0x6C35	; 0x806c35 <mp_state_ctx+0xdb>
     e58:	23 2b       	or	r18, r19
     e5a:	09 f0       	breq	.+2      	; 0xe5e <gc_alloc+0x4e>
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	89 2e       	mov	r8, r25
     e60:	98 2e       	mov	r9, r24
     e62:	0f 2e       	mov	r0, r31
     e64:	f6 e3       	ldi	r31, 0x36	; 54
     e66:	ef 2e       	mov	r14, r31
     e68:	fc e6       	ldi	r31, 0x6C	; 108
     e6a:	ff 2e       	mov	r15, r31
     e6c:	f0 2d       	mov	r31, r0
     e6e:	0c ea       	ldi	r16, 0xAC	; 172
     e70:	1b e6       	ldi	r17, 0x6B	; 107
     e72:	0f 2e       	mov	r0, r31
     e74:	fa ea       	ldi	r31, 0xAA	; 170
     e76:	cf 2e       	mov	r12, r31
     e78:	fb e6       	ldi	r31, 0x6B	; 107
     e7a:	df 2e       	mov	r13, r31
     e7c:	f0 2d       	mov	r31, r0
     e7e:	bb 24       	eor	r11, r11
     e80:	b3 94       	inc	r11
     e82:	a1 2c       	mov	r10, r1
     e84:	f7 01       	movw	r30, r14
     e86:	40 81       	ld	r20, Z
     e88:	51 81       	ldd	r21, Z+1	; 0x01
     e8a:	f8 01       	movw	r30, r16
     e8c:	80 81       	ld	r24, Z
     e8e:	91 81       	ldd	r25, Z+1	; 0x01
     e90:	48 17       	cp	r20, r24
     e92:	59 07       	cpc	r21, r25
     e94:	08 f0       	brcs	.+2      	; 0xe98 <gc_alloc+0x88>
     e96:	50 c0       	rjmp	.+160    	; 0xf38 <gc_alloc+0x128>
     e98:	f6 01       	movw	r30, r12
     e9a:	a0 81       	ld	r26, Z
     e9c:	b1 81       	ldd	r27, Z+1	; 0x01
     e9e:	fd 01       	movw	r30, r26
     ea0:	e4 0f       	add	r30, r20
     ea2:	f5 1f       	adc	r31, r21
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	61 91       	ld	r22, Z+
     eaa:	76 2f       	mov	r23, r22
     eac:	73 70       	andi	r23, 0x03	; 3
     eae:	51 f4       	brne	.+20     	; 0xec4 <gc_alloc+0xb4>
     eb0:	2f 5f       	subi	r18, 0xFF	; 255
     eb2:	3f 4f       	sbci	r19, 0xFF	; 255
     eb4:	2c 17       	cp	r18, r28
     eb6:	3d 07       	cpc	r19, r29
     eb8:	38 f0       	brcs	.+14     	; 0xec8 <gc_alloc+0xb8>
     eba:	44 0f       	add	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	41 c0       	rjmp	.+130    	; 0xf46 <gc_alloc+0x136>
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	76 2f       	mov	r23, r22
     eca:	7c 70       	andi	r23, 0x0C	; 12
     ecc:	61 f4       	brne	.+24     	; 0xee6 <gc_alloc+0xd6>
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	2c 17       	cp	r18, r28
     ed4:	3d 07       	cpc	r19, r29
     ed6:	48 f0       	brcs	.+18     	; 0xeea <gc_alloc+0xda>
     ed8:	44 0f       	add	r20, r20
     eda:	55 1f       	adc	r21, r21
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	4f 5f       	subi	r20, 0xFF	; 255
     ee2:	5f 4f       	sbci	r21, 0xFF	; 255
     ee4:	30 c0       	rjmp	.+96     	; 0xf46 <gc_alloc+0x136>
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	76 2f       	mov	r23, r22
     eec:	70 73       	andi	r23, 0x30	; 48
     eee:	61 f4       	brne	.+24     	; 0xf08 <gc_alloc+0xf8>
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	2c 17       	cp	r18, r28
     ef6:	3d 07       	cpc	r19, r29
     ef8:	48 f0       	brcs	.+18     	; 0xf0c <gc_alloc+0xfc>
     efa:	44 0f       	add	r20, r20
     efc:	55 1f       	adc	r21, r21
     efe:	44 0f       	add	r20, r20
     f00:	55 1f       	adc	r21, r21
     f02:	4e 5f       	subi	r20, 0xFE	; 254
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	1f c0       	rjmp	.+62     	; 0xf46 <gc_alloc+0x136>
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	60 7c       	andi	r22, 0xC0	; 192
     f0e:	61 f4       	brne	.+24     	; 0xf28 <gc_alloc+0x118>
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	2c 17       	cp	r18, r28
     f16:	3d 07       	cpc	r19, r29
     f18:	48 f0       	brcs	.+18     	; 0xf2c <gc_alloc+0x11c>
     f1a:	44 0f       	add	r20, r20
     f1c:	55 1f       	adc	r21, r21
     f1e:	44 0f       	add	r20, r20
     f20:	55 1f       	adc	r21, r21
     f22:	4d 5f       	subi	r20, 0xFD	; 253
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <gc_alloc+0x136>
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	4f 5f       	subi	r20, 0xFF	; 255
     f2e:	5f 4f       	sbci	r21, 0xFF	; 255
     f30:	48 17       	cp	r20, r24
     f32:	59 07       	cpc	r21, r25
     f34:	08 f4       	brcc	.+2      	; 0xf38 <gc_alloc+0x128>
     f36:	b8 cf       	rjmp	.-144    	; 0xea8 <gc_alloc+0x98>
     f38:	89 28       	or	r8, r9
     f3a:	09 f0       	breq	.+2      	; 0xf3e <gc_alloc+0x12e>
     f3c:	77 c0       	rjmp	.+238    	; 0x102c <__EEPROM_REGION_LENGTH__+0x2c>
     f3e:	1b d9       	rcall	.-3530   	; 0x176 <gc_collect>
     f40:	8b 2c       	mov	r8, r11
     f42:	9a 2c       	mov	r9, r10
     f44:	9f cf       	rjmp	.-194    	; 0xe84 <gc_alloc+0x74>
     f46:	ca 01       	movw	r24, r20
     f48:	82 1b       	sub	r24, r18
     f4a:	93 0b       	sbc	r25, r19
     f4c:	bc 01       	movw	r22, r24
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	21 30       	cpi	r18, 0x01	; 1
     f54:	31 05       	cpc	r19, r1
     f56:	59 f4       	brne	.+22     	; 0xf6e <gc_alloc+0x15e>
     f58:	9a 01       	movw	r18, r20
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	36 95       	lsr	r19
     f60:	27 95       	ror	r18
     f62:	36 95       	lsr	r19
     f64:	27 95       	ror	r18
     f66:	30 93 37 6c 	sts	0x6C37, r19	; 0x806c37 <mp_state_ctx+0xdd>
     f6a:	20 93 36 6c 	sts	0x6C36, r18	; 0x806c36 <mp_state_ctx+0xdc>
     f6e:	9b 01       	movw	r18, r22
     f70:	36 95       	lsr	r19
     f72:	27 95       	ror	r18
     f74:	36 95       	lsr	r19
     f76:	27 95       	ror	r18
     f78:	a2 0f       	add	r26, r18
     f7a:	b3 1f       	adc	r27, r19
     f7c:	fb 01       	movw	r30, r22
     f7e:	e3 70       	andi	r30, 0x03	; 3
     f80:	ff 27       	eor	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <gc_alloc+0x180>
     f8c:	22 0f       	add	r18, r18
     f8e:	33 1f       	adc	r19, r19
     f90:	ea 95       	dec	r30
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <gc_alloc+0x17c>
     f94:	3c 91       	ld	r19, X
     f96:	23 2b       	or	r18, r19
     f98:	2c 93       	st	X, r18
     f9a:	02 96       	adiw	r24, 0x02	; 2
     f9c:	48 17       	cp	r20, r24
     f9e:	59 07       	cpc	r21, r25
     fa0:	00 f1       	brcs	.+64     	; 0xfe2 <gc_alloc+0x1d2>
     fa2:	ca ea       	ldi	r28, 0xAA	; 170
     fa4:	db e6       	ldi	r29, 0x6B	; 107
     fa6:	a2 e0       	ldi	r26, 0x02	; 2
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	9c 01       	movw	r18, r24
     fac:	36 95       	lsr	r19
     fae:	27 95       	ror	r18
     fb0:	36 95       	lsr	r19
     fb2:	27 95       	ror	r18
     fb4:	e8 81       	ld	r30, Y
     fb6:	f9 81       	ldd	r31, Y+1	; 0x01
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	9c 01       	movw	r18, r24
     fbe:	23 70       	andi	r18, 0x03	; 3
     fc0:	33 27       	eor	r19, r19
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	8d 01       	movw	r16, r26
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <gc_alloc+0x1be>
     fca:	00 0f       	add	r16, r16
     fcc:	11 1f       	adc	r17, r17
     fce:	2a 95       	dec	r18
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <gc_alloc+0x1ba>
     fd2:	98 01       	movw	r18, r16
     fd4:	30 81       	ld	r19, Z
     fd6:	23 2b       	or	r18, r19
     fd8:	20 83       	st	Z, r18
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	48 17       	cp	r20, r24
     fde:	59 07       	cpc	r21, r25
     fe0:	20 f7       	brcc	.-56     	; 0xfaa <gc_alloc+0x19a>
     fe2:	cb 01       	movw	r24, r22
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	c0 91 ae 6b 	lds	r28, 0x6BAE	; 0x806bae <mp_state_ctx+0x54>
     ff4:	d0 91 af 6b 	lds	r29, 0x6BAF	; 0x806baf <mp_state_ctx+0x55>
     ff8:	c8 0f       	add	r28, r24
     ffa:	d9 1f       	adc	r29, r25
     ffc:	4f 5f       	subi	r20, 0xFF	; 255
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	46 1b       	sub	r20, r22
    1002:	57 0b       	sbc	r21, r23
    1004:	44 0f       	add	r20, r20
    1006:	55 1f       	adc	r21, r21
    1008:	44 0f       	add	r20, r20
    100a:	55 1f       	adc	r21, r21
    100c:	44 0f       	add	r20, r20
    100e:	55 1f       	adc	r21, r21
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	ce 01       	movw	r24, r28
    1016:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    101a:	8c 2f       	mov	r24, r28
    101c:	9d 2f       	mov	r25, r29
    101e:	08 c0       	rjmp	.+16     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	05 c0       	rjmp	.+10     	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <__EEPROM_REGION_LENGTH__+0x30>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	df 91       	pop	r29
    1032:	cf 91       	pop	r28
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	bf 90       	pop	r11
    1042:	af 90       	pop	r10
    1044:	9f 90       	pop	r9
    1046:	8f 90       	pop	r8
    1048:	08 95       	ret

0000104a <m_malloc_maybe>:
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	e0 ce       	rjmp	.-576    	; 0xe10 <gc_alloc>
    1050:	08 95       	ret

00001052 <gc_free>:
    1052:	20 91 5c 6b 	lds	r18, 0x6B5C	; 0x806b5c <mp_state_ctx+0x2>
    1056:	30 91 5d 6b 	lds	r19, 0x6B5D	; 0x806b5d <mp_state_ctx+0x3>
    105a:	23 2b       	or	r18, r19
    105c:	09 f0       	breq	.+2      	; 0x1060 <gc_free+0xe>
    105e:	87 c0       	rjmp	.+270    	; 0x116e <gc_free+0x11c>
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	09 f4       	brne	.+2      	; 0x1066 <gc_free+0x14>
    1064:	84 c0       	rjmp	.+264    	; 0x116e <gc_free+0x11c>
    1066:	9c 01       	movw	r18, r24
    1068:	27 70       	andi	r18, 0x07	; 7
    106a:	33 27       	eor	r19, r19
    106c:	23 2b       	or	r18, r19
    106e:	71 f4       	brne	.+28     	; 0x108c <gc_free+0x3a>
    1070:	20 91 ae 6b 	lds	r18, 0x6BAE	; 0x806bae <mp_state_ctx+0x54>
    1074:	30 91 af 6b 	lds	r19, 0x6BAF	; 0x806baf <mp_state_ctx+0x55>
    1078:	82 17       	cp	r24, r18
    107a:	93 07       	cpc	r25, r19
    107c:	38 f0       	brcs	.+14     	; 0x108c <gc_free+0x3a>
    107e:	40 91 b0 6b 	lds	r20, 0x6BB0	; 0x806bb0 <mp_state_ctx+0x56>
    1082:	50 91 b1 6b 	lds	r21, 0x6BB1	; 0x806bb1 <mp_state_ctx+0x57>
    1086:	84 17       	cp	r24, r20
    1088:	95 07       	cpc	r25, r21
    108a:	10 f0       	brcs	.+4      	; 0x1090 <gc_free+0x3e>
    108c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    1090:	82 1b       	sub	r24, r18
    1092:	93 0b       	sbc	r25, r19
    1094:	9c 01       	movw	r18, r24
    1096:	36 95       	lsr	r19
    1098:	27 95       	ror	r18
    109a:	36 95       	lsr	r19
    109c:	27 95       	ror	r18
    109e:	36 95       	lsr	r19
    10a0:	27 95       	ror	r18
    10a2:	96 95       	lsr	r25
    10a4:	87 95       	ror	r24
    10a6:	92 95       	swap	r25
    10a8:	82 95       	swap	r24
    10aa:	8f 70       	andi	r24, 0x0F	; 15
    10ac:	89 27       	eor	r24, r25
    10ae:	9f 70       	andi	r25, 0x0F	; 15
    10b0:	89 27       	eor	r24, r25
    10b2:	e0 91 aa 6b 	lds	r30, 0x6BAA	; 0x806baa <mp_state_ctx+0x50>
    10b6:	f0 91 ab 6b 	lds	r31, 0x6BAB	; 0x806bab <mp_state_ctx+0x51>
    10ba:	e8 0f       	add	r30, r24
    10bc:	f9 1f       	adc	r31, r25
    10be:	40 81       	ld	r20, Z
    10c0:	50 e0       	ldi	r21, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	63 70       	andi	r22, 0x03	; 3
    10c6:	77 27       	eor	r23, r23
    10c8:	66 0f       	add	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <gc_free+0x80>
    10ce:	55 95       	asr	r21
    10d0:	47 95       	ror	r20
    10d2:	6a 95       	dec	r22
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <gc_free+0x7c>
    10d6:	43 70       	andi	r20, 0x03	; 3
    10d8:	55 27       	eor	r21, r21
    10da:	41 30       	cpi	r20, 0x01	; 1
    10dc:	51 05       	cpc	r21, r1
    10de:	11 f0       	breq	.+4      	; 0x10e4 <gc_free+0x92>
    10e0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    10e4:	40 91 36 6c 	lds	r20, 0x6C36	; 0x806c36 <mp_state_ctx+0xdc>
    10e8:	50 91 37 6c 	lds	r21, 0x6C37	; 0x806c37 <mp_state_ctx+0xdd>
    10ec:	84 17       	cp	r24, r20
    10ee:	95 07       	cpc	r25, r21
    10f0:	20 f4       	brcc	.+8      	; 0x10fa <gc_free+0xa8>
    10f2:	90 93 37 6c 	sts	0x6C37, r25	; 0x806c37 <mp_state_ctx+0xdd>
    10f6:	80 93 36 6c 	sts	0x6C36, r24	; 0x806c36 <mp_state_ctx+0xdc>
    10fa:	aa ea       	ldi	r26, 0xAA	; 170
    10fc:	bb e6       	ldi	r27, 0x6B	; 107
    10fe:	43 e0       	ldi	r20, 0x03	; 3
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	c9 01       	movw	r24, r18
    1104:	96 95       	lsr	r25
    1106:	87 95       	ror	r24
    1108:	96 95       	lsr	r25
    110a:	87 95       	ror	r24
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	11 97       	sbiw	r26, 0x01	; 1
    1112:	e8 0f       	add	r30, r24
    1114:	f9 1f       	adc	r31, r25
    1116:	c9 01       	movw	r24, r18
    1118:	83 70       	andi	r24, 0x03	; 3
    111a:	99 27       	eor	r25, r25
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	ba 01       	movw	r22, r20
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <gc_free+0xd6>
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <gc_free+0xd2>
    112c:	cb 01       	movw	r24, r22
    112e:	80 95       	com	r24
    1130:	90 81       	ld	r25, Z
    1132:	89 23       	and	r24, r25
    1134:	80 83       	st	Z, r24
    1136:	2f 5f       	subi	r18, 0xFF	; 255
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	c9 01       	movw	r24, r18
    113c:	96 95       	lsr	r25
    113e:	87 95       	ror	r24
    1140:	96 95       	lsr	r25
    1142:	87 95       	ror	r24
    1144:	ed 91       	ld	r30, X+
    1146:	fc 91       	ld	r31, X
    1148:	11 97       	sbiw	r26, 0x01	; 1
    114a:	e8 0f       	add	r30, r24
    114c:	f9 1f       	adc	r31, r25
    114e:	80 81       	ld	r24, Z
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	b9 01       	movw	r22, r18
    1154:	63 70       	andi	r22, 0x03	; 3
    1156:	77 27       	eor	r23, r23
    1158:	66 0f       	add	r22, r22
    115a:	77 1f       	adc	r23, r23
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <gc_free+0x110>
    115e:	95 95       	asr	r25
    1160:	87 95       	ror	r24
    1162:	6a 95       	dec	r22
    1164:	e2 f7       	brpl	.-8      	; 0x115e <gc_free+0x10c>
    1166:	83 70       	andi	r24, 0x03	; 3
    1168:	99 27       	eor	r25, r25
    116a:	02 97       	sbiw	r24, 0x02	; 2
    116c:	51 f2       	breq	.-108    	; 0x1102 <gc_free+0xb0>
    116e:	08 95       	ret

00001170 <mp_reader_mem_close>:
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
    1176:	88 81       	ld	r24, Y
    1178:	99 81       	ldd	r25, Y+1	; 0x01
    117a:	89 2b       	or	r24, r25
    117c:	19 f0       	breq	.+6      	; 0x1184 <mp_reader_mem_close+0x14>
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	67 df       	rcall	.-306    	; 0x1052 <gc_free>
    1184:	ce 01       	movw	r24, r28
    1186:	65 df       	rcall	.-310    	; 0x1052 <gc_free>
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <gc_realloc>:
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	8c 01       	movw	r16, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	94 2e       	mov	r9, r20
    11aa:	01 15       	cp	r16, r1
    11ac:	11 05       	cpc	r17, r1
    11ae:	21 f4       	brne	.+8      	; 0x11b8 <gc_realloc+0x2a>
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	2d de       	rcall	.-934    	; 0xe10 <gc_alloc>
    11b6:	7a c1       	rjmp	.+756    	; 0x14ac <gc_realloc+0x31e>
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	29 f4       	brne	.+10     	; 0x11c6 <gc_realloc+0x38>
    11bc:	c8 01       	movw	r24, r16
    11be:	49 df       	rcall	.-366    	; 0x1052 <gc_free>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	73 c1       	rjmp	.+742    	; 0x14ac <gc_realloc+0x31e>
    11c6:	20 91 5c 6b 	lds	r18, 0x6B5C	; 0x806b5c <mp_state_ctx+0x2>
    11ca:	30 91 5d 6b 	lds	r19, 0x6B5D	; 0x806b5d <mp_state_ctx+0x3>
    11ce:	23 2b       	or	r18, r19
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <gc_realloc+0x46>
    11d2:	5f c1       	rjmp	.+702    	; 0x1492 <gc_realloc+0x304>
    11d4:	98 01       	movw	r18, r16
    11d6:	27 70       	andi	r18, 0x07	; 7
    11d8:	33 27       	eor	r19, r19
    11da:	23 2b       	or	r18, r19
    11dc:	71 f4       	brne	.+28     	; 0x11fa <gc_realloc+0x6c>
    11de:	20 91 ae 6b 	lds	r18, 0x6BAE	; 0x806bae <mp_state_ctx+0x54>
    11e2:	30 91 af 6b 	lds	r19, 0x6BAF	; 0x806baf <mp_state_ctx+0x55>
    11e6:	02 17       	cp	r16, r18
    11e8:	13 07       	cpc	r17, r19
    11ea:	38 f0       	brcs	.+14     	; 0x11fa <gc_realloc+0x6c>
    11ec:	40 91 b0 6b 	lds	r20, 0x6BB0	; 0x806bb0 <mp_state_ctx+0x56>
    11f0:	50 91 b1 6b 	lds	r21, 0x6BB1	; 0x806bb1 <mp_state_ctx+0x57>
    11f4:	04 17       	cp	r16, r20
    11f6:	15 07       	cpc	r17, r21
    11f8:	10 f0       	brcs	.+4      	; 0x11fe <gc_realloc+0x70>
    11fa:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    11fe:	a8 01       	movw	r20, r16
    1200:	42 1b       	sub	r20, r18
    1202:	53 0b       	sbc	r21, r19
    1204:	9a 01       	movw	r18, r20
    1206:	fa 01       	movw	r30, r20
    1208:	f6 95       	lsr	r31
    120a:	e7 95       	ror	r30
    120c:	f6 95       	lsr	r31
    120e:	e7 95       	ror	r30
    1210:	f6 95       	lsr	r31
    1212:	e7 95       	ror	r30
    1214:	c0 90 aa 6b 	lds	r12, 0x6BAA	; 0x806baa <mp_state_ctx+0x50>
    1218:	d0 90 ab 6b 	lds	r13, 0x6BAB	; 0x806bab <mp_state_ctx+0x51>
    121c:	36 95       	lsr	r19
    121e:	27 95       	ror	r18
    1220:	32 95       	swap	r19
    1222:	22 95       	swap	r18
    1224:	2f 70       	andi	r18, 0x0F	; 15
    1226:	23 27       	eor	r18, r19
    1228:	3f 70       	andi	r19, 0x0F	; 15
    122a:	23 27       	eor	r18, r19
    122c:	d6 01       	movw	r26, r12
    122e:	a2 0f       	add	r26, r18
    1230:	b3 1f       	adc	r27, r19
    1232:	2c 91       	ld	r18, X
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	af 01       	movw	r20, r30
    1238:	43 70       	andi	r20, 0x03	; 3
    123a:	55 27       	eor	r21, r21
    123c:	44 0f       	add	r20, r20
    123e:	55 1f       	adc	r21, r21
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <gc_realloc+0xb8>
    1242:	35 95       	asr	r19
    1244:	27 95       	ror	r18
    1246:	4a 95       	dec	r20
    1248:	e2 f7       	brpl	.-8      	; 0x1242 <gc_realloc+0xb4>
    124a:	23 70       	andi	r18, 0x03	; 3
    124c:	33 27       	eor	r19, r19
    124e:	21 30       	cpi	r18, 0x01	; 1
    1250:	31 05       	cpc	r19, r1
    1252:	11 f0       	breq	.+4      	; 0x1258 <gc_realloc+0xca>
    1254:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    1258:	ab 01       	movw	r20, r22
    125a:	49 5f       	subi	r20, 0xF9	; 249
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	56 95       	lsr	r21
    1260:	47 95       	ror	r20
    1262:	56 95       	lsr	r21
    1264:	47 95       	ror	r20
    1266:	56 95       	lsr	r21
    1268:	47 95       	ror	r20
    126a:	a0 90 ac 6b 	lds	r10, 0x6BAC	; 0x806bac <mp_state_ctx+0x52>
    126e:	b0 90 ad 6b 	lds	r11, 0x6BAD	; 0x806bad <mp_state_ctx+0x53>
    1272:	aa 0c       	add	r10, r10
    1274:	bb 1c       	adc	r11, r11
    1276:	aa 0c       	add	r10, r10
    1278:	bb 1c       	adc	r11, r11
    127a:	bf 01       	movw	r22, r30
    127c:	6f 5f       	subi	r22, 0xFF	; 255
    127e:	7f 4f       	sbci	r23, 0xFF	; 255
    1280:	6a 15       	cp	r22, r10
    1282:	7b 05       	cpc	r23, r11
    1284:	68 f5       	brcc	.+90     	; 0x12e0 <gc_realloc+0x152>
    1286:	c1 e0       	ldi	r28, 0x01	; 1
    1288:	d0 e0       	ldi	r29, 0x00	; 0
    128a:	e1 2c       	mov	r14, r1
    128c:	f1 2c       	mov	r15, r1
    128e:	db 01       	movw	r26, r22
    1290:	b6 95       	lsr	r27
    1292:	a7 95       	ror	r26
    1294:	b6 95       	lsr	r27
    1296:	a7 95       	ror	r26
    1298:	ac 0d       	add	r26, r12
    129a:	bd 1d       	adc	r27, r13
    129c:	2c 91       	ld	r18, X
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	db 01       	movw	r26, r22
    12a2:	a3 70       	andi	r26, 0x03	; 3
    12a4:	bb 27       	eor	r27, r27
    12a6:	aa 0f       	add	r26, r26
    12a8:	bb 1f       	adc	r27, r27
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <gc_realloc+0x122>
    12ac:	35 95       	asr	r19
    12ae:	27 95       	ror	r18
    12b0:	aa 95       	dec	r26
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <gc_realloc+0x11e>
    12b4:	23 70       	andi	r18, 0x03	; 3
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	11 f4       	brne	.+4      	; 0x12be <gc_realloc+0x130>
    12ba:	21 96       	adiw	r28, 0x01	; 1
    12bc:	0b c0       	rjmp	.+22     	; 0x12d4 <gc_realloc+0x146>
    12be:	21 11       	cpse	r18, r1
    12c0:	13 c0       	rjmp	.+38     	; 0x12e8 <gc_realloc+0x15a>
    12c2:	af ef       	ldi	r26, 0xFF	; 255
    12c4:	ea 1a       	sub	r14, r26
    12c6:	fa 0a       	sbc	r15, r26
    12c8:	97 01       	movw	r18, r14
    12ca:	2c 0f       	add	r18, r28
    12cc:	3d 1f       	adc	r19, r29
    12ce:	24 17       	cp	r18, r20
    12d0:	35 07       	cpc	r19, r21
    12d2:	50 f4       	brcc	.+20     	; 0x12e8 <gc_realloc+0x15a>
    12d4:	6f 5f       	subi	r22, 0xFF	; 255
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	6a 15       	cp	r22, r10
    12da:	7b 05       	cpc	r23, r11
    12dc:	c0 f2       	brcs	.-80     	; 0x128e <gc_realloc+0x100>
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <gc_realloc+0x15a>
    12e0:	c1 e0       	ldi	r28, 0x01	; 1
    12e2:	d0 e0       	ldi	r29, 0x00	; 0
    12e4:	e1 2c       	mov	r14, r1
    12e6:	f1 2c       	mov	r15, r1
    12e8:	4c 17       	cp	r20, r28
    12ea:	5d 07       	cpc	r21, r29
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <gc_realloc+0x162>
    12ee:	d4 c0       	rjmp	.+424    	; 0x1498 <gc_realloc+0x30a>
    12f0:	4c 17       	cp	r20, r28
    12f2:	5d 07       	cpc	r21, r29
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <gc_realloc+0x16a>
    12f6:	3f c0       	rjmp	.+126    	; 0x1376 <gc_realloc+0x1e8>
    12f8:	7f 01       	movw	r14, r30
    12fa:	e4 0e       	add	r14, r20
    12fc:	f5 1e       	adc	r15, r21
    12fe:	c4 1b       	sub	r28, r20
    1300:	d5 0b       	sbc	r29, r21
    1302:	29 f1       	breq	.+74     	; 0x134e <gc_realloc+0x1c0>
    1304:	ce 0d       	add	r28, r14
    1306:	df 1d       	adc	r29, r15
    1308:	b7 01       	movw	r22, r14
    130a:	ea ea       	ldi	r30, 0xAA	; 170
    130c:	fb e6       	ldi	r31, 0x6B	; 107
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9b 01       	movw	r18, r22
    1314:	36 95       	lsr	r19
    1316:	27 95       	ror	r18
    1318:	36 95       	lsr	r19
    131a:	27 95       	ror	r18
    131c:	a0 81       	ld	r26, Z
    131e:	b1 81       	ldd	r27, Z+1	; 0x01
    1320:	a2 0f       	add	r26, r18
    1322:	b3 1f       	adc	r27, r19
    1324:	9b 01       	movw	r18, r22
    1326:	23 70       	andi	r18, 0x03	; 3
    1328:	33 27       	eor	r19, r19
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	ac 01       	movw	r20, r24
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <gc_realloc+0x1a8>
    1332:	44 0f       	add	r20, r20
    1334:	55 1f       	adc	r21, r21
    1336:	2a 95       	dec	r18
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <gc_realloc+0x1a4>
    133a:	9a 01       	movw	r18, r20
    133c:	20 95       	com	r18
    133e:	3c 91       	ld	r19, X
    1340:	23 23       	and	r18, r19
    1342:	2c 93       	st	X, r18
    1344:	6f 5f       	subi	r22, 0xFF	; 255
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	c6 17       	cp	r28, r22
    134a:	d7 07       	cpc	r29, r23
    134c:	11 f7       	brne	.-60     	; 0x1312 <gc_realloc+0x184>
    134e:	f7 01       	movw	r30, r14
    1350:	f6 95       	lsr	r31
    1352:	e7 95       	ror	r30
    1354:	f6 95       	lsr	r31
    1356:	e7 95       	ror	r30
    1358:	80 91 36 6c 	lds	r24, 0x6C36	; 0x806c36 <mp_state_ctx+0xdc>
    135c:	90 91 37 6c 	lds	r25, 0x6C37	; 0x806c37 <mp_state_ctx+0xdd>
    1360:	e8 17       	cp	r30, r24
    1362:	f9 07       	cpc	r31, r25
    1364:	08 f0       	brcs	.+2      	; 0x1368 <gc_realloc+0x1da>
    1366:	9b c0       	rjmp	.+310    	; 0x149e <gc_realloc+0x310>
    1368:	f0 93 37 6c 	sts	0x6C37, r31	; 0x806c37 <mp_state_ctx+0xdd>
    136c:	e0 93 36 6c 	sts	0x6C36, r30	; 0x806c36 <mp_state_ctx+0xdc>
    1370:	80 2f       	mov	r24, r16
    1372:	91 2f       	mov	r25, r17
    1374:	9b c0       	rjmp	.+310    	; 0x14ac <gc_realloc+0x31e>
    1376:	ec 0e       	add	r14, r28
    1378:	fd 1e       	adc	r15, r29
    137a:	e4 16       	cp	r14, r20
    137c:	f5 06       	cpc	r15, r21
    137e:	08 f4       	brcc	.+2      	; 0x1382 <gc_realloc+0x1f4>
    1380:	71 c0       	rjmp	.+226    	; 0x1464 <gc_realloc+0x2d6>
    1382:	cf 01       	movw	r24, r30
    1384:	8c 0f       	add	r24, r28
    1386:	9d 1f       	adc	r25, r29
    1388:	e4 0f       	add	r30, r20
    138a:	f5 1f       	adc	r31, r21
    138c:	8e 17       	cp	r24, r30
    138e:	9f 07       	cpc	r25, r31
    1390:	08 f0       	brcs	.+2      	; 0x1394 <gc_realloc+0x206>
    1392:	50 c0       	rjmp	.+160    	; 0x1434 <gc_realloc+0x2a6>
    1394:	dc 01       	movw	r26, r24
    1396:	b6 95       	lsr	r27
    1398:	a7 95       	ror	r26
    139a:	b6 95       	lsr	r27
    139c:	a7 95       	ror	r26
    139e:	ac 0d       	add	r26, r12
    13a0:	bd 1d       	adc	r27, r13
    13a2:	9c 90       	ld	r9, X
    13a4:	5c 01       	movw	r10, r24
    13a6:	23 e0       	ldi	r18, 0x03	; 3
    13a8:	a2 22       	and	r10, r18
    13aa:	bb 24       	eor	r11, r11
    13ac:	aa 0c       	add	r10, r10
    13ae:	bb 1c       	adc	r11, r11
    13b0:	29 2d       	mov	r18, r9
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	0a 2c       	mov	r0, r10
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <gc_realloc+0x22e>
    13b8:	35 95       	asr	r19
    13ba:	27 95       	ror	r18
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <gc_realloc+0x22a>
    13c0:	23 70       	andi	r18, 0x03	; 3
    13c2:	33 27       	eor	r19, r19
    13c4:	23 2b       	or	r18, r19
    13c6:	41 f5       	brne	.+80     	; 0x1418 <gc_realloc+0x28a>
    13c8:	62 e0       	ldi	r22, 0x02	; 2
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	0f 2e       	mov	r0, r31
    13ce:	fa ea       	ldi	r31, 0xAA	; 170
    13d0:	ef 2e       	mov	r14, r31
    13d2:	fb e6       	ldi	r31, 0x6B	; 107
    13d4:	ff 2e       	mov	r15, r31
    13d6:	f0 2d       	mov	r31, r0
    13d8:	21 c0       	rjmp	.+66     	; 0x141c <gc_realloc+0x28e>
    13da:	d7 01       	movw	r26, r14
    13dc:	cd 90       	ld	r12, X+
    13de:	dc 90       	ld	r13, X
    13e0:	9c 01       	movw	r18, r24
    13e2:	36 95       	lsr	r19
    13e4:	27 95       	ror	r18
    13e6:	36 95       	lsr	r19
    13e8:	27 95       	ror	r18
    13ea:	d6 01       	movw	r26, r12
    13ec:	a2 0f       	add	r26, r18
    13ee:	b3 1f       	adc	r27, r19
    13f0:	9c 90       	ld	r9, X
    13f2:	5c 01       	movw	r10, r24
    13f4:	23 e0       	ldi	r18, 0x03	; 3
    13f6:	a2 22       	and	r10, r18
    13f8:	bb 24       	eor	r11, r11
    13fa:	aa 0c       	add	r10, r10
    13fc:	bb 1c       	adc	r11, r11
    13fe:	c9 2c       	mov	r12, r9
    1400:	d1 2c       	mov	r13, r1
    1402:	0a 2c       	mov	r0, r10
    1404:	02 c0       	rjmp	.+4      	; 0x140a <gc_realloc+0x27c>
    1406:	d5 94       	asr	r13
    1408:	c7 94       	ror	r12
    140a:	0a 94       	dec	r0
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <gc_realloc+0x278>
    140e:	23 e0       	ldi	r18, 0x03	; 3
    1410:	c2 22       	and	r12, r18
    1412:	dd 24       	eor	r13, r13
    1414:	cd 28       	or	r12, r13
    1416:	11 f0       	breq	.+4      	; 0x141c <gc_realloc+0x28e>
    1418:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    141c:	9b 01       	movw	r18, r22
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <gc_realloc+0x296>
    1420:	22 0f       	add	r18, r18
    1422:	33 1f       	adc	r19, r19
    1424:	aa 94       	dec	r10
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <gc_realloc+0x292>
    1428:	29 29       	or	r18, r9
    142a:	2c 93       	st	X, r18
    142c:	01 96       	adiw	r24, 0x01	; 1
    142e:	8e 17       	cp	r24, r30
    1430:	9f 07       	cpc	r25, r31
    1432:	98 f2       	brcs	.-90     	; 0x13da <gc_realloc+0x24c>
    1434:	4c 1b       	sub	r20, r28
    1436:	5d 0b       	sbc	r21, r29
    1438:	44 0f       	add	r20, r20
    143a:	55 1f       	adc	r21, r21
    143c:	44 0f       	add	r20, r20
    143e:	55 1f       	adc	r21, r21
    1440:	44 0f       	add	r20, r20
    1442:	55 1f       	adc	r21, r21
    1444:	ce 01       	movw	r24, r28
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	80 0f       	add	r24, r16
    1458:	91 1f       	adc	r25, r17
    145a:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    145e:	80 2f       	mov	r24, r16
    1460:	91 2f       	mov	r25, r17
    1462:	24 c0       	rjmp	.+72     	; 0x14ac <gc_realloc+0x31e>
    1464:	99 20       	and	r9, r9
    1466:	f1 f0       	breq	.+60     	; 0x14a4 <gc_realloc+0x316>
    1468:	60 e0       	ldi	r22, 0x00	; 0
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	d1 dc       	rcall	.-1630   	; 0xe10 <gc_alloc>
    146e:	7c 01       	movw	r14, r24
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	d9 f0       	breq	.+54     	; 0x14aa <gc_realloc+0x31c>
    1474:	ae 01       	movw	r20, r28
    1476:	44 0f       	add	r20, r20
    1478:	55 1f       	adc	r21, r21
    147a:	44 0f       	add	r20, r20
    147c:	55 1f       	adc	r21, r21
    147e:	44 0f       	add	r20, r20
    1480:	55 1f       	adc	r21, r21
    1482:	b8 01       	movw	r22, r16
    1484:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    1488:	c8 01       	movw	r24, r16
    148a:	e3 dd       	rcall	.-1082   	; 0x1052 <gc_free>
    148c:	8e 2d       	mov	r24, r14
    148e:	9f 2d       	mov	r25, r15
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <gc_realloc+0x31e>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0a c0       	rjmp	.+20     	; 0x14ac <gc_realloc+0x31e>
    1498:	80 2f       	mov	r24, r16
    149a:	91 2f       	mov	r25, r17
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <gc_realloc+0x31e>
    149e:	80 2f       	mov	r24, r16
    14a0:	91 2f       	mov	r25, r17
    14a2:	04 c0       	rjmp	.+8      	; 0x14ac <gc_realloc+0x31e>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	01 c0       	rjmp	.+2      	; 0x14ac <gc_realloc+0x31e>
    14aa:	9f 2d       	mov	r25, r15
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	0f 91       	pop	r16
    14b4:	ff 90       	pop	r15
    14b6:	ef 90       	pop	r14
    14b8:	df 90       	pop	r13
    14ba:	cf 90       	pop	r12
    14bc:	bf 90       	pop	r11
    14be:	af 90       	pop	r10
    14c0:	9f 90       	pop	r9
    14c2:	08 95       	ret

000014c4 <m_realloc_maybe>:
    14c4:	64 ce       	rjmp	.-824    	; 0x118e <gc_realloc>
    14c6:	08 95       	ret

000014c8 <exc_add_strn>:
    14c8:	cf 92       	push	r12
    14ca:	df 92       	push	r13
    14cc:	ef 92       	push	r14
    14ce:	ff 92       	push	r15
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ec 01       	movw	r28, r24
    14da:	7b 01       	movw	r14, r22
    14dc:	8a 01       	movw	r16, r20
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	9c 81       	ldd	r25, Y+4	; 0x04
    14e2:	69 81       	ldd	r22, Y+1	; 0x01
    14e4:	7a 81       	ldd	r23, Y+2	; 0x02
    14e6:	9c 01       	movw	r18, r24
    14e8:	24 0f       	add	r18, r20
    14ea:	35 1f       	adc	r19, r21
    14ec:	26 17       	cp	r18, r22
    14ee:	37 07       	cpc	r19, r23
    14f0:	18 f1       	brcs	.+70     	; 0x1538 <exc_add_strn+0x70>
    14f2:	28 81       	ld	r18, Y
    14f4:	22 23       	and	r18, r18
    14f6:	d9 f0       	breq	.+54     	; 0x152e <exc_add_strn+0x66>
    14f8:	60 5f       	subi	r22, 0xF0	; 240
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	6b 01       	movw	r12, r22
    14fe:	c4 0e       	add	r12, r20
    1500:	d5 1e       	adc	r13, r21
    1502:	41 e0       	ldi	r20, 0x01	; 1
    1504:	b6 01       	movw	r22, r12
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	9e 81       	ldd	r25, Y+6	; 0x06
    150a:	dc df       	rcall	.-72     	; 0x14c4 <m_realloc_maybe>
    150c:	00 97       	sbiw	r24, 0x00	; 0
    150e:	51 f4       	brne	.+20     	; 0x1524 <exc_add_strn+0x5c>
    1510:	18 82       	st	Y, r1
    1512:	09 81       	ldd	r16, Y+1	; 0x01
    1514:	1a 81       	ldd	r17, Y+2	; 0x02
    1516:	01 50       	subi	r16, 0x01	; 1
    1518:	11 09       	sbc	r17, r1
    151a:	8b 81       	ldd	r24, Y+3	; 0x03
    151c:	9c 81       	ldd	r25, Y+4	; 0x04
    151e:	08 1b       	sub	r16, r24
    1520:	19 0b       	sbc	r17, r25
    1522:	0a c0       	rjmp	.+20     	; 0x1538 <exc_add_strn+0x70>
    1524:	da 82       	std	Y+2, r13	; 0x02
    1526:	c9 82       	std	Y+1, r12	; 0x01
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	05 c0       	rjmp	.+10     	; 0x1538 <exc_add_strn+0x70>
    152e:	8b 01       	movw	r16, r22
    1530:	01 50       	subi	r16, 0x01	; 1
    1532:	11 09       	sbc	r17, r1
    1534:	08 1b       	sub	r16, r24
    1536:	19 0b       	sbc	r17, r25
    1538:	2d 81       	ldd	r18, Y+5	; 0x05
    153a:	3e 81       	ldd	r19, Y+6	; 0x06
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	a8 01       	movw	r20, r16
    1542:	b7 01       	movw	r22, r14
    1544:	82 0f       	add	r24, r18
    1546:	93 1f       	adc	r25, r19
    1548:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	9c 81       	ldd	r25, Y+4	; 0x04
    1550:	08 0f       	add	r16, r24
    1552:	19 1f       	adc	r17, r25
    1554:	1c 83       	std	Y+4, r17	; 0x04
    1556:	0b 83       	std	Y+3, r16	; 0x03
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	08 95       	ret

0000156a <qstr_compute_hash>:
    156a:	fc 01       	movw	r30, r24
    156c:	68 0f       	add	r22, r24
    156e:	79 1f       	adc	r23, r25
    1570:	86 17       	cp	r24, r22
    1572:	97 07       	cpc	r25, r23
    1574:	c8 f4       	brcc	.+50     	; 0x15a8 <qstr_compute_hash+0x3e>
    1576:	25 e0       	ldi	r18, 0x05	; 5
    1578:	35 e1       	ldi	r19, 0x15	; 21
    157a:	c9 01       	movw	r24, r18
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	82 95       	swap	r24
    1582:	92 95       	swap	r25
    1584:	90 7f       	andi	r25, 0xF0	; 240
    1586:	98 27       	eor	r25, r24
    1588:	80 7f       	andi	r24, 0xF0	; 240
    158a:	98 27       	eor	r25, r24
    158c:	28 0f       	add	r18, r24
    158e:	39 1f       	adc	r19, r25
    1590:	81 91       	ld	r24, Z+
    1592:	28 27       	eor	r18, r24
    1594:	6e 17       	cp	r22, r30
    1596:	7f 07       	cpc	r23, r31
    1598:	81 f7       	brne	.-32     	; 0x157a <qstr_compute_hash+0x10>
    159a:	c9 01       	movw	r24, r18
    159c:	99 27       	eor	r25, r25
    159e:	00 97       	sbiw	r24, 0x00	; 0
    15a0:	29 f4       	brne	.+10     	; 0x15ac <qstr_compute_hash+0x42>
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	08 95       	ret
    15a8:	85 e0       	ldi	r24, 0x05	; 5
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	08 95       	ret

000015ae <qstr_init>:
    15ae:	82 e8       	ldi	r24, 0x82	; 130
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	90 93 69 6b 	sts	0x6B69, r25	; 0x806b69 <mp_state_ctx+0xf>
    15b6:	80 93 68 6b 	sts	0x6B68, r24	; 0x806b68 <mp_state_ctx+0xe>
    15ba:	10 92 a3 6b 	sts	0x6BA3, r1	; 0x806ba3 <mp_state_ctx+0x49>
    15be:	10 92 a2 6b 	sts	0x6BA2, r1	; 0x806ba2 <mp_state_ctx+0x48>
    15c2:	08 95       	ret

000015c4 <qstr_find_strn>:
    15c4:	4f 92       	push	r4
    15c6:	5f 92       	push	r5
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	2c 01       	movw	r4, r24
    15e6:	5b 01       	movw	r10, r22
    15e8:	c0 df       	rcall	.-128    	; 0x156a <qstr_compute_hash>
    15ea:	6c 01       	movw	r12, r24
    15ec:	80 90 68 6b 	lds	r8, 0x6B68	; 0x806b68 <mp_state_ctx+0xe>
    15f0:	90 90 69 6b 	lds	r9, 0x6B69	; 0x806b69 <mp_state_ctx+0xf>
    15f4:	81 14       	cp	r8, r1
    15f6:	91 04       	cpc	r9, r1
    15f8:	d9 f1       	breq	.+118    	; 0x1670 <qstr_find_strn+0xac>
    15fa:	34 01       	movw	r6, r8
    15fc:	88 e0       	ldi	r24, 0x08	; 8
    15fe:	68 0e       	add	r6, r24
    1600:	71 1c       	adc	r7, r1
    1602:	f4 01       	movw	r30, r8
    1604:	e6 80       	ldd	r14, Z+6	; 0x06
    1606:	f7 80       	ldd	r15, Z+7	; 0x07
    1608:	ee 0c       	add	r14, r14
    160a:	ff 1c       	adc	r15, r15
    160c:	e6 0c       	add	r14, r6
    160e:	f7 1c       	adc	r15, r7
    1610:	6e 14       	cp	r6, r14
    1612:	7f 04       	cpc	r7, r15
    1614:	20 f5       	brcc	.+72     	; 0x165e <qstr_find_strn+0x9a>
    1616:	83 01       	movw	r16, r6
    1618:	e8 01       	movw	r28, r16
    161a:	e9 91       	ld	r30, Y+
    161c:	f9 91       	ld	r31, Y+
    161e:	20 81       	ld	r18, Z
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	c2 16       	cp	r12, r18
    1624:	d3 06       	cpc	r13, r19
    1626:	b9 f4       	brne	.+46     	; 0x1656 <qstr_find_strn+0x92>
    1628:	81 81       	ldd	r24, Z+1	; 0x01
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a8 16       	cp	r10, r24
    162e:	b9 06       	cpc	r11, r25
    1630:	91 f4       	brne	.+36     	; 0x1656 <qstr_find_strn+0x92>
    1632:	a5 01       	movw	r20, r10
    1634:	b2 01       	movw	r22, r4
    1636:	cf 01       	movw	r24, r30
    1638:	02 96       	adiw	r24, 0x02	; 2
    163a:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    163e:	89 2b       	or	r24, r25
    1640:	51 f4       	brne	.+20     	; 0x1656 <qstr_find_strn+0x92>
    1642:	06 19       	sub	r16, r6
    1644:	17 09       	sbc	r17, r7
    1646:	15 95       	asr	r17
    1648:	07 95       	ror	r16
    164a:	f4 01       	movw	r30, r8
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	80 0f       	add	r24, r16
    1652:	91 1f       	adc	r25, r17
    1654:	0f c0       	rjmp	.+30     	; 0x1674 <qstr_find_strn+0xb0>
    1656:	8e 01       	movw	r16, r28
    1658:	ce 15       	cp	r28, r14
    165a:	df 05       	cpc	r29, r15
    165c:	e8 f2       	brcs	.-70     	; 0x1618 <qstr_find_strn+0x54>
    165e:	f4 01       	movw	r30, r8
    1660:	80 80       	ld	r8, Z
    1662:	91 80       	ldd	r9, Z+1	; 0x01
    1664:	81 14       	cp	r8, r1
    1666:	91 04       	cpc	r9, r1
    1668:	41 f6       	brne	.-112    	; 0x15fa <qstr_find_strn+0x36>
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <qstr_find_strn+0xb0>
    1670:	80 e0       	ldi	r24, 0x00	; 0
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	bf 90       	pop	r11
    1686:	af 90       	pop	r10
    1688:	9f 90       	pop	r9
    168a:	8f 90       	pop	r8
    168c:	7f 90       	pop	r7
    168e:	6f 90       	pop	r6
    1690:	5f 90       	pop	r5
    1692:	4f 90       	pop	r4
    1694:	08 95       	ret

00001696 <qstr_hash>:
    1696:	0e 94 c2 00 	call	0x184	; 0x184 <find_qstr>
    169a:	fc 01       	movw	r30, r24
    169c:	80 81       	ld	r24, Z
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	08 95       	ret

000016a2 <qstr_len>:
    16a2:	0e 94 c2 00 	call	0x184	; 0x184 <find_qstr>
    16a6:	fc 01       	movw	r30, r24
    16a8:	81 81       	ldd	r24, Z+1	; 0x01
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	08 95       	ret

000016ae <qstr_str>:
    16ae:	0e 94 c2 00 	call	0x184	; 0x184 <find_qstr>
    16b2:	02 96       	adiw	r24, 0x02	; 2
    16b4:	08 95       	ret

000016b6 <qstr_data>:
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	eb 01       	movw	r28, r22
    16bc:	0e 94 c2 00 	call	0x184	; 0x184 <find_qstr>
    16c0:	fc 01       	movw	r30, r24
    16c2:	21 81       	ldd	r18, Z+1	; 0x01
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	39 83       	std	Y+1, r19	; 0x01
    16c8:	28 83       	st	Y, r18
    16ca:	02 96       	adiw	r24, 0x02	; 2
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <str_uni_istype>:
    16d2:	8f 92       	push	r8
    16d4:	9f 92       	push	r9
    16d6:	af 92       	push	r10
    16d8:	bf 92       	push	r11
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <str_uni_istype+0x1a>
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	6c 01       	movw	r12, r24
    16f2:	fb 01       	movw	r30, r22
    16f4:	cb 01       	movw	r24, r22
    16f6:	87 70       	andi	r24, 0x07	; 7
    16f8:	99 27       	eor	r25, r25
    16fa:	02 97       	sbiw	r24, 0x02	; 2
    16fc:	61 f4       	brne	.+24     	; 0x1716 <str_uni_istype+0x44>
    16fe:	be 01       	movw	r22, r28
    1700:	6f 5f       	subi	r22, 0xFF	; 255
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	cf 01       	movw	r24, r30
    1706:	96 95       	lsr	r25
    1708:	87 95       	ror	r24
    170a:	96 95       	lsr	r25
    170c:	87 95       	ror	r24
    170e:	96 95       	lsr	r25
    1710:	87 95       	ror	r24
    1712:	d1 df       	rcall	.-94     	; 0x16b6 <qstr_data>
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <str_uni_istype+0x50>
    1716:	84 81       	ldd	r24, Z+4	; 0x04
    1718:	95 81       	ldd	r25, Z+5	; 0x05
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	86 81       	ldd	r24, Z+6	; 0x06
    1720:	97 81       	ldd	r25, Z+7	; 0x07
    1722:	29 81       	ldd	r18, Y+1	; 0x01
    1724:	3a 81       	ldd	r19, Y+2	; 0x02
    1726:	23 2b       	or	r18, r19
    1728:	09 f4       	brne	.+2      	; 0x172c <str_uni_istype+0x5a>
    172a:	44 c0       	rjmp	.+136    	; 0x17b4 <str_uni_istype+0xe2>
    172c:	27 e0       	ldi	r18, 0x07	; 7
    172e:	c2 16       	cp	r12, r18
    1730:	21 e0       	ldi	r18, 0x01	; 1
    1732:	d2 06       	cpc	r13, r18
    1734:	29 f0       	breq	.+10     	; 0x1740 <str_uni_istype+0x6e>
    1736:	e4 e1       	ldi	r30, 0x14	; 20
    1738:	ce 16       	cp	r12, r30
    173a:	e1 e0       	ldi	r30, 0x01	; 1
    173c:	de 06       	cpc	r13, r30
    173e:	41 f4       	brne	.+16     	; 0x1750 <str_uni_istype+0x7e>
    1740:	a8 2e       	mov	r10, r24
    1742:	b9 2e       	mov	r11, r25
    1744:	e1 2c       	mov	r14, r1
    1746:	f1 2c       	mov	r15, r1
    1748:	91 2c       	mov	r9, r1
    174a:	88 24       	eor	r8, r8
    174c:	83 94       	inc	r8
    174e:	16 c0       	rjmp	.+44     	; 0x177c <str_uni_istype+0xaa>
    1750:	e8 2e       	mov	r14, r24
    1752:	f9 2e       	mov	r15, r25
    1754:	00 e0       	ldi	r16, 0x00	; 0
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	f7 01       	movw	r30, r14
    175a:	81 91       	ld	r24, Z+
    175c:	7f 01       	movw	r14, r30
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	f6 01       	movw	r30, r12
    1762:	09 95       	icall
    1764:	88 23       	and	r24, r24
    1766:	49 f1       	breq	.+82     	; 0x17ba <str_uni_istype+0xe8>
    1768:	0f 5f       	subi	r16, 0xFF	; 255
    176a:	1f 4f       	sbci	r17, 0xFF	; 255
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	08 17       	cp	r16, r24
    1772:	19 07       	cpc	r17, r25
    1774:	88 f3       	brcs	.-30     	; 0x1758 <str_uni_istype+0x86>
    1776:	8e e1       	ldi	r24, 0x1E	; 30
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	27 c0       	rjmp	.+78     	; 0x17ca <str_uni_istype+0xf8>
    177c:	f5 01       	movw	r30, r10
    177e:	01 91       	ld	r16, Z+
    1780:	5f 01       	movw	r10, r30
    1782:	10 e0       	ldi	r17, 0x00	; 0
    1784:	c8 01       	movw	r24, r16
    1786:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <unichar_isalpha>
    178a:	88 23       	and	r24, r24
    178c:	31 f0       	breq	.+12     	; 0x179a <str_uni_istype+0xc8>
    178e:	c8 01       	movw	r24, r16
    1790:	f6 01       	movw	r30, r12
    1792:	09 95       	icall
    1794:	88 23       	and	r24, r24
    1796:	a1 f0       	breq	.+40     	; 0x17c0 <str_uni_istype+0xee>
    1798:	98 2c       	mov	r9, r8
    179a:	ff ef       	ldi	r31, 0xFF	; 255
    179c:	ef 1a       	sub	r14, r31
    179e:	ff 0a       	sbc	r15, r31
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	9a 81       	ldd	r25, Y+2	; 0x02
    17a4:	e8 16       	cp	r14, r24
    17a6:	f9 06       	cpc	r15, r25
    17a8:	48 f3       	brcs	.-46     	; 0x177c <str_uni_istype+0xaa>
    17aa:	99 20       	and	r9, r9
    17ac:	61 f0       	breq	.+24     	; 0x17c6 <str_uni_istype+0xf4>
    17ae:	8e e1       	ldi	r24, 0x1E	; 30
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0b c0       	rjmp	.+22     	; 0x17ca <str_uni_istype+0xf8>
    17b4:	8e e0       	ldi	r24, 0x0E	; 14
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	08 c0       	rjmp	.+16     	; 0x17ca <str_uni_istype+0xf8>
    17ba:	8e e0       	ldi	r24, 0x0E	; 14
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <str_uni_istype+0xf8>
    17c0:	8e e0       	ldi	r24, 0x0E	; 14
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <str_uni_istype+0xf8>
    17c6:	8e e0       	ldi	r24, 0x0E	; 14
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	9f 90       	pop	r9
    17e4:	8f 90       	pop	r8
    17e6:	08 95       	ret

000017e8 <str_isspace>:
    17e8:	bc 01       	movw	r22, r24
    17ea:	8e ed       	ldi	r24, 0xDE	; 222
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	71 cf       	rjmp	.-286    	; 0x16d2 <str_uni_istype>
    17f0:	08 95       	ret

000017f2 <str_isalpha>:
    17f2:	bc 01       	movw	r22, r24
    17f4:	8b ee       	ldi	r24, 0xEB	; 235
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	6c cf       	rjmp	.-296    	; 0x16d2 <str_uni_istype>
    17fa:	08 95       	ret

000017fc <str_isdigit>:
    17fc:	bc 01       	movw	r22, r24
    17fe:	89 ef       	ldi	r24, 0xF9	; 249
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	67 cf       	rjmp	.-306    	; 0x16d2 <str_uni_istype>
    1804:	08 95       	ret

00001806 <str_isupper>:
    1806:	bc 01       	movw	r22, r24
    1808:	87 e0       	ldi	r24, 0x07	; 7
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	62 cf       	rjmp	.-316    	; 0x16d2 <str_uni_istype>
    180e:	08 95       	ret

00001810 <str_islower>:
    1810:	bc 01       	movw	r22, r24
    1812:	84 e1       	ldi	r24, 0x14	; 20
    1814:	91 e0       	ldi	r25, 0x01	; 1
    1816:	5d cf       	rjmp	.-326    	; 0x16d2 <str_uni_istype>
    1818:	08 95       	ret

0000181a <mp_obj_str_get_buffer>:
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	00 d0       	rcall	.+0      	; 0x1824 <mp_obj_str_get_buffer+0xa>
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	41 30       	cpi	r20, 0x01	; 1
    182a:	51 05       	cpc	r21, r1
    182c:	31 f5       	brne	.+76     	; 0x187a <mp_obj_str_get_buffer+0x60>
    182e:	8b 01       	movw	r16, r22
    1830:	fc 01       	movw	r30, r24
    1832:	87 70       	andi	r24, 0x07	; 7
    1834:	99 27       	eor	r25, r25
    1836:	02 97       	sbiw	r24, 0x02	; 2
    1838:	61 f4       	brne	.+24     	; 0x1852 <mp_obj_str_get_buffer+0x38>
    183a:	be 01       	movw	r22, r28
    183c:	6f 5f       	subi	r22, 0xFF	; 255
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	cf 01       	movw	r24, r30
    1842:	96 95       	lsr	r25
    1844:	87 95       	ror	r24
    1846:	96 95       	lsr	r25
    1848:	87 95       	ror	r24
    184a:	96 95       	lsr	r25
    184c:	87 95       	ror	r24
    184e:	33 df       	rcall	.-410    	; 0x16b6 <qstr_data>
    1850:	06 c0       	rjmp	.+12     	; 0x185e <mp_obj_str_get_buffer+0x44>
    1852:	84 81       	ldd	r24, Z+4	; 0x04
    1854:	95 81       	ldd	r25, Z+5	; 0x05
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	86 81       	ldd	r24, Z+6	; 0x06
    185c:	97 81       	ldd	r25, Z+7	; 0x07
    185e:	f8 01       	movw	r30, r16
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	9a 81       	ldd	r25, Y+2	; 0x02
    1868:	93 83       	std	Z+3, r25	; 0x03
    186a:	82 83       	std	Z+2, r24	; 0x02
    186c:	82 e4       	ldi	r24, 0x42	; 66
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	95 83       	std	Z+5, r25	; 0x05
    1872:	84 83       	std	Z+4, r24	; 0x04
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 c0       	rjmp	.+4      	; 0x187e <mp_obj_str_get_buffer+0x64>
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <bytes_it_iternext>:
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	00 d0       	rcall	.+0      	; 0x1896 <bytes_it_iternext+0xa>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	8c 01       	movw	r16, r24
    189c:	dc 01       	movw	r26, r24
    189e:	14 96       	adiw	r26, 0x04	; 4
    18a0:	ed 91       	ld	r30, X+
    18a2:	fc 91       	ld	r31, X
    18a4:	15 97       	sbiw	r26, 0x05	; 5
    18a6:	cf 01       	movw	r24, r30
    18a8:	87 70       	andi	r24, 0x07	; 7
    18aa:	99 27       	eor	r25, r25
    18ac:	02 97       	sbiw	r24, 0x02	; 2
    18ae:	61 f4       	brne	.+24     	; 0x18c8 <bytes_it_iternext+0x3c>
    18b0:	be 01       	movw	r22, r28
    18b2:	6f 5f       	subi	r22, 0xFF	; 255
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	cf 01       	movw	r24, r30
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	96 95       	lsr	r25
    18be:	87 95       	ror	r24
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	f8 de       	rcall	.-528    	; 0x16b6 <qstr_data>
    18c6:	06 c0       	rjmp	.+12     	; 0x18d4 <bytes_it_iternext+0x48>
    18c8:	84 81       	ldd	r24, Z+4	; 0x04
    18ca:	95 81       	ldd	r25, Z+5	; 0x05
    18cc:	9a 83       	std	Y+2, r25	; 0x02
    18ce:	89 83       	std	Y+1, r24	; 0x01
    18d0:	86 81       	ldd	r24, Z+6	; 0x06
    18d2:	97 81       	ldd	r25, Z+7	; 0x07
    18d4:	f8 01       	movw	r30, r16
    18d6:	26 81       	ldd	r18, Z+6	; 0x06
    18d8:	37 81       	ldd	r19, Z+7	; 0x07
    18da:	49 81       	ldd	r20, Y+1	; 0x01
    18dc:	5a 81       	ldd	r21, Y+2	; 0x02
    18de:	24 17       	cp	r18, r20
    18e0:	35 07       	cpc	r19, r21
    18e2:	80 f4       	brcc	.+32     	; 0x1904 <bytes_it_iternext+0x78>
    18e4:	fc 01       	movw	r30, r24
    18e6:	e2 0f       	add	r30, r18
    18e8:	f3 1f       	adc	r31, r19
    18ea:	80 81       	ld	r24, Z
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	2f 5f       	subi	r18, 0xFF	; 255
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	d8 01       	movw	r26, r16
    18f8:	17 96       	adiw	r26, 0x07	; 7
    18fa:	3c 93       	st	X, r19
    18fc:	2e 93       	st	-X, r18
    18fe:	16 97       	sbiw	r26, 0x06	; 6
    1900:	81 60       	ori	r24, 0x01	; 1
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <bytes_it_iternext+0x7c>
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <vstr_clear>:
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	ec 01       	movw	r28, r24
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	80 fd       	sbrc	r24, 0
    1920:	03 c0       	rjmp	.+6      	; 0x1928 <vstr_clear+0x12>
    1922:	8c 81       	ldd	r24, Y+4	; 0x04
    1924:	9d 81       	ldd	r25, Y+5	; 0x05
    1926:	95 db       	rcall	.-2262   	; 0x1052 <gc_free>
    1928:	1d 82       	std	Y+5, r1	; 0x05
    192a:	1c 82       	std	Y+4, r1	; 0x04
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <vstr_cut_tail_bytes>:
    1932:	fc 01       	movw	r30, r24
    1934:	22 81       	ldd	r18, Z+2	; 0x02
    1936:	33 81       	ldd	r19, Z+3	; 0x03
    1938:	26 17       	cp	r18, r22
    193a:	37 07       	cpc	r19, r23
    193c:	18 f4       	brcc	.+6      	; 0x1944 <vstr_cut_tail_bytes+0x12>
    193e:	13 82       	std	Z+3, r1	; 0x03
    1940:	12 82       	std	Z+2, r1	; 0x02
    1942:	08 95       	ret
    1944:	26 1b       	sub	r18, r22
    1946:	37 0b       	sbc	r19, r23
    1948:	fc 01       	movw	r30, r24
    194a:	33 83       	std	Z+3, r19	; 0x03
    194c:	22 83       	std	Z+2, r18	; 0x02
    194e:	08 95       	ret

00001950 <mp_print_str>:
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	fb 01       	movw	r30, r22
    1956:	01 90       	ld	r0, Z+
    1958:	00 20       	and	r0, r0
    195a:	e9 f7       	brne	.-6      	; 0x1956 <mp_print_str+0x6>
    195c:	31 97       	sbiw	r30, 0x01	; 1
    195e:	ef 01       	movw	r28, r30
    1960:	c6 1b       	sub	r28, r22
    1962:	d7 0b       	sbc	r29, r23
    1964:	49 f0       	breq	.+18     	; 0x1978 <mp_print_str+0x28>
    1966:	dc 01       	movw	r26, r24
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	ed 91       	ld	r30, X+
    196c:	fc 91       	ld	r31, X
    196e:	13 97       	sbiw	r26, 0x03	; 3
    1970:	ae 01       	movw	r20, r28
    1972:	8d 91       	ld	r24, X+
    1974:	9c 91       	ld	r25, X
    1976:	09 95       	icall
    1978:	ce 01       	movw	r24, r28
    197a:	df 91       	pop	r29
    197c:	cf 91       	pop	r28
    197e:	08 95       	ret

00001980 <bool_print>:
    1980:	6e 30       	cpi	r22, 0x0E	; 14
    1982:	71 05       	cpc	r23, r1
    1984:	21 f0       	breq	.+8      	; 0x198e <bool_print+0xe>
    1986:	6b e1       	ldi	r22, 0x1B	; 27
    1988:	71 e0       	ldi	r23, 0x01	; 1
    198a:	e2 cf       	rjmp	.-60     	; 0x1950 <mp_print_str>
    198c:	08 95       	ret
    198e:	60 e2       	ldi	r22, 0x20	; 32
    1990:	71 e0       	ldi	r23, 0x01	; 1
    1992:	de cf       	rjmp	.-68     	; 0x1950 <mp_print_str>
    1994:	08 95       	ret

00001996 <none_print>:
    1996:	68 ea       	ldi	r22, 0xA8	; 168
    1998:	77 e0       	ldi	r23, 0x07	; 7
    199a:	da cf       	rjmp	.-76     	; 0x1950 <mp_print_str>
    199c:	08 95       	ret

0000199e <mp_print_strn>:
    199e:	2f 92       	push	r2
    19a0:	3f 92       	push	r3
    19a2:	4f 92       	push	r4
    19a4:	5f 92       	push	r5
    19a6:	6f 92       	push	r6
    19a8:	7f 92       	push	r7
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <mp_print_strn+0x26>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <mp_print_strn+0x28>
    19c6:	1f 92       	push	r1
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	5c 01       	movw	r10, r24
    19ce:	7d 83       	std	Y+5, r23	; 0x05
    19d0:	6c 83       	std	Y+4, r22	; 0x04
    19d2:	1a 01       	movw	r2, r20
    19d4:	80 2f       	mov	r24, r16
    19d6:	09 83       	std	Y+1, r16	; 0x01
    19d8:	37 01       	movw	r6, r14
    19da:	64 1a       	sub	r6, r20
    19dc:	75 0a       	sbc	r7, r21
    19de:	8f 7d       	andi	r24, 0xDF	; 223
    19e0:	49 f0       	breq	.+18     	; 0x19f4 <mp_print_strn+0x56>
    19e2:	00 33       	cpi	r16, 0x30	; 48
    19e4:	91 f0       	breq	.+36     	; 0x1a0a <mp_print_strn+0x6c>
    19e6:	ce 01       	movw	r24, r28
    19e8:	01 96       	adiw	r24, 0x01	; 1
    19ea:	2c 01       	movw	r4, r24
    19ec:	88 24       	eor	r8, r8
    19ee:	83 94       	inc	r8
    19f0:	91 2c       	mov	r9, r1
    19f2:	15 c0       	rjmp	.+42     	; 0x1a1e <mp_print_strn+0x80>
    19f4:	0f 2e       	mov	r0, r31
    19f6:	f0 e3       	ldi	r31, 0x30	; 48
    19f8:	4f 2e       	mov	r4, r31
    19fa:	fa e2       	ldi	r31, 0x2A	; 42
    19fc:	5f 2e       	mov	r5, r31
    19fe:	f0 2d       	mov	r31, r0
    1a00:	68 94       	set
    1a02:	88 24       	eor	r8, r8
    1a04:	84 f8       	bld	r8, 4
    1a06:	91 2c       	mov	r9, r1
    1a08:	0a c0       	rjmp	.+20     	; 0x1a1e <mp_print_strn+0x80>
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	ff e1       	ldi	r31, 0x1F	; 31
    1a0e:	4f 2e       	mov	r4, r31
    1a10:	fa e2       	ldi	r31, 0x2A	; 42
    1a12:	5f 2e       	mov	r5, r31
    1a14:	f0 2d       	mov	r31, r0
    1a16:	68 94       	set
    1a18:	88 24       	eor	r8, r8
    1a1a:	84 f8       	bld	r8, 4
    1a1c:	91 2c       	mov	r9, r1
    1a1e:	27 ff       	sbrs	r18, 7
    1a20:	0b c0       	rjmp	.+22     	; 0x1a38 <mp_print_strn+0x9a>
    1a22:	c3 01       	movw	r24, r6
    1a24:	77 20       	and	r7, r7
    1a26:	0c f4       	brge	.+2      	; 0x1a2a <mp_print_strn+0x8c>
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	95 95       	asr	r25
    1a2c:	87 95       	ror	r24
    1a2e:	73 01       	movw	r14, r6
    1a30:	e8 1a       	sub	r14, r24
    1a32:	f9 0a       	sbc	r15, r25
    1a34:	3c 01       	movw	r6, r24
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <mp_print_strn+0xa2>
    1a38:	20 fd       	sbrc	r18, 0
    1a3a:	1e c0       	rjmp	.+60     	; 0x1a78 <mp_print_strn+0xda>
    1a3c:	e1 2c       	mov	r14, r1
    1a3e:	f1 2c       	mov	r15, r1
    1a40:	16 14       	cp	r1, r6
    1a42:	17 04       	cpc	r1, r7
    1a44:	ec f4       	brge	.+58     	; 0x1a80 <mp_print_strn+0xe2>
    1a46:	63 01       	movw	r12, r6
    1a48:	8a 82       	std	Y+2, r8	; 0x02
    1a4a:	9b 82       	std	Y+3, r9	; 0x03
    1a4c:	0a 81       	ldd	r16, Y+2	; 0x02
    1a4e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a50:	c8 14       	cp	r12, r8
    1a52:	d9 04       	cpc	r13, r9
    1a54:	0c f4       	brge	.+2      	; 0x1a58 <mp_print_strn+0xba>
    1a56:	86 01       	movw	r16, r12
    1a58:	d5 01       	movw	r26, r10
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3
    1a62:	a8 01       	movw	r20, r16
    1a64:	b2 01       	movw	r22, r4
    1a66:	8d 91       	ld	r24, X+
    1a68:	9c 91       	ld	r25, X
    1a6a:	09 95       	icall
    1a6c:	c0 1a       	sub	r12, r16
    1a6e:	d1 0a       	sbc	r13, r17
    1a70:	1c 14       	cp	r1, r12
    1a72:	1d 04       	cpc	r1, r13
    1a74:	5c f3       	brlt	.-42     	; 0x1a4c <mp_print_strn+0xae>
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <mp_print_strn+0xe6>
    1a78:	73 01       	movw	r14, r6
    1a7a:	61 2c       	mov	r6, r1
    1a7c:	71 2c       	mov	r7, r1
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <mp_print_strn+0xe6>
    1a80:	61 2c       	mov	r6, r1
    1a82:	71 2c       	mov	r7, r1
    1a84:	21 14       	cp	r2, r1
    1a86:	31 04       	cpc	r3, r1
    1a88:	69 f1       	breq	.+90     	; 0x1ae4 <mp_print_strn+0x146>
    1a8a:	d5 01       	movw	r26, r10
    1a8c:	12 96       	adiw	r26, 0x02	; 2
    1a8e:	ed 91       	ld	r30, X+
    1a90:	fc 91       	ld	r31, X
    1a92:	13 97       	sbiw	r26, 0x03	; 3
    1a94:	a1 01       	movw	r20, r2
    1a96:	6c 81       	ldd	r22, Y+4	; 0x04
    1a98:	7d 81       	ldd	r23, Y+5	; 0x05
    1a9a:	8d 91       	ld	r24, X+
    1a9c:	9c 91       	ld	r25, X
    1a9e:	09 95       	icall
    1aa0:	62 0c       	add	r6, r2
    1aa2:	73 1c       	adc	r7, r3
    1aa4:	1e 14       	cp	r1, r14
    1aa6:	1f 04       	cpc	r1, r15
    1aa8:	04 f5       	brge	.+64     	; 0x1aea <mp_print_strn+0x14c>
    1aaa:	6e 0c       	add	r6, r14
    1aac:	7f 1c       	adc	r7, r15
    1aae:	c8 2c       	mov	r12, r8
    1ab0:	d9 2c       	mov	r13, r9
    1ab2:	0c 2d       	mov	r16, r12
    1ab4:	1d 2d       	mov	r17, r13
    1ab6:	e8 14       	cp	r14, r8
    1ab8:	f9 04       	cpc	r15, r9
    1aba:	0c f4       	brge	.+2      	; 0x1abe <mp_print_strn+0x120>
    1abc:	87 01       	movw	r16, r14
    1abe:	d5 01       	movw	r26, r10
    1ac0:	12 96       	adiw	r26, 0x02	; 2
    1ac2:	ed 91       	ld	r30, X+
    1ac4:	fc 91       	ld	r31, X
    1ac6:	13 97       	sbiw	r26, 0x03	; 3
    1ac8:	a8 01       	movw	r20, r16
    1aca:	b2 01       	movw	r22, r4
    1acc:	8d 91       	ld	r24, X+
    1ace:	9c 91       	ld	r25, X
    1ad0:	09 95       	icall
    1ad2:	e0 1a       	sub	r14, r16
    1ad4:	f1 0a       	sbc	r15, r17
    1ad6:	1e 14       	cp	r1, r14
    1ad8:	1f 04       	cpc	r1, r15
    1ada:	5c f3       	brlt	.-42     	; 0x1ab2 <mp_print_strn+0x114>
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <mp_print_strn+0x14c>
    1ade:	6e 0c       	add	r6, r14
    1ae0:	7f 1c       	adc	r7, r15
    1ae2:	e5 cf       	rjmp	.-54     	; 0x1aae <mp_print_strn+0x110>
    1ae4:	1e 14       	cp	r1, r14
    1ae6:	1f 04       	cpc	r1, r15
    1ae8:	d4 f3       	brlt	.-12     	; 0x1ade <mp_print_strn+0x140>
    1aea:	c3 01       	movw	r24, r6
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	df 91       	pop	r29
    1af8:	cf 91       	pop	r28
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	3f 90       	pop	r3
    1b18:	2f 90       	pop	r2
    1b1a:	08 95       	ret

00001b1c <mp_print_int>:
    1b1c:	4f 92       	push	r4
    1b1e:	5f 92       	push	r5
    1b20:	6f 92       	push	r6
    1b22:	7f 92       	push	r7
    1b24:	8f 92       	push	r8
    1b26:	9f 92       	push	r9
    1b28:	af 92       	push	r10
    1b2a:	bf 92       	push	r11
    1b2c:	cf 92       	push	r12
    1b2e:	df 92       	push	r13
    1b30:	ef 92       	push	r14
    1b32:	ff 92       	push	r15
    1b34:	0f 93       	push	r16
    1b36:	1f 93       	push	r17
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	29 97       	sbiw	r28, 0x09	; 9
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	4c 01       	movw	r8, r24
    1b4e:	fb 01       	movw	r30, r22
    1b50:	c8 01       	movw	r24, r16
    1b52:	1e 2d       	mov	r17, r14
    1b54:	4f 2c       	mov	r4, r15
    1b56:	5c 2c       	mov	r5, r12
    1b58:	35 01       	movw	r6, r10
    1b5a:	19 82       	std	Y+1, r1	; 0x01
    1b5c:	45 2b       	or	r20, r21
    1b5e:	89 f0       	breq	.+34     	; 0x1b82 <mp_print_int+0x66>
    1b60:	ff 23       	and	r31, r31
    1b62:	34 f4       	brge	.+12     	; 0x1b70 <mp_print_int+0x54>
    1b64:	4d e2       	ldi	r20, 0x2D	; 45
    1b66:	49 83       	std	Y+1, r20	; 0x01
    1b68:	f1 95       	neg	r31
    1b6a:	e1 95       	neg	r30
    1b6c:	f1 09       	sbc	r31, r1
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <mp_print_int+0x66>
    1b70:	e1 fe       	sbrs	r14, 1
    1b72:	03 c0       	rjmp	.+6      	; 0x1b7a <mp_print_int+0x5e>
    1b74:	4b e2       	ldi	r20, 0x2B	; 43
    1b76:	49 83       	std	Y+1, r20	; 0x01
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <mp_print_int+0x66>
    1b7a:	e2 fe       	sbrs	r14, 2
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <mp_print_int+0x66>
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	49 83       	std	Y+1, r20	; 0x01
    1b82:	30 97       	sbiw	r30, 0x00	; 0
    1b84:	39 f4       	brne	.+14     	; 0x1b94 <mp_print_int+0x78>
    1b86:	80 e3       	ldi	r24, 0x30	; 48
    1b88:	89 87       	std	Y+9, r24	; 0x09
    1b8a:	6e 01       	movw	r12, r28
    1b8c:	49 e0       	ldi	r20, 0x09	; 9
    1b8e:	c4 0e       	add	r12, r20
    1b90:	d1 1c       	adc	r13, r1
    1b92:	26 c0       	rjmp	.+76     	; 0x1be0 <mp_print_int+0xc4>
    1b94:	6e 01       	movw	r12, r28
    1b96:	aa e0       	ldi	r26, 0x0A	; 10
    1b98:	ca 0e       	add	r12, r26
    1b9a:	d1 1c       	adc	r13, r1
    1b9c:	5c 01       	movw	r10, r24
    1b9e:	ba e0       	ldi	r27, 0x0A	; 10
    1ba0:	ab 1a       	sub	r10, r27
    1ba2:	b1 08       	sbc	r11, r1
    1ba4:	7e 01       	movw	r14, r28
    1ba6:	42 e0       	ldi	r20, 0x02	; 2
    1ba8:	e4 0e       	add	r14, r20
    1baa:	f1 1c       	adc	r15, r1
    1bac:	cf 01       	movw	r24, r30
    1bae:	b9 01       	movw	r22, r18
    1bb0:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    1bb4:	e6 2f       	mov	r30, r22
    1bb6:	f7 2f       	mov	r31, r23
    1bb8:	8a 30       	cpi	r24, 0x0A	; 10
    1bba:	91 05       	cpc	r25, r1
    1bbc:	1c f0       	brlt	.+6      	; 0x1bc4 <mp_print_int+0xa8>
    1bbe:	8a 0d       	add	r24, r10
    1bc0:	9b 1d       	adc	r25, r11
    1bc2:	01 c0       	rjmp	.+2      	; 0x1bc6 <mp_print_int+0xaa>
    1bc4:	c0 96       	adiw	r24, 0x30	; 48
    1bc6:	d6 01       	movw	r26, r12
    1bc8:	8e 93       	st	-X, r24
    1bca:	6d 01       	movw	r12, r26
    1bcc:	ae 15       	cp	r26, r14
    1bce:	bf 05       	cpc	r27, r15
    1bd0:	19 f0       	breq	.+6      	; 0x1bd8 <mp_print_int+0xbc>
    1bd2:	30 97       	sbiw	r30, 0x00	; 0
    1bd4:	59 f7       	brne	.-42     	; 0x1bac <mp_print_int+0x90>
    1bd6:	04 c0       	rjmp	.+8      	; 0x1be0 <mp_print_int+0xc4>
    1bd8:	6e 01       	movw	r12, r28
    1bda:	b2 e0       	ldi	r27, 0x02	; 2
    1bdc:	cb 0e       	add	r12, r27
    1bde:	d1 1c       	adc	r13, r1
    1be0:	16 ff       	sbrs	r17, 6
    1be2:	15 c0       	rjmp	.+42     	; 0x1c0e <mp_print_int+0xf2>
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	88 23       	and	r24, r24
    1be8:	09 f1       	breq	.+66     	; 0x1c2c <mp_print_int+0x110>
    1bea:	ee 24       	eor	r14, r14
    1bec:	e3 94       	inc	r14
    1bee:	f1 2c       	mov	r15, r1
    1bf0:	05 2d       	mov	r16, r5
    1bf2:	21 2f       	mov	r18, r17
    1bf4:	34 2d       	mov	r19, r4
    1bf6:	41 e0       	ldi	r20, 0x01	; 1
    1bf8:	50 e0       	ldi	r21, 0x00	; 0
    1bfa:	be 01       	movw	r22, r28
    1bfc:	6f 5f       	subi	r22, 0xFF	; 255
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1c00:	c4 01       	movw	r24, r8
    1c02:	cd de       	rcall	.-614    	; 0x199e <mp_print_strn>
    1c04:	5c 01       	movw	r10, r24
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	64 1a       	sub	r6, r20
    1c0a:	71 08       	sbc	r7, r1
    1c0c:	17 c0       	rjmp	.+46     	; 0x1c3c <mp_print_int+0x120>
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	88 23       	and	r24, r24
    1c12:	79 f0       	breq	.+30     	; 0x1c32 <mp_print_int+0x116>
    1c14:	9e 01       	movw	r18, r28
    1c16:	2e 5f       	subi	r18, 0xFE	; 254
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	2c 15       	cp	r18, r12
    1c1c:	3d 05       	cpc	r19, r13
    1c1e:	60 f4       	brcc	.+24     	; 0x1c38 <mp_print_int+0x11c>
    1c20:	f6 01       	movw	r30, r12
    1c22:	82 93       	st	-Z, r24
    1c24:	6f 01       	movw	r12, r30
    1c26:	a1 2c       	mov	r10, r1
    1c28:	b1 2c       	mov	r11, r1
    1c2a:	08 c0       	rjmp	.+16     	; 0x1c3c <mp_print_int+0x120>
    1c2c:	a1 2c       	mov	r10, r1
    1c2e:	b1 2c       	mov	r11, r1
    1c30:	05 c0       	rjmp	.+10     	; 0x1c3c <mp_print_int+0x120>
    1c32:	a1 2c       	mov	r10, r1
    1c34:	b1 2c       	mov	r11, r1
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <mp_print_int+0x120>
    1c38:	a1 2c       	mov	r10, r1
    1c3a:	b1 2c       	mov	r11, r1
    1c3c:	ae 01       	movw	r20, r28
    1c3e:	46 5f       	subi	r20, 0xF6	; 246
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	4c 19       	sub	r20, r12
    1c44:	5d 09       	sbc	r21, r13
    1c46:	73 01       	movw	r14, r6
    1c48:	05 2d       	mov	r16, r5
    1c4a:	21 2f       	mov	r18, r17
    1c4c:	34 2d       	mov	r19, r4
    1c4e:	b6 01       	movw	r22, r12
    1c50:	c4 01       	movw	r24, r8
    1c52:	a5 de       	rcall	.-694    	; 0x199e <mp_print_strn>
    1c54:	8a 0d       	add	r24, r10
    1c56:	9b 1d       	adc	r25, r11
    1c58:	29 96       	adiw	r28, 0x09	; 9
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	ff 90       	pop	r15
    1c6e:	ef 90       	pop	r14
    1c70:	df 90       	pop	r13
    1c72:	cf 90       	pop	r12
    1c74:	bf 90       	pop	r11
    1c76:	af 90       	pop	r10
    1c78:	9f 90       	pop	r9
    1c7a:	8f 90       	pop	r8
    1c7c:	7f 90       	pop	r7
    1c7e:	6f 90       	pop	r6
    1c80:	5f 90       	pop	r5
    1c82:	4f 90       	pop	r4
    1c84:	08 95       	ret

00001c86 <mp_vprintf>:
    1c86:	2f 92       	push	r2
    1c88:	3f 92       	push	r3
    1c8a:	4f 92       	push	r4
    1c8c:	5f 92       	push	r5
    1c8e:	6f 92       	push	r6
    1c90:	7f 92       	push	r7
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <mp_vprintf+0x26>
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <mp_vprintf+0x28>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	1c 01       	movw	r2, r24
    1cb4:	db 01       	movw	r26, r22
    1cb6:	6a 01       	movw	r12, r20
    1cb8:	41 2c       	mov	r4, r1
    1cba:	51 2c       	mov	r5, r1
    1cbc:	8c 91       	ld	r24, X
    1cbe:	88 23       	and	r24, r24
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <mp_vprintf+0x3e>
    1cc2:	dc c1       	rjmp	.+952    	; 0x207c <mp_vprintf+0x3f6>
    1cc4:	85 32       	cpi	r24, 0x25	; 37
    1cc6:	09 f1       	breq	.+66     	; 0x1d0a <mp_vprintf+0x84>
    1cc8:	7d 01       	movw	r14, r26
    1cca:	2f ef       	ldi	r18, 0xFF	; 255
    1ccc:	e2 1a       	sub	r14, r18
    1cce:	f2 0a       	sbc	r15, r18
    1cd0:	01 c0       	rjmp	.+2      	; 0x1cd4 <mp_vprintf+0x4e>
    1cd2:	7f 01       	movw	r14, r30
    1cd4:	57 01       	movw	r10, r14
    1cd6:	f7 01       	movw	r30, r14
    1cd8:	81 91       	ld	r24, Z+
    1cda:	88 23       	and	r24, r24
    1cdc:	09 f4       	brne	.+2      	; 0x1ce0 <mp_vprintf+0x5a>
    1cde:	b8 c1       	rjmp	.+880    	; 0x2050 <mp_vprintf+0x3ca>
    1ce0:	85 32       	cpi	r24, 0x25	; 37
    1ce2:	b9 f7       	brne	.-18     	; 0x1cd2 <mp_vprintf+0x4c>
    1ce4:	b5 c1       	rjmp	.+874    	; 0x2050 <mp_vprintf+0x3ca>
    1ce6:	ea 1a       	sub	r14, r26
    1ce8:	fb 0a       	sbc	r15, r27
    1cea:	f1 01       	movw	r30, r2
    1cec:	22 81       	ldd	r18, Z+2	; 0x02
    1cee:	33 81       	ldd	r19, Z+3	; 0x03
    1cf0:	a7 01       	movw	r20, r14
    1cf2:	bd 01       	movw	r22, r26
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	f9 01       	movw	r30, r18
    1cfa:	09 95       	icall
    1cfc:	4e 0c       	add	r4, r14
    1cfe:	5f 1c       	adc	r5, r15
    1d00:	d5 01       	movw	r26, r10
    1d02:	8c 91       	ld	r24, X
    1d04:	88 23       	and	r24, r24
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <mp_vprintf+0x84>
    1d08:	b9 c1       	rjmp	.+882    	; 0x207c <mp_vprintf+0x3f6>
    1d0a:	4d 01       	movw	r8, r26
    1d0c:	ef ef       	ldi	r30, 0xFF	; 255
    1d0e:	8e 1a       	sub	r8, r30
    1d10:	9e 0a       	sbc	r9, r30
    1d12:	11 96       	adiw	r26, 0x01	; 1
    1d14:	8c 91       	ld	r24, X
    1d16:	88 23       	and	r24, r24
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <mp_vprintf+0x96>
    1d1a:	9f c1       	rjmp	.+830    	; 0x205a <mp_vprintf+0x3d4>
    1d1c:	00 e2       	ldi	r16, 0x20	; 32
    1d1e:	61 2c       	mov	r6, r1
    1d20:	71 2c       	mov	r7, r1
    1d22:	8d 32       	cpi	r24, 0x2D	; 45
    1d24:	19 f4       	brne	.+6      	; 0x1d2c <mp_vprintf+0xa6>
    1d26:	68 94       	set
    1d28:	60 f8       	bld	r6, 0
    1d2a:	1d c0       	rjmp	.+58     	; 0x1d66 <mp_vprintf+0xe0>
    1d2c:	8b 32       	cpi	r24, 0x2B	; 43
    1d2e:	19 f4       	brne	.+6      	; 0x1d36 <mp_vprintf+0xb0>
    1d30:	68 94       	set
    1d32:	61 f8       	bld	r6, 1
    1d34:	18 c0       	rjmp	.+48     	; 0x1d66 <mp_vprintf+0xe0>
    1d36:	80 32       	cpi	r24, 0x20	; 32
    1d38:	19 f4       	brne	.+6      	; 0x1d40 <mp_vprintf+0xba>
    1d3a:	68 94       	set
    1d3c:	62 f8       	bld	r6, 2
    1d3e:	13 c0       	rjmp	.+38     	; 0x1d66 <mp_vprintf+0xe0>
    1d40:	81 32       	cpi	r24, 0x21	; 33
    1d42:	19 f4       	brne	.+6      	; 0x1d4a <mp_vprintf+0xc4>
    1d44:	68 94       	set
    1d46:	63 f8       	bld	r6, 3
    1d48:	0e c0       	rjmp	.+28     	; 0x1d66 <mp_vprintf+0xe0>
    1d4a:	80 33       	cpi	r24, 0x30	; 48
    1d4c:	49 f0       	breq	.+18     	; 0x1d60 <mp_vprintf+0xda>
    1d4e:	d4 01       	movw	r26, r8
    1d50:	8c 91       	ld	r24, X
    1d52:	90 ed       	ldi	r25, 0xD0	; 208
    1d54:	98 0f       	add	r25, r24
    1d56:	9a 30       	cpi	r25, 0x0A	; 10
    1d58:	70 f0       	brcs	.+28     	; 0x1d76 <mp_vprintf+0xf0>
    1d5a:	e1 2c       	mov	r14, r1
    1d5c:	f1 2c       	mov	r15, r1
    1d5e:	25 c0       	rjmp	.+74     	; 0x1daa <mp_vprintf+0x124>
    1d60:	68 94       	set
    1d62:	66 f8       	bld	r6, 6
    1d64:	00 e3       	ldi	r16, 0x30	; 48
    1d66:	bf ef       	ldi	r27, 0xFF	; 255
    1d68:	8b 1a       	sub	r8, r27
    1d6a:	9b 0a       	sbc	r9, r27
    1d6c:	f4 01       	movw	r30, r8
    1d6e:	80 81       	ld	r24, Z
    1d70:	81 11       	cpse	r24, r1
    1d72:	d7 cf       	rjmp	.-82     	; 0x1d22 <mp_vprintf+0x9c>
    1d74:	75 c1       	rjmp	.+746    	; 0x2060 <mp_vprintf+0x3da>
    1d76:	f4 01       	movw	r30, r8
    1d78:	31 96       	adiw	r30, 0x01	; 1
    1d7a:	e1 2c       	mov	r14, r1
    1d7c:	f1 2c       	mov	r15, r1
    1d7e:	97 01       	movw	r18, r14
    1d80:	22 0f       	add	r18, r18
    1d82:	33 1f       	adc	r19, r19
    1d84:	ee 0c       	add	r14, r14
    1d86:	ff 1c       	adc	r15, r15
    1d88:	ee 0c       	add	r14, r14
    1d8a:	ff 1c       	adc	r15, r15
    1d8c:	ee 0c       	add	r14, r14
    1d8e:	ff 1c       	adc	r15, r15
    1d90:	e2 0e       	add	r14, r18
    1d92:	f3 1e       	adc	r15, r19
    1d94:	e8 0e       	add	r14, r24
    1d96:	f1 1c       	adc	r15, r1
    1d98:	20 e3       	ldi	r18, 0x30	; 48
    1d9a:	e2 1a       	sub	r14, r18
    1d9c:	f1 08       	sbc	r15, r1
    1d9e:	4f 01       	movw	r8, r30
    1da0:	81 91       	ld	r24, Z+
    1da2:	90 ed       	ldi	r25, 0xD0	; 208
    1da4:	98 0f       	add	r25, r24
    1da6:	9a 30       	cpi	r25, 0x0A	; 10
    1da8:	50 f3       	brcs	.-44     	; 0x1d7e <mp_vprintf+0xf8>
    1daa:	8e 32       	cpi	r24, 0x2E	; 46
    1dac:	d1 f5       	brne	.+116    	; 0x1e22 <mp_vprintf+0x19c>
    1dae:	d4 01       	movw	r26, r8
    1db0:	11 96       	adiw	r26, 0x01	; 1
    1db2:	2c 91       	ld	r18, X
    1db4:	2a 32       	cpi	r18, 0x2A	; 42
    1db6:	59 f0       	breq	.+22     	; 0x1dce <mp_vprintf+0x148>
    1db8:	a4 01       	movw	r20, r8
    1dba:	4f 5f       	subi	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	80 ed       	ldi	r24, 0xD0	; 208
    1dc0:	82 0f       	add	r24, r18
    1dc2:	8a 30       	cpi	r24, 0x0A	; 10
    1dc4:	78 f0       	brcs	.+30     	; 0x1de4 <mp_vprintf+0x15e>
    1dc6:	4a 01       	movw	r8, r20
    1dc8:	a1 2c       	mov	r10, r1
    1dca:	b1 2c       	mov	r11, r1
    1dcc:	25 c0       	rjmp	.+74     	; 0x1e18 <mp_vprintf+0x192>
    1dce:	b2 e0       	ldi	r27, 0x02	; 2
    1dd0:	8b 0e       	add	r8, r27
    1dd2:	91 1c       	adc	r9, r1
    1dd4:	f6 01       	movw	r30, r12
    1dd6:	a0 80       	ld	r10, Z
    1dd8:	b1 80       	ldd	r11, Z+1	; 0x01
    1dda:	96 01       	movw	r18, r12
    1ddc:	2e 5f       	subi	r18, 0xFE	; 254
    1dde:	3f 4f       	sbci	r19, 0xFF	; 255
    1de0:	69 01       	movw	r12, r18
    1de2:	1a c0       	rjmp	.+52     	; 0x1e18 <mp_vprintf+0x192>
    1de4:	f4 01       	movw	r30, r8
    1de6:	32 96       	adiw	r30, 0x02	; 2
    1de8:	a1 2c       	mov	r10, r1
    1dea:	b1 2c       	mov	r11, r1
    1dec:	c5 01       	movw	r24, r10
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	aa 0c       	add	r10, r10
    1df4:	bb 1c       	adc	r11, r11
    1df6:	aa 0c       	add	r10, r10
    1df8:	bb 1c       	adc	r11, r11
    1dfa:	aa 0c       	add	r10, r10
    1dfc:	bb 1c       	adc	r11, r11
    1dfe:	a8 0e       	add	r10, r24
    1e00:	b9 1e       	adc	r11, r25
    1e02:	a2 0e       	add	r10, r18
    1e04:	b1 1c       	adc	r11, r1
    1e06:	30 e3       	ldi	r19, 0x30	; 48
    1e08:	a3 1a       	sub	r10, r19
    1e0a:	b1 08       	sbc	r11, r1
    1e0c:	4f 01       	movw	r8, r30
    1e0e:	21 91       	ld	r18, Z+
    1e10:	80 ed       	ldi	r24, 0xD0	; 208
    1e12:	82 0f       	add	r24, r18
    1e14:	8a 30       	cpi	r24, 0x0A	; 10
    1e16:	50 f3       	brcs	.-44     	; 0x1dec <mp_vprintf+0x166>
    1e18:	bb 20       	and	r11, r11
    1e1a:	3c f4       	brge	.+14     	; 0x1e2a <mp_vprintf+0x1a4>
    1e1c:	a1 2c       	mov	r10, r1
    1e1e:	b1 2c       	mov	r11, r1
    1e20:	04 c0       	rjmp	.+8      	; 0x1e2a <mp_vprintf+0x1a4>
    1e22:	aa 24       	eor	r10, r10
    1e24:	aa 94       	dec	r10
    1e26:	bb 24       	eor	r11, r11
    1e28:	ba 94       	dec	r11
    1e2a:	d4 01       	movw	r26, r8
    1e2c:	8c 91       	ld	r24, X
    1e2e:	8c 36       	cpi	r24, 0x6C	; 108
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <mp_vprintf+0x1b2>
    1e32:	bf ef       	ldi	r27, 0xFF	; 255
    1e34:	8b 1a       	sub	r8, r27
    1e36:	9b 0a       	sbc	r9, r27
    1e38:	f4 01       	movw	r30, r8
    1e3a:	80 81       	ld	r24, Z
    1e3c:	88 23       	and	r24, r24
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <mp_vprintf+0x1bc>
    1e40:	1d c1       	rjmp	.+570    	; 0x207c <mp_vprintf+0x3f6>
    1e42:	84 36       	cpi	r24, 0x64	; 100
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <mp_vprintf+0x1c2>
    1e46:	a1 c0       	rjmp	.+322    	; 0x1f8a <mp_vprintf+0x304>
    1e48:	68 f4       	brcc	.+26     	; 0x1e64 <mp_vprintf+0x1de>
    1e4a:	88 35       	cpi	r24, 0x58	; 88
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <mp_vprintf+0x1ca>
    1e4e:	b4 c0       	rjmp	.+360    	; 0x1fb8 <mp_vprintf+0x332>
    1e50:	20 f4       	brcc	.+8      	; 0x1e5a <mp_vprintf+0x1d4>
    1e52:	80 35       	cpi	r24, 0x50	; 80
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <mp_vprintf+0x1d2>
    1e56:	d0 c0       	rjmp	.+416    	; 0x1ff8 <mp_vprintf+0x372>
    1e58:	e6 c0       	rjmp	.+460    	; 0x2026 <mp_vprintf+0x3a0>
    1e5a:	82 36       	cpi	r24, 0x62	; 98
    1e5c:	a1 f0       	breq	.+40     	; 0x1e86 <mp_vprintf+0x200>
    1e5e:	83 36       	cpi	r24, 0x63	; 99
    1e60:	89 f1       	breq	.+98     	; 0x1ec4 <mp_vprintf+0x23e>
    1e62:	e1 c0       	rjmp	.+450    	; 0x2026 <mp_vprintf+0x3a0>
    1e64:	83 37       	cpi	r24, 0x73	; 115
    1e66:	09 f4       	brne	.+2      	; 0x1e6a <mp_vprintf+0x1e4>
    1e68:	60 c0       	rjmp	.+192    	; 0x1f2a <mp_vprintf+0x2a4>
    1e6a:	30 f4       	brcc	.+12     	; 0x1e78 <mp_vprintf+0x1f2>
    1e6c:	80 37       	cpi	r24, 0x70	; 112
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <mp_vprintf+0x1ec>
    1e70:	c3 c0       	rjmp	.+390    	; 0x1ff8 <mp_vprintf+0x372>
    1e72:	81 37       	cpi	r24, 0x71	; 113
    1e74:	d1 f1       	breq	.+116    	; 0x1eea <mp_vprintf+0x264>
    1e76:	d7 c0       	rjmp	.+430    	; 0x2026 <mp_vprintf+0x3a0>
    1e78:	85 37       	cpi	r24, 0x75	; 117
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <mp_vprintf+0x1f8>
    1e7c:	9d c0       	rjmp	.+314    	; 0x1fb8 <mp_vprintf+0x332>
    1e7e:	88 37       	cpi	r24, 0x78	; 120
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <mp_vprintf+0x1fe>
    1e82:	9a c0       	rjmp	.+308    	; 0x1fb8 <mp_vprintf+0x332>
    1e84:	d0 c0       	rjmp	.+416    	; 0x2026 <mp_vprintf+0x3a0>
    1e86:	56 01       	movw	r10, r12
    1e88:	f2 e0       	ldi	r31, 0x02	; 2
    1e8a:	af 0e       	add	r10, r31
    1e8c:	b1 1c       	adc	r11, r1
    1e8e:	d6 01       	movw	r26, r12
    1e90:	8d 91       	ld	r24, X+
    1e92:	9c 91       	ld	r25, X
    1e94:	89 2b       	or	r24, r25
    1e96:	59 f0       	breq	.+22     	; 0x1eae <mp_vprintf+0x228>
    1e98:	93 01       	movw	r18, r6
    1e9a:	44 e0       	ldi	r20, 0x04	; 4
    1e9c:	50 e0       	ldi	r21, 0x00	; 0
    1e9e:	66 e2       	ldi	r22, 0x26	; 38
    1ea0:	71 e0       	ldi	r23, 0x01	; 1
    1ea2:	c1 01       	movw	r24, r2
    1ea4:	7c dd       	rcall	.-1288   	; 0x199e <mp_print_strn>
    1ea6:	48 0e       	add	r4, r24
    1ea8:	59 1e       	adc	r5, r25
    1eaa:	65 01       	movw	r12, r10
    1eac:	ce c0       	rjmp	.+412    	; 0x204a <mp_vprintf+0x3c4>
    1eae:	93 01       	movw	r18, r6
    1eb0:	45 e0       	ldi	r20, 0x05	; 5
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	6b e2       	ldi	r22, 0x2B	; 43
    1eb6:	71 e0       	ldi	r23, 0x01	; 1
    1eb8:	c1 01       	movw	r24, r2
    1eba:	71 dd       	rcall	.-1310   	; 0x199e <mp_print_strn>
    1ebc:	48 0e       	add	r4, r24
    1ebe:	59 1e       	adc	r5, r25
    1ec0:	65 01       	movw	r12, r10
    1ec2:	c3 c0       	rjmp	.+390    	; 0x204a <mp_vprintf+0x3c4>
    1ec4:	56 01       	movw	r10, r12
    1ec6:	b2 e0       	ldi	r27, 0x02	; 2
    1ec8:	ab 0e       	add	r10, r27
    1eca:	b1 1c       	adc	r11, r1
    1ecc:	f6 01       	movw	r30, r12
    1ece:	80 81       	ld	r24, Z
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	93 01       	movw	r18, r6
    1ed4:	41 e0       	ldi	r20, 0x01	; 1
    1ed6:	50 e0       	ldi	r21, 0x00	; 0
    1ed8:	be 01       	movw	r22, r28
    1eda:	6f 5f       	subi	r22, 0xFF	; 255
    1edc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ede:	c1 01       	movw	r24, r2
    1ee0:	5e dd       	rcall	.-1348   	; 0x199e <mp_print_strn>
    1ee2:	48 0e       	add	r4, r24
    1ee4:	59 1e       	adc	r5, r25
    1ee6:	65 01       	movw	r12, r10
    1ee8:	b0 c0       	rjmp	.+352    	; 0x204a <mp_vprintf+0x3c4>
    1eea:	96 01       	movw	r18, r12
    1eec:	2e 5f       	subi	r18, 0xFE	; 254
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	3c 83       	std	Y+4, r19	; 0x04
    1ef2:	2b 83       	std	Y+3, r18	; 0x03
    1ef4:	be 01       	movw	r22, r28
    1ef6:	6f 5f       	subi	r22, 0xFF	; 255
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	d6 01       	movw	r26, r12
    1efc:	8d 91       	ld	r24, X+
    1efe:	9c 91       	ld	r25, X
    1f00:	da db       	rcall	.-2124   	; 0x16b6 <qstr_data>
    1f02:	bb 20       	and	r11, r11
    1f04:	3c f0       	brlt	.+14     	; 0x1f14 <mp_vprintf+0x28e>
    1f06:	29 81       	ldd	r18, Y+1	; 0x01
    1f08:	3a 81       	ldd	r19, Y+2	; 0x02
    1f0a:	a2 16       	cp	r10, r18
    1f0c:	b3 06       	cpc	r11, r19
    1f0e:	10 f4       	brcc	.+4      	; 0x1f14 <mp_vprintf+0x28e>
    1f10:	ba 82       	std	Y+2, r11	; 0x02
    1f12:	a9 82       	std	Y+1, r10	; 0x01
    1f14:	49 81       	ldd	r20, Y+1	; 0x01
    1f16:	5a 81       	ldd	r21, Y+2	; 0x02
    1f18:	93 01       	movw	r18, r6
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	c1 01       	movw	r24, r2
    1f1e:	3f dd       	rcall	.-1410   	; 0x199e <mp_print_strn>
    1f20:	48 0e       	add	r4, r24
    1f22:	59 1e       	adc	r5, r25
    1f24:	cb 80       	ldd	r12, Y+3	; 0x03
    1f26:	dc 80       	ldd	r13, Y+4	; 0x04
    1f28:	90 c0       	rjmp	.+288    	; 0x204a <mp_vprintf+0x3c4>
    1f2a:	f6 01       	movw	r30, r12
    1f2c:	32 96       	adiw	r30, 0x02	; 2
    1f2e:	fc 83       	std	Y+4, r31	; 0x04
    1f30:	eb 83       	std	Y+3, r30	; 0x03
    1f32:	d6 01       	movw	r26, r12
    1f34:	6d 91       	ld	r22, X+
    1f36:	7c 91       	ld	r23, X
    1f38:	a1 14       	cp	r10, r1
    1f3a:	b1 04       	cpc	r11, r1
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <mp_vprintf+0x2ba>
    1f3e:	95 c0       	rjmp	.+298    	; 0x206a <mp_vprintf+0x3e4>
    1f40:	61 15       	cp	r22, r1
    1f42:	71 05       	cpc	r23, r1
    1f44:	61 f4       	brne	.+24     	; 0x1f5e <mp_vprintf+0x2d8>
    1f46:	93 01       	movw	r18, r6
    1f48:	46 e0       	ldi	r20, 0x06	; 6
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	61 e3       	ldi	r22, 0x31	; 49
    1f4e:	71 e0       	ldi	r23, 0x01	; 1
    1f50:	c1 01       	movw	r24, r2
    1f52:	25 dd       	rcall	.-1462   	; 0x199e <mp_print_strn>
    1f54:	48 0e       	add	r4, r24
    1f56:	59 1e       	adc	r5, r25
    1f58:	cb 80       	ldd	r12, Y+3	; 0x03
    1f5a:	dc 80       	ldd	r13, Y+4	; 0x04
    1f5c:	76 c0       	rjmp	.+236    	; 0x204a <mp_vprintf+0x3c4>
    1f5e:	fb 01       	movw	r30, r22
    1f60:	01 90       	ld	r0, Z+
    1f62:	00 20       	and	r0, r0
    1f64:	e9 f7       	brne	.-6      	; 0x1f60 <mp_vprintf+0x2da>
    1f66:	31 97       	sbiw	r30, 0x01	; 1
    1f68:	af 01       	movw	r20, r30
    1f6a:	46 1b       	sub	r20, r22
    1f6c:	57 0b       	sbc	r21, r23
    1f6e:	bb 20       	and	r11, r11
    1f70:	24 f0       	brlt	.+8      	; 0x1f7a <mp_vprintf+0x2f4>
    1f72:	a4 16       	cp	r10, r20
    1f74:	b5 06       	cpc	r11, r21
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <mp_vprintf+0x2f4>
    1f78:	a5 01       	movw	r20, r10
    1f7a:	93 01       	movw	r18, r6
    1f7c:	c1 01       	movw	r24, r2
    1f7e:	0f dd       	rcall	.-1506   	; 0x199e <mp_print_strn>
    1f80:	48 0e       	add	r4, r24
    1f82:	59 1e       	adc	r5, r25
    1f84:	cb 80       	ldd	r12, Y+3	; 0x03
    1f86:	dc 80       	ldd	r13, Y+4	; 0x04
    1f88:	60 c0       	rjmp	.+192    	; 0x204a <mp_vprintf+0x3c4>
    1f8a:	f6 01       	movw	r30, r12
    1f8c:	32 96       	adiw	r30, 0x02	; 2
    1f8e:	fc 83       	std	Y+4, r31	; 0x04
    1f90:	eb 83       	std	Y+3, r30	; 0x03
    1f92:	d6 01       	movw	r26, r12
    1f94:	6d 91       	ld	r22, X+
    1f96:	7c 91       	ld	r23, X
    1f98:	57 01       	movw	r10, r14
    1f9a:	c0 2e       	mov	r12, r16
    1f9c:	73 01       	movw	r14, r6
    1f9e:	01 e6       	ldi	r16, 0x61	; 97
    1fa0:	10 e0       	ldi	r17, 0x00	; 0
    1fa2:	2a e0       	ldi	r18, 0x0A	; 10
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	50 e0       	ldi	r21, 0x00	; 0
    1faa:	c1 01       	movw	r24, r2
    1fac:	b7 dd       	rcall	.-1170   	; 0x1b1c <mp_print_int>
    1fae:	48 0e       	add	r4, r24
    1fb0:	59 1e       	adc	r5, r25
    1fb2:	cb 80       	ldd	r12, Y+3	; 0x03
    1fb4:	dc 80       	ldd	r13, Y+4	; 0x04
    1fb6:	49 c0       	rjmp	.+146    	; 0x204a <mp_vprintf+0x3c4>
    1fb8:	f6 01       	movw	r30, r12
    1fba:	32 96       	adiw	r30, 0x02	; 2
    1fbc:	fc 83       	std	Y+4, r31	; 0x04
    1fbe:	eb 83       	std	Y+3, r30	; 0x03
    1fc0:	48 2f       	mov	r20, r24
    1fc2:	40 7f       	andi	r20, 0xF0	; 240
    1fc4:	4f 50       	subi	r20, 0x0F	; 15
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	01 96       	adiw	r24, 0x01	; 1
    1fcc:	86 70       	andi	r24, 0x06	; 6
    1fce:	99 27       	eor	r25, r25
    1fd0:	20 e1       	ldi	r18, 0x10	; 16
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	28 1b       	sub	r18, r24
    1fd6:	39 0b       	sbc	r19, r25
    1fd8:	d6 01       	movw	r26, r12
    1fda:	6d 91       	ld	r22, X+
    1fdc:	7c 91       	ld	r23, X
    1fde:	57 01       	movw	r10, r14
    1fe0:	c0 2e       	mov	r12, r16
    1fe2:	73 01       	movw	r14, r6
    1fe4:	8a 01       	movw	r16, r20
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	c1 01       	movw	r24, r2
    1fec:	97 dd       	rcall	.-1234   	; 0x1b1c <mp_print_int>
    1fee:	48 0e       	add	r4, r24
    1ff0:	59 1e       	adc	r5, r25
    1ff2:	cb 80       	ldd	r12, Y+3	; 0x03
    1ff4:	dc 80       	ldd	r13, Y+4	; 0x04
    1ff6:	29 c0       	rjmp	.+82     	; 0x204a <mp_vprintf+0x3c4>
    1ff8:	f6 01       	movw	r30, r12
    1ffa:	34 96       	adiw	r30, 0x04	; 4
    1ffc:	fc 83       	std	Y+4, r31	; 0x04
    1ffe:	eb 83       	std	Y+3, r30	; 0x03
    2000:	d6 01       	movw	r26, r12
    2002:	6d 91       	ld	r22, X+
    2004:	7c 91       	ld	r23, X
    2006:	57 01       	movw	r10, r14
    2008:	c0 2e       	mov	r12, r16
    200a:	73 01       	movw	r14, r6
    200c:	01 e6       	ldi	r16, 0x61	; 97
    200e:	10 e0       	ldi	r17, 0x00	; 0
    2010:	20 e1       	ldi	r18, 0x10	; 16
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e0       	ldi	r20, 0x00	; 0
    2016:	50 e0       	ldi	r21, 0x00	; 0
    2018:	c1 01       	movw	r24, r2
    201a:	80 dd       	rcall	.-1280   	; 0x1b1c <mp_print_int>
    201c:	48 0e       	add	r4, r24
    201e:	59 1e       	adc	r5, r25
    2020:	cb 80       	ldd	r12, Y+3	; 0x03
    2022:	dc 80       	ldd	r13, Y+4	; 0x04
    2024:	12 c0       	rjmp	.+36     	; 0x204a <mp_vprintf+0x3c4>
    2026:	85 32       	cpi	r24, 0x25	; 37
    2028:	11 f0       	breq	.+4      	; 0x202e <mp_vprintf+0x3a8>
    202a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    202e:	d1 01       	movw	r26, r2
    2030:	12 96       	adiw	r26, 0x02	; 2
    2032:	ed 91       	ld	r30, X+
    2034:	fc 91       	ld	r31, X
    2036:	13 97       	sbiw	r26, 0x03	; 3
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	50 e0       	ldi	r21, 0x00	; 0
    203c:	b4 01       	movw	r22, r8
    203e:	8d 91       	ld	r24, X+
    2040:	9c 91       	ld	r25, X
    2042:	09 95       	icall
    2044:	bf ef       	ldi	r27, 0xFF	; 255
    2046:	4b 1a       	sub	r4, r27
    2048:	5b 0a       	sbc	r5, r27
    204a:	d4 01       	movw	r26, r8
    204c:	11 96       	adiw	r26, 0x01	; 1
    204e:	36 ce       	rjmp	.-916    	; 0x1cbc <mp_vprintf+0x36>
    2050:	aa 15       	cp	r26, r10
    2052:	bb 05       	cpc	r27, r11
    2054:	08 f0       	brcs	.+2      	; 0x2058 <mp_vprintf+0x3d2>
    2056:	59 ce       	rjmp	.-846    	; 0x1d0a <mp_vprintf+0x84>
    2058:	46 ce       	rjmp	.-884    	; 0x1ce6 <mp_vprintf+0x60>
    205a:	00 e2       	ldi	r16, 0x20	; 32
    205c:	61 2c       	mov	r6, r1
    205e:	71 2c       	mov	r7, r1
    2060:	f4 01       	movw	r30, r8
    2062:	80 81       	ld	r24, Z
    2064:	e1 2c       	mov	r14, r1
    2066:	f1 2c       	mov	r15, r1
    2068:	a0 ce       	rjmp	.-704    	; 0x1daa <mp_vprintf+0x124>
    206a:	fb 01       	movw	r30, r22
    206c:	01 90       	ld	r0, Z+
    206e:	00 20       	and	r0, r0
    2070:	e9 f7       	brne	.-6      	; 0x206c <mp_vprintf+0x3e6>
    2072:	31 97       	sbiw	r30, 0x01	; 1
    2074:	af 01       	movw	r20, r30
    2076:	46 1b       	sub	r20, r22
    2078:	57 0b       	sbc	r21, r23
    207a:	7b cf       	rjmp	.-266    	; 0x1f72 <mp_vprintf+0x2ec>
    207c:	c2 01       	movw	r24, r4
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	bf 90       	pop	r11
    2098:	af 90       	pop	r10
    209a:	9f 90       	pop	r9
    209c:	8f 90       	pop	r8
    209e:	7f 90       	pop	r7
    20a0:	6f 90       	pop	r6
    20a2:	5f 90       	pop	r5
    20a4:	4f 90       	pop	r4
    20a6:	3f 90       	pop	r3
    20a8:	2f 90       	pop	r2
    20aa:	08 95       	ret

000020ac <mp_printf>:
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	ae 01       	movw	r20, r28
    20b6:	47 5f       	subi	r20, 0xF7	; 247
    20b8:	5f 4f       	sbci	r21, 0xFF	; 255
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	e1 dd       	rcall	.-1086   	; 0x1c86 <mp_vprintf>
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret

000020ca <range_print>:
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	18 2f       	mov	r17, r24
    20d4:	09 2f       	mov	r16, r25
    20d6:	eb 01       	movw	r28, r22
    20d8:	8d 81       	ldd	r24, Y+5	; 0x05
    20da:	8f 93       	push	r24
    20dc:	8c 81       	ldd	r24, Y+4	; 0x04
    20de:	8f 93       	push	r24
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	8f 93       	push	r24
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	8f 93       	push	r24
    20e8:	8f ed       	ldi	r24, 0xDF	; 223
    20ea:	91 e0       	ldi	r25, 0x01	; 1
    20ec:	9f 93       	push	r25
    20ee:	8f 93       	push	r24
    20f0:	0f 93       	push	r16
    20f2:	1f 93       	push	r17
    20f4:	db df       	rcall	.-74     	; 0x20ac <mp_printf>
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	9f 81       	ldd	r25, Y+7	; 0x07
    20fa:	2d b7       	in	r18, 0x3d	; 61
    20fc:	3e b7       	in	r19, 0x3e	; 62
    20fe:	28 5f       	subi	r18, 0xF8	; 248
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
    2102:	0f b6       	in	r0, 0x3f	; 63
    2104:	f8 94       	cli
    2106:	3e bf       	out	0x3e, r19	; 62
    2108:	0f be       	out	0x3f, r0	; 63
    210a:	2d bf       	out	0x3d, r18	; 61
    210c:	81 30       	cpi	r24, 0x01	; 1
    210e:	91 05       	cpc	r25, r1
    2110:	31 f4       	brne	.+12     	; 0x211e <__stack+0x1f>
    2112:	67 eb       	ldi	r22, 0xB7	; 183
    2114:	7e e0       	ldi	r23, 0x0E	; 14
    2116:	81 2f       	mov	r24, r17
    2118:	90 2f       	mov	r25, r16
    211a:	1a dc       	rcall	.-1996   	; 0x1950 <mp_print_str>
    211c:	0f c0       	rjmp	.+30     	; 0x213c <__stack+0x3d>
    211e:	9f 93       	push	r25
    2120:	8f 93       	push	r24
    2122:	8c ee       	ldi	r24, 0xEC	; 236
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	9f 93       	push	r25
    2128:	8f 93       	push	r24
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	be df       	rcall	.-132    	; 0x20ac <mp_printf>
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <singleton_print>:
    2146:	fb 01       	movw	r30, r22
    2148:	23 81       	ldd	r18, Z+3	; 0x03
    214a:	2f 93       	push	r18
    214c:	22 81       	ldd	r18, Z+2	; 0x02
    214e:	2f 93       	push	r18
    2150:	2b ea       	ldi	r18, 0xAB	; 171
    2152:	3d e0       	ldi	r19, 0x0D	; 13
    2154:	3f 93       	push	r19
    2156:	2f 93       	push	r18
    2158:	9f 93       	push	r25
    215a:	8f 93       	push	r24
    215c:	a7 df       	rcall	.-178    	; 0x20ac <mp_printf>
    215e:	0f 90       	pop	r0
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	08 95       	ret

0000216c <type_print>:
    216c:	fb 01       	movw	r30, r22
    216e:	25 81       	ldd	r18, Z+5	; 0x05
    2170:	2f 93       	push	r18
    2172:	24 81       	ldd	r18, Z+4	; 0x04
    2174:	2f 93       	push	r18
    2176:	22 ef       	ldi	r18, 0xF2	; 242
    2178:	31 e0       	ldi	r19, 0x01	; 1
    217a:	3f 93       	push	r19
    217c:	2f 93       	push	r18
    217e:	9f 93       	push	r25
    2180:	8f 93       	push	r24
    2182:	94 df       	rcall	.-216    	; 0x20ac <mp_printf>
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	08 95       	ret

00002192 <unichar_isxdigit>:
    2192:	80 38       	cpi	r24, 0x80	; 128
    2194:	91 05       	cpc	r25, r1
    2196:	40 f4       	brcc	.+16     	; 0x21a8 <unichar_isxdigit+0x16>
    2198:	fc 01       	movw	r30, r24
    219a:	e5 56       	subi	r30, 0x65	; 101
    219c:	f6 4d       	sbci	r31, 0xD6	; 214
    219e:	80 81       	ld	r24, Z
    21a0:	86 fb       	bst	r24, 6
    21a2:	88 27       	eor	r24, r24
    21a4:	80 f9       	bld	r24, 0
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <unichar_isxdigit+0x18>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	81 70       	andi	r24, 0x01	; 1
    21ac:	08 95       	ret

000021ae <unichar_xdigit_value>:
    21ae:	c0 97       	sbiw	r24, 0x30	; 48
    21b0:	8a 30       	cpi	r24, 0x0A	; 10
    21b2:	91 05       	cpc	r25, r1
    21b4:	10 f0       	brcs	.+4      	; 0x21ba <unichar_xdigit_value+0xc>
    21b6:	8f 7d       	andi	r24, 0xDF	; 223
    21b8:	07 97       	sbiw	r24, 0x07	; 7
    21ba:	08 95       	ret

000021bc <mp_lexer_free>:
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	00 97       	sbiw	r24, 0x00	; 0
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <mp_lexer_free+0x28>
    21c4:	ec 01       	movw	r28, r24
    21c6:	ee 81       	ldd	r30, Y+6	; 0x06
    21c8:	ff 81       	ldd	r31, Y+7	; 0x07
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	9b 81       	ldd	r25, Y+3	; 0x03
    21ce:	09 95       	icall
    21d0:	ce 01       	movw	r24, r28
    21d2:	81 96       	adiw	r24, 0x21	; 33
    21d4:	a0 db       	rcall	.-2240   	; 0x1916 <vstr_clear>
    21d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21da:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    21de:	ce 01       	movw	r24, r28
    21e0:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <mp_parse_node_is_const_false>:
    21ea:	8e 3d       	cpi	r24, 0xDE	; 222
    21ec:	91 05       	cpc	r25, r1
    21ee:	51 f0       	breq	.+20     	; 0x2204 <mp_parse_node_is_const_false+0x1a>
    21f0:	80 ff       	sbrs	r24, 0
    21f2:	0a c0       	rjmp	.+20     	; 0x2208 <mp_parse_node_is_const_false+0x1e>
    21f4:	95 95       	asr	r25
    21f6:	87 95       	ror	r24
    21f8:	21 e0       	ldi	r18, 0x01	; 1
    21fa:	89 2b       	or	r24, r25
    21fc:	09 f0       	breq	.+2      	; 0x2200 <mp_parse_node_is_const_false+0x16>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	82 2f       	mov	r24, r18
    2202:	03 c0       	rjmp	.+6      	; 0x220a <mp_parse_node_is_const_false+0x20>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	01 c0       	rjmp	.+2      	; 0x220a <mp_parse_node_is_const_false+0x20>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	81 70       	andi	r24, 0x01	; 1
    220c:	08 95       	ret

0000220e <mp_parse_node_is_const_true>:
    220e:	8e 3f       	cpi	r24, 0xFE	; 254
    2210:	91 05       	cpc	r25, r1
    2212:	51 f0       	breq	.+20     	; 0x2228 <mp_parse_node_is_const_true+0x1a>
    2214:	80 ff       	sbrs	r24, 0
    2216:	0a c0       	rjmp	.+20     	; 0x222c <mp_parse_node_is_const_true+0x1e>
    2218:	95 95       	asr	r25
    221a:	87 95       	ror	r24
    221c:	21 e0       	ldi	r18, 0x01	; 1
    221e:	89 2b       	or	r24, r25
    2220:	09 f4       	brne	.+2      	; 0x2224 <mp_parse_node_is_const_true+0x16>
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	82 2f       	mov	r24, r18
    2226:	03 c0       	rjmp	.+6      	; 0x222e <mp_parse_node_is_const_true+0x20>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	01 c0       	rjmp	.+2      	; 0x222e <mp_parse_node_is_const_true+0x20>
    222c:	80 e0       	ldi	r24, 0x00	; 0
    222e:	81 70       	andi	r24, 0x01	; 1
    2230:	08 95       	ret

00002232 <mp_parse_node_extract_list>:
    2232:	cf 92       	push	r12
    2234:	df 92       	push	r13
    2236:	ef 92       	push	r14
    2238:	ff 92       	push	r15
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	dc 01       	movw	r26, r24
    2240:	ed 91       	ld	r30, X+
    2242:	fc 91       	ld	r31, X
    2244:	30 97       	sbiw	r30, 0x00	; 0
    2246:	21 f4       	brne	.+8      	; 0x2250 <mp_parse_node_extract_list+0x1e>
    2248:	da 01       	movw	r26, r20
    224a:	1d 92       	st	X+, r1
    224c:	1c 92       	st	X, r1
    224e:	2e c0       	rjmp	.+92     	; 0x22ac <mp_parse_node_extract_list+0x7a>
    2250:	9f 01       	movw	r18, r30
    2252:	23 70       	andi	r18, 0x03	; 3
    2254:	33 27       	eor	r19, r19
    2256:	23 2b       	or	r18, r19
    2258:	31 f0       	breq	.+12     	; 0x2266 <mp_parse_node_extract_list+0x34>
    225a:	fa 01       	movw	r30, r20
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	80 83       	st	Z, r24
    2260:	e1 e0       	ldi	r30, 0x01	; 1
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	23 c0       	rjmp	.+70     	; 0x22ac <mp_parse_node_extract_list+0x7a>
    2266:	c4 80       	ldd	r12, Z+4	; 0x04
    2268:	d5 80       	ldd	r13, Z+5	; 0x05
    226a:	e6 80       	ldd	r14, Z+6	; 0x06
    226c:	f7 80       	ldd	r15, Z+7	; 0x07
    226e:	dd 24       	eor	r13, r13
    2270:	ee 24       	eor	r14, r14
    2272:	ff 24       	eor	r15, r15
    2274:	8b 01       	movw	r16, r22
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	c0 16       	cp	r12, r16
    227c:	d1 06       	cpc	r13, r17
    227e:	e2 06       	cpc	r14, r18
    2280:	f3 06       	cpc	r15, r19
    2282:	31 f0       	breq	.+12     	; 0x2290 <mp_parse_node_extract_list+0x5e>
    2284:	da 01       	movw	r26, r20
    2286:	8d 93       	st	X+, r24
    2288:	9c 93       	st	X, r25
    228a:	e1 e0       	ldi	r30, 0x01	; 1
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	0e c0       	rjmp	.+28     	; 0x22ac <mp_parse_node_extract_list+0x7a>
    2290:	cf 01       	movw	r24, r30
    2292:	08 96       	adiw	r24, 0x08	; 8
    2294:	da 01       	movw	r26, r20
    2296:	8d 93       	st	X+, r24
    2298:	9c 93       	st	X, r25
    229a:	84 81       	ldd	r24, Z+4	; 0x04
    229c:	95 81       	ldd	r25, Z+5	; 0x05
    229e:	a6 81       	ldd	r26, Z+6	; 0x06
    22a0:	b7 81       	ldd	r27, Z+7	; 0x07
    22a2:	89 2f       	mov	r24, r25
    22a4:	9a 2f       	mov	r25, r26
    22a6:	ab 2f       	mov	r26, r27
    22a8:	bb 27       	eor	r27, r27
    22aa:	fc 01       	movw	r30, r24
    22ac:	cf 01       	movw	r24, r30
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	ff 90       	pop	r15
    22b4:	ef 90       	pop	r14
    22b6:	df 90       	pop	r13
    22b8:	cf 90       	pop	r12
    22ba:	08 95       	ret

000022bc <mp_parse_tree_clear>:
    22bc:	cf 93       	push	r28
    22be:	df 93       	push	r29
    22c0:	fc 01       	movw	r30, r24
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	49 f0       	breq	.+18     	; 0x22dc <mp_parse_tree_clear+0x20>
    22ca:	fc 01       	movw	r30, r24
    22cc:	d2 81       	ldd	r29, Z+2	; 0x02
    22ce:	c3 81       	ldd	r28, Z+3	; 0x03
    22d0:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    22d4:	8d 2f       	mov	r24, r29
    22d6:	9c 2f       	mov	r25, r28
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	b9 f7       	brne	.-18     	; 0x22ca <mp_parse_tree_clear+0xe>
    22dc:	df 91       	pop	r29
    22de:	cf 91       	pop	r28
    22e0:	08 95       	ret

000022e2 <scope_free>:
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	ec 01       	movw	r28, r24
    22e8:	89 a1       	ldd	r24, Y+33	; 0x21
    22ea:	9a a1       	ldd	r25, Y+34	; 0x22
    22ec:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    22f0:	ce 01       	movw	r24, r28
    22f2:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    22f6:	df 91       	pop	r29
    22f8:	cf 91       	pop	r28
    22fa:	08 95       	ret

000022fc <scope_find>:
    22fc:	fc 01       	movw	r30, r24
    22fe:	a7 8d       	ldd	r26, Z+31	; 0x1f
    2300:	b0 a1       	ldd	r27, Z+32	; 0x20
    2302:	10 97       	sbiw	r26, 0x00	; 0
    2304:	09 f1       	breq	.+66     	; 0x2348 <scope_find+0x4c>
    2306:	81 a1       	ldd	r24, Z+33	; 0x21
    2308:	92 a1       	ldd	r25, Z+34	; 0x22
    230a:	fc 01       	movw	r30, r24
    230c:	24 81       	ldd	r18, Z+4	; 0x04
    230e:	35 81       	ldd	r19, Z+5	; 0x05
    2310:	62 17       	cp	r22, r18
    2312:	73 07       	cpc	r23, r19
    2314:	d9 f0       	breq	.+54     	; 0x234c <scope_find+0x50>
    2316:	9c 01       	movw	r18, r24
    2318:	2a 5f       	subi	r18, 0xFA	; 250
    231a:	3f 4f       	sbci	r19, 0xFF	; 255
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	0b c0       	rjmp	.+22     	; 0x2338 <scope_find+0x3c>
    2322:	c9 01       	movw	r24, r18
    2324:	2a 5f       	subi	r18, 0xFA	; 250
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	f9 01       	movw	r30, r18
    232a:	32 97       	sbiw	r30, 0x02	; 2
    232c:	01 90       	ld	r0, Z+
    232e:	f0 81       	ld	r31, Z
    2330:	e0 2d       	mov	r30, r0
    2332:	e6 17       	cp	r30, r22
    2334:	f7 07       	cpc	r31, r23
    2336:	51 f0       	breq	.+20     	; 0x234c <scope_find+0x50>
    2338:	4f 5f       	subi	r20, 0xFF	; 255
    233a:	5f 4f       	sbci	r21, 0xFF	; 255
    233c:	4a 17       	cp	r20, r26
    233e:	5b 07       	cpc	r21, r27
    2340:	81 f7       	brne	.-32     	; 0x2322 <scope_find+0x26>
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	08 95       	ret
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	08 95       	ret

0000234e <scope_find_global>:
    234e:	fc 01       	movw	r30, r24
    2350:	01 c0       	rjmp	.+2      	; 0x2354 <scope_find_global+0x6>
    2352:	f9 01       	movw	r30, r18
    2354:	21 81       	ldd	r18, Z+1	; 0x01
    2356:	32 81       	ldd	r19, Z+2	; 0x02
    2358:	21 15       	cp	r18, r1
    235a:	31 05       	cpc	r19, r1
    235c:	d1 f7       	brne	.-12     	; 0x2352 <scope_find_global+0x4>
    235e:	cf 01       	movw	r24, r30
    2360:	cd cf       	rjmp	.-102    	; 0x22fc <scope_find>
    2362:	08 95       	ret

00002364 <mp_emit_common_id_op>:
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16
    236a:	1f 93       	push	r17
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	8c 01       	movw	r16, r24
    2372:	7b 01       	movw	r14, r22
    2374:	ca 01       	movw	r24, r20
    2376:	e9 01       	movw	r28, r18
    2378:	b9 01       	movw	r22, r18
    237a:	c0 df       	rcall	.-128    	; 0x22fc <scope_find>
    237c:	fc 01       	movw	r30, r24
    237e:	89 2b       	or	r24, r25
    2380:	11 f4       	brne	.+4      	; 0x2386 <mp_emit_common_id_op+0x22>
    2382:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    2386:	90 81       	ld	r25, Z
    2388:	91 30       	cpi	r25, 0x01	; 1
    238a:	59 f4       	brne	.+22     	; 0x23a2 <mp_emit_common_id_op+0x3e>
    238c:	d7 01       	movw	r26, r14
    238e:	12 96       	adiw	r26, 0x02	; 2
    2390:	ed 91       	ld	r30, X+
    2392:	fc 91       	ld	r31, X
    2394:	13 97       	sbiw	r26, 0x03	; 3
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	be 01       	movw	r22, r28
    239c:	c8 01       	movw	r24, r16
    239e:	09 95       	icall
    23a0:	29 c0       	rjmp	.+82     	; 0x23f4 <mp_emit_common_id_op+0x90>
    23a2:	92 30       	cpi	r25, 0x02	; 2
    23a4:	59 f4       	brne	.+22     	; 0x23bc <mp_emit_common_id_op+0x58>
    23a6:	d7 01       	movw	r26, r14
    23a8:	12 96       	adiw	r26, 0x02	; 2
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	13 97       	sbiw	r26, 0x03	; 3
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	50 e0       	ldi	r21, 0x00	; 0
    23b4:	be 01       	movw	r22, r28
    23b6:	c8 01       	movw	r24, r16
    23b8:	09 95       	icall
    23ba:	1c c0       	rjmp	.+56     	; 0x23f4 <mp_emit_common_id_op+0x90>
    23bc:	93 30       	cpi	r25, 0x03	; 3
    23be:	59 f4       	brne	.+22     	; 0x23d6 <mp_emit_common_id_op+0x72>
    23c0:	42 81       	ldd	r20, Z+2	; 0x02
    23c2:	53 81       	ldd	r21, Z+3	; 0x03
    23c4:	d7 01       	movw	r26, r14
    23c6:	ed 91       	ld	r30, X+
    23c8:	fc 91       	ld	r31, X
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	be 01       	movw	r22, r28
    23d0:	c8 01       	movw	r24, r16
    23d2:	09 95       	icall
    23d4:	0f c0       	rjmp	.+30     	; 0x23f4 <mp_emit_common_id_op+0x90>
    23d6:	94 50       	subi	r25, 0x04	; 4
    23d8:	92 30       	cpi	r25, 0x02	; 2
    23da:	10 f0       	brcs	.+4      	; 0x23e0 <mp_emit_common_id_op+0x7c>
    23dc:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    23e0:	42 81       	ldd	r20, Z+2	; 0x02
    23e2:	53 81       	ldd	r21, Z+3	; 0x03
    23e4:	d7 01       	movw	r26, r14
    23e6:	ed 91       	ld	r30, X+
    23e8:	fc 91       	ld	r31, X
    23ea:	21 e0       	ldi	r18, 0x01	; 1
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	be 01       	movw	r22, r28
    23f0:	c8 01       	movw	r24, r16
    23f2:	09 95       	icall
    23f4:	df 91       	pop	r29
    23f6:	cf 91       	pop	r28
    23f8:	1f 91       	pop	r17
    23fa:	0f 91       	pop	r16
    23fc:	ff 90       	pop	r15
    23fe:	ef 90       	pop	r14
    2400:	08 95       	ret

00002402 <emit_bc_free>:
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	ec 01       	movw	r28, r24
    2408:	8f 85       	ldd	r24, Y+15	; 0x0f
    240a:	98 89       	ldd	r25, Y+16	; 0x10
    240c:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    2410:	ce 01       	movw	r24, r28
    2412:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	08 95       	ret

0000241c <mp_emit_bc_start_pass>:
    241c:	3f 92       	push	r3
    241e:	4f 92       	push	r4
    2420:	5f 92       	push	r5
    2422:	6f 92       	push	r6
    2424:	7f 92       	push	r7
    2426:	8f 92       	push	r8
    2428:	9f 92       	push	r9
    242a:	af 92       	push	r10
    242c:	bf 92       	push	r11
    242e:	cf 92       	push	r12
    2430:	df 92       	push	r13
    2432:	ef 92       	push	r14
    2434:	ff 92       	push	r15
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
    243e:	ec 01       	movw	r28, r24
    2440:	36 2e       	mov	r3, r22
    2442:	2a 01       	movw	r4, r20
    2444:	6b 83       	std	Y+3, r22	; 0x03
    2446:	1e 82       	std	Y+6, r1	; 0x06
    2448:	1d 82       	std	Y+5, r1	; 0x05
    244a:	1c 82       	std	Y+4, r1	; 0x04
    244c:	58 87       	std	Y+8, r21	; 0x08
    244e:	4f 83       	std	Y+7, r20	; 0x07
    2450:	1a 86       	std	Y+10, r1	; 0x0a
    2452:	19 86       	std	Y+9, r1	; 0x09
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9c 87       	std	Y+12, r25	; 0x0c
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	43 e0       	ldi	r20, 0x03	; 3
    245e:	46 17       	cp	r20, r22
    2460:	60 f0       	brcs	.+24     	; 0x247a <mp_emit_bc_start_pass+0x5e>
    2462:	8f 85       	ldd	r24, Y+15	; 0x0f
    2464:	98 89       	ldd	r25, Y+16	; 0x10
    2466:	00 97       	sbiw	r24, 0x00	; 0
    2468:	41 f0       	breq	.+16     	; 0x247a <mp_emit_bc_start_pass+0x5e>
    246a:	4d 85       	ldd	r20, Y+13	; 0x0d
    246c:	5e 85       	ldd	r21, Y+14	; 0x0e
    246e:	44 0f       	add	r20, r20
    2470:	55 1f       	adc	r21, r21
    2472:	6f ef       	ldi	r22, 0xFF	; 255
    2474:	7f ef       	ldi	r23, 0xFF	; 255
    2476:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    247a:	1e 8a       	std	Y+22, r1	; 0x16
    247c:	1d 8a       	std	Y+21, r1	; 0x15
    247e:	1a 8a       	std	Y+18, r1	; 0x12
    2480:	19 8a       	std	Y+17, r1	; 0x11
    2482:	d2 01       	movw	r26, r4
    2484:	57 96       	adiw	r26, 0x17	; 23
    2486:	6d 90       	ld	r6, X+
    2488:	7c 90       	ld	r7, X
    248a:	58 97       	sbiw	r26, 0x18	; 24
    248c:	59 96       	adiw	r26, 0x19	; 25
    248e:	8d 91       	ld	r24, X+
    2490:	9c 91       	ld	r25, X
    2492:	5a 97       	sbiw	r26, 0x1a	; 26
    2494:	86 0d       	add	r24, r6
    2496:	97 1d       	adc	r25, r7
    2498:	00 97       	sbiw	r24, 0x00	; 0
    249a:	11 f4       	brne	.+4      	; 0x24a0 <mp_emit_bc_start_pass+0x84>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	f2 01       	movw	r30, r4
    24a2:	23 8d       	ldd	r18, Z+27	; 0x1b
    24a4:	34 8d       	ldd	r19, Z+28	; 0x1c
    24a6:	c5 84       	ldd	r12, Z+13	; 0x0d
    24a8:	d6 84       	ldd	r13, Z+14	; 0x0e
    24aa:	ff e0       	ldi	r31, 0x0F	; 15
    24ac:	cf 22       	and	r12, r31
    24ae:	dd 24       	eor	r13, r13
    24b0:	d2 01       	movw	r26, r4
    24b2:	51 96       	adiw	r26, 0x11	; 17
    24b4:	0d 91       	ld	r16, X+
    24b6:	1c 91       	ld	r17, X
    24b8:	52 97       	sbiw	r26, 0x12	; 18
    24ba:	53 96       	adiw	r26, 0x13	; 19
    24bc:	8d 90       	ld	r8, X+
    24be:	9c 90       	ld	r9, X
    24c0:	54 97       	sbiw	r26, 0x14	; 20
    24c2:	55 96       	adiw	r26, 0x15	; 21
    24c4:	ad 90       	ld	r10, X+
    24c6:	bc 90       	ld	r11, X
    24c8:	56 97       	sbiw	r26, 0x16	; 22
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	62 2f       	mov	r22, r18
    24ce:	61 70       	andi	r22, 0x01	; 1
    24d0:	66 0f       	add	r22, r22
    24d2:	66 0f       	add	r22, r22
    24d4:	40 2f       	mov	r20, r16
    24d6:	43 70       	andi	r20, 0x03	; 3
    24d8:	64 2b       	or	r22, r20
    24da:	48 2f       	mov	r20, r24
    24dc:	4f 70       	andi	r20, 0x0F	; 15
    24de:	44 0f       	add	r20, r20
    24e0:	44 0f       	add	r20, r20
    24e2:	44 0f       	add	r20, r20
    24e4:	64 2b       	or	r22, r20
    24e6:	3c 01       	movw	r6, r24
    24e8:	76 94       	lsr	r7
    24ea:	67 94       	ror	r6
    24ec:	76 94       	lsr	r7
    24ee:	67 94       	ror	r6
    24f0:	76 94       	lsr	r7
    24f2:	67 94       	ror	r6
    24f4:	76 94       	lsr	r7
    24f6:	67 94       	ror	r6
    24f8:	79 01       	movw	r14, r18
    24fa:	f6 94       	lsr	r15
    24fc:	e7 94       	ror	r14
    24fe:	16 95       	lsr	r17
    2500:	07 95       	ror	r16
    2502:	16 95       	lsr	r17
    2504:	07 95       	ror	r16
    2506:	c4 01       	movw	r24, r8
    2508:	8a 29       	or	r24, r10
    250a:	9b 29       	or	r25, r11
    250c:	8c 29       	or	r24, r12
    250e:	9d 29       	or	r25, r13
    2510:	8e 29       	or	r24, r14
    2512:	9f 29       	or	r25, r15
    2514:	80 2b       	or	r24, r16
    2516:	91 2b       	or	r25, r17
    2518:	86 29       	or	r24, r6
    251a:	97 29       	or	r25, r7
    251c:	89 2b       	or	r24, r25
    251e:	09 f4       	brne	.+2      	; 0x2522 <mp_emit_bc_start_pass+0x106>
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <mp_emit_bc_start_pass+0x184>
    2522:	60 68       	ori	r22, 0x80	; 128
    2524:	ce 01       	movw	r24, r28
    2526:	0e 94 86 04 	call	0x90c	; 0x90c <emit_write_code_info_byte>
    252a:	8c 2d       	mov	r24, r12
    252c:	81 70       	andi	r24, 0x01	; 1
    252e:	68 2f       	mov	r22, r24
    2530:	62 95       	swap	r22
    2532:	66 0f       	add	r22, r22
    2534:	66 0f       	add	r22, r22
    2536:	60 7c       	andi	r22, 0xC0	; 192
    2538:	86 2d       	mov	r24, r6
    253a:	83 70       	andi	r24, 0x03	; 3
    253c:	82 95       	swap	r24
    253e:	80 7f       	andi	r24, 0xF0	; 240
    2540:	86 2b       	or	r24, r22
    2542:	6a 2d       	mov	r22, r10
    2544:	61 70       	andi	r22, 0x01	; 1
    2546:	86 2b       	or	r24, r22
    2548:	98 2d       	mov	r25, r8
    254a:	91 70       	andi	r25, 0x01	; 1
    254c:	99 0f       	add	r25, r25
    254e:	99 0f       	add	r25, r25
    2550:	99 0f       	add	r25, r25
    2552:	68 2f       	mov	r22, r24
    2554:	69 2b       	or	r22, r25
    2556:	90 2f       	mov	r25, r16
    2558:	91 70       	andi	r25, 0x01	; 1
    255a:	99 0f       	add	r25, r25
    255c:	99 0f       	add	r25, r25
    255e:	86 2f       	mov	r24, r22
    2560:	89 2b       	or	r24, r25
    2562:	6e 2d       	mov	r22, r14
    2564:	61 70       	andi	r22, 0x01	; 1
    2566:	66 0f       	add	r22, r22
    2568:	68 2b       	or	r22, r24
    256a:	76 94       	lsr	r7
    256c:	67 94       	ror	r6
    256e:	76 94       	lsr	r7
    2570:	67 94       	ror	r6
    2572:	f6 94       	lsr	r15
    2574:	e7 94       	ror	r14
    2576:	d6 94       	lsr	r13
    2578:	c7 94       	ror	r12
    257a:	16 95       	lsr	r17
    257c:	07 95       	ror	r16
    257e:	96 94       	lsr	r9
    2580:	87 94       	ror	r8
    2582:	b6 94       	lsr	r11
    2584:	a7 94       	ror	r10
    2586:	c3 01       	movw	r24, r6
    2588:	8e 29       	or	r24, r14
    258a:	9f 29       	or	r25, r15
    258c:	8c 29       	or	r24, r12
    258e:	9d 29       	or	r25, r13
    2590:	80 2b       	or	r24, r16
    2592:	91 2b       	or	r25, r17
    2594:	88 29       	or	r24, r8
    2596:	99 29       	or	r25, r9
    2598:	8a 29       	or	r24, r10
    259a:	9b 29       	or	r25, r11
    259c:	89 2b       	or	r24, r25
    259e:	09 f6       	brne	.-126    	; 0x2522 <mp_emit_bc_start_pass+0x106>
    25a0:	ce 01       	movw	r24, r28
    25a2:	0e 94 86 04 	call	0x90c	; 0x90c <emit_write_code_info_byte>
    25a6:	b2 e0       	ldi	r27, 0x02	; 2
    25a8:	b3 15       	cp	r27, r3
    25aa:	48 f5       	brcc	.+82     	; 0x25fe <mp_emit_bc_start_pass+0x1e2>
    25ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    25b2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    25b4:	68 2f       	mov	r22, r24
    25b6:	6f 73       	andi	r22, 0x3F	; 63
    25b8:	66 0f       	add	r22, r22
    25ba:	42 2f       	mov	r20, r18
    25bc:	41 70       	andi	r20, 0x01	; 1
    25be:	64 2b       	or	r22, r20
    25c0:	36 95       	lsr	r19
    25c2:	27 95       	ror	r18
    25c4:	3e 8f       	std	Y+30, r19	; 0x1e
    25c6:	2d 8f       	std	Y+29, r18	; 0x1d
    25c8:	00 24       	eor	r0, r0
    25ca:	88 0f       	add	r24, r24
    25cc:	99 1f       	adc	r25, r25
    25ce:	00 1c       	adc	r0, r0
    25d0:	88 0f       	add	r24, r24
    25d2:	99 1f       	adc	r25, r25
    25d4:	00 1c       	adc	r0, r0
    25d6:	89 2f       	mov	r24, r25
    25d8:	90 2d       	mov	r25, r0
    25da:	9c 8f       	std	Y+28, r25	; 0x1c
    25dc:	8b 8f       	std	Y+27, r24	; 0x1b
    25de:	82 2b       	or	r24, r18
    25e0:	93 2b       	or	r25, r19
    25e2:	89 2b       	or	r24, r25
    25e4:	09 f0       	breq	.+2      	; 0x25e8 <mp_emit_bc_start_pass+0x1cc>
    25e6:	60 68       	ori	r22, 0x80	; 128
    25e8:	ce 01       	movw	r24, r28
    25ea:	0e 94 86 04 	call	0x90c	; 0x90c <emit_write_code_info_byte>
    25ee:	2d 8d       	ldd	r18, Y+29	; 0x1d
    25f0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    25f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f6:	82 2b       	or	r24, r18
    25f8:	93 2b       	or	r25, r19
    25fa:	89 2b       	or	r24, r25
    25fc:	b9 f6       	brne	.-82     	; 0x25ac <mp_emit_bc_start_pass+0x190>
    25fe:	89 89       	ldd	r24, Y+17	; 0x11
    2600:	9a 89       	ldd	r25, Y+18	; 0x12
    2602:	9c 8f       	std	Y+28, r25	; 0x1c
    2604:	8b 8f       	std	Y+27, r24	; 0x1b
    2606:	f2 01       	movw	r30, r4
    2608:	03 85       	ldd	r16, Z+11	; 0x0b
    260a:	14 85       	ldd	r17, Z+12	; 0x0c
    260c:	62 e0       	ldi	r22, 0x02	; 2
    260e:	70 e0       	ldi	r23, 0x00	; 0
    2610:	ce 01       	movw	r24, r28
    2612:	0e 94 68 04 	call	0x8d0	; 0x8d0 <emit_get_cur_to_write_code_info>
    2616:	dc 01       	movw	r26, r24
    2618:	0c 93       	st	X, r16
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	1c 93       	st	X, r17
    261e:	f2 01       	movw	r30, r4
    2620:	01 85       	ldd	r16, Z+9	; 0x09
    2622:	12 85       	ldd	r17, Z+10	; 0x0a
    2624:	62 e0       	ldi	r22, 0x02	; 2
    2626:	70 e0       	ldi	r23, 0x00	; 0
    2628:	ce 01       	movw	r24, r28
    262a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <emit_get_cur_to_write_code_info>
    262e:	dc 01       	movw	r26, r24
    2630:	0c 93       	st	X, r16
    2632:	11 96       	adiw	r26, 0x01	; 1
    2634:	1c 93       	st	X, r17
    2636:	18 a2       	std	Y+32, r1	; 0x20
    2638:	1f 8e       	std	Y+31, r1	; 0x1f
    263a:	1c a2       	std	Y+36, r1	; 0x24
    263c:	1b a2       	std	Y+35, r1	; 0x23
    263e:	b4 e0       	ldi	r27, 0x04	; 4
    2640:	3b 12       	cpse	r3, r27
    2642:	54 c0       	rjmp	.+168    	; 0x26ec <mp_emit_bc_start_pass+0x2d0>
    2644:	f2 01       	movw	r30, r4
    2646:	21 89       	ldd	r18, Z+17	; 0x11
    2648:	32 89       	ldd	r19, Z+18	; 0x12
    264a:	83 89       	ldd	r24, Z+19	; 0x13
    264c:	94 89       	ldd	r25, Z+20	; 0x14
    264e:	82 0f       	add	r24, r18
    2650:	93 1f       	adc	r25, r19
    2652:	89 2b       	or	r24, r25
    2654:	b9 f5       	brne	.+110    	; 0x26c4 <mp_emit_bc_start_pass+0x2a8>
    2656:	4a c0       	rjmp	.+148    	; 0x26ec <mp_emit_bc_start_pass+0x2d0>
    2658:	21 81       	ldd	r18, Z+1	; 0x01
    265a:	20 ff       	sbrs	r18, 0
    265c:	08 c0       	rjmp	.+16     	; 0x266e <mp_emit_bc_start_pass+0x252>
    265e:	22 81       	ldd	r18, Z+2	; 0x02
    2660:	33 81       	ldd	r19, Z+3	; 0x03
    2662:	2c 15       	cp	r18, r12
    2664:	3d 05       	cpc	r19, r13
    2666:	19 f4       	brne	.+6      	; 0x266e <mp_emit_bc_start_pass+0x252>
    2668:	84 81       	ldd	r24, Z+4	; 0x04
    266a:	95 81       	ldd	r25, Z+5	; 0x05
    266c:	0a c0       	rjmp	.+20     	; 0x2682 <mp_emit_bc_start_pass+0x266>
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	36 96       	adiw	r30, 0x06	; 6
    2672:	86 17       	cp	r24, r22
    2674:	97 07       	cpc	r25, r23
    2676:	81 f7       	brne	.-32     	; 0x2658 <mp_emit_bc_start_pass+0x23c>
    2678:	8e 2d       	mov	r24, r14
    267a:	9f 2d       	mov	r25, r15
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <mp_emit_bc_start_pass+0x266>
    267e:	8e 2d       	mov	r24, r14
    2680:	9f 2d       	mov	r25, r15
    2682:	d6 01       	movw	r26, r12
    2684:	aa 0f       	add	r26, r26
    2686:	bb 1f       	adc	r27, r27
    2688:	2d a1       	ldd	r18, Y+37	; 0x25
    268a:	3e a1       	ldd	r19, Y+38	; 0x26
    268c:	a2 0f       	add	r26, r18
    268e:	b3 1f       	adc	r27, r19
    2690:	88 0f       	add	r24, r24
    2692:	99 1f       	adc	r25, r25
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	82 60       	ori	r24, 0x02	; 2
    269e:	8d 93       	st	X+, r24
    26a0:	9c 93       	st	X, r25
    26a2:	4f 5f       	subi	r20, 0xFF	; 255
    26a4:	5f 4f       	sbci	r21, 0xFF	; 255
    26a6:	d2 01       	movw	r26, r4
    26a8:	51 96       	adiw	r26, 0x11	; 17
    26aa:	2d 91       	ld	r18, X+
    26ac:	3c 91       	ld	r19, X
    26ae:	52 97       	sbiw	r26, 0x12	; 18
    26b0:	53 96       	adiw	r26, 0x13	; 19
    26b2:	8d 91       	ld	r24, X+
    26b4:	9c 91       	ld	r25, X
    26b6:	54 97       	sbiw	r26, 0x14	; 20
    26b8:	82 0f       	add	r24, r18
    26ba:	93 1f       	adc	r25, r19
    26bc:	48 17       	cp	r20, r24
    26be:	59 07       	cpc	r21, r25
    26c0:	40 f0       	brcs	.+16     	; 0x26d2 <mp_emit_bc_start_pass+0x2b6>
    26c2:	14 c0       	rjmp	.+40     	; 0x26ec <mp_emit_bc_start_pass+0x2d0>
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	0f 2e       	mov	r0, r31
    26ca:	f5 e0       	ldi	r31, 0x05	; 5
    26cc:	ef 2e       	mov	r14, r31
    26ce:	f0 2d       	mov	r31, r0
    26d0:	f1 2c       	mov	r15, r1
    26d2:	6a 01       	movw	r12, r20
    26d4:	f2 01       	movw	r30, r4
    26d6:	67 8d       	ldd	r22, Z+31	; 0x1f
    26d8:	70 a1       	ldd	r23, Z+32	; 0x20
    26da:	61 15       	cp	r22, r1
    26dc:	71 05       	cpc	r23, r1
    26de:	79 f2       	breq	.-98     	; 0x267e <mp_emit_bc_start_pass+0x262>
    26e0:	01 a0       	ldd	r0, Z+33	; 0x21
    26e2:	f2 a1       	ldd	r31, Z+34	; 0x22
    26e4:	e0 2d       	mov	r30, r0
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	b6 cf       	rjmp	.-148    	; 0x2658 <mp_emit_bc_start_pass+0x23c>
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
    2700:	9f 90       	pop	r9
    2702:	8f 90       	pop	r8
    2704:	7f 90       	pop	r7
    2706:	6f 90       	pop	r6
    2708:	5f 90       	pop	r5
    270a:	4f 90       	pop	r4
    270c:	3f 90       	pop	r3
    270e:	08 95       	ret

00002710 <mp_emit_bc_adjust_stack_size>:
    2710:	fc 01       	movw	r30, r24
    2712:	83 81       	ldd	r24, Z+3	; 0x03
    2714:	81 30       	cpi	r24, 0x01	; 1
    2716:	c1 f0       	breq	.+48     	; 0x2748 <mp_emit_bc_adjust_stack_size+0x38>
    2718:	85 81       	ldd	r24, Z+5	; 0x05
    271a:	96 81       	ldd	r25, Z+6	; 0x06
    271c:	68 0f       	add	r22, r24
    271e:	79 1f       	adc	r23, r25
    2720:	77 23       	and	r23, r23
    2722:	14 f4       	brge	.+4      	; 0x2728 <mp_emit_bc_adjust_stack_size+0x18>
    2724:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    2728:	76 83       	std	Z+6, r23	; 0x06
    272a:	65 83       	std	Z+5, r22	; 0x05
    272c:	a7 81       	ldd	r26, Z+7	; 0x07
    272e:	b0 85       	ldd	r27, Z+8	; 0x08
    2730:	59 96       	adiw	r26, 0x19	; 25
    2732:	8d 91       	ld	r24, X+
    2734:	9c 91       	ld	r25, X
    2736:	5a 97       	sbiw	r26, 0x1a	; 26
    2738:	86 17       	cp	r24, r22
    273a:	97 07       	cpc	r25, r23
    273c:	20 f4       	brcc	.+8      	; 0x2746 <mp_emit_bc_adjust_stack_size+0x36>
    273e:	5a 96       	adiw	r26, 0x1a	; 26
    2740:	7c 93       	st	X, r23
    2742:	6e 93       	st	-X, r22
    2744:	59 97       	sbiw	r26, 0x19	; 25
    2746:	14 82       	std	Z+4, r1	; 0x04
    2748:	08 95       	ret

0000274a <emit_write_bytecode_byte>:
    274a:	1f 93       	push	r17
    274c:	cf 93       	push	r28
    274e:	df 93       	push	r29
    2750:	ec 01       	movw	r28, r24
    2752:	14 2f       	mov	r17, r20
    2754:	dd df       	rcall	.-70     	; 0x2710 <mp_emit_bc_adjust_stack_size>
    2756:	61 e0       	ldi	r22, 0x01	; 1
    2758:	70 e0       	ldi	r23, 0x00	; 0
    275a:	ce 01       	movw	r24, r28
    275c:	0e 94 8f 04 	call	0x91e	; 0x91e <emit_get_cur_to_write_bytecode>
    2760:	fc 01       	movw	r30, r24
    2762:	10 83       	st	Z, r17
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	08 95       	ret

0000276c <emit_write_bytecode_byte_uint>:
    276c:	cf 92       	push	r12
    276e:	df 92       	push	r13
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	00 d0       	rcall	.+0      	; 0x277e <emit_write_bytecode_byte_uint+0x12>
    277e:	1f 92       	push	r1
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
    2784:	6c 01       	movw	r12, r24
    2786:	89 01       	movw	r16, r18
    2788:	e0 df       	rcall	.-64     	; 0x274a <emit_write_bytecode_byte>
    278a:	7e 01       	movw	r14, r28
    278c:	84 e0       	ldi	r24, 0x04	; 4
    278e:	e8 0e       	add	r14, r24
    2790:	f1 1c       	adc	r15, r1
    2792:	80 2f       	mov	r24, r16
    2794:	8f 77       	andi	r24, 0x7F	; 127
    2796:	f7 01       	movw	r30, r14
    2798:	82 93       	st	-Z, r24
    279a:	7f 01       	movw	r14, r30
    279c:	00 0f       	add	r16, r16
    279e:	01 2f       	mov	r16, r17
    27a0:	00 1f       	adc	r16, r16
    27a2:	11 0b       	sbc	r17, r17
    27a4:	11 95       	neg	r17
    27a6:	01 15       	cp	r16, r1
    27a8:	11 05       	cpc	r17, r1
    27aa:	99 f7       	brne	.-26     	; 0x2792 <emit_write_bytecode_byte_uint+0x26>
    27ac:	be 01       	movw	r22, r28
    27ae:	6c 5f       	subi	r22, 0xFC	; 252
    27b0:	7f 4f       	sbci	r23, 0xFF	; 255
    27b2:	6e 1b       	sub	r22, r30
    27b4:	7f 0b       	sbc	r23, r31
    27b6:	c6 01       	movw	r24, r12
    27b8:	0e 94 8f 04 	call	0x91e	; 0x91e <emit_get_cur_to_write_bytecode>
    27bc:	ac 01       	movw	r20, r24
    27be:	ce 01       	movw	r24, r28
    27c0:	03 96       	adiw	r24, 0x03	; 3
    27c2:	e8 16       	cp	r14, r24
    27c4:	f9 06       	cpc	r15, r25
    27c6:	69 f0       	breq	.+26     	; 0x27e2 <emit_write_bytecode_byte_uint+0x76>
    27c8:	f7 01       	movw	r30, r14
    27ca:	da 01       	movw	r26, r20
    27cc:	9c 01       	movw	r18, r24
    27ce:	91 91       	ld	r25, Z+
    27d0:	90 68       	ori	r25, 0x80	; 128
    27d2:	9d 93       	st	X+, r25
    27d4:	e2 17       	cp	r30, r18
    27d6:	f3 07       	cpc	r31, r19
    27d8:	d1 f7       	brne	.-12     	; 0x27ce <emit_write_bytecode_byte_uint+0x62>
    27da:	2e 19       	sub	r18, r14
    27dc:	3f 09       	sbc	r19, r15
    27de:	42 0f       	add	r20, r18
    27e0:	53 1f       	adc	r21, r19
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	fa 01       	movw	r30, r20
    27e6:	80 83       	st	Z, r24
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
    27f8:	ef 90       	pop	r14
    27fa:	df 90       	pop	r13
    27fc:	cf 90       	pop	r12
    27fe:	08 95       	ret

00002800 <mp_emit_bc_delete_local>:
    2800:	ba 01       	movw	r22, r20
    2802:	48 e2       	ldi	r20, 0x28	; 40
    2804:	42 0f       	add	r20, r18
    2806:	9b 01       	movw	r18, r22
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	af cf       	rjmp	.-162    	; 0x276c <emit_write_bytecode_byte_uint>
    280e:	08 95       	ret

00002810 <emit_bc_call_function_method_helper>:
    2810:	ef 92       	push	r14
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
    2816:	1f 93       	push	r17
    2818:	ef 28       	or	r14, r15
    281a:	81 f0       	breq	.+32     	; 0x283c <emit_bc_call_function_method_helper+0x2c>
    281c:	f0 2f       	mov	r31, r16
    281e:	ee 27       	eor	r30, r30
    2820:	e2 2b       	or	r30, r18
    2822:	f3 2b       	or	r31, r19
    2824:	4f 5f       	subi	r20, 0xFF	; 255
    2826:	00 0f       	add	r16, r16
    2828:	11 1f       	adc	r17, r17
    282a:	02 0f       	add	r16, r18
    282c:	13 1f       	adc	r17, r19
    282e:	0e 5f       	subi	r16, 0xFE	; 254
    2830:	1f 4f       	sbci	r17, 0xFF	; 255
    2832:	60 1b       	sub	r22, r16
    2834:	71 0b       	sbc	r23, r17
    2836:	9f 01       	movw	r18, r30
    2838:	99 df       	rcall	.-206    	; 0x276c <emit_write_bytecode_byte_uint>
    283a:	0c c0       	rjmp	.+24     	; 0x2854 <emit_bc_call_function_method_helper+0x44>
    283c:	f0 2f       	mov	r31, r16
    283e:	ee 27       	eor	r30, r30
    2840:	e2 2b       	or	r30, r18
    2842:	f3 2b       	or	r31, r19
    2844:	00 0f       	add	r16, r16
    2846:	11 1f       	adc	r17, r17
    2848:	02 0f       	add	r16, r18
    284a:	13 1f       	adc	r17, r19
    284c:	60 1b       	sub	r22, r16
    284e:	71 0b       	sbc	r23, r17
    2850:	9f 01       	movw	r18, r30
    2852:	8c df       	rcall	.-232    	; 0x276c <emit_write_bytecode_byte_uint>
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	08 95       	ret

0000285e <emit_write_bytecode_byte_raw_code>:
    285e:	cf 93       	push	r28
    2860:	df 93       	push	r29
    2862:	fc 01       	movw	r30, r24
    2864:	c7 81       	ldd	r28, Z+7	; 0x07
    2866:	d0 85       	ldd	r29, Z+8	; 0x08
    2868:	a9 89       	ldd	r26, Y+17	; 0x11
    286a:	ba 89       	ldd	r27, Y+18	; 0x12
    286c:	8b 89       	ldd	r24, Y+19	; 0x13
    286e:	9c 89       	ldd	r25, Y+20	; 0x14
    2870:	8a 0f       	add	r24, r26
    2872:	9b 1f       	adc	r25, r27
    2874:	c1 a1       	ldd	r28, Z+33	; 0x21
    2876:	d2 a1       	ldd	r29, Z+34	; 0x22
    2878:	dc 01       	movw	r26, r24
    287a:	ac 0f       	add	r26, r28
    287c:	bd 1f       	adc	r27, r29
    287e:	83 a1       	ldd	r24, Z+35	; 0x23
    2880:	94 a1       	ldd	r25, Z+36	; 0x24
    2882:	ec 01       	movw	r28, r24
    2884:	21 96       	adiw	r28, 0x01	; 1
    2886:	d4 a3       	std	Z+36, r29	; 0x24
    2888:	c3 a3       	std	Z+35, r28	; 0x23
    288a:	8a 0f       	add	r24, r26
    288c:	9b 1f       	adc	r25, r27
    288e:	53 81       	ldd	r21, Z+3	; 0x03
    2890:	54 30       	cpi	r21, 0x04	; 4
    2892:	49 f4       	brne	.+18     	; 0x28a6 <emit_write_bytecode_byte_raw_code+0x48>
    2894:	c5 a1       	ldd	r28, Z+37	; 0x25
    2896:	d6 a1       	ldd	r29, Z+38	; 0x26
    2898:	dc 01       	movw	r26, r24
    289a:	aa 0f       	add	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	ac 0f       	add	r26, r28
    28a0:	bd 1f       	adc	r27, r29
    28a2:	2d 93       	st	X+, r18
    28a4:	3c 93       	st	X, r19
    28a6:	9c 01       	movw	r18, r24
    28a8:	cf 01       	movw	r24, r30
    28aa:	60 df       	rcall	.-320    	; 0x276c <emit_write_bytecode_byte_uint>
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	08 95       	ret

000028b2 <mp_emit_bc_load_local>:
    28b2:	21 15       	cp	r18, r1
    28b4:	31 05       	cpc	r19, r1
    28b6:	41 f4       	brne	.+16     	; 0x28c8 <mp_emit_bc_load_local+0x16>
    28b8:	40 31       	cpi	r20, 0x10	; 16
    28ba:	51 05       	cpc	r21, r1
    28bc:	28 f4       	brcc	.+10     	; 0x28c8 <mp_emit_bc_load_local+0x16>
    28be:	40 55       	subi	r20, 0x50	; 80
    28c0:	61 e0       	ldi	r22, 0x01	; 1
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	42 cf       	rjmp	.-380    	; 0x274a <emit_write_bytecode_byte>
    28c6:	08 95       	ret
    28c8:	64 e2       	ldi	r22, 0x24	; 36
    28ca:	62 0f       	add	r22, r18
    28cc:	9a 01       	movw	r18, r20
    28ce:	46 2f       	mov	r20, r22
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	4b cf       	rjmp	.-362    	; 0x276c <emit_write_bytecode_byte_uint>
    28d6:	08 95       	ret

000028d8 <mp_emit_bc_store_local>:
    28d8:	21 15       	cp	r18, r1
    28da:	31 05       	cpc	r19, r1
    28dc:	41 f4       	brne	.+16     	; 0x28ee <mp_emit_bc_store_local+0x16>
    28de:	40 31       	cpi	r20, 0x10	; 16
    28e0:	51 05       	cpc	r21, r1
    28e2:	28 f4       	brcc	.+10     	; 0x28ee <mp_emit_bc_store_local+0x16>
    28e4:	40 54       	subi	r20, 0x40	; 64
    28e6:	6f ef       	ldi	r22, 0xFF	; 255
    28e8:	7f ef       	ldi	r23, 0xFF	; 255
    28ea:	2f cf       	rjmp	.-418    	; 0x274a <emit_write_bytecode_byte>
    28ec:	08 95       	ret
    28ee:	66 e2       	ldi	r22, 0x26	; 38
    28f0:	62 0f       	add	r22, r18
    28f2:	9a 01       	movw	r18, r20
    28f4:	46 2f       	mov	r20, r22
    28f6:	6f ef       	ldi	r22, 0xFF	; 255
    28f8:	7f ef       	ldi	r23, 0xFF	; 255
    28fa:	38 cf       	rjmp	.-400    	; 0x276c <emit_write_bytecode_byte_uint>
    28fc:	08 95       	ret

000028fe <emit_write_bytecode_byte_qstr>:
    28fe:	ff 92       	push	r15
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	ec 01       	movw	r28, r24
    290a:	f4 2e       	mov	r15, r20
    290c:	02 2f       	mov	r16, r18
    290e:	13 2f       	mov	r17, r19
    2910:	ff de       	rcall	.-514    	; 0x2710 <mp_emit_bc_adjust_stack_size>
    2912:	63 e0       	ldi	r22, 0x03	; 3
    2914:	70 e0       	ldi	r23, 0x00	; 0
    2916:	ce 01       	movw	r24, r28
    2918:	0e 94 8f 04 	call	0x91e	; 0x91e <emit_get_cur_to_write_bytecode>
    291c:	fc 01       	movw	r30, r24
    291e:	f0 82       	st	Z, r15
    2920:	01 83       	std	Z+1, r16	; 0x01
    2922:	12 83       	std	Z+2, r17	; 0x02
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	ff 90       	pop	r15
    292e:	08 95       	ret

00002930 <mp_emit_bc_load_global>:
    2930:	9b 01       	movw	r18, r22
    2932:	4f 5e       	subi	r20, 0xEF	; 239
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	e2 cf       	rjmp	.-60     	; 0x28fe <emit_write_bytecode_byte_qstr>
    293a:	08 95       	ret

0000293c <mp_emit_bc_store_global>:
    293c:	9b 01       	movw	r18, r22
    293e:	4a 5e       	subi	r20, 0xEA	; 234
    2940:	6f ef       	ldi	r22, 0xFF	; 255
    2942:	7f ef       	ldi	r23, 0xFF	; 255
    2944:	dc cf       	rjmp	.-72     	; 0x28fe <emit_write_bytecode_byte_qstr>
    2946:	08 95       	ret

00002948 <mp_emit_bc_delete_global>:
    2948:	9b 01       	movw	r18, r22
    294a:	47 5e       	subi	r20, 0xE7	; 231
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	d6 cf       	rjmp	.-84     	; 0x28fe <emit_write_bytecode_byte_qstr>
    2952:	08 95       	ret

00002954 <emit_write_bytecode_byte_signed_label>:
    2954:	ff 92       	push	r15
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	ec 01       	movw	r28, r24
    2960:	f4 2e       	mov	r15, r20
    2962:	89 01       	movw	r16, r18
    2964:	d5 de       	rcall	.-598    	; 0x2710 <mp_emit_bc_adjust_stack_size>
    2966:	8b 81       	ldd	r24, Y+3	; 0x03
    2968:	84 30       	cpi	r24, 0x04	; 4
    296a:	88 f0       	brcs	.+34     	; 0x298e <emit_write_bytecode_byte_signed_label+0x3a>
    296c:	00 0f       	add	r16, r16
    296e:	11 1f       	adc	r17, r17
    2970:	ef 85       	ldd	r30, Y+15	; 0x0f
    2972:	f8 89       	ldd	r31, Y+16	; 0x10
    2974:	e0 0f       	add	r30, r16
    2976:	f1 1f       	adc	r31, r17
    2978:	8d 89       	ldd	r24, Y+21	; 0x15
    297a:	9e 89       	ldd	r25, Y+22	; 0x16
    297c:	0d ef       	ldi	r16, 0xFD	; 253
    297e:	1f e7       	ldi	r17, 0x7F	; 127
    2980:	08 1b       	sub	r16, r24
    2982:	19 0b       	sbc	r17, r25
    2984:	80 81       	ld	r24, Z
    2986:	91 81       	ldd	r25, Z+1	; 0x01
    2988:	08 0f       	add	r16, r24
    298a:	19 1f       	adc	r17, r25
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <emit_write_bytecode_byte_signed_label+0x3e>
    298e:	00 e0       	ldi	r16, 0x00	; 0
    2990:	10 e0       	ldi	r17, 0x00	; 0
    2992:	63 e0       	ldi	r22, 0x03	; 3
    2994:	70 e0       	ldi	r23, 0x00	; 0
    2996:	ce 01       	movw	r24, r28
    2998:	0e 94 8f 04 	call	0x91e	; 0x91e <emit_get_cur_to_write_bytecode>
    299c:	fc 01       	movw	r30, r24
    299e:	f0 82       	st	Z, r15
    29a0:	01 83       	std	Z+1, r16	; 0x01
    29a2:	12 83       	std	Z+2, r17	; 0x02
    29a4:	df 91       	pop	r29
    29a6:	cf 91       	pop	r28
    29a8:	1f 91       	pop	r17
    29aa:	0f 91       	pop	r16
    29ac:	ff 90       	pop	r15
    29ae:	08 95       	ret

000029b0 <emit_write_bytecode_byte_unsigned_label>:
    29b0:	ff 92       	push	r15
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	ec 01       	movw	r28, r24
    29bc:	f4 2e       	mov	r15, r20
    29be:	89 01       	movw	r16, r18
    29c0:	a7 de       	rcall	.-690    	; 0x2710 <mp_emit_bc_adjust_stack_size>
    29c2:	8b 81       	ldd	r24, Y+3	; 0x03
    29c4:	84 30       	cpi	r24, 0x04	; 4
    29c6:	88 f0       	brcs	.+34     	; 0x29ea <emit_write_bytecode_byte_unsigned_label+0x3a>
    29c8:	00 0f       	add	r16, r16
    29ca:	11 1f       	adc	r17, r17
    29cc:	ef 85       	ldd	r30, Y+15	; 0x0f
    29ce:	f8 89       	ldd	r31, Y+16	; 0x10
    29d0:	e0 0f       	add	r30, r16
    29d2:	f1 1f       	adc	r31, r17
    29d4:	8d 89       	ldd	r24, Y+21	; 0x15
    29d6:	9e 89       	ldd	r25, Y+22	; 0x16
    29d8:	0d ef       	ldi	r16, 0xFD	; 253
    29da:	1f ef       	ldi	r17, 0xFF	; 255
    29dc:	08 1b       	sub	r16, r24
    29de:	19 0b       	sbc	r17, r25
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	08 0f       	add	r16, r24
    29e6:	19 1f       	adc	r17, r25
    29e8:	02 c0       	rjmp	.+4      	; 0x29ee <emit_write_bytecode_byte_unsigned_label+0x3e>
    29ea:	00 e0       	ldi	r16, 0x00	; 0
    29ec:	10 e0       	ldi	r17, 0x00	; 0
    29ee:	63 e0       	ldi	r22, 0x03	; 3
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	ce 01       	movw	r24, r28
    29f4:	0e 94 8f 04 	call	0x91e	; 0x91e <emit_get_cur_to_write_bytecode>
    29f8:	fc 01       	movw	r30, r24
    29fa:	f0 82       	st	Z, r15
    29fc:	01 83       	std	Z+1, r16	; 0x01
    29fe:	12 83       	std	Z+2, r17	; 0x02
    2a00:	df 91       	pop	r29
    2a02:	cf 91       	pop	r28
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	08 95       	ret

00002a0c <mp_emit_bc_label_assign>:
    2a0c:	0f 93       	push	r16
    2a0e:	1f 93       	push	r17
    2a10:	cf 93       	push	r28
    2a12:	df 93       	push	r29
    2a14:	8c 01       	movw	r16, r24
    2a16:	eb 01       	movw	r28, r22
    2a18:	60 e0       	ldi	r22, 0x00	; 0
    2a1a:	70 e0       	ldi	r23, 0x00	; 0
    2a1c:	79 de       	rcall	.-782    	; 0x2710 <mp_emit_bc_adjust_stack_size>
    2a1e:	f8 01       	movw	r30, r16
    2a20:	83 81       	ldd	r24, Z+3	; 0x03
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	61 f1       	breq	.+88     	; 0x2a7e <mp_emit_bc_label_assign+0x72>
    2a26:	25 85       	ldd	r18, Z+13	; 0x0d
    2a28:	36 85       	ldd	r19, Z+14	; 0x0e
    2a2a:	c2 17       	cp	r28, r18
    2a2c:	d3 07       	cpc	r29, r19
    2a2e:	10 f0       	brcs	.+4      	; 0x2a34 <mp_emit_bc_label_assign+0x28>
    2a30:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    2a34:	84 30       	cpi	r24, 0x04	; 4
    2a36:	98 f4       	brcc	.+38     	; 0x2a5e <mp_emit_bc_label_assign+0x52>
    2a38:	cc 0f       	add	r28, r28
    2a3a:	dd 1f       	adc	r29, r29
    2a3c:	f8 01       	movw	r30, r16
    2a3e:	87 85       	ldd	r24, Z+15	; 0x0f
    2a40:	90 89       	ldd	r25, Z+16	; 0x10
    2a42:	c8 0f       	add	r28, r24
    2a44:	d9 1f       	adc	r29, r25
    2a46:	88 81       	ld	r24, Y
    2a48:	99 81       	ldd	r25, Y+1	; 0x01
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	11 f0       	breq	.+4      	; 0x2a52 <mp_emit_bc_label_assign+0x46>
    2a4e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    2a52:	f8 01       	movw	r30, r16
    2a54:	85 89       	ldd	r24, Z+21	; 0x15
    2a56:	96 89       	ldd	r25, Z+22	; 0x16
    2a58:	99 83       	std	Y+1, r25	; 0x01
    2a5a:	88 83       	st	Y, r24
    2a5c:	10 c0       	rjmp	.+32     	; 0x2a7e <mp_emit_bc_label_assign+0x72>
    2a5e:	cc 0f       	add	r28, r28
    2a60:	dd 1f       	adc	r29, r29
    2a62:	f8 01       	movw	r30, r16
    2a64:	87 85       	ldd	r24, Z+15	; 0x0f
    2a66:	90 89       	ldd	r25, Z+16	; 0x10
    2a68:	c8 0f       	add	r28, r24
    2a6a:	d9 1f       	adc	r29, r25
    2a6c:	28 81       	ld	r18, Y
    2a6e:	39 81       	ldd	r19, Y+1	; 0x01
    2a70:	85 89       	ldd	r24, Z+21	; 0x15
    2a72:	96 89       	ldd	r25, Z+22	; 0x16
    2a74:	28 17       	cp	r18, r24
    2a76:	39 07       	cpc	r19, r25
    2a78:	11 f0       	breq	.+4      	; 0x2a7e <mp_emit_bc_label_assign+0x72>
    2a7a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	08 95       	ret

00002a88 <mp_emit_bc_import>:
    2a88:	9b 01       	movw	r18, r22
    2a8a:	41 30       	cpi	r20, 0x01	; 1
    2a8c:	51 05       	cpc	r21, r1
    2a8e:	41 f0       	breq	.+16     	; 0x2aa0 <mp_emit_bc_import+0x18>
    2a90:	42 30       	cpi	r20, 0x02	; 2
    2a92:	51 05       	cpc	r21, r1
    2a94:	41 f4       	brne	.+16     	; 0x2aa6 <mp_emit_bc_import+0x1e>
    2a96:	49 e6       	ldi	r20, 0x69	; 105
    2a98:	6f ef       	ldi	r22, 0xFF	; 255
    2a9a:	7f ef       	ldi	r23, 0xFF	; 255
    2a9c:	56 ce       	rjmp	.-852    	; 0x274a <emit_write_bytecode_byte>
    2a9e:	08 95       	ret
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	70 e0       	ldi	r23, 0x00	; 0
    2aa4:	02 c0       	rjmp	.+4      	; 0x2aaa <mp_emit_bc_import+0x22>
    2aa6:	6f ef       	ldi	r22, 0xFF	; 255
    2aa8:	7f ef       	ldi	r23, 0xFF	; 255
    2aaa:	45 5e       	subi	r20, 0xE5	; 229
    2aac:	28 cf       	rjmp	.-432    	; 0x28fe <emit_write_bytecode_byte_qstr>
    2aae:	08 95       	ret

00002ab0 <mp_emit_bc_load_const_tok>:
    2ab0:	6c 30       	cpi	r22, 0x0C	; 12
    2ab2:	79 f5       	brne	.+94     	; 0x2b12 <mp_emit_bc_load_const_tok+0x62>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	17 96       	adiw	r26, 0x07	; 7
    2ab8:	ed 91       	ld	r30, X+
    2aba:	fc 91       	ld	r31, X
    2abc:	18 97       	sbiw	r26, 0x08	; 8
    2abe:	41 89       	ldd	r20, Z+17	; 0x11
    2ac0:	52 89       	ldd	r21, Z+18	; 0x12
    2ac2:	23 89       	ldd	r18, Z+19	; 0x13
    2ac4:	34 89       	ldd	r19, Z+20	; 0x14
    2ac6:	24 0f       	add	r18, r20
    2ac8:	35 1f       	adc	r19, r21
    2aca:	5f 96       	adiw	r26, 0x1f	; 31
    2acc:	4d 91       	ld	r20, X+
    2ace:	5c 91       	ld	r21, X
    2ad0:	90 97       	sbiw	r26, 0x20	; 32
    2ad2:	ba 01       	movw	r22, r20
    2ad4:	6f 5f       	subi	r22, 0xFF	; 255
    2ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad8:	90 96       	adiw	r26, 0x20	; 32
    2ada:	7c 93       	st	X, r23
    2adc:	6e 93       	st	-X, r22
    2ade:	5f 97       	sbiw	r26, 0x1f	; 31
    2ae0:	24 0f       	add	r18, r20
    2ae2:	35 1f       	adc	r19, r21
    2ae4:	13 96       	adiw	r26, 0x03	; 3
    2ae6:	4c 91       	ld	r20, X
    2ae8:	13 97       	sbiw	r26, 0x03	; 3
    2aea:	44 30       	cpi	r20, 0x04	; 4
    2aec:	69 f4       	brne	.+26     	; 0x2b08 <mp_emit_bc_load_const_tok+0x58>
    2aee:	95 96       	adiw	r26, 0x25	; 37
    2af0:	ed 91       	ld	r30, X+
    2af2:	fc 91       	ld	r31, X
    2af4:	96 97       	sbiw	r26, 0x26	; 38
    2af6:	a9 01       	movw	r20, r18
    2af8:	44 0f       	add	r20, r20
    2afa:	55 1f       	adc	r21, r21
    2afc:	e4 0f       	add	r30, r20
    2afe:	f5 1f       	adc	r31, r21
    2b00:	46 e1       	ldi	r20, 0x16	; 22
    2b02:	5c e1       	ldi	r21, 0x1C	; 28
    2b04:	51 83       	std	Z+1, r21	; 0x01
    2b06:	40 83       	st	Z, r20
    2b08:	43 e2       	ldi	r20, 0x23	; 35
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	70 e0       	ldi	r23, 0x00	; 0
    2b0e:	2e ce       	rjmp	.-932    	; 0x276c <emit_write_bytecode_byte_uint>
    2b10:	08 95       	ret
    2b12:	43 e4       	ldi	r20, 0x43	; 67
    2b14:	46 0f       	add	r20, r22
    2b16:	61 e0       	ldi	r22, 0x01	; 1
    2b18:	70 e0       	ldi	r23, 0x00	; 0
    2b1a:	17 ce       	rjmp	.-978    	; 0x274a <emit_write_bytecode_byte>
    2b1c:	08 95       	ret

00002b1e <mp_emit_bc_load_const_small_int>:
    2b1e:	cf 92       	push	r12
    2b20:	df 92       	push	r13
    2b22:	ef 92       	push	r14
    2b24:	ff 92       	push	r15
    2b26:	0f 93       	push	r16
    2b28:	1f 93       	push	r17
    2b2a:	cf 93       	push	r28
    2b2c:	df 93       	push	r29
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <mp_emit_bc_load_const_small_int+0x12>
    2b30:	1f 92       	push	r1
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	6c 01       	movw	r12, r24
    2b38:	8b 01       	movw	r16, r22
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	40 96       	adiw	r24, 0x10	; 16
    2b3e:	80 34       	cpi	r24, 0x40	; 64
    2b40:	91 05       	cpc	r25, r1
    2b42:	38 f4       	brcc	.+14     	; 0x2b52 <mp_emit_bc_load_const_small_int+0x34>
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	46 0f       	add	r20, r22
    2b48:	61 e0       	ldi	r22, 0x01	; 1
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	c6 01       	movw	r24, r12
    2b4e:	fd dd       	rcall	.-1030   	; 0x274a <emit_write_bytecode_byte>
    2b50:	47 c0       	rjmp	.+142    	; 0x2be0 <mp_emit_bc_load_const_small_int+0xc2>
    2b52:	42 e2       	ldi	r20, 0x22	; 34
    2b54:	61 e0       	ldi	r22, 0x01	; 1
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	c6 01       	movw	r24, r12
    2b5a:	f7 dd       	rcall	.-1042   	; 0x274a <emit_write_bytecode_byte>
    2b5c:	7e 01       	movw	r14, r28
    2b5e:	84 e0       	ldi	r24, 0x04	; 4
    2b60:	e8 0e       	add	r14, r24
    2b62:	f1 1c       	adc	r15, r1
    2b64:	20 2f       	mov	r18, r16
    2b66:	80 2f       	mov	r24, r16
    2b68:	8f 77       	andi	r24, 0x7F	; 127
    2b6a:	f7 01       	movw	r30, r14
    2b6c:	82 93       	st	-Z, r24
    2b6e:	7f 01       	movw	r14, r30
    2b70:	00 0f       	add	r16, r16
    2b72:	01 2f       	mov	r16, r17
    2b74:	00 1f       	adc	r16, r16
    2b76:	11 0b       	sbc	r17, r17
    2b78:	c8 01       	movw	r24, r16
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	02 97       	sbiw	r24, 0x02	; 2
    2b7e:	90 f7       	brcc	.-28     	; 0x2b64 <mp_emit_bc_load_const_small_int+0x46>
    2b80:	0f 3f       	cpi	r16, 0xFF	; 255
    2b82:	ff ef       	ldi	r31, 0xFF	; 255
    2b84:	1f 07       	cpc	r17, r31
    2b86:	39 f4       	brne	.+14     	; 0x2b96 <mp_emit_bc_load_const_small_int+0x78>
    2b88:	26 fd       	sbrc	r18, 6
    2b8a:	0c c0       	rjmp	.+24     	; 0x2ba4 <mp_emit_bc_load_const_small_int+0x86>
    2b8c:	f7 01       	movw	r30, r14
    2b8e:	8f e7       	ldi	r24, 0x7F	; 127
    2b90:	82 93       	st	-Z, r24
    2b92:	7f 01       	movw	r14, r30
    2b94:	07 c0       	rjmp	.+14     	; 0x2ba4 <mp_emit_bc_load_const_small_int+0x86>
    2b96:	01 2b       	or	r16, r17
    2b98:	29 f4       	brne	.+10     	; 0x2ba4 <mp_emit_bc_load_const_small_int+0x86>
    2b9a:	26 ff       	sbrs	r18, 6
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <mp_emit_bc_load_const_small_int+0x86>
    2b9e:	f7 01       	movw	r30, r14
    2ba0:	12 92       	st	-Z, r1
    2ba2:	7f 01       	movw	r14, r30
    2ba4:	be 01       	movw	r22, r28
    2ba6:	6c 5f       	subi	r22, 0xFC	; 252
    2ba8:	7f 4f       	sbci	r23, 0xFF	; 255
    2baa:	6e 19       	sub	r22, r14
    2bac:	7f 09       	sbc	r23, r15
    2bae:	c6 01       	movw	r24, r12
    2bb0:	0e 94 8f 04 	call	0x91e	; 0x91e <emit_get_cur_to_write_bytecode>
    2bb4:	ac 01       	movw	r20, r24
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	03 96       	adiw	r24, 0x03	; 3
    2bba:	e8 16       	cp	r14, r24
    2bbc:	f9 06       	cpc	r15, r25
    2bbe:	69 f0       	breq	.+26     	; 0x2bda <mp_emit_bc_load_const_small_int+0xbc>
    2bc0:	f7 01       	movw	r30, r14
    2bc2:	da 01       	movw	r26, r20
    2bc4:	9c 01       	movw	r18, r24
    2bc6:	91 91       	ld	r25, Z+
    2bc8:	90 68       	ori	r25, 0x80	; 128
    2bca:	9d 93       	st	X+, r25
    2bcc:	e2 17       	cp	r30, r18
    2bce:	f3 07       	cpc	r31, r19
    2bd0:	d1 f7       	brne	.-12     	; 0x2bc6 <mp_emit_bc_load_const_small_int+0xa8>
    2bd2:	2e 19       	sub	r18, r14
    2bd4:	3f 09       	sbc	r19, r15
    2bd6:	42 0f       	add	r20, r18
    2bd8:	53 1f       	adc	r21, r19
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	fa 01       	movw	r30, r20
    2bde:	80 83       	st	Z, r24
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	df 91       	pop	r29
    2be8:	cf 91       	pop	r28
    2bea:	1f 91       	pop	r17
    2bec:	0f 91       	pop	r16
    2bee:	ff 90       	pop	r15
    2bf0:	ef 90       	pop	r14
    2bf2:	df 90       	pop	r13
    2bf4:	cf 90       	pop	r12
    2bf6:	08 95       	ret

00002bf8 <mp_emit_bc_load_const_str>:
    2bf8:	9b 01       	movw	r18, r22
    2bfa:	40 e1       	ldi	r20, 0x10	; 16
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	70 e0       	ldi	r23, 0x00	; 0
    2c00:	7e ce       	rjmp	.-772    	; 0x28fe <emit_write_bytecode_byte_qstr>
    2c02:	08 95       	ret

00002c04 <mp_emit_bc_load_const_obj>:
    2c04:	fc 01       	movw	r30, r24
    2c06:	a7 81       	ldd	r26, Z+7	; 0x07
    2c08:	b0 85       	ldd	r27, Z+8	; 0x08
    2c0a:	51 96       	adiw	r26, 0x11	; 17
    2c0c:	2d 91       	ld	r18, X+
    2c0e:	3c 91       	ld	r19, X
    2c10:	52 97       	sbiw	r26, 0x12	; 18
    2c12:	53 96       	adiw	r26, 0x13	; 19
    2c14:	8d 91       	ld	r24, X+
    2c16:	9c 91       	ld	r25, X
    2c18:	54 97       	sbiw	r26, 0x14	; 20
    2c1a:	28 0f       	add	r18, r24
    2c1c:	39 1f       	adc	r19, r25
    2c1e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2c20:	90 a1       	ldd	r25, Z+32	; 0x20
    2c22:	ac 01       	movw	r20, r24
    2c24:	4f 5f       	subi	r20, 0xFF	; 255
    2c26:	5f 4f       	sbci	r21, 0xFF	; 255
    2c28:	50 a3       	std	Z+32, r21	; 0x20
    2c2a:	47 8f       	std	Z+31, r20	; 0x1f
    2c2c:	28 0f       	add	r18, r24
    2c2e:	39 1f       	adc	r19, r25
    2c30:	83 81       	ldd	r24, Z+3	; 0x03
    2c32:	84 30       	cpi	r24, 0x04	; 4
    2c34:	49 f4       	brne	.+18     	; 0x2c48 <mp_emit_bc_load_const_obj+0x44>
    2c36:	a5 a1       	ldd	r26, Z+37	; 0x25
    2c38:	b6 a1       	ldd	r27, Z+38	; 0x26
    2c3a:	c9 01       	movw	r24, r18
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	a8 0f       	add	r26, r24
    2c42:	b9 1f       	adc	r27, r25
    2c44:	6d 93       	st	X+, r22
    2c46:	7c 93       	st	X, r23
    2c48:	43 e2       	ldi	r20, 0x23	; 35
    2c4a:	61 e0       	ldi	r22, 0x01	; 1
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	cf 01       	movw	r24, r30
    2c50:	8d cd       	rjmp	.-1254   	; 0x276c <emit_write_bytecode_byte_uint>
    2c52:	08 95       	ret

00002c54 <compile_const_object>:
    2c54:	fb 01       	movw	r30, r22
    2c56:	60 85       	ldd	r22, Z+8	; 0x08
    2c58:	71 85       	ldd	r23, Z+9	; 0x09
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	83 8d       	ldd	r24, Z+27	; 0x1b
    2c5e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2c60:	d1 cf       	rjmp	.-94     	; 0x2c04 <mp_emit_bc_load_const_obj>
    2c62:	08 95       	ret

00002c64 <mp_emit_bc_load_null>:
    2c64:	43 e5       	ldi	r20, 0x53	; 83
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	6f cd       	rjmp	.-1314   	; 0x274a <emit_write_bytecode_byte>
    2c6c:	08 95       	ret

00002c6e <mp_emit_bc_load_method>:
    2c6e:	9b 01       	movw	r18, r22
    2c70:	a4 2f       	mov	r26, r20
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	aa 0f       	add	r26, r26
    2c76:	bb 1f       	adc	r27, r27
    2c78:	e1 e0       	ldi	r30, 0x01	; 1
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	bf 01       	movw	r22, r30
    2c7e:	6a 1b       	sub	r22, r26
    2c80:	7b 0b       	sbc	r23, r27
    2c82:	41 11       	cpse	r20, r1
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <mp_emit_bc_load_method+0x1c>
    2c86:	44 e1       	ldi	r20, 0x14	; 20
    2c88:	01 c0       	rjmp	.+2      	; 0x2c8c <mp_emit_bc_load_method+0x1e>
    2c8a:	45 e1       	ldi	r20, 0x15	; 21
    2c8c:	38 ce       	rjmp	.-912    	; 0x28fe <emit_write_bytecode_byte_qstr>
    2c8e:	08 95       	ret

00002c90 <mp_emit_bc_load_build_class>:
    2c90:	44 e5       	ldi	r20, 0x54	; 84
    2c92:	61 e0       	ldi	r22, 0x01	; 1
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	59 cd       	rjmp	.-1358   	; 0x274a <emit_write_bytecode_byte>
    2c98:	08 95       	ret

00002c9a <mp_emit_bc_dup_top>:
    2c9a:	47 e5       	ldi	r20, 0x57	; 87
    2c9c:	61 e0       	ldi	r22, 0x01	; 1
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	54 cd       	rjmp	.-1368   	; 0x274a <emit_write_bytecode_byte>
    2ca2:	08 95       	ret

00002ca4 <mp_emit_bc_dup_top_two>:
    2ca4:	48 e5       	ldi	r20, 0x58	; 88
    2ca6:	62 e0       	ldi	r22, 0x02	; 2
    2ca8:	70 e0       	ldi	r23, 0x00	; 0
    2caa:	4f cd       	rjmp	.-1378   	; 0x274a <emit_write_bytecode_byte>
    2cac:	08 95       	ret

00002cae <mp_emit_bc_pop_top>:
    2cae:	49 e5       	ldi	r20, 0x59	; 89
    2cb0:	6f ef       	ldi	r22, 0xFF	; 255
    2cb2:	7f ef       	ldi	r23, 0xFF	; 255
    2cb4:	4a cd       	rjmp	.-1388   	; 0x274a <emit_write_bytecode_byte>
    2cb6:	08 95       	ret

00002cb8 <mp_emit_bc_rot_two>:
    2cb8:	4a e5       	ldi	r20, 0x5A	; 90
    2cba:	60 e0       	ldi	r22, 0x00	; 0
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	45 cd       	rjmp	.-1398   	; 0x274a <emit_write_bytecode_byte>
    2cc0:	08 95       	ret

00002cc2 <mp_emit_bc_attr>:
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	ec 01       	movw	r28, r24
    2ccc:	8b 01       	movw	r16, r22
    2cce:	41 15       	cp	r20, r1
    2cd0:	51 05       	cpc	r21, r1
    2cd2:	31 f4       	brne	.+12     	; 0x2ce0 <mp_emit_bc_attr+0x1e>
    2cd4:	9b 01       	movw	r18, r22
    2cd6:	43 e1       	ldi	r20, 0x13	; 19
    2cd8:	60 e0       	ldi	r22, 0x00	; 0
    2cda:	70 e0       	ldi	r23, 0x00	; 0
    2cdc:	10 de       	rcall	.-992    	; 0x28fe <emit_write_bytecode_byte_qstr>
    2cde:	0c c0       	rjmp	.+24     	; 0x2cf8 <mp_emit_bc_attr+0x36>
    2ce0:	42 30       	cpi	r20, 0x02	; 2
    2ce2:	51 05       	cpc	r21, r1
    2ce4:	19 f4       	brne	.+6      	; 0x2cec <mp_emit_bc_attr+0x2a>
    2ce6:	be df       	rcall	.-132    	; 0x2c64 <mp_emit_bc_load_null>
    2ce8:	ce 01       	movw	r24, r28
    2cea:	e6 df       	rcall	.-52     	; 0x2cb8 <mp_emit_bc_rot_two>
    2cec:	98 01       	movw	r18, r16
    2cee:	48 e1       	ldi	r20, 0x18	; 24
    2cf0:	6e ef       	ldi	r22, 0xFE	; 254
    2cf2:	7f ef       	ldi	r23, 0xFF	; 255
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	03 de       	rcall	.-1018   	; 0x28fe <emit_write_bytecode_byte_qstr>
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <compile_trailer_period>:
    2d02:	fb 01       	movw	r30, r22
    2d04:	60 85       	ldd	r22, Z+8	; 0x08
    2d06:	71 85       	ldd	r23, Z+9	; 0x09
    2d08:	72 95       	swap	r23
    2d0a:	62 95       	swap	r22
    2d0c:	6f 70       	andi	r22, 0x0F	; 15
    2d0e:	67 27       	eor	r22, r23
    2d10:	7f 70       	andi	r23, 0x0F	; 15
    2d12:	67 27       	eor	r22, r23
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	50 e0       	ldi	r21, 0x00	; 0
    2d18:	fc 01       	movw	r30, r24
    2d1a:	83 8d       	ldd	r24, Z+27	; 0x1b
    2d1c:	94 8d       	ldd	r25, Z+28	; 0x1c
    2d1e:	d1 cf       	rjmp	.-94     	; 0x2cc2 <mp_emit_bc_attr>
    2d20:	08 95       	ret

00002d22 <mp_emit_bc_rot_three>:
    2d22:	4b e5       	ldi	r20, 0x5B	; 91
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	70 e0       	ldi	r23, 0x00	; 0
    2d28:	10 cd       	rjmp	.-1504   	; 0x274a <emit_write_bytecode_byte>
    2d2a:	08 95       	ret

00002d2c <mp_emit_bc_subscr>:
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	ec 01       	movw	r28, r24
    2d32:	61 15       	cp	r22, r1
    2d34:	71 05       	cpc	r23, r1
    2d36:	29 f4       	brne	.+10     	; 0x2d42 <mp_emit_bc_subscr+0x16>
    2d38:	45 e5       	ldi	r20, 0x55	; 85
    2d3a:	6f ef       	ldi	r22, 0xFF	; 255
    2d3c:	7f ef       	ldi	r23, 0xFF	; 255
    2d3e:	05 dd       	rcall	.-1526   	; 0x274a <emit_write_bytecode_byte>
    2d40:	0b c0       	rjmp	.+22     	; 0x2d58 <mp_emit_bc_subscr+0x2c>
    2d42:	62 30       	cpi	r22, 0x02	; 2
    2d44:	71 05       	cpc	r23, r1
    2d46:	19 f4       	brne	.+6      	; 0x2d4e <mp_emit_bc_subscr+0x22>
    2d48:	8d df       	rcall	.-230    	; 0x2c64 <mp_emit_bc_load_null>
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	ea df       	rcall	.-44     	; 0x2d22 <mp_emit_bc_rot_three>
    2d4e:	46 e5       	ldi	r20, 0x56	; 86
    2d50:	6d ef       	ldi	r22, 0xFD	; 253
    2d52:	7f ef       	ldi	r23, 0xFF	; 255
    2d54:	ce 01       	movw	r24, r28
    2d56:	f9 dc       	rcall	.-1550   	; 0x274a <emit_write_bytecode_byte>
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	08 95       	ret

00002d5e <mp_emit_bc_jump>:
    2d5e:	9b 01       	movw	r18, r22
    2d60:	42 e4       	ldi	r20, 0x42	; 66
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	f6 cd       	rjmp	.-1044   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2d68:	08 95       	ret

00002d6a <mp_emit_bc_pop_jump_if>:
    2d6a:	9a 01       	movw	r18, r20
    2d6c:	66 23       	and	r22, r22
    2d6e:	29 f0       	breq	.+10     	; 0x2d7a <mp_emit_bc_pop_jump_if+0x10>
    2d70:	43 e4       	ldi	r20, 0x43	; 67
    2d72:	6f ef       	ldi	r22, 0xFF	; 255
    2d74:	7f ef       	ldi	r23, 0xFF	; 255
    2d76:	ee cd       	rjmp	.-1060   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2d78:	08 95       	ret
    2d7a:	44 e4       	ldi	r20, 0x44	; 68
    2d7c:	6f ef       	ldi	r22, 0xFF	; 255
    2d7e:	7f ef       	ldi	r23, 0xFF	; 255
    2d80:	e9 cd       	rjmp	.-1070   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2d82:	08 95       	ret

00002d84 <mp_emit_bc_jump_if_or_pop>:
    2d84:	9a 01       	movw	r18, r20
    2d86:	66 23       	and	r22, r22
    2d88:	29 f0       	breq	.+10     	; 0x2d94 <mp_emit_bc_jump_if_or_pop+0x10>
    2d8a:	45 e4       	ldi	r20, 0x45	; 69
    2d8c:	6f ef       	ldi	r22, 0xFF	; 255
    2d8e:	7f ef       	ldi	r23, 0xFF	; 255
    2d90:	e1 cd       	rjmp	.-1086   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2d92:	08 95       	ret
    2d94:	46 e4       	ldi	r20, 0x46	; 70
    2d96:	6f ef       	ldi	r22, 0xFF	; 255
    2d98:	7f ef       	ldi	r23, 0xFF	; 255
    2d9a:	dc cd       	rjmp	.-1096   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2d9c:	08 95       	ret

00002d9e <mp_emit_bc_unwind_jump>:
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	7c 01       	movw	r14, r24
    2dac:	eb 01       	movw	r28, r22
    2dae:	8a 01       	movw	r16, r20
    2db0:	45 2b       	or	r20, r21
    2db2:	c9 f4       	brne	.+50     	; 0x2de6 <mp_emit_bc_unwind_jump+0x48>
    2db4:	dd 23       	and	r29, r29
    2db6:	7c f4       	brge	.+30     	; 0x2dd6 <mp_emit_bc_unwind_jump+0x38>
    2db8:	69 e5       	ldi	r22, 0x59	; 89
    2dba:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    2dbe:	69 e5       	ldi	r22, 0x59	; 89
    2dc0:	c7 01       	movw	r24, r14
    2dc2:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    2dc6:	69 e5       	ldi	r22, 0x59	; 89
    2dc8:	c7 01       	movw	r24, r14
    2dca:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    2dce:	69 e5       	ldi	r22, 0x59	; 89
    2dd0:	c7 01       	movw	r24, r14
    2dd2:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    2dd6:	9e 01       	movw	r18, r28
    2dd8:	3f 77       	andi	r19, 0x7F	; 127
    2dda:	42 e4       	ldi	r20, 0x42	; 66
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	c7 01       	movw	r24, r14
    2de2:	b8 dd       	rcall	.-1168   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2de4:	0f c0       	rjmp	.+30     	; 0x2e04 <mp_emit_bc_unwind_jump+0x66>
    2de6:	9b 01       	movw	r18, r22
    2de8:	3f 77       	andi	r19, 0x7F	; 127
    2dea:	40 e4       	ldi	r20, 0x40	; 64
    2dec:	60 e0       	ldi	r22, 0x00	; 0
    2dee:	70 e0       	ldi	r23, 0x00	; 0
    2df0:	b1 dd       	rcall	.-1182   	; 0x2954 <emit_write_bytecode_byte_signed_label>
    2df2:	dd 23       	and	r29, r29
    2df4:	14 f0       	brlt	.+4      	; 0x2dfa <mp_emit_bc_unwind_jump+0x5c>
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	01 c0       	rjmp	.+2      	; 0x2dfc <mp_emit_bc_unwind_jump+0x5e>
    2dfa:	60 e8       	ldi	r22, 0x80	; 128
    2dfc:	60 2b       	or	r22, r16
    2dfe:	c7 01       	movw	r24, r14
    2e00:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	ff 90       	pop	r15
    2e0e:	ef 90       	pop	r14
    2e10:	08 95       	ret

00002e12 <mp_emit_bc_setup_block>:
    2e12:	9b 01       	movw	r18, r22
    2e14:	41 15       	cp	r20, r1
    2e16:	51 05       	cpc	r21, r1
    2e18:	19 f0       	breq	.+6      	; 0x2e20 <mp_emit_bc_setup_block+0xe>
    2e1a:	60 e0       	ldi	r22, 0x00	; 0
    2e1c:	70 e0       	ldi	r23, 0x00	; 0
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <mp_emit_bc_setup_block+0x12>
    2e20:	62 e0       	ldi	r22, 0x02	; 2
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	49 5b       	subi	r20, 0xB9	; 185
    2e26:	c4 cd       	rjmp	.-1144   	; 0x29b0 <emit_write_bytecode_byte_unsigned_label>
    2e28:	08 95       	ret

00002e2a <compile_increase_except_level>:
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	ec 01       	movw	r28, r24
    2e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e34:	ee df       	rcall	.-36     	; 0x2e12 <mp_emit_bc_setup_block>
    2e36:	8b 89       	ldd	r24, Y+19	; 0x13
    2e38:	9c 89       	ldd	r25, Y+20	; 0x14
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	9c 8b       	std	Y+20, r25	; 0x14
    2e3e:	8b 8b       	std	Y+19, r24	; 0x13
    2e40:	e9 8d       	ldd	r30, Y+25	; 0x19
    2e42:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2e44:	23 8d       	ldd	r18, Z+27	; 0x1b
    2e46:	34 8d       	ldd	r19, Z+28	; 0x1c
    2e48:	28 17       	cp	r18, r24
    2e4a:	39 07       	cpc	r19, r25
    2e4c:	10 f4       	brcc	.+4      	; 0x2e52 <compile_increase_except_level+0x28>
    2e4e:	94 8f       	std	Z+28, r25	; 0x1c
    2e50:	83 8f       	std	Z+27, r24	; 0x1b
    2e52:	df 91       	pop	r29
    2e54:	cf 91       	pop	r28
    2e56:	08 95       	ret

00002e58 <mp_emit_bc_with_cleanup>:
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	ec 01       	movw	r28, r24
    2e62:	8b 01       	movw	r16, r22
    2e64:	6e e0       	ldi	r22, 0x0E	; 14
    2e66:	24 de       	rcall	.-952    	; 0x2ab0 <mp_emit_bc_load_const_tok>
    2e68:	b8 01       	movw	r22, r16
    2e6a:	ce 01       	movw	r24, r28
    2e6c:	cf dd       	rcall	.-1122   	; 0x2a0c <mp_emit_bc_label_assign>
    2e6e:	4c e5       	ldi	r20, 0x5C	; 92
    2e70:	62 e0       	ldi	r22, 0x02	; 2
    2e72:	70 e0       	ldi	r23, 0x00	; 0
    2e74:	ce 01       	movw	r24, r28
    2e76:	69 dc       	rcall	.-1838   	; 0x274a <emit_write_bytecode_byte>
    2e78:	6c ef       	ldi	r22, 0xFC	; 252
    2e7a:	7f ef       	ldi	r23, 0xFF	; 255
    2e7c:	ce 01       	movw	r24, r28
    2e7e:	48 dc       	rcall	.-1904   	; 0x2710 <mp_emit_bc_adjust_stack_size>
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	08 95       	ret

00002e8a <mp_emit_bc_end_finally>:
    2e8a:	4d e5       	ldi	r20, 0x5D	; 93
    2e8c:	6f ef       	ldi	r22, 0xFF	; 255
    2e8e:	7f ef       	ldi	r23, 0xFF	; 255
    2e90:	5c cc       	rjmp	.-1864   	; 0x274a <emit_write_bytecode_byte>
    2e92:	08 95       	ret

00002e94 <compile_decrease_except_level>:
    2e94:	fc 01       	movw	r30, r24
    2e96:	23 89       	ldd	r18, Z+19	; 0x13
    2e98:	34 89       	ldd	r19, Z+20	; 0x14
    2e9a:	21 15       	cp	r18, r1
    2e9c:	31 05       	cpc	r19, r1
    2e9e:	11 f4       	brne	.+4      	; 0x2ea4 <compile_decrease_except_level+0x10>
    2ea0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    2ea4:	21 50       	subi	r18, 0x01	; 1
    2ea6:	31 09       	sbc	r19, r1
    2ea8:	34 8b       	std	Z+20, r19	; 0x14
    2eaa:	23 8b       	std	Z+19, r18	; 0x13
    2eac:	83 8d       	ldd	r24, Z+27	; 0x1b
    2eae:	94 8d       	ldd	r25, Z+28	; 0x1c
    2eb0:	ec cf       	rjmp	.-40     	; 0x2e8a <mp_emit_bc_end_finally>
    2eb2:	08 95       	ret

00002eb4 <mp_emit_bc_get_iter>:
    2eb4:	66 23       	and	r22, r22
    2eb6:	21 f0       	breq	.+8      	; 0x2ec0 <mp_emit_bc_get_iter+0xc>
    2eb8:	63 e0       	ldi	r22, 0x03	; 3
    2eba:	70 e0       	ldi	r23, 0x00	; 0
    2ebc:	4f e5       	ldi	r20, 0x5F	; 95
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <mp_emit_bc_get_iter+0x12>
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	4e e5       	ldi	r20, 0x5E	; 94
    2ec6:	41 cc       	rjmp	.-1918   	; 0x274a <emit_write_bytecode_byte>
    2ec8:	08 95       	ret

00002eca <mp_emit_bc_for_iter>:
    2eca:	9b 01       	movw	r18, r22
    2ecc:	4b e4       	ldi	r20, 0x4B	; 75
    2ece:	61 e0       	ldi	r22, 0x01	; 1
    2ed0:	70 e0       	ldi	r23, 0x00	; 0
    2ed2:	6e cd       	rjmp	.-1316   	; 0x29b0 <emit_write_bytecode_byte_unsigned_label>
    2ed4:	08 95       	ret

00002ed6 <mp_emit_bc_for_iter_end>:
    2ed6:	6c ef       	ldi	r22, 0xFC	; 252
    2ed8:	7f ef       	ldi	r23, 0xFF	; 255
    2eda:	1a cc       	rjmp	.-1996   	; 0x2710 <mp_emit_bc_adjust_stack_size>
    2edc:	08 95       	ret

00002ede <mp_emit_bc_pop_except_jump>:
    2ede:	9b 01       	movw	r18, r22
    2ee0:	4a e4       	ldi	r20, 0x4A	; 74
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	64 cd       	rjmp	.-1336   	; 0x29b0 <emit_write_bytecode_byte_unsigned_label>
    2ee8:	08 95       	ret

00002eea <mp_emit_bc_unary_op>:
    2eea:	40 ed       	ldi	r20, 0xD0	; 208
    2eec:	46 0f       	add	r20, r22
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	2b cc       	rjmp	.-1962   	; 0x274a <emit_write_bytecode_byte>
    2ef4:	08 95       	ret

00002ef6 <mp_emit_bc_binary_op>:
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	ec 01       	movw	r28, r24
    2efc:	62 33       	cpi	r22, 0x32	; 50
    2efe:	41 f0       	breq	.+16     	; 0x2f10 <mp_emit_bc_binary_op+0x1a>
    2f00:	63 33       	cpi	r22, 0x33	; 51
    2f02:	41 f0       	breq	.+16     	; 0x2f14 <mp_emit_bc_binary_op+0x1e>
    2f04:	47 ed       	ldi	r20, 0xD7	; 215
    2f06:	46 0f       	add	r20, r22
    2f08:	6f ef       	ldi	r22, 0xFF	; 255
    2f0a:	7f ef       	ldi	r23, 0xFF	; 255
    2f0c:	1e dc       	rcall	.-1988   	; 0x274a <emit_write_bytecode_byte>
    2f0e:	0d c0       	rjmp	.+26     	; 0x2f2a <mp_emit_bc_binary_op+0x34>
    2f10:	46 e0       	ldi	r20, 0x06	; 6
    2f12:	01 c0       	rjmp	.+2      	; 0x2f16 <mp_emit_bc_binary_op+0x20>
    2f14:	47 e0       	ldi	r20, 0x07	; 7
    2f16:	49 52       	subi	r20, 0x29	; 41
    2f18:	6f ef       	ldi	r22, 0xFF	; 255
    2f1a:	7f ef       	ldi	r23, 0xFF	; 255
    2f1c:	ce 01       	movw	r24, r28
    2f1e:	15 dc       	rcall	.-2006   	; 0x274a <emit_write_bytecode_byte>
    2f20:	43 ed       	ldi	r20, 0xD3	; 211
    2f22:	60 e0       	ldi	r22, 0x00	; 0
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	ce 01       	movw	r24, r28
    2f28:	10 dc       	rcall	.-2016   	; 0x274a <emit_write_bytecode_byte>
    2f2a:	df 91       	pop	r29
    2f2c:	cf 91       	pop	r28
    2f2e:	08 95       	ret

00002f30 <mp_emit_bc_build>:
    2f30:	9b 01       	movw	r18, r22
    2f32:	42 30       	cpi	r20, 0x02	; 2
    2f34:	51 05       	cpc	r21, r1
    2f36:	31 f0       	breq	.+12     	; 0x2f44 <mp_emit_bc_build+0x14>
    2f38:	e1 e0       	ldi	r30, 0x01	; 1
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	bf 01       	movw	r22, r30
    2f3e:	62 1b       	sub	r22, r18
    2f40:	73 0b       	sbc	r23, r19
    2f42:	02 c0       	rjmp	.+4      	; 0x2f48 <mp_emit_bc_build+0x18>
    2f44:	61 e0       	ldi	r22, 0x01	; 1
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	46 5d       	subi	r20, 0xD6	; 214
    2f4a:	10 cc       	rjmp	.-2016   	; 0x276c <emit_write_bytecode_byte_uint>
    2f4c:	08 95       	ret

00002f4e <mp_emit_bc_store_map>:
    2f4e:	42 e6       	ldi	r20, 0x62	; 98
    2f50:	6e ef       	ldi	r22, 0xFE	; 254
    2f52:	7f ef       	ldi	r23, 0xFF	; 255
    2f54:	fa cb       	rjmp	.-2060   	; 0x274a <emit_write_bytecode_byte>
    2f56:	08 95       	ret

00002f58 <mp_emit_bc_store_comp>:
    2f58:	21 e0       	ldi	r18, 0x01	; 1
    2f5a:	63 30       	cpi	r22, 0x03	; 3
    2f5c:	09 f4       	brne	.+2      	; 0x2f60 <mp_emit_bc_store_comp+0x8>
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	62 2f       	mov	r22, r18
    2f62:	70 e0       	ldi	r23, 0x00	; 0
    2f64:	9b 01       	movw	r18, r22
    2f66:	24 0f       	add	r18, r20
    2f68:	35 1f       	adc	r19, r21
    2f6a:	22 0f       	add	r18, r18
    2f6c:	33 1f       	adc	r19, r19
    2f6e:	22 0f       	add	r18, r18
    2f70:	33 1f       	adc	r19, r19
    2f72:	26 2b       	or	r18, r22
    2f74:	37 2b       	or	r19, r23
    2f76:	60 95       	com	r22
    2f78:	70 95       	com	r23
    2f7a:	4f e2       	ldi	r20, 0x2F	; 47
    2f7c:	f7 cb       	rjmp	.-2066   	; 0x276c <emit_write_bytecode_byte_uint>
    2f7e:	08 95       	ret

00002f80 <mp_emit_bc_unpack_sequence>:
    2f80:	9b 01       	movw	r18, r22
    2f82:	61 50       	subi	r22, 0x01	; 1
    2f84:	71 09       	sbc	r23, r1
    2f86:	40 e3       	ldi	r20, 0x30	; 48
    2f88:	f1 cb       	rjmp	.-2078   	; 0x276c <emit_write_bytecode_byte_uint>
    2f8a:	08 95       	ret

00002f8c <mp_emit_bc_unpack_ex>:
    2f8c:	34 2f       	mov	r19, r20
    2f8e:	22 27       	eor	r18, r18
    2f90:	26 2b       	or	r18, r22
    2f92:	37 2b       	or	r19, r23
    2f94:	64 0f       	add	r22, r20
    2f96:	75 1f       	adc	r23, r21
    2f98:	41 e3       	ldi	r20, 0x31	; 49
    2f9a:	e8 cb       	rjmp	.-2096   	; 0x276c <emit_write_bytecode_byte_uint>
    2f9c:	08 95       	ret

00002f9e <mp_emit_bc_make_function>:
    2f9e:	45 2b       	or	r20, r21
    2fa0:	51 f4       	brne	.+20     	; 0x2fb6 <mp_emit_bc_make_function+0x18>
    2fa2:	23 2b       	or	r18, r19
    2fa4:	41 f4       	brne	.+16     	; 0x2fb6 <mp_emit_bc_make_function+0x18>
    2fa6:	fb 01       	movw	r30, r22
    2fa8:	27 81       	ldd	r18, Z+7	; 0x07
    2faa:	30 85       	ldd	r19, Z+8	; 0x08
    2fac:	42 e3       	ldi	r20, 0x32	; 50
    2fae:	61 e0       	ldi	r22, 0x01	; 1
    2fb0:	70 e0       	ldi	r23, 0x00	; 0
    2fb2:	55 cc       	rjmp	.-1878   	; 0x285e <emit_write_bytecode_byte_raw_code>
    2fb4:	08 95       	ret
    2fb6:	fb 01       	movw	r30, r22
    2fb8:	27 81       	ldd	r18, Z+7	; 0x07
    2fba:	30 85       	ldd	r19, Z+8	; 0x08
    2fbc:	43 e3       	ldi	r20, 0x33	; 51
    2fbe:	6f ef       	ldi	r22, 0xFF	; 255
    2fc0:	7f ef       	ldi	r23, 0xFF	; 255
    2fc2:	4d cc       	rjmp	.-1894   	; 0x285e <emit_write_bytecode_byte_raw_code>
    2fc4:	08 95       	ret

00002fc6 <mp_emit_bc_make_closure>:
    2fc6:	ef 92       	push	r14
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	7c 01       	movw	r14, r24
    2fd4:	ea 01       	movw	r28, r20
    2fd6:	23 2b       	or	r18, r19
    2fd8:	81 f4       	brne	.+32     	; 0x2ffa <mp_emit_bc_make_closure+0x34>
    2fda:	01 2b       	or	r16, r17
    2fdc:	71 f4       	brne	.+28     	; 0x2ffa <mp_emit_bc_make_closure+0x34>
    2fde:	fb 01       	movw	r30, r22
    2fe0:	27 81       	ldd	r18, Z+7	; 0x07
    2fe2:	30 85       	ldd	r19, Z+8	; 0x08
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	70 e0       	ldi	r23, 0x00	; 0
    2fe8:	64 1b       	sub	r22, r20
    2fea:	75 0b       	sbc	r23, r21
    2fec:	40 e2       	ldi	r20, 0x20	; 32
    2fee:	37 dc       	rcall	.-1938   	; 0x285e <emit_write_bytecode_byte_raw_code>
    2ff0:	6c 2f       	mov	r22, r28
    2ff2:	c7 01       	movw	r24, r14
    2ff4:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    2ff8:	13 c0       	rjmp	.+38     	; 0x3020 <mp_emit_bc_make_closure+0x5a>
    2ffa:	cf 3f       	cpi	r28, 0xFF	; 255
    2ffc:	d1 05       	cpc	r29, r1
    2ffe:	19 f0       	breq	.+6      	; 0x3006 <mp_emit_bc_make_closure+0x40>
    3000:	10 f0       	brcs	.+4      	; 0x3006 <mp_emit_bc_make_closure+0x40>
    3002:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    3006:	fb 01       	movw	r30, r22
    3008:	27 81       	ldd	r18, Z+7	; 0x07
    300a:	30 85       	ldd	r19, Z+8	; 0x08
    300c:	be 01       	movw	r22, r28
    300e:	60 95       	com	r22
    3010:	70 95       	com	r23
    3012:	41 e2       	ldi	r20, 0x21	; 33
    3014:	c7 01       	movw	r24, r14
    3016:	23 dc       	rcall	.-1978   	; 0x285e <emit_write_bytecode_byte_raw_code>
    3018:	6c 2f       	mov	r22, r28
    301a:	c7 01       	movw	r24, r14
    301c:	0e 94 b1 04 	call	0x962	; 0x962 <emit_write_bytecode_raw_byte>
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	08 95       	ret

0000302e <close_over_variables_etc>:
    302e:	2f 92       	push	r2
    3030:	3f 92       	push	r3
    3032:	4f 92       	push	r4
    3034:	5f 92       	push	r5
    3036:	6f 92       	push	r6
    3038:	7f 92       	push	r7
    303a:	8f 92       	push	r8
    303c:	9f 92       	push	r9
    303e:	af 92       	push	r10
    3040:	bf 92       	push	r11
    3042:	cf 92       	push	r12
    3044:	df 92       	push	r13
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	00 d0       	rcall	.+0      	; 0x3054 <close_over_variables_etc+0x26>
    3054:	00 d0       	rcall	.+0      	; 0x3056 <close_over_variables_etc+0x28>
    3056:	cd b7       	in	r28, 0x3d	; 61
    3058:	de b7       	in	r29, 0x3e	; 62
    305a:	3c 01       	movw	r6, r24
    305c:	7b 01       	movw	r14, r22
    305e:	1a 01       	movw	r2, r20
    3060:	29 01       	movw	r4, r18
    3062:	55 23       	and	r21, r21
    3064:	14 f4       	brge	.+4      	; 0x306a <close_over_variables_etc+0x3c>
    3066:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    306a:	33 23       	and	r19, r19
    306c:	14 f4       	brge	.+4      	; 0x3072 <close_over_variables_etc+0x44>
    306e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    3072:	12 16       	cp	r1, r18
    3074:	13 06       	cpc	r1, r19
    3076:	54 f4       	brge	.+20     	; 0x308c <close_over_variables_etc+0x5e>
    3078:	db 01       	movw	r26, r22
    307a:	1d 96       	adiw	r26, 0x0d	; 13
    307c:	8d 91       	ld	r24, X+
    307e:	9c 91       	ld	r25, X
    3080:	1e 97       	sbiw	r26, 0x0e	; 14
    3082:	88 60       	ori	r24, 0x08	; 8
    3084:	1e 96       	adiw	r26, 0x0e	; 14
    3086:	9c 93       	st	X, r25
    3088:	8e 93       	st	-X, r24
    308a:	1d 97       	sbiw	r26, 0x0d	; 13
    308c:	f7 01       	movw	r30, r14
    308e:	36 8a       	std	Z+22, r3	; 0x16
    3090:	25 8a       	std	Z+21, r2	; 0x15
    3092:	d3 01       	movw	r26, r6
    3094:	59 96       	adiw	r26, 0x19	; 25
    3096:	ed 91       	ld	r30, X+
    3098:	fc 91       	ld	r31, X
    309a:	5a 97       	sbiw	r26, 0x1a	; 26
    309c:	80 81       	ld	r24, Z
    309e:	88 23       	and	r24, r24
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <close_over_variables_etc+0x76>
    30a2:	6a c0       	rjmp	.+212    	; 0x3178 <close_over_variables_etc+0x14a>
    30a4:	87 8d       	ldd	r24, Z+31	; 0x1f
    30a6:	90 a1       	ldd	r25, Z+32	; 0x20
    30a8:	89 2b       	or	r24, r25
    30aa:	09 f4       	brne	.+2      	; 0x30ae <close_over_variables_etc+0x80>
    30ac:	65 c0       	rjmp	.+202    	; 0x3178 <close_over_variables_etc+0x14a>
    30ae:	81 2c       	mov	r8, r1
    30b0:	91 2c       	mov	r9, r1
    30b2:	a1 2c       	mov	r10, r1
    30b4:	b1 2c       	mov	r11, r1
    30b6:	1a 82       	std	Y+2, r1	; 0x02
    30b8:	19 82       	std	Y+1, r1	; 0x01
    30ba:	c1 a0       	ldd	r12, Z+33	; 0x21
    30bc:	d2 a0       	ldd	r13, Z+34	; 0x22
    30be:	c8 0c       	add	r12, r8
    30c0:	d9 1c       	adc	r13, r9
    30c2:	f6 01       	movw	r30, r12
    30c4:	80 81       	ld	r24, Z
    30c6:	84 50       	subi	r24, 0x04	; 4
    30c8:	82 30       	cpi	r24, 0x02	; 2
    30ca:	08 f0       	brcs	.+2      	; 0x30ce <close_over_variables_etc+0xa0>
    30cc:	40 c0       	rjmp	.+128    	; 0x314e <close_over_variables_etc+0x120>
    30ce:	d7 01       	movw	r26, r14
    30d0:	5f 96       	adiw	r26, 0x1f	; 31
    30d2:	8d 91       	ld	r24, X+
    30d4:	9c 91       	ld	r25, X
    30d6:	90 97       	sbiw	r26, 0x20	; 32
    30d8:	89 2b       	or	r24, r25
    30da:	c9 f1       	breq	.+114    	; 0x314e <close_over_variables_etc+0x120>
    30dc:	00 e0       	ldi	r16, 0x00	; 0
    30de:	10 e0       	ldi	r17, 0x00	; 0
    30e0:	1c 82       	std	Y+4, r1	; 0x04
    30e2:	1b 82       	std	Y+3, r1	; 0x03
    30e4:	d7 01       	movw	r26, r14
    30e6:	91 96       	adiw	r26, 0x21	; 33
    30e8:	ed 91       	ld	r30, X+
    30ea:	fc 91       	ld	r31, X
    30ec:	92 97       	sbiw	r26, 0x22	; 34
    30ee:	e0 0f       	add	r30, r16
    30f0:	f1 1f       	adc	r31, r17
    30f2:	80 81       	ld	r24, Z
    30f4:	85 30       	cpi	r24, 0x05	; 5
    30f6:	d1 f4       	brne	.+52     	; 0x312c <close_over_variables_etc+0xfe>
    30f8:	d6 01       	movw	r26, r12
    30fa:	14 96       	adiw	r26, 0x04	; 4
    30fc:	6d 91       	ld	r22, X+
    30fe:	7c 91       	ld	r23, X
    3100:	15 97       	sbiw	r26, 0x05	; 5
    3102:	84 81       	ldd	r24, Z+4	; 0x04
    3104:	95 81       	ldd	r25, Z+5	; 0x05
    3106:	68 17       	cp	r22, r24
    3108:	79 07       	cpc	r23, r25
    310a:	81 f4       	brne	.+32     	; 0x312c <close_over_variables_etc+0xfe>
    310c:	12 96       	adiw	r26, 0x02	; 2
    310e:	4d 91       	ld	r20, X+
    3110:	5c 91       	ld	r21, X
    3112:	13 97       	sbiw	r26, 0x03	; 3
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	f3 01       	movw	r30, r6
    311a:	83 8d       	ldd	r24, Z+27	; 0x1b
    311c:	94 8d       	ldd	r25, Z+28	; 0x1c
    311e:	c9 db       	rcall	.-2158   	; 0x28b2 <mp_emit_bc_load_local>
    3120:	29 81       	ldd	r18, Y+1	; 0x01
    3122:	3a 81       	ldd	r19, Y+2	; 0x02
    3124:	2f 5f       	subi	r18, 0xFF	; 255
    3126:	3f 4f       	sbci	r19, 0xFF	; 255
    3128:	3a 83       	std	Y+2, r19	; 0x02
    312a:	29 83       	std	Y+1, r18	; 0x01
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	9c 81       	ldd	r25, Y+4	; 0x04
    3130:	01 96       	adiw	r24, 0x01	; 1
    3132:	9c 83       	std	Y+4, r25	; 0x04
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	0a 5f       	subi	r16, 0xFA	; 250
    3138:	1f 4f       	sbci	r17, 0xFF	; 255
    313a:	d7 01       	movw	r26, r14
    313c:	5f 96       	adiw	r26, 0x1f	; 31
    313e:	8d 91       	ld	r24, X+
    3140:	9c 91       	ld	r25, X
    3142:	90 97       	sbiw	r26, 0x20	; 32
    3144:	eb 81       	ldd	r30, Y+3	; 0x03
    3146:	fc 81       	ldd	r31, Y+4	; 0x04
    3148:	e8 17       	cp	r30, r24
    314a:	f9 07       	cpc	r31, r25
    314c:	58 f2       	brcs	.-106    	; 0x30e4 <close_over_variables_etc+0xb6>
    314e:	ff ef       	ldi	r31, 0xFF	; 255
    3150:	af 1a       	sub	r10, r31
    3152:	bf 0a       	sbc	r11, r31
    3154:	d3 01       	movw	r26, r6
    3156:	59 96       	adiw	r26, 0x19	; 25
    3158:	ed 91       	ld	r30, X+
    315a:	fc 91       	ld	r31, X
    315c:	5a 97       	sbiw	r26, 0x1a	; 26
    315e:	b6 e0       	ldi	r27, 0x06	; 6
    3160:	8b 0e       	add	r8, r27
    3162:	91 1c       	adc	r9, r1
    3164:	87 8d       	ldd	r24, Z+31	; 0x1f
    3166:	90 a1       	ldd	r25, Z+32	; 0x20
    3168:	a8 16       	cp	r10, r24
    316a:	b9 06       	cpc	r11, r25
    316c:	08 f4       	brcc	.+2      	; 0x3170 <close_over_variables_etc+0x142>
    316e:	a5 cf       	rjmp	.-182    	; 0x30ba <close_over_variables_etc+0x8c>
    3170:	e9 81       	ldd	r30, Y+1	; 0x01
    3172:	fa 81       	ldd	r31, Y+2	; 0x02
    3174:	ef 2b       	or	r30, r31
    3176:	51 f4       	brne	.+20     	; 0x318c <close_over_variables_etc+0x15e>
    3178:	92 01       	movw	r18, r4
    317a:	a1 01       	movw	r20, r2
    317c:	b7 01       	movw	r22, r14
    317e:	d3 01       	movw	r26, r6
    3180:	5b 96       	adiw	r26, 0x1b	; 27
    3182:	8d 91       	ld	r24, X+
    3184:	9c 91       	ld	r25, X
    3186:	5c 97       	sbiw	r26, 0x1c	; 28
    3188:	0a df       	rcall	.-492    	; 0x2f9e <mp_emit_bc_make_function>
    318a:	09 c0       	rjmp	.+18     	; 0x319e <close_over_variables_etc+0x170>
    318c:	82 01       	movw	r16, r4
    318e:	91 01       	movw	r18, r2
    3190:	49 81       	ldd	r20, Y+1	; 0x01
    3192:	5a 81       	ldd	r21, Y+2	; 0x02
    3194:	b7 01       	movw	r22, r14
    3196:	f3 01       	movw	r30, r6
    3198:	83 8d       	ldd	r24, Z+27	; 0x1b
    319a:	94 8d       	ldd	r25, Z+28	; 0x1c
    319c:	14 df       	rcall	.-472    	; 0x2fc6 <mp_emit_bc_make_closure>
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	df 91       	pop	r29
    31a8:	cf 91       	pop	r28
    31aa:	1f 91       	pop	r17
    31ac:	0f 91       	pop	r16
    31ae:	ff 90       	pop	r15
    31b0:	ef 90       	pop	r14
    31b2:	df 90       	pop	r13
    31b4:	cf 90       	pop	r12
    31b6:	bf 90       	pop	r11
    31b8:	af 90       	pop	r10
    31ba:	9f 90       	pop	r9
    31bc:	8f 90       	pop	r8
    31be:	7f 90       	pop	r7
    31c0:	6f 90       	pop	r6
    31c2:	5f 90       	pop	r5
    31c4:	4f 90       	pop	r4
    31c6:	3f 90       	pop	r3
    31c8:	2f 90       	pop	r2
    31ca:	08 95       	ret

000031cc <compile_funcdef_lambdef>:
    31cc:	bf 92       	push	r11
    31ce:	cf 92       	push	r12
    31d0:	df 92       	push	r13
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	ec 01       	movw	r28, r24
    31e0:	6b 01       	movw	r12, r22
    31e2:	ba 01       	movw	r22, r20
    31e4:	42 2f       	mov	r20, r18
    31e6:	bc 80       	ldd	r11, Y+4	; 0x04
    31e8:	eb 84       	ldd	r14, Y+11	; 0x0b
    31ea:	fc 84       	ldd	r15, Y+12	; 0x0c
    31ec:	0d 85       	ldd	r16, Y+13	; 0x0d
    31ee:	1e 85       	ldd	r17, Y+14	; 0x0e
    31f0:	1c 82       	std	Y+4, r1	; 0x04
    31f2:	1c 86       	std	Y+12, r1	; 0x0c
    31f4:	1b 86       	std	Y+11, r1	; 0x0b
    31f6:	1e 86       	std	Y+14, r1	; 0x0e
    31f8:	1d 86       	std	Y+13, r1	; 0x0d
    31fa:	23 e2       	ldi	r18, 0x23	; 35
    31fc:	3e e5       	ldi	r19, 0x5E	; 94
    31fe:	0e 94 b7 01 	call	0x36e	; 0x36e <apply_to_single_or_list>
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	89 2b       	or	r24, r25
    3208:	09 f5       	brne	.+66     	; 0x324c <compile_funcdef_lambdef+0x80>
    320a:	6d 85       	ldd	r22, Y+13	; 0x0d
    320c:	7e 85       	ldd	r23, Y+14	; 0x0e
    320e:	61 15       	cp	r22, r1
    3210:	71 05       	cpc	r23, r1
    3212:	61 f0       	breq	.+24     	; 0x322c <compile_funcdef_lambdef+0x60>
    3214:	8b 85       	ldd	r24, Y+11	; 0x0b
    3216:	9c 85       	ldd	r25, Y+12	; 0x0c
    3218:	89 2b       	or	r24, r25
    321a:	41 f4       	brne	.+16     	; 0x322c <compile_funcdef_lambdef+0x60>
    321c:	40 e0       	ldi	r20, 0x00	; 0
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3224:	85 de       	rcall	.-758    	; 0x2f30 <mp_emit_bc_build>
    3226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    322a:	1c dd       	rcall	.-1480   	; 0x2c64 <mp_emit_bc_load_null>
    322c:	2b 85       	ldd	r18, Y+11	; 0x0b
    322e:	3c 85       	ldd	r19, Y+12	; 0x0c
    3230:	4d 85       	ldd	r20, Y+13	; 0x0d
    3232:	5e 85       	ldd	r21, Y+14	; 0x0e
    3234:	b6 01       	movw	r22, r12
    3236:	ce 01       	movw	r24, r28
    3238:	fa de       	rcall	.-524    	; 0x302e <close_over_variables_etc>
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	b1 10       	cpse	r11, r1
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <compile_funcdef_lambdef+0x76>
    3240:	80 e0       	ldi	r24, 0x00	; 0
    3242:	8c 83       	std	Y+4, r24	; 0x04
    3244:	fc 86       	std	Y+12, r15	; 0x0c
    3246:	eb 86       	std	Y+11, r14	; 0x0b
    3248:	1e 87       	std	Y+14, r17	; 0x0e
    324a:	0d 87       	std	Y+13, r16	; 0x0d
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	df 90       	pop	r13
    325a:	cf 90       	pop	r12
    325c:	bf 90       	pop	r11
    325e:	08 95       	ret

00003260 <mp_emit_bc_call_function>:
    3260:	ef 92       	push	r14
    3262:	ff 92       	push	r15
    3264:	0f 93       	push	r16
    3266:	1f 93       	push	r17
    3268:	79 01       	movw	r14, r18
    326a:	8a 01       	movw	r16, r20
    326c:	9b 01       	movw	r18, r22
    326e:	44 e3       	ldi	r20, 0x34	; 52
    3270:	50 e0       	ldi	r21, 0x00	; 0
    3272:	60 e0       	ldi	r22, 0x00	; 0
    3274:	70 e0       	ldi	r23, 0x00	; 0
    3276:	cc da       	rcall	.-2664   	; 0x2810 <emit_bc_call_function_method_helper>
    3278:	1f 91       	pop	r17
    327a:	0f 91       	pop	r16
    327c:	ff 90       	pop	r15
    327e:	ef 90       	pop	r14
    3280:	08 95       	ret

00003282 <mp_emit_bc_call_method>:
    3282:	ef 92       	push	r14
    3284:	ff 92       	push	r15
    3286:	0f 93       	push	r16
    3288:	1f 93       	push	r17
    328a:	79 01       	movw	r14, r18
    328c:	8a 01       	movw	r16, r20
    328e:	9b 01       	movw	r18, r22
    3290:	46 e3       	ldi	r20, 0x36	; 54
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	6f ef       	ldi	r22, 0xFF	; 255
    3296:	7f ef       	ldi	r23, 0xFF	; 255
    3298:	bb da       	rcall	.-2698   	; 0x2810 <emit_bc_call_function_method_helper>
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	08 95       	ret

000032a4 <mp_emit_bc_return_value>:
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	ec 01       	movw	r28, r24
    32aa:	43 e6       	ldi	r20, 0x63	; 99
    32ac:	6f ef       	ldi	r22, 0xFF	; 255
    32ae:	7f ef       	ldi	r23, 0xFF	; 255
    32b0:	4c da       	rcall	.-2920   	; 0x274a <emit_write_bytecode_byte>
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	8c 83       	std	Y+4, r24	; 0x04
    32b6:	df 91       	pop	r29
    32b8:	cf 91       	pop	r28
    32ba:	08 95       	ret

000032bc <mp_emit_bc_raise_varargs>:
    32bc:	63 30       	cpi	r22, 0x03	; 3
    32be:	71 05       	cpc	r23, r1
    32c0:	10 f0       	brcs	.+4      	; 0x32c6 <mp_emit_bc_raise_varargs+0xa>
    32c2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    32c6:	44 e6       	ldi	r20, 0x64	; 100
    32c8:	46 0f       	add	r20, r22
    32ca:	71 95       	neg	r23
    32cc:	61 95       	neg	r22
    32ce:	71 09       	sbc	r23, r1
    32d0:	3c ca       	rjmp	.-2952   	; 0x274a <emit_write_bytecode_byte>
    32d2:	08 95       	ret

000032d4 <mp_emit_bc_yield>:
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
    32d8:	ec 01       	movw	r28, r24
    32da:	47 e6       	ldi	r20, 0x67	; 103
    32dc:	46 0f       	add	r20, r22
    32de:	71 95       	neg	r23
    32e0:	61 95       	neg	r22
    32e2:	71 09       	sbc	r23, r1
    32e4:	32 da       	rcall	.-2972   	; 0x274a <emit_write_bytecode_byte>
    32e6:	ef 81       	ldd	r30, Y+7	; 0x07
    32e8:	f8 85       	ldd	r31, Y+8	; 0x08
    32ea:	85 85       	ldd	r24, Z+13	; 0x0d
    32ec:	96 85       	ldd	r25, Z+14	; 0x0e
    32ee:	81 60       	ori	r24, 0x01	; 1
    32f0:	96 87       	std	Z+14, r25	; 0x0e
    32f2:	85 87       	std	Z+13, r24	; 0x0d
    32f4:	df 91       	pop	r29
    32f6:	cf 91       	pop	r28
    32f8:	08 95       	ret

000032fa <mp_emit_bc_start_except_handler>:
    32fa:	64 e0       	ldi	r22, 0x04	; 4
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	08 ca       	rjmp	.-3056   	; 0x2710 <mp_emit_bc_adjust_stack_size>
    3300:	08 95       	ret

00003302 <mp_emit_bc_end_except_handler>:
    3302:	6d ef       	ldi	r22, 0xFD	; 253
    3304:	7f ef       	ldi	r23, 0xFF	; 255
    3306:	04 ca       	rjmp	.-3064   	; 0x2710 <mp_emit_bc_adjust_stack_size>
    3308:	08 95       	ret

0000330a <mp_parse_num_base>:
    330a:	62 30       	cpi	r22, 0x02	; 2
    330c:	71 05       	cpc	r23, r1
    330e:	08 f4       	brcc	.+2      	; 0x3312 <mp_parse_num_base+0x8>
    3310:	4c c0       	rjmp	.+152    	; 0x33aa <mp_parse_num_base+0xa0>
    3312:	fc 01       	movw	r30, r24
    3314:	20 81       	ld	r18, Z
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	fa 01       	movw	r30, r20
    331a:	60 81       	ld	r22, Z
    331c:	71 81       	ldd	r23, Z+1	; 0x01
    331e:	61 15       	cp	r22, r1
    3320:	71 05       	cpc	r23, r1
    3322:	09 f4       	brne	.+2      	; 0x3326 <mp_parse_num_base+0x1c>
    3324:	5e c0       	rjmp	.+188    	; 0x33e2 <mp_parse_num_base+0xd8>
    3326:	60 31       	cpi	r22, 0x10	; 16
    3328:	71 05       	cpc	r23, r1
    332a:	09 f5       	brne	.+66     	; 0x336e <mp_parse_num_base+0x64>
    332c:	20 33       	cpi	r18, 0x30	; 48
    332e:	31 05       	cpc	r19, r1
    3330:	e1 f5       	brne	.+120    	; 0x33aa <mp_parse_num_base+0xa0>
    3332:	64 c0       	rjmp	.+200    	; 0x33fc <mp_parse_num_base+0xf2>
    3334:	60 e1       	ldi	r22, 0x10	; 16
    3336:	70 e0       	ldi	r23, 0x00	; 0
    3338:	fa 01       	movw	r30, r20
    333a:	71 83       	std	Z+1, r23	; 0x01
    333c:	60 83       	st	Z, r22
    333e:	4c c0       	rjmp	.+152    	; 0x33d8 <mp_parse_num_base+0xce>
    3340:	6f 36       	cpi	r22, 0x6F	; 111
    3342:	31 f4       	brne	.+12     	; 0x3350 <mp_parse_num_base+0x46>
    3344:	68 e0       	ldi	r22, 0x08	; 8
    3346:	70 e0       	ldi	r23, 0x00	; 0
    3348:	fa 01       	movw	r30, r20
    334a:	71 83       	std	Z+1, r23	; 0x01
    334c:	60 83       	st	Z, r22
    334e:	44 c0       	rjmp	.+136    	; 0x33d8 <mp_parse_num_base+0xce>
    3350:	62 36       	cpi	r22, 0x62	; 98
    3352:	31 f4       	brne	.+12     	; 0x3360 <mp_parse_num_base+0x56>
    3354:	62 e0       	ldi	r22, 0x02	; 2
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	fa 01       	movw	r30, r20
    335a:	71 83       	std	Z+1, r23	; 0x01
    335c:	60 83       	st	Z, r22
    335e:	3c c0       	rjmp	.+120    	; 0x33d8 <mp_parse_num_base+0xce>
    3360:	2a e0       	ldi	r18, 0x0A	; 10
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	fa 01       	movw	r30, r20
    3366:	31 83       	std	Z+1, r19	; 0x01
    3368:	20 83       	st	Z, r18
    336a:	9c 01       	movw	r18, r24
    336c:	35 c0       	rjmp	.+106    	; 0x33d8 <mp_parse_num_base+0xce>
    336e:	68 30       	cpi	r22, 0x08	; 8
    3370:	71 05       	cpc	r23, r1
    3372:	61 f4       	brne	.+24     	; 0x338c <mp_parse_num_base+0x82>
    3374:	20 33       	cpi	r18, 0x30	; 48
    3376:	31 05       	cpc	r19, r1
    3378:	21 f5       	brne	.+72     	; 0x33c2 <mp_parse_num_base+0xb8>
    337a:	fc 01       	movw	r30, r24
    337c:	21 81       	ldd	r18, Z+1	; 0x01
    337e:	20 62       	ori	r18, 0x20	; 32
    3380:	2f 36       	cpi	r18, 0x6F	; 111
    3382:	09 f5       	brne	.+66     	; 0x33c6 <mp_parse_num_base+0xbc>
    3384:	9c 01       	movw	r18, r24
    3386:	2e 5f       	subi	r18, 0xFE	; 254
    3388:	3f 4f       	sbci	r19, 0xFF	; 255
    338a:	26 c0       	rjmp	.+76     	; 0x33d8 <mp_parse_num_base+0xce>
    338c:	62 30       	cpi	r22, 0x02	; 2
    338e:	71 05       	cpc	r23, r1
    3390:	e1 f4       	brne	.+56     	; 0x33ca <mp_parse_num_base+0xc0>
    3392:	20 33       	cpi	r18, 0x30	; 48
    3394:	31 05       	cpc	r19, r1
    3396:	d9 f4       	brne	.+54     	; 0x33ce <mp_parse_num_base+0xc4>
    3398:	fc 01       	movw	r30, r24
    339a:	21 81       	ldd	r18, Z+1	; 0x01
    339c:	20 62       	ori	r18, 0x20	; 32
    339e:	22 36       	cpi	r18, 0x62	; 98
    33a0:	c1 f4       	brne	.+48     	; 0x33d2 <mp_parse_num_base+0xc8>
    33a2:	9c 01       	movw	r18, r24
    33a4:	2e 5f       	subi	r18, 0xFE	; 254
    33a6:	3f 4f       	sbci	r19, 0xFF	; 255
    33a8:	17 c0       	rjmp	.+46     	; 0x33d8 <mp_parse_num_base+0xce>
    33aa:	fa 01       	movw	r30, r20
    33ac:	20 81       	ld	r18, Z
    33ae:	31 81       	ldd	r19, Z+1	; 0x01
    33b0:	23 2b       	or	r18, r19
    33b2:	89 f4       	brne	.+34     	; 0x33d6 <mp_parse_num_base+0xcc>
    33b4:	2a e0       	ldi	r18, 0x0A	; 10
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	fa 01       	movw	r30, r20
    33ba:	31 83       	std	Z+1, r19	; 0x01
    33bc:	20 83       	st	Z, r18
    33be:	9c 01       	movw	r18, r24
    33c0:	0b c0       	rjmp	.+22     	; 0x33d8 <mp_parse_num_base+0xce>
    33c2:	9c 01       	movw	r18, r24
    33c4:	09 c0       	rjmp	.+18     	; 0x33d8 <mp_parse_num_base+0xce>
    33c6:	9c 01       	movw	r18, r24
    33c8:	07 c0       	rjmp	.+14     	; 0x33d8 <mp_parse_num_base+0xce>
    33ca:	9c 01       	movw	r18, r24
    33cc:	05 c0       	rjmp	.+10     	; 0x33d8 <mp_parse_num_base+0xce>
    33ce:	9c 01       	movw	r18, r24
    33d0:	03 c0       	rjmp	.+6      	; 0x33d8 <mp_parse_num_base+0xce>
    33d2:	9c 01       	movw	r18, r24
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <mp_parse_num_base+0xce>
    33d6:	9c 01       	movw	r18, r24
    33d8:	a9 01       	movw	r20, r18
    33da:	48 1b       	sub	r20, r24
    33dc:	59 0b       	sbc	r21, r25
    33de:	ca 01       	movw	r24, r20
    33e0:	08 95       	ret
    33e2:	20 33       	cpi	r18, 0x30	; 48
    33e4:	31 05       	cpc	r19, r1
    33e6:	31 f7       	brne	.-52     	; 0x33b4 <mp_parse_num_base+0xaa>
    33e8:	9c 01       	movw	r18, r24
    33ea:	2e 5f       	subi	r18, 0xFE	; 254
    33ec:	3f 4f       	sbci	r19, 0xFF	; 255
    33ee:	fc 01       	movw	r30, r24
    33f0:	61 81       	ldd	r22, Z+1	; 0x01
    33f2:	60 62       	ori	r22, 0x20	; 32
    33f4:	68 37       	cpi	r22, 0x78	; 120
    33f6:	09 f0       	breq	.+2      	; 0x33fa <mp_parse_num_base+0xf0>
    33f8:	a3 cf       	rjmp	.-186    	; 0x3340 <mp_parse_num_base+0x36>
    33fa:	9c cf       	rjmp	.-200    	; 0x3334 <mp_parse_num_base+0x2a>
    33fc:	9c 01       	movw	r18, r24
    33fe:	2e 5f       	subi	r18, 0xFE	; 254
    3400:	3f 4f       	sbci	r19, 0xFF	; 255
    3402:	fc 01       	movw	r30, r24
    3404:	61 81       	ldd	r22, Z+1	; 0x01
    3406:	60 62       	ori	r22, 0x20	; 32
    3408:	68 37       	cpi	r22, 0x78	; 120
    340a:	09 f4       	brne	.+2      	; 0x340e <mp_parse_num_base+0x104>
    340c:	93 cf       	rjmp	.-218    	; 0x3334 <mp_parse_num_base+0x2a>
    340e:	9c 01       	movw	r18, r24
    3410:	e3 cf       	rjmp	.-58     	; 0x33d8 <mp_parse_num_base+0xce>

00003412 <mp_map_clear>:
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	ec 01       	movw	r28, r24
    3418:	88 81       	ld	r24, Y
    341a:	81 fd       	sbrc	r24, 1
    341c:	04 c0       	rjmp	.+8      	; 0x3426 <mp_map_clear+0x14>
    341e:	8c 81       	ldd	r24, Y+4	; 0x04
    3420:	9d 81       	ldd	r25, Y+5	; 0x05
    3422:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    3426:	1b 82       	std	Y+3, r1	; 0x03
    3428:	1a 82       	std	Y+2, r1	; 0x02
    342a:	88 81       	ld	r24, Y
    342c:	19 82       	std	Y+1, r1	; 0x01
    342e:	87 70       	andi	r24, 0x07	; 7
    3430:	81 60       	ori	r24, 0x01	; 1
    3432:	8d 7f       	andi	r24, 0xFD	; 253
    3434:	88 83       	st	Y, r24
    3436:	1d 82       	std	Y+5, r1	; 0x05
    3438:	1c 82       	std	Y+4, r1	; 0x04
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	08 95       	ret

00003440 <mp_obj_get_type>:
    3440:	9c 01       	movw	r18, r24
    3442:	23 70       	andi	r18, 0x03	; 3
    3444:	33 27       	eor	r19, r19
    3446:	23 2b       	or	r18, r19
    3448:	21 f4       	brne	.+8      	; 0x3452 <mp_obj_get_type+0x12>
    344a:	fc 01       	movw	r30, r24
    344c:	80 81       	ld	r24, Z
    344e:	91 81       	ldd	r25, Z+1	; 0x01
    3450:	08 95       	ret
    3452:	fc 01       	movw	r30, r24
    3454:	ef 70       	andi	r30, 0x0F	; 15
    3456:	ff 27       	eor	r31, r31
    3458:	ee 0f       	add	r30, r30
    345a:	ff 1f       	adc	r31, r31
    345c:	ed 57       	subi	r30, 0x7D	; 125
    345e:	f8 4e       	sbci	r31, 0xE8	; 232
    3460:	80 81       	ld	r24, Z
    3462:	91 81       	ldd	r25, Z+1	; 0x01
    3464:	08 95       	ret

00003466 <mp_convert_member_lookup>:
    3466:	0f 93       	push	r16
    3468:	1f 93       	push	r17
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	ea 01       	movw	r28, r20
    3470:	89 01       	movw	r16, r18
    3472:	9a 01       	movw	r18, r20
    3474:	23 70       	andi	r18, 0x03	; 3
    3476:	33 27       	eor	r19, r19
    3478:	23 2b       	or	r18, r19
    347a:	d1 f5       	brne	.+116    	; 0x34f0 <mp_convert_member_lookup+0x8a>
    347c:	e8 81       	ld	r30, Y
    347e:	f9 81       	ldd	r31, Y+1	; 0x01
    3480:	22 81       	ldd	r18, Z+2	; 0x02
    3482:	25 ff       	sbrs	r18, 5
    3484:	18 c0       	rjmp	.+48     	; 0x34b6 <mp_convert_member_lookup+0x50>
    3486:	26 ff       	sbrs	r18, 6
    3488:	10 c0       	rjmp	.+32     	; 0x34aa <mp_convert_member_lookup+0x44>
    348a:	fb 01       	movw	r30, r22
    348c:	20 85       	ldd	r18, Z+8	; 0x08
    348e:	31 85       	ldd	r19, Z+9	; 0x09
    3490:	2f 53       	subi	r18, 0x3F	; 63
    3492:	3b 44       	sbci	r19, 0x4B	; 75
    3494:	21 f4       	brne	.+8      	; 0x349e <mp_convert_member_lookup+0x38>
    3496:	f8 01       	movw	r30, r16
    3498:	51 83       	std	Z+1, r21	; 0x01
    349a:	40 83       	st	Z, r20
    349c:	2c c0       	rjmp	.+88     	; 0x34f6 <mp_convert_member_lookup+0x90>
    349e:	f8 01       	movw	r30, r16
    34a0:	51 83       	std	Z+1, r21	; 0x01
    34a2:	40 83       	st	Z, r20
    34a4:	93 83       	std	Z+3, r25	; 0x03
    34a6:	82 83       	std	Z+2, r24	; 0x02
    34a8:	26 c0       	rjmp	.+76     	; 0x34f6 <mp_convert_member_lookup+0x90>
    34aa:	f8 01       	movw	r30, r16
    34ac:	51 83       	std	Z+1, r21	; 0x01
    34ae:	40 83       	st	Z, r20
    34b0:	93 83       	std	Z+3, r25	; 0x03
    34b2:	82 83       	std	Z+2, r24	; 0x02
    34b4:	20 c0       	rjmp	.+64     	; 0x34f6 <mp_convert_member_lookup+0x90>
    34b6:	2a e1       	ldi	r18, 0x1A	; 26
    34b8:	eb 30       	cpi	r30, 0x0B	; 11
    34ba:	f2 07       	cpc	r31, r18
    34bc:	31 f4       	brne	.+12     	; 0x34ca <mp_convert_member_lookup+0x64>
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	9b 81       	ldd	r25, Y+3	; 0x03
    34c2:	f8 01       	movw	r30, r16
    34c4:	91 83       	std	Z+1, r25	; 0x01
    34c6:	80 83       	st	Z, r24
    34c8:	16 c0       	rjmp	.+44     	; 0x34f6 <mp_convert_member_lookup+0x90>
    34ca:	eb 5e       	subi	r30, 0xEB	; 235
    34cc:	f9 41       	sbci	r31, 0x19	; 25
    34ce:	61 f4       	brne	.+24     	; 0x34e8 <mp_convert_member_lookup+0x82>
    34d0:	00 97       	sbiw	r24, 0x00	; 0
    34d2:	11 f0       	breq	.+4      	; 0x34d8 <mp_convert_member_lookup+0x72>
    34d4:	b5 df       	rcall	.-150    	; 0x3440 <mp_obj_get_type>
    34d6:	bc 01       	movw	r22, r24
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	f8 01       	movw	r30, r16
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
    34e2:	73 83       	std	Z+3, r23	; 0x03
    34e4:	62 83       	std	Z+2, r22	; 0x02
    34e6:	07 c0       	rjmp	.+14     	; 0x34f6 <mp_convert_member_lookup+0x90>
    34e8:	f8 01       	movw	r30, r16
    34ea:	51 83       	std	Z+1, r21	; 0x01
    34ec:	40 83       	st	Z, r20
    34ee:	03 c0       	rjmp	.+6      	; 0x34f6 <mp_convert_member_lookup+0x90>
    34f0:	f8 01       	movw	r30, r16
    34f2:	51 83       	std	Z+1, r21	; 0x01
    34f4:	40 83       	st	Z, r20
    34f6:	df 91       	pop	r29
    34f8:	cf 91       	pop	r28
    34fa:	1f 91       	pop	r17
    34fc:	0f 91       	pop	r16
    34fe:	08 95       	ret

00003500 <op_getitem>:
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	cf 93       	push	r28
    3506:	df 93       	push	r29
    3508:	ec 01       	movw	r28, r24
    350a:	8b 01       	movw	r16, r22
    350c:	99 df       	rcall	.-206    	; 0x3440 <mp_obj_get_type>
    350e:	dc 01       	movw	r26, r24
    3510:	52 96       	adiw	r26, 0x12	; 18
    3512:	ed 91       	ld	r30, X+
    3514:	fc 91       	ld	r31, X
    3516:	53 97       	sbiw	r26, 0x13	; 19
    3518:	44 e0       	ldi	r20, 0x04	; 4
    351a:	50 e0       	ldi	r21, 0x00	; 0
    351c:	b8 01       	movw	r22, r16
    351e:	ce 01       	movw	r24, r28
    3520:	09 95       	icall
    3522:	df 91       	pop	r29
    3524:	cf 91       	pop	r28
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    352a:	08 95       	ret

0000352c <op_setitem>:
    352c:	ef 92       	push	r14
    352e:	ff 92       	push	r15
    3530:	0f 93       	push	r16
    3532:	1f 93       	push	r17
    3534:	cf 93       	push	r28
    3536:	df 93       	push	r29
    3538:	ec 01       	movw	r28, r24
    353a:	8b 01       	movw	r16, r22
    353c:	7a 01       	movw	r14, r20
    353e:	80 df       	rcall	.-256    	; 0x3440 <mp_obj_get_type>
    3540:	dc 01       	movw	r26, r24
    3542:	52 96       	adiw	r26, 0x12	; 18
    3544:	ed 91       	ld	r30, X+
    3546:	fc 91       	ld	r31, X
    3548:	53 97       	sbiw	r26, 0x13	; 19
    354a:	a7 01       	movw	r20, r14
    354c:	b8 01       	movw	r22, r16
    354e:	ce 01       	movw	r24, r28
    3550:	09 95       	icall
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	ef 90       	pop	r14
    355e:	08 95       	ret

00003560 <op_delitem>:
    3560:	0f 93       	push	r16
    3562:	1f 93       	push	r17
    3564:	cf 93       	push	r28
    3566:	df 93       	push	r29
    3568:	ec 01       	movw	r28, r24
    356a:	8b 01       	movw	r16, r22
    356c:	69 df       	rcall	.-302    	; 0x3440 <mp_obj_get_type>
    356e:	dc 01       	movw	r26, r24
    3570:	52 96       	adiw	r26, 0x12	; 18
    3572:	ed 91       	ld	r30, X+
    3574:	fc 91       	ld	r31, X
    3576:	53 97       	sbiw	r26, 0x13	; 19
    3578:	40 e0       	ldi	r20, 0x00	; 0
    357a:	50 e0       	ldi	r21, 0x00	; 0
    357c:	b8 01       	movw	r22, r16
    357e:	ce 01       	movw	r24, r28
    3580:	09 95       	icall
    3582:	df 91       	pop	r29
    3584:	cf 91       	pop	r28
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	08 95       	ret

0000358c <mp_obj_get_type_str>:
    358c:	59 df       	rcall	.-334    	; 0x3440 <mp_obj_get_type>
    358e:	fc 01       	movw	r30, r24
    3590:	84 81       	ldd	r24, Z+4	; 0x04
    3592:	95 81       	ldd	r25, Z+5	; 0x05
    3594:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <qstr_str>
    3598:	08 95       	ret

0000359a <mp_obj_print_helper>:
    359a:	ff 92       	push	r15
    359c:	0f 93       	push	r16
    359e:	1f 93       	push	r17
    35a0:	cf 93       	push	r28
    35a2:	df 93       	push	r29
    35a4:	18 2f       	mov	r17, r24
    35a6:	09 2f       	mov	r16, r25
    35a8:	eb 01       	movw	r28, r22
    35aa:	f4 2e       	mov	r15, r20
    35ac:	20 97       	sbiw	r28, 0x00	; 0
    35ae:	29 f4       	brne	.+10     	; 0x35ba <mp_obj_print_helper+0x20>
    35b0:	6f ef       	ldi	r22, 0xFF	; 255
    35b2:	71 e0       	ldi	r23, 0x01	; 1
    35b4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    35b8:	22 c0       	rjmp	.+68     	; 0x35fe <mp_obj_print_helper+0x64>
    35ba:	cb 01       	movw	r24, r22
    35bc:	41 df       	rcall	.-382    	; 0x3440 <mp_obj_get_type>
    35be:	dc 01       	movw	r26, r24
    35c0:	16 96       	adiw	r26, 0x06	; 6
    35c2:	ed 91       	ld	r30, X+
    35c4:	fc 91       	ld	r31, X
    35c6:	17 97       	sbiw	r26, 0x07	; 7
    35c8:	30 97       	sbiw	r30, 0x00	; 0
    35ca:	31 f0       	breq	.+12     	; 0x35d8 <mp_obj_print_helper+0x3e>
    35cc:	4f 2d       	mov	r20, r15
    35ce:	be 01       	movw	r22, r28
    35d0:	81 2f       	mov	r24, r17
    35d2:	90 2f       	mov	r25, r16
    35d4:	09 95       	icall
    35d6:	13 c0       	rjmp	.+38     	; 0x35fe <mp_obj_print_helper+0x64>
    35d8:	fc 01       	movw	r30, r24
    35da:	25 81       	ldd	r18, Z+5	; 0x05
    35dc:	2f 93       	push	r18
    35de:	84 81       	ldd	r24, Z+4	; 0x04
    35e0:	8f 93       	push	r24
    35e2:	85 e0       	ldi	r24, 0x05	; 5
    35e4:	92 e0       	ldi	r25, 0x02	; 2
    35e6:	9f 93       	push	r25
    35e8:	8f 93       	push	r24
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    35f2:	0f 90       	pop	r0
    35f4:	0f 90       	pop	r0
    35f6:	0f 90       	pop	r0
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	0f 90       	pop	r0
    35fe:	df 91       	pop	r29
    3600:	cf 91       	pop	r28
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
    3606:	ff 90       	pop	r15
    3608:	08 95       	ret

0000360a <dict_print>:
    360a:	af 92       	push	r10
    360c:	bf 92       	push	r11
    360e:	cf 92       	push	r12
    3610:	df 92       	push	r13
    3612:	ef 92       	push	r14
    3614:	ff 92       	push	r15
    3616:	0f 93       	push	r16
    3618:	1f 93       	push	r17
    361a:	cf 93       	push	r28
    361c:	df 93       	push	r29
    361e:	00 d0       	rcall	.+0      	; 0x3620 <dict_print+0x16>
    3620:	cd b7       	in	r28, 0x3d	; 61
    3622:	de b7       	in	r29, 0x3e	; 62
    3624:	7c 01       	movw	r14, r24
    3626:	5b 01       	movw	r10, r22
    3628:	6a e0       	ldi	r22, 0x0A	; 10
    362a:	72 e0       	ldi	r23, 0x02	; 2
    362c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3630:	1a 82       	std	Y+2, r1	; 0x02
    3632:	19 82       	std	Y+1, r1	; 0x01
    3634:	dd 24       	eor	r13, r13
    3636:	d3 94       	inc	r13
    3638:	c1 2c       	mov	r12, r1
    363a:	19 c0       	rjmp	.+50     	; 0x366e <dict_print+0x64>
    363c:	d1 10       	cpse	r13, r1
    363e:	05 c0       	rjmp	.+10     	; 0x364a <dict_print+0x40>
    3640:	6c e0       	ldi	r22, 0x0C	; 12
    3642:	72 e0       	ldi	r23, 0x02	; 2
    3644:	c7 01       	movw	r24, r14
    3646:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    364a:	f8 01       	movw	r30, r16
    364c:	60 81       	ld	r22, Z
    364e:	71 81       	ldd	r23, Z+1	; 0x01
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	c7 01       	movw	r24, r14
    3654:	a2 df       	rcall	.-188    	; 0x359a <mp_obj_print_helper>
    3656:	6b e1       	ldi	r22, 0x1B	; 27
    3658:	72 e0       	ldi	r23, 0x02	; 2
    365a:	c7 01       	movw	r24, r14
    365c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3660:	f8 01       	movw	r30, r16
    3662:	62 81       	ldd	r22, Z+2	; 0x02
    3664:	73 81       	ldd	r23, Z+3	; 0x03
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	c7 01       	movw	r24, r14
    366a:	97 df       	rcall	.-210    	; 0x359a <mp_obj_print_helper>
    366c:	dc 2c       	mov	r13, r12
    366e:	be 01       	movw	r22, r28
    3670:	6f 5f       	subi	r22, 0xFF	; 255
    3672:	7f 4f       	sbci	r23, 0xFF	; 255
    3674:	c5 01       	movw	r24, r10
    3676:	0e 94 ba 04 	call	0x974	; 0x974 <dict_iter_next>
    367a:	8c 01       	movw	r16, r24
    367c:	89 2b       	or	r24, r25
    367e:	f1 f6       	brne	.-68     	; 0x363c <dict_print+0x32>
    3680:	6d e5       	ldi	r22, 0x5D	; 93
    3682:	76 e1       	ldi	r23, 0x16	; 22
    3684:	c7 01       	movw	r24, r14
    3686:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	df 91       	pop	r29
    3690:	cf 91       	pop	r28
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	bf 90       	pop	r11
    36a0:	af 90       	pop	r10
    36a2:	08 95       	ret

000036a4 <list_print>:
    36a4:	ef 92       	push	r14
    36a6:	ff 92       	push	r15
    36a8:	0f 93       	push	r16
    36aa:	1f 93       	push	r17
    36ac:	cf 93       	push	r28
    36ae:	df 93       	push	r29
    36b0:	7c 01       	movw	r14, r24
    36b2:	8b 01       	movw	r16, r22
    36b4:	6b e9       	ldi	r22, 0x9B	; 155
    36b6:	76 e0       	ldi	r23, 0x06	; 6
    36b8:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    36bc:	d8 01       	movw	r26, r16
    36be:	14 96       	adiw	r26, 0x04	; 4
    36c0:	8d 91       	ld	r24, X+
    36c2:	9c 91       	ld	r25, X
    36c4:	15 97       	sbiw	r26, 0x05	; 5
    36c6:	89 2b       	or	r24, r25
    36c8:	49 f4       	brne	.+18     	; 0x36dc <list_print+0x38>
    36ca:	20 c0       	rjmp	.+64     	; 0x370c <list_print+0x68>
    36cc:	20 97       	sbiw	r28, 0x00	; 0
    36ce:	41 f0       	breq	.+16     	; 0x36e0 <list_print+0x3c>
    36d0:	6c e0       	ldi	r22, 0x0C	; 12
    36d2:	72 e0       	ldi	r23, 0x02	; 2
    36d4:	c7 01       	movw	r24, r14
    36d6:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    36da:	02 c0       	rjmp	.+4      	; 0x36e0 <list_print+0x3c>
    36dc:	c0 e0       	ldi	r28, 0x00	; 0
    36de:	d0 e0       	ldi	r29, 0x00	; 0
    36e0:	ce 01       	movw	r24, r28
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	d8 01       	movw	r26, r16
    36e8:	16 96       	adiw	r26, 0x06	; 6
    36ea:	ed 91       	ld	r30, X+
    36ec:	fc 91       	ld	r31, X
    36ee:	17 97       	sbiw	r26, 0x07	; 7
    36f0:	e8 0f       	add	r30, r24
    36f2:	f9 1f       	adc	r31, r25
    36f4:	60 81       	ld	r22, Z
    36f6:	71 81       	ldd	r23, Z+1	; 0x01
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	c7 01       	movw	r24, r14
    36fc:	4e df       	rcall	.-356    	; 0x359a <mp_obj_print_helper>
    36fe:	21 96       	adiw	r28, 0x01	; 1
    3700:	f8 01       	movw	r30, r16
    3702:	84 81       	ldd	r24, Z+4	; 0x04
    3704:	95 81       	ldd	r25, Z+5	; 0x05
    3706:	c8 17       	cp	r28, r24
    3708:	d9 07       	cpc	r29, r25
    370a:	00 f3       	brcs	.-64     	; 0x36cc <list_print+0x28>
    370c:	6f e0       	ldi	r22, 0x0F	; 15
    370e:	72 e0       	ldi	r23, 0x02	; 2
    3710:	c7 01       	movw	r24, r14
    3712:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	08 95       	ret

00003724 <mp_obj_tuple_print>:
    3724:	cf 92       	push	r12
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	7c 01       	movw	r14, r24
    3736:	6b 01       	movw	r12, r22
    3738:	61 e1       	ldi	r22, 0x11	; 17
    373a:	72 e0       	ldi	r23, 0x02	; 2
    373c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3740:	f6 01       	movw	r30, r12
    3742:	82 81       	ldd	r24, Z+2	; 0x02
    3744:	93 81       	ldd	r25, Z+3	; 0x03
    3746:	89 2b       	or	r24, r25
    3748:	11 f1       	breq	.+68     	; 0x378e <mp_obj_tuple_print+0x6a>
    374a:	86 01       	movw	r16, r12
    374c:	0c 5f       	subi	r16, 0xFC	; 252
    374e:	1f 4f       	sbci	r17, 0xFF	; 255
    3750:	c0 e0       	ldi	r28, 0x00	; 0
    3752:	d0 e0       	ldi	r29, 0x00	; 0
    3754:	07 c0       	rjmp	.+14     	; 0x3764 <mp_obj_tuple_print+0x40>
    3756:	20 97       	sbiw	r28, 0x00	; 0
    3758:	29 f0       	breq	.+10     	; 0x3764 <mp_obj_tuple_print+0x40>
    375a:	6c e0       	ldi	r22, 0x0C	; 12
    375c:	72 e0       	ldi	r23, 0x02	; 2
    375e:	c7 01       	movw	r24, r14
    3760:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3764:	f8 01       	movw	r30, r16
    3766:	61 91       	ld	r22, Z+
    3768:	71 91       	ld	r23, Z+
    376a:	8f 01       	movw	r16, r30
    376c:	41 e0       	ldi	r20, 0x01	; 1
    376e:	c7 01       	movw	r24, r14
    3770:	14 df       	rcall	.-472    	; 0x359a <mp_obj_print_helper>
    3772:	21 96       	adiw	r28, 0x01	; 1
    3774:	f6 01       	movw	r30, r12
    3776:	82 81       	ldd	r24, Z+2	; 0x02
    3778:	93 81       	ldd	r25, Z+3	; 0x03
    377a:	c8 17       	cp	r28, r24
    377c:	d9 07       	cpc	r29, r25
    377e:	58 f3       	brcs	.-42     	; 0x3756 <mp_obj_tuple_print+0x32>
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	29 f4       	brne	.+10     	; 0x378e <mp_obj_tuple_print+0x6a>
    3784:	63 e1       	ldi	r22, 0x13	; 19
    3786:	72 e0       	ldi	r23, 0x02	; 2
    3788:	c7 01       	movw	r24, r14
    378a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    378e:	67 eb       	ldi	r22, 0xB7	; 183
    3790:	7e e0       	ldi	r23, 0x0E	; 14
    3792:	c7 01       	movw	r24, r14
    3794:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	08 95       	ret

000037aa <mp_obj_exception_print>:
    37aa:	ef 92       	push	r14
    37ac:	ff 92       	push	r15
    37ae:	0f 93       	push	r16
    37b0:	1f 93       	push	r17
    37b2:	cf 93       	push	r28
    37b4:	df 93       	push	r29
    37b6:	7c 01       	movw	r14, r24
    37b8:	8b 01       	movw	r16, r22
    37ba:	c4 2f       	mov	r28, r20
    37bc:	d4 2f       	mov	r29, r20
    37be:	df 77       	andi	r29, 0x7F	; 127
    37c0:	44 23       	and	r20, r20
    37c2:	7c f0       	brlt	.+30     	; 0x37e2 <mp_obj_exception_print+0x38>
    37c4:	8f ef       	ldi	r24, 0xFF	; 255
    37c6:	8d 0f       	add	r24, r29
    37c8:	82 30       	cpi	r24, 0x02	; 2
    37ca:	58 f4       	brcc	.+22     	; 0x37e2 <mp_obj_exception_print+0x38>
    37cc:	db 01       	movw	r26, r22
    37ce:	ed 91       	ld	r30, X+
    37d0:	fc 91       	ld	r31, X
    37d2:	84 81       	ldd	r24, Z+4	; 0x04
    37d4:	95 81       	ldd	r25, Z+5	; 0x05
    37d6:	0e 94 57 0b 	call	0x16ae	; 0x16ae <qstr_str>
    37da:	bc 01       	movw	r22, r24
    37dc:	c7 01       	movw	r24, r14
    37de:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    37e2:	d2 30       	cpi	r29, 0x02	; 2
    37e4:	29 f5       	brne	.+74     	; 0x3830 <mp_obj_exception_print+0x86>
    37e6:	6b e1       	ldi	r22, 0x1B	; 27
    37e8:	72 e0       	ldi	r23, 0x02	; 2
    37ea:	c7 01       	movw	r24, r14
    37ec:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    37f0:	d8 01       	movw	r26, r16
    37f2:	16 96       	adiw	r26, 0x06	; 6
    37f4:	ed 91       	ld	r30, X+
    37f6:	fc 91       	ld	r31, X
    37f8:	17 97       	sbiw	r26, 0x07	; 7
    37fa:	30 97       	sbiw	r30, 0x00	; 0
    37fc:	21 f0       	breq	.+8      	; 0x3806 <mp_obj_exception_print+0x5c>
    37fe:	82 81       	ldd	r24, Z+2	; 0x02
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	00 97       	sbiw	r24, 0x00	; 0
    3804:	31 f4       	brne	.+12     	; 0x3812 <mp_obj_exception_print+0x68>
    3806:	6d e4       	ldi	r22, 0x4D	; 77
    3808:	7f e0       	ldi	r23, 0x0F	; 15
    380a:	c7 01       	movw	r24, r14
    380c:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3810:	12 c0       	rjmp	.+36     	; 0x3836 <mp_obj_exception_print+0x8c>
    3812:	01 97       	sbiw	r24, 0x01	; 1
    3814:	31 f4       	brne	.+12     	; 0x3822 <mp_obj_exception_print+0x78>
    3816:	64 81       	ldd	r22, Z+4	; 0x04
    3818:	75 81       	ldd	r23, Z+5	; 0x05
    381a:	40 e0       	ldi	r20, 0x00	; 0
    381c:	c7 01       	movw	r24, r14
    381e:	bd de       	rcall	.-646    	; 0x359a <mp_obj_print_helper>
    3820:	0a c0       	rjmp	.+20     	; 0x3836 <mp_obj_exception_print+0x8c>
    3822:	f8 01       	movw	r30, r16
    3824:	66 81       	ldd	r22, Z+6	; 0x06
    3826:	77 81       	ldd	r23, Z+7	; 0x07
    3828:	4c 2f       	mov	r20, r28
    382a:	c7 01       	movw	r24, r14
    382c:	7b df       	rcall	.-266    	; 0x3724 <mp_obj_tuple_print>
    382e:	03 c0       	rjmp	.+6      	; 0x3836 <mp_obj_exception_print+0x8c>
    3830:	dd 23       	and	r29, r29
    3832:	f1 f2       	breq	.-68     	; 0x37f0 <mp_obj_exception_print+0x46>
    3834:	f6 cf       	rjmp	.-20     	; 0x3822 <mp_obj_exception_print+0x78>
    3836:	df 91       	pop	r29
    3838:	cf 91       	pop	r28
    383a:	1f 91       	pop	r17
    383c:	0f 91       	pop	r16
    383e:	ff 90       	pop	r15
    3840:	ef 90       	pop	r14
    3842:	08 95       	ret

00003844 <super_print>:
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	ec 01       	movw	r28, r24
    384e:	8b 01       	movw	r16, r22
    3850:	65 e1       	ldi	r22, 0x15	; 21
    3852:	72 e0       	ldi	r23, 0x02	; 2
    3854:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3858:	f8 01       	movw	r30, r16
    385a:	62 81       	ldd	r22, Z+2	; 0x02
    385c:	73 81       	ldd	r23, Z+3	; 0x03
    385e:	40 e0       	ldi	r20, 0x00	; 0
    3860:	ce 01       	movw	r24, r28
    3862:	9b de       	rcall	.-714    	; 0x359a <mp_obj_print_helper>
    3864:	6c e0       	ldi	r22, 0x0C	; 12
    3866:	72 e0       	ldi	r23, 0x02	; 2
    3868:	ce 01       	movw	r24, r28
    386a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    386e:	f8 01       	movw	r30, r16
    3870:	64 81       	ldd	r22, Z+4	; 0x04
    3872:	75 81       	ldd	r23, Z+5	; 0x05
    3874:	40 e0       	ldi	r20, 0x00	; 0
    3876:	ce 01       	movw	r24, r28
    3878:	90 de       	rcall	.-736    	; 0x359a <mp_obj_print_helper>
    387a:	6d ef       	ldi	r22, 0xFD	; 253
    387c:	71 e0       	ldi	r23, 0x01	; 1
    387e:	ce 01       	movw	r24, r28
    3880:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3884:	df 91       	pop	r29
    3886:	cf 91       	pop	r28
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	08 95       	ret

0000388e <mp_builtin___repl_print__>:
    388e:	86 30       	cpi	r24, 0x06	; 6
    3890:	91 05       	cpc	r25, r1
    3892:	59 f0       	breq	.+22     	; 0x38aa <mp_builtin___repl_print__+0x1c>
    3894:	bc 01       	movw	r22, r24
    3896:	41 e0       	ldi	r20, 0x01	; 1
    3898:	8b e1       	ldi	r24, 0x1B	; 27
    389a:	9a e2       	ldi	r25, 0x2A	; 42
    389c:	7e de       	rcall	.-772    	; 0x359a <mp_obj_print_helper>
    389e:	6c e4       	ldi	r22, 0x4C	; 76
    38a0:	7f e0       	ldi	r23, 0x0F	; 15
    38a2:	8b e1       	ldi	r24, 0x1B	; 27
    38a4:	9a e2       	ldi	r25, 0x2A	; 42
    38a6:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    38aa:	86 e0       	ldi	r24, 0x06	; 6
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	08 95       	ret

000038b0 <mp_obj_get_int_maybe>:
    38b0:	8e 30       	cpi	r24, 0x0E	; 14
    38b2:	91 05       	cpc	r25, r1
    38b4:	29 f4       	brne	.+10     	; 0x38c0 <mp_obj_get_int_maybe+0x10>
    38b6:	fb 01       	movw	r30, r22
    38b8:	11 82       	std	Z+1, r1	; 0x01
    38ba:	10 82       	st	Z, r1
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	08 95       	ret
    38c0:	8e 31       	cpi	r24, 0x1E	; 30
    38c2:	91 05       	cpc	r25, r1
    38c4:	31 f4       	brne	.+12     	; 0x38d2 <mp_obj_get_int_maybe+0x22>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	fb 01       	movw	r30, r22
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	08 95       	ret
    38d2:	80 ff       	sbrs	r24, 0
    38d4:	07 c0       	rjmp	.+14     	; 0x38e4 <mp_obj_get_int_maybe+0x34>
    38d6:	95 95       	asr	r25
    38d8:	87 95       	ror	r24
    38da:	fb 01       	movw	r30, r22
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	08 95       	ret
    38e4:	9c 01       	movw	r18, r24
    38e6:	23 70       	andi	r18, 0x03	; 3
    38e8:	33 27       	eor	r19, r19
    38ea:	23 2b       	or	r18, r19
    38ec:	69 f4       	brne	.+26     	; 0x3908 <mp_obj_get_int_maybe+0x58>
    38ee:	fc 01       	movw	r30, r24
    38f0:	20 81       	ld	r18, Z
    38f2:	31 81       	ldd	r19, Z+1	; 0x01
    38f4:	28 5b       	subi	r18, 0xB8	; 184
    38f6:	3d 41       	sbci	r19, 0x1D	; 29
    38f8:	49 f4       	brne	.+18     	; 0x390c <mp_obj_get_int_maybe+0x5c>
    38fa:	95 95       	asr	r25
    38fc:	87 95       	ror	r24
    38fe:	fb 01       	movw	r30, r22
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	80 83       	st	Z, r24
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	08 95       	ret
    3908:	80 e0       	ldi	r24, 0x00	; 0
    390a:	08 95       	ret
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	08 95       	ret

00003910 <mp_obj_len_maybe>:
    3910:	cf 93       	push	r28
    3912:	df 93       	push	r29
    3914:	ec 01       	movw	r28, r24
    3916:	87 70       	andi	r24, 0x07	; 7
    3918:	99 27       	eor	r25, r25
    391a:	02 97       	sbiw	r24, 0x02	; 2
    391c:	79 f0       	breq	.+30     	; 0x393c <mp_obj_len_maybe+0x2c>
    391e:	ce 01       	movw	r24, r28
    3920:	83 70       	andi	r24, 0x03	; 3
    3922:	99 27       	eor	r25, r25
    3924:	89 2b       	or	r24, r25
    3926:	d1 f4       	brne	.+52     	; 0x395c <mp_obj_len_maybe+0x4c>
    3928:	88 81       	ld	r24, Y
    392a:	99 81       	ldd	r25, Y+1	; 0x01
    392c:	2b e1       	ldi	r18, 0x1B	; 27
    392e:	82 31       	cpi	r24, 0x12	; 18
    3930:	92 07       	cpc	r25, r18
    3932:	71 f0       	breq	.+28     	; 0x3950 <mp_obj_len_maybe+0x40>
    3934:	82 5f       	subi	r24, 0xF2	; 242
    3936:	9a 41       	sbci	r25, 0x1A	; 26
    3938:	89 f4       	brne	.+34     	; 0x395c <mp_obj_len_maybe+0x4c>
    393a:	0a c0       	rjmp	.+20     	; 0x3950 <mp_obj_len_maybe+0x40>
    393c:	ce 01       	movw	r24, r28
    393e:	96 95       	lsr	r25
    3940:	87 95       	ror	r24
    3942:	96 95       	lsr	r25
    3944:	87 95       	ror	r24
    3946:	96 95       	lsr	r25
    3948:	87 95       	ror	r24
    394a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <qstr_len>
    394e:	02 c0       	rjmp	.+4      	; 0x3954 <mp_obj_len_maybe+0x44>
    3950:	8c 81       	ldd	r24, Y+4	; 0x04
    3952:	9d 81       	ldd	r25, Y+5	; 0x05
    3954:	88 0f       	add	r24, r24
    3956:	99 1f       	adc	r25, r25
    3958:	81 60       	ori	r24, 0x01	; 1
    395a:	0f c0       	rjmp	.+30     	; 0x397a <mp_obj_len_maybe+0x6a>
    395c:	ce 01       	movw	r24, r28
    395e:	70 dd       	rcall	.-1312   	; 0x3440 <mp_obj_get_type>
    3960:	dc 01       	movw	r26, r24
    3962:	1c 96       	adiw	r26, 0x0c	; 12
    3964:	ed 91       	ld	r30, X+
    3966:	fc 91       	ld	r31, X
    3968:	1d 97       	sbiw	r26, 0x0d	; 13
    396a:	30 97       	sbiw	r30, 0x00	; 0
    396c:	21 f0       	breq	.+8      	; 0x3976 <mp_obj_len_maybe+0x66>
    396e:	be 01       	movw	r22, r28
    3970:	85 e0       	ldi	r24, 0x05	; 5
    3972:	09 95       	icall
    3974:	02 c0       	rjmp	.+4      	; 0x397a <mp_obj_len_maybe+0x6a>
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	df 91       	pop	r29
    397c:	cf 91       	pop	r28
    397e:	08 95       	ret

00003980 <mp_obj_is_true>:
    3980:	cf 93       	push	r28
    3982:	df 93       	push	r29
    3984:	8e 30       	cpi	r24, 0x0E	; 14
    3986:	91 05       	cpc	r25, r1
    3988:	49 f1       	breq	.+82     	; 0x39dc <mp_obj_is_true+0x5c>
    398a:	8e 31       	cpi	r24, 0x1E	; 30
    398c:	91 05       	cpc	r25, r1
    398e:	41 f1       	breq	.+80     	; 0x39e0 <mp_obj_is_true+0x60>
    3990:	86 30       	cpi	r24, 0x06	; 6
    3992:	91 05       	cpc	r25, r1
    3994:	39 f1       	breq	.+78     	; 0x39e4 <mp_obj_is_true+0x64>
    3996:	80 ff       	sbrs	r24, 0
    3998:	05 c0       	rjmp	.+10     	; 0x39a4 <mp_obj_is_true+0x24>
    399a:	21 e0       	ldi	r18, 0x01	; 1
    399c:	01 97       	sbiw	r24, 0x01	; 1
    399e:	29 f5       	brne	.+74     	; 0x39ea <mp_obj_is_true+0x6a>
    39a0:	20 e0       	ldi	r18, 0x00	; 0
    39a2:	23 c0       	rjmp	.+70     	; 0x39ea <mp_obj_is_true+0x6a>
    39a4:	ec 01       	movw	r28, r24
    39a6:	4c dd       	rcall	.-1384   	; 0x3440 <mp_obj_get_type>
    39a8:	dc 01       	movw	r26, r24
    39aa:	1c 96       	adiw	r26, 0x0c	; 12
    39ac:	ed 91       	ld	r30, X+
    39ae:	fc 91       	ld	r31, X
    39b0:	1d 97       	sbiw	r26, 0x0d	; 13
    39b2:	30 97       	sbiw	r30, 0x00	; 0
    39b4:	51 f0       	breq	.+20     	; 0x39ca <mp_obj_is_true+0x4a>
    39b6:	be 01       	movw	r22, r28
    39b8:	84 e0       	ldi	r24, 0x04	; 4
    39ba:	09 95       	icall
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	29 f0       	breq	.+10     	; 0x39ca <mp_obj_is_true+0x4a>
    39c0:	21 e0       	ldi	r18, 0x01	; 1
    39c2:	4e 97       	sbiw	r24, 0x1e	; 30
    39c4:	91 f0       	breq	.+36     	; 0x39ea <mp_obj_is_true+0x6a>
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	10 c0       	rjmp	.+32     	; 0x39ea <mp_obj_is_true+0x6a>
    39ca:	ce 01       	movw	r24, r28
    39cc:	a1 df       	rcall	.-190    	; 0x3910 <mp_obj_len_maybe>
    39ce:	00 97       	sbiw	r24, 0x00	; 0
    39d0:	59 f0       	breq	.+22     	; 0x39e8 <mp_obj_is_true+0x68>
    39d2:	21 e0       	ldi	r18, 0x01	; 1
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	49 f4       	brne	.+18     	; 0x39ea <mp_obj_is_true+0x6a>
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	07 c0       	rjmp	.+14     	; 0x39ea <mp_obj_is_true+0x6a>
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	05 c0       	rjmp	.+10     	; 0x39ea <mp_obj_is_true+0x6a>
    39e0:	21 e0       	ldi	r18, 0x01	; 1
    39e2:	03 c0       	rjmp	.+6      	; 0x39ea <mp_obj_is_true+0x6a>
    39e4:	20 e0       	ldi	r18, 0x00	; 0
    39e6:	01 c0       	rjmp	.+2      	; 0x39ea <mp_obj_is_true+0x6a>
    39e8:	21 e0       	ldi	r18, 0x01	; 1
    39ea:	82 2f       	mov	r24, r18
    39ec:	df 91       	pop	r29
    39ee:	cf 91       	pop	r28
    39f0:	08 95       	ret

000039f2 <mp_get_buffer>:
    39f2:	ef 92       	push	r14
    39f4:	ff 92       	push	r15
    39f6:	0f 93       	push	r16
    39f8:	1f 93       	push	r17
    39fa:	cf 93       	push	r28
    39fc:	df 93       	push	r29
    39fe:	ec 01       	movw	r28, r24
    3a00:	8b 01       	movw	r16, r22
    3a02:	7a 01       	movw	r14, r20
    3a04:	1d dd       	rcall	.-1478   	; 0x3440 <mp_obj_get_type>
    3a06:	dc 01       	movw	r26, r24
    3a08:	58 96       	adiw	r26, 0x18	; 24
    3a0a:	ed 91       	ld	r30, X+
    3a0c:	fc 91       	ld	r31, X
    3a0e:	59 97       	sbiw	r26, 0x19	; 25
    3a10:	30 97       	sbiw	r30, 0x00	; 0
    3a12:	49 f0       	breq	.+18     	; 0x3a26 <mp_get_buffer+0x34>
    3a14:	a7 01       	movw	r20, r14
    3a16:	b8 01       	movw	r22, r16
    3a18:	ce 01       	movw	r24, r28
    3a1a:	09 95       	icall
    3a1c:	21 e0       	ldi	r18, 0x01	; 1
    3a1e:	89 2b       	or	r24, r25
    3a20:	19 f0       	breq	.+6      	; 0x3a28 <mp_get_buffer+0x36>
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	01 c0       	rjmp	.+2      	; 0x3a28 <mp_get_buffer+0x36>
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	82 2f       	mov	r24, r18
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	08 95       	ret

00003a38 <mp_obj_code_get_name>:
    3a38:	fc 01       	movw	r30, r24
    3a3a:	01 96       	adiw	r24, 0x01	; 1
    3a3c:	20 81       	ld	r18, Z
    3a3e:	22 23       	and	r18, r18
    3a40:	dc f3       	brlt	.-10     	; 0x3a38 <mp_obj_code_get_name>
    3a42:	82 81       	ldd	r24, Z+2	; 0x02
    3a44:	90 e0       	ldi	r25, 0x00	; 0
    3a46:	98 2f       	mov	r25, r24
    3a48:	88 27       	eor	r24, r24
    3a4a:	21 81       	ldd	r18, Z+1	; 0x01
    3a4c:	82 2b       	or	r24, r18
    3a4e:	08 95       	ret

00003a50 <mp_obj_fun_get_name>:
    3a50:	dc 01       	movw	r26, r24
    3a52:	14 96       	adiw	r26, 0x04	; 4
    3a54:	ed 91       	ld	r30, X+
    3a56:	fc 91       	ld	r31, X
    3a58:	15 97       	sbiw	r26, 0x05	; 5
    3a5a:	cf 01       	movw	r24, r30
    3a5c:	01 96       	adiw	r24, 0x01	; 1
    3a5e:	20 81       	ld	r18, Z
    3a60:	22 23       	and	r18, r18
    3a62:	34 f4       	brge	.+12     	; 0x3a70 <mp_obj_fun_get_name+0x20>
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	fc 01       	movw	r30, r24
    3a68:	31 97       	sbiw	r30, 0x01	; 1
    3a6a:	20 81       	ld	r18, Z
    3a6c:	22 23       	and	r18, r18
    3a6e:	d4 f3       	brlt	.-12     	; 0x3a64 <mp_obj_fun_get_name+0x14>
    3a70:	e3 cf       	rjmp	.-58     	; 0x3a38 <mp_obj_code_get_name>
    3a72:	08 95       	ret

00003a74 <gen_instance_print>:
    3a74:	0f 93       	push	r16
    3a76:	1f 93       	push	r17
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
    3a7c:	18 2f       	mov	r17, r24
    3a7e:	09 2f       	mov	r16, r25
    3a80:	eb 01       	movw	r28, r22
    3a82:	8c 81       	ldd	r24, Y+4	; 0x04
    3a84:	9d 81       	ldd	r25, Y+5	; 0x05
    3a86:	e4 df       	rcall	.-56     	; 0x3a50 <mp_obj_fun_get_name>
    3a88:	df 93       	push	r29
    3a8a:	cf 93       	push	r28
    3a8c:	9f 93       	push	r25
    3a8e:	8f 93       	push	r24
    3a90:	8e e1       	ldi	r24, 0x1E	; 30
    3a92:	92 e0       	ldi	r25, 0x02	; 2
    3a94:	9f 93       	push	r25
    3a96:	8f 93       	push	r24
    3a98:	0f 93       	push	r16
    3a9a:	1f 93       	push	r17
    3a9c:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3aa0:	8d b7       	in	r24, 0x3d	; 61
    3aa2:	9e b7       	in	r25, 0x3e	; 62
    3aa4:	08 96       	adiw	r24, 0x08	; 8
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	9e bf       	out	0x3e, r25	; 62
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	8d bf       	out	0x3d, r24	; 61
    3ab0:	df 91       	pop	r29
    3ab2:	cf 91       	pop	r28
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <mp_int_format_size>:
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	cf 93       	push	r28
    3ac0:	df 93       	push	r29
    3ac2:	8a 01       	movw	r16, r20
    3ac4:	ab 01       	movw	r20, r22
    3ac6:	42 50       	subi	r20, 0x02	; 2
    3ac8:	51 09       	sbc	r21, r1
    3aca:	4f 30       	cpi	r20, 0x0F	; 15
    3acc:	51 05       	cpc	r21, r1
    3ace:	10 f0       	brcs	.+4      	; 0x3ad4 <mp_int_format_size+0x1a>
    3ad0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    3ad4:	fb 01       	movw	r30, r22
    3ad6:	e5 50       	subi	r30, 0x05	; 5
    3ad8:	f2 4e       	sbci	r31, 0xE2	; 226
    3ada:	60 81       	ld	r22, Z
    3adc:	70 e0       	ldi	r23, 0x00	; 0
    3ade:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    3ae2:	eb 01       	movw	r28, r22
    3ae4:	22 23       	and	r18, r18
    3ae6:	51 f0       	breq	.+20     	; 0x3afc <mp_int_format_size+0x42>
    3ae8:	9b 01       	movw	r18, r22
    3aea:	2f 5f       	subi	r18, 0xFF	; 255
    3aec:	3f 4f       	sbci	r19, 0xFF	; 255
    3aee:	ab ea       	ldi	r26, 0xAB	; 171
    3af0:	ba ea       	ldi	r27, 0xAA	; 170
    3af2:	0e 94 31 c2 	call	0x18462	; 0x18462 <__umulhisi3>
    3af6:	96 95       	lsr	r25
    3af8:	87 95       	ror	r24
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <mp_int_format_size+0x46>
    3afc:	80 e0       	ldi	r24, 0x00	; 0
    3afe:	90 e0       	ldi	r25, 0x00	; 0
    3b00:	01 15       	cp	r16, r1
    3b02:	11 05       	cpc	r17, r1
    3b04:	41 f0       	breq	.+16     	; 0x3b16 <mp_int_format_size+0x5c>
    3b06:	f8 01       	movw	r30, r16
    3b08:	01 90       	ld	r0, Z+
    3b0a:	00 20       	and	r0, r0
    3b0c:	e9 f7       	brne	.-6      	; 0x3b08 <mp_int_format_size+0x4e>
    3b0e:	31 97       	sbiw	r30, 0x01	; 1
    3b10:	e0 1b       	sub	r30, r16
    3b12:	f1 0b       	sbc	r31, r17
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <mp_int_format_size+0x60>
    3b16:	e0 e0       	ldi	r30, 0x00	; 0
    3b18:	f0 e0       	ldi	r31, 0x00	; 0
    3b1a:	23 96       	adiw	r28, 0x03	; 3
    3b1c:	8c 0f       	add	r24, r28
    3b1e:	9d 1f       	adc	r25, r29
    3b20:	8e 0f       	add	r24, r30
    3b22:	9f 1f       	adc	r25, r31
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	08 95       	ret

00003b2e <mp_str_print_quoted>:
    3b2e:	5f 92       	push	r5
    3b30:	6f 92       	push	r6
    3b32:	7f 92       	push	r7
    3b34:	8f 92       	push	r8
    3b36:	9f 92       	push	r9
    3b38:	af 92       	push	r10
    3b3a:	bf 92       	push	r11
    3b3c:	cf 92       	push	r12
    3b3e:	df 92       	push	r13
    3b40:	ef 92       	push	r14
    3b42:	ff 92       	push	r15
    3b44:	0f 93       	push	r16
    3b46:	1f 93       	push	r17
    3b48:	cf 93       	push	r28
    3b4a:	df 93       	push	r29
    3b4c:	78 2e       	mov	r7, r24
    3b4e:	69 2e       	mov	r6, r25
    3b50:	4b 01       	movw	r8, r22
    3b52:	52 2e       	mov	r5, r18
    3b54:	8b 01       	movw	r16, r22
    3b56:	04 0f       	add	r16, r20
    3b58:	15 1f       	adc	r17, r21
    3b5a:	60 17       	cp	r22, r16
    3b5c:	71 07       	cpc	r23, r17
    3b5e:	08 f0       	brcs	.+2      	; 0x3b62 <mp_str_print_quoted+0x34>
    3b60:	8e c0       	rjmp	.+284    	; 0x3c7e <mp_str_print_quoted+0x150>
    3b62:	fb 01       	movw	r30, r22
    3b64:	98 01       	movw	r18, r16
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	41 e0       	ldi	r20, 0x01	; 1
    3b6a:	81 91       	ld	r24, Z+
    3b6c:	87 32       	cpi	r24, 0x27	; 39
    3b6e:	19 f0       	breq	.+6      	; 0x3b76 <mp_str_print_quoted+0x48>
    3b70:	82 32       	cpi	r24, 0x22	; 34
    3b72:	11 f4       	brne	.+4      	; 0x3b78 <mp_str_print_quoted+0x4a>
    3b74:	06 c0       	rjmp	.+12     	; 0x3b82 <mp_str_print_quoted+0x54>
    3b76:	94 2f       	mov	r25, r20
    3b78:	e2 17       	cp	r30, r18
    3b7a:	f3 07       	cpc	r31, r19
    3b7c:	b1 f7       	brne	.-20     	; 0x3b6a <mp_str_print_quoted+0x3c>
    3b7e:	80 e0       	ldi	r24, 0x00	; 0
    3b80:	01 c0       	rjmp	.+2      	; 0x3b84 <mp_str_print_quoted+0x56>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	99 23       	and	r25, r25
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <mp_str_print_quoted+0x5c>
    3b88:	8e c0       	rjmp	.+284    	; 0x3ca6 <mp_str_print_quoted+0x178>
    3b8a:	81 11       	cpse	r24, r1
    3b8c:	8f c0       	rjmp	.+286    	; 0x3cac <mp_str_print_quoted+0x17e>
    3b8e:	c2 e2       	ldi	r28, 0x22	; 34
    3b90:	d0 e0       	ldi	r29, 0x00	; 0
    3b92:	8e c0       	rjmp	.+284    	; 0x3cb0 <mp_str_print_quoted+0x182>
    3b94:	f4 01       	movw	r30, r8
    3b96:	81 91       	ld	r24, Z+
    3b98:	4f 01       	movw	r8, r30
    3b9a:	28 2f       	mov	r18, r24
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	c2 17       	cp	r28, r18
    3ba0:	d3 07       	cpc	r29, r19
    3ba2:	79 f4       	brne	.+30     	; 0x3bc2 <mp_str_print_quoted+0x94>
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	bf 92       	push	r11
    3baa:	af 92       	push	r10
    3bac:	6f 92       	push	r6
    3bae:	7f 92       	push	r7
    3bb0:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	0f 90       	pop	r0
    3bc0:	49 c0       	rjmp	.+146    	; 0x3c54 <mp_str_print_quoted+0x126>
    3bc2:	8c 35       	cpi	r24, 0x5C	; 92
    3bc4:	39 f4       	brne	.+14     	; 0x3bd4 <mp_str_print_quoted+0xa6>
    3bc6:	60 e4       	ldi	r22, 0x40	; 64
    3bc8:	72 e0       	ldi	r23, 0x02	; 2
    3bca:	87 2d       	mov	r24, r7
    3bcc:	96 2d       	mov	r25, r6
    3bce:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3bd2:	40 c0       	rjmp	.+128    	; 0x3c54 <mp_str_print_quoted+0x126>
    3bd4:	80 32       	cpi	r24, 0x20	; 32
    3bd6:	a8 f0       	brcs	.+42     	; 0x3c02 <mp_str_print_quoted+0xd4>
    3bd8:	8f 37       	cpi	r24, 0x7F	; 127
    3bda:	71 f1       	breq	.+92     	; 0x3c38 <mp_str_print_quoted+0x10a>
    3bdc:	55 20       	and	r5, r5
    3bde:	11 f0       	breq	.+4      	; 0x3be4 <mp_str_print_quoted+0xb6>
    3be0:	88 23       	and	r24, r24
    3be2:	7c f0       	brlt	.+30     	; 0x3c02 <mp_str_print_quoted+0xd4>
    3be4:	1f 92       	push	r1
    3be6:	8f 93       	push	r24
    3be8:	df 92       	push	r13
    3bea:	cf 92       	push	r12
    3bec:	6f 92       	push	r6
    3bee:	7f 92       	push	r7
    3bf0:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	0f 90       	pop	r0
    3bfc:	0f 90       	pop	r0
    3bfe:	0f 90       	pop	r0
    3c00:	29 c0       	rjmp	.+82     	; 0x3c54 <mp_str_print_quoted+0x126>
    3c02:	8a 30       	cpi	r24, 0x0A	; 10
    3c04:	39 f4       	brne	.+14     	; 0x3c14 <mp_str_print_quoted+0xe6>
    3c06:	63 e4       	ldi	r22, 0x43	; 67
    3c08:	72 e0       	ldi	r23, 0x02	; 2
    3c0a:	87 2d       	mov	r24, r7
    3c0c:	96 2d       	mov	r25, r6
    3c0e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3c12:	20 c0       	rjmp	.+64     	; 0x3c54 <mp_str_print_quoted+0x126>
    3c14:	8d 30       	cpi	r24, 0x0D	; 13
    3c16:	39 f4       	brne	.+14     	; 0x3c26 <mp_str_print_quoted+0xf8>
    3c18:	66 e4       	ldi	r22, 0x46	; 70
    3c1a:	72 e0       	ldi	r23, 0x02	; 2
    3c1c:	87 2d       	mov	r24, r7
    3c1e:	96 2d       	mov	r25, r6
    3c20:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3c24:	17 c0       	rjmp	.+46     	; 0x3c54 <mp_str_print_quoted+0x126>
    3c26:	89 30       	cpi	r24, 0x09	; 9
    3c28:	39 f4       	brne	.+14     	; 0x3c38 <mp_str_print_quoted+0x10a>
    3c2a:	69 e4       	ldi	r22, 0x49	; 73
    3c2c:	72 e0       	ldi	r23, 0x02	; 2
    3c2e:	87 2d       	mov	r24, r7
    3c30:	96 2d       	mov	r25, r6
    3c32:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    3c36:	0e c0       	rjmp	.+28     	; 0x3c54 <mp_str_print_quoted+0x126>
    3c38:	1f 92       	push	r1
    3c3a:	8f 93       	push	r24
    3c3c:	ff 92       	push	r15
    3c3e:	ef 92       	push	r14
    3c40:	6f 92       	push	r6
    3c42:	7f 92       	push	r7
    3c44:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3c48:	0f 90       	pop	r0
    3c4a:	0f 90       	pop	r0
    3c4c:	0f 90       	pop	r0
    3c4e:	0f 90       	pop	r0
    3c50:	0f 90       	pop	r0
    3c52:	0f 90       	pop	r0
    3c54:	08 15       	cp	r16, r8
    3c56:	19 05       	cpc	r17, r9
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <mp_str_print_quoted+0x12e>
    3c5a:	9c cf       	rjmp	.-200    	; 0x3b94 <mp_str_print_quoted+0x66>
    3c5c:	df 93       	push	r29
    3c5e:	cf 93       	push	r28
    3c60:	8d e3       	ldi	r24, 0x3D	; 61
    3c62:	92 e0       	ldi	r25, 0x02	; 2
    3c64:	9f 93       	push	r25
    3c66:	8f 93       	push	r24
    3c68:	6f 92       	push	r6
    3c6a:	7f 92       	push	r7
    3c6c:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	3c c0       	rjmp	.+120    	; 0x3cf6 <mp_str_print_quoted+0x1c8>
    3c7e:	1f 92       	push	r1
    3c80:	87 e2       	ldi	r24, 0x27	; 39
    3c82:	8f 93       	push	r24
    3c84:	8d e3       	ldi	r24, 0x3D	; 61
    3c86:	92 e0       	ldi	r25, 0x02	; 2
    3c88:	9f 93       	push	r25
    3c8a:	8f 93       	push	r24
    3c8c:	6f 92       	push	r6
    3c8e:	7f 92       	push	r7
    3c90:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3c94:	0f 90       	pop	r0
    3c96:	0f 90       	pop	r0
    3c98:	0f 90       	pop	r0
    3c9a:	0f 90       	pop	r0
    3c9c:	0f 90       	pop	r0
    3c9e:	0f 90       	pop	r0
    3ca0:	c7 e2       	ldi	r28, 0x27	; 39
    3ca2:	d0 e0       	ldi	r29, 0x00	; 0
    3ca4:	db cf       	rjmp	.-74     	; 0x3c5c <mp_str_print_quoted+0x12e>
    3ca6:	c7 e2       	ldi	r28, 0x27	; 39
    3ca8:	d0 e0       	ldi	r29, 0x00	; 0
    3caa:	02 c0       	rjmp	.+4      	; 0x3cb0 <mp_str_print_quoted+0x182>
    3cac:	c7 e2       	ldi	r28, 0x27	; 39
    3cae:	d0 e0       	ldi	r29, 0x00	; 0
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	8d e3       	ldi	r24, 0x3D	; 61
    3cb6:	92 e0       	ldi	r25, 0x02	; 2
    3cb8:	9f 93       	push	r25
    3cba:	8f 93       	push	r24
    3cbc:	6f 92       	push	r6
    3cbe:	7f 92       	push	r7
    3cc0:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    3cc4:	0f 90       	pop	r0
    3cc6:	0f 90       	pop	r0
    3cc8:	0f 90       	pop	r0
    3cca:	0f 90       	pop	r0
    3ccc:	0f 90       	pop	r0
    3cce:	0f 90       	pop	r0
    3cd0:	0f 2e       	mov	r0, r31
    3cd2:	fc e4       	ldi	r31, 0x4C	; 76
    3cd4:	ef 2e       	mov	r14, r31
    3cd6:	f2 e0       	ldi	r31, 0x02	; 2
    3cd8:	ff 2e       	mov	r15, r31
    3cda:	f0 2d       	mov	r31, r0
    3cdc:	0f 2e       	mov	r0, r31
    3cde:	fd e3       	ldi	r31, 0x3D	; 61
    3ce0:	cf 2e       	mov	r12, r31
    3ce2:	f2 e0       	ldi	r31, 0x02	; 2
    3ce4:	df 2e       	mov	r13, r31
    3ce6:	f0 2d       	mov	r31, r0
    3ce8:	0f 2e       	mov	r0, r31
    3cea:	fc e3       	ldi	r31, 0x3C	; 60
    3cec:	af 2e       	mov	r10, r31
    3cee:	f2 e0       	ldi	r31, 0x02	; 2
    3cf0:	bf 2e       	mov	r11, r31
    3cf2:	f0 2d       	mov	r31, r0
    3cf4:	4f cf       	rjmp	.-354    	; 0x3b94 <mp_str_print_quoted+0x66>
    3cf6:	df 91       	pop	r29
    3cf8:	cf 91       	pop	r28
    3cfa:	1f 91       	pop	r17
    3cfc:	0f 91       	pop	r16
    3cfe:	ff 90       	pop	r15
    3d00:	ef 90       	pop	r14
    3d02:	df 90       	pop	r13
    3d04:	cf 90       	pop	r12
    3d06:	bf 90       	pop	r11
    3d08:	af 90       	pop	r10
    3d0a:	9f 90       	pop	r9
    3d0c:	8f 90       	pop	r8
    3d0e:	7f 90       	pop	r7
    3d10:	6f 90       	pop	r6
    3d12:	5f 90       	pop	r5
    3d14:	08 95       	ret

00003d16 <str_print>:
    3d16:	af 92       	push	r10
    3d18:	bf 92       	push	r11
    3d1a:	cf 92       	push	r12
    3d1c:	df 92       	push	r13
    3d1e:	ef 92       	push	r14
    3d20:	ff 92       	push	r15
    3d22:	0f 93       	push	r16
    3d24:	1f 93       	push	r17
    3d26:	cf 93       	push	r28
    3d28:	df 93       	push	r29
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <str_print+0x16>
    3d2c:	cd b7       	in	r28, 0x3d	; 61
    3d2e:	de b7       	in	r29, 0x3e	; 62
    3d30:	6c 01       	movw	r12, r24
    3d32:	7b 01       	movw	r14, r22
    3d34:	04 2f       	mov	r16, r20
    3d36:	cb 01       	movw	r24, r22
    3d38:	87 70       	andi	r24, 0x07	; 7
    3d3a:	99 27       	eor	r25, r25
    3d3c:	02 97       	sbiw	r24, 0x02	; 2
    3d3e:	71 f4       	brne	.+28     	; 0x3d5c <str_print+0x46>
    3d40:	be 01       	movw	r22, r28
    3d42:	6f 5f       	subi	r22, 0xFF	; 255
    3d44:	7f 4f       	sbci	r23, 0xFF	; 255
    3d46:	c7 01       	movw	r24, r14
    3d48:	96 95       	lsr	r25
    3d4a:	87 95       	ror	r24
    3d4c:	96 95       	lsr	r25
    3d4e:	87 95       	ror	r24
    3d50:	96 95       	lsr	r25
    3d52:	87 95       	ror	r24
    3d54:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    3d58:	5c 01       	movw	r10, r24
    3d5a:	0b c0       	rjmp	.+22     	; 0x3d72 <str_print+0x5c>
    3d5c:	db 01       	movw	r26, r22
    3d5e:	14 96       	adiw	r26, 0x04	; 4
    3d60:	8d 91       	ld	r24, X+
    3d62:	9c 91       	ld	r25, X
    3d64:	15 97       	sbiw	r26, 0x05	; 5
    3d66:	9a 83       	std	Y+2, r25	; 0x02
    3d68:	89 83       	std	Y+1, r24	; 0x01
    3d6a:	16 96       	adiw	r26, 0x06	; 6
    3d6c:	ad 90       	ld	r10, X+
    3d6e:	bc 90       	ld	r11, X
    3d70:	17 97       	sbiw	r26, 0x07	; 7
    3d72:	c7 01       	movw	r24, r14
    3d74:	83 70       	andi	r24, 0x03	; 3
    3d76:	99 27       	eor	r25, r25
    3d78:	89 2b       	or	r24, r25
    3d7a:	49 f4       	brne	.+18     	; 0x3d8e <str_print+0x78>
    3d7c:	11 e0       	ldi	r17, 0x01	; 1
    3d7e:	f7 01       	movw	r30, r14
    3d80:	80 81       	ld	r24, Z
    3d82:	91 81       	ldd	r25, Z+1	; 0x01
    3d84:	82 5f       	subi	r24, 0xF2	; 242
    3d86:	9a 41       	sbci	r25, 0x1A	; 26
    3d88:	19 f0       	breq	.+6      	; 0x3d90 <str_print+0x7a>
    3d8a:	10 e0       	ldi	r17, 0x00	; 0
    3d8c:	01 c0       	rjmp	.+2      	; 0x3d90 <str_print+0x7a>
    3d8e:	10 e0       	ldi	r17, 0x00	; 0
    3d90:	11 70       	andi	r17, 0x01	; 1
    3d92:	04 30       	cpi	r16, 0x04	; 4
    3d94:	21 f0       	breq	.+8      	; 0x3d9e <str_print+0x88>
    3d96:	01 11       	cpse	r16, r1
    3d98:	0e c0       	rjmp	.+28     	; 0x3db6 <str_print+0xa0>
    3d9a:	11 11       	cpse	r17, r1
    3d9c:	0e c0       	rjmp	.+28     	; 0x3dba <str_print+0xa4>
    3d9e:	49 81       	ldd	r20, Y+1	; 0x01
    3da0:	5a 81       	ldd	r21, Y+2	; 0x02
    3da2:	d6 01       	movw	r26, r12
    3da4:	12 96       	adiw	r26, 0x02	; 2
    3da6:	ed 91       	ld	r30, X+
    3da8:	fc 91       	ld	r31, X
    3daa:	13 97       	sbiw	r26, 0x03	; 3
    3dac:	b5 01       	movw	r22, r10
    3dae:	8d 91       	ld	r24, X+
    3db0:	9c 91       	ld	r25, X
    3db2:	09 95       	icall
    3db4:	14 c0       	rjmp	.+40     	; 0x3dde <str_print+0xc8>
    3db6:	11 23       	and	r17, r17
    3db8:	61 f0       	breq	.+24     	; 0x3dd2 <str_print+0xbc>
    3dba:	d6 01       	movw	r26, r12
    3dbc:	12 96       	adiw	r26, 0x02	; 2
    3dbe:	ed 91       	ld	r30, X+
    3dc0:	fc 91       	ld	r31, X
    3dc2:	13 97       	sbiw	r26, 0x03	; 3
    3dc4:	41 e0       	ldi	r20, 0x01	; 1
    3dc6:	50 e0       	ldi	r21, 0x00	; 0
    3dc8:	63 e5       	ldi	r22, 0x53	; 83
    3dca:	72 e0       	ldi	r23, 0x02	; 2
    3dcc:	8d 91       	ld	r24, X+
    3dce:	9c 91       	ld	r25, X
    3dd0:	09 95       	icall
    3dd2:	49 81       	ldd	r20, Y+1	; 0x01
    3dd4:	5a 81       	ldd	r21, Y+2	; 0x02
    3dd6:	21 2f       	mov	r18, r17
    3dd8:	b5 01       	movw	r22, r10
    3dda:	c6 01       	movw	r24, r12
    3ddc:	a8 de       	rcall	.-688    	; 0x3b2e <mp_str_print_quoted>
    3dde:	0f 90       	pop	r0
    3de0:	0f 90       	pop	r0
    3de2:	df 91       	pop	r29
    3de4:	cf 91       	pop	r28
    3de6:	1f 91       	pop	r17
    3de8:	0f 91       	pop	r16
    3dea:	ff 90       	pop	r15
    3dec:	ef 90       	pop	r14
    3dee:	df 90       	pop	r13
    3df0:	cf 90       	pop	r12
    3df2:	bf 90       	pop	r11
    3df4:	af 90       	pop	r10
    3df6:	08 95       	ret

00003df8 <find_subbytes>:
    3df8:	6f 92       	push	r6
    3dfa:	7f 92       	push	r7
    3dfc:	8f 92       	push	r8
    3dfe:	9f 92       	push	r9
    3e00:	af 92       	push	r10
    3e02:	bf 92       	push	r11
    3e04:	cf 92       	push	r12
    3e06:	df 92       	push	r13
    3e08:	ef 92       	push	r14
    3e0a:	ff 92       	push	r15
    3e0c:	0f 93       	push	r16
    3e0e:	1f 93       	push	r17
    3e10:	cf 93       	push	r28
    3e12:	df 93       	push	r29
    3e14:	62 17       	cp	r22, r18
    3e16:	73 07       	cpc	r23, r19
    3e18:	08 f1       	brcs	.+66     	; 0x3e5c <find_subbytes+0x64>
    3e1a:	79 01       	movw	r14, r18
    3e1c:	4a 01       	movw	r8, r20
    3e1e:	6c 01       	movw	r12, r24
    3e20:	10 16       	cp	r1, r16
    3e22:	11 06       	cpc	r1, r17
    3e24:	34 f4       	brge	.+12     	; 0x3e32 <find_subbytes+0x3a>
    3e26:	5b 01       	movw	r10, r22
    3e28:	a2 1a       	sub	r10, r18
    3e2a:	b3 0a       	sbc	r11, r19
    3e2c:	61 2c       	mov	r6, r1
    3e2e:	71 2c       	mov	r7, r1
    3e30:	05 c0       	rjmp	.+10     	; 0x3e3c <find_subbytes+0x44>
    3e32:	3b 01       	movw	r6, r22
    3e34:	62 1a       	sub	r6, r18
    3e36:	73 0a       	sbc	r7, r19
    3e38:	a1 2c       	mov	r10, r1
    3e3a:	b1 2c       	mov	r11, r1
    3e3c:	e6 01       	movw	r28, r12
    3e3e:	c6 0d       	add	r28, r6
    3e40:	d7 1d       	adc	r29, r7
    3e42:	a7 01       	movw	r20, r14
    3e44:	b4 01       	movw	r22, r8
    3e46:	ce 01       	movw	r24, r28
    3e48:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    3e4c:	89 2b       	or	r24, r25
    3e4e:	49 f0       	breq	.+18     	; 0x3e62 <find_subbytes+0x6a>
    3e50:	6a 14       	cp	r6, r10
    3e52:	7b 04       	cpc	r7, r11
    3e54:	49 f0       	breq	.+18     	; 0x3e68 <find_subbytes+0x70>
    3e56:	60 0e       	add	r6, r16
    3e58:	71 1e       	adc	r7, r17
    3e5a:	f0 cf       	rjmp	.-32     	; 0x3e3c <find_subbytes+0x44>
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	90 e0       	ldi	r25, 0x00	; 0
    3e60:	05 c0       	rjmp	.+10     	; 0x3e6c <find_subbytes+0x74>
    3e62:	8c 2f       	mov	r24, r28
    3e64:	9d 2f       	mov	r25, r29
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <find_subbytes+0x74>
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	90 e0       	ldi	r25, 0x00	; 0
    3e6c:	df 91       	pop	r29
    3e6e:	cf 91       	pop	r28
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	ff 90       	pop	r15
    3e76:	ef 90       	pop	r14
    3e78:	df 90       	pop	r13
    3e7a:	cf 90       	pop	r12
    3e7c:	bf 90       	pop	r11
    3e7e:	af 90       	pop	r10
    3e80:	9f 90       	pop	r9
    3e82:	8f 90       	pop	r8
    3e84:	7f 90       	pop	r7
    3e86:	6f 90       	pop	r6
    3e88:	08 95       	ret

00003e8a <mp_obj_str_equal>:
    3e8a:	8f 92       	push	r8
    3e8c:	9f 92       	push	r9
    3e8e:	af 92       	push	r10
    3e90:	bf 92       	push	r11
    3e92:	cf 92       	push	r12
    3e94:	df 92       	push	r13
    3e96:	ef 92       	push	r14
    3e98:	ff 92       	push	r15
    3e9a:	0f 93       	push	r16
    3e9c:	1f 93       	push	r17
    3e9e:	cf 93       	push	r28
    3ea0:	df 93       	push	r29
    3ea2:	00 d0       	rcall	.+0      	; 0x3ea4 <mp_obj_str_equal+0x1a>
    3ea4:	00 d0       	rcall	.+0      	; 0x3ea6 <mp_obj_str_equal+0x1c>
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	7c 01       	movw	r14, r24
    3eac:	8b 01       	movw	r16, r22
    3eae:	6c 01       	movw	r12, r24
    3eb0:	87 e0       	ldi	r24, 0x07	; 7
    3eb2:	c8 22       	and	r12, r24
    3eb4:	dd 24       	eor	r13, r13
    3eb6:	e2 e0       	ldi	r30, 0x02	; 2
    3eb8:	ce 16       	cp	r12, r30
    3eba:	d1 04       	cpc	r13, r1
    3ebc:	d9 f4       	brne	.+54     	; 0x3ef4 <mp_obj_str_equal+0x6a>
    3ebe:	cb 01       	movw	r24, r22
    3ec0:	87 70       	andi	r24, 0x07	; 7
    3ec2:	99 27       	eor	r25, r25
    3ec4:	02 97       	sbiw	r24, 0x02	; 2
    3ec6:	39 f4       	brne	.+14     	; 0x3ed6 <mp_obj_str_equal+0x4c>
    3ec8:	21 e0       	ldi	r18, 0x01	; 1
    3eca:	e6 16       	cp	r14, r22
    3ecc:	f7 06       	cpc	r15, r23
    3ece:	09 f4       	brne	.+2      	; 0x3ed2 <mp_obj_str_equal+0x48>
    3ed0:	76 c0       	rjmp	.+236    	; 0x3fbe <mp_obj_str_equal+0x134>
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	74 c0       	rjmp	.+232    	; 0x3fbe <mp_obj_str_equal+0x134>
    3ed6:	c7 01       	movw	r24, r14
    3ed8:	96 95       	lsr	r25
    3eda:	87 95       	ror	r24
    3edc:	96 95       	lsr	r25
    3ede:	87 95       	ror	r24
    3ee0:	96 95       	lsr	r25
    3ee2:	87 95       	ror	r24
    3ee4:	0e 94 4b 0b 	call	0x1696	; 0x1696 <qstr_hash>
    3ee8:	4c 01       	movw	r8, r24
    3eea:	58 01       	movw	r10, r16
    3eec:	f7 e0       	ldi	r31, 0x07	; 7
    3eee:	af 22       	and	r10, r31
    3ef0:	bb 24       	eor	r11, r11
    3ef2:	15 c0       	rjmp	.+42     	; 0x3f1e <mp_obj_str_equal+0x94>
    3ef4:	f7 01       	movw	r30, r14
    3ef6:	82 80       	ldd	r8, Z+2	; 0x02
    3ef8:	93 80       	ldd	r9, Z+3	; 0x03
    3efa:	5b 01       	movw	r10, r22
    3efc:	f7 e0       	ldi	r31, 0x07	; 7
    3efe:	af 22       	and	r10, r31
    3f00:	bb 24       	eor	r11, r11
    3f02:	82 e0       	ldi	r24, 0x02	; 2
    3f04:	a8 16       	cp	r10, r24
    3f06:	b1 04       	cpc	r11, r1
    3f08:	51 f4       	brne	.+20     	; 0x3f1e <mp_obj_str_equal+0x94>
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	96 95       	lsr	r25
    3f0e:	87 95       	ror	r24
    3f10:	96 95       	lsr	r25
    3f12:	87 95       	ror	r24
    3f14:	96 95       	lsr	r25
    3f16:	87 95       	ror	r24
    3f18:	0e 94 4b 0b 	call	0x1696	; 0x1696 <qstr_hash>
    3f1c:	03 c0       	rjmp	.+6      	; 0x3f24 <mp_obj_str_equal+0x9a>
    3f1e:	f8 01       	movw	r30, r16
    3f20:	82 81       	ldd	r24, Z+2	; 0x02
    3f22:	93 81       	ldd	r25, Z+3	; 0x03
    3f24:	81 14       	cp	r8, r1
    3f26:	91 04       	cpc	r9, r1
    3f28:	31 f0       	breq	.+12     	; 0x3f36 <mp_obj_str_equal+0xac>
    3f2a:	00 97       	sbiw	r24, 0x00	; 0
    3f2c:	21 f0       	breq	.+8      	; 0x3f36 <mp_obj_str_equal+0xac>
    3f2e:	88 15       	cp	r24, r8
    3f30:	99 05       	cpc	r25, r9
    3f32:	09 f0       	breq	.+2      	; 0x3f36 <mp_obj_str_equal+0xac>
    3f34:	41 c0       	rjmp	.+130    	; 0x3fb8 <mp_obj_str_equal+0x12e>
    3f36:	f2 e0       	ldi	r31, 0x02	; 2
    3f38:	cf 16       	cp	r12, r31
    3f3a:	d1 04       	cpc	r13, r1
    3f3c:	71 f4       	brne	.+28     	; 0x3f5a <mp_obj_str_equal+0xd0>
    3f3e:	be 01       	movw	r22, r28
    3f40:	6d 5f       	subi	r22, 0xFD	; 253
    3f42:	7f 4f       	sbci	r23, 0xFF	; 255
    3f44:	c7 01       	movw	r24, r14
    3f46:	96 95       	lsr	r25
    3f48:	87 95       	ror	r24
    3f4a:	96 95       	lsr	r25
    3f4c:	87 95       	ror	r24
    3f4e:	96 95       	lsr	r25
    3f50:	87 95       	ror	r24
    3f52:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    3f56:	7c 01       	movw	r14, r24
    3f58:	07 c0       	rjmp	.+14     	; 0x3f68 <mp_obj_str_equal+0xde>
    3f5a:	f7 01       	movw	r30, r14
    3f5c:	84 81       	ldd	r24, Z+4	; 0x04
    3f5e:	95 81       	ldd	r25, Z+5	; 0x05
    3f60:	9c 83       	std	Y+4, r25	; 0x04
    3f62:	8b 83       	std	Y+3, r24	; 0x03
    3f64:	e6 80       	ldd	r14, Z+6	; 0x06
    3f66:	f7 80       	ldd	r15, Z+7	; 0x07
    3f68:	f2 e0       	ldi	r31, 0x02	; 2
    3f6a:	af 16       	cp	r10, r31
    3f6c:	b1 04       	cpc	r11, r1
    3f6e:	71 f4       	brne	.+28     	; 0x3f8c <mp_obj_str_equal+0x102>
    3f70:	be 01       	movw	r22, r28
    3f72:	6f 5f       	subi	r22, 0xFF	; 255
    3f74:	7f 4f       	sbci	r23, 0xFF	; 255
    3f76:	c8 01       	movw	r24, r16
    3f78:	96 95       	lsr	r25
    3f7a:	87 95       	ror	r24
    3f7c:	96 95       	lsr	r25
    3f7e:	87 95       	ror	r24
    3f80:	96 95       	lsr	r25
    3f82:	87 95       	ror	r24
    3f84:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    3f88:	bc 01       	movw	r22, r24
    3f8a:	07 c0       	rjmp	.+14     	; 0x3f9a <mp_obj_str_equal+0x110>
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	84 81       	ldd	r24, Z+4	; 0x04
    3f90:	95 81       	ldd	r25, Z+5	; 0x05
    3f92:	9a 83       	std	Y+2, r25	; 0x02
    3f94:	89 83       	std	Y+1, r24	; 0x01
    3f96:	66 81       	ldd	r22, Z+6	; 0x06
    3f98:	77 81       	ldd	r23, Z+7	; 0x07
    3f9a:	4b 81       	ldd	r20, Y+3	; 0x03
    3f9c:	5c 81       	ldd	r21, Y+4	; 0x04
    3f9e:	29 81       	ldd	r18, Y+1	; 0x01
    3fa0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fa2:	42 17       	cp	r20, r18
    3fa4:	53 07       	cpc	r21, r19
    3fa6:	51 f4       	brne	.+20     	; 0x3fbc <mp_obj_str_equal+0x132>
    3fa8:	c7 01       	movw	r24, r14
    3faa:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    3fae:	21 e0       	ldi	r18, 0x01	; 1
    3fb0:	89 2b       	or	r24, r25
    3fb2:	29 f0       	breq	.+10     	; 0x3fbe <mp_obj_str_equal+0x134>
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	03 c0       	rjmp	.+6      	; 0x3fbe <mp_obj_str_equal+0x134>
    3fb8:	20 e0       	ldi	r18, 0x00	; 0
    3fba:	01 c0       	rjmp	.+2      	; 0x3fbe <mp_obj_str_equal+0x134>
    3fbc:	20 e0       	ldi	r18, 0x00	; 0
    3fbe:	82 2f       	mov	r24, r18
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	0f 90       	pop	r0
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	ff 90       	pop	r15
    3fd2:	ef 90       	pop	r14
    3fd4:	df 90       	pop	r13
    3fd6:	cf 90       	pop	r12
    3fd8:	bf 90       	pop	r11
    3fda:	af 90       	pop	r10
    3fdc:	9f 90       	pop	r9
    3fde:	8f 90       	pop	r8
    3fe0:	08 95       	ret

00003fe2 <mp_obj_equal_not_equal>:
    3fe2:	4f 92       	push	r4
    3fe4:	5f 92       	push	r5
    3fe6:	6f 92       	push	r6
    3fe8:	7f 92       	push	r7
    3fea:	8f 92       	push	r8
    3fec:	9f 92       	push	r9
    3fee:	af 92       	push	r10
    3ff0:	bf 92       	push	r11
    3ff2:	cf 92       	push	r12
    3ff4:	df 92       	push	r13
    3ff6:	ef 92       	push	r14
    3ff8:	ff 92       	push	r15
    3ffa:	0f 93       	push	r16
    3ffc:	1f 93       	push	r17
    3ffe:	cf 93       	push	r28
    4000:	df 93       	push	r29
    4002:	78 2e       	mov	r7, r24
    4004:	eb 01       	movw	r28, r22
    4006:	8a 01       	movw	r16, r20
    4008:	25 e0       	ldi	r18, 0x05	; 5
    400a:	82 13       	cpse	r24, r18
    400c:	0b c0       	rjmp	.+22     	; 0x4024 <mp_obj_equal_not_equal+0x42>
    400e:	0f 2e       	mov	r0, r31
    4010:	fe e0       	ldi	r31, 0x0E	; 14
    4012:	5f 2e       	mov	r5, r31
    4014:	f0 2d       	mov	r31, r0
    4016:	61 2c       	mov	r6, r1
    4018:	0f 2e       	mov	r0, r31
    401a:	fe e1       	ldi	r31, 0x1E	; 30
    401c:	ef 2e       	mov	r14, r31
    401e:	f0 2d       	mov	r31, r0
    4020:	f1 2c       	mov	r15, r1
    4022:	0a c0       	rjmp	.+20     	; 0x4038 <mp_obj_equal_not_equal+0x56>
    4024:	0f 2e       	mov	r0, r31
    4026:	fe e1       	ldi	r31, 0x1E	; 30
    4028:	5f 2e       	mov	r5, r31
    402a:	f0 2d       	mov	r31, r0
    402c:	61 2c       	mov	r6, r1
    402e:	0f 2e       	mov	r0, r31
    4030:	fe e0       	ldi	r31, 0x0E	; 14
    4032:	ef 2e       	mov	r14, r31
    4034:	f0 2d       	mov	r31, r0
    4036:	f1 2c       	mov	r15, r1
    4038:	c0 17       	cp	r28, r16
    403a:	d1 07       	cpc	r29, r17
    403c:	49 f4       	brne	.+18     	; 0x4050 <mp_obj_equal_not_equal+0x6e>
    403e:	c0 fd       	sbrc	r28, 0
    4040:	96 c0       	rjmp	.+300    	; 0x416e <mp_obj_equal_not_equal+0x18c>
    4042:	ce 01       	movw	r24, r28
    4044:	fd d9       	rcall	.-3078   	; 0x3440 <mp_obj_get_type>
    4046:	dc 01       	movw	r26, r24
    4048:	12 96       	adiw	r26, 0x02	; 2
    404a:	8c 91       	ld	r24, X
    404c:	82 ff       	sbrs	r24, 2
    404e:	92 c0       	rjmp	.+292    	; 0x4174 <mp_obj_equal_not_equal+0x192>
    4050:	2c 2f       	mov	r18, r28
    4052:	ce 01       	movw	r24, r28
    4054:	87 70       	andi	r24, 0x07	; 7
    4056:	99 27       	eor	r25, r25
    4058:	02 97       	sbiw	r24, 0x02	; 2
    405a:	51 f0       	breq	.+20     	; 0x4070 <mp_obj_equal_not_equal+0x8e>
    405c:	ce 01       	movw	r24, r28
    405e:	83 70       	andi	r24, 0x03	; 3
    4060:	99 27       	eor	r25, r25
    4062:	89 2b       	or	r24, r25
    4064:	e9 f4       	brne	.+58     	; 0x40a0 <mp_obj_equal_not_equal+0xbe>
    4066:	88 81       	ld	r24, Y
    4068:	99 81       	ldd	r25, Y+1	; 0x01
    406a:	82 51       	subi	r24, 0x12	; 18
    406c:	9b 41       	sbci	r25, 0x1B	; 27
    406e:	c1 f4       	brne	.+48     	; 0x40a0 <mp_obj_equal_not_equal+0xbe>
    4070:	c8 01       	movw	r24, r16
    4072:	87 70       	andi	r24, 0x07	; 7
    4074:	99 27       	eor	r25, r25
    4076:	02 97       	sbiw	r24, 0x02	; 2
    4078:	59 f0       	breq	.+22     	; 0x4090 <mp_obj_equal_not_equal+0xae>
    407a:	c8 01       	movw	r24, r16
    407c:	83 70       	andi	r24, 0x03	; 3
    407e:	99 27       	eor	r25, r25
    4080:	89 2b       	or	r24, r25
    4082:	d9 f4       	brne	.+54     	; 0x40ba <mp_obj_equal_not_equal+0xd8>
    4084:	f8 01       	movw	r30, r16
    4086:	80 81       	ld	r24, Z
    4088:	91 81       	ldd	r25, Z+1	; 0x01
    408a:	82 51       	subi	r24, 0x12	; 18
    408c:	9b 41       	sbci	r25, 0x1B	; 27
    408e:	f1 f4       	brne	.+60     	; 0x40cc <mp_obj_equal_not_equal+0xea>
    4090:	b8 01       	movw	r22, r16
    4092:	ce 01       	movw	r24, r28
    4094:	fa de       	rcall	.-524    	; 0x3e8a <mp_obj_str_equal>
    4096:	81 11       	cpse	r24, r1
    4098:	70 c0       	rjmp	.+224    	; 0x417a <mp_obj_equal_not_equal+0x198>
    409a:	8e 2d       	mov	r24, r14
    409c:	9f 2d       	mov	r25, r15
    409e:	85 c0       	rjmp	.+266    	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    40a0:	20 ff       	sbrs	r18, 0
    40a2:	1d c0       	rjmp	.+58     	; 0x40de <mp_obj_equal_not_equal+0xfc>
    40a4:	00 fd       	sbrc	r16, 0
    40a6:	6c c0       	rjmp	.+216    	; 0x4180 <mp_obj_equal_not_equal+0x19e>
    40a8:	9c 2f       	mov	r25, r28
    40aa:	8d 2f       	mov	r24, r29
    40ac:	e8 01       	movw	r28, r16
    40ae:	09 2f       	mov	r16, r25
    40b0:	18 2f       	mov	r17, r24
    40b2:	cc 24       	eor	r12, r12
    40b4:	c3 94       	inc	r12
    40b6:	d1 2c       	mov	r13, r1
    40b8:	18 c0       	rjmp	.+48     	; 0x40ea <mp_obj_equal_not_equal+0x108>
    40ba:	9c 2f       	mov	r25, r28
    40bc:	8d 2f       	mov	r24, r29
    40be:	e8 01       	movw	r28, r16
    40c0:	09 2f       	mov	r16, r25
    40c2:	18 2f       	mov	r17, r24
    40c4:	cc 24       	eor	r12, r12
    40c6:	c3 94       	inc	r12
    40c8:	d1 2c       	mov	r13, r1
    40ca:	0f c0       	rjmp	.+30     	; 0x40ea <mp_obj_equal_not_equal+0x108>
    40cc:	9c 2f       	mov	r25, r28
    40ce:	8d 2f       	mov	r24, r29
    40d0:	e8 01       	movw	r28, r16
    40d2:	09 2f       	mov	r16, r25
    40d4:	18 2f       	mov	r17, r24
    40d6:	cc 24       	eor	r12, r12
    40d8:	c3 94       	inc	r12
    40da:	d1 2c       	mov	r13, r1
    40dc:	06 c0       	rjmp	.+12     	; 0x40ea <mp_obj_equal_not_equal+0x108>
    40de:	c1 2c       	mov	r12, r1
    40e0:	d1 2c       	mov	r13, r1
    40e2:	03 c0       	rjmp	.+6      	; 0x40ea <mp_obj_equal_not_equal+0x108>
    40e4:	8e 01       	movw	r16, r28
    40e6:	c9 2f       	mov	r28, r25
    40e8:	d8 2f       	mov	r29, r24
    40ea:	ce 01       	movw	r24, r28
    40ec:	a9 d9       	rcall	.-3246   	; 0x3440 <mp_obj_get_type>
    40ee:	5c 01       	movw	r10, r24
    40f0:	dc 01       	movw	r26, r24
    40f2:	1e 96       	adiw	r26, 0x0e	; 14
    40f4:	8d 90       	ld	r8, X+
    40f6:	9c 90       	ld	r9, X
    40f8:	1f 97       	sbiw	r26, 0x0f	; 15
    40fa:	81 14       	cp	r8, r1
    40fc:	91 04       	cpc	r9, r1
    40fe:	39 f1       	breq	.+78     	; 0x414e <mp_obj_equal_not_equal+0x16c>
    4100:	12 96       	adiw	r26, 0x02	; 2
    4102:	4c 90       	ld	r4, X
    4104:	43 fc       	sbrc	r4, 3
    4106:	05 c0       	rjmp	.+10     	; 0x4112 <mp_obj_equal_not_equal+0x130>
    4108:	c8 01       	movw	r24, r16
    410a:	9a d9       	rcall	.-3276   	; 0x3440 <mp_obj_get_type>
    410c:	a8 16       	cp	r10, r24
    410e:	b9 06       	cpc	r11, r25
    4110:	f1 f4       	brne	.+60     	; 0x414e <mp_obj_equal_not_equal+0x16c>
    4112:	b5 e0       	ldi	r27, 0x05	; 5
    4114:	7b 12       	cpse	r7, r27
    4116:	0b c0       	rjmp	.+22     	; 0x412e <mp_obj_equal_not_equal+0x14c>
    4118:	44 fe       	sbrs	r4, 4
    411a:	3b c0       	rjmp	.+118    	; 0x4192 <mp_obj_equal_not_equal+0x1b0>
    411c:	a8 01       	movw	r20, r16
    411e:	be 01       	movw	r22, r28
    4120:	85 e0       	ldi	r24, 0x05	; 5
    4122:	f4 01       	movw	r30, r8
    4124:	09 95       	icall
    4126:	00 97       	sbiw	r24, 0x00	; 0
    4128:	09 f0       	breq	.+2      	; 0x412c <mp_obj_equal_not_equal+0x14a>
    412a:	3f c0       	rjmp	.+126    	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    412c:	32 c0       	rjmp	.+100    	; 0x4192 <mp_obj_equal_not_equal+0x1b0>
    412e:	a8 01       	movw	r20, r16
    4130:	be 01       	movw	r22, r28
    4132:	82 e0       	ldi	r24, 0x02	; 2
    4134:	f4 01       	movw	r30, r8
    4136:	09 95       	icall
    4138:	00 97       	sbiw	r24, 0x00	; 0
    413a:	49 f0       	breq	.+18     	; 0x414e <mp_obj_equal_not_equal+0x16c>
    413c:	f2 e0       	ldi	r31, 0x02	; 2
    413e:	7f 16       	cp	r7, r31
    4140:	a1 f1       	breq	.+104    	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    4142:	1e dc       	rcall	.-1988   	; 0x3980 <mp_obj_is_true>
    4144:	81 11       	cpse	r24, r1
    4146:	1f c0       	rjmp	.+62     	; 0x4186 <mp_obj_equal_not_equal+0x1a4>
    4148:	8e 2d       	mov	r24, r14
    414a:	9f 2d       	mov	r25, r15
    414c:	2e c0       	rjmp	.+92     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    414e:	2f ef       	ldi	r18, 0xFF	; 255
    4150:	c2 1a       	sub	r12, r18
    4152:	d2 0a       	sbc	r13, r18
    4154:	90 2f       	mov	r25, r16
    4156:	81 2f       	mov	r24, r17
    4158:	32 e0       	ldi	r19, 0x02	; 2
    415a:	c3 16       	cp	r12, r19
    415c:	d1 04       	cpc	r13, r1
    415e:	0c f4       	brge	.+2      	; 0x4162 <mp_obj_equal_not_equal+0x180>
    4160:	c1 cf       	rjmp	.-126    	; 0x40e4 <mp_obj_equal_not_equal+0x102>
    4162:	c0 17       	cp	r28, r16
    4164:	d1 07       	cpc	r29, r17
    4166:	91 f0       	breq	.+36     	; 0x418c <mp_obj_equal_not_equal+0x1aa>
    4168:	8e 2d       	mov	r24, r14
    416a:	9f 2d       	mov	r25, r15
    416c:	1e c0       	rjmp	.+60     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    416e:	85 2d       	mov	r24, r5
    4170:	96 2d       	mov	r25, r6
    4172:	1b c0       	rjmp	.+54     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    4174:	85 2d       	mov	r24, r5
    4176:	96 2d       	mov	r25, r6
    4178:	18 c0       	rjmp	.+48     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    417a:	85 2d       	mov	r24, r5
    417c:	96 2d       	mov	r25, r6
    417e:	15 c0       	rjmp	.+42     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    4180:	8e 2d       	mov	r24, r14
    4182:	9f 2d       	mov	r25, r15
    4184:	12 c0       	rjmp	.+36     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    4186:	85 2d       	mov	r24, r5
    4188:	96 2d       	mov	r25, r6
    418a:	0f c0       	rjmp	.+30     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    418c:	85 2d       	mov	r24, r5
    418e:	96 2d       	mov	r25, r6
    4190:	0c c0       	rjmp	.+24     	; 0x41aa <mp_obj_equal_not_equal+0x1c8>
    4192:	d5 01       	movw	r26, r10
    4194:	1e 96       	adiw	r26, 0x0e	; 14
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	1f 97       	sbiw	r26, 0x0f	; 15
    419c:	a8 01       	movw	r20, r16
    419e:	be 01       	movw	r22, r28
    41a0:	82 e0       	ldi	r24, 0x02	; 2
    41a2:	09 95       	icall
    41a4:	00 97       	sbiw	r24, 0x00	; 0
    41a6:	69 f6       	brne	.-102    	; 0x4142 <mp_obj_equal_not_equal+0x160>
    41a8:	d2 cf       	rjmp	.-92     	; 0x414e <mp_obj_equal_not_equal+0x16c>
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	1f 91       	pop	r17
    41b0:	0f 91       	pop	r16
    41b2:	ff 90       	pop	r15
    41b4:	ef 90       	pop	r14
    41b6:	df 90       	pop	r13
    41b8:	cf 90       	pop	r12
    41ba:	bf 90       	pop	r11
    41bc:	af 90       	pop	r10
    41be:	9f 90       	pop	r9
    41c0:	8f 90       	pop	r8
    41c2:	7f 90       	pop	r7
    41c4:	6f 90       	pop	r6
    41c6:	5f 90       	pop	r5
    41c8:	4f 90       	pop	r4
    41ca:	08 95       	ret

000041cc <mp_obj_equal>:
    41cc:	ab 01       	movw	r20, r22
    41ce:	bc 01       	movw	r22, r24
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	07 df       	rcall	.-498    	; 0x3fe2 <mp_obj_equal_not_equal>
    41d4:	d5 cb       	rjmp	.-2134   	; 0x3980 <mp_obj_is_true>
    41d6:	08 95       	ret

000041d8 <mp_obj_tuple_get>:
    41d8:	ef 92       	push	r14
    41da:	ff 92       	push	r15
    41dc:	0f 93       	push	r16
    41de:	1f 93       	push	r17
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	ec 01       	movw	r28, r24
    41e6:	7b 01       	movw	r14, r22
    41e8:	8a 01       	movw	r16, r20
    41ea:	2a d9       	rcall	.-3500   	; 0x3440 <mp_obj_get_type>
    41ec:	fc 01       	movw	r30, r24
    41ee:	84 89       	ldd	r24, Z+20	; 0x14
    41f0:	95 89       	ldd	r25, Z+21	; 0x15
    41f2:	82 5b       	subi	r24, 0xB2	; 178
    41f4:	93 40       	sbci	r25, 0x03	; 3
    41f6:	11 f0       	breq	.+4      	; 0x41fc <mp_obj_tuple_get+0x24>
    41f8:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    41fc:	8a 81       	ldd	r24, Y+2	; 0x02
    41fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4200:	f7 01       	movw	r30, r14
    4202:	91 83       	std	Z+1, r25	; 0x01
    4204:	80 83       	st	Z, r24
    4206:	24 96       	adiw	r28, 0x04	; 4
    4208:	f8 01       	movw	r30, r16
    420a:	d1 83       	std	Z+1, r29	; 0x01
    420c:	c0 83       	st	Z, r28
    420e:	df 91       	pop	r29
    4210:	cf 91       	pop	r28
    4212:	1f 91       	pop	r17
    4214:	0f 91       	pop	r16
    4216:	ff 90       	pop	r15
    4218:	ef 90       	pop	r14
    421a:	08 95       	ret

0000421c <mp_obj_tuple_del>:
    421c:	9c 01       	movw	r18, r24
    421e:	23 70       	andi	r18, 0x03	; 3
    4220:	33 27       	eor	r19, r19
    4222:	23 2b       	or	r18, r19
    4224:	31 f4       	brne	.+12     	; 0x4232 <mp_obj_tuple_del+0x16>
    4226:	fc 01       	movw	r30, r24
    4228:	20 81       	ld	r18, Z
    422a:	31 81       	ldd	r19, Z+1	; 0x01
    422c:	2e 5a       	subi	r18, 0xAE	; 174
    422e:	3a 41       	sbci	r19, 0x1A	; 26
    4230:	11 f0       	breq	.+4      	; 0x4236 <mp_obj_tuple_del+0x1a>
    4232:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4236:	0c 94 29 08 	jmp	0x1052	; 0x1052 <gc_free>
    423a:	08 95       	ret

0000423c <mp_obj_is_subclass_fast>:
    423c:	86 17       	cp	r24, r22
    423e:	97 07       	cpc	r25, r23
    4240:	39 f1       	breq	.+78     	; 0x4290 <mp_obj_is_subclass_fast+0x54>
    4242:	9c 01       	movw	r18, r24
    4244:	23 70       	andi	r18, 0x03	; 3
    4246:	33 27       	eor	r19, r19
    4248:	23 2b       	or	r18, r19
    424a:	21 f5       	brne	.+72     	; 0x4294 <mp_obj_is_subclass_fast+0x58>
    424c:	dc 01       	movw	r26, r24
    424e:	2d 91       	ld	r18, X+
    4250:	3c 91       	ld	r19, X
    4252:	23 55       	subi	r18, 0x53	; 83
    4254:	3a 41       	sbci	r19, 0x1A	; 26
    4256:	01 f5       	brne	.+64     	; 0x4298 <mp_obj_is_subclass_fast+0x5c>
    4258:	dc 01       	movw	r26, r24
    425a:	5c 96       	adiw	r26, 0x1c	; 28
    425c:	ed 91       	ld	r30, X+
    425e:	fc 91       	ld	r31, X
    4260:	5d 97       	sbiw	r26, 0x1d	; 29
    4262:	30 97       	sbiw	r30, 0x00	; 0
    4264:	81 f4       	brne	.+32     	; 0x4286 <mp_obj_is_subclass_fast+0x4a>
    4266:	1a c0       	rjmp	.+52     	; 0x429c <mp_obj_is_subclass_fast+0x60>
    4268:	cf 01       	movw	r24, r30
    426a:	83 70       	andi	r24, 0x03	; 3
    426c:	99 27       	eor	r25, r25
    426e:	89 2b       	or	r24, r25
    4270:	b9 f4       	brne	.+46     	; 0x42a0 <mp_obj_is_subclass_fast+0x64>
    4272:	80 81       	ld	r24, Z
    4274:	91 81       	ldd	r25, Z+1	; 0x01
    4276:	83 55       	subi	r24, 0x53	; 83
    4278:	9a 41       	sbci	r25, 0x1A	; 26
    427a:	a1 f4       	brne	.+40     	; 0x42a4 <mp_obj_is_subclass_fast+0x68>
    427c:	04 8c       	ldd	r0, Z+28	; 0x1c
    427e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4280:	e0 2d       	mov	r30, r0
    4282:	30 97       	sbiw	r30, 0x00	; 0
    4284:	89 f0       	breq	.+34     	; 0x42a8 <mp_obj_is_subclass_fast+0x6c>
    4286:	6e 17       	cp	r22, r30
    4288:	7f 07       	cpc	r23, r31
    428a:	71 f7       	brne	.-36     	; 0x4268 <mp_obj_is_subclass_fast+0x2c>
    428c:	81 e0       	ldi	r24, 0x01	; 1
    428e:	08 95       	ret
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	08 95       	ret
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	08 95       	ret
    4298:	80 e0       	ldi	r24, 0x00	; 0
    429a:	08 95       	ret
    429c:	80 e0       	ldi	r24, 0x00	; 0
    429e:	08 95       	ret
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	08 95       	ret
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	08 95       	ret
    42a8:	80 e0       	ldi	r24, 0x00	; 0
    42aa:	08 95       	ret

000042ac <mp_obj_is_exception_type>:
    42ac:	9c 01       	movw	r18, r24
    42ae:	23 70       	andi	r18, 0x03	; 3
    42b0:	33 27       	eor	r19, r19
    42b2:	23 2b       	or	r18, r19
    42b4:	61 f4       	brne	.+24     	; 0x42ce <mp_obj_is_exception_type+0x22>
    42b6:	fc 01       	movw	r30, r24
    42b8:	20 81       	ld	r18, Z
    42ba:	31 81       	ldd	r19, Z+1	; 0x01
    42bc:	23 55       	subi	r18, 0x53	; 83
    42be:	3a 41       	sbci	r19, 0x1A	; 26
    42c0:	31 f4       	brne	.+12     	; 0x42ce <mp_obj_is_exception_type+0x22>
    42c2:	fc 01       	movw	r30, r24
    42c4:	20 85       	ldd	r18, Z+8	; 0x08
    42c6:	31 85       	ldd	r19, Z+9	; 0x09
    42c8:	2a 54       	subi	r18, 0x4A	; 74
    42ca:	36 42       	sbci	r19, 0x26	; 38
    42cc:	21 f0       	breq	.+8      	; 0x42d6 <mp_obj_is_exception_type+0x2a>
    42ce:	68 e5       	ldi	r22, 0x58	; 88
    42d0:	72 e2       	ldi	r23, 0x22	; 34
    42d2:	b4 cf       	rjmp	.-152    	; 0x423c <mp_obj_is_subclass_fast>
    42d4:	08 95       	ret
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	08 95       	ret

000042da <mp_obj_is_exception_instance>:
    42da:	b2 d8       	rcall	.-3740   	; 0x3440 <mp_obj_get_type>
    42dc:	e7 cf       	rjmp	.-50     	; 0x42ac <mp_obj_is_exception_type>
    42de:	08 95       	ret

000042e0 <get_native_exception>:
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	ec 01       	movw	r28, r24
    42e6:	f9 df       	rcall	.-14     	; 0x42da <mp_obj_is_exception_instance>
    42e8:	81 11       	cpse	r24, r1
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <get_native_exception+0x10>
    42ec:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    42f0:	ce 01       	movw	r24, r28
    42f2:	a6 d8       	rcall	.-3764   	; 0x3440 <mp_obj_get_type>
    42f4:	fc 01       	movw	r30, r24
    42f6:	80 85       	ldd	r24, Z+8	; 0x08
    42f8:	91 85       	ldd	r25, Z+9	; 0x09
    42fa:	8a 54       	subi	r24, 0x4A	; 74
    42fc:	96 42       	sbci	r25, 0x26	; 38
    42fe:	19 f0       	breq	.+6      	; 0x4306 <get_native_exception+0x26>
    4300:	88 85       	ldd	r24, Y+8	; 0x08
    4302:	99 85       	ldd	r25, Y+9	; 0x09
    4304:	02 c0       	rjmp	.+4      	; 0x430a <get_native_exception+0x2a>
    4306:	8c 2f       	mov	r24, r28
    4308:	9d 2f       	mov	r25, r29
    430a:	df 91       	pop	r29
    430c:	cf 91       	pop	r28
    430e:	08 95       	ret

00004310 <mp_obj_exception_get_value>:
    4310:	e7 df       	rcall	.-50     	; 0x42e0 <get_native_exception>
    4312:	dc 01       	movw	r26, r24
    4314:	16 96       	adiw	r26, 0x06	; 6
    4316:	ed 91       	ld	r30, X+
    4318:	fc 91       	ld	r31, X
    431a:	17 97       	sbiw	r26, 0x07	; 7
    431c:	82 81       	ldd	r24, Z+2	; 0x02
    431e:	93 81       	ldd	r25, Z+3	; 0x03
    4320:	89 2b       	or	r24, r25
    4322:	19 f0       	breq	.+6      	; 0x432a <mp_obj_exception_get_value+0x1a>
    4324:	84 81       	ldd	r24, Z+4	; 0x04
    4326:	95 81       	ldd	r25, Z+5	; 0x05
    4328:	08 95       	ret
    432a:	86 e0       	ldi	r24, 0x06	; 6
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	08 95       	ret

00004330 <mp_obj_exception_attr>:
    4330:	cf 93       	push	r28
    4332:	df 93       	push	r29
    4334:	fa 01       	movw	r30, r20
    4336:	20 81       	ld	r18, Z
    4338:	31 81       	ldd	r19, Z+1	; 0x01
    433a:	23 2b       	or	r18, r19
    433c:	71 f0       	breq	.+28     	; 0x435a <mp_obj_exception_attr+0x2a>
    433e:	66 3b       	cpi	r22, 0xB6	; 182
    4340:	71 05       	cpc	r23, r1
    4342:	f9 f4       	brne	.+62     	; 0x4382 <mp_obj_exception_attr+0x52>
    4344:	22 81       	ldd	r18, Z+2	; 0x02
    4346:	33 81       	ldd	r19, Z+3	; 0x03
    4348:	26 30       	cpi	r18, 0x06	; 6
    434a:	31 05       	cpc	r19, r1
    434c:	d1 f4       	brne	.+52     	; 0x4382 <mp_obj_exception_attr+0x52>
    434e:	fc 01       	movw	r30, r24
    4350:	13 82       	std	Z+3, r1	; 0x03
    4352:	fa 01       	movw	r30, r20
    4354:	11 82       	std	Z+1, r1	; 0x01
    4356:	10 82       	st	Z, r1
    4358:	14 c0       	rjmp	.+40     	; 0x4382 <mp_obj_exception_attr+0x52>
    435a:	6d 33       	cpi	r22, 0x3D	; 61
    435c:	71 05       	cpc	r23, r1
    435e:	39 f4       	brne	.+14     	; 0x436e <mp_obj_exception_attr+0x3e>
    4360:	fc 01       	movw	r30, r24
    4362:	86 81       	ldd	r24, Z+6	; 0x06
    4364:	97 81       	ldd	r25, Z+7	; 0x07
    4366:	fa 01       	movw	r30, r20
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	80 83       	st	Z, r24
    436c:	0a c0       	rjmp	.+20     	; 0x4382 <mp_obj_exception_attr+0x52>
    436e:	62 3a       	cpi	r22, 0xA2	; 162
    4370:	71 05       	cpc	r23, r1
    4372:	19 f0       	breq	.+6      	; 0x437a <mp_obj_exception_attr+0x4a>
    4374:	66 3c       	cpi	r22, 0xC6	; 198
    4376:	71 05       	cpc	r23, r1
    4378:	21 f4       	brne	.+8      	; 0x4382 <mp_obj_exception_attr+0x52>
    437a:	ea 01       	movw	r28, r20
    437c:	c9 df       	rcall	.-110    	; 0x4310 <mp_obj_exception_get_value>
    437e:	99 83       	std	Y+1, r25	; 0x01
    4380:	88 83       	st	Y, r24
    4382:	df 91       	pop	r29
    4384:	cf 91       	pop	r28
    4386:	08 95       	ret

00004388 <mp_obj_exception_add_traceback>:
    4388:	cf 92       	push	r12
    438a:	df 92       	push	r13
    438c:	ef 92       	push	r14
    438e:	ff 92       	push	r15
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	6b 01       	movw	r12, r22
    439a:	7a 01       	movw	r14, r20
    439c:	89 01       	movw	r16, r18
    439e:	a0 df       	rcall	.-192    	; 0x42e0 <get_native_exception>
    43a0:	ec 01       	movw	r28, r24
    43a2:	8c 81       	ldd	r24, Y+4	; 0x04
    43a4:	9d 81       	ldd	r25, Y+5	; 0x05
    43a6:	00 97       	sbiw	r24, 0x00	; 0
    43a8:	61 f4       	brne	.+24     	; 0x43c2 <mp_obj_exception_add_traceback+0x3a>
    43aa:	86 e0       	ldi	r24, 0x06	; 6
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    43b2:	9d 83       	std	Y+5, r25	; 0x05
    43b4:	8c 83       	std	Y+4, r24	; 0x04
    43b6:	89 2b       	or	r24, r25
    43b8:	61 f1       	breq	.+88     	; 0x4412 <mp_obj_exception_add_traceback+0x8a>
    43ba:	83 e0       	ldi	r24, 0x03	; 3
    43bc:	8a 83       	std	Y+2, r24	; 0x02
    43be:	1b 82       	std	Y+3, r1	; 0x03
    43c0:	17 c0       	rjmp	.+46     	; 0x43f0 <mp_obj_exception_add_traceback+0x68>
    43c2:	6a 81       	ldd	r22, Y+2	; 0x02
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	2b 81       	ldd	r18, Y+3	; 0x03
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	2d 5f       	subi	r18, 0xFD	; 253
    43cc:	3f 4f       	sbci	r19, 0xFF	; 255
    43ce:	62 17       	cp	r22, r18
    43d0:	73 07       	cpc	r23, r19
    43d2:	74 f4       	brge	.+28     	; 0x43f0 <mp_obj_exception_add_traceback+0x68>
    43d4:	6d 5f       	subi	r22, 0xFD	; 253
    43d6:	7f 4f       	sbci	r23, 0xFF	; 255
    43d8:	66 0f       	add	r22, r22
    43da:	77 1f       	adc	r23, r23
    43dc:	41 e0       	ldi	r20, 0x01	; 1
    43de:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <m_realloc_maybe>
    43e2:	00 97       	sbiw	r24, 0x00	; 0
    43e4:	b1 f0       	breq	.+44     	; 0x4412 <mp_obj_exception_add_traceback+0x8a>
    43e6:	9d 83       	std	Y+5, r25	; 0x05
    43e8:	8c 83       	std	Y+4, r24	; 0x04
    43ea:	8a 81       	ldd	r24, Y+2	; 0x02
    43ec:	8d 5f       	subi	r24, 0xFD	; 253
    43ee:	8a 83       	std	Y+2, r24	; 0x02
    43f0:	8b 81       	ldd	r24, Y+3	; 0x03
    43f2:	e8 2f       	mov	r30, r24
    43f4:	f0 e0       	ldi	r31, 0x00	; 0
    43f6:	ee 0f       	add	r30, r30
    43f8:	ff 1f       	adc	r31, r31
    43fa:	2c 81       	ldd	r18, Y+4	; 0x04
    43fc:	3d 81       	ldd	r19, Y+5	; 0x05
    43fe:	e2 0f       	add	r30, r18
    4400:	f3 1f       	adc	r31, r19
    4402:	8d 5f       	subi	r24, 0xFD	; 253
    4404:	8b 83       	std	Y+3, r24	; 0x03
    4406:	d1 82       	std	Z+1, r13	; 0x01
    4408:	c0 82       	st	Z, r12
    440a:	f3 82       	std	Z+3, r15	; 0x03
    440c:	e2 82       	std	Z+2, r14	; 0x02
    440e:	15 83       	std	Z+5, r17	; 0x05
    4410:	04 83       	std	Z+4, r16	; 0x04
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	0f 91       	pop	r16
    441a:	ff 90       	pop	r15
    441c:	ef 90       	pop	r14
    441e:	df 90       	pop	r13
    4420:	cf 90       	pop	r12
    4422:	08 95       	ret

00004424 <mp_obj_exception_match>:
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	ec 01       	movw	r28, r24
    442e:	8b 01       	movw	r16, r22
    4430:	54 df       	rcall	.-344    	; 0x42da <mp_obj_is_exception_instance>
    4432:	88 23       	and	r24, r24
    4434:	19 f0       	breq	.+6      	; 0x443c <mp_obj_exception_match+0x18>
    4436:	ce 01       	movw	r24, r28
    4438:	03 d8       	rcall	.-4090   	; 0x3440 <mp_obj_get_type>
    443a:	ec 01       	movw	r28, r24
    443c:	b8 01       	movw	r22, r16
    443e:	ce 01       	movw	r24, r28
    4440:	fd de       	rcall	.-518    	; 0x423c <mp_obj_is_subclass_fast>
    4442:	df 91       	pop	r29
    4444:	cf 91       	pop	r28
    4446:	1f 91       	pop	r17
    4448:	0f 91       	pop	r16
    444a:	08 95       	ret

0000444c <mp_obj_cast_to_native_base>:
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	ec 01       	movw	r28, r24
    4456:	8b 01       	movw	r16, r22
    4458:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    445c:	80 17       	cp	r24, r16
    445e:	91 07       	cpc	r25, r17
    4460:	39 f0       	breq	.+14     	; 0x4470 <mp_obj_cast_to_native_base+0x24>
    4462:	b8 01       	movw	r22, r16
    4464:	eb de       	rcall	.-554    	; 0x423c <mp_obj_is_subclass_fast>
    4466:	88 23       	and	r24, r24
    4468:	31 f0       	breq	.+12     	; 0x4476 <mp_obj_cast_to_native_base+0x2a>
    446a:	88 85       	ldd	r24, Y+8	; 0x08
    446c:	99 85       	ldd	r25, Y+9	; 0x09
    446e:	05 c0       	rjmp	.+10     	; 0x447a <mp_obj_cast_to_native_base+0x2e>
    4470:	8c 2f       	mov	r24, r28
    4472:	9d 2f       	mov	r25, r29
    4474:	02 c0       	rjmp	.+4      	; 0x447a <mp_obj_cast_to_native_base+0x2e>
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	1f 91       	pop	r17
    4480:	0f 91       	pop	r16
    4482:	08 95       	ret

00004484 <mp_seq_multiply>:
    4484:	af 92       	push	r10
    4486:	bf 92       	push	r11
    4488:	cf 92       	push	r12
    448a:	df 92       	push	r13
    448c:	ef 92       	push	r14
    448e:	ff 92       	push	r15
    4490:	0f 93       	push	r16
    4492:	1f 93       	push	r17
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	5c 01       	movw	r10, r24
    449a:	69 01       	movw	r12, r18
    449c:	23 2b       	or	r18, r19
    449e:	a1 f0       	breq	.+40     	; 0x44c8 <mp_seq_multiply+0x44>
    44a0:	64 9f       	mul	r22, r20
    44a2:	70 01       	movw	r14, r0
    44a4:	65 9f       	mul	r22, r21
    44a6:	f0 0c       	add	r15, r0
    44a8:	74 9f       	mul	r23, r20
    44aa:	f0 0c       	add	r15, r0
    44ac:	11 24       	eor	r1, r1
    44ae:	c0 e0       	ldi	r28, 0x00	; 0
    44b0:	d0 e0       	ldi	r29, 0x00	; 0
    44b2:	a7 01       	movw	r20, r14
    44b4:	b5 01       	movw	r22, r10
    44b6:	c8 01       	movw	r24, r16
    44b8:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    44bc:	0e 0d       	add	r16, r14
    44be:	1f 1d       	adc	r17, r15
    44c0:	21 96       	adiw	r28, 0x01	; 1
    44c2:	cc 16       	cp	r12, r28
    44c4:	dd 06       	cpc	r13, r29
    44c6:	a9 f7       	brne	.-22     	; 0x44b2 <mp_seq_multiply+0x2e>
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	1f 91       	pop	r17
    44ce:	0f 91       	pop	r16
    44d0:	ff 90       	pop	r15
    44d2:	ef 90       	pop	r14
    44d4:	df 90       	pop	r13
    44d6:	cf 90       	pop	r12
    44d8:	bf 90       	pop	r11
    44da:	af 90       	pop	r10
    44dc:	08 95       	ret

000044de <mp_seq_cmp_bytes>:
    44de:	ef 92       	push	r14
    44e0:	ff 92       	push	r15
    44e2:	0f 93       	push	r16
    44e4:	1f 93       	push	r17
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	7c 01       	movw	r14, r24
    44ec:	86 2f       	mov	r24, r22
    44ee:	97 2f       	mov	r25, r23
    44f0:	ea 01       	movw	r28, r20
    44f2:	42 e0       	ldi	r20, 0x02	; 2
    44f4:	e4 16       	cp	r14, r20
    44f6:	f1 04       	cpc	r15, r1
    44f8:	21 f4       	brne	.+8      	; 0x4502 <mp_seq_cmp_bytes+0x24>
    44fa:	c0 17       	cp	r28, r16
    44fc:	d1 07       	cpc	r29, r17
    44fe:	41 f5       	brne	.+80     	; 0x4550 <mp_seq_cmp_bytes+0x72>
    4500:	2d c0       	rjmp	.+90     	; 0x455c <mp_seq_cmp_bytes+0x7e>
    4502:	e1 14       	cp	r14, r1
    4504:	f1 04       	cpc	r15, r1
    4506:	a1 f1       	breq	.+104    	; 0x4570 <mp_seq_cmp_bytes+0x92>
    4508:	43 e0       	ldi	r20, 0x03	; 3
    450a:	e4 16       	cp	r14, r20
    450c:	f1 04       	cpc	r15, r1
    450e:	e1 f5       	brne	.+120    	; 0x4588 <mp_seq_cmp_bytes+0xaa>
    4510:	5c 2f       	mov	r21, r28
    4512:	4d 2f       	mov	r20, r29
    4514:	e8 01       	movw	r28, r16
    4516:	05 2f       	mov	r16, r21
    4518:	14 2f       	mov	r17, r20
    451a:	82 2f       	mov	r24, r18
    451c:	93 2f       	mov	r25, r19
    451e:	26 2f       	mov	r18, r22
    4520:	37 2f       	mov	r19, r23
    4522:	68 94       	set
    4524:	ee 24       	eor	r14, r14
    4526:	e2 f8       	bld	r14, 2
    4528:	f1 2c       	mov	r15, r1
    452a:	2e c0       	rjmp	.+92     	; 0x4588 <mp_seq_cmp_bytes+0xaa>
    452c:	18 16       	cp	r1, r24
    452e:	19 06       	cpc	r1, r25
    4530:	8c f0       	brlt	.+34     	; 0x4554 <mp_seq_cmp_bytes+0x76>
    4532:	c0 17       	cp	r28, r16
    4534:	d1 07       	cpc	r29, r17
    4536:	31 f0       	breq	.+12     	; 0x4544 <mp_seq_cmp_bytes+0x66>
    4538:	21 e0       	ldi	r18, 0x01	; 1
    453a:	c0 17       	cp	r28, r16
    453c:	d1 07       	cpc	r29, r17
    453e:	90 f5       	brcc	.+100    	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    4540:	20 e0       	ldi	r18, 0x00	; 0
    4542:	30 c0       	rjmp	.+96     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    4544:	21 e0       	ldi	r18, 0x01	; 1
    4546:	ea 94       	dec	r14
    4548:	ef 28       	or	r14, r15
    454a:	61 f5       	brne	.+88     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    454c:	20 e0       	ldi	r18, 0x00	; 0
    454e:	2a c0       	rjmp	.+84     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    4550:	20 e0       	ldi	r18, 0x00	; 0
    4552:	28 c0       	rjmp	.+80     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    4554:	21 e0       	ldi	r18, 0x01	; 1
    4556:	26 c0       	rjmp	.+76     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	24 c0       	rjmp	.+72     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    455c:	a8 01       	movw	r20, r16
    455e:	62 2f       	mov	r22, r18
    4560:	73 2f       	mov	r23, r19
    4562:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    4566:	21 e0       	ldi	r18, 0x01	; 1
    4568:	89 2b       	or	r24, r25
    456a:	e1 f0       	breq	.+56     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	1a c0       	rjmp	.+52     	; 0x45a4 <mp_seq_cmp_bytes+0xc6>
    4570:	5c 2f       	mov	r21, r28
    4572:	4d 2f       	mov	r20, r29
    4574:	e8 01       	movw	r28, r16
    4576:	05 2f       	mov	r16, r21
    4578:	14 2f       	mov	r17, r20
    457a:	82 2f       	mov	r24, r18
    457c:	93 2f       	mov	r25, r19
    457e:	26 2f       	mov	r18, r22
    4580:	37 2f       	mov	r19, r23
    4582:	ee 24       	eor	r14, r14
    4584:	e3 94       	inc	r14
    4586:	f1 2c       	mov	r15, r1
    4588:	4c 2f       	mov	r20, r28
    458a:	5d 2f       	mov	r21, r29
    458c:	0c 17       	cp	r16, r28
    458e:	1d 07       	cpc	r17, r29
    4590:	10 f4       	brcc	.+4      	; 0x4596 <mp_seq_cmp_bytes+0xb8>
    4592:	40 2f       	mov	r20, r16
    4594:	51 2f       	mov	r21, r17
    4596:	62 2f       	mov	r22, r18
    4598:	73 2f       	mov	r23, r19
    459a:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    459e:	99 23       	and	r25, r25
    45a0:	2c f6       	brge	.-118    	; 0x452c <mp_seq_cmp_bytes+0x4e>
    45a2:	da cf       	rjmp	.-76     	; 0x4558 <mp_seq_cmp_bytes+0x7a>
    45a4:	82 2f       	mov	r24, r18
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	0f 91       	pop	r16
    45ae:	ff 90       	pop	r15
    45b0:	ef 90       	pop	r14
    45b2:	08 95       	ret

000045b4 <mp_seq_count_obj>:
    45b4:	af 92       	push	r10
    45b6:	bf 92       	push	r11
    45b8:	cf 92       	push	r12
    45ba:	df 92       	push	r13
    45bc:	ef 92       	push	r14
    45be:	ff 92       	push	r15
    45c0:	0f 93       	push	r16
    45c2:	1f 93       	push	r17
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	61 15       	cp	r22, r1
    45ca:	71 05       	cpc	r23, r1
    45cc:	c1 f0       	breq	.+48     	; 0x45fe <mp_seq_count_obj+0x4a>
    45ce:	5a 01       	movw	r10, r20
    45d0:	6b 01       	movw	r12, r22
    45d2:	08 2f       	mov	r16, r24
    45d4:	19 2f       	mov	r17, r25
    45d6:	c0 e0       	ldi	r28, 0x00	; 0
    45d8:	d0 e0       	ldi	r29, 0x00	; 0
    45da:	e1 2c       	mov	r14, r1
    45dc:	f1 2c       	mov	r15, r1
    45de:	b5 01       	movw	r22, r10
    45e0:	f8 01       	movw	r30, r16
    45e2:	81 91       	ld	r24, Z+
    45e4:	91 91       	ld	r25, Z+
    45e6:	8f 01       	movw	r16, r30
    45e8:	f1 dd       	rcall	.-1054   	; 0x41cc <mp_obj_equal>
    45ea:	88 23       	and	r24, r24
    45ec:	19 f0       	breq	.+6      	; 0x45f4 <mp_seq_count_obj+0x40>
    45ee:	ff ef       	ldi	r31, 0xFF	; 255
    45f0:	ef 1a       	sub	r14, r31
    45f2:	ff 0a       	sbc	r15, r31
    45f4:	21 96       	adiw	r28, 0x01	; 1
    45f6:	cc 16       	cp	r12, r28
    45f8:	dd 06       	cpc	r13, r29
    45fa:	89 f7       	brne	.-30     	; 0x45de <mp_seq_count_obj+0x2a>
    45fc:	02 c0       	rjmp	.+4      	; 0x4602 <mp_seq_count_obj+0x4e>
    45fe:	e1 2c       	mov	r14, r1
    4600:	f1 2c       	mov	r15, r1
    4602:	c7 01       	movw	r24, r14
    4604:	88 0f       	add	r24, r24
    4606:	99 1f       	adc	r25, r25
    4608:	81 60       	ori	r24, 0x01	; 1
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	cf 90       	pop	r12
    461a:	bf 90       	pop	r11
    461c:	af 90       	pop	r10
    461e:	08 95       	ret

00004620 <list_count>:
    4620:	fc 01       	movw	r30, r24
    4622:	ab 01       	movw	r20, r22
    4624:	83 70       	andi	r24, 0x03	; 3
    4626:	99 27       	eor	r25, r25
    4628:	89 2b       	or	r24, r25
    462a:	29 f4       	brne	.+10     	; 0x4636 <list_count+0x16>
    462c:	80 81       	ld	r24, Z
    462e:	91 81       	ldd	r25, Z+1	; 0x01
    4630:	8c 52       	subi	r24, 0x2C	; 44
    4632:	9d 41       	sbci	r25, 0x1D	; 29
    4634:	11 f0       	breq	.+4      	; 0x463a <list_count+0x1a>
    4636:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    463a:	64 81       	ldd	r22, Z+4	; 0x04
    463c:	75 81       	ldd	r23, Z+5	; 0x05
    463e:	86 81       	ldd	r24, Z+6	; 0x06
    4640:	97 81       	ldd	r25, Z+7	; 0x07
    4642:	b8 cf       	rjmp	.-144    	; 0x45b4 <mp_seq_count_obj>
    4644:	08 95       	ret

00004646 <tuple_count>:
    4646:	ab 01       	movw	r20, r22
    4648:	9c 01       	movw	r18, r24
    464a:	23 70       	andi	r18, 0x03	; 3
    464c:	33 27       	eor	r19, r19
    464e:	23 2b       	or	r18, r19
    4650:	31 f4       	brne	.+12     	; 0x465e <tuple_count+0x18>
    4652:	fc 01       	movw	r30, r24
    4654:	20 81       	ld	r18, Z
    4656:	31 81       	ldd	r19, Z+1	; 0x01
    4658:	2e 5a       	subi	r18, 0xAE	; 174
    465a:	3a 41       	sbci	r19, 0x1A	; 26
    465c:	11 f0       	breq	.+4      	; 0x4662 <tuple_count+0x1c>
    465e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4662:	fc 01       	movw	r30, r24
    4664:	62 81       	ldd	r22, Z+2	; 0x02
    4666:	73 81       	ldd	r23, Z+3	; 0x03
    4668:	04 96       	adiw	r24, 0x04	; 4
    466a:	a4 cf       	rjmp	.-184    	; 0x45b4 <mp_seq_count_obj>
    466c:	08 95       	ret

0000466e <mp_binary_set_int>:
    466e:	cf 93       	push	r28
    4670:	df 93       	push	r29
    4672:	00 d0       	rcall	.+0      	; 0x4674 <mp_binary_set_int+0x6>
    4674:	cd b7       	in	r28, 0x3d	; 61
    4676:	de b7       	in	r29, 0x3e	; 62
    4678:	3a 83       	std	Y+2, r19	; 0x02
    467a:	29 83       	std	Y+1, r18	; 0x01
    467c:	61 11       	cpse	r22, r1
    467e:	09 c0       	rjmp	.+18     	; 0x4692 <mp_binary_set_int+0x24>
    4680:	9a 01       	movw	r18, r20
    4682:	ac 01       	movw	r20, r24
    4684:	be 01       	movw	r22, r28
    4686:	6f 5f       	subi	r22, 0xFF	; 255
    4688:	7f 4f       	sbci	r23, 0xFF	; 255
    468a:	c9 01       	movw	r24, r18
    468c:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    4690:	10 c0       	rjmp	.+32     	; 0x46b2 <mp_binary_set_int+0x44>
    4692:	a1 e0       	ldi	r26, 0x01	; 1
    4694:	b0 e0       	ldi	r27, 0x00	; 0
    4696:	ac 0f       	add	r26, r28
    4698:	bd 1f       	adc	r27, r29
    469a:	a8 0f       	add	r26, r24
    469c:	b9 1f       	adc	r27, r25
    469e:	00 97       	sbiw	r24, 0x00	; 0
    46a0:	41 f0       	breq	.+16     	; 0x46b2 <mp_binary_set_int+0x44>
    46a2:	fa 01       	movw	r30, r20
    46a4:	48 0f       	add	r20, r24
    46a6:	59 1f       	adc	r21, r25
    46a8:	9e 91       	ld	r25, -X
    46aa:	91 93       	st	Z+, r25
    46ac:	e4 17       	cp	r30, r20
    46ae:	f5 07       	cpc	r31, r21
    46b0:	d9 f7       	brne	.-10     	; 0x46a8 <mp_binary_set_int+0x3a>
    46b2:	0f 90       	pop	r0
    46b4:	0f 90       	pop	r0
    46b6:	df 91       	pop	r29
    46b8:	cf 91       	pop	r28
    46ba:	08 95       	ret

000046bc <mp_small_int_mul_overflow>:
    46bc:	9c 01       	movw	r18, r24
    46be:	fb 01       	movw	r30, r22
    46c0:	18 16       	cp	r1, r24
    46c2:	19 06       	cpc	r1, r25
    46c4:	c4 f4       	brge	.+48     	; 0x46f6 <mp_small_int_mul_overflow+0x3a>
    46c6:	1e 16       	cp	r1, r30
    46c8:	1f 06       	cpc	r1, r31
    46ca:	54 f4       	brge	.+20     	; 0x46e0 <mp_small_int_mul_overflow+0x24>
    46cc:	8f ef       	ldi	r24, 0xFF	; 255
    46ce:	9f e3       	ldi	r25, 0x3F	; 63
    46d0:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
    46d4:	81 e0       	ldi	r24, 0x01	; 1
    46d6:	62 17       	cp	r22, r18
    46d8:	73 07       	cpc	r23, r19
    46da:	44 f1       	brlt	.+80     	; 0x472c <mp_small_int_mul_overflow+0x70>
    46dc:	80 e0       	ldi	r24, 0x00	; 0
    46de:	08 95       	ret
    46e0:	80 e0       	ldi	r24, 0x00	; 0
    46e2:	90 ec       	ldi	r25, 0xC0	; 192
    46e4:	b9 01       	movw	r22, r18
    46e6:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
    46ea:	81 e0       	ldi	r24, 0x01	; 1
    46ec:	e6 17       	cp	r30, r22
    46ee:	f7 07       	cpc	r31, r23
    46f0:	ec f0       	brlt	.+58     	; 0x472c <mp_small_int_mul_overflow+0x70>
    46f2:	80 e0       	ldi	r24, 0x00	; 0
    46f4:	08 95       	ret
    46f6:	1e 16       	cp	r1, r30
    46f8:	1f 06       	cpc	r1, r31
    46fa:	54 f4       	brge	.+20     	; 0x4710 <mp_small_int_mul_overflow+0x54>
    46fc:	80 e0       	ldi	r24, 0x00	; 0
    46fe:	90 ec       	ldi	r25, 0xC0	; 192
    4700:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
    4704:	81 e0       	ldi	r24, 0x01	; 1
    4706:	26 17       	cp	r18, r22
    4708:	37 07       	cpc	r19, r23
    470a:	84 f0       	brlt	.+32     	; 0x472c <mp_small_int_mul_overflow+0x70>
    470c:	80 e0       	ldi	r24, 0x00	; 0
    470e:	08 95       	ret
    4710:	89 2b       	or	r24, r25
    4712:	59 f0       	breq	.+22     	; 0x472a <mp_small_int_mul_overflow+0x6e>
    4714:	8f ef       	ldi	r24, 0xFF	; 255
    4716:	9f e3       	ldi	r25, 0x3F	; 63
    4718:	b9 01       	movw	r22, r18
    471a:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	e6 17       	cp	r30, r22
    4722:	f7 07       	cpc	r31, r23
    4724:	1c f0       	brlt	.+6      	; 0x472c <mp_small_int_mul_overflow+0x70>
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	08 95       	ret
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	08 95       	ret

0000472e <mp_small_int_modulo>:
    472e:	9b 01       	movw	r18, r22
    4730:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
    4734:	ac 01       	movw	r20, r24
    4736:	99 23       	and	r25, r25
    4738:	1c f4       	brge	.+6      	; 0x4740 <mp_small_int_modulo+0x12>
    473a:	12 16       	cp	r1, r18
    473c:	13 06       	cpc	r1, r19
    473e:	2c f0       	brlt	.+10     	; 0x474a <mp_small_int_modulo+0x1c>
    4740:	18 16       	cp	r1, r24
    4742:	19 06       	cpc	r1, r25
    4744:	2c f4       	brge	.+10     	; 0x4750 <mp_small_int_modulo+0x22>
    4746:	33 23       	and	r19, r19
    4748:	1c f4       	brge	.+6      	; 0x4750 <mp_small_int_modulo+0x22>
    474a:	ca 01       	movw	r24, r20
    474c:	82 0f       	add	r24, r18
    474e:	93 1f       	adc	r25, r19
    4750:	08 95       	ret

00004752 <mp_small_int_floor_divide>:
    4752:	99 23       	and	r25, r25
    4754:	44 f0       	brlt	.+16     	; 0x4766 <mp_small_int_floor_divide+0x14>
    4756:	77 23       	and	r23, r23
    4758:	5c f4       	brge	.+22     	; 0x4770 <mp_small_int_floor_divide+0x1e>
    475a:	9b 01       	movw	r18, r22
    475c:	20 95       	com	r18
    475e:	30 95       	com	r19
    4760:	82 0f       	add	r24, r18
    4762:	93 1f       	adc	r25, r19
    4764:	05 c0       	rjmp	.+10     	; 0x4770 <mp_small_int_floor_divide+0x1e>
    4766:	77 23       	and	r23, r23
    4768:	1c f0       	brlt	.+6      	; 0x4770 <mp_small_int_floor_divide+0x1e>
    476a:	86 1b       	sub	r24, r22
    476c:	97 0b       	sbc	r25, r23
    476e:	01 96       	adiw	r24, 0x01	; 1
    4770:	0e 94 fc c1 	call	0x183f8	; 0x183f8 <__divmodhi4>
    4774:	cb 01       	movw	r24, r22
    4776:	08 95       	ret

00004778 <mp_frozen_stat>:
    4778:	cf 92       	push	r12
    477a:	df 92       	push	r13
    477c:	ef 92       	push	r14
    477e:	ff 92       	push	r15
    4780:	0f 93       	push	r16
    4782:	1f 93       	push	r17
    4784:	cf 93       	push	r28
    4786:	df 93       	push	r29
    4788:	fc 01       	movw	r30, r24
    478a:	01 90       	ld	r0, Z+
    478c:	00 20       	and	r0, r0
    478e:	e9 f7       	brne	.-6      	; 0x478a <mp_frozen_stat+0x12>
    4790:	31 97       	sbiw	r30, 0x01	; 1
    4792:	6f 01       	movw	r12, r30
    4794:	c8 1a       	sub	r12, r24
    4796:	d9 0a       	sbc	r13, r25
    4798:	20 91 7e 01 	lds	r18, 0x017E	; 0x80017e <VirtualSerial_CDC_Interface+0x7e>
    479c:	22 23       	and	r18, r18
    479e:	31 f1       	breq	.+76     	; 0x47ec <mp_frozen_stat+0x74>
    47a0:	7c 01       	movw	r14, r24
    47a2:	0e e7       	ldi	r16, 0x7E	; 126
    47a4:	11 e0       	ldi	r17, 0x01	; 1
    47a6:	f8 01       	movw	r30, r16
    47a8:	01 90       	ld	r0, Z+
    47aa:	00 20       	and	r0, r0
    47ac:	e9 f7       	brne	.-6      	; 0x47a8 <mp_frozen_stat+0x30>
    47ae:	31 97       	sbiw	r30, 0x01	; 1
    47b0:	ef 01       	movw	r28, r30
    47b2:	c0 1b       	sub	r28, r16
    47b4:	d1 0b       	sbc	r29, r17
    47b6:	cc 15       	cp	r28, r12
    47b8:	dd 05       	cpc	r29, r13
    47ba:	78 f0       	brcs	.+30     	; 0x47da <mp_frozen_stat+0x62>
    47bc:	a6 01       	movw	r20, r12
    47be:	b8 01       	movw	r22, r16
    47c0:	c7 01       	movw	r24, r14
    47c2:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    47c6:	89 2b       	or	r24, r25
    47c8:	41 f4       	brne	.+16     	; 0x47da <mp_frozen_stat+0x62>
    47ca:	f8 01       	movw	r30, r16
    47cc:	ec 0d       	add	r30, r12
    47ce:	fd 1d       	adc	r31, r13
    47d0:	80 81       	ld	r24, Z
    47d2:	88 23       	and	r24, r24
    47d4:	69 f0       	breq	.+26     	; 0x47f0 <mp_frozen_stat+0x78>
    47d6:	8f 32       	cpi	r24, 0x2F	; 47
    47d8:	69 f0       	breq	.+26     	; 0x47f4 <mp_frozen_stat+0x7c>
    47da:	fe 01       	movw	r30, r28
    47dc:	31 96       	adiw	r30, 0x01	; 1
    47de:	0e 0f       	add	r16, r30
    47e0:	1f 1f       	adc	r17, r31
    47e2:	f8 01       	movw	r30, r16
    47e4:	80 81       	ld	r24, Z
    47e6:	81 11       	cpse	r24, r1
    47e8:	de cf       	rjmp	.-68     	; 0x47a6 <mp_frozen_stat+0x2e>
    47ea:	05 c0       	rjmp	.+10     	; 0x47f6 <mp_frozen_stat+0x7e>
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	03 c0       	rjmp	.+6      	; 0x47f6 <mp_frozen_stat+0x7e>
    47f0:	82 e0       	ldi	r24, 0x02	; 2
    47f2:	01 c0       	rjmp	.+2      	; 0x47f6 <mp_frozen_stat+0x7e>
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	1f 91       	pop	r17
    47fc:	0f 91       	pop	r16
    47fe:	ff 90       	pop	r15
    4800:	ef 90       	pop	r14
    4802:	df 90       	pop	r13
    4804:	cf 90       	pop	r12
    4806:	08 95       	ret

00004808 <mp_import_stat_any>:
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	ec 01       	movw	r28, r24
    480e:	b4 df       	rcall	.-152    	; 0x4778 <mp_frozen_stat>
    4810:	81 11       	cpse	r24, r1
    4812:	03 c0       	rjmp	.+6      	; 0x481a <mp_import_stat_any+0x12>
    4814:	ce 01       	movw	r24, r28
    4816:	0e 94 bd 00 	call	0x17a	; 0x17a <mp_import_stat>
    481a:	df 91       	pop	r29
    481c:	cf 91       	pop	r28
    481e:	08 95       	ret

00004820 <mp_find_frozen_module>:
    4820:	8f 92       	push	r8
    4822:	9f 92       	push	r9
    4824:	af 92       	push	r10
    4826:	bf 92       	push	r11
    4828:	cf 92       	push	r12
    482a:	df 92       	push	r13
    482c:	ef 92       	push	r14
    482e:	ff 92       	push	r15
    4830:	0f 93       	push	r16
    4832:	1f 93       	push	r17
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	7c 01       	movw	r14, r24
    483a:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <VirtualSerial_CDC_Interface+0x7e>
    483e:	99 23       	and	r25, r25
    4840:	b1 f1       	breq	.+108    	; 0x48ae <mp_find_frozen_module+0x8e>
    4842:	6a 01       	movw	r12, r20
    4844:	5b 01       	movw	r10, r22
    4846:	00 e0       	ldi	r16, 0x00	; 0
    4848:	10 e0       	ldi	r17, 0x00	; 0
    484a:	ce e7       	ldi	r28, 0x7E	; 126
    484c:	d1 e0       	ldi	r29, 0x01	; 1
    484e:	fe 01       	movw	r30, r28
    4850:	01 90       	ld	r0, Z+
    4852:	00 20       	and	r0, r0
    4854:	e9 f7       	brne	.-6      	; 0x4850 <mp_find_frozen_module+0x30>
    4856:	31 97       	sbiw	r30, 0x01	; 1
    4858:	4f 01       	movw	r8, r30
    485a:	8c 1a       	sub	r8, r28
    485c:	9d 0a       	sbc	r9, r29
    485e:	a8 14       	cp	r10, r8
    4860:	b9 04       	cpc	r11, r9
    4862:	91 f4       	brne	.+36     	; 0x4888 <mp_find_frozen_module+0x68>
    4864:	a5 01       	movw	r20, r10
    4866:	be 01       	movw	r22, r28
    4868:	c7 01       	movw	r24, r14
    486a:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    486e:	00 97       	sbiw	r24, 0x00	; 0
    4870:	59 f4       	brne	.+22     	; 0x4888 <mp_find_frozen_module+0x68>
    4872:	00 0f       	add	r16, r16
    4874:	11 1f       	adc	r17, r17
    4876:	f8 01       	movw	r30, r16
    4878:	e0 58       	subi	r30, 0x80	; 128
    487a:	fe 4f       	sbci	r31, 0xFE	; 254
    487c:	20 81       	ld	r18, Z
    487e:	31 81       	ldd	r19, Z+1	; 0x01
    4880:	21 15       	cp	r18, r1
    4882:	31 05       	cpc	r19, r1
    4884:	71 f4       	brne	.+28     	; 0x48a2 <mp_find_frozen_module+0x82>
    4886:	15 c0       	rjmp	.+42     	; 0x48b2 <mp_find_frozen_module+0x92>
    4888:	94 01       	movw	r18, r8
    488a:	2f 5f       	subi	r18, 0xFF	; 255
    488c:	3f 4f       	sbci	r19, 0xFF	; 255
    488e:	c2 0f       	add	r28, r18
    4890:	d3 1f       	adc	r29, r19
    4892:	0f 5f       	subi	r16, 0xFF	; 255
    4894:	1f 4f       	sbci	r17, 0xFF	; 255
    4896:	88 81       	ld	r24, Y
    4898:	81 11       	cpse	r24, r1
    489a:	d9 cf       	rjmp	.-78     	; 0x484e <mp_find_frozen_module+0x2e>
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	90 e0       	ldi	r25, 0x00	; 0
    48a0:	08 c0       	rjmp	.+16     	; 0x48b2 <mp_find_frozen_module+0x92>
    48a2:	f6 01       	movw	r30, r12
    48a4:	31 83       	std	Z+1, r19	; 0x01
    48a6:	20 83       	st	Z, r18
    48a8:	82 e0       	ldi	r24, 0x02	; 2
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	02 c0       	rjmp	.+4      	; 0x48b2 <mp_find_frozen_module+0x92>
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	df 91       	pop	r29
    48b4:	cf 91       	pop	r28
    48b6:	1f 91       	pop	r17
    48b8:	0f 91       	pop	r16
    48ba:	ff 90       	pop	r15
    48bc:	ef 90       	pop	r14
    48be:	df 90       	pop	r13
    48c0:	cf 90       	pop	r12
    48c2:	bf 90       	pop	r11
    48c4:	af 90       	pop	r10
    48c6:	9f 90       	pop	r9
    48c8:	8f 90       	pop	r8
    48ca:	08 95       	ret

000048cc <printf>:
    48cc:	cf 93       	push	r28
    48ce:	df 93       	push	r29
    48d0:	cd b7       	in	r28, 0x3d	; 61
    48d2:	de b7       	in	r29, 0x3e	; 62
    48d4:	ae 01       	movw	r20, r28
    48d6:	4b 5f       	subi	r20, 0xFB	; 251
    48d8:	5f 4f       	sbci	r21, 0xFF	; 255
    48da:	fa 01       	movw	r30, r20
    48dc:	61 91       	ld	r22, Z+
    48de:	71 91       	ld	r23, Z+
    48e0:	af 01       	movw	r20, r30
    48e2:	8b e1       	ldi	r24, 0x1B	; 27
    48e4:	9a e2       	ldi	r25, 0x2A	; 42
    48e6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <mp_vprintf>
    48ea:	df 91       	pop	r29
    48ec:	cf 91       	pop	r28
    48ee:	08 95       	ret

000048f0 <puts>:
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	90 e0       	ldi	r25, 0x00	; 0
    48f4:	08 95       	ret

000048f6 <nlr_jump_fail>:
    48f6:	9f 93       	push	r25
    48f8:	8f 93       	push	r24
    48fa:	85 ea       	ldi	r24, 0xA5	; 165
    48fc:	92 e0       	ldi	r25, 0x02	; 2
    48fe:	9f 93       	push	r25
    4900:	8f 93       	push	r24
    4902:	e4 df       	rcall	.-56     	; 0x48cc <printf>
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	0e 94 c7 c2 	call	0x1858e	; 0x1858e <_exit>

0000490c <nlr_jump>:
    490c:	e0 91 62 6b 	lds	r30, 0x6B62	; 0x806b62 <mp_state_ctx+0x8>
    4910:	f0 91 63 6b 	lds	r31, 0x6B63	; 0x806b63 <mp_state_ctx+0x9>
    4914:	30 97       	sbiw	r30, 0x00	; 0
    4916:	09 f4       	brne	.+2      	; 0x491a <nlr_jump+0xe>
    4918:	ee df       	rcall	.-36     	; 0x48f6 <nlr_jump_fail>
    491a:	93 83       	std	Z+3, r25	; 0x03
    491c:	82 83       	std	Z+2, r24	; 0x02
    491e:	80 81       	ld	r24, Z
    4920:	91 81       	ldd	r25, Z+1	; 0x01
    4922:	90 93 63 6b 	sts	0x6B63, r25	; 0x806b63 <mp_state_ctx+0x9>
    4926:	80 93 62 6b 	sts	0x6B62, r24	; 0x806b62 <mp_state_ctx+0x8>
    492a:	61 e0       	ldi	r22, 0x01	; 1
    492c:	70 e0       	ldi	r23, 0x00	; 0
    492e:	cf 01       	movw	r24, r30
    4930:	04 96       	adiw	r24, 0x04	; 4
    4932:	0e 94 64 c2 	call	0x184c8	; 0x184c8 <longjmp>

00004936 <raise_exc>:
    4936:	ec 01       	movw	r28, r24
    4938:	61 15       	cp	r22, r1
    493a:	71 05       	cpc	r23, r1
    493c:	69 f0       	breq	.+26     	; 0x4958 <raise_exc+0x22>
    493e:	88 eb       	ldi	r24, 0xB8	; 184
    4940:	9f e1       	ldi	r25, 0x1F	; 31
    4942:	99 83       	std	Y+1, r25	; 0x01
    4944:	88 83       	st	Y, r24
    4946:	fb 01       	movw	r30, r22
    4948:	44 8d       	ldd	r20, Z+28	; 0x1c
    494a:	55 8d       	ldd	r21, Z+29	; 0x1d
    494c:	60 81       	ld	r22, Z
    494e:	71 81       	ldd	r23, Z+1	; 0x01
    4950:	20 e0       	ldi	r18, 0x00	; 0
    4952:	30 e0       	ldi	r19, 0x00	; 0
    4954:	ce 01       	movw	r24, r28
    4956:	18 dd       	rcall	.-1488   	; 0x4388 <mp_obj_exception_add_traceback>
    4958:	ce 01       	movw	r24, r28
    495a:	d8 df       	rcall	.-80     	; 0x490c <nlr_jump>

0000495c <mp_raise_msg>:
    495c:	61 15       	cp	r22, r1
    495e:	71 05       	cpc	r23, r1
    4960:	11 f4       	brne	.+4      	; 0x4966 <mp_raise_msg+0xa>
    4962:	f3 d1       	rcall	.+998    	; 0x4d4a <mp_obj_new_exception>
    4964:	d3 df       	rcall	.-90     	; 0x490c <nlr_jump>
    4966:	01 d2       	rcall	.+1026   	; 0x4d6a <mp_obj_new_exception_msg>
    4968:	d1 df       	rcall	.-94     	; 0x490c <nlr_jump>

0000496a <mp_store_attr>:
    496a:	cf 92       	push	r12
    496c:	df 92       	push	r13
    496e:	ef 92       	push	r14
    4970:	ff 92       	push	r15
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	00 d0       	rcall	.+0      	; 0x497c <mp_store_attr+0x12>
    497c:	00 d0       	rcall	.+0      	; 0x497e <mp_store_attr+0x14>
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	8c 01       	movw	r16, r24
    4984:	7b 01       	movw	r14, r22
    4986:	6a 01       	movw	r12, r20
    4988:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    498c:	dc 01       	movw	r26, r24
    498e:	50 96       	adiw	r26, 0x10	; 16
    4990:	ed 91       	ld	r30, X+
    4992:	fc 91       	ld	r31, X
    4994:	51 97       	sbiw	r26, 0x11	; 17
    4996:	30 97       	sbiw	r30, 0x00	; 0
    4998:	81 f0       	breq	.+32     	; 0x49ba <mp_store_attr+0x50>
    499a:	84 e0       	ldi	r24, 0x04	; 4
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	9a 83       	std	Y+2, r25	; 0x02
    49a0:	89 83       	std	Y+1, r24	; 0x01
    49a2:	dc 82       	std	Y+4, r13	; 0x04
    49a4:	cb 82       	std	Y+3, r12	; 0x03
    49a6:	ae 01       	movw	r20, r28
    49a8:	4f 5f       	subi	r20, 0xFF	; 255
    49aa:	5f 4f       	sbci	r21, 0xFF	; 255
    49ac:	b7 01       	movw	r22, r14
    49ae:	c8 01       	movw	r24, r16
    49b0:	09 95       	icall
    49b2:	89 81       	ldd	r24, Y+1	; 0x01
    49b4:	9a 81       	ldd	r25, Y+2	; 0x02
    49b6:	89 2b       	or	r24, r25
    49b8:	29 f0       	breq	.+10     	; 0x49c4 <mp_store_attr+0x5a>
    49ba:	6d eb       	ldi	r22, 0xBD	; 189
    49bc:	72 e0       	ldi	r23, 0x02	; 2
    49be:	88 e1       	ldi	r24, 0x18	; 24
    49c0:	91 e2       	ldi	r25, 0x21	; 33
    49c2:	cc df       	rcall	.-104    	; 0x495c <mp_raise_msg>
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	0f 90       	pop	r0
    49cc:	df 91       	pop	r29
    49ce:	cf 91       	pop	r28
    49d0:	1f 91       	pop	r17
    49d2:	0f 91       	pop	r16
    49d4:	ff 90       	pop	r15
    49d6:	ef 90       	pop	r14
    49d8:	df 90       	pop	r13
    49da:	cf 90       	pop	r12
    49dc:	08 95       	ret

000049de <mp_raise_ValueError>:
    49de:	bc 01       	movw	r22, r24
    49e0:	88 e5       	ldi	r24, 0x58	; 88
    49e2:	9f e1       	ldi	r25, 0x1F	; 31
    49e4:	bb df       	rcall	.-138    	; 0x495c <mp_raise_msg>

000049e6 <terse_str_format_value_error>:
    49e6:	8f ec       	ldi	r24, 0xCF	; 207
    49e8:	92 e0       	ldi	r25, 0x02	; 2
    49ea:	f9 df       	rcall	.-14     	; 0x49de <mp_raise_ValueError>

000049ec <mp_raise_TypeError>:
    49ec:	bc 01       	movw	r22, r24
    49ee:	88 e7       	ldi	r24, 0x78	; 120
    49f0:	9f e1       	ldi	r25, 0x1F	; 31
    49f2:	b4 df       	rcall	.-152    	; 0x495c <mp_raise_msg>

000049f4 <mp_call_function_n_kw>:
    49f4:	cf 92       	push	r12
    49f6:	df 92       	push	r13
    49f8:	ef 92       	push	r14
    49fa:	ff 92       	push	r15
    49fc:	0f 93       	push	r16
    49fe:	1f 93       	push	r17
    4a00:	cf 93       	push	r28
    4a02:	df 93       	push	r29
    4a04:	ec 01       	movw	r28, r24
    4a06:	8b 01       	movw	r16, r22
    4a08:	7a 01       	movw	r14, r20
    4a0a:	69 01       	movw	r12, r18
    4a0c:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    4a10:	dc 01       	movw	r26, r24
    4a12:	1a 96       	adiw	r26, 0x0a	; 10
    4a14:	ed 91       	ld	r30, X+
    4a16:	fc 91       	ld	r31, X
    4a18:	1b 97       	sbiw	r26, 0x0b	; 11
    4a1a:	30 97       	sbiw	r30, 0x00	; 0
    4a1c:	31 f0       	breq	.+12     	; 0x4a2a <mp_call_function_n_kw+0x36>
    4a1e:	96 01       	movw	r18, r12
    4a20:	a7 01       	movw	r20, r14
    4a22:	b8 01       	movw	r22, r16
    4a24:	ce 01       	movw	r24, r28
    4a26:	09 95       	icall
    4a28:	03 c0       	rjmp	.+6      	; 0x4a30 <mp_call_function_n_kw+0x3c>
    4a2a:	8e ee       	ldi	r24, 0xEE	; 238
    4a2c:	92 e0       	ldi	r25, 0x02	; 2
    4a2e:	de df       	rcall	.-68     	; 0x49ec <mp_raise_TypeError>
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	ff 90       	pop	r15
    4a3a:	ef 90       	pop	r14
    4a3c:	df 90       	pop	r13
    4a3e:	cf 90       	pop	r12
    4a40:	08 95       	ret

00004a42 <mp_call_function_0>:
    4a42:	20 e0       	ldi	r18, 0x00	; 0
    4a44:	30 e0       	ldi	r19, 0x00	; 0
    4a46:	40 e0       	ldi	r20, 0x00	; 0
    4a48:	50 e0       	ldi	r21, 0x00	; 0
    4a4a:	60 e0       	ldi	r22, 0x00	; 0
    4a4c:	70 e0       	ldi	r23, 0x00	; 0
    4a4e:	d2 cf       	rjmp	.-92     	; 0x49f4 <mp_call_function_n_kw>
    4a50:	08 95       	ret

00004a52 <mp_call_function_1>:
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	00 d0       	rcall	.+0      	; 0x4a58 <mp_call_function_1+0x6>
    4a58:	cd b7       	in	r28, 0x3d	; 61
    4a5a:	de b7       	in	r29, 0x3e	; 62
    4a5c:	7a 83       	std	Y+2, r23	; 0x02
    4a5e:	69 83       	std	Y+1, r22	; 0x01
    4a60:	9e 01       	movw	r18, r28
    4a62:	2f 5f       	subi	r18, 0xFF	; 255
    4a64:	3f 4f       	sbci	r19, 0xFF	; 255
    4a66:	40 e0       	ldi	r20, 0x00	; 0
    4a68:	50 e0       	ldi	r21, 0x00	; 0
    4a6a:	61 e0       	ldi	r22, 0x01	; 1
    4a6c:	70 e0       	ldi	r23, 0x00	; 0
    4a6e:	c2 df       	rcall	.-124    	; 0x49f4 <mp_call_function_n_kw>
    4a70:	0f 90       	pop	r0
    4a72:	0f 90       	pop	r0
    4a74:	df 91       	pop	r29
    4a76:	cf 91       	pop	r28
    4a78:	08 95       	ret

00004a7a <mp_call_method_n_kw>:
    4a7a:	fa 01       	movw	r30, r20
    4a7c:	41 e0       	ldi	r20, 0x01	; 1
    4a7e:	50 e0       	ldi	r21, 0x00	; 0
    4a80:	22 81       	ldd	r18, Z+2	; 0x02
    4a82:	33 81       	ldd	r19, Z+3	; 0x03
    4a84:	23 2b       	or	r18, r19
    4a86:	11 f4       	brne	.+4      	; 0x4a8c <mp_call_method_n_kw+0x12>
    4a88:	40 e0       	ldi	r20, 0x00	; 0
    4a8a:	50 e0       	ldi	r21, 0x00	; 0
    4a8c:	22 27       	eor	r18, r18
    4a8e:	33 27       	eor	r19, r19
    4a90:	24 1b       	sub	r18, r20
    4a92:	35 0b       	sbc	r19, r21
    4a94:	22 0f       	add	r18, r18
    4a96:	33 1f       	adc	r19, r19
    4a98:	2c 5f       	subi	r18, 0xFC	; 252
    4a9a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a9c:	2e 0f       	add	r18, r30
    4a9e:	3f 1f       	adc	r19, r31
    4aa0:	84 0f       	add	r24, r20
    4aa2:	95 1f       	adc	r25, r21
    4aa4:	ab 01       	movw	r20, r22
    4aa6:	bc 01       	movw	r22, r24
    4aa8:	80 81       	ld	r24, Z
    4aaa:	91 81       	ldd	r25, Z+1	; 0x01
    4aac:	a3 cf       	rjmp	.-186    	; 0x49f4 <mp_call_function_n_kw>
    4aae:	08 95       	ret

00004ab0 <mp_call_method_self_n_kw>:
    4ab0:	2f 92       	push	r2
    4ab2:	3f 92       	push	r3
    4ab4:	4f 92       	push	r4
    4ab6:	5f 92       	push	r5
    4ab8:	6f 92       	push	r6
    4aba:	7f 92       	push	r7
    4abc:	8f 92       	push	r8
    4abe:	9f 92       	push	r9
    4ac0:	af 92       	push	r10
    4ac2:	bf 92       	push	r11
    4ac4:	cf 92       	push	r12
    4ac6:	df 92       	push	r13
    4ac8:	ef 92       	push	r14
    4aca:	ff 92       	push	r15
    4acc:	0f 93       	push	r16
    4ace:	1f 93       	push	r17
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    4ad4:	00 d0       	rcall	.+0      	; 0x4ad6 <mp_call_method_self_n_kw+0x26>
    4ad6:	cd b7       	in	r28, 0x3d	; 61
    4ad8:	de b7       	in	r29, 0x3e	; 62
    4ada:	4c 01       	movw	r8, r24
    4adc:	1b 01       	movw	r2, r22
    4ade:	7a 01       	movw	r14, r20
    4ae0:	59 01       	movw	r10, r18
    4ae2:	1a 83       	std	Y+2, r17	; 0x02
    4ae4:	09 83       	std	Y+1, r16	; 0x01
    4ae6:	4d b6       	in	r4, 0x3d	; 61
    4ae8:	5e b6       	in	r5, 0x3e	; 62
    4aea:	89 01       	movw	r16, r18
    4aec:	00 0f       	add	r16, r16
    4aee:	11 1f       	adc	r17, r17
    4af0:	04 0f       	add	r16, r20
    4af2:	15 1f       	adc	r17, r21
    4af4:	05 30       	cpi	r16, 0x05	; 5
    4af6:	11 05       	cpc	r17, r1
    4af8:	60 f0       	brcs	.+24     	; 0x4b12 <mp_call_method_self_n_kw+0x62>
    4afa:	68 01       	movw	r12, r16
    4afc:	8f ef       	ldi	r24, 0xFF	; 255
    4afe:	c8 1a       	sub	r12, r24
    4b00:	d8 0a       	sbc	r13, r24
    4b02:	cc 0c       	add	r12, r12
    4b04:	dd 1c       	adc	r13, r13
    4b06:	c6 01       	movw	r24, r12
    4b08:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    4b0c:	3c 01       	movw	r6, r24
    4b0e:	00 97       	sbiw	r24, 0x00	; 0
    4b10:	21 f5       	brne	.+72     	; 0x4b5a <mp_call_method_self_n_kw+0xaa>
    4b12:	a8 01       	movw	r20, r16
    4b14:	4f 5f       	subi	r20, 0xFF	; 255
    4b16:	5f 4f       	sbci	r21, 0xFF	; 255
    4b18:	44 0f       	add	r20, r20
    4b1a:	55 1f       	adc	r21, r21
    4b1c:	ed b7       	in	r30, 0x3d	; 61
    4b1e:	fe b7       	in	r31, 0x3e	; 62
    4b20:	e4 1b       	sub	r30, r20
    4b22:	f5 0b       	sbc	r31, r21
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	f8 94       	cli
    4b28:	fe bf       	out	0x3e, r31	; 62
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	ed bf       	out	0x3d, r30	; 61
    4b2e:	8d b7       	in	r24, 0x3d	; 61
    4b30:	9e b7       	in	r25, 0x3e	; 62
    4b32:	01 96       	adiw	r24, 0x01	; 1
    4b34:	6c 01       	movw	r12, r24
    4b36:	32 82       	std	Z+2, r3	; 0x02
    4b38:	21 82       	std	Z+1, r2	; 0x01
    4b3a:	02 96       	adiw	r24, 0x02	; 2
    4b3c:	42 50       	subi	r20, 0x02	; 2
    4b3e:	51 09       	sbc	r21, r1
    4b40:	69 81       	ldd	r22, Y+1	; 0x01
    4b42:	7a 81       	ldd	r23, Y+2	; 0x02
    4b44:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    4b48:	b7 01       	movw	r22, r14
    4b4a:	6f 5f       	subi	r22, 0xFF	; 255
    4b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b4e:	96 01       	movw	r18, r12
    4b50:	a5 01       	movw	r20, r10
    4b52:	c4 01       	movw	r24, r8
    4b54:	4f df       	rcall	.-354    	; 0x49f4 <mp_call_function_n_kw>
    4b56:	8c 01       	movw	r16, r24
    4b58:	16 c0       	rjmp	.+44     	; 0x4b86 <mp_call_method_self_n_kw+0xd6>
    4b5a:	fc 01       	movw	r30, r24
    4b5c:	21 92       	st	Z+, r2
    4b5e:	31 92       	st	Z+, r3
    4b60:	cf 01       	movw	r24, r30
    4b62:	a6 01       	movw	r20, r12
    4b64:	42 50       	subi	r20, 0x02	; 2
    4b66:	51 09       	sbc	r21, r1
    4b68:	69 81       	ldd	r22, Y+1	; 0x01
    4b6a:	7a 81       	ldd	r23, Y+2	; 0x02
    4b6c:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    4b70:	b7 01       	movw	r22, r14
    4b72:	6f 5f       	subi	r22, 0xFF	; 255
    4b74:	7f 4f       	sbci	r23, 0xFF	; 255
    4b76:	93 01       	movw	r18, r6
    4b78:	a5 01       	movw	r20, r10
    4b7a:	c4 01       	movw	r24, r8
    4b7c:	3b df       	rcall	.-394    	; 0x49f4 <mp_call_function_n_kw>
    4b7e:	8c 01       	movw	r16, r24
    4b80:	c3 01       	movw	r24, r6
    4b82:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    4b86:	c8 01       	movw	r24, r16
    4b88:	0f b6       	in	r0, 0x3f	; 63
    4b8a:	f8 94       	cli
    4b8c:	5e be       	out	0x3e, r5	; 62
    4b8e:	0f be       	out	0x3f, r0	; 63
    4b90:	4d be       	out	0x3d, r4	; 61
    4b92:	0f 90       	pop	r0
    4b94:	0f 90       	pop	r0
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	1f 91       	pop	r17
    4b9c:	0f 91       	pop	r16
    4b9e:	ff 90       	pop	r15
    4ba0:	ef 90       	pop	r14
    4ba2:	df 90       	pop	r13
    4ba4:	cf 90       	pop	r12
    4ba6:	bf 90       	pop	r11
    4ba8:	af 90       	pop	r10
    4baa:	9f 90       	pop	r9
    4bac:	8f 90       	pop	r8
    4bae:	7f 90       	pop	r7
    4bb0:	6f 90       	pop	r6
    4bb2:	5f 90       	pop	r5
    4bb4:	4f 90       	pop	r4
    4bb6:	3f 90       	pop	r3
    4bb8:	2f 90       	pop	r2
    4bba:	08 95       	ret

00004bbc <bound_meth_call>:
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	fb 01       	movw	r30, r22
    4bc2:	dc 01       	movw	r26, r24
    4bc4:	14 96       	adiw	r26, 0x04	; 4
    4bc6:	6d 91       	ld	r22, X+
    4bc8:	7c 91       	ld	r23, X
    4bca:	15 97       	sbiw	r26, 0x05	; 5
    4bcc:	89 01       	movw	r16, r18
    4bce:	9a 01       	movw	r18, r20
    4bd0:	af 01       	movw	r20, r30
    4bd2:	12 96       	adiw	r26, 0x02	; 2
    4bd4:	8d 91       	ld	r24, X+
    4bd6:	9c 91       	ld	r25, X
    4bd8:	13 97       	sbiw	r26, 0x03	; 3
    4bda:	6a df       	rcall	.-300    	; 0x4ab0 <mp_call_method_self_n_kw>
    4bdc:	1f 91       	pop	r17
    4bde:	0f 91       	pop	r16
    4be0:	08 95       	ret

00004be2 <mp_arg_error_terse_mismatch>:
    4be2:	82 e0       	ldi	r24, 0x02	; 2
    4be4:	93 e0       	ldi	r25, 0x03	; 3
    4be6:	02 df       	rcall	.-508    	; 0x49ec <mp_raise_TypeError>

00004be8 <mp_arg_check_num_sig>:
    4be8:	cf 92       	push	r12
    4bea:	df 92       	push	r13
    4bec:	ef 92       	push	r14
    4bee:	ff 92       	push	r15
    4bf0:	0f 93       	push	r16
    4bf2:	1f 93       	push	r17
    4bf4:	69 01       	movw	r12, r18
    4bf6:	7a 01       	movw	r14, r20
    4bf8:	0b 2e       	mov	r0, r27
    4bfa:	b1 e1       	ldi	r27, 0x11	; 17
    4bfc:	f6 94       	lsr	r15
    4bfe:	e7 94       	ror	r14
    4c00:	d7 94       	ror	r13
    4c02:	c7 94       	ror	r12
    4c04:	ba 95       	dec	r27
    4c06:	d1 f7       	brne	.-12     	; 0x4bfc <mp_arg_check_num_sig+0x14>
    4c08:	b0 2d       	mov	r27, r0
    4c0a:	f6 01       	movw	r30, r12
    4c0c:	69 01       	movw	r12, r18
    4c0e:	7a 01       	movw	r14, r20
    4c10:	f6 94       	lsr	r15
    4c12:	e7 94       	ror	r14
    4c14:	d7 94       	ror	r13
    4c16:	c7 94       	ror	r12
    4c18:	86 01       	movw	r16, r12
    4c1a:	67 2b       	or	r22, r23
    4c1c:	11 f0       	breq	.+4      	; 0x4c22 <mp_arg_check_num_sig+0x3a>
    4c1e:	20 ff       	sbrs	r18, 0
    4c20:	e0 df       	rcall	.-64     	; 0x4be2 <mp_arg_error_terse_mismatch>
    4c22:	e0 17       	cp	r30, r16
    4c24:	f1 07       	cpc	r31, r17
    4c26:	21 f4       	brne	.+8      	; 0x4c30 <mp_arg_check_num_sig+0x48>
    4c28:	e8 17       	cp	r30, r24
    4c2a:	f9 07       	cpc	r31, r25
    4c2c:	49 f0       	breq	.+18     	; 0x4c40 <mp_arg_check_num_sig+0x58>
    4c2e:	d9 df       	rcall	.-78     	; 0x4be2 <mp_arg_error_terse_mismatch>
    4c30:	8e 17       	cp	r24, r30
    4c32:	9f 07       	cpc	r25, r31
    4c34:	08 f4       	brcc	.+2      	; 0x4c38 <mp_arg_check_num_sig+0x50>
    4c36:	d5 df       	rcall	.-86     	; 0x4be2 <mp_arg_error_terse_mismatch>
    4c38:	08 17       	cp	r16, r24
    4c3a:	19 07       	cpc	r17, r25
    4c3c:	08 f4       	brcc	.+2      	; 0x4c40 <mp_arg_check_num_sig+0x58>
    4c3e:	d1 df       	rcall	.-94     	; 0x4be2 <mp_arg_error_terse_mismatch>
    4c40:	1f 91       	pop	r17
    4c42:	0f 91       	pop	r16
    4c44:	ff 90       	pop	r15
    4c46:	ef 90       	pop	r14
    4c48:	df 90       	pop	r13
    4c4a:	cf 90       	pop	r12
    4c4c:	08 95       	ret

00004c4e <bool_make_new>:
    4c4e:	0f 93       	push	r16
    4c50:	1f 93       	push	r17
    4c52:	cf 93       	push	r28
    4c54:	df 93       	push	r29
    4c56:	eb 01       	movw	r28, r22
    4c58:	ba 01       	movw	r22, r20
    4c5a:	89 01       	movw	r16, r18
    4c5c:	22 e0       	ldi	r18, 0x02	; 2
    4c5e:	30 e0       	ldi	r19, 0x00	; 0
    4c60:	40 e0       	ldi	r20, 0x00	; 0
    4c62:	50 e0       	ldi	r21, 0x00	; 0
    4c64:	ce 01       	movw	r24, r28
    4c66:	c0 df       	rcall	.-128    	; 0x4be8 <mp_arg_check_num_sig>
    4c68:	cd 2b       	or	r28, r29
    4c6a:	51 f0       	breq	.+20     	; 0x4c80 <bool_make_new+0x32>
    4c6c:	f8 01       	movw	r30, r16
    4c6e:	80 81       	ld	r24, Z
    4c70:	91 81       	ldd	r25, Z+1	; 0x01
    4c72:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
    4c76:	81 11       	cpse	r24, r1
    4c78:	06 c0       	rjmp	.+12     	; 0x4c86 <bool_make_new+0x38>
    4c7a:	8e e0       	ldi	r24, 0x0E	; 14
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	05 c0       	rjmp	.+10     	; 0x4c8a <bool_make_new+0x3c>
    4c80:	8e e0       	ldi	r24, 0x0E	; 14
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	02 c0       	rjmp	.+4      	; 0x4c8a <bool_make_new+0x3c>
    4c86:	8e e1       	ldi	r24, 0x1E	; 30
    4c88:	90 e0       	ldi	r25, 0x00	; 0
    4c8a:	df 91       	pop	r29
    4c8c:	cf 91       	pop	r28
    4c8e:	1f 91       	pop	r17
    4c90:	0f 91       	pop	r16
    4c92:	08 95       	ret

00004c94 <mp_obj_exception_make_new>:
    4c94:	af 92       	push	r10
    4c96:	bf 92       	push	r11
    4c98:	cf 92       	push	r12
    4c9a:	df 92       	push	r13
    4c9c:	ef 92       	push	r14
    4c9e:	ff 92       	push	r15
    4ca0:	0f 93       	push	r16
    4ca2:	1f 93       	push	r17
    4ca4:	cf 93       	push	r28
    4ca6:	df 93       	push	r29
    4ca8:	7c 01       	movw	r14, r24
    4caa:	8b 01       	movw	r16, r22
    4cac:	ba 01       	movw	r22, r20
    4cae:	59 01       	movw	r10, r18
    4cb0:	2e ef       	ldi	r18, 0xFE	; 254
    4cb2:	3f ef       	ldi	r19, 0xFF	; 255
    4cb4:	41 e0       	ldi	r20, 0x01	; 1
    4cb6:	50 e0       	ldi	r21, 0x00	; 0
    4cb8:	c8 01       	movw	r24, r16
    4cba:	96 df       	rcall	.-212    	; 0x4be8 <mp_arg_check_num_sig>
    4cbc:	88 e0       	ldi	r24, 0x08	; 8
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    4cc4:	ec 01       	movw	r28, r24
    4cc6:	89 2b       	or	r24, r25
    4cc8:	11 f4       	brne	.+4      	; 0x4cce <mp_obj_exception_make_new+0x3a>
    4cca:	ca e6       	ldi	r28, 0x6A	; 106
    4ccc:	db e6       	ldi	r29, 0x6B	; 107
    4cce:	f9 82       	std	Y+1, r15	; 0x01
    4cd0:	e8 82       	st	Y, r14
    4cd2:	1d 82       	std	Y+5, r1	; 0x05
    4cd4:	1c 82       	std	Y+4, r1	; 0x04
    4cd6:	01 15       	cp	r16, r1
    4cd8:	11 05       	cpc	r17, r1
    4cda:	e1 f0       	breq	.+56     	; 0x4d14 <mp_obj_exception_make_new+0x80>
    4cdc:	68 01       	movw	r12, r16
    4cde:	82 e0       	ldi	r24, 0x02	; 2
    4ce0:	c8 0e       	add	r12, r24
    4ce2:	d1 1c       	adc	r13, r1
    4ce4:	cc 0c       	add	r12, r12
    4ce6:	dd 1c       	adc	r13, r13
    4ce8:	c6 01       	movw	r24, r12
    4cea:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    4cee:	7c 01       	movw	r14, r24
    4cf0:	89 2b       	or	r24, r25
    4cf2:	b9 f0       	breq	.+46     	; 0x4d22 <mp_obj_exception_make_new+0x8e>
    4cf4:	8e ea       	ldi	r24, 0xAE	; 174
    4cf6:	9a e1       	ldi	r25, 0x1A	; 26
    4cf8:	f7 01       	movw	r30, r14
    4cfa:	91 83       	std	Z+1, r25	; 0x01
    4cfc:	80 83       	st	Z, r24
    4cfe:	13 83       	std	Z+3, r17	; 0x03
    4d00:	02 83       	std	Z+2, r16	; 0x02
    4d02:	a6 01       	movw	r20, r12
    4d04:	44 50       	subi	r20, 0x04	; 4
    4d06:	51 09       	sbc	r21, r1
    4d08:	b5 01       	movw	r22, r10
    4d0a:	c7 01       	movw	r24, r14
    4d0c:	04 96       	adiw	r24, 0x04	; 4
    4d0e:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    4d12:	0d c0       	rjmp	.+26     	; 0x4d2e <mp_obj_exception_make_new+0x9a>
    4d14:	0f 2e       	mov	r0, r31
    4d16:	fa ea       	ldi	r31, 0xAA	; 170
    4d18:	ef 2e       	mov	r14, r31
    4d1a:	fa e1       	ldi	r31, 0x1A	; 26
    4d1c:	ff 2e       	mov	r15, r31
    4d1e:	f0 2d       	mov	r31, r0
    4d20:	06 c0       	rjmp	.+12     	; 0x4d2e <mp_obj_exception_make_new+0x9a>
    4d22:	0f 2e       	mov	r0, r31
    4d24:	fa ea       	ldi	r31, 0xAA	; 170
    4d26:	ef 2e       	mov	r14, r31
    4d28:	fa e1       	ldi	r31, 0x1A	; 26
    4d2a:	ff 2e       	mov	r15, r31
    4d2c:	f0 2d       	mov	r31, r0
    4d2e:	ff 82       	std	Y+7, r15	; 0x07
    4d30:	ee 82       	std	Y+6, r14	; 0x06
    4d32:	ce 01       	movw	r24, r28
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	df 90       	pop	r13
    4d42:	cf 90       	pop	r12
    4d44:	bf 90       	pop	r11
    4d46:	af 90       	pop	r10
    4d48:	08 95       	ret

00004d4a <mp_obj_new_exception>:
    4d4a:	fc 01       	movw	r30, r24
    4d4c:	20 85       	ldd	r18, Z+8	; 0x08
    4d4e:	31 85       	ldd	r19, Z+9	; 0x09
    4d50:	2a 54       	subi	r18, 0x4A	; 74
    4d52:	36 42       	sbci	r19, 0x26	; 38
    4d54:	11 f0       	breq	.+4      	; 0x4d5a <mp_obj_new_exception+0x10>
    4d56:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	40 e0       	ldi	r20, 0x00	; 0
    4d60:	50 e0       	ldi	r21, 0x00	; 0
    4d62:	60 e0       	ldi	r22, 0x00	; 0
    4d64:	70 e0       	ldi	r23, 0x00	; 0
    4d66:	96 cf       	rjmp	.-212    	; 0x4c94 <mp_obj_exception_make_new>
    4d68:	08 95       	ret

00004d6a <mp_obj_new_exception_msg>:
    4d6a:	cf 92       	push	r12
    4d6c:	df 92       	push	r13
    4d6e:	ef 92       	push	r14
    4d70:	ff 92       	push	r15
    4d72:	0f 93       	push	r16
    4d74:	1f 93       	push	r17
    4d76:	cf 93       	push	r28
    4d78:	df 93       	push	r29
    4d7a:	00 d0       	rcall	.+0      	; 0x4d7c <mp_obj_new_exception_msg+0x12>
    4d7c:	cd b7       	in	r28, 0x3d	; 61
    4d7e:	de b7       	in	r29, 0x3e	; 62
    4d80:	6c 01       	movw	r12, r24
    4d82:	7b 01       	movw	r14, r22
    4d84:	fc 01       	movw	r30, r24
    4d86:	80 85       	ldd	r24, Z+8	; 0x08
    4d88:	91 85       	ldd	r25, Z+9	; 0x09
    4d8a:	8a 54       	subi	r24, 0x4A	; 74
    4d8c:	96 42       	sbci	r25, 0x26	; 38
    4d8e:	11 f0       	breq	.+4      	; 0x4d94 <mp_obj_new_exception_msg+0x2a>
    4d90:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4d94:	88 e0       	ldi	r24, 0x08	; 8
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    4d9c:	8c 01       	movw	r16, r24
    4d9e:	89 2b       	or	r24, r25
    4da0:	49 f4       	brne	.+18     	; 0x4db4 <mp_obj_new_exception_msg+0x4a>
    4da2:	20 e0       	ldi	r18, 0x00	; 0
    4da4:	30 e0       	ldi	r19, 0x00	; 0
    4da6:	40 e0       	ldi	r20, 0x00	; 0
    4da8:	50 e0       	ldi	r21, 0x00	; 0
    4daa:	60 e0       	ldi	r22, 0x00	; 0
    4dac:	70 e0       	ldi	r23, 0x00	; 0
    4dae:	c6 01       	movw	r24, r12
    4db0:	71 df       	rcall	.-286    	; 0x4c94 <mp_obj_exception_make_new>
    4db2:	23 c0       	rjmp	.+70     	; 0x4dfa <mp_obj_new_exception_msg+0x90>
    4db4:	82 e1       	ldi	r24, 0x12	; 18
    4db6:	9b e1       	ldi	r25, 0x1B	; 27
    4db8:	f8 01       	movw	r30, r16
    4dba:	91 83       	std	Z+1, r25	; 0x01
    4dbc:	80 83       	st	Z, r24
    4dbe:	f7 01       	movw	r30, r14
    4dc0:	01 90       	ld	r0, Z+
    4dc2:	00 20       	and	r0, r0
    4dc4:	e9 f7       	brne	.-6      	; 0x4dc0 <mp_obj_new_exception_msg+0x56>
    4dc6:	31 97       	sbiw	r30, 0x01	; 1
    4dc8:	bf 01       	movw	r22, r30
    4dca:	6e 19       	sub	r22, r14
    4dcc:	7f 09       	sbc	r23, r15
    4dce:	f8 01       	movw	r30, r16
    4dd0:	75 83       	std	Z+5, r23	; 0x05
    4dd2:	64 83       	std	Z+4, r22	; 0x04
    4dd4:	f7 82       	std	Z+7, r15	; 0x07
    4dd6:	e6 82       	std	Z+6, r14	; 0x06
    4dd8:	c7 01       	movw	r24, r14
    4dda:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    4dde:	f8 01       	movw	r30, r16
    4de0:	93 83       	std	Z+3, r25	; 0x03
    4de2:	82 83       	std	Z+2, r24	; 0x02
    4de4:	1a 83       	std	Y+2, r17	; 0x02
    4de6:	09 83       	std	Y+1, r16	; 0x01
    4de8:	9e 01       	movw	r18, r28
    4dea:	2f 5f       	subi	r18, 0xFF	; 255
    4dec:	3f 4f       	sbci	r19, 0xFF	; 255
    4dee:	40 e0       	ldi	r20, 0x00	; 0
    4df0:	50 e0       	ldi	r21, 0x00	; 0
    4df2:	61 e0       	ldi	r22, 0x01	; 1
    4df4:	70 e0       	ldi	r23, 0x00	; 0
    4df6:	c6 01       	movw	r24, r12
    4df8:	4d df       	rcall	.-358    	; 0x4c94 <mp_obj_exception_make_new>
    4dfa:	0f 90       	pop	r0
    4dfc:	0f 90       	pop	r0
    4dfe:	df 91       	pop	r29
    4e00:	cf 91       	pop	r28
    4e02:	1f 91       	pop	r17
    4e04:	0f 91       	pop	r16
    4e06:	ff 90       	pop	r15
    4e08:	ef 90       	pop	r14
    4e0a:	df 90       	pop	r13
    4e0c:	cf 90       	pop	r12
    4e0e:	08 95       	ret

00004e10 <compile_syntax_error>:
    4e10:	0f 93       	push	r16
    4e12:	1f 93       	push	r17
    4e14:	cf 93       	push	r28
    4e16:	df 93       	push	r29
    4e18:	fc 01       	movw	r30, r24
    4e1a:	25 81       	ldd	r18, Z+5	; 0x05
    4e1c:	36 81       	ldd	r19, Z+6	; 0x06
    4e1e:	23 2b       	or	r18, r19
    4e20:	61 f4       	brne	.+24     	; 0x4e3a <compile_syntax_error+0x2a>
    4e22:	8b 01       	movw	r16, r22
    4e24:	ec 01       	movw	r28, r24
    4e26:	ba 01       	movw	r22, r20
    4e28:	88 eb       	ldi	r24, 0xB8	; 184
    4e2a:	9f e1       	ldi	r25, 0x1F	; 31
    4e2c:	9e df       	rcall	.-196    	; 0x4d6a <mp_obj_new_exception_msg>
    4e2e:	9e 83       	std	Y+6, r25	; 0x06
    4e30:	8d 83       	std	Y+5, r24	; 0x05
    4e32:	b8 01       	movw	r22, r16
    4e34:	ce 01       	movw	r24, r28
    4e36:	0e 94 a3 01 	call	0x346	; 0x346 <compile_error_set_line>
    4e3a:	df 91       	pop	r29
    4e3c:	cf 91       	pop	r28
    4e3e:	1f 91       	pop	r17
    4e40:	0f 91       	pop	r16
    4e42:	08 95       	ret

00004e44 <compile_star_expr>:
    4e44:	4e e1       	ldi	r20, 0x1E	; 30
    4e46:	53 e0       	ldi	r21, 0x03	; 3
    4e48:	e3 cf       	rjmp	.-58     	; 0x4e10 <compile_syntax_error>
    4e4a:	08 95       	ret

00004e4c <compile_break_cont_stmt>:
    4e4c:	0f 93       	push	r16
    4e4e:	1f 93       	push	r17
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	ec 01       	movw	r28, r24
    4e56:	fb 01       	movw	r30, r22
    4e58:	84 81       	ldd	r24, Z+4	; 0x04
    4e5a:	89 30       	cpi	r24, 0x09	; 9
    4e5c:	19 f4       	brne	.+6      	; 0x4e64 <compile_break_cont_stmt+0x18>
    4e5e:	0f 85       	ldd	r16, Y+15	; 0x0f
    4e60:	18 89       	ldd	r17, Y+16	; 0x10
    4e62:	02 c0       	rjmp	.+4      	; 0x4e68 <compile_break_cont_stmt+0x1c>
    4e64:	09 89       	ldd	r16, Y+17	; 0x11
    4e66:	1a 89       	ldd	r17, Y+18	; 0x12
    4e68:	0f 3f       	cpi	r16, 0xFF	; 255
    4e6a:	ff ef       	ldi	r31, 0xFF	; 255
    4e6c:	1f 07       	cpc	r17, r31
    4e6e:	21 f4       	brne	.+8      	; 0x4e78 <compile_break_cont_stmt+0x2c>
    4e70:	4b e3       	ldi	r20, 0x3B	; 59
    4e72:	53 e0       	ldi	r21, 0x03	; 3
    4e74:	ce 01       	movw	r24, r28
    4e76:	cc df       	rcall	.-104    	; 0x4e10 <compile_syntax_error>
    4e78:	4b 89       	ldd	r20, Y+19	; 0x13
    4e7a:	5c 89       	ldd	r21, Y+20	; 0x14
    4e7c:	8d 89       	ldd	r24, Y+21	; 0x15
    4e7e:	9e 89       	ldd	r25, Y+22	; 0x16
    4e80:	48 17       	cp	r20, r24
    4e82:	59 07       	cpc	r21, r25
    4e84:	10 f4       	brcc	.+4      	; 0x4e8a <compile_break_cont_stmt+0x3e>
    4e86:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4e8a:	48 1b       	sub	r20, r24
    4e8c:	59 0b       	sbc	r21, r25
    4e8e:	b8 01       	movw	r22, r16
    4e90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e94:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <mp_emit_bc_unwind_jump>
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	1f 91       	pop	r17
    4e9e:	0f 91       	pop	r16
    4ea0:	08 95       	ret

00004ea2 <mp_parse_num_decimal>:
    4ea2:	6b e5       	ldi	r22, 0x5B	; 91
    4ea4:	73 e0       	ldi	r23, 0x03	; 3
    4ea6:	88 e5       	ldi	r24, 0x58	; 88
    4ea8:	9f e1       	ldi	r25, 0x1F	; 31
    4eaa:	5f df       	rcall	.-322    	; 0x4d6a <mp_obj_new_exception_msg>
    4eac:	b8 01       	movw	r22, r16
    4eae:	43 dd       	rcall	.-1402   	; 0x4936 <raise_exc>

00004eb0 <mp_make_raise_obj>:
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
    4eb4:	d8 2f       	mov	r29, r24
    4eb6:	c9 2f       	mov	r28, r25
    4eb8:	f9 d9       	rcall	.-3086   	; 0x42ac <mp_obj_is_exception_type>
    4eba:	88 23       	and	r24, r24
    4ebc:	59 f0       	breq	.+22     	; 0x4ed4 <mp_make_raise_obj+0x24>
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
    4ec0:	30 e0       	ldi	r19, 0x00	; 0
    4ec2:	40 e0       	ldi	r20, 0x00	; 0
    4ec4:	50 e0       	ldi	r21, 0x00	; 0
    4ec6:	60 e0       	ldi	r22, 0x00	; 0
    4ec8:	70 e0       	ldi	r23, 0x00	; 0
    4eca:	8d 2f       	mov	r24, r29
    4ecc:	9c 2f       	mov	r25, r28
    4ece:	92 dd       	rcall	.-1244   	; 0x49f4 <mp_call_function_n_kw>
    4ed0:	d8 2f       	mov	r29, r24
    4ed2:	c9 2f       	mov	r28, r25
    4ed4:	8d 2f       	mov	r24, r29
    4ed6:	9c 2f       	mov	r25, r28
    4ed8:	00 da       	rcall	.-3072   	; 0x42da <mp_obj_is_exception_instance>
    4eda:	81 11       	cpse	r24, r1
    4edc:	06 c0       	rjmp	.+12     	; 0x4eea <mp_make_raise_obj+0x3a>
    4ede:	69 e7       	ldi	r22, 0x79	; 121
    4ee0:	73 e0       	ldi	r23, 0x03	; 3
    4ee2:	88 e7       	ldi	r24, 0x78	; 120
    4ee4:	9f e1       	ldi	r25, 0x1F	; 31
    4ee6:	41 df       	rcall	.-382    	; 0x4d6a <mp_obj_new_exception_msg>
    4ee8:	02 c0       	rjmp	.+4      	; 0x4eee <mp_make_raise_obj+0x3e>
    4eea:	8d 2f       	mov	r24, r29
    4eec:	9c 2f       	mov	r25, r28
    4eee:	df 91       	pop	r29
    4ef0:	cf 91       	pop	r28
    4ef2:	08 95       	ret

00004ef4 <mp_obj_new_exception_msg_vlist>:
    4ef4:	6f 92       	push	r6
    4ef6:	7f 92       	push	r7
    4ef8:	8f 92       	push	r8
    4efa:	9f 92       	push	r9
    4efc:	af 92       	push	r10
    4efe:	bf 92       	push	r11
    4f00:	cf 92       	push	r12
    4f02:	df 92       	push	r13
    4f04:	ef 92       	push	r14
    4f06:	ff 92       	push	r15
    4f08:	0f 93       	push	r16
    4f0a:	1f 93       	push	r17
    4f0c:	cf 93       	push	r28
    4f0e:	df 93       	push	r29
    4f10:	cd b7       	in	r28, 0x3d	; 61
    4f12:	de b7       	in	r29, 0x3e	; 62
    4f14:	2d 97       	sbiw	r28, 0x0d	; 13
    4f16:	0f b6       	in	r0, 0x3f	; 63
    4f18:	f8 94       	cli
    4f1a:	de bf       	out	0x3e, r29	; 62
    4f1c:	0f be       	out	0x3f, r0	; 63
    4f1e:	cd bf       	out	0x3d, r28	; 61
    4f20:	5c 01       	movw	r10, r24
    4f22:	6b 01       	movw	r12, r22
    4f24:	3a 01       	movw	r6, r20
    4f26:	67 2b       	or	r22, r23
    4f28:	11 f4       	brne	.+4      	; 0x4f2e <mp_obj_new_exception_msg_vlist+0x3a>
    4f2a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4f2e:	fc 01       	movw	r30, r24
    4f30:	80 85       	ldd	r24, Z+8	; 0x08
    4f32:	91 85       	ldd	r25, Z+9	; 0x09
    4f34:	8a 54       	subi	r24, 0x4A	; 74
    4f36:	96 42       	sbci	r25, 0x26	; 38
    4f38:	11 f0       	breq	.+4      	; 0x4f3e <mp_obj_new_exception_msg_vlist+0x4a>
    4f3a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    4f3e:	88 e0       	ldi	r24, 0x08	; 8
    4f40:	90 e0       	ldi	r25, 0x00	; 0
    4f42:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    4f46:	8c 01       	movw	r16, r24
    4f48:	f6 01       	movw	r30, r12
    4f4a:	01 90       	ld	r0, Z+
    4f4c:	00 20       	and	r0, r0
    4f4e:	e9 f7       	brne	.-6      	; 0x4f4a <mp_obj_new_exception_msg_vlist+0x56>
    4f50:	31 97       	sbiw	r30, 0x01	; 1
    4f52:	7f 01       	movw	r14, r30
    4f54:	ec 18       	sub	r14, r12
    4f56:	fd 08       	sbc	r15, r13
    4f58:	47 01       	movw	r8, r14
    4f5a:	2f ef       	ldi	r18, 0xFF	; 255
    4f5c:	82 1a       	sub	r8, r18
    4f5e:	92 0a       	sbc	r9, r18
    4f60:	c4 01       	movw	r24, r8
    4f62:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    4f66:	01 15       	cp	r16, r1
    4f68:	11 05       	cpc	r17, r1
    4f6a:	49 f4       	brne	.+18     	; 0x4f7e <mp_obj_new_exception_msg_vlist+0x8a>
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	40 e0       	ldi	r20, 0x00	; 0
    4f72:	50 e0       	ldi	r21, 0x00	; 0
    4f74:	60 e0       	ldi	r22, 0x00	; 0
    4f76:	70 e0       	ldi	r23, 0x00	; 0
    4f78:	c5 01       	movw	r24, r10
    4f7a:	8c de       	rcall	.-744    	; 0x4c94 <mp_obj_exception_make_new>
    4f7c:	47 c0       	rjmp	.+142    	; 0x500c <mp_obj_new_exception_msg_vlist+0x118>
    4f7e:	00 97       	sbiw	r24, 0x00	; 0
    4f80:	31 f4       	brne	.+12     	; 0x4f8e <mp_obj_new_exception_msg_vlist+0x9a>
    4f82:	f8 01       	movw	r30, r16
    4f84:	f5 82       	std	Z+5, r15	; 0x05
    4f86:	e4 82       	std	Z+4, r14	; 0x04
    4f88:	d7 82       	std	Z+7, r13	; 0x07
    4f8a:	c6 82       	std	Z+6, r12	; 0x06
    4f8c:	26 c0       	rjmp	.+76     	; 0x4fda <mp_obj_new_exception_msg_vlist+0xe6>
    4f8e:	21 e0       	ldi	r18, 0x01	; 1
    4f90:	2b 83       	std	Y+3, r18	; 0x03
    4f92:	9d 82       	std	Y+5, r9	; 0x05
    4f94:	8c 82       	std	Y+4, r8	; 0x04
    4f96:	1f 82       	std	Y+7, r1	; 0x07
    4f98:	1e 82       	std	Y+6, r1	; 0x06
    4f9a:	99 87       	std	Y+9, r25	; 0x09
    4f9c:	88 87       	std	Y+8, r24	; 0x08
    4f9e:	ce 01       	movw	r24, r28
    4fa0:	03 96       	adiw	r24, 0x03	; 3
    4fa2:	9b 87       	std	Y+11, r25	; 0x0b
    4fa4:	8a 87       	std	Y+10, r24	; 0x0a
    4fa6:	84 e6       	ldi	r24, 0x64	; 100
    4fa8:	9a e0       	ldi	r25, 0x0A	; 10
    4faa:	9d 87       	std	Y+13, r25	; 0x0d
    4fac:	8c 87       	std	Y+12, r24	; 0x0c
    4fae:	a3 01       	movw	r20, r6
    4fb0:	b6 01       	movw	r22, r12
    4fb2:	ce 01       	movw	r24, r28
    4fb4:	0a 96       	adiw	r24, 0x0a	; 10
    4fb6:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <mp_vprintf>
    4fba:	e8 85       	ldd	r30, Y+8	; 0x08
    4fbc:	f9 85       	ldd	r31, Y+9	; 0x09
    4fbe:	8e 81       	ldd	r24, Y+6	; 0x06
    4fc0:	9f 81       	ldd	r25, Y+7	; 0x07
    4fc2:	e8 0f       	add	r30, r24
    4fc4:	f9 1f       	adc	r31, r25
    4fc6:	10 82       	st	Z, r1
    4fc8:	8e 81       	ldd	r24, Y+6	; 0x06
    4fca:	9f 81       	ldd	r25, Y+7	; 0x07
    4fcc:	f8 01       	movw	r30, r16
    4fce:	95 83       	std	Z+5, r25	; 0x05
    4fd0:	84 83       	std	Z+4, r24	; 0x04
    4fd2:	88 85       	ldd	r24, Y+8	; 0x08
    4fd4:	99 85       	ldd	r25, Y+9	; 0x09
    4fd6:	97 83       	std	Z+7, r25	; 0x07
    4fd8:	86 83       	std	Z+6, r24	; 0x06
    4fda:	82 e1       	ldi	r24, 0x12	; 18
    4fdc:	9b e1       	ldi	r25, 0x1B	; 27
    4fde:	f8 01       	movw	r30, r16
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	80 83       	st	Z, r24
    4fe4:	64 81       	ldd	r22, Z+4	; 0x04
    4fe6:	75 81       	ldd	r23, Z+5	; 0x05
    4fe8:	86 81       	ldd	r24, Z+6	; 0x06
    4fea:	97 81       	ldd	r25, Z+7	; 0x07
    4fec:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    4ff0:	f8 01       	movw	r30, r16
    4ff2:	93 83       	std	Z+3, r25	; 0x03
    4ff4:	82 83       	std	Z+2, r24	; 0x02
    4ff6:	1a 83       	std	Y+2, r17	; 0x02
    4ff8:	09 83       	std	Y+1, r16	; 0x01
    4ffa:	9e 01       	movw	r18, r28
    4ffc:	2f 5f       	subi	r18, 0xFF	; 255
    4ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    5000:	40 e0       	ldi	r20, 0x00	; 0
    5002:	50 e0       	ldi	r21, 0x00	; 0
    5004:	61 e0       	ldi	r22, 0x01	; 1
    5006:	70 e0       	ldi	r23, 0x00	; 0
    5008:	c5 01       	movw	r24, r10
    500a:	44 de       	rcall	.-888    	; 0x4c94 <mp_obj_exception_make_new>
    500c:	2d 96       	adiw	r28, 0x0d	; 13
    500e:	0f b6       	in	r0, 0x3f	; 63
    5010:	f8 94       	cli
    5012:	de bf       	out	0x3e, r29	; 62
    5014:	0f be       	out	0x3f, r0	; 63
    5016:	cd bf       	out	0x3d, r28	; 61
    5018:	df 91       	pop	r29
    501a:	cf 91       	pop	r28
    501c:	1f 91       	pop	r17
    501e:	0f 91       	pop	r16
    5020:	ff 90       	pop	r15
    5022:	ef 90       	pop	r14
    5024:	df 90       	pop	r13
    5026:	cf 90       	pop	r12
    5028:	bf 90       	pop	r11
    502a:	af 90       	pop	r10
    502c:	9f 90       	pop	r9
    502e:	8f 90       	pop	r8
    5030:	7f 90       	pop	r7
    5032:	6f 90       	pop	r6
    5034:	08 95       	ret

00005036 <fun_builtin_0_call>:
    5036:	cf 93       	push	r28
    5038:	df 93       	push	r29
    503a:	ec 01       	movw	r28, r24
    503c:	cb 01       	movw	r24, r22
    503e:	ba 01       	movw	r22, r20
    5040:	9e 01       	movw	r18, r28
    5042:	23 70       	andi	r18, 0x03	; 3
    5044:	33 27       	eor	r19, r19
    5046:	23 2b       	or	r18, r19
    5048:	29 f4       	brne	.+10     	; 0x5054 <fun_builtin_0_call+0x1e>
    504a:	28 81       	ld	r18, Y
    504c:	39 81       	ldd	r19, Y+1	; 0x01
    504e:	28 53       	subi	r18, 0x38	; 56
    5050:	3f 41       	sbci	r19, 0x1F	; 31
    5052:	11 f0       	breq	.+4      	; 0x5058 <fun_builtin_0_call+0x22>
    5054:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5058:	20 e0       	ldi	r18, 0x00	; 0
    505a:	30 e0       	ldi	r19, 0x00	; 0
    505c:	a9 01       	movw	r20, r18
    505e:	c4 dd       	rcall	.-1144   	; 0x4be8 <mp_arg_check_num_sig>
    5060:	ea 81       	ldd	r30, Y+2	; 0x02
    5062:	fb 81       	ldd	r31, Y+3	; 0x03
    5064:	09 95       	icall
    5066:	df 91       	pop	r29
    5068:	cf 91       	pop	r28
    506a:	08 95       	ret

0000506c <fun_builtin_1_call>:
    506c:	0f 93       	push	r16
    506e:	1f 93       	push	r17
    5070:	cf 93       	push	r28
    5072:	df 93       	push	r29
    5074:	ec 01       	movw	r28, r24
    5076:	cb 01       	movw	r24, r22
    5078:	ba 01       	movw	r22, r20
    507a:	89 01       	movw	r16, r18
    507c:	9e 01       	movw	r18, r28
    507e:	23 70       	andi	r18, 0x03	; 3
    5080:	33 27       	eor	r19, r19
    5082:	23 2b       	or	r18, r19
    5084:	29 f4       	brne	.+10     	; 0x5090 <fun_builtin_1_call+0x24>
    5086:	28 81       	ld	r18, Y
    5088:	39 81       	ldd	r19, Y+1	; 0x01
    508a:	28 51       	subi	r18, 0x18	; 24
    508c:	3f 41       	sbci	r19, 0x1F	; 31
    508e:	11 f0       	breq	.+4      	; 0x5094 <fun_builtin_1_call+0x28>
    5090:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5094:	22 e0       	ldi	r18, 0x02	; 2
    5096:	30 e0       	ldi	r19, 0x00	; 0
    5098:	a9 01       	movw	r20, r18
    509a:	a6 dd       	rcall	.-1204   	; 0x4be8 <mp_arg_check_num_sig>
    509c:	ea 81       	ldd	r30, Y+2	; 0x02
    509e:	fb 81       	ldd	r31, Y+3	; 0x03
    50a0:	d8 01       	movw	r26, r16
    50a2:	8d 91       	ld	r24, X+
    50a4:	9c 91       	ld	r25, X
    50a6:	09 95       	icall
    50a8:	df 91       	pop	r29
    50aa:	cf 91       	pop	r28
    50ac:	1f 91       	pop	r17
    50ae:	0f 91       	pop	r16
    50b0:	08 95       	ret

000050b2 <fun_builtin_2_call>:
    50b2:	0f 93       	push	r16
    50b4:	1f 93       	push	r17
    50b6:	cf 93       	push	r28
    50b8:	df 93       	push	r29
    50ba:	ec 01       	movw	r28, r24
    50bc:	cb 01       	movw	r24, r22
    50be:	ba 01       	movw	r22, r20
    50c0:	89 01       	movw	r16, r18
    50c2:	9e 01       	movw	r18, r28
    50c4:	23 70       	andi	r18, 0x03	; 3
    50c6:	33 27       	eor	r19, r19
    50c8:	23 2b       	or	r18, r19
    50ca:	29 f4       	brne	.+10     	; 0x50d6 <fun_builtin_2_call+0x24>
    50cc:	28 81       	ld	r18, Y
    50ce:	39 81       	ldd	r19, Y+1	; 0x01
    50d0:	28 5f       	subi	r18, 0xF8	; 248
    50d2:	3e 41       	sbci	r19, 0x1E	; 30
    50d4:	11 f0       	breq	.+4      	; 0x50da <fun_builtin_2_call+0x28>
    50d6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    50da:	24 e0       	ldi	r18, 0x04	; 4
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	a9 01       	movw	r20, r18
    50e0:	83 dd       	rcall	.-1274   	; 0x4be8 <mp_arg_check_num_sig>
    50e2:	d8 01       	movw	r26, r16
    50e4:	12 96       	adiw	r26, 0x02	; 2
    50e6:	6d 91       	ld	r22, X+
    50e8:	7c 91       	ld	r23, X
    50ea:	13 97       	sbiw	r26, 0x03	; 3
    50ec:	ea 81       	ldd	r30, Y+2	; 0x02
    50ee:	fb 81       	ldd	r31, Y+3	; 0x03
    50f0:	8d 91       	ld	r24, X+
    50f2:	9c 91       	ld	r25, X
    50f4:	09 95       	icall
    50f6:	df 91       	pop	r29
    50f8:	cf 91       	pop	r28
    50fa:	1f 91       	pop	r17
    50fc:	0f 91       	pop	r16
    50fe:	08 95       	ret

00005100 <fun_builtin_3_call>:
    5100:	0f 93       	push	r16
    5102:	1f 93       	push	r17
    5104:	cf 93       	push	r28
    5106:	df 93       	push	r29
    5108:	ec 01       	movw	r28, r24
    510a:	cb 01       	movw	r24, r22
    510c:	ba 01       	movw	r22, r20
    510e:	89 01       	movw	r16, r18
    5110:	9e 01       	movw	r18, r28
    5112:	23 70       	andi	r18, 0x03	; 3
    5114:	33 27       	eor	r19, r19
    5116:	23 2b       	or	r18, r19
    5118:	29 f4       	brne	.+10     	; 0x5124 <fun_builtin_3_call+0x24>
    511a:	28 81       	ld	r18, Y
    511c:	39 81       	ldd	r19, Y+1	; 0x01
    511e:	28 5d       	subi	r18, 0xD8	; 216
    5120:	3e 41       	sbci	r19, 0x1E	; 30
    5122:	11 f0       	breq	.+4      	; 0x5128 <fun_builtin_3_call+0x28>
    5124:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5128:	26 e0       	ldi	r18, 0x06	; 6
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	a9 01       	movw	r20, r18
    512e:	5c dd       	rcall	.-1352   	; 0x4be8 <mp_arg_check_num_sig>
    5130:	d8 01       	movw	r26, r16
    5132:	14 96       	adiw	r26, 0x04	; 4
    5134:	4d 91       	ld	r20, X+
    5136:	5c 91       	ld	r21, X
    5138:	15 97       	sbiw	r26, 0x05	; 5
    513a:	12 96       	adiw	r26, 0x02	; 2
    513c:	6d 91       	ld	r22, X+
    513e:	7c 91       	ld	r23, X
    5140:	13 97       	sbiw	r26, 0x03	; 3
    5142:	ea 81       	ldd	r30, Y+2	; 0x02
    5144:	fb 81       	ldd	r31, Y+3	; 0x03
    5146:	8d 91       	ld	r24, X+
    5148:	9c 91       	ld	r25, X
    514a:	09 95       	icall
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	1f 91       	pop	r17
    5152:	0f 91       	pop	r16
    5154:	08 95       	ret

00005156 <fun_builtin_var_call>:
    5156:	9f 92       	push	r9
    5158:	af 92       	push	r10
    515a:	bf 92       	push	r11
    515c:	cf 92       	push	r12
    515e:	df 92       	push	r13
    5160:	ef 92       	push	r14
    5162:	ff 92       	push	r15
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	00 d0       	rcall	.+0      	; 0x516e <fun_builtin_var_call+0x18>
    516e:	00 d0       	rcall	.+0      	; 0x5170 <fun_builtin_var_call+0x1a>
    5170:	00 d0       	rcall	.+0      	; 0x5172 <fun_builtin_var_call+0x1c>
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
    5176:	8c 01       	movw	r16, r24
    5178:	6b 01       	movw	r12, r22
    517a:	e4 2e       	mov	r14, r20
    517c:	f5 2e       	mov	r15, r21
    517e:	59 01       	movw	r10, r18
    5180:	83 70       	andi	r24, 0x03	; 3
    5182:	99 27       	eor	r25, r25
    5184:	89 2b       	or	r24, r25
    5186:	31 f4       	brne	.+12     	; 0x5194 <fun_builtin_var_call+0x3e>
    5188:	d8 01       	movw	r26, r16
    518a:	8d 91       	ld	r24, X+
    518c:	9c 91       	ld	r25, X
    518e:	88 5b       	subi	r24, 0xB8	; 184
    5190:	9e 41       	sbci	r25, 0x1E	; 30
    5192:	11 f0       	breq	.+4      	; 0x5198 <fun_builtin_var_call+0x42>
    5194:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5198:	f8 01       	movw	r30, r16
    519a:	92 80       	ldd	r9, Z+2	; 0x02
    519c:	33 81       	ldd	r19, Z+3	; 0x03
    519e:	44 81       	ldd	r20, Z+4	; 0x04
    51a0:	55 81       	ldd	r21, Z+5	; 0x05
    51a2:	29 2d       	mov	r18, r9
    51a4:	6e 2d       	mov	r22, r14
    51a6:	7f 2d       	mov	r23, r15
    51a8:	c6 01       	movw	r24, r12
    51aa:	1e dd       	rcall	.-1476   	; 0x4be8 <mp_arg_check_num_sig>
    51ac:	90 fe       	sbrs	r9, 0
    51ae:	29 c0       	rjmp	.+82     	; 0x5202 <fun_builtin_var_call+0xac>
    51b0:	eb 82       	std	Y+3, r14	; 0x03
    51b2:	fc 82       	std	Y+4, r15	; 0x04
    51b4:	9e 2d       	mov	r25, r14
    51b6:	99 0f       	add	r25, r25
    51b8:	99 0f       	add	r25, r25
    51ba:	99 0f       	add	r25, r25
    51bc:	89 81       	ldd	r24, Y+1	; 0x01
    51be:	87 70       	andi	r24, 0x07	; 7
    51c0:	ff 0c       	add	r15, r15
    51c2:	ff 0c       	add	r15, r15
    51c4:	ff 0c       	add	r15, r15
    51c6:	e6 94       	lsr	r14
    51c8:	e6 94       	lsr	r14
    51ca:	e6 94       	lsr	r14
    51cc:	e6 94       	lsr	r14
    51ce:	e6 94       	lsr	r14
    51d0:	fe 28       	or	r15, r14
    51d2:	fa 82       	std	Y+2, r15	; 0x02
    51d4:	89 2b       	or	r24, r25
    51d6:	83 60       	ori	r24, 0x03	; 3
    51d8:	84 60       	ori	r24, 0x04	; 4
    51da:	89 83       	std	Y+1, r24	; 0x01
    51dc:	c6 01       	movw	r24, r12
    51de:	88 0f       	add	r24, r24
    51e0:	99 1f       	adc	r25, r25
    51e2:	8a 0d       	add	r24, r10
    51e4:	9b 1d       	adc	r25, r11
    51e6:	9e 83       	std	Y+6, r25	; 0x06
    51e8:	8d 83       	std	Y+5, r24	; 0x05
    51ea:	d8 01       	movw	r26, r16
    51ec:	16 96       	adiw	r26, 0x06	; 6
    51ee:	ed 91       	ld	r30, X+
    51f0:	fc 91       	ld	r31, X
    51f2:	17 97       	sbiw	r26, 0x07	; 7
    51f4:	ae 01       	movw	r20, r28
    51f6:	4f 5f       	subi	r20, 0xFF	; 255
    51f8:	5f 4f       	sbci	r21, 0xFF	; 255
    51fa:	b5 01       	movw	r22, r10
    51fc:	c6 01       	movw	r24, r12
    51fe:	09 95       	icall
    5200:	08 c0       	rjmp	.+16     	; 0x5212 <fun_builtin_var_call+0xbc>
    5202:	d8 01       	movw	r26, r16
    5204:	16 96       	adiw	r26, 0x06	; 6
    5206:	ed 91       	ld	r30, X+
    5208:	fc 91       	ld	r31, X
    520a:	17 97       	sbiw	r26, 0x07	; 7
    520c:	b5 01       	movw	r22, r10
    520e:	c6 01       	movw	r24, r12
    5210:	09 95       	icall
    5212:	26 96       	adiw	r28, 0x06	; 6
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	f8 94       	cli
    5218:	de bf       	out	0x3e, r29	; 62
    521a:	0f be       	out	0x3f, r0	; 63
    521c:	cd bf       	out	0x3d, r28	; 61
    521e:	df 91       	pop	r29
    5220:	cf 91       	pop	r28
    5222:	1f 91       	pop	r17
    5224:	0f 91       	pop	r16
    5226:	ff 90       	pop	r15
    5228:	ef 90       	pop	r14
    522a:	df 90       	pop	r13
    522c:	cf 90       	pop	r12
    522e:	bf 90       	pop	r11
    5230:	af 90       	pop	r10
    5232:	9f 90       	pop	r9
    5234:	08 95       	ret

00005236 <mp_obj_get_array>:
    5236:	fc 01       	movw	r30, r24
    5238:	83 70       	andi	r24, 0x03	; 3
    523a:	99 27       	eor	r25, r25
    523c:	89 2b       	or	r24, r25
    523e:	c1 f4       	brne	.+48     	; 0x5270 <mp_obj_get_array+0x3a>
    5240:	80 81       	ld	r24, Z
    5242:	91 81       	ldd	r25, Z+1	; 0x01
    5244:	2a e1       	ldi	r18, 0x1A	; 26
    5246:	8e 3a       	cpi	r24, 0xAE	; 174
    5248:	92 07       	cpc	r25, r18
    524a:	21 f4       	brne	.+8      	; 0x5254 <mp_obj_get_array+0x1e>
    524c:	cf 01       	movw	r24, r30
    524e:	0c 94 ec 20 	jmp	0x41d8	; 0x41d8 <mp_obj_tuple_get>
    5252:	08 95       	ret
    5254:	8c 52       	subi	r24, 0x2C	; 44
    5256:	9d 41       	sbci	r25, 0x1D	; 29
    5258:	59 f4       	brne	.+22     	; 0x5270 <mp_obj_get_array+0x3a>
    525a:	84 81       	ldd	r24, Z+4	; 0x04
    525c:	95 81       	ldd	r25, Z+5	; 0x05
    525e:	db 01       	movw	r26, r22
    5260:	8d 93       	st	X+, r24
    5262:	9c 93       	st	X, r25
    5264:	86 81       	ldd	r24, Z+6	; 0x06
    5266:	97 81       	ldd	r25, Z+7	; 0x07
    5268:	fa 01       	movw	r30, r20
    526a:	91 83       	std	Z+1, r25	; 0x01
    526c:	80 83       	st	Z, r24
    526e:	08 95       	ret
    5270:	83 ea       	ldi	r24, 0xA3	; 163
    5272:	93 e0       	ldi	r25, 0x03	; 3
    5274:	bb db       	rcall	.-2186   	; 0x49ec <mp_raise_TypeError>

00005276 <mp_obj_len>:
    5276:	0e 94 88 1c 	call	0x3910	; 0x3910 <mp_obj_len_maybe>
    527a:	00 97       	sbiw	r24, 0x00	; 0
    527c:	19 f4       	brne	.+6      	; 0x5284 <mp_obj_len+0xe>
    527e:	83 ed       	ldi	r24, 0xD3	; 211
    5280:	93 e0       	ldi	r25, 0x03	; 3
    5282:	b4 cb       	rjmp	.-2200   	; 0x49ec <mp_raise_TypeError>
    5284:	08 95       	ret

00005286 <mp_obj_subscr>:
    5286:	ef 92       	push	r14
    5288:	ff 92       	push	r15
    528a:	0f 93       	push	r16
    528c:	1f 93       	push	r17
    528e:	cf 93       	push	r28
    5290:	df 93       	push	r29
    5292:	ec 01       	movw	r28, r24
    5294:	7b 01       	movw	r14, r22
    5296:	8a 01       	movw	r16, r20
    5298:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    529c:	dc 01       	movw	r26, r24
    529e:	52 96       	adiw	r26, 0x12	; 18
    52a0:	ed 91       	ld	r30, X+
    52a2:	fc 91       	ld	r31, X
    52a4:	53 97       	sbiw	r26, 0x13	; 19
    52a6:	30 97       	sbiw	r30, 0x00	; 0
    52a8:	31 f0       	breq	.+12     	; 0x52b6 <mp_obj_subscr+0x30>
    52aa:	a8 01       	movw	r20, r16
    52ac:	b7 01       	movw	r22, r14
    52ae:	ce 01       	movw	r24, r28
    52b0:	09 95       	icall
    52b2:	00 97       	sbiw	r24, 0x00	; 0
    52b4:	79 f4       	brne	.+30     	; 0x52d4 <mp_obj_subscr+0x4e>
    52b6:	01 15       	cp	r16, r1
    52b8:	11 05       	cpc	r17, r1
    52ba:	19 f4       	brne	.+6      	; 0x52c2 <mp_obj_subscr+0x3c>
    52bc:	85 ee       	ldi	r24, 0xE5	; 229
    52be:	93 e0       	ldi	r25, 0x03	; 3
    52c0:	95 db       	rcall	.-2262   	; 0x49ec <mp_raise_TypeError>
    52c2:	04 30       	cpi	r16, 0x04	; 4
    52c4:	11 05       	cpc	r17, r1
    52c6:	19 f4       	brne	.+6      	; 0x52ce <mp_obj_subscr+0x48>
    52c8:	8a e0       	ldi	r24, 0x0A	; 10
    52ca:	94 e0       	ldi	r25, 0x04	; 4
    52cc:	8f db       	rcall	.-2274   	; 0x49ec <mp_raise_TypeError>
    52ce:	85 e2       	ldi	r24, 0x25	; 37
    52d0:	94 e0       	ldi	r25, 0x04	; 4
    52d2:	8c db       	rcall	.-2280   	; 0x49ec <mp_raise_TypeError>
    52d4:	df 91       	pop	r29
    52d6:	cf 91       	pop	r28
    52d8:	1f 91       	pop	r17
    52da:	0f 91       	pop	r16
    52dc:	ff 90       	pop	r15
    52de:	ef 90       	pop	r14
    52e0:	08 95       	ret

000052e2 <mp_get_buffer_raise>:
    52e2:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <mp_get_buffer>
    52e6:	81 11       	cpse	r24, r1
    52e8:	03 c0       	rjmp	.+6      	; 0x52f0 <mp_get_buffer_raise+0xe>
    52ea:	8c e4       	ldi	r24, 0x4C	; 76
    52ec:	94 e0       	ldi	r25, 0x04	; 4
    52ee:	7e cb       	rjmp	.-2308   	; 0x49ec <mp_raise_TypeError>
    52f0:	08 95       	ret

000052f2 <mp_ensure_not_fixed>:
    52f2:	fc 01       	movw	r30, r24
    52f4:	82 81       	ldd	r24, Z+2	; 0x02
    52f6:	81 ff       	sbrs	r24, 1
    52f8:	03 c0       	rjmp	.+6      	; 0x5300 <mp_ensure_not_fixed+0xe>
    52fa:	80 e0       	ldi	r24, 0x00	; 0
    52fc:	90 e0       	ldi	r25, 0x00	; 0
    52fe:	76 cb       	rjmp	.-2324   	; 0x49ec <mp_raise_TypeError>
    5300:	08 95       	ret

00005302 <dict_clear>:
    5302:	cf 93       	push	r28
    5304:	df 93       	push	r29
    5306:	ec 01       	movw	r28, r24
    5308:	83 70       	andi	r24, 0x03	; 3
    530a:	99 27       	eor	r25, r25
    530c:	89 2b       	or	r24, r25
    530e:	39 f4       	brne	.+14     	; 0x531e <dict_clear+0x1c>
    5310:	e8 81       	ld	r30, Y
    5312:	f9 81       	ldd	r31, Y+1	; 0x01
    5314:	80 85       	ldd	r24, Z+8	; 0x08
    5316:	91 85       	ldd	r25, Z+9	; 0x09
    5318:	8a 5a       	subi	r24, 0xAA	; 170
    531a:	99 48       	sbci	r25, 0x89	; 137
    531c:	11 f0       	breq	.+4      	; 0x5322 <dict_clear+0x20>
    531e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5322:	ce 01       	movw	r24, r28
    5324:	e6 df       	rcall	.-52     	; 0x52f2 <mp_ensure_not_fixed>
    5326:	ce 01       	movw	r24, r28
    5328:	02 96       	adiw	r24, 0x02	; 2
    532a:	0e 94 09 1a 	call	0x3412	; 0x3412 <mp_map_clear>
    532e:	86 e0       	ldi	r24, 0x06	; 6
    5330:	90 e0       	ldi	r25, 0x00	; 0
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	08 95       	ret

00005338 <mp_obj_str_get_str>:
    5338:	cf 93       	push	r28
    533a:	df 93       	push	r29
    533c:	00 d0       	rcall	.+0      	; 0x533e <mp_obj_str_get_str+0x6>
    533e:	cd b7       	in	r28, 0x3d	; 61
    5340:	de b7       	in	r29, 0x3e	; 62
    5342:	9c 01       	movw	r18, r24
    5344:	27 70       	andi	r18, 0x07	; 7
    5346:	33 27       	eor	r19, r19
    5348:	22 30       	cpi	r18, 0x02	; 2
    534a:	31 05       	cpc	r19, r1
    534c:	71 f0       	breq	.+28     	; 0x536a <mp_obj_str_get_str+0x32>
    534e:	9c 01       	movw	r18, r24
    5350:	23 70       	andi	r18, 0x03	; 3
    5352:	33 27       	eor	r19, r19
    5354:	23 2b       	or	r18, r19
    5356:	c9 f4       	brne	.+50     	; 0x538a <mp_obj_str_get_str+0x52>
    5358:	dc 01       	movw	r26, r24
    535a:	ed 91       	ld	r30, X+
    535c:	fc 91       	ld	r31, X
    535e:	26 85       	ldd	r18, Z+14	; 0x0e
    5360:	37 85       	ldd	r19, Z+15	; 0x0f
    5362:	21 5a       	subi	r18, 0xA1	; 161
    5364:	38 47       	sbci	r19, 0x78	; 120
    5366:	69 f0       	breq	.+26     	; 0x5382 <mp_obj_str_get_str+0x4a>
    5368:	10 c0       	rjmp	.+32     	; 0x538a <mp_obj_str_get_str+0x52>
    536a:	be 01       	movw	r22, r28
    536c:	6f 5f       	subi	r22, 0xFF	; 255
    536e:	7f 4f       	sbci	r23, 0xFF	; 255
    5370:	96 95       	lsr	r25
    5372:	87 95       	ror	r24
    5374:	96 95       	lsr	r25
    5376:	87 95       	ror	r24
    5378:	96 95       	lsr	r25
    537a:	87 95       	ror	r24
    537c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    5380:	07 c0       	rjmp	.+14     	; 0x5390 <mp_obj_str_get_str+0x58>
    5382:	fc 01       	movw	r30, r24
    5384:	86 81       	ldd	r24, Z+6	; 0x06
    5386:	97 81       	ldd	r25, Z+7	; 0x07
    5388:	03 c0       	rjmp	.+6      	; 0x5390 <mp_obj_str_get_str+0x58>
    538a:	81 e7       	ldi	r24, 0x71	; 113
    538c:	94 e0       	ldi	r25, 0x04	; 4
    538e:	2e db       	rcall	.-2468   	; 0x49ec <mp_raise_TypeError>
    5390:	0f 90       	pop	r0
    5392:	0f 90       	pop	r0
    5394:	df 91       	pop	r29
    5396:	cf 91       	pop	r28
    5398:	08 95       	ret

0000539a <type_call>:
    539a:	dc 01       	movw	r26, r24
    539c:	18 96       	adiw	r26, 0x08	; 8
    539e:	ed 91       	ld	r30, X+
    53a0:	fc 91       	ld	r31, X
    53a2:	19 97       	sbiw	r26, 0x09	; 9
    53a4:	30 97       	sbiw	r30, 0x00	; 0
    53a6:	19 f4       	brne	.+6      	; 0x53ae <type_call+0x14>
    53a8:	81 e9       	ldi	r24, 0x91	; 145
    53aa:	94 e0       	ldi	r25, 0x04	; 4
    53ac:	1f db       	rcall	.-2498   	; 0x49ec <mp_raise_TypeError>
    53ae:	09 95       	icall
    53b0:	08 95       	ret

000053b2 <mp_obj_is_subclass>:
    53b2:	af 92       	push	r10
    53b4:	bf 92       	push	r11
    53b6:	cf 92       	push	r12
    53b8:	df 92       	push	r13
    53ba:	ef 92       	push	r14
    53bc:	ff 92       	push	r15
    53be:	0f 93       	push	r16
    53c0:	1f 93       	push	r17
    53c2:	cf 93       	push	r28
    53c4:	df 93       	push	r29
    53c6:	00 d0       	rcall	.+0      	; 0x53c8 <mp_obj_is_subclass+0x16>
    53c8:	00 d0       	rcall	.+0      	; 0x53ca <mp_obj_is_subclass+0x18>
    53ca:	00 d0       	rcall	.+0      	; 0x53cc <mp_obj_is_subclass+0x1a>
    53cc:	cd b7       	in	r28, 0x3d	; 61
    53ce:	de b7       	in	r29, 0x3e	; 62
    53d0:	5c 01       	movw	r10, r24
    53d2:	7e 83       	std	Y+6, r23	; 0x06
    53d4:	6d 83       	std	Y+5, r22	; 0x05
    53d6:	86 2f       	mov	r24, r22
    53d8:	97 2f       	mov	r25, r23
    53da:	9c 01       	movw	r18, r24
    53dc:	23 70       	andi	r18, 0x03	; 3
    53de:	33 27       	eor	r19, r19
    53e0:	23 2b       	or	r18, r19
    53e2:	91 f5       	brne	.+100    	; 0x5448 <mp_obj_is_subclass+0x96>
    53e4:	fc 01       	movw	r30, r24
    53e6:	20 81       	ld	r18, Z
    53e8:	31 81       	ldd	r19, Z+1	; 0x01
    53ea:	fa e1       	ldi	r31, 0x1A	; 26
    53ec:	23 35       	cpi	r18, 0x53	; 83
    53ee:	3f 07       	cpc	r19, r31
    53f0:	61 f4       	brne	.+24     	; 0x540a <mp_obj_is_subclass+0x58>
    53f2:	81 e0       	ldi	r24, 0x01	; 1
    53f4:	90 e0       	ldi	r25, 0x00	; 0
    53f6:	9a 83       	std	Y+2, r25	; 0x02
    53f8:	89 83       	std	Y+1, r24	; 0x01
    53fa:	ce 01       	movw	r24, r28
    53fc:	05 96       	adiw	r24, 0x05	; 5
    53fe:	9c 83       	std	Y+4, r25	; 0x04
    5400:	8b 83       	std	Y+3, r24	; 0x03
    5402:	cc 24       	eor	r12, r12
    5404:	c3 94       	inc	r12
    5406:	d1 2c       	mov	r13, r1
    5408:	10 c0       	rjmp	.+32     	; 0x542a <mp_obj_is_subclass+0x78>
    540a:	2e 5a       	subi	r18, 0xAE	; 174
    540c:	3a 41       	sbci	r19, 0x1A	; 26
    540e:	e1 f4       	brne	.+56     	; 0x5448 <mp_obj_is_subclass+0x96>
    5410:	ae 01       	movw	r20, r28
    5412:	4d 5f       	subi	r20, 0xFD	; 253
    5414:	5f 4f       	sbci	r21, 0xFF	; 255
    5416:	be 01       	movw	r22, r28
    5418:	6f 5f       	subi	r22, 0xFF	; 255
    541a:	7f 4f       	sbci	r23, 0xFF	; 255
    541c:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <mp_obj_tuple_get>
    5420:	c9 80       	ldd	r12, Y+1	; 0x01
    5422:	da 80       	ldd	r13, Y+2	; 0x02
    5424:	c1 14       	cp	r12, r1
    5426:	d1 04       	cpc	r13, r1
    5428:	39 f1       	breq	.+78     	; 0x5478 <mp_obj_is_subclass+0xc6>
    542a:	eb 81       	ldd	r30, Y+3	; 0x03
    542c:	fc 81       	ldd	r31, Y+4	; 0x04
    542e:	60 81       	ld	r22, Z
    5430:	71 81       	ldd	r23, Z+1	; 0x01
    5432:	8c e1       	ldi	r24, 0x1C	; 28
    5434:	6a 3b       	cpi	r22, 0xBA	; 186
    5436:	78 07       	cpc	r23, r24
    5438:	11 f1       	breq	.+68     	; 0x547e <mp_obj_is_subclass+0xcc>
    543a:	7f 01       	movw	r14, r30
    543c:	42 e0       	ldi	r20, 0x02	; 2
    543e:	e4 0e       	add	r14, r20
    5440:	f1 1c       	adc	r15, r1
    5442:	00 e0       	ldi	r16, 0x00	; 0
    5444:	10 e0       	ldi	r17, 0x00	; 0
    5446:	0b c0       	rjmp	.+22     	; 0x545e <mp_obj_is_subclass+0xac>
    5448:	87 ea       	ldi	r24, 0xA7	; 167
    544a:	94 e0       	ldi	r25, 0x04	; 4
    544c:	cf da       	rcall	.-2658   	; 0x49ec <mp_raise_TypeError>
    544e:	f7 01       	movw	r30, r14
    5450:	61 91       	ld	r22, Z+
    5452:	71 91       	ld	r23, Z+
    5454:	7f 01       	movw	r14, r30
    5456:	fc e1       	ldi	r31, 0x1C	; 28
    5458:	6a 3b       	cpi	r22, 0xBA	; 186
    545a:	7f 07       	cpc	r23, r31
    545c:	99 f0       	breq	.+38     	; 0x5484 <mp_obj_is_subclass+0xd2>
    545e:	c5 01       	movw	r24, r10
    5460:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
    5464:	81 11       	cpse	r24, r1
    5466:	11 c0       	rjmp	.+34     	; 0x548a <mp_obj_is_subclass+0xd8>
    5468:	0f 5f       	subi	r16, 0xFF	; 255
    546a:	1f 4f       	sbci	r17, 0xFF	; 255
    546c:	0c 15       	cp	r16, r12
    546e:	1d 05       	cpc	r17, r13
    5470:	70 f3       	brcs	.-36     	; 0x544e <mp_obj_is_subclass+0x9c>
    5472:	8e e0       	ldi	r24, 0x0E	; 14
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	0b c0       	rjmp	.+22     	; 0x548e <mp_obj_is_subclass+0xdc>
    5478:	8e e0       	ldi	r24, 0x0E	; 14
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	08 c0       	rjmp	.+16     	; 0x548e <mp_obj_is_subclass+0xdc>
    547e:	8e e1       	ldi	r24, 0x1E	; 30
    5480:	90 e0       	ldi	r25, 0x00	; 0
    5482:	05 c0       	rjmp	.+10     	; 0x548e <mp_obj_is_subclass+0xdc>
    5484:	8e e1       	ldi	r24, 0x1E	; 30
    5486:	90 e0       	ldi	r25, 0x00	; 0
    5488:	02 c0       	rjmp	.+4      	; 0x548e <mp_obj_is_subclass+0xdc>
    548a:	8e e1       	ldi	r24, 0x1E	; 30
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	26 96       	adiw	r28, 0x06	; 6
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	de bf       	out	0x3e, r29	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	cd bf       	out	0x3d, r28	; 61
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	1f 91       	pop	r17
    54a0:	0f 91       	pop	r16
    54a2:	ff 90       	pop	r15
    54a4:	ef 90       	pop	r14
    54a6:	df 90       	pop	r13
    54a8:	cf 90       	pop	r12
    54aa:	bf 90       	pop	r11
    54ac:	af 90       	pop	r10
    54ae:	08 95       	ret

000054b0 <mp_builtin_isinstance>:
    54b0:	cf 93       	push	r28
    54b2:	df 93       	push	r29
    54b4:	eb 01       	movw	r28, r22
    54b6:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    54ba:	be 01       	movw	r22, r28
    54bc:	7a df       	rcall	.-268    	; 0x53b2 <mp_obj_is_subclass>
    54be:	df 91       	pop	r29
    54c0:	cf 91       	pop	r28
    54c2:	08 95       	ret

000054c4 <mp_builtin_issubclass>:
    54c4:	9c 01       	movw	r18, r24
    54c6:	23 70       	andi	r18, 0x03	; 3
    54c8:	33 27       	eor	r19, r19
    54ca:	23 2b       	or	r18, r19
    54cc:	31 f4       	brne	.+12     	; 0x54da <mp_builtin_issubclass+0x16>
    54ce:	fc 01       	movw	r30, r24
    54d0:	20 81       	ld	r18, Z
    54d2:	31 81       	ldd	r19, Z+1	; 0x01
    54d4:	23 55       	subi	r18, 0x53	; 83
    54d6:	3a 41       	sbci	r19, 0x1A	; 26
    54d8:	19 f0       	breq	.+6      	; 0x54e0 <mp_builtin_issubclass+0x1c>
    54da:	80 ee       	ldi	r24, 0xE0	; 224
    54dc:	94 e0       	ldi	r25, 0x04	; 4
    54de:	86 da       	rcall	.-2804   	; 0x49ec <mp_raise_TypeError>
    54e0:	68 cf       	rjmp	.-304    	; 0x53b2 <mp_obj_is_subclass>
    54e2:	08 95       	ret

000054e4 <mp_obj_str_get_data>:
    54e4:	0f 93       	push	r16
    54e6:	1f 93       	push	r17
    54e8:	cf 93       	push	r28
    54ea:	df 93       	push	r29
    54ec:	00 d0       	rcall	.+0      	; 0x54ee <mp_obj_str_get_data+0xa>
    54ee:	cd b7       	in	r28, 0x3d	; 61
    54f0:	de b7       	in	r29, 0x3e	; 62
    54f2:	fc 01       	movw	r30, r24
    54f4:	8b 01       	movw	r16, r22
    54f6:	87 70       	andi	r24, 0x07	; 7
    54f8:	99 27       	eor	r25, r25
    54fa:	02 97       	sbiw	r24, 0x02	; 2
    54fc:	79 f0       	breq	.+30     	; 0x551c <mp_obj_str_get_data+0x38>
    54fe:	cf 01       	movw	r24, r30
    5500:	83 70       	andi	r24, 0x03	; 3
    5502:	99 27       	eor	r25, r25
    5504:	89 2b       	or	r24, r25
    5506:	19 f5       	brne	.+70     	; 0x554e <mp_obj_str_get_data+0x6a>
    5508:	a0 81       	ld	r26, Z
    550a:	b1 81       	ldd	r27, Z+1	; 0x01
    550c:	1e 96       	adiw	r26, 0x0e	; 14
    550e:	8d 91       	ld	r24, X+
    5510:	9c 91       	ld	r25, X
    5512:	1f 97       	sbiw	r26, 0x0f	; 15
    5514:	81 5a       	subi	r24, 0xA1	; 161
    5516:	98 47       	sbci	r25, 0x78	; 120
    5518:	71 f0       	breq	.+28     	; 0x5536 <mp_obj_str_get_data+0x52>
    551a:	19 c0       	rjmp	.+50     	; 0x554e <mp_obj_str_get_data+0x6a>
    551c:	be 01       	movw	r22, r28
    551e:	6f 5f       	subi	r22, 0xFF	; 255
    5520:	7f 4f       	sbci	r23, 0xFF	; 255
    5522:	cf 01       	movw	r24, r30
    5524:	96 95       	lsr	r25
    5526:	87 95       	ror	r24
    5528:	96 95       	lsr	r25
    552a:	87 95       	ror	r24
    552c:	96 95       	lsr	r25
    552e:	87 95       	ror	r24
    5530:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    5534:	06 c0       	rjmp	.+12     	; 0x5542 <mp_obj_str_get_data+0x5e>
    5536:	84 81       	ldd	r24, Z+4	; 0x04
    5538:	95 81       	ldd	r25, Z+5	; 0x05
    553a:	9a 83       	std	Y+2, r25	; 0x02
    553c:	89 83       	std	Y+1, r24	; 0x01
    553e:	86 81       	ldd	r24, Z+6	; 0x06
    5540:	97 81       	ldd	r25, Z+7	; 0x07
    5542:	29 81       	ldd	r18, Y+1	; 0x01
    5544:	3a 81       	ldd	r19, Y+2	; 0x02
    5546:	f8 01       	movw	r30, r16
    5548:	31 83       	std	Z+1, r19	; 0x01
    554a:	20 83       	st	Z, r18
    554c:	03 c0       	rjmp	.+6      	; 0x5554 <mp_obj_str_get_data+0x70>
    554e:	81 e7       	ldi	r24, 0x71	; 113
    5550:	94 e0       	ldi	r25, 0x04	; 4
    5552:	4c da       	rcall	.-2920   	; 0x49ec <mp_raise_TypeError>
    5554:	0f 90       	pop	r0
    5556:	0f 90       	pop	r0
    5558:	df 91       	pop	r29
    555a:	cf 91       	pop	r28
    555c:	1f 91       	pop	r17
    555e:	0f 91       	pop	r16
    5560:	08 95       	ret

00005562 <mp_builtin_ord>:
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	00 d0       	rcall	.+0      	; 0x5568 <mp_builtin_ord+0x6>
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
    556c:	be 01       	movw	r22, r28
    556e:	6f 5f       	subi	r22, 0xFF	; 255
    5570:	7f 4f       	sbci	r23, 0xFF	; 255
    5572:	b8 df       	rcall	.-144    	; 0x54e4 <mp_obj_str_get_data>
    5574:	29 81       	ldd	r18, Y+1	; 0x01
    5576:	3a 81       	ldd	r19, Y+2	; 0x02
    5578:	21 30       	cpi	r18, 0x01	; 1
    557a:	31 05       	cpc	r19, r1
    557c:	39 f4       	brne	.+14     	; 0x558c <mp_builtin_ord+0x2a>
    557e:	fc 01       	movw	r30, r24
    5580:	80 81       	ld	r24, Z
    5582:	90 e0       	ldi	r25, 0x00	; 0
    5584:	88 0f       	add	r24, r24
    5586:	99 1f       	adc	r25, r25
    5588:	81 60       	ori	r24, 0x01	; 1
    558a:	03 c0       	rjmp	.+6      	; 0x5592 <mp_builtin_ord+0x30>
    558c:	83 e0       	ldi	r24, 0x03	; 3
    558e:	95 e0       	ldi	r25, 0x05	; 5
    5590:	2d da       	rcall	.-2982   	; 0x49ec <mp_raise_TypeError>
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	df 91       	pop	r29
    5598:	cf 91       	pop	r28
    559a:	08 95       	ret

0000559c <mp_raise_NotImplementedError>:
    559c:	bc 01       	movw	r22, r24
    559e:	88 ed       	ldi	r24, 0xD8	; 216
    55a0:	9f e1       	ldi	r25, 0x1F	; 31
    55a2:	dc d9       	rcall	.-3144   	; 0x495c <mp_raise_msg>

000055a4 <str_endswith>:
    55a4:	cf 92       	push	r12
    55a6:	df 92       	push	r13
    55a8:	ef 92       	push	r14
    55aa:	ff 92       	push	r15
    55ac:	0f 93       	push	r16
    55ae:	1f 93       	push	r17
    55b0:	cf 93       	push	r28
    55b2:	df 93       	push	r29
    55b4:	00 d0       	rcall	.+0      	; 0x55b6 <str_endswith+0x12>
    55b6:	00 d0       	rcall	.+0      	; 0x55b8 <str_endswith+0x14>
    55b8:	cd b7       	in	r28, 0x3d	; 61
    55ba:	de b7       	in	r29, 0x3e	; 62
    55bc:	6c 01       	movw	r12, r24
    55be:	8b 01       	movw	r16, r22
    55c0:	db 01       	movw	r26, r22
    55c2:	ed 91       	ld	r30, X+
    55c4:	fc 91       	ld	r31, X
    55c6:	cf 01       	movw	r24, r30
    55c8:	87 70       	andi	r24, 0x07	; 7
    55ca:	99 27       	eor	r25, r25
    55cc:	02 97       	sbiw	r24, 0x02	; 2
    55ce:	71 f4       	brne	.+28     	; 0x55ec <str_endswith+0x48>
    55d0:	be 01       	movw	r22, r28
    55d2:	6f 5f       	subi	r22, 0xFF	; 255
    55d4:	7f 4f       	sbci	r23, 0xFF	; 255
    55d6:	cf 01       	movw	r24, r30
    55d8:	96 95       	lsr	r25
    55da:	87 95       	ror	r24
    55dc:	96 95       	lsr	r25
    55de:	87 95       	ror	r24
    55e0:	96 95       	lsr	r25
    55e2:	87 95       	ror	r24
    55e4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    55e8:	7c 01       	movw	r14, r24
    55ea:	06 c0       	rjmp	.+12     	; 0x55f8 <str_endswith+0x54>
    55ec:	84 81       	ldd	r24, Z+4	; 0x04
    55ee:	95 81       	ldd	r25, Z+5	; 0x05
    55f0:	9a 83       	std	Y+2, r25	; 0x02
    55f2:	89 83       	std	Y+1, r24	; 0x01
    55f4:	e6 80       	ldd	r14, Z+6	; 0x06
    55f6:	f7 80       	ldd	r15, Z+7	; 0x07
    55f8:	be 01       	movw	r22, r28
    55fa:	6d 5f       	subi	r22, 0xFD	; 253
    55fc:	7f 4f       	sbci	r23, 0xFF	; 255
    55fe:	f8 01       	movw	r30, r16
    5600:	82 81       	ldd	r24, Z+2	; 0x02
    5602:	93 81       	ldd	r25, Z+3	; 0x03
    5604:	6f df       	rcall	.-290    	; 0x54e4 <mp_obj_str_get_data>
    5606:	f3 e0       	ldi	r31, 0x03	; 3
    5608:	cf 16       	cp	r12, r31
    560a:	d1 04       	cpc	r13, r1
    560c:	18 f0       	brcs	.+6      	; 0x5614 <str_endswith+0x70>
    560e:	8b e1       	ldi	r24, 0x1B	; 27
    5610:	95 e0       	ldi	r25, 0x05	; 5
    5612:	c4 df       	rcall	.-120    	; 0x559c <mp_raise_NotImplementedError>
    5614:	4b 81       	ldd	r20, Y+3	; 0x03
    5616:	5c 81       	ldd	r21, Y+4	; 0x04
    5618:	29 81       	ldd	r18, Y+1	; 0x01
    561a:	3a 81       	ldd	r19, Y+2	; 0x02
    561c:	24 17       	cp	r18, r20
    561e:	35 07       	cpc	r19, r21
    5620:	68 f0       	brcs	.+26     	; 0x563c <str_endswith+0x98>
    5622:	24 1b       	sub	r18, r20
    5624:	35 0b       	sbc	r19, r21
    5626:	bc 01       	movw	r22, r24
    5628:	c7 01       	movw	r24, r14
    562a:	82 0f       	add	r24, r18
    562c:	93 1f       	adc	r25, r19
    562e:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    5632:	89 2b       	or	r24, r25
    5634:	31 f0       	breq	.+12     	; 0x5642 <str_endswith+0x9e>
    5636:	8e e0       	ldi	r24, 0x0E	; 14
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	05 c0       	rjmp	.+10     	; 0x5646 <str_endswith+0xa2>
    563c:	8e e0       	ldi	r24, 0x0E	; 14
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	02 c0       	rjmp	.+4      	; 0x5646 <str_endswith+0xa2>
    5642:	8e e1       	ldi	r24, 0x1E	; 30
    5644:	90 e0       	ldi	r25, 0x00	; 0
    5646:	0f 90       	pop	r0
    5648:	0f 90       	pop	r0
    564a:	0f 90       	pop	r0
    564c:	0f 90       	pop	r0
    564e:	df 91       	pop	r29
    5650:	cf 91       	pop	r28
    5652:	1f 91       	pop	r17
    5654:	0f 91       	pop	r16
    5656:	ff 90       	pop	r15
    5658:	ef 90       	pop	r14
    565a:	df 90       	pop	r13
    565c:	cf 90       	pop	r12
    565e:	08 95       	ret

00005660 <mp_get_index>:
    5660:	ff 92       	push	r15
    5662:	0f 93       	push	r16
    5664:	1f 93       	push	r17
    5666:	cf 93       	push	r28
    5668:	df 93       	push	r29
    566a:	00 d0       	rcall	.+0      	; 0x566c <mp_get_index+0xc>
    566c:	cd b7       	in	r28, 0x3d	; 61
    566e:	de b7       	in	r29, 0x3e	; 62
    5670:	8b 01       	movw	r16, r22
    5672:	f2 2e       	mov	r15, r18
    5674:	40 ff       	sbrs	r20, 0
    5676:	05 c0       	rjmp	.+10     	; 0x5682 <mp_get_index+0x22>
    5678:	55 95       	asr	r21
    567a:	47 95       	ror	r20
    567c:	5a 83       	std	Y+2, r21	; 0x02
    567e:	49 83       	std	Y+1, r20	; 0x01
    5680:	0b c0       	rjmp	.+22     	; 0x5698 <mp_get_index+0x38>
    5682:	be 01       	movw	r22, r28
    5684:	6f 5f       	subi	r22, 0xFF	; 255
    5686:	7f 4f       	sbci	r23, 0xFF	; 255
    5688:	ca 01       	movw	r24, r20
    568a:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <mp_obj_get_int_maybe>
    568e:	81 11       	cpse	r24, r1
    5690:	03 c0       	rjmp	.+6      	; 0x5698 <mp_get_index+0x38>
    5692:	8d e2       	ldi	r24, 0x2D	; 45
    5694:	95 e0       	ldi	r25, 0x05	; 5
    5696:	aa d9       	rcall	.-3244   	; 0x49ec <mp_raise_TypeError>
    5698:	89 81       	ldd	r24, Y+1	; 0x01
    569a:	9a 81       	ldd	r25, Y+2	; 0x02
    569c:	99 23       	and	r25, r25
    569e:	04 f5       	brge	.+64     	; 0x56e0 <mp_get_index+0x80>
    56a0:	80 0f       	add	r24, r16
    56a2:	91 1f       	adc	r25, r17
    56a4:	9a 83       	std	Y+2, r25	; 0x02
    56a6:	89 83       	std	Y+1, r24	; 0x01
    56a8:	ff 20       	and	r15, r15
    56aa:	59 f0       	breq	.+22     	; 0x56c2 <mp_get_index+0x62>
    56ac:	99 23       	and	r25, r25
    56ae:	1c f4       	brge	.+6      	; 0x56b6 <mp_get_index+0x56>
    56b0:	1a 82       	std	Y+2, r1	; 0x02
    56b2:	19 82       	std	Y+1, r1	; 0x01
    56b4:	12 c0       	rjmp	.+36     	; 0x56da <mp_get_index+0x7a>
    56b6:	08 17       	cp	r16, r24
    56b8:	19 07       	cpc	r17, r25
    56ba:	78 f4       	brcc	.+30     	; 0x56da <mp_get_index+0x7a>
    56bc:	1a 83       	std	Y+2, r17	; 0x02
    56be:	09 83       	std	Y+1, r16	; 0x01
    56c0:	0c c0       	rjmp	.+24     	; 0x56da <mp_get_index+0x7a>
    56c2:	89 81       	ldd	r24, Y+1	; 0x01
    56c4:	9a 81       	ldd	r25, Y+2	; 0x02
    56c6:	99 23       	and	r25, r25
    56c8:	1c f0       	brlt	.+6      	; 0x56d0 <mp_get_index+0x70>
    56ca:	80 17       	cp	r24, r16
    56cc:	91 07       	cpc	r25, r17
    56ce:	28 f0       	brcs	.+10     	; 0x56da <mp_get_index+0x7a>
    56d0:	63 ef       	ldi	r22, 0xF3	; 243
    56d2:	7c e0       	ldi	r23, 0x0C	; 12
    56d4:	88 e9       	ldi	r24, 0x98	; 152
    56d6:	90 e2       	ldi	r25, 0x20	; 32
    56d8:	41 d9       	rcall	.-3454   	; 0x495c <mp_raise_msg>
    56da:	89 81       	ldd	r24, Y+1	; 0x01
    56dc:	9a 81       	ldd	r25, Y+2	; 0x02
    56de:	05 c0       	rjmp	.+10     	; 0x56ea <mp_get_index+0x8a>
    56e0:	f1 10       	cpse	r15, r1
    56e2:	e9 cf       	rjmp	.-46     	; 0x56b6 <mp_get_index+0x56>
    56e4:	89 81       	ldd	r24, Y+1	; 0x01
    56e6:	9a 81       	ldd	r25, Y+2	; 0x02
    56e8:	f0 cf       	rjmp	.-32     	; 0x56ca <mp_get_index+0x6a>
    56ea:	0f 90       	pop	r0
    56ec:	0f 90       	pop	r0
    56ee:	df 91       	pop	r29
    56f0:	cf 91       	pop	r28
    56f2:	1f 91       	pop	r17
    56f4:	0f 91       	pop	r16
    56f6:	ff 90       	pop	r15
    56f8:	08 95       	ret

000056fa <mp_obj_list_store>:
    56fa:	0f 93       	push	r16
    56fc:	1f 93       	push	r17
    56fe:	cf 93       	push	r28
    5700:	df 93       	push	r29
    5702:	ec 01       	movw	r28, r24
    5704:	8a 01       	movw	r16, r20
    5706:	8c 81       	ldd	r24, Y+4	; 0x04
    5708:	9d 81       	ldd	r25, Y+5	; 0x05
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	ab 01       	movw	r20, r22
    570e:	bc 01       	movw	r22, r24
    5710:	88 81       	ld	r24, Y
    5712:	99 81       	ldd	r25, Y+1	; 0x01
    5714:	a5 df       	rcall	.-182    	; 0x5660 <mp_get_index>
    5716:	88 0f       	add	r24, r24
    5718:	99 1f       	adc	r25, r25
    571a:	ee 81       	ldd	r30, Y+6	; 0x06
    571c:	ff 81       	ldd	r31, Y+7	; 0x07
    571e:	e8 0f       	add	r30, r24
    5720:	f9 1f       	adc	r31, r25
    5722:	11 83       	std	Z+1, r17	; 0x01
    5724:	00 83       	st	Z, r16
    5726:	df 91       	pop	r29
    5728:	cf 91       	pop	r28
    572a:	1f 91       	pop	r17
    572c:	0f 91       	pop	r16
    572e:	08 95       	ret

00005730 <range_subscr>:
    5730:	0f 93       	push	r16
    5732:	1f 93       	push	r17
    5734:	cf 93       	push	r28
    5736:	df 93       	push	r29
    5738:	44 30       	cpi	r20, 0x04	; 4
    573a:	51 05       	cpc	r21, r1
    573c:	e1 f4       	brne	.+56     	; 0x5776 <range_subscr+0x46>
    573e:	8b 01       	movw	r16, r22
    5740:	ec 01       	movw	r28, r24
    5742:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <range_len>
    5746:	20 e0       	ldi	r18, 0x00	; 0
    5748:	a8 01       	movw	r20, r16
    574a:	bc 01       	movw	r22, r24
    574c:	88 81       	ld	r24, Y
    574e:	99 81       	ldd	r25, Y+1	; 0x01
    5750:	87 df       	rcall	.-242    	; 0x5660 <mp_get_index>
    5752:	2e 81       	ldd	r18, Y+6	; 0x06
    5754:	3f 81       	ldd	r19, Y+7	; 0x07
    5756:	ac 01       	movw	r20, r24
    5758:	42 9f       	mul	r20, r18
    575a:	c0 01       	movw	r24, r0
    575c:	43 9f       	mul	r20, r19
    575e:	90 0d       	add	r25, r0
    5760:	52 9f       	mul	r21, r18
    5762:	90 0d       	add	r25, r0
    5764:	11 24       	eor	r1, r1
    5766:	2a 81       	ldd	r18, Y+2	; 0x02
    5768:	3b 81       	ldd	r19, Y+3	; 0x03
    576a:	82 0f       	add	r24, r18
    576c:	93 1f       	adc	r25, r19
    576e:	88 0f       	add	r24, r24
    5770:	99 1f       	adc	r25, r25
    5772:	81 60       	ori	r24, 0x01	; 1
    5774:	02 c0       	rjmp	.+4      	; 0x577a <range_subscr+0x4a>
    5776:	80 e0       	ldi	r24, 0x00	; 0
    5778:	90 e0       	ldi	r25, 0x00	; 0
    577a:	df 91       	pop	r29
    577c:	cf 91       	pop	r28
    577e:	1f 91       	pop	r17
    5780:	0f 91       	pop	r16
    5782:	08 95       	ret

00005784 <mp_obj_tuple_subscr>:
    5784:	cf 93       	push	r28
    5786:	df 93       	push	r29
    5788:	44 30       	cpi	r20, 0x04	; 4
    578a:	51 05       	cpc	r21, r1
    578c:	81 f4       	brne	.+32     	; 0x57ae <mp_obj_tuple_subscr+0x2a>
    578e:	ab 01       	movw	r20, r22
    5790:	ec 01       	movw	r28, r24
    5792:	6a 81       	ldd	r22, Y+2	; 0x02
    5794:	7b 81       	ldd	r23, Y+3	; 0x03
    5796:	20 e0       	ldi	r18, 0x00	; 0
    5798:	88 81       	ld	r24, Y
    579a:	99 81       	ldd	r25, Y+1	; 0x01
    579c:	61 df       	rcall	.-318    	; 0x5660 <mp_get_index>
    579e:	02 96       	adiw	r24, 0x02	; 2
    57a0:	88 0f       	add	r24, r24
    57a2:	99 1f       	adc	r25, r25
    57a4:	c8 0f       	add	r28, r24
    57a6:	d9 1f       	adc	r29, r25
    57a8:	88 81       	ld	r24, Y
    57aa:	99 81       	ldd	r25, Y+1	; 0x01
    57ac:	02 c0       	rjmp	.+4      	; 0x57b2 <mp_obj_tuple_subscr+0x2e>
    57ae:	80 e0       	ldi	r24, 0x00	; 0
    57b0:	90 e0       	ldi	r25, 0x00	; 0
    57b2:	df 91       	pop	r29
    57b4:	cf 91       	pop	r28
    57b6:	08 95       	ret

000057b8 <mp_seq_index_obj>:
    57b8:	6f 92       	push	r6
    57ba:	7f 92       	push	r7
    57bc:	8f 92       	push	r8
    57be:	9f 92       	push	r9
    57c0:	af 92       	push	r10
    57c2:	bf 92       	push	r11
    57c4:	cf 92       	push	r12
    57c6:	df 92       	push	r13
    57c8:	ef 92       	push	r14
    57ca:	ff 92       	push	r15
    57cc:	0f 93       	push	r16
    57ce:	1f 93       	push	r17
    57d0:	cf 93       	push	r28
    57d2:	df 93       	push	r29
    57d4:	4c 01       	movw	r8, r24
    57d6:	8b 01       	movw	r16, r22
    57d8:	5a 01       	movw	r10, r20
    57da:	69 01       	movw	r12, r18
    57dc:	f9 01       	movw	r30, r18
    57de:	80 81       	ld	r24, Z
    57e0:	91 81       	ldd	r25, Z+1	; 0x01
    57e2:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    57e6:	3c 01       	movw	r6, r24
    57e8:	f6 01       	movw	r30, r12
    57ea:	e2 80       	ldd	r14, Z+2	; 0x02
    57ec:	f3 80       	ldd	r15, Z+3	; 0x03
    57ee:	f3 e0       	ldi	r31, 0x03	; 3
    57f0:	af 16       	cp	r10, r31
    57f2:	b1 04       	cpc	r11, r1
    57f4:	a0 f0       	brcs	.+40     	; 0x581e <mp_seq_index_obj+0x66>
    57f6:	f6 01       	movw	r30, r12
    57f8:	44 81       	ldd	r20, Z+4	; 0x04
    57fa:	55 81       	ldd	r21, Z+5	; 0x05
    57fc:	21 e0       	ldi	r18, 0x01	; 1
    57fe:	b8 01       	movw	r22, r16
    5800:	2f df       	rcall	.-418    	; 0x5660 <mp_get_index>
    5802:	ec 01       	movw	r28, r24
    5804:	f4 e0       	ldi	r31, 0x04	; 4
    5806:	af 16       	cp	r10, r31
    5808:	b1 04       	cpc	r11, r1
    580a:	58 f0       	brcs	.+22     	; 0x5822 <mp_seq_index_obj+0x6a>
    580c:	f6 01       	movw	r30, r12
    580e:	46 81       	ldd	r20, Z+6	; 0x06
    5810:	57 81       	ldd	r21, Z+7	; 0x07
    5812:	21 e0       	ldi	r18, 0x01	; 1
    5814:	b8 01       	movw	r22, r16
    5816:	c3 01       	movw	r24, r6
    5818:	23 df       	rcall	.-442    	; 0x5660 <mp_get_index>
    581a:	8c 01       	movw	r16, r24
    581c:	02 c0       	rjmp	.+4      	; 0x5822 <mp_seq_index_obj+0x6a>
    581e:	c0 e0       	ldi	r28, 0x00	; 0
    5820:	d0 e0       	ldi	r29, 0x00	; 0
    5822:	c0 17       	cp	r28, r16
    5824:	d1 07       	cpc	r29, r17
    5826:	b8 f4       	brcc	.+46     	; 0x5856 <mp_seq_index_obj+0x9e>
    5828:	ce 01       	movw	r24, r28
    582a:	88 0f       	add	r24, r24
    582c:	99 1f       	adc	r25, r25
    582e:	88 0e       	add	r8, r24
    5830:	99 1e       	adc	r9, r25
    5832:	b7 01       	movw	r22, r14
    5834:	f4 01       	movw	r30, r8
    5836:	81 91       	ld	r24, Z+
    5838:	91 91       	ld	r25, Z+
    583a:	4f 01       	movw	r8, r30
    583c:	0e 94 e6 20 	call	0x41cc	; 0x41cc <mp_obj_equal>
    5840:	88 23       	and	r24, r24
    5842:	29 f0       	breq	.+10     	; 0x584e <mp_seq_index_obj+0x96>
    5844:	ce 01       	movw	r24, r28
    5846:	88 0f       	add	r24, r24
    5848:	99 1f       	adc	r25, r25
    584a:	81 60       	ori	r24, 0x01	; 1
    584c:	07 c0       	rjmp	.+14     	; 0x585c <mp_seq_index_obj+0xa4>
    584e:	21 96       	adiw	r28, 0x01	; 1
    5850:	c0 17       	cp	r28, r16
    5852:	d1 07       	cpc	r29, r17
    5854:	70 f3       	brcs	.-36     	; 0x5832 <mp_seq_index_obj+0x7a>
    5856:	86 e4       	ldi	r24, 0x46	; 70
    5858:	95 e0       	ldi	r25, 0x05	; 5
    585a:	c1 d8       	rcall	.-3710   	; 0x49de <mp_raise_ValueError>
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	1f 91       	pop	r17
    5862:	0f 91       	pop	r16
    5864:	ff 90       	pop	r15
    5866:	ef 90       	pop	r14
    5868:	df 90       	pop	r13
    586a:	cf 90       	pop	r12
    586c:	bf 90       	pop	r11
    586e:	af 90       	pop	r10
    5870:	9f 90       	pop	r9
    5872:	8f 90       	pop	r8
    5874:	7f 90       	pop	r7
    5876:	6f 90       	pop	r6
    5878:	08 95       	ret

0000587a <list_index>:
    587a:	9b 01       	movw	r18, r22
    587c:	db 01       	movw	r26, r22
    587e:	ed 91       	ld	r30, X+
    5880:	fc 91       	ld	r31, X
    5882:	bf 01       	movw	r22, r30
    5884:	63 70       	andi	r22, 0x03	; 3
    5886:	77 27       	eor	r23, r23
    5888:	67 2b       	or	r22, r23
    588a:	29 f4       	brne	.+10     	; 0x5896 <list_index+0x1c>
    588c:	40 81       	ld	r20, Z
    588e:	51 81       	ldd	r21, Z+1	; 0x01
    5890:	4c 52       	subi	r20, 0x2C	; 44
    5892:	5d 41       	sbci	r21, 0x1D	; 29
    5894:	11 f0       	breq	.+4      	; 0x589a <list_index+0x20>
    5896:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    589a:	64 81       	ldd	r22, Z+4	; 0x04
    589c:	75 81       	ldd	r23, Z+5	; 0x05
    589e:	ac 01       	movw	r20, r24
    58a0:	86 81       	ldd	r24, Z+6	; 0x06
    58a2:	97 81       	ldd	r25, Z+7	; 0x07
    58a4:	89 cf       	rjmp	.-238    	; 0x57b8 <mp_seq_index_obj>
    58a6:	08 95       	ret

000058a8 <tuple_index>:
    58a8:	9b 01       	movw	r18, r22
    58aa:	db 01       	movw	r26, r22
    58ac:	ed 91       	ld	r30, X+
    58ae:	fc 91       	ld	r31, X
    58b0:	bf 01       	movw	r22, r30
    58b2:	63 70       	andi	r22, 0x03	; 3
    58b4:	77 27       	eor	r23, r23
    58b6:	67 2b       	or	r22, r23
    58b8:	29 f4       	brne	.+10     	; 0x58c4 <tuple_index+0x1c>
    58ba:	40 81       	ld	r20, Z
    58bc:	51 81       	ldd	r21, Z+1	; 0x01
    58be:	4e 5a       	subi	r20, 0xAE	; 174
    58c0:	5a 41       	sbci	r21, 0x1A	; 26
    58c2:	11 f0       	breq	.+4      	; 0x58c8 <tuple_index+0x20>
    58c4:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    58c8:	62 81       	ldd	r22, Z+2	; 0x02
    58ca:	73 81       	ldd	r23, Z+3	; 0x03
    58cc:	ac 01       	movw	r20, r24
    58ce:	cf 01       	movw	r24, r30
    58d0:	04 96       	adiw	r24, 0x04	; 4
    58d2:	72 cf       	rjmp	.-284    	; 0x57b8 <mp_seq_index_obj>
    58d4:	08 95       	ret

000058d6 <str_startswith>:
    58d6:	8f 92       	push	r8
    58d8:	9f 92       	push	r9
    58da:	af 92       	push	r10
    58dc:	bf 92       	push	r11
    58de:	cf 92       	push	r12
    58e0:	df 92       	push	r13
    58e2:	ef 92       	push	r14
    58e4:	ff 92       	push	r15
    58e6:	0f 93       	push	r16
    58e8:	1f 93       	push	r17
    58ea:	cf 93       	push	r28
    58ec:	df 93       	push	r29
    58ee:	00 d0       	rcall	.+0      	; 0x58f0 <str_startswith+0x1a>
    58f0:	00 d0       	rcall	.+0      	; 0x58f2 <str_startswith+0x1c>
    58f2:	cd b7       	in	r28, 0x3d	; 61
    58f4:	de b7       	in	r29, 0x3e	; 62
    58f6:	6c 01       	movw	r12, r24
    58f8:	7b 01       	movw	r14, r22
    58fa:	fb 01       	movw	r30, r22
    58fc:	00 81       	ld	r16, Z
    58fe:	11 81       	ldd	r17, Z+1	; 0x01
    5900:	c8 01       	movw	r24, r16
    5902:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    5906:	5c 01       	movw	r10, r24
    5908:	c8 01       	movw	r24, r16
    590a:	87 70       	andi	r24, 0x07	; 7
    590c:	99 27       	eor	r25, r25
    590e:	02 97       	sbiw	r24, 0x02	; 2
    5910:	71 f4       	brne	.+28     	; 0x592e <str_startswith+0x58>
    5912:	be 01       	movw	r22, r28
    5914:	6f 5f       	subi	r22, 0xFF	; 255
    5916:	7f 4f       	sbci	r23, 0xFF	; 255
    5918:	c8 01       	movw	r24, r16
    591a:	96 95       	lsr	r25
    591c:	87 95       	ror	r24
    591e:	96 95       	lsr	r25
    5920:	87 95       	ror	r24
    5922:	96 95       	lsr	r25
    5924:	87 95       	ror	r24
    5926:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    592a:	4c 01       	movw	r8, r24
    592c:	07 c0       	rjmp	.+14     	; 0x593c <str_startswith+0x66>
    592e:	f8 01       	movw	r30, r16
    5930:	84 81       	ldd	r24, Z+4	; 0x04
    5932:	95 81       	ldd	r25, Z+5	; 0x05
    5934:	9a 83       	std	Y+2, r25	; 0x02
    5936:	89 83       	std	Y+1, r24	; 0x01
    5938:	86 80       	ldd	r8, Z+6	; 0x06
    593a:	97 80       	ldd	r9, Z+7	; 0x07
    593c:	be 01       	movw	r22, r28
    593e:	6d 5f       	subi	r22, 0xFD	; 253
    5940:	7f 4f       	sbci	r23, 0xFF	; 255
    5942:	f7 01       	movw	r30, r14
    5944:	82 81       	ldd	r24, Z+2	; 0x02
    5946:	93 81       	ldd	r25, Z+3	; 0x03
    5948:	cd dd       	rcall	.-1126   	; 0x54e4 <mp_obj_str_get_data>
    594a:	8c 01       	movw	r16, r24
    594c:	f3 e0       	ldi	r31, 0x03	; 3
    594e:	cf 16       	cp	r12, r31
    5950:	d1 04       	cpc	r13, r1
    5952:	58 f0       	brcs	.+22     	; 0x596a <str_startswith+0x94>
    5954:	f7 01       	movw	r30, r14
    5956:	44 81       	ldd	r20, Z+4	; 0x04
    5958:	55 81       	ldd	r21, Z+5	; 0x05
    595a:	69 81       	ldd	r22, Y+1	; 0x01
    595c:	7a 81       	ldd	r23, Y+2	; 0x02
    595e:	21 e0       	ldi	r18, 0x01	; 1
    5960:	c5 01       	movw	r24, r10
    5962:	7e de       	rcall	.-772    	; 0x5660 <mp_get_index>
    5964:	88 0d       	add	r24, r8
    5966:	99 1d       	adc	r25, r9
    5968:	01 c0       	rjmp	.+2      	; 0x596c <str_startswith+0x96>
    596a:	c4 01       	movw	r24, r8
    596c:	4b 81       	ldd	r20, Y+3	; 0x03
    596e:	5c 81       	ldd	r21, Y+4	; 0x04
    5970:	9c 01       	movw	r18, r24
    5972:	28 19       	sub	r18, r8
    5974:	39 09       	sbc	r19, r9
    5976:	24 0f       	add	r18, r20
    5978:	35 1f       	adc	r19, r21
    597a:	69 81       	ldd	r22, Y+1	; 0x01
    597c:	7a 81       	ldd	r23, Y+2	; 0x02
    597e:	62 17       	cp	r22, r18
    5980:	73 07       	cpc	r23, r19
    5982:	40 f0       	brcs	.+16     	; 0x5994 <str_startswith+0xbe>
    5984:	b8 01       	movw	r22, r16
    5986:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    598a:	89 2b       	or	r24, r25
    598c:	31 f0       	breq	.+12     	; 0x599a <str_startswith+0xc4>
    598e:	8e e0       	ldi	r24, 0x0E	; 14
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	05 c0       	rjmp	.+10     	; 0x599e <str_startswith+0xc8>
    5994:	8e e0       	ldi	r24, 0x0E	; 14
    5996:	90 e0       	ldi	r25, 0x00	; 0
    5998:	02 c0       	rjmp	.+4      	; 0x599e <str_startswith+0xc8>
    599a:	8e e1       	ldi	r24, 0x1E	; 30
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	0f 90       	pop	r0
    59a0:	0f 90       	pop	r0
    59a2:	0f 90       	pop	r0
    59a4:	0f 90       	pop	r0
    59a6:	df 91       	pop	r29
    59a8:	cf 91       	pop	r28
    59aa:	1f 91       	pop	r17
    59ac:	0f 91       	pop	r16
    59ae:	ff 90       	pop	r15
    59b0:	ef 90       	pop	r14
    59b2:	df 90       	pop	r13
    59b4:	cf 90       	pop	r12
    59b6:	bf 90       	pop	r11
    59b8:	af 90       	pop	r10
    59ba:	9f 90       	pop	r9
    59bc:	8f 90       	pop	r8
    59be:	08 95       	ret

000059c0 <str_finder>:
    59c0:	2f 92       	push	r2
    59c2:	3f 92       	push	r3
    59c4:	5f 92       	push	r5
    59c6:	6f 92       	push	r6
    59c8:	7f 92       	push	r7
    59ca:	8f 92       	push	r8
    59cc:	9f 92       	push	r9
    59ce:	af 92       	push	r10
    59d0:	bf 92       	push	r11
    59d2:	cf 92       	push	r12
    59d4:	df 92       	push	r13
    59d6:	ef 92       	push	r14
    59d8:	ff 92       	push	r15
    59da:	0f 93       	push	r16
    59dc:	1f 93       	push	r17
    59de:	cf 93       	push	r28
    59e0:	df 93       	push	r29
    59e2:	00 d0       	rcall	.+0      	; 0x59e4 <str_finder+0x24>
    59e4:	00 d0       	rcall	.+0      	; 0x59e6 <str_finder+0x26>
    59e6:	00 d0       	rcall	.+0      	; 0x59e8 <str_finder+0x28>
    59e8:	cd b7       	in	r28, 0x3d	; 61
    59ea:	de b7       	in	r29, 0x3e	; 62
    59ec:	5c 01       	movw	r10, r24
    59ee:	8b 01       	movw	r16, r22
    59f0:	5e 83       	std	Y+6, r21	; 0x06
    59f2:	4d 83       	std	Y+5, r20	; 0x05
    59f4:	52 2e       	mov	r5, r18
    59f6:	db 01       	movw	r26, r22
    59f8:	ed 90       	ld	r14, X+
    59fa:	fc 90       	ld	r15, X
    59fc:	c7 01       	movw	r24, r14
    59fe:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    5a02:	4c 01       	movw	r8, r24
    5a04:	c7 01       	movw	r24, r14
    5a06:	87 70       	andi	r24, 0x07	; 7
    5a08:	99 27       	eor	r25, r25
    5a0a:	02 97       	sbiw	r24, 0x02	; 2
    5a0c:	09 f4       	brne	.+2      	; 0x5a10 <str_finder+0x50>
    5a0e:	93 c0       	rjmp	.+294    	; 0x5b36 <str_finder+0x176>
    5a10:	c7 01       	movw	r24, r14
    5a12:	83 70       	andi	r24, 0x03	; 3
    5a14:	99 27       	eor	r25, r25
    5a16:	89 2b       	or	r24, r25
    5a18:	49 f4       	brne	.+18     	; 0x5a2c <str_finder+0x6c>
    5a1a:	d7 01       	movw	r26, r14
    5a1c:	ed 91       	ld	r30, X+
    5a1e:	fc 91       	ld	r31, X
    5a20:	86 85       	ldd	r24, Z+14	; 0x0e
    5a22:	97 85       	ldd	r25, Z+15	; 0x0f
    5a24:	81 5a       	subi	r24, 0xA1	; 161
    5a26:	98 47       	sbci	r25, 0x78	; 120
    5a28:	09 f4       	brne	.+2      	; 0x5a2c <str_finder+0x6c>
    5a2a:	8f c0       	rjmp	.+286    	; 0x5b4a <str_finder+0x18a>
    5a2c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5a30:	81 e7       	ldi	r24, 0x71	; 113
    5a32:	94 e0       	ldi	r25, 0x04	; 4
    5a34:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    5a38:	be 01       	movw	r22, r28
    5a3a:	6f 5f       	subi	r22, 0xFF	; 255
    5a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5a3e:	c7 01       	movw	r24, r14
    5a40:	96 95       	lsr	r25
    5a42:	87 95       	ror	r24
    5a44:	96 95       	lsr	r25
    5a46:	87 95       	ror	r24
    5a48:	96 95       	lsr	r25
    5a4a:	87 95       	ror	r24
    5a4c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    5a50:	7c 01       	movw	r14, r24
    5a52:	07 c0       	rjmp	.+14     	; 0x5a62 <str_finder+0xa2>
    5a54:	f7 01       	movw	r30, r14
    5a56:	84 81       	ldd	r24, Z+4	; 0x04
    5a58:	95 81       	ldd	r25, Z+5	; 0x05
    5a5a:	9a 83       	std	Y+2, r25	; 0x02
    5a5c:	89 83       	std	Y+1, r24	; 0x01
    5a5e:	e6 80       	ldd	r14, Z+6	; 0x06
    5a60:	f7 80       	ldd	r15, Z+7	; 0x07
    5a62:	d8 01       	movw	r26, r16
    5a64:	12 96       	adiw	r26, 0x02	; 2
    5a66:	ed 91       	ld	r30, X+
    5a68:	fc 91       	ld	r31, X
    5a6a:	13 97       	sbiw	r26, 0x03	; 3
    5a6c:	cf 01       	movw	r24, r30
    5a6e:	87 70       	andi	r24, 0x07	; 7
    5a70:	99 27       	eor	r25, r25
    5a72:	02 97       	sbiw	r24, 0x02	; 2
    5a74:	71 f4       	brne	.+28     	; 0x5a92 <str_finder+0xd2>
    5a76:	be 01       	movw	r22, r28
    5a78:	6d 5f       	subi	r22, 0xFD	; 253
    5a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a7c:	cf 01       	movw	r24, r30
    5a7e:	96 95       	lsr	r25
    5a80:	87 95       	ror	r24
    5a82:	96 95       	lsr	r25
    5a84:	87 95       	ror	r24
    5a86:	96 95       	lsr	r25
    5a88:	87 95       	ror	r24
    5a8a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    5a8e:	1c 01       	movw	r2, r24
    5a90:	06 c0       	rjmp	.+12     	; 0x5a9e <str_finder+0xde>
    5a92:	84 81       	ldd	r24, Z+4	; 0x04
    5a94:	95 81       	ldd	r25, Z+5	; 0x05
    5a96:	9c 83       	std	Y+4, r25	; 0x04
    5a98:	8b 83       	std	Y+3, r24	; 0x03
    5a9a:	26 80       	ldd	r2, Z+6	; 0x06
    5a9c:	37 80       	ldd	r3, Z+7	; 0x07
    5a9e:	69 81       	ldd	r22, Y+1	; 0x01
    5aa0:	7a 81       	ldd	r23, Y+2	; 0x02
    5aa2:	67 01       	movw	r12, r14
    5aa4:	c6 0e       	add	r12, r22
    5aa6:	d7 1e       	adc	r13, r23
    5aa8:	b3 e0       	ldi	r27, 0x03	; 3
    5aaa:	ab 16       	cp	r10, r27
    5aac:	b1 04       	cpc	r11, r1
    5aae:	68 f0       	brcs	.+26     	; 0x5aca <str_finder+0x10a>
    5ab0:	f8 01       	movw	r30, r16
    5ab2:	44 81       	ldd	r20, Z+4	; 0x04
    5ab4:	55 81       	ldd	r21, Z+5	; 0x05
    5ab6:	46 30       	cpi	r20, 0x06	; 6
    5ab8:	51 05       	cpc	r21, r1
    5aba:	49 f0       	breq	.+18     	; 0x5ace <str_finder+0x10e>
    5abc:	21 e0       	ldi	r18, 0x01	; 1
    5abe:	c4 01       	movw	r24, r8
    5ac0:	cf dd       	rcall	.-1122   	; 0x5660 <mp_get_index>
    5ac2:	37 01       	movw	r6, r14
    5ac4:	68 0e       	add	r6, r24
    5ac6:	79 1e       	adc	r7, r25
    5ac8:	03 c0       	rjmp	.+6      	; 0x5ad0 <str_finder+0x110>
    5aca:	37 01       	movw	r6, r14
    5acc:	01 c0       	rjmp	.+2      	; 0x5ad0 <str_finder+0x110>
    5ace:	37 01       	movw	r6, r14
    5ad0:	f4 e0       	ldi	r31, 0x04	; 4
    5ad2:	af 16       	cp	r10, r31
    5ad4:	b1 04       	cpc	r11, r1
    5ad6:	80 f0       	brcs	.+32     	; 0x5af8 <str_finder+0x138>
    5ad8:	d8 01       	movw	r26, r16
    5ada:	16 96       	adiw	r26, 0x06	; 6
    5adc:	4d 91       	ld	r20, X+
    5ade:	5c 91       	ld	r21, X
    5ae0:	17 97       	sbiw	r26, 0x07	; 7
    5ae2:	46 30       	cpi	r20, 0x06	; 6
    5ae4:	51 05       	cpc	r21, r1
    5ae6:	41 f0       	breq	.+16     	; 0x5af8 <str_finder+0x138>
    5ae8:	69 81       	ldd	r22, Y+1	; 0x01
    5aea:	7a 81       	ldd	r23, Y+2	; 0x02
    5aec:	21 e0       	ldi	r18, 0x01	; 1
    5aee:	c4 01       	movw	r24, r8
    5af0:	b7 dd       	rcall	.-1170   	; 0x5660 <mp_get_index>
    5af2:	67 01       	movw	r12, r14
    5af4:	c8 0e       	add	r12, r24
    5af6:	d9 1e       	adc	r13, r25
    5af8:	c6 14       	cp	r12, r6
    5afa:	d7 04       	cpc	r13, r7
    5afc:	68 f0       	brcs	.+26     	; 0x5b18 <str_finder+0x158>
    5afe:	2b 81       	ldd	r18, Y+3	; 0x03
    5b00:	3c 81       	ldd	r19, Y+4	; 0x04
    5b02:	b6 01       	movw	r22, r12
    5b04:	66 19       	sub	r22, r6
    5b06:	77 09       	sbc	r23, r7
    5b08:	0d 81       	ldd	r16, Y+5	; 0x05
    5b0a:	1e 81       	ldd	r17, Y+6	; 0x06
    5b0c:	a1 01       	movw	r20, r2
    5b0e:	c3 01       	movw	r24, r6
    5b10:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <find_subbytes>
    5b14:	00 97       	sbiw	r24, 0x00	; 0
    5b16:	31 f4       	brne	.+12     	; 0x5b24 <str_finder+0x164>
    5b18:	55 20       	and	r5, r5
    5b1a:	51 f0       	breq	.+20     	; 0x5b30 <str_finder+0x170>
    5b1c:	8d e5       	ldi	r24, 0x5D	; 93
    5b1e:	95 e0       	ldi	r25, 0x05	; 5
    5b20:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    5b24:	8e 19       	sub	r24, r14
    5b26:	9f 09       	sbc	r25, r15
    5b28:	88 0f       	add	r24, r24
    5b2a:	99 1f       	adc	r25, r25
    5b2c:	81 60       	ori	r24, 0x01	; 1
    5b2e:	19 c0       	rjmp	.+50     	; 0x5b62 <str_finder+0x1a2>
    5b30:	8f ef       	ldi	r24, 0xFF	; 255
    5b32:	9f ef       	ldi	r25, 0xFF	; 255
    5b34:	16 c0       	rjmp	.+44     	; 0x5b62 <str_finder+0x1a2>
    5b36:	f8 01       	movw	r30, r16
    5b38:	82 81       	ldd	r24, Z+2	; 0x02
    5b3a:	93 81       	ldd	r25, Z+3	; 0x03
    5b3c:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    5b40:	88 16       	cp	r8, r24
    5b42:	99 06       	cpc	r9, r25
    5b44:	09 f0       	breq	.+2      	; 0x5b48 <str_finder+0x188>
    5b46:	74 cf       	rjmp	.-280    	; 0x5a30 <str_finder+0x70>
    5b48:	77 cf       	rjmp	.-274    	; 0x5a38 <str_finder+0x78>
    5b4a:	d8 01       	movw	r26, r16
    5b4c:	12 96       	adiw	r26, 0x02	; 2
    5b4e:	8d 91       	ld	r24, X+
    5b50:	9c 91       	ld	r25, X
    5b52:	13 97       	sbiw	r26, 0x03	; 3
    5b54:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    5b58:	88 16       	cp	r8, r24
    5b5a:	99 06       	cpc	r9, r25
    5b5c:	09 f4       	brne	.+2      	; 0x5b60 <str_finder+0x1a0>
    5b5e:	7a cf       	rjmp	.-268    	; 0x5a54 <str_finder+0x94>
    5b60:	67 cf       	rjmp	.-306    	; 0x5a30 <str_finder+0x70>
    5b62:	26 96       	adiw	r28, 0x06	; 6
    5b64:	0f b6       	in	r0, 0x3f	; 63
    5b66:	f8 94       	cli
    5b68:	de bf       	out	0x3e, r29	; 62
    5b6a:	0f be       	out	0x3f, r0	; 63
    5b6c:	cd bf       	out	0x3d, r28	; 61
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	ff 90       	pop	r15
    5b78:	ef 90       	pop	r14
    5b7a:	df 90       	pop	r13
    5b7c:	cf 90       	pop	r12
    5b7e:	bf 90       	pop	r11
    5b80:	af 90       	pop	r10
    5b82:	9f 90       	pop	r9
    5b84:	8f 90       	pop	r8
    5b86:	7f 90       	pop	r7
    5b88:	6f 90       	pop	r6
    5b8a:	5f 90       	pop	r5
    5b8c:	3f 90       	pop	r3
    5b8e:	2f 90       	pop	r2
    5b90:	08 95       	ret

00005b92 <str_find>:
    5b92:	20 e0       	ldi	r18, 0x00	; 0
    5b94:	41 e0       	ldi	r20, 0x01	; 1
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	13 cf       	rjmp	.-474    	; 0x59c0 <str_finder>
    5b9a:	08 95       	ret

00005b9c <str_rfind>:
    5b9c:	20 e0       	ldi	r18, 0x00	; 0
    5b9e:	4f ef       	ldi	r20, 0xFF	; 255
    5ba0:	5f ef       	ldi	r21, 0xFF	; 255
    5ba2:	0e cf       	rjmp	.-484    	; 0x59c0 <str_finder>
    5ba4:	08 95       	ret

00005ba6 <str_index>:
    5ba6:	21 e0       	ldi	r18, 0x01	; 1
    5ba8:	41 e0       	ldi	r20, 0x01	; 1
    5baa:	50 e0       	ldi	r21, 0x00	; 0
    5bac:	09 cf       	rjmp	.-494    	; 0x59c0 <str_finder>
    5bae:	08 95       	ret

00005bb0 <str_rindex>:
    5bb0:	21 e0       	ldi	r18, 0x01	; 1
    5bb2:	4f ef       	ldi	r20, 0xFF	; 255
    5bb4:	5f ef       	ldi	r21, 0xFF	; 255
    5bb6:	04 cf       	rjmp	.-504    	; 0x59c0 <str_finder>
    5bb8:	08 95       	ret

00005bba <mp_obj_new_int_from_uint>:
    5bba:	9c 01       	movw	r18, r24
    5bbc:	22 27       	eor	r18, r18
    5bbe:	30 7c       	andi	r19, 0xC0	; 192
    5bc0:	23 2b       	or	r18, r19
    5bc2:	21 f4       	brne	.+8      	; 0x5bcc <mp_obj_new_int_from_uint+0x12>
    5bc4:	88 0f       	add	r24, r24
    5bc6:	99 1f       	adc	r25, r25
    5bc8:	81 60       	ori	r24, 0x01	; 1
    5bca:	08 95       	ret
    5bcc:	66 e9       	ldi	r22, 0x96	; 150
    5bce:	75 e0       	ldi	r23, 0x05	; 5
    5bd0:	88 e7       	ldi	r24, 0x78	; 120
    5bd2:	91 e2       	ldi	r25, 0x21	; 33
    5bd4:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>

00005bd8 <int_from_bytes>:
    5bd8:	0f 93       	push	r16
    5bda:	1f 93       	push	r17
    5bdc:	cf 93       	push	r28
    5bde:	df 93       	push	r29
    5be0:	00 d0       	rcall	.+0      	; 0x5be2 <int_from_bytes+0xa>
    5be2:	00 d0       	rcall	.+0      	; 0x5be4 <int_from_bytes+0xc>
    5be4:	00 d0       	rcall	.+0      	; 0x5be6 <int_from_bytes+0xe>
    5be6:	cd b7       	in	r28, 0x3d	; 61
    5be8:	de b7       	in	r29, 0x3e	; 62
    5bea:	8b 01       	movw	r16, r22
    5bec:	41 e0       	ldi	r20, 0x01	; 1
    5bee:	50 e0       	ldi	r21, 0x00	; 0
    5bf0:	be 01       	movw	r22, r28
    5bf2:	6f 5f       	subi	r22, 0xFF	; 255
    5bf4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bf6:	d8 01       	movw	r26, r16
    5bf8:	12 96       	adiw	r26, 0x02	; 2
    5bfa:	8d 91       	ld	r24, X+
    5bfc:	9c 91       	ld	r25, X
    5bfe:	13 97       	sbiw	r26, 0x03	; 3
    5c00:	70 db       	rcall	.-2336   	; 0x52e2 <mp_get_buffer_raise>
    5c02:	e9 81       	ldd	r30, Y+1	; 0x01
    5c04:	fa 81       	ldd	r31, Y+2	; 0x02
    5c06:	d8 01       	movw	r26, r16
    5c08:	14 96       	adiw	r26, 0x04	; 4
    5c0a:	8d 91       	ld	r24, X+
    5c0c:	9c 91       	ld	r25, X
    5c0e:	15 97       	sbiw	r26, 0x05	; 5
    5c10:	8a 36       	cpi	r24, 0x6A	; 106
    5c12:	93 40       	sbci	r25, 0x03	; 3
    5c14:	41 f4       	brne	.+16     	; 0x5c26 <int_from_bytes+0x4e>
    5c16:	8b 81       	ldd	r24, Y+3	; 0x03
    5c18:	9c 81       	ldd	r25, Y+4	; 0x04
    5c1a:	01 97       	sbiw	r24, 0x01	; 1
    5c1c:	e8 0f       	add	r30, r24
    5c1e:	f9 1f       	adc	r31, r25
    5c20:	6f ef       	ldi	r22, 0xFF	; 255
    5c22:	7f ef       	ldi	r23, 0xFF	; 255
    5c24:	02 c0       	rjmp	.+4      	; 0x5c2a <int_from_bytes+0x52>
    5c26:	61 e0       	ldi	r22, 0x01	; 1
    5c28:	70 e0       	ldi	r23, 0x00	; 0
    5c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c2c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c2e:	9c 01       	movw	r18, r24
    5c30:	21 50       	subi	r18, 0x01	; 1
    5c32:	31 09       	sbc	r19, r1
    5c34:	89 2b       	or	r24, r25
    5c36:	61 f0       	breq	.+24     	; 0x5c50 <int_from_bytes+0x78>
    5c38:	80 e0       	ldi	r24, 0x00	; 0
    5c3a:	90 e0       	ldi	r25, 0x00	; 0
    5c3c:	98 2f       	mov	r25, r24
    5c3e:	88 27       	eor	r24, r24
    5c40:	40 81       	ld	r20, Z
    5c42:	84 2b       	or	r24, r20
    5c44:	e6 0f       	add	r30, r22
    5c46:	f7 1f       	adc	r31, r23
    5c48:	21 50       	subi	r18, 0x01	; 1
    5c4a:	31 09       	sbc	r19, r1
    5c4c:	b8 f7       	brcc	.-18     	; 0x5c3c <int_from_bytes+0x64>
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <int_from_bytes+0x7c>
    5c50:	80 e0       	ldi	r24, 0x00	; 0
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	b2 df       	rcall	.-156    	; 0x5bba <mp_obj_new_int_from_uint>
    5c56:	26 96       	adiw	r28, 0x06	; 6
    5c58:	0f b6       	in	r0, 0x3f	; 63
    5c5a:	f8 94       	cli
    5c5c:	de bf       	out	0x3e, r29	; 62
    5c5e:	0f be       	out	0x3f, r0	; 63
    5c60:	cd bf       	out	0x3d, r28	; 61
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	08 95       	ret

00005c6c <mp_obj_new_int>:
    5c6c:	9c 01       	movw	r18, r24
    5c6e:	22 0f       	add	r18, r18
    5c70:	33 1f       	adc	r19, r19
    5c72:	82 27       	eor	r24, r18
    5c74:	93 27       	eor	r25, r19
    5c76:	99 23       	and	r25, r25
    5c78:	1c f0       	brlt	.+6      	; 0x5c80 <mp_obj_new_int+0x14>
    5c7a:	c9 01       	movw	r24, r18
    5c7c:	81 60       	ori	r24, 0x01	; 1
    5c7e:	08 95       	ret
    5c80:	66 e9       	ldi	r22, 0x96	; 150
    5c82:	75 e0       	ldi	r23, 0x05	; 5
    5c84:	88 e7       	ldi	r24, 0x78	; 120
    5c86:	91 e2       	ldi	r25, 0x21	; 33
    5c88:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>

00005c8c <mp_unary_op>:
    5c8c:	ff 92       	push	r15
    5c8e:	0f 93       	push	r16
    5c90:	1f 93       	push	r17
    5c92:	cf 93       	push	r28
    5c94:	df 93       	push	r29
    5c96:	00 d0       	rcall	.+0      	; 0x5c98 <mp_unary_op+0xc>
    5c98:	cd b7       	in	r28, 0x3d	; 61
    5c9a:	de b7       	in	r29, 0x3e	; 62
    5c9c:	f8 2e       	mov	r15, r24
    5c9e:	8b 01       	movw	r16, r22
    5ca0:	23 e0       	ldi	r18, 0x03	; 3
    5ca2:	82 13       	cpse	r24, r18
    5ca4:	09 c0       	rjmp	.+18     	; 0x5cb8 <mp_unary_op+0x2c>
    5ca6:	cb 01       	movw	r24, r22
    5ca8:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
    5cac:	88 23       	and	r24, r24
    5cae:	09 f4       	brne	.+2      	; 0x5cb2 <mp_unary_op+0x26>
    5cb0:	b0 c0       	rjmp	.+352    	; 0x5e12 <mp_unary_op+0x186>
    5cb2:	8e e0       	ldi	r24, 0x0E	; 14
    5cb4:	90 e0       	ldi	r25, 0x00	; 0
    5cb6:	c9 c0       	rjmp	.+402    	; 0x5e4a <mp_unary_op+0x1be>
    5cb8:	60 ff       	sbrs	r22, 0
    5cba:	4f c0       	rjmp	.+158    	; 0x5d5a <mp_unary_op+0xce>
    5cbc:	cb 01       	movw	r24, r22
    5cbe:	95 95       	asr	r25
    5cc0:	87 95       	ror	r24
    5cc2:	a4 e0       	ldi	r26, 0x04	; 4
    5cc4:	fa 16       	cp	r15, r26
    5cc6:	a1 f0       	breq	.+40     	; 0x5cf0 <mp_unary_op+0x64>
    5cc8:	af 15       	cp	r26, r15
    5cca:	38 f0       	brcs	.+14     	; 0x5cda <mp_unary_op+0x4e>
    5ccc:	ff 20       	and	r15, r15
    5cce:	09 f4       	brne	.+2      	; 0x5cd2 <mp_unary_op+0x46>
    5cd0:	a3 c0       	rjmp	.+326    	; 0x5e18 <mp_unary_op+0x18c>
    5cd2:	b1 e0       	ldi	r27, 0x01	; 1
    5cd4:	fb 16       	cp	r15, r27
    5cd6:	91 f0       	breq	.+36     	; 0x5cfc <mp_unary_op+0x70>
    5cd8:	36 c0       	rjmp	.+108    	; 0x5d46 <mp_unary_op+0xba>
    5cda:	e7 e0       	ldi	r30, 0x07	; 7
    5cdc:	fe 16       	cp	r15, r30
    5cde:	f9 f0       	breq	.+62     	; 0x5d1e <mp_unary_op+0x92>
    5ce0:	f8 e0       	ldi	r31, 0x08	; 8
    5ce2:	ff 16       	cp	r15, r31
    5ce4:	09 f4       	brne	.+2      	; 0x5ce8 <mp_unary_op+0x5c>
    5ce6:	98 c0       	rjmp	.+304    	; 0x5e18 <mp_unary_op+0x18c>
    5ce8:	26 e0       	ldi	r18, 0x06	; 6
    5cea:	f2 12       	cpse	r15, r18
    5cec:	2c c0       	rjmp	.+88     	; 0x5d46 <mp_unary_op+0xba>
    5cee:	94 c0       	rjmp	.+296    	; 0x5e18 <mp_unary_op+0x18c>
    5cf0:	89 2b       	or	r24, r25
    5cf2:	09 f0       	breq	.+2      	; 0x5cf6 <mp_unary_op+0x6a>
    5cf4:	93 c0       	rjmp	.+294    	; 0x5e1c <mp_unary_op+0x190>
    5cf6:	8e e0       	ldi	r24, 0x0E	; 14
    5cf8:	90 e0       	ldi	r25, 0x00	; 0
    5cfa:	a7 c0       	rjmp	.+334    	; 0x5e4a <mp_unary_op+0x1be>
    5cfc:	81 15       	cp	r24, r1
    5cfe:	a0 ec       	ldi	r26, 0xC0	; 192
    5d00:	9a 07       	cpc	r25, r26
    5d02:	21 f4       	brne	.+8      	; 0x5d0c <mp_unary_op+0x80>
    5d04:	80 e0       	ldi	r24, 0x00	; 0
    5d06:	90 e4       	ldi	r25, 0x40	; 64
    5d08:	b1 df       	rcall	.-158    	; 0x5c6c <mp_obj_new_int>
    5d0a:	9f c0       	rjmp	.+318    	; 0x5e4a <mp_unary_op+0x1be>
    5d0c:	91 95       	neg	r25
    5d0e:	81 95       	neg	r24
    5d10:	91 09       	sbc	r25, r1
    5d12:	8c 01       	movw	r16, r24
    5d14:	00 0f       	add	r16, r16
    5d16:	11 1f       	adc	r17, r17
    5d18:	c8 01       	movw	r24, r16
    5d1a:	81 60       	ori	r24, 0x01	; 1
    5d1c:	96 c0       	rjmp	.+300    	; 0x5e4a <mp_unary_op+0x1be>
    5d1e:	99 23       	and	r25, r25
    5d20:	0c f0       	brlt	.+2      	; 0x5d24 <mp_unary_op+0x98>
    5d22:	7f c0       	rjmp	.+254    	; 0x5e22 <mp_unary_op+0x196>
    5d24:	81 15       	cp	r24, r1
    5d26:	b0 ec       	ldi	r27, 0xC0	; 192
    5d28:	9b 07       	cpc	r25, r27
    5d2a:	21 f4       	brne	.+8      	; 0x5d34 <mp_unary_op+0xa8>
    5d2c:	80 e0       	ldi	r24, 0x00	; 0
    5d2e:	90 e4       	ldi	r25, 0x40	; 64
    5d30:	9d df       	rcall	.-198    	; 0x5c6c <mp_obj_new_int>
    5d32:	8b c0       	rjmp	.+278    	; 0x5e4a <mp_unary_op+0x1be>
    5d34:	91 95       	neg	r25
    5d36:	81 95       	neg	r24
    5d38:	91 09       	sbc	r25, r1
    5d3a:	8c 01       	movw	r16, r24
    5d3c:	00 0f       	add	r16, r16
    5d3e:	11 1f       	adc	r17, r17
    5d40:	c8 01       	movw	r24, r16
    5d42:	81 60       	ori	r24, 0x01	; 1
    5d44:	82 c0       	rjmp	.+260    	; 0x5e4a <mp_unary_op+0x1be>
    5d46:	e2 e0       	ldi	r30, 0x02	; 2
    5d48:	fe 12       	cpse	r15, r30
    5d4a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    5d4e:	80 95       	com	r24
    5d50:	90 95       	com	r25
    5d52:	88 0f       	add	r24, r24
    5d54:	99 1f       	adc	r25, r25
    5d56:	81 60       	ori	r24, 0x01	; 1
    5d58:	78 c0       	rjmp	.+240    	; 0x5e4a <mp_unary_op+0x1be>
    5d5a:	f6 e0       	ldi	r31, 0x06	; 6
    5d5c:	8f 13       	cpse	r24, r31
    5d5e:	3c c0       	rjmp	.+120    	; 0x5dd8 <mp_unary_op+0x14c>
    5d60:	cb 01       	movw	r24, r22
    5d62:	87 70       	andi	r24, 0x07	; 7
    5d64:	99 27       	eor	r25, r25
    5d66:	02 97       	sbiw	r24, 0x02	; 2
    5d68:	81 f0       	breq	.+32     	; 0x5d8a <mp_unary_op+0xfe>
    5d6a:	cb 01       	movw	r24, r22
    5d6c:	83 70       	andi	r24, 0x03	; 3
    5d6e:	99 27       	eor	r25, r25
    5d70:	89 2b       	or	r24, r25
    5d72:	09 f0       	breq	.+2      	; 0x5d76 <mp_unary_op+0xea>
    5d74:	5b c0       	rjmp	.+182    	; 0x5e2c <mp_unary_op+0x1a0>
    5d76:	db 01       	movw	r26, r22
    5d78:	ed 91       	ld	r30, X+
    5d7a:	fc 91       	ld	r31, X
    5d7c:	86 85       	ldd	r24, Z+14	; 0x0e
    5d7e:	97 85       	ldd	r25, Z+15	; 0x0f
    5d80:	81 5a       	subi	r24, 0xA1	; 161
    5d82:	98 47       	sbci	r25, 0x78	; 120
    5d84:	09 f0       	breq	.+2      	; 0x5d88 <mp_unary_op+0xfc>
    5d86:	52 c0       	rjmp	.+164    	; 0x5e2c <mp_unary_op+0x1a0>
    5d88:	0c c0       	rjmp	.+24     	; 0x5da2 <mp_unary_op+0x116>
    5d8a:	16 95       	lsr	r17
    5d8c:	07 95       	ror	r16
    5d8e:	16 95       	lsr	r17
    5d90:	07 95       	ror	r16
    5d92:	16 95       	lsr	r17
    5d94:	07 95       	ror	r16
    5d96:	c8 01       	movw	r24, r16
    5d98:	0e 94 4b 0b 	call	0x1696	; 0x1696 <qstr_hash>
    5d9c:	00 97       	sbiw	r24, 0x00	; 0
    5d9e:	39 f0       	breq	.+14     	; 0x5dae <mp_unary_op+0x122>
    5da0:	17 c0       	rjmp	.+46     	; 0x5dd0 <mp_unary_op+0x144>
    5da2:	fb 01       	movw	r30, r22
    5da4:	82 81       	ldd	r24, Z+2	; 0x02
    5da6:	93 81       	ldd	r25, Z+3	; 0x03
    5da8:	00 97       	sbiw	r24, 0x00	; 0
    5daa:	41 f0       	breq	.+16     	; 0x5dbc <mp_unary_op+0x130>
    5dac:	11 c0       	rjmp	.+34     	; 0x5dd0 <mp_unary_op+0x144>
    5dae:	be 01       	movw	r22, r28
    5db0:	6f 5f       	subi	r22, 0xFF	; 255
    5db2:	7f 4f       	sbci	r23, 0xFF	; 255
    5db4:	c8 01       	movw	r24, r16
    5db6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    5dba:	06 c0       	rjmp	.+12     	; 0x5dc8 <mp_unary_op+0x13c>
    5dbc:	84 81       	ldd	r24, Z+4	; 0x04
    5dbe:	95 81       	ldd	r25, Z+5	; 0x05
    5dc0:	9a 83       	std	Y+2, r25	; 0x02
    5dc2:	89 83       	std	Y+1, r24	; 0x01
    5dc4:	86 81       	ldd	r24, Z+6	; 0x06
    5dc6:	97 81       	ldd	r25, Z+7	; 0x07
    5dc8:	69 81       	ldd	r22, Y+1	; 0x01
    5dca:	7a 81       	ldd	r23, Y+2	; 0x02
    5dcc:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    5dd0:	88 0f       	add	r24, r24
    5dd2:	99 1f       	adc	r25, r25
    5dd4:	81 60       	ori	r24, 0x01	; 1
    5dd6:	39 c0       	rjmp	.+114    	; 0x5e4a <mp_unary_op+0x1be>
    5dd8:	cb 01       	movw	r24, r22
    5dda:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    5dde:	dc 01       	movw	r26, r24
    5de0:	1c 96       	adiw	r26, 0x0c	; 12
    5de2:	ed 91       	ld	r30, X+
    5de4:	fc 91       	ld	r31, X
    5de6:	1d 97       	sbiw	r26, 0x0d	; 13
    5de8:	30 97       	sbiw	r30, 0x00	; 0
    5dea:	29 f0       	breq	.+10     	; 0x5df6 <mp_unary_op+0x16a>
    5dec:	b8 01       	movw	r22, r16
    5dee:	8f 2d       	mov	r24, r15
    5df0:	09 95       	icall
    5df2:	00 97       	sbiw	r24, 0x00	; 0
    5df4:	51 f5       	brne	.+84     	; 0x5e4a <mp_unary_op+0x1be>
    5df6:	b4 e0       	ldi	r27, 0x04	; 4
    5df8:	fb 16       	cp	r15, r27
    5dfa:	a9 f0       	breq	.+42     	; 0x5e26 <mp_unary_op+0x19a>
    5dfc:	e8 e0       	ldi	r30, 0x08	; 8
    5dfe:	fe 12       	cpse	r15, r30
    5e00:	04 c0       	rjmp	.+8      	; 0x5e0a <mp_unary_op+0x17e>
    5e02:	89 ea       	ldi	r24, 0xA9	; 169
    5e04:	95 e0       	ldi	r25, 0x05	; 5
    5e06:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    5e0a:	8e eb       	ldi	r24, 0xBE	; 190
    5e0c:	95 e0       	ldi	r25, 0x05	; 5
    5e0e:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    5e12:	8e e1       	ldi	r24, 0x1E	; 30
    5e14:	90 e0       	ldi	r25, 0x00	; 0
    5e16:	19 c0       	rjmp	.+50     	; 0x5e4a <mp_unary_op+0x1be>
    5e18:	c8 01       	movw	r24, r16
    5e1a:	17 c0       	rjmp	.+46     	; 0x5e4a <mp_unary_op+0x1be>
    5e1c:	8e e1       	ldi	r24, 0x1E	; 30
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	14 c0       	rjmp	.+40     	; 0x5e4a <mp_unary_op+0x1be>
    5e22:	cb 01       	movw	r24, r22
    5e24:	12 c0       	rjmp	.+36     	; 0x5e4a <mp_unary_op+0x1be>
    5e26:	8e e1       	ldi	r24, 0x1E	; 30
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	0f c0       	rjmp	.+30     	; 0x5e4a <mp_unary_op+0x1be>
    5e2c:	c8 01       	movw	r24, r16
    5e2e:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    5e32:	dc 01       	movw	r26, r24
    5e34:	1c 96       	adiw	r26, 0x0c	; 12
    5e36:	ed 91       	ld	r30, X+
    5e38:	fc 91       	ld	r31, X
    5e3a:	1d 97       	sbiw	r26, 0x0d	; 13
    5e3c:	30 97       	sbiw	r30, 0x00	; 0
    5e3e:	29 f3       	breq	.-54     	; 0x5e0a <mp_unary_op+0x17e>
    5e40:	b8 01       	movw	r22, r16
    5e42:	8f 2d       	mov	r24, r15
    5e44:	09 95       	icall
    5e46:	00 97       	sbiw	r24, 0x00	; 0
    5e48:	01 f3       	breq	.-64     	; 0x5e0a <mp_unary_op+0x17e>
    5e4a:	0f 90       	pop	r0
    5e4c:	0f 90       	pop	r0
    5e4e:	df 91       	pop	r29
    5e50:	cf 91       	pop	r28
    5e52:	1f 91       	pop	r17
    5e54:	0f 91       	pop	r16
    5e56:	ff 90       	pop	r15
    5e58:	08 95       	ret

00005e5a <mp_obj_get_int>:
    5e5a:	8e 30       	cpi	r24, 0x0E	; 14
    5e5c:	91 05       	cpc	r25, r1
    5e5e:	e1 f0       	breq	.+56     	; 0x5e98 <mp_obj_get_int+0x3e>
    5e60:	8e 31       	cpi	r24, 0x1E	; 30
    5e62:	91 05       	cpc	r25, r1
    5e64:	e1 f0       	breq	.+56     	; 0x5e9e <mp_obj_get_int+0x44>
    5e66:	80 ff       	sbrs	r24, 0
    5e68:	03 c0       	rjmp	.+6      	; 0x5e70 <mp_obj_get_int+0x16>
    5e6a:	95 95       	asr	r25
    5e6c:	87 95       	ror	r24
    5e6e:	08 95       	ret
    5e70:	9c 01       	movw	r18, r24
    5e72:	23 70       	andi	r18, 0x03	; 3
    5e74:	33 27       	eor	r19, r19
    5e76:	23 2b       	or	r18, r19
    5e78:	49 f4       	brne	.+18     	; 0x5e8c <mp_obj_get_int+0x32>
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	20 81       	ld	r18, Z
    5e7e:	31 81       	ldd	r19, Z+1	; 0x01
    5e80:	28 5b       	subi	r18, 0xB8	; 184
    5e82:	3d 41       	sbci	r19, 0x1D	; 29
    5e84:	19 f4       	brne	.+6      	; 0x5e8c <mp_obj_get_int+0x32>
    5e86:	95 95       	asr	r25
    5e88:	87 95       	ror	r24
    5e8a:	08 95       	ret
    5e8c:	bc 01       	movw	r22, r24
    5e8e:	88 e0       	ldi	r24, 0x08	; 8
    5e90:	fd de       	rcall	.-518    	; 0x5c8c <mp_unary_op>
    5e92:	95 95       	asr	r25
    5e94:	87 95       	ror	r24
    5e96:	08 95       	ret
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	90 e0       	ldi	r25, 0x00	; 0
    5e9c:	08 95       	ret
    5e9e:	81 e0       	ldi	r24, 0x01	; 1
    5ea0:	90 e0       	ldi	r25, 0x00	; 0
    5ea2:	08 95       	ret

00005ea4 <mp_obj_get_int_truncated>:
    5ea4:	80 fd       	sbrc	r24, 0
    5ea6:	0b c0       	rjmp	.+22     	; 0x5ebe <mp_obj_get_int_truncated+0x1a>
    5ea8:	9c 01       	movw	r18, r24
    5eaa:	23 70       	andi	r18, 0x03	; 3
    5eac:	33 27       	eor	r19, r19
    5eae:	23 2b       	or	r18, r19
    5eb0:	49 f4       	brne	.+18     	; 0x5ec4 <mp_obj_get_int_truncated+0x20>
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	20 81       	ld	r18, Z
    5eb6:	31 81       	ldd	r19, Z+1	; 0x01
    5eb8:	28 5b       	subi	r18, 0xB8	; 184
    5eba:	3d 41       	sbci	r19, 0x1D	; 29
    5ebc:	19 f4       	brne	.+6      	; 0x5ec4 <mp_obj_get_int_truncated+0x20>
    5ebe:	95 95       	asr	r25
    5ec0:	87 95       	ror	r24
    5ec2:	08 95       	ret
    5ec4:	ca cf       	rjmp	.-108    	; 0x5e5a <mp_obj_get_int>
    5ec6:	08 95       	ret

00005ec8 <mp_obj_int_sign>:
    5ec8:	c8 df       	rcall	.-112    	; 0x5e5a <mp_obj_get_int>
    5eca:	99 23       	and	r25, r25
    5ecc:	4c f0       	brlt	.+18     	; 0x5ee0 <mp_obj_int_sign+0x18>
    5ece:	21 e0       	ldi	r18, 0x01	; 1
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	18 16       	cp	r1, r24
    5ed4:	19 06       	cpc	r1, r25
    5ed6:	0c f0       	brlt	.+2      	; 0x5eda <mp_obj_int_sign+0x12>
    5ed8:	20 e0       	ldi	r18, 0x00	; 0
    5eda:	82 2f       	mov	r24, r18
    5edc:	93 2f       	mov	r25, r19
    5ede:	08 95       	ret
    5ee0:	8f ef       	ldi	r24, 0xFF	; 255
    5ee2:	9f ef       	ldi	r25, 0xFF	; 255
    5ee4:	08 95       	ret

00005ee6 <mp_micropython_opt_level>:
    5ee6:	89 2b       	or	r24, r25
    5ee8:	41 f4       	brne	.+16     	; 0x5efa <mp_micropython_opt_level+0x14>
    5eea:	80 91 a8 6b 	lds	r24, 0x6BA8	; 0x806ba8 <mp_state_ctx+0x4e>
    5eee:	90 91 a9 6b 	lds	r25, 0x6BA9	; 0x806ba9 <mp_state_ctx+0x4f>
    5ef2:	88 0f       	add	r24, r24
    5ef4:	99 1f       	adc	r25, r25
    5ef6:	81 60       	ori	r24, 0x01	; 1
    5ef8:	08 95       	ret
    5efa:	fb 01       	movw	r30, r22
    5efc:	80 81       	ld	r24, Z
    5efe:	91 81       	ldd	r25, Z+1	; 0x01
    5f00:	ac df       	rcall	.-168    	; 0x5e5a <mp_obj_get_int>
    5f02:	90 93 a9 6b 	sts	0x6BA9, r25	; 0x806ba9 <mp_state_ctx+0x4f>
    5f06:	80 93 a8 6b 	sts	0x6BA8, r24	; 0x806ba8 <mp_state_ctx+0x4e>
    5f0a:	86 e0       	ldi	r24, 0x06	; 6
    5f0c:	90 e0       	ldi	r25, 0x00	; 0
    5f0e:	08 95       	ret

00005f10 <bool_unary_op>:
    5f10:	85 30       	cpi	r24, 0x05	; 5
    5f12:	69 f0       	breq	.+26     	; 0x5f2e <bool_unary_op+0x1e>
    5f14:	21 e0       	ldi	r18, 0x01	; 1
    5f16:	30 e0       	ldi	r19, 0x00	; 0
    5f18:	6e 30       	cpi	r22, 0x0E	; 14
    5f1a:	71 05       	cpc	r23, r1
    5f1c:	11 f4       	brne	.+4      	; 0x5f22 <bool_unary_op+0x12>
    5f1e:	20 e0       	ldi	r18, 0x00	; 0
    5f20:	30 e0       	ldi	r19, 0x00	; 0
    5f22:	b9 01       	movw	r22, r18
    5f24:	66 0f       	add	r22, r22
    5f26:	77 1f       	adc	r23, r23
    5f28:	61 60       	ori	r22, 0x01	; 1
    5f2a:	b0 ce       	rjmp	.-672    	; 0x5c8c <mp_unary_op>
    5f2c:	08 95       	ret
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	08 95       	ret

00005f34 <mp_obj_tuple_unary_op>:
    5f34:	cf 92       	push	r12
    5f36:	df 92       	push	r13
    5f38:	ef 92       	push	r14
    5f3a:	ff 92       	push	r15
    5f3c:	0f 93       	push	r16
    5f3e:	1f 93       	push	r17
    5f40:	cf 93       	push	r28
    5f42:	df 93       	push	r29
    5f44:	85 30       	cpi	r24, 0x05	; 5
    5f46:	89 f1       	breq	.+98     	; 0x5faa <mp_obj_tuple_unary_op+0x76>
    5f48:	86 30       	cpi	r24, 0x06	; 6
    5f4a:	51 f0       	breq	.+20     	; 0x5f60 <mp_obj_tuple_unary_op+0x2c>
    5f4c:	84 30       	cpi	r24, 0x04	; 4
    5f4e:	a1 f5       	brne	.+104    	; 0x5fb8 <mp_obj_tuple_unary_op+0x84>
    5f50:	fb 01       	movw	r30, r22
    5f52:	82 81       	ldd	r24, Z+2	; 0x02
    5f54:	93 81       	ldd	r25, Z+3	; 0x03
    5f56:	89 2b       	or	r24, r25
    5f58:	91 f5       	brne	.+100    	; 0x5fbe <mp_obj_tuple_unary_op+0x8a>
    5f5a:	8e e0       	ldi	r24, 0x0E	; 14
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	31 c0       	rjmp	.+98     	; 0x5fc2 <mp_obj_tuple_unary_op+0x8e>
    5f60:	ca ea       	ldi	r28, 0xAA	; 170
    5f62:	da e1       	ldi	r29, 0x1A	; 26
    5f64:	fb 01       	movw	r30, r22
    5f66:	82 81       	ldd	r24, Z+2	; 0x02
    5f68:	93 81       	ldd	r25, Z+3	; 0x03
    5f6a:	89 2b       	or	r24, r25
    5f6c:	c9 f0       	breq	.+50     	; 0x5fa0 <mp_obj_tuple_unary_op+0x6c>
    5f6e:	6b 01       	movw	r12, r22
    5f70:	7b 01       	movw	r14, r22
    5f72:	f4 e0       	ldi	r31, 0x04	; 4
    5f74:	ef 0e       	add	r14, r31
    5f76:	f1 1c       	adc	r15, r1
    5f78:	00 e0       	ldi	r16, 0x00	; 0
    5f7a:	10 e0       	ldi	r17, 0x00	; 0
    5f7c:	f7 01       	movw	r30, r14
    5f7e:	61 91       	ld	r22, Z+
    5f80:	71 91       	ld	r23, Z+
    5f82:	7f 01       	movw	r14, r30
    5f84:	86 e0       	ldi	r24, 0x06	; 6
    5f86:	82 de       	rcall	.-764    	; 0x5c8c <mp_unary_op>
    5f88:	95 95       	asr	r25
    5f8a:	87 95       	ror	r24
    5f8c:	c8 0f       	add	r28, r24
    5f8e:	d9 1f       	adc	r29, r25
    5f90:	0f 5f       	subi	r16, 0xFF	; 255
    5f92:	1f 4f       	sbci	r17, 0xFF	; 255
    5f94:	f6 01       	movw	r30, r12
    5f96:	82 81       	ldd	r24, Z+2	; 0x02
    5f98:	93 81       	ldd	r25, Z+3	; 0x03
    5f9a:	08 17       	cp	r16, r24
    5f9c:	19 07       	cpc	r17, r25
    5f9e:	70 f3       	brcs	.-36     	; 0x5f7c <mp_obj_tuple_unary_op+0x48>
    5fa0:	ce 01       	movw	r24, r28
    5fa2:	88 0f       	add	r24, r24
    5fa4:	99 1f       	adc	r25, r25
    5fa6:	81 60       	ori	r24, 0x01	; 1
    5fa8:	0c c0       	rjmp	.+24     	; 0x5fc2 <mp_obj_tuple_unary_op+0x8e>
    5faa:	fb 01       	movw	r30, r22
    5fac:	82 81       	ldd	r24, Z+2	; 0x02
    5fae:	93 81       	ldd	r25, Z+3	; 0x03
    5fb0:	88 0f       	add	r24, r24
    5fb2:	99 1f       	adc	r25, r25
    5fb4:	81 60       	ori	r24, 0x01	; 1
    5fb6:	05 c0       	rjmp	.+10     	; 0x5fc2 <mp_obj_tuple_unary_op+0x8e>
    5fb8:	80 e0       	ldi	r24, 0x00	; 0
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <mp_obj_tuple_unary_op+0x8e>
    5fbe:	8e e1       	ldi	r24, 0x1E	; 30
    5fc0:	90 e0       	ldi	r25, 0x00	; 0
    5fc2:	df 91       	pop	r29
    5fc4:	cf 91       	pop	r28
    5fc6:	1f 91       	pop	r17
    5fc8:	0f 91       	pop	r16
    5fca:	ff 90       	pop	r15
    5fcc:	ef 90       	pop	r14
    5fce:	df 90       	pop	r13
    5fd0:	cf 90       	pop	r12
    5fd2:	08 95       	ret

00005fd4 <mp_builtin_abs>:
    5fd4:	bc 01       	movw	r22, r24
    5fd6:	87 e0       	ldi	r24, 0x07	; 7
    5fd8:	59 ce       	rjmp	.-846    	; 0x5c8c <mp_unary_op>
    5fda:	08 95       	ret

00005fdc <mp_builtin_hash>:
    5fdc:	bc 01       	movw	r22, r24
    5fde:	86 e0       	ldi	r24, 0x06	; 6
    5fe0:	55 ce       	rjmp	.-854    	; 0x5c8c <mp_unary_op>
    5fe2:	08 95       	ret

00005fe4 <mp_obj_id>:
    5fe4:	9c 01       	movw	r18, r24
    5fe6:	23 70       	andi	r18, 0x03	; 3
    5fe8:	33 27       	eor	r19, r19
    5fea:	23 2b       	or	r18, r19
    5fec:	11 f0       	breq	.+4      	; 0x5ff2 <mp_obj_id+0xe>
    5fee:	3e ce       	rjmp	.-900    	; 0x5c6c <mp_obj_new_int>
    5ff0:	08 95       	ret
    5ff2:	99 23       	and	r25, r25
    5ff4:	24 f0       	brlt	.+8      	; 0x5ffe <mp_obj_id+0x1a>
    5ff6:	88 0f       	add	r24, r24
    5ff8:	99 1f       	adc	r25, r25
    5ffa:	81 60       	ori	r24, 0x01	; 1
    5ffc:	08 95       	ret
    5ffe:	dd cd       	rjmp	.-1094   	; 0x5bba <mp_obj_new_int_from_uint>
    6000:	08 95       	ret

00006002 <mp_builtin_round>:
    6002:	db 01       	movw	r26, r22
    6004:	ed 91       	ld	r30, X+
    6006:	fc 91       	ld	r31, X
    6008:	e0 fd       	sbrc	r30, 0
    600a:	0a c0       	rjmp	.+20     	; 0x6020 <mp_builtin_round+0x1e>
    600c:	9f 01       	movw	r18, r30
    600e:	23 70       	andi	r18, 0x03	; 3
    6010:	33 27       	eor	r19, r19
    6012:	23 2b       	or	r18, r19
    6014:	51 f4       	brne	.+20     	; 0x602a <mp_builtin_round+0x28>
    6016:	20 81       	ld	r18, Z
    6018:	31 81       	ldd	r19, Z+1	; 0x01
    601a:	28 5b       	subi	r18, 0xB8	; 184
    601c:	3d 41       	sbci	r19, 0x1D	; 29
    601e:	29 f4       	brne	.+10     	; 0x602a <mp_builtin_round+0x28>
    6020:	02 97       	sbiw	r24, 0x02	; 2
    6022:	38 f0       	brcs	.+14     	; 0x6032 <mp_builtin_round+0x30>
    6024:	80 e0       	ldi	r24, 0x00	; 0
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	b9 da       	rcall	.-2702   	; 0x559c <mp_raise_NotImplementedError>
    602a:	cf 01       	movw	r24, r30
    602c:	16 df       	rcall	.-468    	; 0x5e5a <mp_obj_get_int>
    602e:	1e ce       	rjmp	.-964    	; 0x5c6c <mp_obj_new_int>
    6030:	08 95       	ret
    6032:	8e 2f       	mov	r24, r30
    6034:	9f 2f       	mov	r25, r31
    6036:	08 95       	ret

00006038 <mp_parse_num_integer>:
    6038:	2f 92       	push	r2
    603a:	3f 92       	push	r3
    603c:	4f 92       	push	r4
    603e:	5f 92       	push	r5
    6040:	6f 92       	push	r6
    6042:	7f 92       	push	r7
    6044:	8f 92       	push	r8
    6046:	9f 92       	push	r9
    6048:	af 92       	push	r10
    604a:	bf 92       	push	r11
    604c:	cf 92       	push	r12
    604e:	df 92       	push	r13
    6050:	ef 92       	push	r14
    6052:	ff 92       	push	r15
    6054:	0f 93       	push	r16
    6056:	1f 93       	push	r17
    6058:	cf 93       	push	r28
    605a:	df 93       	push	r29
    605c:	cd b7       	in	r28, 0x3d	; 61
    605e:	de b7       	in	r29, 0x3e	; 62
    6060:	27 97       	sbiw	r28, 0x07	; 7
    6062:	0f b6       	in	r0, 0x3f	; 63
    6064:	f8 94       	cli
    6066:	de bf       	out	0x3e, r29	; 62
    6068:	0f be       	out	0x3f, r0	; 63
    606a:	cd bf       	out	0x3d, r28	; 61
    606c:	7c 01       	movw	r14, r24
    606e:	5a 83       	std	Y+2, r21	; 0x02
    6070:	49 83       	std	Y+1, r20	; 0x01
    6072:	3f 83       	std	Y+7, r19	; 0x07
    6074:	2e 83       	std	Y+6, r18	; 0x06
    6076:	1c 01       	movw	r2, r24
    6078:	26 0e       	add	r2, r22
    607a:	37 1e       	adc	r3, r23
    607c:	84 2f       	mov	r24, r20
    607e:	95 2f       	mov	r25, r21
    6080:	00 97       	sbiw	r24, 0x00	; 0
    6082:	19 f0       	breq	.+6      	; 0x608a <mp_parse_num_integer+0x52>
    6084:	02 97       	sbiw	r24, 0x02	; 2
    6086:	83 97       	sbiw	r24, 0x23	; 35
    6088:	38 f4       	brcc	.+14     	; 0x6098 <mp_parse_num_integer+0x60>
    608a:	e2 14       	cp	r14, r2
    608c:	f3 04       	cpc	r15, r3
    608e:	08 f0       	brcs	.+2      	; 0x6092 <mp_parse_num_integer+0x5a>
    6090:	b9 c0       	rjmp	.+370    	; 0x6204 <mp_parse_num_integer+0x1cc>
    6092:	87 01       	movw	r16, r14
    6094:	61 01       	movw	r12, r2
    6096:	09 c0       	rjmp	.+18     	; 0x60aa <mp_parse_num_integer+0x72>
    6098:	8b ef       	ldi	r24, 0xFB	; 251
    609a:	95 e0       	ldi	r25, 0x05	; 5
    609c:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    60a0:	78 01       	movw	r14, r16
    60a2:	0c 15       	cp	r16, r12
    60a4:	1d 05       	cpc	r17, r13
    60a6:	09 f4       	brne	.+2      	; 0x60aa <mp_parse_num_integer+0x72>
    60a8:	ad c0       	rjmp	.+346    	; 0x6204 <mp_parse_num_integer+0x1cc>
    60aa:	78 01       	movw	r14, r16
    60ac:	0f 5f       	subi	r16, 0xFF	; 255
    60ae:	1f 4f       	sbci	r17, 0xFF	; 255
    60b0:	f7 01       	movw	r30, r14
    60b2:	80 81       	ld	r24, Z
    60b4:	90 e0       	ldi	r25, 0x00	; 0
    60b6:	0e 94 de 00 	call	0x1bc	; 0x1bc <unichar_isspace>
    60ba:	81 11       	cpse	r24, r1
    60bc:	f1 cf       	rjmp	.-30     	; 0x60a0 <mp_parse_num_integer+0x68>
    60be:	e2 14       	cp	r14, r2
    60c0:	f3 04       	cpc	r15, r3
    60c2:	08 f0       	brcs	.+2      	; 0x60c6 <mp_parse_num_integer+0x8e>
    60c4:	9f c0       	rjmp	.+318    	; 0x6204 <mp_parse_num_integer+0x1cc>
    60c6:	f7 01       	movw	r30, r14
    60c8:	80 81       	ld	r24, Z
    60ca:	8b 32       	cpi	r24, 0x2B	; 43
    60cc:	11 f4       	brne	.+4      	; 0x60d2 <mp_parse_num_integer+0x9a>
    60ce:	78 01       	movw	r14, r16
    60d0:	99 c0       	rjmp	.+306    	; 0x6204 <mp_parse_num_integer+0x1cc>
    60d2:	8d 32       	cpi	r24, 0x2D	; 45
    60d4:	09 f0       	breq	.+2      	; 0x60d8 <mp_parse_num_integer+0xa0>
    60d6:	96 c0       	rjmp	.+300    	; 0x6204 <mp_parse_num_integer+0x1cc>
    60d8:	8f ef       	ldi	r24, 0xFF	; 255
    60da:	e8 1a       	sub	r14, r24
    60dc:	f8 0a       	sbc	r15, r24
    60de:	b1 01       	movw	r22, r2
    60e0:	6e 19       	sub	r22, r14
    60e2:	7f 09       	sbc	r23, r15
    60e4:	ae 01       	movw	r20, r28
    60e6:	4f 5f       	subi	r20, 0xFF	; 255
    60e8:	5f 4f       	sbci	r21, 0xFF	; 255
    60ea:	c7 01       	movw	r24, r14
    60ec:	0e 94 85 19 	call	0x330a	; 0x330a <mp_parse_num_base>
    60f0:	8e 0d       	add	r24, r14
    60f2:	9f 1d       	adc	r25, r15
    60f4:	9c 83       	std	Y+4, r25	; 0x04
    60f6:	8b 83       	std	Y+3, r24	; 0x03
    60f8:	82 15       	cp	r24, r2
    60fa:	93 05       	cpc	r25, r3
    60fc:	08 f0       	brcs	.+2      	; 0x6100 <mp_parse_num_integer+0xc8>
    60fe:	4a c0       	rjmp	.+148    	; 0x6194 <mp_parse_num_integer+0x15c>
    6100:	91 e0       	ldi	r25, 0x01	; 1
    6102:	9d 83       	std	Y+5, r25	; 0x05
    6104:	01 c0       	rjmp	.+2      	; 0x6108 <mp_parse_num_integer+0xd0>
    6106:	1d 82       	std	Y+5, r1	; 0x05
    6108:	89 80       	ldd	r8, Y+1	; 0x01
    610a:	9a 80       	ldd	r9, Y+2	; 0x02
    610c:	24 01       	movw	r4, r8
    610e:	0b 81       	ldd	r16, Y+3	; 0x03
    6110:	1c 81       	ldd	r17, Y+4	; 0x04
    6112:	31 01       	movw	r6, r2
    6114:	e1 2c       	mov	r14, r1
    6116:	f1 2c       	mov	r15, r1
    6118:	58 01       	movw	r10, r16
    611a:	f8 01       	movw	r30, r16
    611c:	81 91       	ld	r24, Z+
    611e:	8f 01       	movw	r16, r30
    6120:	28 2f       	mov	r18, r24
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	69 01       	movw	r12, r18
    6126:	f0 e3       	ldi	r31, 0x30	; 48
    6128:	cf 1a       	sub	r12, r31
    612a:	d1 08       	sbc	r13, r1
    612c:	9a e0       	ldi	r25, 0x0A	; 10
    612e:	c9 16       	cp	r12, r25
    6130:	d1 04       	cpc	r13, r1
    6132:	70 f0       	brcs	.+28     	; 0x6150 <mp_parse_num_integer+0x118>
    6134:	2f 35       	cpi	r18, 0x5F	; 95
    6136:	31 05       	cpc	r19, r1
    6138:	29 f1       	breq	.+74     	; 0x6184 <mp_parse_num_integer+0x14c>
    613a:	80 62       	ori	r24, 0x20	; 32
    613c:	c8 2e       	mov	r12, r24
    613e:	d1 2c       	mov	r13, r1
    6140:	c6 01       	movw	r24, r12
    6142:	81 56       	subi	r24, 0x61	; 97
    6144:	91 09       	sbc	r25, r1
    6146:	4a 97       	sbiw	r24, 0x1a	; 26
    6148:	08 f5       	brcc	.+66     	; 0x618c <mp_parse_num_integer+0x154>
    614a:	e7 e5       	ldi	r30, 0x57	; 87
    614c:	ce 1a       	sub	r12, r30
    614e:	d1 08       	sbc	r13, r1
    6150:	c4 14       	cp	r12, r4
    6152:	d5 04       	cpc	r13, r5
    6154:	d8 f4       	brcc	.+54     	; 0x618c <mp_parse_num_integer+0x154>
    6156:	b4 01       	movw	r22, r8
    6158:	c7 01       	movw	r24, r14
    615a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <mp_small_int_mul_overflow>
    615e:	81 11       	cpse	r24, r1
    6160:	41 c0       	rjmp	.+130    	; 0x61e4 <mp_parse_num_integer+0x1ac>
    6162:	8e 9c       	mul	r8, r14
    6164:	c0 01       	movw	r24, r0
    6166:	8f 9c       	mul	r8, r15
    6168:	90 0d       	add	r25, r0
    616a:	9e 9c       	mul	r9, r14
    616c:	90 0d       	add	r25, r0
    616e:	11 24       	eor	r1, r1
    6170:	7c 01       	movw	r14, r24
    6172:	ec 0c       	add	r14, r12
    6174:	fd 1c       	adc	r15, r13
    6176:	c7 01       	movw	r24, r14
    6178:	88 0f       	add	r24, r24
    617a:	99 1f       	adc	r25, r25
    617c:	8e 25       	eor	r24, r14
    617e:	9f 25       	eor	r25, r15
    6180:	99 23       	and	r25, r25
    6182:	84 f1       	brlt	.+96     	; 0x61e4 <mp_parse_num_integer+0x1ac>
    6184:	58 01       	movw	r10, r16
    6186:	06 15       	cp	r16, r6
    6188:	17 05       	cpc	r17, r7
    618a:	31 f6       	brne	.-116    	; 0x6118 <mp_parse_num_integer+0xe0>
    618c:	fd 81       	ldd	r31, Y+5	; 0x05
    618e:	ff 23       	and	r31, r31
    6190:	41 f0       	breq	.+16     	; 0x61a2 <mp_parse_num_integer+0x16a>
    6192:	04 c0       	rjmp	.+8      	; 0x619c <mp_parse_num_integer+0x164>
    6194:	ab 80       	ldd	r10, Y+3	; 0x03
    6196:	bc 80       	ldd	r11, Y+4	; 0x04
    6198:	e1 2c       	mov	r14, r1
    619a:	f1 2c       	mov	r15, r1
    619c:	f1 94       	neg	r15
    619e:	e1 94       	neg	r14
    61a0:	f1 08       	sbc	r15, r1
    61a2:	ee 0c       	add	r14, r14
    61a4:	ff 1c       	adc	r15, r15
    61a6:	68 94       	set
    61a8:	e0 f8       	bld	r14, 0
    61aa:	8b 81       	ldd	r24, Y+3	; 0x03
    61ac:	9c 81       	ldd	r25, Y+4	; 0x04
    61ae:	a8 16       	cp	r10, r24
    61b0:	b9 06       	cpc	r11, r25
    61b2:	f1 f0       	breq	.+60     	; 0x61f0 <mp_parse_num_integer+0x1b8>
    61b4:	a2 14       	cp	r10, r2
    61b6:	b3 04       	cpc	r11, r3
    61b8:	88 f4       	brcc	.+34     	; 0x61dc <mp_parse_num_integer+0x1a4>
    61ba:	85 01       	movw	r16, r10
    61bc:	61 01       	movw	r12, r2
    61be:	04 c0       	rjmp	.+8      	; 0x61c8 <mp_parse_num_integer+0x190>
    61c0:	58 01       	movw	r10, r16
    61c2:	0c 15       	cp	r16, r12
    61c4:	1d 05       	cpc	r17, r13
    61c6:	51 f0       	breq	.+20     	; 0x61dc <mp_parse_num_integer+0x1a4>
    61c8:	58 01       	movw	r10, r16
    61ca:	0f 5f       	subi	r16, 0xFF	; 255
    61cc:	1f 4f       	sbci	r17, 0xFF	; 255
    61ce:	f5 01       	movw	r30, r10
    61d0:	80 81       	ld	r24, Z
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	0e 94 de 00 	call	0x1bc	; 0x1bc <unichar_isspace>
    61d8:	81 11       	cpse	r24, r1
    61da:	f2 cf       	rjmp	.-28     	; 0x61c0 <mp_parse_num_integer+0x188>
    61dc:	2a 14       	cp	r2, r10
    61de:	3b 04       	cpc	r3, r11
    61e0:	19 f1       	breq	.+70     	; 0x6228 <mp_parse_num_integer+0x1f0>
    61e2:	06 c0       	rjmp	.+12     	; 0x61f0 <mp_parse_num_integer+0x1b8>
    61e4:	61 e7       	ldi	r22, 0x71	; 113
    61e6:	75 e0       	ldi	r23, 0x05	; 5
    61e8:	88 e7       	ldi	r24, 0x78	; 120
    61ea:	91 e2       	ldi	r25, 0x21	; 33
    61ec:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    61f0:	6e e1       	ldi	r22, 0x1E	; 30
    61f2:	76 e0       	ldi	r23, 0x06	; 6
    61f4:	88 e5       	ldi	r24, 0x58	; 88
    61f6:	9f e1       	ldi	r25, 0x1F	; 31
    61f8:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
    61fc:	6e 81       	ldd	r22, Y+6	; 0x06
    61fe:	7f 81       	ldd	r23, Y+7	; 0x07
    6200:	0e 94 9b 24 	call	0x4936	; 0x4936 <raise_exc>
    6204:	b1 01       	movw	r22, r2
    6206:	6e 19       	sub	r22, r14
    6208:	7f 09       	sbc	r23, r15
    620a:	ae 01       	movw	r20, r28
    620c:	4f 5f       	subi	r20, 0xFF	; 255
    620e:	5f 4f       	sbci	r21, 0xFF	; 255
    6210:	c7 01       	movw	r24, r14
    6212:	0e 94 85 19 	call	0x330a	; 0x330a <mp_parse_num_base>
    6216:	8e 0d       	add	r24, r14
    6218:	9f 1d       	adc	r25, r15
    621a:	9c 83       	std	Y+4, r25	; 0x04
    621c:	8b 83       	std	Y+3, r24	; 0x03
    621e:	82 15       	cp	r24, r2
    6220:	93 05       	cpc	r25, r3
    6222:	08 f4       	brcc	.+2      	; 0x6226 <mp_parse_num_integer+0x1ee>
    6224:	70 cf       	rjmp	.-288    	; 0x6106 <mp_parse_num_integer+0xce>
    6226:	e4 cf       	rjmp	.-56     	; 0x61f0 <mp_parse_num_integer+0x1b8>
    6228:	c7 01       	movw	r24, r14
    622a:	27 96       	adiw	r28, 0x07	; 7
    622c:	0f b6       	in	r0, 0x3f	; 63
    622e:	f8 94       	cli
    6230:	de bf       	out	0x3e, r29	; 62
    6232:	0f be       	out	0x3f, r0	; 63
    6234:	cd bf       	out	0x3d, r28	; 61
    6236:	df 91       	pop	r29
    6238:	cf 91       	pop	r28
    623a:	1f 91       	pop	r17
    623c:	0f 91       	pop	r16
    623e:	ff 90       	pop	r15
    6240:	ef 90       	pop	r14
    6242:	df 90       	pop	r13
    6244:	cf 90       	pop	r12
    6246:	bf 90       	pop	r11
    6248:	af 90       	pop	r10
    624a:	9f 90       	pop	r9
    624c:	8f 90       	pop	r8
    624e:	7f 90       	pop	r7
    6250:	6f 90       	pop	r6
    6252:	5f 90       	pop	r5
    6254:	4f 90       	pop	r4
    6256:	3f 90       	pop	r3
    6258:	2f 90       	pop	r2
    625a:	08 95       	ret

0000625c <mp_obj_int_make_new>:
    625c:	ef 92       	push	r14
    625e:	ff 92       	push	r15
    6260:	0f 93       	push	r16
    6262:	1f 93       	push	r17
    6264:	cf 93       	push	r28
    6266:	df 93       	push	r29
    6268:	00 d0       	rcall	.+0      	; 0x626a <mp_obj_int_make_new+0xe>
    626a:	cd b7       	in	r28, 0x3d	; 61
    626c:	de b7       	in	r29, 0x3e	; 62
    626e:	8b 01       	movw	r16, r22
    6270:	ba 01       	movw	r22, r20
    6272:	79 01       	movw	r14, r18
    6274:	24 e0       	ldi	r18, 0x04	; 4
    6276:	30 e0       	ldi	r19, 0x00	; 0
    6278:	40 e0       	ldi	r20, 0x00	; 0
    627a:	50 e0       	ldi	r21, 0x00	; 0
    627c:	c8 01       	movw	r24, r16
    627e:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    6282:	01 15       	cp	r16, r1
    6284:	11 05       	cpc	r17, r1
    6286:	09 f4       	brne	.+2      	; 0x628a <mp_obj_int_make_new+0x2e>
    6288:	40 c0       	rjmp	.+128    	; 0x630a <mp_obj_int_make_new+0xae>
    628a:	01 30       	cpi	r16, 0x01	; 1
    628c:	11 05       	cpc	r17, r1
    628e:	49 f5       	brne	.+82     	; 0x62e2 <mp_obj_int_make_new+0x86>
    6290:	d7 01       	movw	r26, r14
    6292:	8d 91       	ld	r24, X+
    6294:	9c 91       	ld	r25, X
    6296:	9c 01       	movw	r18, r24
    6298:	80 fd       	sbrc	r24, 0
    629a:	46 c0       	rjmp	.+140    	; 0x6328 <mp_obj_int_make_new+0xcc>
    629c:	ac 01       	movw	r20, r24
    629e:	43 70       	andi	r20, 0x03	; 3
    62a0:	55 27       	eor	r21, r21
    62a2:	45 2b       	or	r20, r21
    62a4:	09 f0       	breq	.+2      	; 0x62a8 <mp_obj_int_make_new+0x4c>
    62a6:	3a c0       	rjmp	.+116    	; 0x631c <mp_obj_int_make_new+0xc0>
    62a8:	dc 01       	movw	r26, r24
    62aa:	ed 91       	ld	r30, X+
    62ac:	fc 91       	ld	r31, X
    62ae:	bd e1       	ldi	r27, 0x1D	; 29
    62b0:	e8 3b       	cpi	r30, 0xB8	; 184
    62b2:	fb 07       	cpc	r31, r27
    62b4:	69 f5       	brne	.+90     	; 0x6310 <mp_obj_int_make_new+0xb4>
    62b6:	38 c0       	rjmp	.+112    	; 0x6328 <mp_obj_int_make_new+0xcc>
    62b8:	26 85       	ldd	r18, Z+14	; 0x0e
    62ba:	37 85       	ldd	r19, Z+15	; 0x0f
    62bc:	21 5a       	subi	r18, 0xA1	; 161
    62be:	38 47       	sbci	r19, 0x78	; 120
    62c0:	61 f4       	brne	.+24     	; 0x62da <mp_obj_int_make_new+0x7e>
    62c2:	be 01       	movw	r22, r28
    62c4:	6f 5f       	subi	r22, 0xFF	; 255
    62c6:	7f 4f       	sbci	r23, 0xFF	; 255
    62c8:	0d d9       	rcall	.-3558   	; 0x54e4 <mp_obj_str_get_data>
    62ca:	69 81       	ldd	r22, Y+1	; 0x01
    62cc:	7a 81       	ldd	r23, Y+2	; 0x02
    62ce:	20 e0       	ldi	r18, 0x00	; 0
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	40 e0       	ldi	r20, 0x00	; 0
    62d4:	50 e0       	ldi	r21, 0x00	; 0
    62d6:	b0 de       	rcall	.-672    	; 0x6038 <mp_parse_num_integer>
    62d8:	27 c0       	rjmp	.+78     	; 0x6328 <mp_obj_int_make_new+0xcc>
    62da:	bc 01       	movw	r22, r24
    62dc:	88 e0       	ldi	r24, 0x08	; 8
    62de:	d6 dc       	rcall	.-1620   	; 0x5c8c <mp_unary_op>
    62e0:	23 c0       	rjmp	.+70     	; 0x6328 <mp_obj_int_make_new+0xcc>
    62e2:	be 01       	movw	r22, r28
    62e4:	6f 5f       	subi	r22, 0xFF	; 255
    62e6:	7f 4f       	sbci	r23, 0xFF	; 255
    62e8:	d7 01       	movw	r26, r14
    62ea:	8d 91       	ld	r24, X+
    62ec:	9c 91       	ld	r25, X
    62ee:	fa d8       	rcall	.-3596   	; 0x54e4 <mp_obj_str_get_data>
    62f0:	8c 01       	movw	r16, r24
    62f2:	f7 01       	movw	r30, r14
    62f4:	82 81       	ldd	r24, Z+2	; 0x02
    62f6:	93 81       	ldd	r25, Z+3	; 0x03
    62f8:	b0 dd       	rcall	.-1184   	; 0x5e5a <mp_obj_get_int>
    62fa:	69 81       	ldd	r22, Y+1	; 0x01
    62fc:	7a 81       	ldd	r23, Y+2	; 0x02
    62fe:	20 e0       	ldi	r18, 0x00	; 0
    6300:	30 e0       	ldi	r19, 0x00	; 0
    6302:	ac 01       	movw	r20, r24
    6304:	c8 01       	movw	r24, r16
    6306:	98 de       	rcall	.-720    	; 0x6038 <mp_parse_num_integer>
    6308:	0f c0       	rjmp	.+30     	; 0x6328 <mp_obj_int_make_new+0xcc>
    630a:	81 e0       	ldi	r24, 0x01	; 1
    630c:	90 e0       	ldi	r25, 0x00	; 0
    630e:	0c c0       	rjmp	.+24     	; 0x6328 <mp_obj_int_make_new+0xcc>
    6310:	27 70       	andi	r18, 0x07	; 7
    6312:	33 27       	eor	r19, r19
    6314:	22 30       	cpi	r18, 0x02	; 2
    6316:	31 05       	cpc	r19, r1
    6318:	79 f6       	brne	.-98     	; 0x62b8 <mp_obj_int_make_new+0x5c>
    631a:	d3 cf       	rjmp	.-90     	; 0x62c2 <mp_obj_int_make_new+0x66>
    631c:	27 70       	andi	r18, 0x07	; 7
    631e:	33 27       	eor	r19, r19
    6320:	22 30       	cpi	r18, 0x02	; 2
    6322:	31 05       	cpc	r19, r1
    6324:	71 f2       	breq	.-100    	; 0x62c2 <mp_obj_int_make_new+0x66>
    6326:	d9 cf       	rjmp	.-78     	; 0x62da <mp_obj_int_make_new+0x7e>
    6328:	0f 90       	pop	r0
    632a:	0f 90       	pop	r0
    632c:	df 91       	pop	r29
    632e:	cf 91       	pop	r28
    6330:	1f 91       	pop	r17
    6332:	0f 91       	pop	r16
    6334:	ff 90       	pop	r15
    6336:	ef 90       	pop	r14
    6338:	08 95       	ret

0000633a <mp_raise_msg_varg>:
    633a:	cf 93       	push	r28
    633c:	df 93       	push	r29
    633e:	cd b7       	in	r28, 0x3d	; 61
    6340:	de b7       	in	r29, 0x3e	; 62
    6342:	ae 01       	movw	r20, r28
    6344:	47 5f       	subi	r20, 0xF7	; 247
    6346:	5f 4f       	sbci	r21, 0xFF	; 255
    6348:	6f 81       	ldd	r22, Y+7	; 0x07
    634a:	78 85       	ldd	r23, Y+8	; 0x08
    634c:	8d 81       	ldd	r24, Y+5	; 0x05
    634e:	9e 81       	ldd	r25, Y+6	; 0x06
    6350:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <mp_obj_new_exception_msg_vlist>
    6354:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>

00006358 <m_malloc_fail>:
    6358:	20 91 5c 6b 	lds	r18, 0x6B5C	; 0x806b5c <mp_state_ctx+0x2>
    635c:	30 91 5d 6b 	lds	r19, 0x6B5D	; 0x806b5d <mp_state_ctx+0x3>
    6360:	23 2b       	or	r18, r19
    6362:	31 f0       	breq	.+12     	; 0x6370 <m_malloc_fail+0x18>
    6364:	69 e3       	ldi	r22, 0x39	; 57
    6366:	76 e0       	ldi	r23, 0x06	; 6
    6368:	88 e5       	ldi	r24, 0x58	; 88
    636a:	90 e2       	ldi	r25, 0x20	; 32
    636c:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    6370:	9f 93       	push	r25
    6372:	8f 93       	push	r24
    6374:	82 e6       	ldi	r24, 0x62	; 98
    6376:	96 e0       	ldi	r25, 0x06	; 6
    6378:	9f 93       	push	r25
    637a:	8f 93       	push	r24
    637c:	88 e5       	ldi	r24, 0x58	; 88
    637e:	90 e2       	ldi	r25, 0x20	; 32
    6380:	9f 93       	push	r25
    6382:	8f 93       	push	r24
    6384:	da df       	rcall	.-76     	; 0x633a <mp_raise_msg_varg>

00006386 <m_malloc>:
    6386:	cf 93       	push	r28
    6388:	df 93       	push	r29
    638a:	ec 01       	movw	r28, r24
    638c:	60 e0       	ldi	r22, 0x00	; 0
    638e:	70 e0       	ldi	r23, 0x00	; 0
    6390:	0e 94 08 07 	call	0xe10	; 0xe10 <gc_alloc>
    6394:	00 97       	sbiw	r24, 0x00	; 0
    6396:	21 f4       	brne	.+8      	; 0x63a0 <m_malloc+0x1a>
    6398:	20 97       	sbiw	r28, 0x00	; 0
    639a:	11 f0       	breq	.+4      	; 0x63a0 <m_malloc+0x1a>
    639c:	ce 01       	movw	r24, r28
    639e:	dc df       	rcall	.-72     	; 0x6358 <m_malloc_fail>
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	08 95       	ret

000063a6 <vstr_init>:
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
    63aa:	ec 01       	movw	r28, r24
    63ac:	cb 01       	movw	r24, r22
    63ae:	00 97       	sbiw	r24, 0x00	; 0
    63b0:	11 f4       	brne	.+4      	; 0x63b6 <vstr_init+0x10>
    63b2:	81 e0       	ldi	r24, 0x01	; 1
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	99 83       	std	Y+1, r25	; 0x01
    63b8:	88 83       	st	Y, r24
    63ba:	1b 82       	std	Y+3, r1	; 0x03
    63bc:	1a 82       	std	Y+2, r1	; 0x02
    63be:	e3 df       	rcall	.-58     	; 0x6386 <m_malloc>
    63c0:	9d 83       	std	Y+5, r25	; 0x05
    63c2:	8c 83       	std	Y+4, r24	; 0x04
    63c4:	8e 81       	ldd	r24, Y+6	; 0x06
    63c6:	8e 7f       	andi	r24, 0xFE	; 254
    63c8:	8e 83       	std	Y+6, r24	; 0x06
    63ca:	df 91       	pop	r29
    63cc:	cf 91       	pop	r28
    63ce:	08 95       	ret

000063d0 <vstr_init_len>:
    63d0:	0f 93       	push	r16
    63d2:	1f 93       	push	r17
    63d4:	cf 93       	push	r28
    63d6:	df 93       	push	r29
    63d8:	ec 01       	movw	r28, r24
    63da:	8b 01       	movw	r16, r22
    63dc:	6f 5f       	subi	r22, 0xFF	; 255
    63de:	7f 4f       	sbci	r23, 0xFF	; 255
    63e0:	e2 df       	rcall	.-60     	; 0x63a6 <vstr_init>
    63e2:	1b 83       	std	Y+3, r17	; 0x03
    63e4:	0a 83       	std	Y+2, r16	; 0x02
    63e6:	df 91       	pop	r29
    63e8:	cf 91       	pop	r28
    63ea:	1f 91       	pop	r17
    63ec:	0f 91       	pop	r16
    63ee:	08 95       	ret

000063f0 <mp_reader_new_mem>:
    63f0:	cf 92       	push	r12
    63f2:	df 92       	push	r13
    63f4:	ef 92       	push	r14
    63f6:	ff 92       	push	r15
    63f8:	0f 93       	push	r16
    63fa:	1f 93       	push	r17
    63fc:	cf 93       	push	r28
    63fe:	df 93       	push	r29
    6400:	ec 01       	movw	r28, r24
    6402:	7b 01       	movw	r14, r22
    6404:	8a 01       	movw	r16, r20
    6406:	69 01       	movw	r12, r18
    6408:	88 e0       	ldi	r24, 0x08	; 8
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	bc df       	rcall	.-136    	; 0x6386 <m_malloc>
    640e:	fc 01       	movw	r30, r24
    6410:	d1 82       	std	Z+1, r13	; 0x01
    6412:	c0 82       	st	Z, r12
    6414:	f3 82       	std	Z+3, r15	; 0x03
    6416:	e2 82       	std	Z+2, r14	; 0x02
    6418:	f5 82       	std	Z+5, r15	; 0x05
    641a:	e4 82       	std	Z+4, r14	; 0x04
    641c:	0e 0d       	add	r16, r14
    641e:	1f 1d       	adc	r17, r15
    6420:	17 83       	std	Z+7, r17	; 0x07
    6422:	06 83       	std	Z+6, r16	; 0x06
    6424:	99 83       	std	Y+1, r25	; 0x01
    6426:	88 83       	st	Y, r24
    6428:	8c e3       	ldi	r24, 0x3C	; 60
    642a:	91 e0       	ldi	r25, 0x01	; 1
    642c:	9b 83       	std	Y+3, r25	; 0x03
    642e:	8a 83       	std	Y+2, r24	; 0x02
    6430:	88 eb       	ldi	r24, 0xB8	; 184
    6432:	98 e0       	ldi	r25, 0x08	; 8
    6434:	9d 83       	std	Y+5, r25	; 0x05
    6436:	8c 83       	std	Y+4, r24	; 0x04
    6438:	df 91       	pop	r29
    643a:	cf 91       	pop	r28
    643c:	1f 91       	pop	r17
    643e:	0f 91       	pop	r16
    6440:	ff 90       	pop	r15
    6442:	ef 90       	pop	r14
    6444:	df 90       	pop	r13
    6446:	cf 90       	pop	r12
    6448:	08 95       	ret

0000644a <parser_alloc>:
    644a:	cf 92       	push	r12
    644c:	df 92       	push	r13
    644e:	ef 92       	push	r14
    6450:	ff 92       	push	r15
    6452:	0f 93       	push	r16
    6454:	1f 93       	push	r17
    6456:	cf 93       	push	r28
    6458:	df 93       	push	r29
    645a:	7c 01       	movw	r14, r24
    645c:	8b 01       	movw	r16, r22
    645e:	fc 01       	movw	r30, r24
    6460:	c2 89       	ldd	r28, Z+18	; 0x12
    6462:	d3 89       	ldd	r29, Z+19	; 0x13
    6464:	20 97       	sbiw	r28, 0x00	; 0
    6466:	c1 f1       	breq	.+112    	; 0x64d8 <parser_alloc+0x8e>
    6468:	68 81       	ld	r22, Y
    646a:	79 81       	ldd	r23, Y+1	; 0x01
    646c:	8a 81       	ldd	r24, Y+2	; 0x02
    646e:	9b 81       	ldd	r25, Y+3	; 0x03
    6470:	80 0f       	add	r24, r16
    6472:	91 1f       	adc	r25, r17
    6474:	68 17       	cp	r22, r24
    6476:	79 07       	cpc	r23, r25
    6478:	20 f5       	brcc	.+72     	; 0x64c2 <parser_alloc+0x78>
    647a:	6c 5f       	subi	r22, 0xFC	; 252
    647c:	7f 4f       	sbci	r23, 0xFF	; 255
    647e:	60 0f       	add	r22, r16
    6480:	71 1f       	adc	r23, r17
    6482:	40 e0       	ldi	r20, 0x00	; 0
    6484:	ce 01       	movw	r24, r28
    6486:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <m_realloc_maybe>
    648a:	89 2b       	or	r24, r25
    648c:	a1 f4       	brne	.+40     	; 0x64b6 <parser_alloc+0x6c>
    648e:	6a 81       	ldd	r22, Y+2	; 0x02
    6490:	7b 81       	ldd	r23, Y+3	; 0x03
    6492:	6c 5f       	subi	r22, 0xFC	; 252
    6494:	7f 4f       	sbci	r23, 0xFF	; 255
    6496:	40 e0       	ldi	r20, 0x00	; 0
    6498:	ce 01       	movw	r24, r28
    649a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <m_realloc_maybe>
    649e:	8a 81       	ldd	r24, Y+2	; 0x02
    64a0:	9b 81       	ldd	r25, Y+3	; 0x03
    64a2:	99 83       	std	Y+1, r25	; 0x01
    64a4:	88 83       	st	Y, r24
    64a6:	f7 01       	movw	r30, r14
    64a8:	80 89       	ldd	r24, Z+16	; 0x10
    64aa:	91 89       	ldd	r25, Z+17	; 0x11
    64ac:	9b 83       	std	Y+3, r25	; 0x03
    64ae:	8a 83       	std	Y+2, r24	; 0x02
    64b0:	d1 8b       	std	Z+17, r29	; 0x11
    64b2:	c0 8b       	std	Z+16, r28	; 0x10
    64b4:	11 c0       	rjmp	.+34     	; 0x64d8 <parser_alloc+0x8e>
    64b6:	88 81       	ld	r24, Y
    64b8:	99 81       	ldd	r25, Y+1	; 0x01
    64ba:	80 0f       	add	r24, r16
    64bc:	91 1f       	adc	r25, r17
    64be:	99 83       	std	Y+1, r25	; 0x01
    64c0:	88 83       	st	Y, r24
    64c2:	2a 81       	ldd	r18, Y+2	; 0x02
    64c4:	3b 81       	ldd	r19, Y+3	; 0x03
    64c6:	02 0f       	add	r16, r18
    64c8:	13 1f       	adc	r17, r19
    64ca:	1b 83       	std	Y+3, r17	; 0x03
    64cc:	0a 83       	std	Y+2, r16	; 0x02
    64ce:	ce 01       	movw	r24, r28
    64d0:	04 96       	adiw	r24, 0x04	; 4
    64d2:	82 0f       	add	r24, r18
    64d4:	93 1f       	adc	r25, r19
    64d6:	14 c0       	rjmp	.+40     	; 0x6500 <parser_alloc+0xb6>
    64d8:	68 01       	movw	r12, r16
    64da:	00 31       	cpi	r16, 0x10	; 16
    64dc:	11 05       	cpc	r17, r1
    64de:	20 f4       	brcc	.+8      	; 0x64e8 <parser_alloc+0x9e>
    64e0:	68 94       	set
    64e2:	cc 24       	eor	r12, r12
    64e4:	c4 f8       	bld	r12, 4
    64e6:	d1 2c       	mov	r13, r1
    64e8:	c6 01       	movw	r24, r12
    64ea:	04 96       	adiw	r24, 0x04	; 4
    64ec:	4c df       	rcall	.-360    	; 0x6386 <m_malloc>
    64ee:	ec 01       	movw	r28, r24
    64f0:	d9 82       	std	Y+1, r13	; 0x01
    64f2:	c8 82       	st	Y, r12
    64f4:	1b 82       	std	Y+3, r1	; 0x03
    64f6:	1a 82       	std	Y+2, r1	; 0x02
    64f8:	f7 01       	movw	r30, r14
    64fa:	93 8b       	std	Z+19, r25	; 0x13
    64fc:	82 8b       	std	Z+18, r24	; 0x12
    64fe:	e1 cf       	rjmp	.-62     	; 0x64c2 <parser_alloc+0x78>
    6500:	df 91       	pop	r29
    6502:	cf 91       	pop	r28
    6504:	1f 91       	pop	r17
    6506:	0f 91       	pop	r16
    6508:	ff 90       	pop	r15
    650a:	ef 90       	pop	r14
    650c:	df 90       	pop	r13
    650e:	cf 90       	pop	r12
    6510:	08 95       	ret

00006512 <emit_bc_set_max_num_labels>:
    6512:	cf 93       	push	r28
    6514:	df 93       	push	r29
    6516:	ec 01       	movw	r28, r24
    6518:	7e 87       	std	Y+14, r23	; 0x0e
    651a:	6d 87       	std	Y+13, r22	; 0x0d
    651c:	cb 01       	movw	r24, r22
    651e:	88 0f       	add	r24, r24
    6520:	99 1f       	adc	r25, r25
    6522:	31 df       	rcall	.-414    	; 0x6386 <m_malloc>
    6524:	98 8b       	std	Y+16, r25	; 0x10
    6526:	8f 87       	std	Y+15, r24	; 0x0f
    6528:	df 91       	pop	r29
    652a:	cf 91       	pop	r28
    652c:	08 95       	ret

0000652e <mp_obj_new_bound_meth>:
    652e:	0f 93       	push	r16
    6530:	1f 93       	push	r17
    6532:	cf 93       	push	r28
    6534:	df 93       	push	r29
    6536:	8c 01       	movw	r16, r24
    6538:	eb 01       	movw	r28, r22
    653a:	86 e0       	ldi	r24, 0x06	; 6
    653c:	90 e0       	ldi	r25, 0x00	; 0
    653e:	23 df       	rcall	.-442    	; 0x6386 <m_malloc>
    6540:	22 e9       	ldi	r18, 0x92	; 146
    6542:	33 e2       	ldi	r19, 0x23	; 35
    6544:	fc 01       	movw	r30, r24
    6546:	31 83       	std	Z+1, r19	; 0x01
    6548:	20 83       	st	Z, r18
    654a:	13 83       	std	Z+3, r17	; 0x03
    654c:	02 83       	std	Z+2, r16	; 0x02
    654e:	d5 83       	std	Z+5, r29	; 0x05
    6550:	c4 83       	std	Z+4, r28	; 0x04
    6552:	df 91       	pop	r29
    6554:	cf 91       	pop	r28
    6556:	1f 91       	pop	r17
    6558:	0f 91       	pop	r16
    655a:	08 95       	ret

0000655c <mp_obj_new_cell>:
    655c:	cf 93       	push	r28
    655e:	df 93       	push	r29
    6560:	ec 01       	movw	r28, r24
    6562:	84 e0       	ldi	r24, 0x04	; 4
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	0f df       	rcall	.-482    	; 0x6386 <m_malloc>
    6568:	22 e7       	ldi	r18, 0x72	; 114
    656a:	33 e2       	ldi	r19, 0x23	; 35
    656c:	fc 01       	movw	r30, r24
    656e:	31 83       	std	Z+1, r19	; 0x01
    6570:	20 83       	st	Z, r18
    6572:	d3 83       	std	Z+3, r29	; 0x03
    6574:	c2 83       	std	Z+2, r28	; 0x02
    6576:	df 91       	pop	r29
    6578:	cf 91       	pop	r28
    657a:	08 95       	ret

0000657c <closure_call>:
    657c:	4f 92       	push	r4
    657e:	5f 92       	push	r5
    6580:	6f 92       	push	r6
    6582:	7f 92       	push	r7
    6584:	8f 92       	push	r8
    6586:	9f 92       	push	r9
    6588:	af 92       	push	r10
    658a:	bf 92       	push	r11
    658c:	cf 92       	push	r12
    658e:	df 92       	push	r13
    6590:	ef 92       	push	r14
    6592:	ff 92       	push	r15
    6594:	0f 93       	push	r16
    6596:	1f 93       	push	r17
    6598:	cf 93       	push	r28
    659a:	df 93       	push	r29
    659c:	cd b7       	in	r28, 0x3d	; 61
    659e:	de b7       	in	r29, 0x3e	; 62
    65a0:	2a 97       	sbiw	r28, 0x0a	; 10
    65a2:	0f b6       	in	r0, 0x3f	; 63
    65a4:	f8 94       	cli
    65a6:	de bf       	out	0x3e, r29	; 62
    65a8:	0f be       	out	0x3f, r0	; 63
    65aa:	cd bf       	out	0x3d, r28	; 61
    65ac:	8c 01       	movw	r16, r24
    65ae:	6b 01       	movw	r12, r22
    65b0:	4a 01       	movw	r8, r20
    65b2:	39 01       	movw	r6, r18
    65b4:	fc 01       	movw	r30, r24
    65b6:	44 80       	ldd	r4, Z+4	; 0x04
    65b8:	55 80       	ldd	r5, Z+5	; 0x05
    65ba:	52 01       	movw	r10, r4
    65bc:	a6 0e       	add	r10, r22
    65be:	b7 1e       	adc	r11, r23
    65c0:	7a 01       	movw	r14, r20
    65c2:	ee 0c       	add	r14, r14
    65c4:	ff 1c       	adc	r15, r15
    65c6:	c5 01       	movw	r24, r10
    65c8:	8e 0d       	add	r24, r14
    65ca:	9f 1d       	adc	r25, r15
    65cc:	86 30       	cpi	r24, 0x06	; 6
    65ce:	91 05       	cpc	r25, r1
    65d0:	18 f5       	brcc	.+70     	; 0x6618 <closure_call+0x9c>
    65d2:	44 0c       	add	r4, r4
    65d4:	55 1c       	adc	r5, r5
    65d6:	b8 01       	movw	r22, r16
    65d8:	6a 5f       	subi	r22, 0xFA	; 250
    65da:	7f 4f       	sbci	r23, 0xFF	; 255
    65dc:	a2 01       	movw	r20, r4
    65de:	ce 01       	movw	r24, r28
    65e0:	01 96       	adiw	r24, 0x01	; 1
    65e2:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    65e6:	ec 0c       	add	r14, r12
    65e8:	fd 1c       	adc	r15, r13
    65ea:	a7 01       	movw	r20, r14
    65ec:	44 0f       	add	r20, r20
    65ee:	55 1f       	adc	r21, r21
    65f0:	b3 01       	movw	r22, r6
    65f2:	81 e0       	ldi	r24, 0x01	; 1
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	8c 0f       	add	r24, r28
    65f8:	9d 1f       	adc	r25, r29
    65fa:	84 0d       	add	r24, r4
    65fc:	95 1d       	adc	r25, r5
    65fe:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    6602:	9e 01       	movw	r18, r28
    6604:	2f 5f       	subi	r18, 0xFF	; 255
    6606:	3f 4f       	sbci	r19, 0xFF	; 255
    6608:	a4 01       	movw	r20, r8
    660a:	b5 01       	movw	r22, r10
    660c:	f8 01       	movw	r30, r16
    660e:	82 81       	ldd	r24, Z+2	; 0x02
    6610:	93 81       	ldd	r25, Z+3	; 0x03
    6612:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
    6616:	2f c0       	rjmp	.+94     	; 0x6676 <closure_call+0xfa>
    6618:	88 0f       	add	r24, r24
    661a:	99 1f       	adc	r25, r25
    661c:	b4 de       	rcall	.-664    	; 0x6386 <m_malloc>
    661e:	5c 01       	movw	r10, r24
    6620:	f8 01       	movw	r30, r16
    6622:	44 81       	ldd	r20, Z+4	; 0x04
    6624:	55 81       	ldd	r21, Z+5	; 0x05
    6626:	44 0f       	add	r20, r20
    6628:	55 1f       	adc	r21, r21
    662a:	b8 01       	movw	r22, r16
    662c:	6a 5f       	subi	r22, 0xFA	; 250
    662e:	7f 4f       	sbci	r23, 0xFF	; 255
    6630:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    6634:	f8 01       	movw	r30, r16
    6636:	84 81       	ldd	r24, Z+4	; 0x04
    6638:	95 81       	ldd	r25, Z+5	; 0x05
    663a:	88 0f       	add	r24, r24
    663c:	99 1f       	adc	r25, r25
    663e:	a6 01       	movw	r20, r12
    6640:	4e 0d       	add	r20, r14
    6642:	5f 1d       	adc	r21, r15
    6644:	44 0f       	add	r20, r20
    6646:	55 1f       	adc	r21, r21
    6648:	b3 01       	movw	r22, r6
    664a:	8a 0d       	add	r24, r10
    664c:	9b 1d       	adc	r25, r11
    664e:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    6652:	f8 01       	movw	r30, r16
    6654:	64 81       	ldd	r22, Z+4	; 0x04
    6656:	75 81       	ldd	r23, Z+5	; 0x05
    6658:	6c 0d       	add	r22, r12
    665a:	7d 1d       	adc	r23, r13
    665c:	95 01       	movw	r18, r10
    665e:	a4 01       	movw	r20, r8
    6660:	82 81       	ldd	r24, Z+2	; 0x02
    6662:	93 81       	ldd	r25, Z+3	; 0x03
    6664:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
    6668:	08 2f       	mov	r16, r24
    666a:	19 2f       	mov	r17, r25
    666c:	c5 01       	movw	r24, r10
    666e:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    6672:	80 2f       	mov	r24, r16
    6674:	91 2f       	mov	r25, r17
    6676:	2a 96       	adiw	r28, 0x0a	; 10
    6678:	0f b6       	in	r0, 0x3f	; 63
    667a:	f8 94       	cli
    667c:	de bf       	out	0x3e, r29	; 62
    667e:	0f be       	out	0x3f, r0	; 63
    6680:	cd bf       	out	0x3d, r28	; 61
    6682:	df 91       	pop	r29
    6684:	cf 91       	pop	r28
    6686:	1f 91       	pop	r17
    6688:	0f 91       	pop	r16
    668a:	ff 90       	pop	r15
    668c:	ef 90       	pop	r14
    668e:	df 90       	pop	r13
    6690:	cf 90       	pop	r12
    6692:	bf 90       	pop	r11
    6694:	af 90       	pop	r10
    6696:	9f 90       	pop	r9
    6698:	8f 90       	pop	r8
    669a:	7f 90       	pop	r7
    669c:	6f 90       	pop	r6
    669e:	5f 90       	pop	r5
    66a0:	4f 90       	pop	r4
    66a2:	08 95       	ret

000066a4 <mp_obj_new_closure>:
    66a4:	af 92       	push	r10
    66a6:	bf 92       	push	r11
    66a8:	cf 92       	push	r12
    66aa:	df 92       	push	r13
    66ac:	ef 92       	push	r14
    66ae:	ff 92       	push	r15
    66b0:	0f 93       	push	r16
    66b2:	1f 93       	push	r17
    66b4:	cf 93       	push	r28
    66b6:	df 93       	push	r29
    66b8:	5c 01       	movw	r10, r24
    66ba:	7b 01       	movw	r14, r22
    66bc:	6a 01       	movw	r12, r20
    66be:	eb 01       	movw	r28, r22
    66c0:	23 96       	adiw	r28, 0x03	; 3
    66c2:	cc 0f       	add	r28, r28
    66c4:	dd 1f       	adc	r29, r29
    66c6:	ce 01       	movw	r24, r28
    66c8:	5e de       	rcall	.-836    	; 0x6386 <m_malloc>
    66ca:	8c 01       	movw	r16, r24
    66cc:	82 e5       	ldi	r24, 0x52	; 82
    66ce:	93 e2       	ldi	r25, 0x23	; 35
    66d0:	f8 01       	movw	r30, r16
    66d2:	91 83       	std	Z+1, r25	; 0x01
    66d4:	80 83       	st	Z, r24
    66d6:	b3 82       	std	Z+3, r11	; 0x03
    66d8:	a2 82       	std	Z+2, r10	; 0x02
    66da:	f5 82       	std	Z+5, r15	; 0x05
    66dc:	e4 82       	std	Z+4, r14	; 0x04
    66de:	ae 01       	movw	r20, r28
    66e0:	46 50       	subi	r20, 0x06	; 6
    66e2:	51 09       	sbc	r21, r1
    66e4:	b6 01       	movw	r22, r12
    66e6:	c8 01       	movw	r24, r16
    66e8:	06 96       	adiw	r24, 0x06	; 6
    66ea:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    66ee:	c8 01       	movw	r24, r16
    66f0:	df 91       	pop	r29
    66f2:	cf 91       	pop	r28
    66f4:	1f 91       	pop	r17
    66f6:	0f 91       	pop	r16
    66f8:	ff 90       	pop	r15
    66fa:	ef 90       	pop	r14
    66fc:	df 90       	pop	r13
    66fe:	cf 90       	pop	r12
    6700:	bf 90       	pop	r11
    6702:	af 90       	pop	r10
    6704:	08 95       	ret

00006706 <dict_view>:
    6706:	1f 93       	push	r17
    6708:	cf 93       	push	r28
    670a:	df 93       	push	r29
    670c:	ec 01       	movw	r28, r24
    670e:	16 2f       	mov	r17, r22
    6710:	83 70       	andi	r24, 0x03	; 3
    6712:	99 27       	eor	r25, r25
    6714:	89 2b       	or	r24, r25
    6716:	39 f4       	brne	.+14     	; 0x6726 <dict_view+0x20>
    6718:	e8 81       	ld	r30, Y
    671a:	f9 81       	ldd	r31, Y+1	; 0x01
    671c:	80 85       	ldd	r24, Z+8	; 0x08
    671e:	91 85       	ldd	r25, Z+9	; 0x09
    6720:	8a 5a       	subi	r24, 0xAA	; 170
    6722:	99 48       	sbci	r25, 0x89	; 137
    6724:	11 f0       	breq	.+4      	; 0x672a <dict_view+0x24>
    6726:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    672a:	85 e0       	ldi	r24, 0x05	; 5
    672c:	90 e0       	ldi	r25, 0x00	; 0
    672e:	2b de       	rcall	.-938    	; 0x6386 <m_malloc>
    6730:	26 e0       	ldi	r18, 0x06	; 6
    6732:	33 e2       	ldi	r19, 0x23	; 35
    6734:	fc 01       	movw	r30, r24
    6736:	31 83       	std	Z+1, r19	; 0x01
    6738:	20 83       	st	Z, r18
    673a:	d3 83       	std	Z+3, r29	; 0x03
    673c:	c2 83       	std	Z+2, r28	; 0x02
    673e:	14 83       	std	Z+4, r17	; 0x04
    6740:	df 91       	pop	r29
    6742:	cf 91       	pop	r28
    6744:	1f 91       	pop	r17
    6746:	08 95       	ret

00006748 <dict_values>:
    6748:	62 e0       	ldi	r22, 0x02	; 2
    674a:	dd cf       	rjmp	.-70     	; 0x6706 <dict_view>
    674c:	08 95       	ret

0000674e <dict_keys>:
    674e:	61 e0       	ldi	r22, 0x01	; 1
    6750:	da cf       	rjmp	.-76     	; 0x6706 <dict_view>
    6752:	08 95       	ret

00006754 <dict_items>:
    6754:	60 e0       	ldi	r22, 0x00	; 0
    6756:	d7 cf       	rjmp	.-82     	; 0x6706 <dict_view>
    6758:	08 95       	ret

0000675a <mp_obj_new_fun_bc>:
    675a:	8f 92       	push	r8
    675c:	9f 92       	push	r9
    675e:	af 92       	push	r10
    6760:	bf 92       	push	r11
    6762:	cf 92       	push	r12
    6764:	df 92       	push	r13
    6766:	ef 92       	push	r14
    6768:	ff 92       	push	r15
    676a:	0f 93       	push	r16
    676c:	1f 93       	push	r17
    676e:	cf 93       	push	r28
    6770:	df 93       	push	r29
    6772:	8c 01       	movw	r16, r24
    6774:	6b 01       	movw	r12, r22
    6776:	4a 01       	movw	r8, r20
    6778:	59 01       	movw	r10, r18
    677a:	00 97       	sbiw	r24, 0x00	; 0
    677c:	09 f4       	brne	.+2      	; 0x6780 <mp_obj_new_fun_bc+0x26>
    677e:	60 c0       	rjmp	.+192    	; 0x6840 <mp_obj_new_fun_bc+0xe6>
    6780:	83 70       	andi	r24, 0x03	; 3
    6782:	99 27       	eor	r25, r25
    6784:	89 2b       	or	r24, r25
    6786:	31 f4       	brne	.+12     	; 0x6794 <mp_obj_new_fun_bc+0x3a>
    6788:	f8 01       	movw	r30, r16
    678a:	80 81       	ld	r24, Z
    678c:	91 81       	ldd	r25, Z+1	; 0x01
    678e:	8e 5a       	subi	r24, 0xAE	; 174
    6790:	9a 41       	sbci	r25, 0x1A	; 26
    6792:	11 f0       	breq	.+4      	; 0x6798 <mp_obj_new_fun_bc+0x3e>
    6794:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    6798:	f8 01       	movw	r30, r16
    679a:	c2 81       	ldd	r28, Z+2	; 0x02
    679c:	d3 81       	ldd	r29, Z+3	; 0x03
    679e:	67 2b       	or	r22, r23
    67a0:	01 f1       	breq	.+64     	; 0x67e2 <mp_obj_new_fun_bc+0x88>
    67a2:	ce 01       	movw	r24, r28
    67a4:	05 96       	adiw	r24, 0x05	; 5
    67a6:	88 0f       	add	r24, r24
    67a8:	99 1f       	adc	r25, r25
    67aa:	ed dd       	rcall	.-1062   	; 0x6386 <m_malloc>
    67ac:	7c 01       	movw	r14, r24
    67ae:	88 e9       	ldi	r24, 0x98	; 152
    67b0:	9e e1       	ldi	r25, 0x1E	; 30
    67b2:	f7 01       	movw	r30, r14
    67b4:	91 83       	std	Z+1, r25	; 0x01
    67b6:	80 83       	st	Z, r24
    67b8:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
    67bc:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
    67c0:	93 83       	std	Z+3, r25	; 0x03
    67c2:	82 83       	std	Z+2, r24	; 0x02
    67c4:	95 82       	std	Z+5, r9	; 0x05
    67c6:	84 82       	std	Z+4, r8	; 0x04
    67c8:	b7 82       	std	Z+7, r11	; 0x07
    67ca:	a6 82       	std	Z+6, r10	; 0x06
    67cc:	01 15       	cp	r16, r1
    67ce:	11 05       	cpc	r17, r1
    67d0:	e1 f5       	brne	.+120    	; 0x684a <mp_obj_new_fun_bc+0xf0>
    67d2:	24 96       	adiw	r28, 0x04	; 4
    67d4:	cc 0f       	add	r28, r28
    67d6:	dd 1f       	adc	r29, r29
    67d8:	ce 0d       	add	r28, r14
    67da:	df 1d       	adc	r29, r15
    67dc:	d9 82       	std	Y+1, r13	; 0x01
    67de:	c8 82       	st	Y, r12
    67e0:	49 c0       	rjmp	.+146    	; 0x6874 <mp_obj_new_fun_bc+0x11a>
    67e2:	ce 01       	movw	r24, r28
    67e4:	04 96       	adiw	r24, 0x04	; 4
    67e6:	88 0f       	add	r24, r24
    67e8:	99 1f       	adc	r25, r25
    67ea:	cd dd       	rcall	.-1126   	; 0x6386 <m_malloc>
    67ec:	7c 01       	movw	r14, r24
    67ee:	88 e9       	ldi	r24, 0x98	; 152
    67f0:	9e e1       	ldi	r25, 0x1E	; 30
    67f2:	f7 01       	movw	r30, r14
    67f4:	91 83       	std	Z+1, r25	; 0x01
    67f6:	80 83       	st	Z, r24
    67f8:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
    67fc:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
    6800:	93 83       	std	Z+3, r25	; 0x03
    6802:	82 83       	std	Z+2, r24	; 0x02
    6804:	95 82       	std	Z+5, r9	; 0x05
    6806:	84 82       	std	Z+4, r8	; 0x04
    6808:	b7 82       	std	Z+7, r11	; 0x07
    680a:	a6 82       	std	Z+6, r10	; 0x06
    680c:	01 15       	cp	r16, r1
    680e:	11 05       	cpc	r17, r1
    6810:	89 f1       	breq	.+98     	; 0x6874 <mp_obj_new_fun_bc+0x11a>
    6812:	26 c0       	rjmp	.+76     	; 0x6860 <mp_obj_new_fun_bc+0x106>
    6814:	8a e0       	ldi	r24, 0x0A	; 10
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	b6 dd       	rcall	.-1172   	; 0x6386 <m_malloc>
    681a:	7c 01       	movw	r14, r24
    681c:	88 e9       	ldi	r24, 0x98	; 152
    681e:	9e e1       	ldi	r25, 0x1E	; 30
    6820:	f7 01       	movw	r30, r14
    6822:	91 83       	std	Z+1, r25	; 0x01
    6824:	80 83       	st	Z, r24
    6826:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
    682a:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
    682e:	93 83       	std	Z+3, r25	; 0x03
    6830:	82 83       	std	Z+2, r24	; 0x02
    6832:	95 82       	std	Z+5, r9	; 0x05
    6834:	84 82       	std	Z+4, r8	; 0x04
    6836:	b7 82       	std	Z+7, r11	; 0x07
    6838:	a6 82       	std	Z+6, r10	; 0x06
    683a:	c0 e0       	ldi	r28, 0x00	; 0
    683c:	d0 e0       	ldi	r29, 0x00	; 0
    683e:	c9 cf       	rjmp	.-110    	; 0x67d2 <mp_obj_new_fun_bc+0x78>
    6840:	67 2b       	or	r22, r23
    6842:	41 f7       	brne	.-48     	; 0x6814 <mp_obj_new_fun_bc+0xba>
    6844:	c0 e0       	ldi	r28, 0x00	; 0
    6846:	d0 e0       	ldi	r29, 0x00	; 0
    6848:	cc cf       	rjmp	.-104    	; 0x67e2 <mp_obj_new_fun_bc+0x88>
    684a:	b8 01       	movw	r22, r16
    684c:	6c 5f       	subi	r22, 0xFC	; 252
    684e:	7f 4f       	sbci	r23, 0xFF	; 255
    6850:	ae 01       	movw	r20, r28
    6852:	44 0f       	add	r20, r20
    6854:	55 1f       	adc	r21, r21
    6856:	c7 01       	movw	r24, r14
    6858:	08 96       	adiw	r24, 0x08	; 8
    685a:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    685e:	b9 cf       	rjmp	.-142    	; 0x67d2 <mp_obj_new_fun_bc+0x78>
    6860:	ae 01       	movw	r20, r28
    6862:	44 0f       	add	r20, r20
    6864:	55 1f       	adc	r21, r21
    6866:	b8 01       	movw	r22, r16
    6868:	6c 5f       	subi	r22, 0xFC	; 252
    686a:	7f 4f       	sbci	r23, 0xFF	; 255
    686c:	c7 01       	movw	r24, r14
    686e:	08 96       	adiw	r24, 0x08	; 8
    6870:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    6874:	c7 01       	movw	r24, r14
    6876:	df 91       	pop	r29
    6878:	cf 91       	pop	r28
    687a:	1f 91       	pop	r17
    687c:	0f 91       	pop	r16
    687e:	ff 90       	pop	r15
    6880:	ef 90       	pop	r14
    6882:	df 90       	pop	r13
    6884:	cf 90       	pop	r12
    6886:	bf 90       	pop	r11
    6888:	af 90       	pop	r10
    688a:	9f 90       	pop	r9
    688c:	8f 90       	pop	r8
    688e:	08 95       	ret

00006890 <mp_make_function_from_raw_code>:
    6890:	cf 93       	push	r28
    6892:	df 93       	push	r29
    6894:	ec 01       	movw	r28, r24
    6896:	cb 01       	movw	r24, r22
    6898:	ba 01       	movw	r22, r20
    689a:	20 97       	sbiw	r28, 0x00	; 0
    689c:	11 f4       	brne	.+4      	; 0x68a2 <mp_make_function_from_raw_code+0x12>
    689e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    68a2:	00 97       	sbiw	r24, 0x00	; 0
    68a4:	69 f0       	breq	.+26     	; 0x68c0 <mp_make_function_from_raw_code+0x30>
    68a6:	9c 01       	movw	r18, r24
    68a8:	23 70       	andi	r18, 0x03	; 3
    68aa:	33 27       	eor	r19, r19
    68ac:	23 2b       	or	r18, r19
    68ae:	31 f4       	brne	.+12     	; 0x68bc <mp_make_function_from_raw_code+0x2c>
    68b0:	fc 01       	movw	r30, r24
    68b2:	20 81       	ld	r18, Z
    68b4:	31 81       	ldd	r19, Z+1	; 0x01
    68b6:	2e 5a       	subi	r18, 0xAE	; 174
    68b8:	3a 41       	sbci	r19, 0x1A	; 26
    68ba:	11 f0       	breq	.+4      	; 0x68c0 <mp_make_function_from_raw_code+0x30>
    68bc:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    68c0:	61 15       	cp	r22, r1
    68c2:	71 05       	cpc	r23, r1
    68c4:	69 f0       	breq	.+26     	; 0x68e0 <mp_make_function_from_raw_code+0x50>
    68c6:	9b 01       	movw	r18, r22
    68c8:	23 70       	andi	r18, 0x03	; 3
    68ca:	33 27       	eor	r19, r19
    68cc:	23 2b       	or	r18, r19
    68ce:	31 f4       	brne	.+12     	; 0x68dc <mp_make_function_from_raw_code+0x4c>
    68d0:	fb 01       	movw	r30, r22
    68d2:	20 81       	ld	r18, Z
    68d4:	31 81       	ldd	r19, Z+1	; 0x01
    68d6:	28 57       	subi	r18, 0x78	; 120
    68d8:	32 42       	sbci	r19, 0x22	; 34
    68da:	11 f0       	breq	.+4      	; 0x68e0 <mp_make_function_from_raw_code+0x50>
    68dc:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    68e0:	28 81       	ld	r18, Y
    68e2:	27 70       	andi	r18, 0x07	; 7
    68e4:	22 30       	cpi	r18, 0x02	; 2
    68e6:	11 f0       	breq	.+4      	; 0x68ec <mp_make_function_from_raw_code+0x5c>
    68e8:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    68ec:	2d 81       	ldd	r18, Y+5	; 0x05
    68ee:	3e 81       	ldd	r19, Y+6	; 0x06
    68f0:	4b 81       	ldd	r20, Y+3	; 0x03
    68f2:	5c 81       	ldd	r21, Y+4	; 0x04
    68f4:	32 df       	rcall	.-412    	; 0x675a <mp_obj_new_fun_bc>
    68f6:	28 81       	ld	r18, Y
    68f8:	23 ff       	sbrs	r18, 3
    68fa:	05 c0       	rjmp	.+10     	; 0x6906 <mp_make_function_from_raw_code+0x76>
    68fc:	20 e7       	ldi	r18, 0x70	; 112
    68fe:	3e e1       	ldi	r19, 0x1E	; 30
    6900:	fc 01       	movw	r30, r24
    6902:	31 83       	std	Z+1, r19	; 0x01
    6904:	20 83       	st	Z, r18
    6906:	df 91       	pop	r29
    6908:	cf 91       	pop	r28
    690a:	08 95       	ret

0000690c <mp_make_closure_from_raw_code>:
    690c:	0f 93       	push	r16
    690e:	1f 93       	push	r17
    6910:	cf 93       	push	r28
    6912:	df 93       	push	r29
    6914:	eb 01       	movw	r28, r22
    6916:	8a 01       	movw	r16, r20
    6918:	70 ff       	sbrs	r23, 0
    691a:	07 c0       	rjmp	.+14     	; 0x692a <mp_make_closure_from_raw_code+0x1e>
    691c:	fa 01       	movw	r30, r20
    691e:	42 81       	ldd	r20, Z+2	; 0x02
    6920:	53 81       	ldd	r21, Z+3	; 0x03
    6922:	60 81       	ld	r22, Z
    6924:	71 81       	ldd	r23, Z+1	; 0x01
    6926:	b4 df       	rcall	.-152    	; 0x6890 <mp_make_function_from_raw_code>
    6928:	05 c0       	rjmp	.+10     	; 0x6934 <mp_make_closure_from_raw_code+0x28>
    692a:	40 e0       	ldi	r20, 0x00	; 0
    692c:	50 e0       	ldi	r21, 0x00	; 0
    692e:	60 e0       	ldi	r22, 0x00	; 0
    6930:	70 e0       	ldi	r23, 0x00	; 0
    6932:	ae df       	rcall	.-164    	; 0x6890 <mp_make_function_from_raw_code>
    6934:	ae 01       	movw	r20, r28
    6936:	44 0f       	add	r20, r20
    6938:	45 2f       	mov	r20, r21
    693a:	44 1f       	adc	r20, r20
    693c:	55 0b       	sbc	r21, r21
    693e:	51 95       	neg	r21
    6940:	42 70       	andi	r20, 0x02	; 2
    6942:	55 27       	eor	r21, r21
    6944:	44 0f       	add	r20, r20
    6946:	55 1f       	adc	r21, r21
    6948:	40 0f       	add	r20, r16
    694a:	51 1f       	adc	r21, r17
    694c:	be 01       	movw	r22, r28
    694e:	77 27       	eor	r23, r23
    6950:	a9 de       	rcall	.-686    	; 0x66a4 <mp_obj_new_closure>
    6952:	df 91       	pop	r29
    6954:	cf 91       	pop	r28
    6956:	1f 91       	pop	r17
    6958:	0f 91       	pop	r16
    695a:	08 95       	ret

0000695c <mp_obj_int_formatted>:
    695c:	2f 92       	push	r2
    695e:	3f 92       	push	r3
    6960:	4f 92       	push	r4
    6962:	5f 92       	push	r5
    6964:	6f 92       	push	r6
    6966:	7f 92       	push	r7
    6968:	8f 92       	push	r8
    696a:	9f 92       	push	r9
    696c:	af 92       	push	r10
    696e:	bf 92       	push	r11
    6970:	cf 92       	push	r12
    6972:	df 92       	push	r13
    6974:	ef 92       	push	r14
    6976:	ff 92       	push	r15
    6978:	0f 93       	push	r16
    697a:	1f 93       	push	r17
    697c:	cf 93       	push	r28
    697e:	df 93       	push	r29
    6980:	4c 01       	movw	r8, r24
    6982:	2b 01       	movw	r4, r22
    6984:	1a 01       	movw	r2, r20
    6986:	e9 01       	movw	r28, r18
    6988:	d5 95       	asr	r29
    698a:	c7 95       	ror	r28
    698c:	dd 23       	and	r29, r29
    698e:	44 f4       	brge	.+16     	; 0x69a0 <mp_obj_int_formatted+0x44>
    6990:	d1 95       	neg	r29
    6992:	c1 95       	neg	r28
    6994:	d1 09       	sbc	r29, r1
    6996:	0f 2e       	mov	r0, r31
    6998:	fd e2       	ldi	r31, 0x2D	; 45
    699a:	bf 2e       	mov	r11, r31
    699c:	f0 2d       	mov	r31, r0
    699e:	01 c0       	rjmp	.+2      	; 0x69a2 <mp_obj_int_formatted+0x46>
    69a0:	b1 2c       	mov	r11, r1
    69a2:	2a 2d       	mov	r18, r10
    69a4:	a7 01       	movw	r20, r14
    69a6:	b8 01       	movw	r22, r16
    69a8:	80 e1       	ldi	r24, 0x10	; 16
    69aa:	90 e0       	ldi	r25, 0x00	; 0
    69ac:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <mp_int_format_size>
    69b0:	3c 01       	movw	r6, r24
    69b2:	d2 01       	movw	r26, r4
    69b4:	8d 91       	ld	r24, X+
    69b6:	9c 91       	ld	r25, X
    69b8:	86 15       	cp	r24, r6
    69ba:	97 05       	cpc	r25, r7
    69bc:	40 f4       	brcc	.+16     	; 0x69ce <mp_obj_int_formatted+0x72>
    69be:	c3 01       	movw	r24, r6
    69c0:	e2 dc       	rcall	.-1596   	; 0x6386 <m_malloc>
    69c2:	f4 01       	movw	r30, r8
    69c4:	91 83       	std	Z+1, r25	; 0x01
    69c6:	80 83       	st	Z, r24
    69c8:	d2 01       	movw	r26, r4
    69ca:	6d 92       	st	X+, r6
    69cc:	7c 92       	st	X, r7
    69ce:	d4 01       	movw	r26, r8
    69d0:	ed 91       	ld	r30, X+
    69d2:	fc 91       	ld	r31, X
    69d4:	9f 01       	movw	r18, r30
    69d6:	26 0d       	add	r18, r6
    69d8:	37 1d       	adc	r19, r7
    69da:	d9 01       	movw	r26, r18
    69dc:	11 97       	sbiw	r26, 0x01	; 1
    69de:	1c 92       	st	X, r1
    69e0:	20 97       	sbiw	r28, 0x00	; 0
    69e2:	21 f4       	brne	.+8      	; 0x69ec <mp_obj_int_formatted+0x90>
    69e4:	11 97       	sbiw	r26, 0x01	; 1
    69e6:	80 e3       	ldi	r24, 0x30	; 48
    69e8:	8c 93       	st	X, r24
    69ea:	31 c0       	rjmp	.+98     	; 0x6a4e <mp_obj_int_formatted+0xf2>
    69ec:	21 50       	subi	r18, 0x01	; 1
    69ee:	31 09       	sbc	r19, r1
    69f0:	29 01       	movw	r4, r18
    69f2:	d1 2c       	mov	r13, r1
    69f4:	ba e0       	ldi	r27, 0x0A	; 10
    69f6:	cb 1a       	sub	r12, r27
    69f8:	d1 08       	sbc	r13, r1
    69fa:	02 c0       	rjmp	.+4      	; 0x6a00 <mp_obj_int_formatted+0xa4>
    69fc:	2d 01       	movw	r4, r26
    69fe:	9d 01       	movw	r18, r26
    6a00:	ce 01       	movw	r24, r28
    6a02:	b8 01       	movw	r22, r16
    6a04:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    6a08:	c6 2f       	mov	r28, r22
    6a0a:	d7 2f       	mov	r29, r23
    6a0c:	8a 30       	cpi	r24, 0x0A	; 10
    6a0e:	91 05       	cpc	r25, r1
    6a10:	1c f0       	brlt	.+6      	; 0x6a18 <mp_obj_int_formatted+0xbc>
    6a12:	8c 0d       	add	r24, r12
    6a14:	9d 1d       	adc	r25, r13
    6a16:	01 c0       	rjmp	.+2      	; 0x6a1a <mp_obj_int_formatted+0xbe>
    6a18:	c0 96       	adiw	r24, 0x30	; 48
    6a1a:	d9 01       	movw	r26, r18
    6a1c:	8e 93       	st	-X, r24
    6a1e:	aa 20       	and	r10, r10
    6a20:	89 f0       	breq	.+34     	; 0x6a44 <mp_obj_int_formatted+0xe8>
    6a22:	20 97       	sbiw	r28, 0x00	; 0
    6a24:	a1 f0       	breq	.+40     	; 0x6a4e <mp_obj_int_formatted+0xf2>
    6a26:	ea 17       	cp	r30, r26
    6a28:	fb 07       	cpc	r31, r27
    6a2a:	88 f4       	brcc	.+34     	; 0x6a4e <mp_obj_int_formatted+0xf2>
    6a2c:	c2 01       	movw	r24, r4
    6a2e:	8a 1b       	sub	r24, r26
    6a30:	9b 0b       	sbc	r25, r27
    6a32:	03 97       	sbiw	r24, 0x03	; 3
    6a34:	21 f7       	brne	.-56     	; 0x69fe <mp_obj_int_formatted+0xa2>
    6a36:	d9 01       	movw	r26, r18
    6a38:	12 97       	sbiw	r26, 0x02	; 2
    6a3a:	ac 92       	st	X, r10
    6a3c:	ea 17       	cp	r30, r26
    6a3e:	fb 07       	cpc	r31, r27
    6a40:	e8 f2       	brcs	.-70     	; 0x69fc <mp_obj_int_formatted+0xa0>
    6a42:	05 c0       	rjmp	.+10     	; 0x6a4e <mp_obj_int_formatted+0xf2>
    6a44:	ea 17       	cp	r30, r26
    6a46:	fb 07       	cpc	r31, r27
    6a48:	10 f4       	brcc	.+4      	; 0x6a4e <mp_obj_int_formatted+0xf2>
    6a4a:	20 97       	sbiw	r28, 0x00	; 0
    6a4c:	c1 f6       	brne	.-80     	; 0x69fe <mp_obj_int_formatted+0xa2>
    6a4e:	e1 14       	cp	r14, r1
    6a50:	f1 04       	cpc	r15, r1
    6a52:	c1 f0       	breq	.+48     	; 0x6a84 <mp_obj_int_formatted+0x128>
    6a54:	e7 01       	movw	r28, r14
    6a56:	09 90       	ld	r0, Y+
    6a58:	00 20       	and	r0, r0
    6a5a:	e9 f7       	brne	.-6      	; 0x6a56 <mp_obj_int_formatted+0xfa>
    6a5c:	21 97       	sbiw	r28, 0x01	; 1
    6a5e:	ce 19       	sub	r28, r14
    6a60:	df 09       	sbc	r29, r15
    6a62:	9d 01       	movw	r18, r26
    6a64:	2c 1b       	sub	r18, r28
    6a66:	3d 0b       	sbc	r19, r29
    6a68:	e2 17       	cp	r30, r18
    6a6a:	f3 07       	cpc	r31, r19
    6a6c:	58 f4       	brcc	.+22     	; 0x6a84 <mp_obj_int_formatted+0x128>
    6a6e:	f7 01       	movw	r30, r14
    6a70:	80 81       	ld	r24, Z
    6a72:	88 23       	and	r24, r24
    6a74:	81 f0       	breq	.+32     	; 0x6a96 <mp_obj_int_formatted+0x13a>
    6a76:	d9 01       	movw	r26, r18
    6a78:	31 96       	adiw	r30, 0x01	; 1
    6a7a:	8d 93       	st	X+, r24
    6a7c:	81 91       	ld	r24, Z+
    6a7e:	81 11       	cpse	r24, r1
    6a80:	fc cf       	rjmp	.-8      	; 0x6a7a <mp_obj_int_formatted+0x11e>
    6a82:	09 c0       	rjmp	.+18     	; 0x6a96 <mp_obj_int_formatted+0x13a>
    6a84:	bb 20       	and	r11, r11
    6a86:	51 f0       	breq	.+20     	; 0x6a9c <mp_obj_int_formatted+0x140>
    6a88:	ea 17       	cp	r30, r26
    6a8a:	fb 07       	cpc	r31, r27
    6a8c:	38 f4       	brcc	.+14     	; 0x6a9c <mp_obj_int_formatted+0x140>
    6a8e:	9d 01       	movw	r18, r26
    6a90:	d9 01       	movw	r26, r18
    6a92:	be 92       	st	-X, r11
    6a94:	03 c0       	rjmp	.+6      	; 0x6a9c <mp_obj_int_formatted+0x140>
    6a96:	b1 10       	cpse	r11, r1
    6a98:	fb cf       	rjmp	.-10     	; 0x6a90 <mp_obj_int_formatted+0x134>
    6a9a:	d9 01       	movw	r26, r18
    6a9c:	f4 01       	movw	r30, r8
    6a9e:	80 81       	ld	r24, Z
    6aa0:	91 81       	ldd	r25, Z+1	; 0x01
    6aa2:	68 0e       	add	r6, r24
    6aa4:	79 1e       	adc	r7, r25
    6aa6:	6a 1a       	sub	r6, r26
    6aa8:	7b 0a       	sbc	r7, r27
    6aaa:	f1 e0       	ldi	r31, 0x01	; 1
    6aac:	6f 1a       	sub	r6, r31
    6aae:	71 08       	sbc	r7, r1
    6ab0:	f1 01       	movw	r30, r2
    6ab2:	71 82       	std	Z+1, r7	; 0x01
    6ab4:	60 82       	st	Z, r6
    6ab6:	cd 01       	movw	r24, r26
    6ab8:	df 91       	pop	r29
    6aba:	cf 91       	pop	r28
    6abc:	1f 91       	pop	r17
    6abe:	0f 91       	pop	r16
    6ac0:	ff 90       	pop	r15
    6ac2:	ef 90       	pop	r14
    6ac4:	df 90       	pop	r13
    6ac6:	cf 90       	pop	r12
    6ac8:	bf 90       	pop	r11
    6aca:	af 90       	pop	r10
    6acc:	9f 90       	pop	r9
    6ace:	8f 90       	pop	r8
    6ad0:	7f 90       	pop	r7
    6ad2:	6f 90       	pop	r6
    6ad4:	5f 90       	pop	r5
    6ad6:	4f 90       	pop	r4
    6ad8:	3f 90       	pop	r3
    6ada:	2f 90       	pop	r2
    6adc:	08 95       	ret

00006ade <mp_print_mp_int>:
    6ade:	2f 92       	push	r2
    6ae0:	3f 92       	push	r3
    6ae2:	4f 92       	push	r4
    6ae4:	5f 92       	push	r5
    6ae6:	6f 92       	push	r6
    6ae8:	7f 92       	push	r7
    6aea:	8f 92       	push	r8
    6aec:	9f 92       	push	r9
    6aee:	af 92       	push	r10
    6af0:	bf 92       	push	r11
    6af2:	cf 92       	push	r12
    6af4:	df 92       	push	r13
    6af6:	ef 92       	push	r14
    6af8:	ff 92       	push	r15
    6afa:	0f 93       	push	r16
    6afc:	1f 93       	push	r17
    6afe:	cf 93       	push	r28
    6b00:	df 93       	push	r29
    6b02:	cd b7       	in	r28, 0x3d	; 61
    6b04:	de b7       	in	r29, 0x3e	; 62
    6b06:	6a 97       	sbiw	r28, 0x1a	; 26
    6b08:	0f b6       	in	r0, 0x3f	; 63
    6b0a:	f8 94       	cli
    6b0c:	de bf       	out	0x3e, r29	; 62
    6b0e:	0f be       	out	0x3f, r0	; 63
    6b10:	cd bf       	out	0x3d, r28	; 61
    6b12:	98 8f       	std	Y+24, r25	; 0x18
    6b14:	8f 8b       	std	Y+23, r24	; 0x17
    6b16:	7d 8b       	std	Y+21, r23	; 0x15
    6b18:	6c 8b       	std	Y+20, r22	; 0x14
    6b1a:	2a 01       	movw	r4, r20
    6b1c:	f2 2e       	mov	r15, r18
    6b1e:	48 01       	movw	r8, r16
    6b20:	ee 8a       	std	Y+22, r14	; 0x16
    6b22:	16 01       	movw	r2, r12
    6b24:	35 01       	movw	r6, r10
    6b26:	ca 01       	movw	r24, r20
    6b28:	87 7f       	andi	r24, 0xF7	; 247
    6b2a:	02 97       	sbiw	r24, 0x02	; 2
    6b2c:	41 f0       	breq	.+16     	; 0x6b3e <mp_print_mp_int+0x60>
    6b2e:	48 30       	cpi	r20, 0x08	; 8
    6b30:	51 05       	cpc	r21, r1
    6b32:	29 f0       	breq	.+10     	; 0x6b3e <mp_print_mp_int+0x60>
    6b34:	40 31       	cpi	r20, 0x10	; 16
    6b36:	51 05       	cpc	r21, r1
    6b38:	11 f0       	breq	.+4      	; 0x6b3e <mp_print_mp_int+0x60>
    6b3a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    6b3e:	8c 89       	ldd	r24, Y+20	; 0x14
    6b40:	80 fd       	sbrc	r24, 0
    6b42:	16 c0       	rjmp	.+44     	; 0x6b70 <mp_print_mp_int+0x92>
    6b44:	8c 89       	ldd	r24, Y+20	; 0x14
    6b46:	9d 89       	ldd	r25, Y+21	; 0x15
    6b48:	83 70       	andi	r24, 0x03	; 3
    6b4a:	99 27       	eor	r25, r25
    6b4c:	89 2b       	or	r24, r25
    6b4e:	39 f4       	brne	.+14     	; 0x6b5e <mp_print_mp_int+0x80>
    6b50:	ec 89       	ldd	r30, Y+20	; 0x14
    6b52:	fd 89       	ldd	r31, Y+21	; 0x15
    6b54:	80 81       	ld	r24, Z
    6b56:	91 81       	ldd	r25, Z+1	; 0x01
    6b58:	88 5b       	subi	r24, 0xB8	; 184
    6b5a:	9d 41       	sbci	r25, 0x1D	; 29
    6b5c:	49 f0       	breq	.+18     	; 0x6b70 <mp_print_mp_int+0x92>
    6b5e:	8c 89       	ldd	r24, Y+20	; 0x14
    6b60:	9d 89       	ldd	r25, Y+21	; 0x15
    6b62:	7b d9       	rcall	.-3338   	; 0x5e5a <mp_obj_get_int>
    6b64:	88 0f       	add	r24, r24
    6b66:	99 1f       	adc	r25, r25
    6b68:	9c 01       	movw	r18, r24
    6b6a:	21 60       	ori	r18, 0x01	; 1
    6b6c:	3d 8b       	std	Y+21, r19	; 0x15
    6b6e:	2c 8b       	std	Y+20, r18	; 0x14
    6b70:	c4 01       	movw	r24, r8
    6b72:	81 78       	andi	r24, 0x81	; 129
    6b74:	99 27       	eor	r25, r25
    6b76:	89 2b       	or	r24, r25
    6b78:	49 f4       	brne	.+18     	; 0x6b8c <mp_print_mp_int+0xae>
    6b7a:	3e 89       	ldd	r19, Y+22	; 0x16
    6b7c:	30 33       	cpi	r19, 0x30	; 48
    6b7e:	31 f4       	brne	.+12     	; 0x6b8c <mp_print_mp_int+0xae>
    6b80:	26 14       	cp	r2, r6
    6b82:	37 04       	cpc	r3, r7
    6b84:	0c f4       	brge	.+2      	; 0x6b88 <mp_print_mp_int+0xaa>
    6b86:	13 01       	movw	r2, r6
    6b88:	61 2c       	mov	r6, r1
    6b8a:	71 2c       	mov	r7, r1
    6b8c:	8c 89       	ldd	r24, Y+20	; 0x14
    6b8e:	9d 89       	ldd	r25, Y+21	; 0x15
    6b90:	9b d9       	rcall	.-3274   	; 0x5ec8 <mp_obj_int_sign>
    6b92:	99 23       	and	r25, r25
    6b94:	74 f0       	brlt	.+28     	; 0x6bb2 <mp_print_mp_int+0xd4>
    6b96:	81 fe       	sbrs	r8, 1
    6b98:	05 c0       	rjmp	.+10     	; 0x6ba4 <mp_print_mp_int+0xc6>
    6b9a:	8b e2       	ldi	r24, 0x2B	; 43
    6b9c:	89 83       	std	Y+1, r24	; 0x01
    6b9e:	fe 01       	movw	r30, r28
    6ba0:	32 96       	adiw	r30, 0x02	; 2
    6ba2:	0c c0       	rjmp	.+24     	; 0x6bbc <mp_print_mp_int+0xde>
    6ba4:	82 fe       	sbrs	r8, 2
    6ba6:	08 c0       	rjmp	.+16     	; 0x6bb8 <mp_print_mp_int+0xda>
    6ba8:	80 e2       	ldi	r24, 0x20	; 32
    6baa:	89 83       	std	Y+1, r24	; 0x01
    6bac:	fe 01       	movw	r30, r28
    6bae:	32 96       	adiw	r30, 0x02	; 2
    6bb0:	05 c0       	rjmp	.+10     	; 0x6bbc <mp_print_mp_int+0xde>
    6bb2:	fe 01       	movw	r30, r28
    6bb4:	31 96       	adiw	r30, 0x01	; 1
    6bb6:	02 c0       	rjmp	.+4      	; 0x6bbc <mp_print_mp_int+0xde>
    6bb8:	fe 01       	movw	r30, r28
    6bba:	31 96       	adiw	r30, 0x01	; 1
    6bbc:	84 fe       	sbrs	r8, 4
    6bbe:	24 c0       	rjmp	.+72     	; 0x6c08 <mp_print_mp_int+0x12a>
    6bc0:	82 e0       	ldi	r24, 0x02	; 2
    6bc2:	48 16       	cp	r4, r24
    6bc4:	51 04       	cpc	r5, r1
    6bc6:	39 f4       	brne	.+14     	; 0x6bd6 <mp_print_mp_int+0xf8>
    6bc8:	80 e3       	ldi	r24, 0x30	; 48
    6bca:	80 83       	st	Z, r24
    6bcc:	81 e0       	ldi	r24, 0x01	; 1
    6bce:	8f 0d       	add	r24, r15
    6bd0:	81 83       	std	Z+1, r24	; 0x01
    6bd2:	32 96       	adiw	r30, 0x02	; 2
    6bd4:	19 c0       	rjmp	.+50     	; 0x6c08 <mp_print_mp_int+0x12a>
    6bd6:	98 e0       	ldi	r25, 0x08	; 8
    6bd8:	49 16       	cp	r4, r25
    6bda:	51 04       	cpc	r5, r1
    6bdc:	59 f4       	brne	.+22     	; 0x6bf4 <mp_print_mp_int+0x116>
    6bde:	80 e3       	ldi	r24, 0x30	; 48
    6be0:	80 83       	st	Z, r24
    6be2:	91 fc       	sbrc	r9, 1
    6be4:	02 c0       	rjmp	.+4      	; 0x6bea <mp_print_mp_int+0x10c>
    6be6:	31 96       	adiw	r30, 0x01	; 1
    6be8:	0f c0       	rjmp	.+30     	; 0x6c08 <mp_print_mp_int+0x12a>
    6bea:	8e e0       	ldi	r24, 0x0E	; 14
    6bec:	8f 0d       	add	r24, r15
    6bee:	81 83       	std	Z+1, r24	; 0x01
    6bf0:	32 96       	adiw	r30, 0x02	; 2
    6bf2:	0a c0       	rjmp	.+20     	; 0x6c08 <mp_print_mp_int+0x12a>
    6bf4:	20 e1       	ldi	r18, 0x10	; 16
    6bf6:	42 16       	cp	r4, r18
    6bf8:	51 04       	cpc	r5, r1
    6bfa:	31 f4       	brne	.+12     	; 0x6c08 <mp_print_mp_int+0x12a>
    6bfc:	80 e3       	ldi	r24, 0x30	; 48
    6bfe:	80 83       	st	Z, r24
    6c00:	87 e1       	ldi	r24, 0x17	; 23
    6c02:	8f 0d       	add	r24, r15
    6c04:	81 83       	std	Z+1, r24	; 0x01
    6c06:	32 96       	adiw	r30, 0x02	; 2
    6c08:	10 82       	st	Z, r1
    6c0a:	ce 01       	movw	r24, r28
    6c0c:	01 96       	adiw	r24, 0x01	; 1
    6c0e:	9f 01       	movw	r18, r30
    6c10:	28 1b       	sub	r18, r24
    6c12:	39 0b       	sbc	r19, r25
    6c14:	3a 8f       	std	Y+26, r19	; 0x1a
    6c16:	29 8f       	std	Y+25, r18	; 0x19
    6c18:	85 fe       	sbrs	r8, 5
    6c1a:	05 c0       	rjmp	.+10     	; 0x6c26 <mp_print_mp_int+0x148>
    6c1c:	0f 2e       	mov	r0, r31
    6c1e:	fc e2       	ldi	r31, 0x2C	; 44
    6c20:	af 2e       	mov	r10, r31
    6c22:	f0 2d       	mov	r31, r0
    6c24:	01 c0       	rjmp	.+2      	; 0x6c28 <mp_print_mp_int+0x14a>
    6c26:	a1 2c       	mov	r10, r1
    6c28:	ce 01       	movw	r24, r28
    6c2a:	05 96       	adiw	r24, 0x05	; 5
    6c2c:	9e 87       	std	Y+14, r25	; 0x0e
    6c2e:	8d 87       	std	Y+13, r24	; 0x0d
    6c30:	88 e0       	ldi	r24, 0x08	; 8
    6c32:	90 e0       	ldi	r25, 0x00	; 0
    6c34:	98 8b       	std	Y+16, r25	; 0x10
    6c36:	8f 87       	std	Y+15, r24	; 0x0f
    6c38:	1a 8a       	std	Y+18, r1	; 0x12
    6c3a:	19 8a       	std	Y+17, r1	; 0x11
    6c3c:	32 e0       	ldi	r19, 0x02	; 2
    6c3e:	63 16       	cp	r6, r19
    6c40:	71 04       	cpc	r7, r1
    6c42:	24 f0       	brlt	.+8      	; 0x6c4c <mp_print_mp_int+0x16e>
    6c44:	68 94       	set
    6c46:	86 f8       	bld	r8, 6
    6c48:	1b 8a       	std	Y+19, r1	; 0x13
    6c4a:	03 c0       	rjmp	.+6      	; 0x6c52 <mp_print_mp_int+0x174>
    6c4c:	1b 8a       	std	Y+19, r1	; 0x13
    6c4e:	86 fe       	sbrs	r8, 6
    6c50:	24 c0       	rjmp	.+72     	; 0x6c9a <mp_print_mp_int+0x1bc>
    6c52:	cf 2c       	mov	r12, r15
    6c54:	e1 2c       	mov	r14, r1
    6c56:	f1 2c       	mov	r15, r1
    6c58:	82 01       	movw	r16, r4
    6c5a:	2c 89       	ldd	r18, Y+20	; 0x14
    6c5c:	3d 89       	ldd	r19, Y+21	; 0x15
    6c5e:	ae 01       	movw	r20, r28
    6c60:	4f 5e       	subi	r20, 0xEF	; 239
    6c62:	5f 4f       	sbci	r21, 0xFF	; 255
    6c64:	be 01       	movw	r22, r28
    6c66:	61 5f       	subi	r22, 0xF1	; 241
    6c68:	7f 4f       	sbci	r23, 0xFF	; 255
    6c6a:	ce 01       	movw	r24, r28
    6c6c:	0d 96       	adiw	r24, 0x0d	; 13
    6c6e:	76 de       	rcall	.-788    	; 0x695c <mp_obj_int_formatted>
    6c70:	6c 01       	movw	r12, r24
    6c72:	fc 01       	movw	r30, r24
    6c74:	80 81       	ld	r24, Z
    6c76:	8d 32       	cpi	r24, 0x2D	; 45
    6c78:	09 f0       	breq	.+2      	; 0x6c7c <mp_print_mp_int+0x19e>
    6c7a:	c1 c0       	rjmp	.+386    	; 0x6dfe <mp_print_mp_int+0x320>
    6c7c:	ff ef       	ldi	r31, 0xFF	; 255
    6c7e:	cf 1a       	sub	r12, r31
    6c80:	df 0a       	sbc	r13, r31
    6c82:	8b 8b       	std	Y+19, r24	; 0x13
    6c84:	89 89       	ldd	r24, Y+17	; 0x11
    6c86:	9a 89       	ldd	r25, Y+18	; 0x12
    6c88:	01 97       	sbiw	r24, 0x01	; 1
    6c8a:	9a 8b       	std	Y+18, r25	; 0x12
    6c8c:	89 8b       	std	Y+17, r24	; 0x11
    6c8e:	22 e0       	ldi	r18, 0x02	; 2
    6c90:	62 16       	cp	r6, r18
    6c92:	71 04       	cpc	r7, r1
    6c94:	0c f0       	brlt	.+2      	; 0x6c98 <mp_print_mp_int+0x1ba>
    6c96:	c6 c0       	rjmp	.+396    	; 0x6e24 <mp_print_mp_int+0x346>
    6c98:	c0 c0       	rjmp	.+384    	; 0x6e1a <mp_print_mp_int+0x33c>
    6c9a:	cf 2c       	mov	r12, r15
    6c9c:	ce 01       	movw	r24, r28
    6c9e:	01 96       	adiw	r24, 0x01	; 1
    6ca0:	7c 01       	movw	r14, r24
    6ca2:	82 01       	movw	r16, r4
    6ca4:	2c 89       	ldd	r18, Y+20	; 0x14
    6ca6:	3d 89       	ldd	r19, Y+21	; 0x15
    6ca8:	ae 01       	movw	r20, r28
    6caa:	4f 5e       	subi	r20, 0xEF	; 239
    6cac:	5f 4f       	sbci	r21, 0xFF	; 255
    6cae:	be 01       	movw	r22, r28
    6cb0:	61 5f       	subi	r22, 0xF1	; 241
    6cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb4:	0c 96       	adiw	r24, 0x0c	; 12
    6cb6:	52 de       	rcall	.-860    	; 0x695c <mp_obj_int_formatted>
    6cb8:	6c 01       	movw	r12, r24
    6cba:	92 e0       	ldi	r25, 0x02	; 2
    6cbc:	69 16       	cp	r6, r25
    6cbe:	71 04       	cpc	r7, r1
    6cc0:	0c f4       	brge	.+2      	; 0x6cc4 <mp_print_mp_int+0x1e6>
    6cc2:	ab c0       	rjmp	.+342    	; 0x6e1a <mp_print_mp_int+0x33c>
    6cc4:	a1 c0       	rjmp	.+322    	; 0x6e08 <mp_print_mp_int+0x32a>
    6cc6:	01 96       	adiw	r24, 0x01	; 1
    6cc8:	e9 8d       	ldd	r30, Y+25	; 0x19
    6cca:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6ccc:	8e 0f       	add	r24, r30
    6cce:	9f 1f       	adc	r25, r31
    6cd0:	82 15       	cp	r24, r2
    6cd2:	93 05       	cpc	r25, r3
    6cd4:	74 f4       	brge	.+28     	; 0x6cf2 <mp_print_mp_int+0x214>
    6cd6:	80 fe       	sbrs	r8, 0
    6cd8:	06 c0       	rjmp	.+12     	; 0x6ce6 <mp_print_mp_int+0x208>
    6cda:	51 01       	movw	r10, r2
    6cdc:	a8 1a       	sub	r10, r24
    6cde:	b9 0a       	sbc	r11, r25
    6ce0:	e1 2c       	mov	r14, r1
    6ce2:	f1 2c       	mov	r15, r1
    6ce4:	0a c0       	rjmp	.+20     	; 0x6cfa <mp_print_mp_int+0x21c>
    6ce6:	71 01       	movw	r14, r2
    6ce8:	e8 1a       	sub	r14, r24
    6cea:	f9 0a       	sbc	r15, r25
    6cec:	a1 2c       	mov	r10, r1
    6cee:	b1 2c       	mov	r11, r1
    6cf0:	04 c0       	rjmp	.+8      	; 0x6cfa <mp_print_mp_int+0x21c>
    6cf2:	a1 2c       	mov	r10, r1
    6cf4:	b1 2c       	mov	r11, r1
    6cf6:	e1 2c       	mov	r14, r1
    6cf8:	f1 2c       	mov	r15, r1
    6cfa:	e8 94       	clt
    6cfc:	80 f8       	bld	r8, 0
    6cfe:	e1 14       	cp	r14, r1
    6d00:	f1 04       	cpc	r15, r1
    6d02:	79 f0       	breq	.+30     	; 0x6d22 <mp_print_mp_int+0x244>
    6d04:	00 e2       	ldi	r16, 0x20	; 32
    6d06:	20 e0       	ldi	r18, 0x00	; 0
    6d08:	30 e0       	ldi	r19, 0x00	; 0
    6d0a:	40 e0       	ldi	r20, 0x00	; 0
    6d0c:	50 e0       	ldi	r21, 0x00	; 0
    6d0e:	6d e4       	ldi	r22, 0x4D	; 77
    6d10:	7f e0       	ldi	r23, 0x0F	; 15
    6d12:	8f 89       	ldd	r24, Y+23	; 0x17
    6d14:	98 8d       	ldd	r25, Y+24	; 0x18
    6d16:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    6d1a:	2c 01       	movw	r4, r24
    6d1c:	f0 e3       	ldi	r31, 0x30	; 48
    6d1e:	fe 8b       	std	Y+22, r31	; 0x16
    6d20:	04 c0       	rjmp	.+8      	; 0x6d2a <mp_print_mp_int+0x24c>
    6d22:	20 e3       	ldi	r18, 0x30	; 48
    6d24:	2e 8b       	std	Y+22, r18	; 0x16
    6d26:	41 2c       	mov	r4, r1
    6d28:	51 2c       	mov	r5, r1
    6d2a:	86 fe       	sbrs	r8, 6
    6d2c:	2f c0       	rjmp	.+94     	; 0x6d8c <mp_print_mp_int+0x2ae>
    6d2e:	8b 89       	ldd	r24, Y+19	; 0x13
    6d30:	88 23       	and	r24, r24
    6d32:	a1 f0       	breq	.+40     	; 0x6d5c <mp_print_mp_int+0x27e>
    6d34:	ee 24       	eor	r14, r14
    6d36:	e3 94       	inc	r14
    6d38:	f1 2c       	mov	r15, r1
    6d3a:	00 e0       	ldi	r16, 0x00	; 0
    6d3c:	20 e0       	ldi	r18, 0x00	; 0
    6d3e:	30 e0       	ldi	r19, 0x00	; 0
    6d40:	41 e0       	ldi	r20, 0x01	; 1
    6d42:	50 e0       	ldi	r21, 0x00	; 0
    6d44:	be 01       	movw	r22, r28
    6d46:	6d 5e       	subi	r22, 0xED	; 237
    6d48:	7f 4f       	sbci	r23, 0xFF	; 255
    6d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    6d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    6d4e:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    6d52:	48 0e       	add	r4, r24
    6d54:	59 1e       	adc	r5, r25
    6d56:	31 e0       	ldi	r19, 0x01	; 1
    6d58:	23 1a       	sub	r2, r19
    6d5a:	31 08       	sbc	r3, r1
    6d5c:	89 8d       	ldd	r24, Y+25	; 0x19
    6d5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d60:	00 97       	sbiw	r24, 0x00	; 0
    6d62:	a1 f0       	breq	.+40     	; 0x6d8c <mp_print_mp_int+0x2ae>
    6d64:	ee 24       	eor	r14, r14
    6d66:	e3 94       	inc	r14
    6d68:	f1 2c       	mov	r15, r1
    6d6a:	00 e0       	ldi	r16, 0x00	; 0
    6d6c:	20 e0       	ldi	r18, 0x00	; 0
    6d6e:	30 e0       	ldi	r19, 0x00	; 0
    6d70:	ac 01       	movw	r20, r24
    6d72:	be 01       	movw	r22, r28
    6d74:	6f 5f       	subi	r22, 0xFF	; 255
    6d76:	7f 4f       	sbci	r23, 0xFF	; 255
    6d78:	8f 89       	ldd	r24, Y+23	; 0x17
    6d7a:	98 8d       	ldd	r25, Y+24	; 0x18
    6d7c:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    6d80:	48 0e       	add	r4, r24
    6d82:	59 1e       	adc	r5, r25
    6d84:	e9 8d       	ldd	r30, Y+25	; 0x19
    6d86:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6d88:	2e 1a       	sub	r2, r30
    6d8a:	3f 0a       	sbc	r3, r31
    6d8c:	f2 e0       	ldi	r31, 0x02	; 2
    6d8e:	6f 16       	cp	r6, r31
    6d90:	71 04       	cpc	r7, r1
    6d92:	0c f0       	brlt	.+2      	; 0x6d96 <mp_print_mp_int+0x2b8>
    6d94:	13 01       	movw	r2, r6
    6d96:	49 89       	ldd	r20, Y+17	; 0x11
    6d98:	5a 89       	ldd	r21, Y+18	; 0x12
    6d9a:	71 01       	movw	r14, r2
    6d9c:	0e 89       	ldd	r16, Y+22	; 0x16
    6d9e:	94 01       	movw	r18, r8
    6da0:	b6 01       	movw	r22, r12
    6da2:	8f 89       	ldd	r24, Y+23	; 0x17
    6da4:	98 8d       	ldd	r25, Y+24	; 0x18
    6da6:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    6daa:	48 0e       	add	r4, r24
    6dac:	59 1e       	adc	r5, r25
    6dae:	a1 14       	cp	r10, r1
    6db0:	b1 04       	cpc	r11, r1
    6db2:	71 f0       	breq	.+28     	; 0x6dd0 <mp_print_mp_int+0x2f2>
    6db4:	75 01       	movw	r14, r10
    6db6:	00 e2       	ldi	r16, 0x20	; 32
    6db8:	20 e0       	ldi	r18, 0x00	; 0
    6dba:	30 e0       	ldi	r19, 0x00	; 0
    6dbc:	40 e0       	ldi	r20, 0x00	; 0
    6dbe:	50 e0       	ldi	r21, 0x00	; 0
    6dc0:	6d e4       	ldi	r22, 0x4D	; 77
    6dc2:	7f e0       	ldi	r23, 0x0F	; 15
    6dc4:	8f 89       	ldd	r24, Y+23	; 0x17
    6dc6:	98 8d       	ldd	r25, Y+24	; 0x18
    6dc8:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    6dcc:	48 0e       	add	r4, r24
    6dce:	59 1e       	adc	r5, r25
    6dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dd4:	9e 01       	movw	r18, r28
    6dd6:	2b 5f       	subi	r18, 0xFB	; 251
    6dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6dda:	82 17       	cp	r24, r18
    6ddc:	93 07       	cpc	r25, r19
    6dde:	59 f1       	breq	.+86     	; 0x6e36 <mp_print_mp_int+0x358>
    6de0:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    6de4:	28 c0       	rjmp	.+80     	; 0x6e36 <mp_print_mp_int+0x358>
    6de6:	29 89       	ldd	r18, Y+17	; 0x11
    6de8:	3a 89       	ldd	r19, Y+18	; 0x12
    6dea:	c3 01       	movw	r24, r6
    6dec:	62 16       	cp	r6, r18
    6dee:	73 06       	cpc	r7, r19
    6df0:	0c f4       	brge	.+2      	; 0x6df4 <mp_print_mp_int+0x316>
    6df2:	c9 01       	movw	r24, r18
    6df4:	2b 89       	ldd	r18, Y+19	; 0x13
    6df6:	22 23       	and	r18, r18
    6df8:	09 f4       	brne	.+2      	; 0x6dfc <mp_print_mp_int+0x31e>
    6dfa:	66 cf       	rjmp	.-308    	; 0x6cc8 <mp_print_mp_int+0x1ea>
    6dfc:	64 cf       	rjmp	.-312    	; 0x6cc6 <mp_print_mp_int+0x1e8>
    6dfe:	22 e0       	ldi	r18, 0x02	; 2
    6e00:	62 16       	cp	r6, r18
    6e02:	71 04       	cpc	r7, r1
    6e04:	84 f7       	brge	.-32     	; 0x6de6 <mp_print_mp_int+0x308>
    6e06:	09 c0       	rjmp	.+18     	; 0x6e1a <mp_print_mp_int+0x33c>
    6e08:	29 89       	ldd	r18, Y+17	; 0x11
    6e0a:	3a 89       	ldd	r19, Y+18	; 0x12
    6e0c:	c3 01       	movw	r24, r6
    6e0e:	62 16       	cp	r6, r18
    6e10:	73 06       	cpc	r7, r19
    6e12:	0c f0       	brlt	.+2      	; 0x6e16 <mp_print_mp_int+0x338>
    6e14:	5d cf       	rjmp	.-326    	; 0x6cd0 <mp_print_mp_int+0x1f2>
    6e16:	c9 01       	movw	r24, r18
    6e18:	5b cf       	rjmp	.-330    	; 0x6cd0 <mp_print_mp_int+0x1f2>
    6e1a:	a1 2c       	mov	r10, r1
    6e1c:	b1 2c       	mov	r11, r1
    6e1e:	41 2c       	mov	r4, r1
    6e20:	51 2c       	mov	r5, r1
    6e22:	83 cf       	rjmp	.-250    	; 0x6d2a <mp_print_mp_int+0x24c>
    6e24:	29 89       	ldd	r18, Y+17	; 0x11
    6e26:	3a 89       	ldd	r19, Y+18	; 0x12
    6e28:	c3 01       	movw	r24, r6
    6e2a:	62 16       	cp	r6, r18
    6e2c:	73 06       	cpc	r7, r19
    6e2e:	0c f0       	brlt	.+2      	; 0x6e32 <mp_print_mp_int+0x354>
    6e30:	4a cf       	rjmp	.-364    	; 0x6cc6 <mp_print_mp_int+0x1e8>
    6e32:	c9 01       	movw	r24, r18
    6e34:	48 cf       	rjmp	.-368    	; 0x6cc6 <mp_print_mp_int+0x1e8>
    6e36:	c2 01       	movw	r24, r4
    6e38:	6a 96       	adiw	r28, 0x1a	; 26
    6e3a:	0f b6       	in	r0, 0x3f	; 63
    6e3c:	f8 94       	cli
    6e3e:	de bf       	out	0x3e, r29	; 62
    6e40:	0f be       	out	0x3f, r0	; 63
    6e42:	cd bf       	out	0x3d, r28	; 61
    6e44:	df 91       	pop	r29
    6e46:	cf 91       	pop	r28
    6e48:	1f 91       	pop	r17
    6e4a:	0f 91       	pop	r16
    6e4c:	ff 90       	pop	r15
    6e4e:	ef 90       	pop	r14
    6e50:	df 90       	pop	r13
    6e52:	cf 90       	pop	r12
    6e54:	bf 90       	pop	r11
    6e56:	af 90       	pop	r10
    6e58:	9f 90       	pop	r9
    6e5a:	8f 90       	pop	r8
    6e5c:	7f 90       	pop	r7
    6e5e:	6f 90       	pop	r6
    6e60:	5f 90       	pop	r5
    6e62:	4f 90       	pop	r4
    6e64:	3f 90       	pop	r3
    6e66:	2f 90       	pop	r2
    6e68:	08 95       	ret

00006e6a <mp_obj_int_print>:
    6e6a:	6f 92       	push	r6
    6e6c:	7f 92       	push	r7
    6e6e:	8f 92       	push	r8
    6e70:	9f 92       	push	r9
    6e72:	af 92       	push	r10
    6e74:	cf 92       	push	r12
    6e76:	ef 92       	push	r14
    6e78:	ff 92       	push	r15
    6e7a:	0f 93       	push	r16
    6e7c:	1f 93       	push	r17
    6e7e:	cf 93       	push	r28
    6e80:	df 93       	push	r29
    6e82:	cd b7       	in	r28, 0x3d	; 61
    6e84:	de b7       	in	r29, 0x3e	; 62
    6e86:	2e 97       	sbiw	r28, 0x0e	; 14
    6e88:	0f b6       	in	r0, 0x3f	; 63
    6e8a:	f8 94       	cli
    6e8c:	de bf       	out	0x3e, r29	; 62
    6e8e:	0f be       	out	0x3f, r0	; 63
    6e90:	cd bf       	out	0x3d, r28	; 61
    6e92:	3c 01       	movw	r6, r24
    6e94:	9b 01       	movw	r18, r22
    6e96:	ce 01       	movw	r24, r28
    6e98:	01 96       	adiw	r24, 0x01	; 1
    6e9a:	4c 01       	movw	r8, r24
    6e9c:	9a 87       	std	Y+10, r25	; 0x0a
    6e9e:	89 87       	std	Y+9, r24	; 0x09
    6ea0:	88 e0       	ldi	r24, 0x08	; 8
    6ea2:	90 e0       	ldi	r25, 0x00	; 0
    6ea4:	9c 87       	std	Y+12, r25	; 0x0c
    6ea6:	8b 87       	std	Y+11, r24	; 0x0b
    6ea8:	a1 2c       	mov	r10, r1
    6eaa:	c1 2c       	mov	r12, r1
    6eac:	e1 2c       	mov	r14, r1
    6eae:	f1 2c       	mov	r15, r1
    6eb0:	0a e0       	ldi	r16, 0x0A	; 10
    6eb2:	10 e0       	ldi	r17, 0x00	; 0
    6eb4:	ae 01       	movw	r20, r28
    6eb6:	43 5f       	subi	r20, 0xF3	; 243
    6eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    6eba:	be 01       	movw	r22, r28
    6ebc:	65 5f       	subi	r22, 0xF5	; 245
    6ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    6ec0:	ce 01       	movw	r24, r28
    6ec2:	09 96       	adiw	r24, 0x09	; 9
    6ec4:	4b dd       	rcall	.-1386   	; 0x695c <mp_obj_int_formatted>
    6ec6:	bc 01       	movw	r22, r24
    6ec8:	c3 01       	movw	r24, r6
    6eca:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    6ece:	89 85       	ldd	r24, Y+9	; 0x09
    6ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ed2:	88 16       	cp	r8, r24
    6ed4:	99 06       	cpc	r9, r25
    6ed6:	11 f0       	breq	.+4      	; 0x6edc <mp_obj_int_print+0x72>
    6ed8:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    6edc:	2e 96       	adiw	r28, 0x0e	; 14
    6ede:	0f b6       	in	r0, 0x3f	; 63
    6ee0:	f8 94       	cli
    6ee2:	de bf       	out	0x3e, r29	; 62
    6ee4:	0f be       	out	0x3f, r0	; 63
    6ee6:	cd bf       	out	0x3d, r28	; 61
    6ee8:	df 91       	pop	r29
    6eea:	cf 91       	pop	r28
    6eec:	1f 91       	pop	r17
    6eee:	0f 91       	pop	r16
    6ef0:	ff 90       	pop	r15
    6ef2:	ef 90       	pop	r14
    6ef4:	cf 90       	pop	r12
    6ef6:	af 90       	pop	r10
    6ef8:	9f 90       	pop	r9
    6efa:	8f 90       	pop	r8
    6efc:	7f 90       	pop	r7
    6efe:	6f 90       	pop	r6
    6f00:	08 95       	ret

00006f02 <mp_obj_list_init>:
    6f02:	0f 93       	push	r16
    6f04:	1f 93       	push	r17
    6f06:	cf 93       	push	r28
    6f08:	df 93       	push	r29
    6f0a:	8c 01       	movw	r16, r24
    6f0c:	eb 01       	movw	r28, r22
    6f0e:	8c e2       	ldi	r24, 0x2C	; 44
    6f10:	9d e1       	ldi	r25, 0x1D	; 29
    6f12:	f8 01       	movw	r30, r16
    6f14:	91 83       	std	Z+1, r25	; 0x01
    6f16:	80 83       	st	Z, r24
    6f18:	cb 01       	movw	r24, r22
    6f1a:	64 30       	cpi	r22, 0x04	; 4
    6f1c:	71 05       	cpc	r23, r1
    6f1e:	10 f4       	brcc	.+4      	; 0x6f24 <mp_obj_list_init+0x22>
    6f20:	84 e0       	ldi	r24, 0x04	; 4
    6f22:	90 e0       	ldi	r25, 0x00	; 0
    6f24:	f8 01       	movw	r30, r16
    6f26:	93 83       	std	Z+3, r25	; 0x03
    6f28:	82 83       	std	Z+2, r24	; 0x02
    6f2a:	d5 83       	std	Z+5, r29	; 0x05
    6f2c:	c4 83       	std	Z+4, r28	; 0x04
    6f2e:	88 0f       	add	r24, r24
    6f30:	99 1f       	adc	r25, r25
    6f32:	29 da       	rcall	.-2990   	; 0x6386 <m_malloc>
    6f34:	f8 01       	movw	r30, r16
    6f36:	97 83       	std	Z+7, r25	; 0x07
    6f38:	86 83       	std	Z+6, r24	; 0x06
    6f3a:	42 81       	ldd	r20, Z+2	; 0x02
    6f3c:	53 81       	ldd	r21, Z+3	; 0x03
    6f3e:	4c 1b       	sub	r20, r28
    6f40:	5d 0b       	sbc	r21, r29
    6f42:	44 0f       	add	r20, r20
    6f44:	55 1f       	adc	r21, r21
    6f46:	cc 0f       	add	r28, r28
    6f48:	dd 1f       	adc	r29, r29
    6f4a:	60 e0       	ldi	r22, 0x00	; 0
    6f4c:	70 e0       	ldi	r23, 0x00	; 0
    6f4e:	8c 0f       	add	r24, r28
    6f50:	9d 1f       	adc	r25, r29
    6f52:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    6f56:	df 91       	pop	r29
    6f58:	cf 91       	pop	r28
    6f5a:	1f 91       	pop	r17
    6f5c:	0f 91       	pop	r16
    6f5e:	08 95       	ret

00006f60 <mp_obj_new_list>:
    6f60:	ef 92       	push	r14
    6f62:	ff 92       	push	r15
    6f64:	0f 93       	push	r16
    6f66:	1f 93       	push	r17
    6f68:	cf 93       	push	r28
    6f6a:	df 93       	push	r29
    6f6c:	7c 01       	movw	r14, r24
    6f6e:	8b 01       	movw	r16, r22
    6f70:	88 e0       	ldi	r24, 0x08	; 8
    6f72:	90 e0       	ldi	r25, 0x00	; 0
    6f74:	08 da       	rcall	.-3056   	; 0x6386 <m_malloc>
    6f76:	ec 01       	movw	r28, r24
    6f78:	b7 01       	movw	r22, r14
    6f7a:	c3 df       	rcall	.-122    	; 0x6f02 <mp_obj_list_init>
    6f7c:	01 15       	cp	r16, r1
    6f7e:	11 05       	cpc	r17, r1
    6f80:	b1 f0       	breq	.+44     	; 0x6fae <mp_obj_new_list+0x4e>
    6f82:	e1 14       	cp	r14, r1
    6f84:	f1 04       	cpc	r15, r1
    6f86:	99 f0       	breq	.+38     	; 0x6fae <mp_obj_new_list+0x4e>
    6f88:	d8 01       	movw	r26, r16
    6f8a:	c7 01       	movw	r24, r14
    6f8c:	88 0f       	add	r24, r24
    6f8e:	99 1f       	adc	r25, r25
    6f90:	20 e0       	ldi	r18, 0x00	; 0
    6f92:	30 e0       	ldi	r19, 0x00	; 0
    6f94:	4d 91       	ld	r20, X+
    6f96:	5d 91       	ld	r21, X+
    6f98:	ee 81       	ldd	r30, Y+6	; 0x06
    6f9a:	ff 81       	ldd	r31, Y+7	; 0x07
    6f9c:	e2 0f       	add	r30, r18
    6f9e:	f3 1f       	adc	r31, r19
    6fa0:	51 83       	std	Z+1, r21	; 0x01
    6fa2:	40 83       	st	Z, r20
    6fa4:	2e 5f       	subi	r18, 0xFE	; 254
    6fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fa8:	28 17       	cp	r18, r24
    6faa:	39 07       	cpc	r19, r25
    6fac:	99 f7       	brne	.-26     	; 0x6f94 <mp_obj_new_list+0x34>
    6fae:	ce 01       	movw	r24, r28
    6fb0:	df 91       	pop	r29
    6fb2:	cf 91       	pop	r28
    6fb4:	1f 91       	pop	r17
    6fb6:	0f 91       	pop	r16
    6fb8:	ff 90       	pop	r15
    6fba:	ef 90       	pop	r14
    6fbc:	08 95       	ret

00006fbe <list_copy>:
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	83 70       	andi	r24, 0x03	; 3
    6fc2:	99 27       	eor	r25, r25
    6fc4:	89 2b       	or	r24, r25
    6fc6:	29 f4       	brne	.+10     	; 0x6fd2 <list_copy+0x14>
    6fc8:	80 81       	ld	r24, Z
    6fca:	91 81       	ldd	r25, Z+1	; 0x01
    6fcc:	8c 52       	subi	r24, 0x2C	; 44
    6fce:	9d 41       	sbci	r25, 0x1D	; 29
    6fd0:	11 f0       	breq	.+4      	; 0x6fd6 <list_copy+0x18>
    6fd2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    6fd6:	66 81       	ldd	r22, Z+6	; 0x06
    6fd8:	77 81       	ldd	r23, Z+7	; 0x07
    6fda:	84 81       	ldd	r24, Z+4	; 0x04
    6fdc:	95 81       	ldd	r25, Z+5	; 0x05
    6fde:	c0 cf       	rjmp	.-128    	; 0x6f60 <mp_obj_new_list>
    6fe0:	08 95       	ret

00006fe2 <object_make_new>:
    6fe2:	cf 93       	push	r28
    6fe4:	df 93       	push	r29
    6fe6:	ec 01       	movw	r28, r24
    6fe8:	cb 01       	movw	r24, r22
    6fea:	ba 01       	movw	r22, r20
    6fec:	20 e0       	ldi	r18, 0x00	; 0
    6fee:	30 e0       	ldi	r19, 0x00	; 0
    6ff0:	a9 01       	movw	r20, r18
    6ff2:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    6ff6:	82 e0       	ldi	r24, 0x02	; 2
    6ff8:	90 e0       	ldi	r25, 0x00	; 0
    6ffa:	c5 d9       	rcall	.-3190   	; 0x6386 <m_malloc>
    6ffc:	fc 01       	movw	r30, r24
    6ffe:	d1 83       	std	Z+1, r29	; 0x01
    7000:	c0 83       	st	Z, r28
    7002:	df 91       	pop	r29
    7004:	cf 91       	pop	r28
    7006:	08 95       	ret

00007008 <range_make_new>:
    7008:	cf 92       	push	r12
    700a:	df 92       	push	r13
    700c:	ef 92       	push	r14
    700e:	ff 92       	push	r15
    7010:	0f 93       	push	r16
    7012:	1f 93       	push	r17
    7014:	cf 93       	push	r28
    7016:	df 93       	push	r29
    7018:	6c 01       	movw	r12, r24
    701a:	8b 01       	movw	r16, r22
    701c:	ba 01       	movw	r22, r20
    701e:	79 01       	movw	r14, r18
    7020:	26 e0       	ldi	r18, 0x06	; 6
    7022:	30 e0       	ldi	r19, 0x00	; 0
    7024:	42 e0       	ldi	r20, 0x02	; 2
    7026:	50 e0       	ldi	r21, 0x00	; 0
    7028:	c8 01       	movw	r24, r16
    702a:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    702e:	88 e0       	ldi	r24, 0x08	; 8
    7030:	90 e0       	ldi	r25, 0x00	; 0
    7032:	a9 d9       	rcall	.-3246   	; 0x6386 <m_malloc>
    7034:	ec 01       	movw	r28, r24
    7036:	d9 82       	std	Y+1, r13	; 0x01
    7038:	c8 82       	st	Y, r12
    703a:	1b 82       	std	Y+3, r1	; 0x03
    703c:	1a 82       	std	Y+2, r1	; 0x02
    703e:	81 e0       	ldi	r24, 0x01	; 1
    7040:	90 e0       	ldi	r25, 0x00	; 0
    7042:	9f 83       	std	Y+7, r25	; 0x07
    7044:	8e 83       	std	Y+6, r24	; 0x06
    7046:	01 30       	cpi	r16, 0x01	; 1
    7048:	11 05       	cpc	r17, r1
    704a:	41 f4       	brne	.+16     	; 0x705c <range_make_new+0x54>
    704c:	f7 01       	movw	r30, r14
    704e:	80 81       	ld	r24, Z
    7050:	91 81       	ldd	r25, Z+1	; 0x01
    7052:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    7056:	9d 83       	std	Y+5, r25	; 0x05
    7058:	8c 83       	std	Y+4, r24	; 0x04
    705a:	1e c0       	rjmp	.+60     	; 0x7098 <range_make_new+0x90>
    705c:	f7 01       	movw	r30, r14
    705e:	80 81       	ld	r24, Z
    7060:	91 81       	ldd	r25, Z+1	; 0x01
    7062:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    7066:	9b 83       	std	Y+3, r25	; 0x03
    7068:	8a 83       	std	Y+2, r24	; 0x02
    706a:	f7 01       	movw	r30, r14
    706c:	82 81       	ldd	r24, Z+2	; 0x02
    706e:	93 81       	ldd	r25, Z+3	; 0x03
    7070:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    7074:	9d 83       	std	Y+5, r25	; 0x05
    7076:	8c 83       	std	Y+4, r24	; 0x04
    7078:	03 30       	cpi	r16, 0x03	; 3
    707a:	11 05       	cpc	r17, r1
    707c:	69 f4       	brne	.+26     	; 0x7098 <range_make_new+0x90>
    707e:	f7 01       	movw	r30, r14
    7080:	84 81       	ldd	r24, Z+4	; 0x04
    7082:	95 81       	ldd	r25, Z+5	; 0x05
    7084:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    7088:	9f 83       	std	Y+7, r25	; 0x07
    708a:	8e 83       	std	Y+6, r24	; 0x06
    708c:	89 2b       	or	r24, r25
    708e:	21 f4       	brne	.+8      	; 0x7098 <range_make_new+0x90>
    7090:	80 e9       	ldi	r24, 0x90	; 144
    7092:	96 e0       	ldi	r25, 0x06	; 6
    7094:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    7098:	ce 01       	movw	r24, r28
    709a:	df 91       	pop	r29
    709c:	cf 91       	pop	r28
    709e:	1f 91       	pop	r17
    70a0:	0f 91       	pop	r16
    70a2:	ff 90       	pop	r15
    70a4:	ef 90       	pop	r14
    70a6:	df 90       	pop	r13
    70a8:	cf 90       	pop	r12
    70aa:	08 95       	ret

000070ac <mp_obj_new_str_copy>:
    70ac:	cf 92       	push	r12
    70ae:	df 92       	push	r13
    70b0:	ef 92       	push	r14
    70b2:	ff 92       	push	r15
    70b4:	0f 93       	push	r16
    70b6:	1f 93       	push	r17
    70b8:	cf 93       	push	r28
    70ba:	df 93       	push	r29
    70bc:	6c 01       	movw	r12, r24
    70be:	7b 01       	movw	r14, r22
    70c0:	ea 01       	movw	r28, r20
    70c2:	88 e0       	ldi	r24, 0x08	; 8
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	5f d9       	rcall	.-3394   	; 0x6386 <m_malloc>
    70c8:	8c 01       	movw	r16, r24
    70ca:	fc 01       	movw	r30, r24
    70cc:	d1 82       	std	Z+1, r13	; 0x01
    70ce:	c0 82       	st	Z, r12
    70d0:	d5 83       	std	Z+5, r29	; 0x05
    70d2:	c4 83       	std	Z+4, r28	; 0x04
    70d4:	e1 14       	cp	r14, r1
    70d6:	f1 04       	cpc	r15, r1
    70d8:	a9 f0       	breq	.+42     	; 0x7104 <mp_obj_new_str_copy+0x58>
    70da:	be 01       	movw	r22, r28
    70dc:	c7 01       	movw	r24, r14
    70de:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    70e2:	f8 01       	movw	r30, r16
    70e4:	93 83       	std	Z+3, r25	; 0x03
    70e6:	82 83       	std	Z+2, r24	; 0x02
    70e8:	ce 01       	movw	r24, r28
    70ea:	01 96       	adiw	r24, 0x01	; 1
    70ec:	4c d9       	rcall	.-3432   	; 0x6386 <m_malloc>
    70ee:	6c 01       	movw	r12, r24
    70f0:	f8 01       	movw	r30, r16
    70f2:	97 83       	std	Z+7, r25	; 0x07
    70f4:	86 83       	std	Z+6, r24	; 0x06
    70f6:	ae 01       	movw	r20, r28
    70f8:	b7 01       	movw	r22, r14
    70fa:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    70fe:	cc 0d       	add	r28, r12
    7100:	dd 1d       	adc	r29, r13
    7102:	18 82       	st	Y, r1
    7104:	c8 01       	movw	r24, r16
    7106:	df 91       	pop	r29
    7108:	cf 91       	pop	r28
    710a:	1f 91       	pop	r17
    710c:	0f 91       	pop	r16
    710e:	ff 90       	pop	r15
    7110:	ef 90       	pop	r14
    7112:	df 90       	pop	r13
    7114:	cf 90       	pop	r12
    7116:	08 95       	ret

00007118 <mp_obj_new_str>:
    7118:	0f 93       	push	r16
    711a:	1f 93       	push	r17
    711c:	cf 93       	push	r28
    711e:	df 93       	push	r29
    7120:	ec 01       	movw	r28, r24
    7122:	8b 01       	movw	r16, r22
    7124:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <qstr_find_strn>
    7128:	00 97       	sbiw	r24, 0x00	; 0
    712a:	41 f0       	breq	.+16     	; 0x713c <mp_obj_new_str+0x24>
    712c:	88 0f       	add	r24, r24
    712e:	99 1f       	adc	r25, r25
    7130:	88 0f       	add	r24, r24
    7132:	99 1f       	adc	r25, r25
    7134:	88 0f       	add	r24, r24
    7136:	99 1f       	adc	r25, r25
    7138:	82 60       	ori	r24, 0x02	; 2
    713a:	05 c0       	rjmp	.+10     	; 0x7146 <mp_obj_new_str+0x2e>
    713c:	a8 01       	movw	r20, r16
    713e:	be 01       	movw	r22, r28
    7140:	82 e1       	ldi	r24, 0x12	; 18
    7142:	9b e1       	ldi	r25, 0x1B	; 27
    7144:	b3 df       	rcall	.-154    	; 0x70ac <mp_obj_new_str_copy>
    7146:	df 91       	pop	r29
    7148:	cf 91       	pop	r28
    714a:	1f 91       	pop	r17
    714c:	0f 91       	pop	r16
    714e:	08 95       	ret

00007150 <mp_obj_new_bytes>:
    7150:	ab 01       	movw	r20, r22
    7152:	bc 01       	movw	r22, r24
    7154:	82 ef       	ldi	r24, 0xF2	; 242
    7156:	9a e1       	ldi	r25, 0x1A	; 26
    7158:	a9 cf       	rjmp	.-174    	; 0x70ac <mp_obj_new_str_copy>
    715a:	08 95       	ret

0000715c <mp_obj_new_str_of_type>:
    715c:	9b 01       	movw	r18, r22
    715e:	82 51       	subi	r24, 0x12	; 18
    7160:	9b 41       	sbci	r25, 0x1B	; 27
    7162:	21 f4       	brne	.+8      	; 0x716c <mp_obj_new_str_of_type+0x10>
    7164:	ba 01       	movw	r22, r20
    7166:	c9 01       	movw	r24, r18
    7168:	d7 cf       	rjmp	.-82     	; 0x7118 <mp_obj_new_str>
    716a:	08 95       	ret
    716c:	ba 01       	movw	r22, r20
    716e:	c9 01       	movw	r24, r18
    7170:	ef cf       	rjmp	.-34     	; 0x7150 <mp_obj_new_bytes>
    7172:	08 95       	ret

00007174 <str_uni_strip>:
    7174:	2f 92       	push	r2
    7176:	3f 92       	push	r3
    7178:	4f 92       	push	r4
    717a:	5f 92       	push	r5
    717c:	6f 92       	push	r6
    717e:	7f 92       	push	r7
    7180:	8f 92       	push	r8
    7182:	9f 92       	push	r9
    7184:	af 92       	push	r10
    7186:	bf 92       	push	r11
    7188:	cf 92       	push	r12
    718a:	df 92       	push	r13
    718c:	ef 92       	push	r14
    718e:	ff 92       	push	r15
    7190:	0f 93       	push	r16
    7192:	1f 93       	push	r17
    7194:	cf 93       	push	r28
    7196:	df 93       	push	r29
    7198:	cd b7       	in	r28, 0x3d	; 61
    719a:	de b7       	in	r29, 0x3e	; 62
    719c:	2f 97       	sbiw	r28, 0x0f	; 15
    719e:	0f b6       	in	r0, 0x3f	; 63
    71a0:	f8 94       	cli
    71a2:	de bf       	out	0x3e, r29	; 62
    71a4:	0f be       	out	0x3f, r0	; 63
    71a6:	cd bf       	out	0x3d, r28	; 61
    71a8:	1c 01       	movw	r2, r24
    71aa:	5b 01       	movw	r10, r22
    71ac:	5b 87       	std	Y+11, r21	; 0x0b
    71ae:	4a 87       	std	Y+10, r20	; 0x0a
    71b0:	da 01       	movw	r26, r20
    71b2:	ed 90       	ld	r14, X+
    71b4:	fc 90       	ld	r15, X
    71b6:	c7 01       	movw	r24, r14
    71b8:	87 70       	andi	r24, 0x07	; 7
    71ba:	99 27       	eor	r25, r25
    71bc:	02 97       	sbiw	r24, 0x02	; 2
    71be:	09 f4       	brne	.+2      	; 0x71c2 <str_uni_strip+0x4e>
    71c0:	00 c1       	rjmp	.+512    	; 0x73c2 <str_uni_strip+0x24e>
    71c2:	c7 01       	movw	r24, r14
    71c4:	83 70       	andi	r24, 0x03	; 3
    71c6:	99 27       	eor	r25, r25
    71c8:	89 2b       	or	r24, r25
    71ca:	49 f4       	brne	.+18     	; 0x71de <str_uni_strip+0x6a>
    71cc:	d7 01       	movw	r26, r14
    71ce:	ed 91       	ld	r30, X+
    71d0:	fc 91       	ld	r31, X
    71d2:	86 85       	ldd	r24, Z+14	; 0x0e
    71d4:	97 85       	ldd	r25, Z+15	; 0x0f
    71d6:	81 5a       	subi	r24, 0xA1	; 161
    71d8:	98 47       	sbci	r25, 0x78	; 120
    71da:	09 f4       	brne	.+2      	; 0x71de <str_uni_strip+0x6a>
    71dc:	fb c0       	rjmp	.+502    	; 0x73d4 <str_uni_strip+0x260>
    71de:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    71e2:	ea 85       	ldd	r30, Y+10	; 0x0a
    71e4:	fb 85       	ldd	r31, Y+11	; 0x0b
    71e6:	e2 80       	ldd	r14, Z+2	; 0x02
    71e8:	f3 80       	ldd	r15, Z+3	; 0x03
    71ea:	c7 01       	movw	r24, r14
    71ec:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    71f0:	9f 87       	std	Y+15, r25	; 0x0f
    71f2:	8e 87       	std	Y+14, r24	; 0x0e
    71f4:	8c 15       	cp	r24, r12
    71f6:	9d 05       	cpc	r25, r13
    71f8:	21 f0       	breq	.+8      	; 0x7202 <str_uni_strip+0x8e>
    71fa:	81 e7       	ldi	r24, 0x71	; 113
    71fc:	94 e0       	ldi	r25, 0x04	; 4
    71fe:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    7202:	c7 01       	movw	r24, r14
    7204:	87 70       	andi	r24, 0x07	; 7
    7206:	99 27       	eor	r25, r25
    7208:	02 97       	sbiw	r24, 0x02	; 2
    720a:	71 f4       	brne	.+28     	; 0x7228 <str_uni_strip+0xb4>
    720c:	be 01       	movw	r22, r28
    720e:	6d 5f       	subi	r22, 0xFD	; 253
    7210:	7f 4f       	sbci	r23, 0xFF	; 255
    7212:	c7 01       	movw	r24, r14
    7214:	96 95       	lsr	r25
    7216:	87 95       	ror	r24
    7218:	96 95       	lsr	r25
    721a:	87 95       	ror	r24
    721c:	96 95       	lsr	r25
    721e:	87 95       	ror	r24
    7220:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    7224:	4c 01       	movw	r8, r24
    7226:	0b c0       	rjmp	.+22     	; 0x723e <str_uni_strip+0xca>
    7228:	d7 01       	movw	r26, r14
    722a:	14 96       	adiw	r26, 0x04	; 4
    722c:	8d 91       	ld	r24, X+
    722e:	9c 91       	ld	r25, X
    7230:	15 97       	sbiw	r26, 0x05	; 5
    7232:	9c 83       	std	Y+4, r25	; 0x04
    7234:	8b 83       	std	Y+3, r24	; 0x03
    7236:	16 96       	adiw	r26, 0x06	; 6
    7238:	8d 90       	ld	r8, X+
    723a:	9c 90       	ld	r9, X
    723c:	17 97       	sbiw	r26, 0x07	; 7
    723e:	4b 80       	ldd	r4, Y+3	; 0x03
    7240:	5c 80       	ldd	r5, Y+4	; 0x04
    7242:	ea 85       	ldd	r30, Y+10	; 0x0a
    7244:	fb 85       	ldd	r31, Y+11	; 0x0b
    7246:	e0 80       	ld	r14, Z
    7248:	f1 80       	ldd	r15, Z+1	; 0x01
    724a:	c7 01       	movw	r24, r14
    724c:	87 70       	andi	r24, 0x07	; 7
    724e:	99 27       	eor	r25, r25
    7250:	02 97       	sbiw	r24, 0x02	; 2
    7252:	49 f5       	brne	.+82     	; 0x72a6 <str_uni_strip+0x132>
    7254:	0d c0       	rjmp	.+26     	; 0x7270 <str_uni_strip+0xfc>
    7256:	df 86       	std	Y+15, r13	; 0x0f
    7258:	ce 86       	std	Y+14, r12	; 0x0e
    725a:	0f 2e       	mov	r0, r31
    725c:	f6 e0       	ldi	r31, 0x06	; 6
    725e:	4f 2e       	mov	r4, r31
    7260:	51 2c       	mov	r5, r1
    7262:	f0 2d       	mov	r31, r0
    7264:	0f 2e       	mov	r0, r31
    7266:	f0 e7       	ldi	r31, 0x70	; 112
    7268:	8f 2e       	mov	r8, r31
    726a:	f7 e1       	ldi	r31, 0x17	; 23
    726c:	9f 2e       	mov	r9, r31
    726e:	f0 2d       	mov	r31, r0
    7270:	be 01       	movw	r22, r28
    7272:	6f 5f       	subi	r22, 0xFF	; 255
    7274:	7f 4f       	sbci	r23, 0xFF	; 255
    7276:	c7 01       	movw	r24, r14
    7278:	96 95       	lsr	r25
    727a:	87 95       	ror	r24
    727c:	96 95       	lsr	r25
    727e:	87 95       	ror	r24
    7280:	96 95       	lsr	r25
    7282:	87 95       	ror	r24
    7284:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    7288:	5c 01       	movw	r10, r24
    728a:	18 c0       	rjmp	.+48     	; 0x72bc <str_uni_strip+0x148>
    728c:	df 86       	std	Y+15, r13	; 0x0f
    728e:	ce 86       	std	Y+14, r12	; 0x0e
    7290:	0f 2e       	mov	r0, r31
    7292:	f6 e0       	ldi	r31, 0x06	; 6
    7294:	4f 2e       	mov	r4, r31
    7296:	51 2c       	mov	r5, r1
    7298:	f0 2d       	mov	r31, r0
    729a:	0f 2e       	mov	r0, r31
    729c:	f0 e7       	ldi	r31, 0x70	; 112
    729e:	8f 2e       	mov	r8, r31
    72a0:	f7 e1       	ldi	r31, 0x17	; 23
    72a2:	9f 2e       	mov	r9, r31
    72a4:	f0 2d       	mov	r31, r0
    72a6:	d7 01       	movw	r26, r14
    72a8:	14 96       	adiw	r26, 0x04	; 4
    72aa:	8d 91       	ld	r24, X+
    72ac:	9c 91       	ld	r25, X
    72ae:	15 97       	sbiw	r26, 0x05	; 5
    72b0:	9a 83       	std	Y+2, r25	; 0x02
    72b2:	89 83       	std	Y+1, r24	; 0x01
    72b4:	16 96       	adiw	r26, 0x06	; 6
    72b6:	ad 90       	ld	r10, X+
    72b8:	bc 90       	ld	r11, X
    72ba:	17 97       	sbiw	r26, 0x07	; 7
    72bc:	b1 e0       	ldi	r27, 0x01	; 1
    72be:	2b 16       	cp	r2, r27
    72c0:	31 04       	cpc	r3, r1
    72c2:	49 f4       	brne	.+18     	; 0x72d6 <str_uni_strip+0x162>
    72c4:	e9 80       	ldd	r14, Y+1	; 0x01
    72c6:	fa 80       	ldd	r15, Y+2	; 0x02
    72c8:	e1 e0       	ldi	r30, 0x01	; 1
    72ca:	ee 1a       	sub	r14, r30
    72cc:	f1 08       	sbc	r15, r1
    72ce:	66 24       	eor	r6, r6
    72d0:	6a 94       	dec	r6
    72d2:	76 2c       	mov	r7, r6
    72d4:	05 c0       	rjmp	.+10     	; 0x72e0 <str_uni_strip+0x16c>
    72d6:	66 24       	eor	r6, r6
    72d8:	63 94       	inc	r6
    72da:	71 2c       	mov	r7, r1
    72dc:	e1 2c       	mov	r14, r1
    72de:	f1 2c       	mov	r15, r1
    72e0:	29 81       	ldd	r18, Y+1	; 0x01
    72e2:	3a 81       	ldd	r19, Y+2	; 0x02
    72e4:	3d 87       	std	Y+13, r19	; 0x0d
    72e6:	2c 87       	std	Y+12, r18	; 0x0c
    72e8:	21 15       	cp	r18, r1
    72ea:	31 05       	cpc	r19, r1
    72ec:	c1 f1       	breq	.+112    	; 0x735e <str_uni_strip+0x1ea>
    72ee:	69 01       	movw	r12, r18
    72f0:	1f 82       	std	Y+7, r1	; 0x07
    72f2:	1e 82       	std	Y+6, r1	; 0x06
    72f4:	1d 82       	std	Y+5, r1	; 0x05
    72f6:	19 86       	std	Y+9, r1	; 0x09
    72f8:	18 86       	std	Y+8, r1	; 0x08
    72fa:	01 e0       	ldi	r16, 0x01	; 1
    72fc:	10 e0       	ldi	r17, 0x00	; 0
    72fe:	21 e0       	ldi	r18, 0x01	; 1
    7300:	30 e0       	ldi	r19, 0x00	; 0
    7302:	a5 01       	movw	r20, r10
    7304:	4e 0d       	add	r20, r14
    7306:	5f 1d       	adc	r21, r15
    7308:	b2 01       	movw	r22, r4
    730a:	c4 01       	movw	r24, r8
    730c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <find_subbytes>
    7310:	89 2b       	or	r24, r25
    7312:	e1 f4       	brne	.+56     	; 0x734c <str_uni_strip+0x1d8>
    7314:	3d 81       	ldd	r19, Y+5	; 0x05
    7316:	31 11       	cpse	r19, r1
    7318:	17 c0       	rjmp	.+46     	; 0x7348 <str_uni_strip+0x1d4>
    731a:	21 14       	cp	r2, r1
    731c:	31 04       	cpc	r3, r1
    731e:	41 f4       	brne	.+16     	; 0x7330 <str_uni_strip+0x1bc>
    7320:	8c 85       	ldd	r24, Y+12	; 0x0c
    7322:	9d 85       	ldd	r25, Y+13	; 0x0d
    7324:	01 97       	sbiw	r24, 0x01	; 1
    7326:	9f 83       	std	Y+7, r25	; 0x07
    7328:	8e 83       	std	Y+6, r24	; 0x06
    732a:	f9 86       	std	Y+9, r15	; 0x09
    732c:	e8 86       	std	Y+8, r14	; 0x08
    732e:	1f c0       	rjmp	.+62     	; 0x736e <str_uni_strip+0x1fa>
    7330:	91 e0       	ldi	r25, 0x01	; 1
    7332:	29 16       	cp	r2, r25
    7334:	31 04       	cpc	r3, r1
    7336:	09 f4       	brne	.+2      	; 0x733a <str_uni_strip+0x1c6>
    7338:	56 c0       	rjmp	.+172    	; 0x73e6 <str_uni_strip+0x272>
    733a:	ff 82       	std	Y+7, r15	; 0x07
    733c:	ee 82       	std	Y+6, r14	; 0x06
    733e:	f9 86       	std	Y+9, r15	; 0x09
    7340:	e8 86       	std	Y+8, r14	; 0x08
    7342:	a1 e0       	ldi	r26, 0x01	; 1
    7344:	ad 83       	std	Y+5, r26	; 0x05
    7346:	02 c0       	rjmp	.+4      	; 0x734c <str_uni_strip+0x1d8>
    7348:	ff 82       	std	Y+7, r15	; 0x07
    734a:	ee 82       	std	Y+6, r14	; 0x06
    734c:	e6 0c       	add	r14, r6
    734e:	f7 1c       	adc	r15, r7
    7350:	b1 e0       	ldi	r27, 0x01	; 1
    7352:	cb 1a       	sub	r12, r27
    7354:	d1 08       	sbc	r13, r1
    7356:	89 f6       	brne	.-94     	; 0x72fa <str_uni_strip+0x186>
    7358:	ed 81       	ldd	r30, Y+5	; 0x05
    735a:	e1 11       	cpse	r30, r1
    735c:	08 c0       	rjmp	.+16     	; 0x736e <str_uni_strip+0x1fa>
    735e:	2e 85       	ldd	r18, Y+14	; 0x0e
    7360:	3f 85       	ldd	r19, Y+15	; 0x0f
    7362:	22 51       	subi	r18, 0x12	; 18
    7364:	3b 41       	sbci	r19, 0x1B	; 27
    7366:	51 f1       	breq	.+84     	; 0x73bc <str_uni_strip+0x248>
    7368:	8a ee       	ldi	r24, 0xEA	; 234
    736a:	9a e1       	ldi	r25, 0x1A	; 26
    736c:	47 c0       	rjmp	.+142    	; 0x73fc <str_uni_strip+0x288>
    736e:	a8 85       	ldd	r26, Y+8	; 0x08
    7370:	b9 85       	ldd	r27, Y+9	; 0x09
    7372:	ee 81       	ldd	r30, Y+6	; 0x06
    7374:	ff 81       	ldd	r31, Y+7	; 0x07
    7376:	ea 17       	cp	r30, r26
    7378:	fb 07       	cpc	r31, r27
    737a:	10 f4       	brcc	.+4      	; 0x7380 <str_uni_strip+0x20c>
    737c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    7380:	4e 81       	ldd	r20, Y+6	; 0x06
    7382:	5f 81       	ldd	r21, Y+7	; 0x07
    7384:	4f 5f       	subi	r20, 0xFF	; 255
    7386:	5f 4f       	sbci	r21, 0xFF	; 255
    7388:	28 85       	ldd	r18, Y+8	; 0x08
    738a:	39 85       	ldd	r19, Y+9	; 0x09
    738c:	42 1b       	sub	r20, r18
    738e:	53 0b       	sbc	r21, r19
    7390:	8c 85       	ldd	r24, Y+12	; 0x0c
    7392:	9d 85       	ldd	r25, Y+13	; 0x0d
    7394:	84 17       	cp	r24, r20
    7396:	95 07       	cpc	r25, r21
    7398:	49 f4       	brne	.+18     	; 0x73ac <str_uni_strip+0x238>
    739a:	23 2b       	or	r18, r19
    739c:	11 f0       	breq	.+4      	; 0x73a2 <str_uni_strip+0x22e>
    739e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    73a2:	aa 85       	ldd	r26, Y+10	; 0x0a
    73a4:	bb 85       	ldd	r27, Y+11	; 0x0b
    73a6:	8d 91       	ld	r24, X+
    73a8:	9c 91       	ld	r25, X
    73aa:	28 c0       	rjmp	.+80     	; 0x73fc <str_uni_strip+0x288>
    73ac:	68 85       	ldd	r22, Y+8	; 0x08
    73ae:	79 85       	ldd	r23, Y+9	; 0x09
    73b0:	6a 0d       	add	r22, r10
    73b2:	7b 1d       	adc	r23, r11
    73b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    73b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    73b8:	d1 de       	rcall	.-606    	; 0x715c <mp_obj_new_str_of_type>
    73ba:	20 c0       	rjmp	.+64     	; 0x73fc <str_uni_strip+0x288>
    73bc:	8a e0       	ldi	r24, 0x0A	; 10
    73be:	90 e0       	ldi	r25, 0x00	; 0
    73c0:	1d c0       	rjmp	.+58     	; 0x73fc <str_uni_strip+0x288>
    73c2:	c7 01       	movw	r24, r14
    73c4:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    73c8:	6c 01       	movw	r12, r24
    73ca:	aa 94       	dec	r10
    73cc:	ab 28       	or	r10, r11
    73ce:	09 f0       	breq	.+2      	; 0x73d2 <str_uni_strip+0x25e>
    73d0:	08 cf       	rjmp	.-496    	; 0x71e2 <str_uni_strip+0x6e>
    73d2:	41 cf       	rjmp	.-382    	; 0x7256 <str_uni_strip+0xe2>
    73d4:	c7 01       	movw	r24, r14
    73d6:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    73da:	6c 01       	movw	r12, r24
    73dc:	aa 94       	dec	r10
    73de:	ab 28       	or	r10, r11
    73e0:	09 f0       	breq	.+2      	; 0x73e4 <str_uni_strip+0x270>
    73e2:	ff ce       	rjmp	.-514    	; 0x71e2 <str_uni_strip+0x6e>
    73e4:	53 cf       	rjmp	.-346    	; 0x728c <str_uni_strip+0x118>
    73e6:	a7 01       	movw	r20, r14
    73e8:	4f 5f       	subi	r20, 0xFF	; 255
    73ea:	5f 4f       	sbci	r21, 0xFF	; 255
    73ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    73ee:	3d 85       	ldd	r19, Y+13	; 0x0d
    73f0:	24 17       	cp	r18, r20
    73f2:	35 07       	cpc	r19, r21
    73f4:	b1 f2       	breq	.-84     	; 0x73a2 <str_uni_strip+0x22e>
    73f6:	19 86       	std	Y+9, r1	; 0x09
    73f8:	18 86       	std	Y+8, r1	; 0x08
    73fa:	d8 cf       	rjmp	.-80     	; 0x73ac <str_uni_strip+0x238>
    73fc:	2f 96       	adiw	r28, 0x0f	; 15
    73fe:	0f b6       	in	r0, 0x3f	; 63
    7400:	f8 94       	cli
    7402:	de bf       	out	0x3e, r29	; 62
    7404:	0f be       	out	0x3f, r0	; 63
    7406:	cd bf       	out	0x3d, r28	; 61
    7408:	df 91       	pop	r29
    740a:	cf 91       	pop	r28
    740c:	1f 91       	pop	r17
    740e:	0f 91       	pop	r16
    7410:	ff 90       	pop	r15
    7412:	ef 90       	pop	r14
    7414:	df 90       	pop	r13
    7416:	cf 90       	pop	r12
    7418:	bf 90       	pop	r11
    741a:	af 90       	pop	r10
    741c:	9f 90       	pop	r9
    741e:	8f 90       	pop	r8
    7420:	7f 90       	pop	r7
    7422:	6f 90       	pop	r6
    7424:	5f 90       	pop	r5
    7426:	4f 90       	pop	r4
    7428:	3f 90       	pop	r3
    742a:	2f 90       	pop	r2
    742c:	08 95       	ret

0000742e <str_strip>:
    742e:	ab 01       	movw	r20, r22
    7430:	bc 01       	movw	r22, r24
    7432:	82 e0       	ldi	r24, 0x02	; 2
    7434:	90 e0       	ldi	r25, 0x00	; 0
    7436:	9e ce       	rjmp	.-708    	; 0x7174 <str_uni_strip>
    7438:	08 95       	ret

0000743a <str_lstrip>:
    743a:	ab 01       	movw	r20, r22
    743c:	bc 01       	movw	r22, r24
    743e:	80 e0       	ldi	r24, 0x00	; 0
    7440:	90 e0       	ldi	r25, 0x00	; 0
    7442:	98 ce       	rjmp	.-720    	; 0x7174 <str_uni_strip>
    7444:	08 95       	ret

00007446 <str_rstrip>:
    7446:	ab 01       	movw	r20, r22
    7448:	bc 01       	movw	r22, r24
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	90 e0       	ldi	r25, 0x00	; 0
    744e:	92 ce       	rjmp	.-732    	; 0x7174 <str_uni_strip>
    7450:	08 95       	ret

00007452 <mp_obj_new_tuple>:
    7452:	ef 92       	push	r14
    7454:	ff 92       	push	r15
    7456:	0f 93       	push	r16
    7458:	1f 93       	push	r17
    745a:	cf 93       	push	r28
    745c:	df 93       	push	r29
    745e:	00 97       	sbiw	r24, 0x00	; 0
    7460:	11 f1       	breq	.+68     	; 0x74a6 <mp_obj_new_tuple+0x54>
    7462:	8b 01       	movw	r16, r22
    7464:	7c 01       	movw	r14, r24
    7466:	ec 01       	movw	r28, r24
    7468:	22 96       	adiw	r28, 0x02	; 2
    746a:	cc 0f       	add	r28, r28
    746c:	dd 1f       	adc	r29, r29
    746e:	ce 01       	movw	r24, r28
    7470:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    7474:	2e ea       	ldi	r18, 0xAE	; 174
    7476:	3a e1       	ldi	r19, 0x1A	; 26
    7478:	fc 01       	movw	r30, r24
    747a:	31 83       	std	Z+1, r19	; 0x01
    747c:	20 83       	st	Z, r18
    747e:	f3 82       	std	Z+3, r15	; 0x03
    7480:	e2 82       	std	Z+2, r14	; 0x02
    7482:	01 15       	cp	r16, r1
    7484:	11 05       	cpc	r17, r1
    7486:	89 f0       	breq	.+34     	; 0x74aa <mp_obj_new_tuple+0x58>
    7488:	f8 01       	movw	r30, r16
    748a:	dc 01       	movw	r26, r24
    748c:	14 96       	adiw	r26, 0x04	; 4
    748e:	24 97       	sbiw	r28, 0x04	; 4
    7490:	b8 01       	movw	r22, r16
    7492:	6c 0f       	add	r22, r28
    7494:	7d 1f       	adc	r23, r29
    7496:	21 91       	ld	r18, Z+
    7498:	31 91       	ld	r19, Z+
    749a:	2d 93       	st	X+, r18
    749c:	3d 93       	st	X+, r19
    749e:	e6 17       	cp	r30, r22
    74a0:	f7 07       	cpc	r31, r23
    74a2:	c9 f7       	brne	.-14     	; 0x7496 <mp_obj_new_tuple+0x44>
    74a4:	02 c0       	rjmp	.+4      	; 0x74aa <mp_obj_new_tuple+0x58>
    74a6:	8a ea       	ldi	r24, 0xAA	; 170
    74a8:	9a e1       	ldi	r25, 0x1A	; 26
    74aa:	df 91       	pop	r29
    74ac:	cf 91       	pop	r28
    74ae:	1f 91       	pop	r17
    74b0:	0f 91       	pop	r16
    74b2:	ff 90       	pop	r15
    74b4:	ef 90       	pop	r14
    74b6:	08 95       	ret

000074b8 <dict_view_it_iternext>:
    74b8:	0f 93       	push	r16
    74ba:	1f 93       	push	r17
    74bc:	cf 93       	push	r28
    74be:	df 93       	push	r29
    74c0:	00 d0       	rcall	.+0      	; 0x74c2 <dict_view_it_iternext+0xa>
    74c2:	00 d0       	rcall	.+0      	; 0x74c4 <dict_view_it_iternext+0xc>
    74c4:	cd b7       	in	r28, 0x3d	; 61
    74c6:	de b7       	in	r29, 0x3e	; 62
    74c8:	8c 01       	movw	r16, r24
    74ca:	83 70       	andi	r24, 0x03	; 3
    74cc:	99 27       	eor	r25, r25
    74ce:	89 2b       	or	r24, r25
    74d0:	31 f4       	brne	.+12     	; 0x74de <dict_view_it_iternext+0x26>
    74d2:	f8 01       	movw	r30, r16
    74d4:	80 81       	ld	r24, Z
    74d6:	91 81       	ldd	r25, Z+1	; 0x01
    74d8:	86 5e       	subi	r24, 0xE6	; 230
    74da:	92 42       	sbci	r25, 0x22	; 34
    74dc:	11 f0       	breq	.+4      	; 0x74e2 <dict_view_it_iternext+0x2a>
    74de:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    74e2:	b8 01       	movw	r22, r16
    74e4:	6b 5f       	subi	r22, 0xFB	; 251
    74e6:	7f 4f       	sbci	r23, 0xFF	; 255
    74e8:	f8 01       	movw	r30, r16
    74ea:	83 81       	ldd	r24, Z+3	; 0x03
    74ec:	94 81       	ldd	r25, Z+4	; 0x04
    74ee:	0e 94 ba 04 	call	0x974	; 0x974 <dict_iter_next>
    74f2:	00 97       	sbiw	r24, 0x00	; 0
    74f4:	f1 f0       	breq	.+60     	; 0x7532 <dict_view_it_iternext+0x7a>
    74f6:	f8 01       	movw	r30, r16
    74f8:	22 81       	ldd	r18, Z+2	; 0x02
    74fa:	21 30       	cpi	r18, 0x01	; 1
    74fc:	91 f0       	breq	.+36     	; 0x7522 <dict_view_it_iternext+0x6a>
    74fe:	22 30       	cpi	r18, 0x02	; 2
    7500:	a1 f0       	breq	.+40     	; 0x752a <dict_view_it_iternext+0x72>
    7502:	fc 01       	movw	r30, r24
    7504:	20 81       	ld	r18, Z
    7506:	31 81       	ldd	r19, Z+1	; 0x01
    7508:	3a 83       	std	Y+2, r19	; 0x02
    750a:	29 83       	std	Y+1, r18	; 0x01
    750c:	82 81       	ldd	r24, Z+2	; 0x02
    750e:	93 81       	ldd	r25, Z+3	; 0x03
    7510:	9c 83       	std	Y+4, r25	; 0x04
    7512:	8b 83       	std	Y+3, r24	; 0x03
    7514:	be 01       	movw	r22, r28
    7516:	6f 5f       	subi	r22, 0xFF	; 255
    7518:	7f 4f       	sbci	r23, 0xFF	; 255
    751a:	82 e0       	ldi	r24, 0x02	; 2
    751c:	90 e0       	ldi	r25, 0x00	; 0
    751e:	99 df       	rcall	.-206    	; 0x7452 <mp_obj_new_tuple>
    7520:	0a c0       	rjmp	.+20     	; 0x7536 <dict_view_it_iternext+0x7e>
    7522:	fc 01       	movw	r30, r24
    7524:	80 81       	ld	r24, Z
    7526:	91 81       	ldd	r25, Z+1	; 0x01
    7528:	06 c0       	rjmp	.+12     	; 0x7536 <dict_view_it_iternext+0x7e>
    752a:	fc 01       	movw	r30, r24
    752c:	82 81       	ldd	r24, Z+2	; 0x02
    752e:	93 81       	ldd	r25, Z+3	; 0x03
    7530:	02 c0       	rjmp	.+4      	; 0x7536 <dict_view_it_iternext+0x7e>
    7532:	80 e0       	ldi	r24, 0x00	; 0
    7534:	90 e0       	ldi	r25, 0x00	; 0
    7536:	0f 90       	pop	r0
    7538:	0f 90       	pop	r0
    753a:	0f 90       	pop	r0
    753c:	0f 90       	pop	r0
    753e:	df 91       	pop	r29
    7540:	cf 91       	pop	r28
    7542:	1f 91       	pop	r17
    7544:	0f 91       	pop	r16
    7546:	08 95       	ret

00007548 <dict_view_print>:
    7548:	af 92       	push	r10
    754a:	bf 92       	push	r11
    754c:	cf 92       	push	r12
    754e:	df 92       	push	r13
    7550:	ef 92       	push	r14
    7552:	ff 92       	push	r15
    7554:	0f 93       	push	r16
    7556:	1f 93       	push	r17
    7558:	cf 93       	push	r28
    755a:	df 93       	push	r29
    755c:	cd b7       	in	r28, 0x3d	; 61
    755e:	de b7       	in	r29, 0x3e	; 62
    7560:	28 97       	sbiw	r28, 0x08	; 8
    7562:	0f b6       	in	r0, 0x3f	; 63
    7564:	f8 94       	cli
    7566:	de bf       	out	0x3e, r29	; 62
    7568:	0f be       	out	0x3f, r0	; 63
    756a:	cd bf       	out	0x3d, r28	; 61
    756c:	6c 01       	movw	r12, r24
    756e:	8b 01       	movw	r16, r22
    7570:	cb 01       	movw	r24, r22
    7572:	83 70       	andi	r24, 0x03	; 3
    7574:	99 27       	eor	r25, r25
    7576:	89 2b       	or	r24, r25
    7578:	31 f4       	brne	.+12     	; 0x7586 <dict_view_print+0x3e>
    757a:	db 01       	movw	r26, r22
    757c:	8d 91       	ld	r24, X+
    757e:	9c 91       	ld	r25, X
    7580:	86 50       	subi	r24, 0x06	; 6
    7582:	93 42       	sbci	r25, 0x23	; 35
    7584:	11 f0       	breq	.+4      	; 0x758a <dict_view_print+0x42>
    7586:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    758a:	db 01       	movw	r26, r22
    758c:	14 96       	adiw	r26, 0x04	; 4
    758e:	ec 91       	ld	r30, X
    7590:	f0 e0       	ldi	r31, 0x00	; 0
    7592:	ee 0f       	add	r30, r30
    7594:	ff 1f       	adc	r31, r31
    7596:	e0 52       	subi	r30, 0x20	; 32
    7598:	fd 4d       	sbci	r31, 0xDD	; 221
    759a:	60 81       	ld	r22, Z
    759c:	71 81       	ldd	r23, Z+1	; 0x01
    759e:	c6 01       	movw	r24, r12
    75a0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    75a4:	6a e9       	ldi	r22, 0x9A	; 154
    75a6:	76 e0       	ldi	r23, 0x06	; 6
    75a8:	c6 01       	movw	r24, r12
    75aa:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    75ae:	be 01       	movw	r22, r28
    75b0:	6f 5f       	subi	r22, 0xFF	; 255
    75b2:	7f 4f       	sbci	r23, 0xFF	; 255
    75b4:	c8 01       	movw	r24, r16
    75b6:	0e 94 11 05 	call	0xa22	; 0xa22 <dict_view_getiter>
    75ba:	5c 01       	movw	r10, r24
    75bc:	ff 24       	eor	r15, r15
    75be:	f3 94       	inc	r15
    75c0:	e1 2c       	mov	r14, r1
    75c2:	0d c0       	rjmp	.+26     	; 0x75de <dict_view_print+0x96>
    75c4:	f1 10       	cpse	r15, r1
    75c6:	05 c0       	rjmp	.+10     	; 0x75d2 <dict_view_print+0x8a>
    75c8:	6c e0       	ldi	r22, 0x0C	; 12
    75ca:	72 e0       	ldi	r23, 0x02	; 2
    75cc:	c6 01       	movw	r24, r12
    75ce:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    75d2:	41 e0       	ldi	r20, 0x01	; 1
    75d4:	b8 01       	movw	r22, r16
    75d6:	c6 01       	movw	r24, r12
    75d8:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    75dc:	fe 2c       	mov	r15, r14
    75de:	c5 01       	movw	r24, r10
    75e0:	6b df       	rcall	.-298    	; 0x74b8 <dict_view_it_iternext>
    75e2:	8c 01       	movw	r16, r24
    75e4:	89 2b       	or	r24, r25
    75e6:	71 f7       	brne	.-36     	; 0x75c4 <dict_view_print+0x7c>
    75e8:	6d e9       	ldi	r22, 0x9D	; 157
    75ea:	76 e0       	ldi	r23, 0x06	; 6
    75ec:	c6 01       	movw	r24, r12
    75ee:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    75f2:	28 96       	adiw	r28, 0x08	; 8
    75f4:	0f b6       	in	r0, 0x3f	; 63
    75f6:	f8 94       	cli
    75f8:	de bf       	out	0x3e, r29	; 62
    75fa:	0f be       	out	0x3f, r0	; 63
    75fc:	cd bf       	out	0x3d, r28	; 61
    75fe:	df 91       	pop	r29
    7600:	cf 91       	pop	r28
    7602:	1f 91       	pop	r17
    7604:	0f 91       	pop	r16
    7606:	ff 90       	pop	r15
    7608:	ef 90       	pop	r14
    760a:	df 90       	pop	r13
    760c:	cf 90       	pop	r12
    760e:	bf 90       	pop	r11
    7610:	af 90       	pop	r10
    7612:	08 95       	ret

00007614 <dict_popitem>:
    7614:	0f 93       	push	r16
    7616:	1f 93       	push	r17
    7618:	cf 93       	push	r28
    761a:	df 93       	push	r29
    761c:	00 d0       	rcall	.+0      	; 0x761e <dict_popitem+0xa>
    761e:	00 d0       	rcall	.+0      	; 0x7620 <dict_popitem+0xc>
    7620:	00 d0       	rcall	.+0      	; 0x7622 <dict_popitem+0xe>
    7622:	cd b7       	in	r28, 0x3d	; 61
    7624:	de b7       	in	r29, 0x3e	; 62
    7626:	8c 01       	movw	r16, r24
    7628:	83 70       	andi	r24, 0x03	; 3
    762a:	99 27       	eor	r25, r25
    762c:	89 2b       	or	r24, r25
    762e:	41 f4       	brne	.+16     	; 0x7640 <dict_popitem+0x2c>
    7630:	d8 01       	movw	r26, r16
    7632:	ed 91       	ld	r30, X+
    7634:	fc 91       	ld	r31, X
    7636:	80 85       	ldd	r24, Z+8	; 0x08
    7638:	91 85       	ldd	r25, Z+9	; 0x09
    763a:	8a 5a       	subi	r24, 0xAA	; 170
    763c:	99 48       	sbci	r25, 0x89	; 137
    763e:	11 f0       	breq	.+4      	; 0x7644 <dict_popitem+0x30>
    7640:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    7644:	c8 01       	movw	r24, r16
    7646:	0e 94 79 29 	call	0x52f2	; 0x52f2 <mp_ensure_not_fixed>
    764a:	f8 01       	movw	r30, r16
    764c:	22 81       	ldd	r18, Z+2	; 0x02
    764e:	26 95       	lsr	r18
    7650:	26 95       	lsr	r18
    7652:	26 95       	lsr	r18
    7654:	33 81       	ldd	r19, Z+3	; 0x03
    7656:	43 2f       	mov	r20, r19
    7658:	42 95       	swap	r20
    765a:	44 0f       	add	r20, r20
    765c:	40 7e       	andi	r20, 0xE0	; 224
    765e:	84 2f       	mov	r24, r20
    7660:	82 2b       	or	r24, r18
    7662:	93 2f       	mov	r25, r19
    7664:	96 95       	lsr	r25
    7666:	96 95       	lsr	r25
    7668:	96 95       	lsr	r25
    766a:	89 2b       	or	r24, r25
    766c:	31 f4       	brne	.+12     	; 0x767a <dict_popitem+0x66>
    766e:	60 ea       	ldi	r22, 0xA0	; 160
    7670:	76 e0       	ldi	r23, 0x06	; 6
    7672:	88 e7       	ldi	r24, 0x78	; 120
    7674:	90 e2       	ldi	r25, 0x20	; 32
    7676:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    767a:	1a 82       	std	Y+2, r1	; 0x02
    767c:	19 82       	std	Y+1, r1	; 0x01
    767e:	be 01       	movw	r22, r28
    7680:	6f 5f       	subi	r22, 0xFF	; 255
    7682:	7f 4f       	sbci	r23, 0xFF	; 255
    7684:	c8 01       	movw	r24, r16
    7686:	0e 94 ba 04 	call	0x974	; 0x974 <dict_iter_next>
    768a:	fc 01       	movw	r30, r24
    768c:	89 2b       	or	r24, r25
    768e:	11 f4       	brne	.+4      	; 0x7694 <dict_popitem+0x80>
    7690:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    7694:	d8 01       	movw	r26, r16
    7696:	12 96       	adiw	r26, 0x02	; 2
    7698:	8c 91       	ld	r24, X
    769a:	12 97       	sbiw	r26, 0x02	; 2
    769c:	48 2f       	mov	r20, r24
    769e:	46 95       	lsr	r20
    76a0:	46 95       	lsr	r20
    76a2:	46 95       	lsr	r20
    76a4:	13 96       	adiw	r26, 0x03	; 3
    76a6:	9c 91       	ld	r25, X
    76a8:	13 97       	sbiw	r26, 0x03	; 3
    76aa:	59 2f       	mov	r21, r25
    76ac:	52 95       	swap	r21
    76ae:	55 0f       	add	r21, r21
    76b0:	50 7e       	andi	r21, 0xE0	; 224
    76b2:	25 2f       	mov	r18, r21
    76b4:	24 2b       	or	r18, r20
    76b6:	39 2f       	mov	r19, r25
    76b8:	36 95       	lsr	r19
    76ba:	36 95       	lsr	r19
    76bc:	36 95       	lsr	r19
    76be:	21 50       	subi	r18, 0x01	; 1
    76c0:	30 4e       	sbci	r19, 0xE0	; 224
    76c2:	3f 71       	andi	r19, 0x1F	; 31
    76c4:	92 2f       	mov	r25, r18
    76c6:	99 0f       	add	r25, r25
    76c8:	99 0f       	add	r25, r25
    76ca:	99 0f       	add	r25, r25
    76cc:	87 70       	andi	r24, 0x07	; 7
    76ce:	89 2b       	or	r24, r25
    76d0:	12 96       	adiw	r26, 0x02	; 2
    76d2:	8c 93       	st	X, r24
    76d4:	12 97       	sbiw	r26, 0x02	; 2
    76d6:	83 2f       	mov	r24, r19
    76d8:	88 0f       	add	r24, r24
    76da:	88 0f       	add	r24, r24
    76dc:	88 0f       	add	r24, r24
    76de:	22 95       	swap	r18
    76e0:	26 95       	lsr	r18
    76e2:	27 70       	andi	r18, 0x07	; 7
    76e4:	28 2b       	or	r18, r24
    76e6:	13 96       	adiw	r26, 0x03	; 3
    76e8:	2c 93       	st	X, r18
    76ea:	80 81       	ld	r24, Z
    76ec:	91 81       	ldd	r25, Z+1	; 0x01
    76ee:	9c 83       	std	Y+4, r25	; 0x04
    76f0:	8b 83       	std	Y+3, r24	; 0x03
    76f2:	82 81       	ldd	r24, Z+2	; 0x02
    76f4:	93 81       	ldd	r25, Z+3	; 0x03
    76f6:	9e 83       	std	Y+6, r25	; 0x06
    76f8:	8d 83       	std	Y+5, r24	; 0x05
    76fa:	84 e0       	ldi	r24, 0x04	; 4
    76fc:	90 e0       	ldi	r25, 0x00	; 0
    76fe:	91 83       	std	Z+1, r25	; 0x01
    7700:	80 83       	st	Z, r24
    7702:	13 82       	std	Z+3, r1	; 0x03
    7704:	12 82       	std	Z+2, r1	; 0x02
    7706:	be 01       	movw	r22, r28
    7708:	6d 5f       	subi	r22, 0xFD	; 253
    770a:	7f 4f       	sbci	r23, 0xFF	; 255
    770c:	82 e0       	ldi	r24, 0x02	; 2
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	a0 de       	rcall	.-704    	; 0x7452 <mp_obj_new_tuple>
    7712:	26 96       	adiw	r28, 0x06	; 6
    7714:	0f b6       	in	r0, 0x3f	; 63
    7716:	f8 94       	cli
    7718:	de bf       	out	0x3e, r29	; 62
    771a:	0f be       	out	0x3f, r0	; 63
    771c:	cd bf       	out	0x3d, r28	; 61
    771e:	df 91       	pop	r29
    7720:	cf 91       	pop	r28
    7722:	1f 91       	pop	r17
    7724:	0f 91       	pop	r16
    7726:	08 95       	ret

00007728 <static_class_method_make_new>:
    7728:	0f 93       	push	r16
    772a:	1f 93       	push	r17
    772c:	cf 93       	push	r28
    772e:	df 93       	push	r29
    7730:	ec 01       	movw	r28, r24
    7732:	cb 01       	movw	r24, r22
    7734:	ba 01       	movw	r22, r20
    7736:	89 01       	movw	r16, r18
    7738:	2a e1       	ldi	r18, 0x1A	; 26
    773a:	cb 30       	cpi	r28, 0x0B	; 11
    773c:	d2 07       	cpc	r29, r18
    773e:	31 f0       	breq	.+12     	; 0x774c <static_class_method_make_new+0x24>
    7740:	e9 e1       	ldi	r30, 0x19	; 25
    7742:	cb 3e       	cpi	r28, 0xEB	; 235
    7744:	de 07       	cpc	r29, r30
    7746:	11 f0       	breq	.+4      	; 0x774c <static_class_method_make_new+0x24>
    7748:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    774c:	22 e0       	ldi	r18, 0x02	; 2
    774e:	30 e0       	ldi	r19, 0x00	; 0
    7750:	a9 01       	movw	r20, r18
    7752:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    7756:	84 e0       	ldi	r24, 0x04	; 4
    7758:	90 e0       	ldi	r25, 0x00	; 0
    775a:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    775e:	f8 01       	movw	r30, r16
    7760:	20 81       	ld	r18, Z
    7762:	31 81       	ldd	r19, Z+1	; 0x01
    7764:	fc 01       	movw	r30, r24
    7766:	d1 83       	std	Z+1, r29	; 0x01
    7768:	c0 83       	st	Z, r28
    776a:	33 83       	std	Z+3, r19	; 0x03
    776c:	22 83       	std	Z+2, r18	; 0x02
    776e:	df 91       	pop	r29
    7770:	cf 91       	pop	r28
    7772:	1f 91       	pop	r17
    7774:	0f 91       	pop	r16
    7776:	08 95       	ret

00007778 <super_make_new>:
    7778:	0f 93       	push	r16
    777a:	1f 93       	push	r17
    777c:	cf 93       	push	r28
    777e:	df 93       	push	r29
    7780:	8c 01       	movw	r16, r24
    7782:	cb 01       	movw	r24, r22
    7784:	ba 01       	movw	r22, r20
    7786:	e9 01       	movw	r28, r18
    7788:	24 e0       	ldi	r18, 0x04	; 4
    778a:	30 e0       	ldi	r19, 0x00	; 0
    778c:	a9 01       	movw	r20, r18
    778e:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    7792:	e8 81       	ld	r30, Y
    7794:	f9 81       	ldd	r31, Y+1	; 0x01
    7796:	cf 01       	movw	r24, r30
    7798:	83 70       	andi	r24, 0x03	; 3
    779a:	99 27       	eor	r25, r25
    779c:	89 2b       	or	r24, r25
    779e:	29 f4       	brne	.+10     	; 0x77aa <super_make_new+0x32>
    77a0:	80 81       	ld	r24, Z
    77a2:	91 81       	ldd	r25, Z+1	; 0x01
    77a4:	83 55       	subi	r24, 0x53	; 83
    77a6:	9a 41       	sbci	r25, 0x1A	; 26
    77a8:	21 f0       	breq	.+8      	; 0x77b2 <super_make_new+0x3a>
    77aa:	80 e0       	ldi	r24, 0x00	; 0
    77ac:	90 e0       	ldi	r25, 0x00	; 0
    77ae:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    77b2:	86 e0       	ldi	r24, 0x06	; 6
    77b4:	90 e0       	ldi	r25, 0x00	; 0
    77b6:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    77ba:	48 81       	ld	r20, Y
    77bc:	59 81       	ldd	r21, Y+1	; 0x01
    77be:	2a 81       	ldd	r18, Y+2	; 0x02
    77c0:	3b 81       	ldd	r19, Y+3	; 0x03
    77c2:	fc 01       	movw	r30, r24
    77c4:	11 83       	std	Z+1, r17	; 0x01
    77c6:	00 83       	st	Z, r16
    77c8:	53 83       	std	Z+3, r21	; 0x03
    77ca:	42 83       	std	Z+2, r20	; 0x02
    77cc:	35 83       	std	Z+5, r19	; 0x05
    77ce:	24 83       	std	Z+4, r18	; 0x04
    77d0:	df 91       	pop	r29
    77d2:	cf 91       	pop	r28
    77d4:	1f 91       	pop	r17
    77d6:	0f 91       	pop	r16
    77d8:	08 95       	ret

000077da <mp_map_rehash>:
    77da:	8f 92       	push	r8
    77dc:	9f 92       	push	r9
    77de:	af 92       	push	r10
    77e0:	bf 92       	push	r11
    77e2:	cf 92       	push	r12
    77e4:	df 92       	push	r13
    77e6:	ef 92       	push	r14
    77e8:	ff 92       	push	r15
    77ea:	0f 93       	push	r16
    77ec:	1f 93       	push	r17
    77ee:	cf 93       	push	r28
    77f0:	df 93       	push	r29
    77f2:	8c 01       	movw	r16, r24
    77f4:	fc 01       	movw	r30, r24
    77f6:	e2 80       	ldd	r14, Z+2	; 0x02
    77f8:	f3 80       	ldd	r15, Z+3	; 0x03
    77fa:	c7 01       	movw	r24, r14
    77fc:	01 96       	adiw	r24, 0x01	; 1
    77fe:	99 f0       	breq	.+38     	; 0x7826 <mp_map_rehash+0x4c>
    7800:	e8 ed       	ldi	r30, 0xD8	; 216
    7802:	f3 e2       	ldi	r31, 0x23	; 35
    7804:	2a e1       	ldi	r18, 0x1A	; 26
    7806:	34 e2       	ldi	r19, 0x24	; 36
    7808:	c1 91       	ld	r28, Z+
    780a:	d1 91       	ld	r29, Z+
    780c:	c8 17       	cp	r28, r24
    780e:	d9 07       	cpc	r29, r25
    7810:	58 f4       	brcc	.+22     	; 0x7828 <mp_map_rehash+0x4e>
    7812:	e2 17       	cp	r30, r18
    7814:	f3 07       	cpc	r31, r19
    7816:	c1 f7       	brne	.-16     	; 0x7808 <mp_map_rehash+0x2e>
    7818:	ec 01       	movw	r28, r24
    781a:	d6 95       	lsr	r29
    781c:	c7 95       	ror	r28
    781e:	c8 0f       	add	r28, r24
    7820:	d9 1f       	adc	r29, r25
    7822:	c1 60       	ori	r28, 0x01	; 1
    7824:	01 c0       	rjmp	.+2      	; 0x7828 <mp_map_rehash+0x4e>
    7826:	ec 01       	movw	r28, r24
    7828:	f8 01       	movw	r30, r16
    782a:	84 80       	ldd	r8, Z+4	; 0x04
    782c:	95 80       	ldd	r9, Z+5	; 0x05
    782e:	ce 01       	movw	r24, r28
    7830:	88 0f       	add	r24, r24
    7832:	99 1f       	adc	r25, r25
    7834:	88 0f       	add	r24, r24
    7836:	99 1f       	adc	r25, r25
    7838:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    783c:	f8 01       	movw	r30, r16
    783e:	d3 83       	std	Z+3, r29	; 0x03
    7840:	c2 83       	std	Z+2, r28	; 0x02
    7842:	20 81       	ld	r18, Z
    7844:	11 82       	std	Z+1, r1	; 0x01
    7846:	27 70       	andi	r18, 0x07	; 7
    7848:	21 60       	ori	r18, 0x01	; 1
    784a:	20 83       	st	Z, r18
    784c:	95 83       	std	Z+5, r25	; 0x05
    784e:	84 83       	std	Z+4, r24	; 0x04
    7850:	e1 14       	cp	r14, r1
    7852:	f1 04       	cpc	r15, r1
    7854:	d9 f0       	breq	.+54     	; 0x788c <mp_map_rehash+0xb2>
    7856:	c8 2d       	mov	r28, r8
    7858:	d9 2d       	mov	r29, r9
    785a:	a1 2c       	mov	r10, r1
    785c:	b1 2c       	mov	r11, r1
    785e:	68 81       	ld	r22, Y
    7860:	79 81       	ldd	r23, Y+1	; 0x01
    7862:	61 15       	cp	r22, r1
    7864:	71 05       	cpc	r23, r1
    7866:	59 f0       	breq	.+22     	; 0x787e <mp_map_rehash+0xa4>
    7868:	64 30       	cpi	r22, 0x04	; 4
    786a:	71 05       	cpc	r23, r1
    786c:	41 f0       	breq	.+16     	; 0x787e <mp_map_rehash+0xa4>
    786e:	41 e0       	ldi	r20, 0x01	; 1
    7870:	c8 01       	movw	r24, r16
    7872:	1d d0       	rcall	.+58     	; 0x78ae <mp_map_lookup>
    7874:	2a 81       	ldd	r18, Y+2	; 0x02
    7876:	3b 81       	ldd	r19, Y+3	; 0x03
    7878:	fc 01       	movw	r30, r24
    787a:	33 83       	std	Z+3, r19	; 0x03
    787c:	22 83       	std	Z+2, r18	; 0x02
    787e:	ff ef       	ldi	r31, 0xFF	; 255
    7880:	af 1a       	sub	r10, r31
    7882:	bf 0a       	sbc	r11, r31
    7884:	24 96       	adiw	r28, 0x04	; 4
    7886:	ea 14       	cp	r14, r10
    7888:	fb 04       	cpc	r15, r11
    788a:	49 f7       	brne	.-46     	; 0x785e <mp_map_rehash+0x84>
    788c:	88 2d       	mov	r24, r8
    788e:	99 2d       	mov	r25, r9
    7890:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    7894:	df 91       	pop	r29
    7896:	cf 91       	pop	r28
    7898:	1f 91       	pop	r17
    789a:	0f 91       	pop	r16
    789c:	ff 90       	pop	r15
    789e:	ef 90       	pop	r14
    78a0:	df 90       	pop	r13
    78a2:	cf 90       	pop	r12
    78a4:	bf 90       	pop	r11
    78a6:	af 90       	pop	r10
    78a8:	9f 90       	pop	r9
    78aa:	8f 90       	pop	r8
    78ac:	08 95       	ret

000078ae <mp_map_lookup>:
    78ae:	2f 92       	push	r2
    78b0:	3f 92       	push	r3
    78b2:	4f 92       	push	r4
    78b4:	5f 92       	push	r5
    78b6:	6f 92       	push	r6
    78b8:	7f 92       	push	r7
    78ba:	8f 92       	push	r8
    78bc:	9f 92       	push	r9
    78be:	af 92       	push	r10
    78c0:	bf 92       	push	r11
    78c2:	cf 92       	push	r12
    78c4:	df 92       	push	r13
    78c6:	ef 92       	push	r14
    78c8:	ff 92       	push	r15
    78ca:	0f 93       	push	r16
    78cc:	1f 93       	push	r17
    78ce:	cf 93       	push	r28
    78d0:	df 93       	push	r29
    78d2:	7c 01       	movw	r14, r24
    78d4:	6b 01       	movw	r12, r22
    78d6:	24 2e       	mov	r2, r20
    78d8:	dc 01       	movw	r26, r24
    78da:	9c 91       	ld	r25, X
    78dc:	91 ff       	sbrs	r25, 1
    78de:	03 c0       	rjmp	.+6      	; 0x78e6 <mp_map_lookup+0x38>
    78e0:	41 11       	cpse	r20, r1
    78e2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    78e6:	f7 01       	movw	r30, r14
    78e8:	80 81       	ld	r24, Z
    78ea:	80 fb       	bst	r24, 0
    78ec:	33 24       	eor	r3, r3
    78ee:	30 f8       	bld	r3, 0
    78f0:	80 ff       	sbrs	r24, 0
    78f2:	16 c0       	rjmp	.+44     	; 0x7920 <mp_map_lookup+0x72>
    78f4:	96 01       	movw	r18, r12
    78f6:	27 70       	andi	r18, 0x07	; 7
    78f8:	33 27       	eor	r19, r19
    78fa:	22 30       	cpi	r18, 0x02	; 2
    78fc:	31 05       	cpc	r19, r1
    78fe:	81 f0       	breq	.+32     	; 0x7920 <mp_map_lookup+0x72>
    7900:	96 01       	movw	r18, r12
    7902:	23 70       	andi	r18, 0x03	; 3
    7904:	33 27       	eor	r19, r19
    7906:	23 2b       	or	r18, r19
    7908:	31 f4       	brne	.+12     	; 0x7916 <mp_map_lookup+0x68>
    790a:	d6 01       	movw	r26, r12
    790c:	2d 91       	ld	r18, X+
    790e:	3c 91       	ld	r19, X
    7910:	22 51       	subi	r18, 0x12	; 18
    7912:	3b 41       	sbci	r19, 0x1B	; 27
    7914:	21 f0       	breq	.+8      	; 0x791e <mp_map_lookup+0x70>
    7916:	e1 e0       	ldi	r30, 0x01	; 1
    7918:	2e 16       	cp	r2, r30
    791a:	11 f0       	breq	.+4      	; 0x7920 <mp_map_lookup+0x72>
    791c:	77 c1       	rjmp	.+750    	; 0x7c0c <mp_map_lookup+0x35e>
    791e:	31 2c       	mov	r3, r1
    7920:	92 ff       	sbrs	r25, 2
    7922:	39 c0       	rjmp	.+114    	; 0x7996 <mp_map_lookup+0xe8>
    7924:	d7 01       	movw	r26, r14
    7926:	14 96       	adiw	r26, 0x04	; 4
    7928:	cd 91       	ld	r28, X+
    792a:	dc 91       	ld	r29, X
    792c:	15 97       	sbiw	r26, 0x05	; 5
    792e:	8c 91       	ld	r24, X
    7930:	86 95       	lsr	r24
    7932:	86 95       	lsr	r24
    7934:	86 95       	lsr	r24
    7936:	11 96       	adiw	r26, 0x01	; 1
    7938:	9c 91       	ld	r25, X
    793a:	29 2f       	mov	r18, r25
    793c:	22 95       	swap	r18
    793e:	22 0f       	add	r18, r18
    7940:	20 7e       	andi	r18, 0xE0	; 224
    7942:	02 2f       	mov	r16, r18
    7944:	08 2b       	or	r16, r24
    7946:	19 2f       	mov	r17, r25
    7948:	16 95       	lsr	r17
    794a:	16 95       	lsr	r17
    794c:	16 95       	lsr	r17
    794e:	00 0f       	add	r16, r16
    7950:	11 1f       	adc	r17, r17
    7952:	00 0f       	add	r16, r16
    7954:	11 1f       	adc	r17, r17
    7956:	0c 0f       	add	r16, r28
    7958:	1d 1f       	adc	r17, r29
    795a:	c0 17       	cp	r28, r16
    795c:	d1 07       	cpc	r29, r17
    795e:	08 f0       	brcs	.+2      	; 0x7962 <mp_map_lookup+0xb4>
    7960:	58 c1       	rjmp	.+688    	; 0x7c12 <mp_map_lookup+0x364>
    7962:	88 81       	ld	r24, Y
    7964:	99 81       	ldd	r25, Y+1	; 0x01
    7966:	c8 16       	cp	r12, r24
    7968:	d9 06       	cpc	r13, r25
    796a:	39 f4       	brne	.+14     	; 0x797a <mp_map_lookup+0xcc>
    796c:	55 c1       	rjmp	.+682    	; 0x7c18 <mp_map_lookup+0x36a>
    796e:	88 81       	ld	r24, Y
    7970:	99 81       	ldd	r25, Y+1	; 0x01
    7972:	c8 16       	cp	r12, r24
    7974:	d9 06       	cpc	r13, r25
    7976:	09 f4       	brne	.+2      	; 0x797a <mp_map_lookup+0xcc>
    7978:	52 c1       	rjmp	.+676    	; 0x7c1e <mp_map_lookup+0x370>
    797a:	31 10       	cpse	r3, r1
    797c:	05 c0       	rjmp	.+10     	; 0x7988 <mp_map_lookup+0xda>
    797e:	b6 01       	movw	r22, r12
    7980:	0e 94 e6 20 	call	0x41cc	; 0x41cc <mp_obj_equal>
    7984:	81 11       	cpse	r24, r1
    7986:	4e c1       	rjmp	.+668    	; 0x7c24 <mp_map_lookup+0x376>
    7988:	24 96       	adiw	r28, 0x04	; 4
    798a:	c0 17       	cp	r28, r16
    798c:	d1 07       	cpc	r29, r17
    798e:	78 f3       	brcs	.-34     	; 0x796e <mp_map_lookup+0xc0>
    7990:	80 e0       	ldi	r24, 0x00	; 0
    7992:	90 e0       	ldi	r25, 0x00	; 0
    7994:	5b c1       	rjmp	.+694    	; 0x7c4c <mp_map_lookup+0x39e>
    7996:	f7 01       	movw	r30, r14
    7998:	82 81       	ldd	r24, Z+2	; 0x02
    799a:	93 81       	ldd	r25, Z+3	; 0x03
    799c:	89 2b       	or	r24, r25
    799e:	29 f4       	brne	.+10     	; 0x79aa <mp_map_lookup+0xfc>
    79a0:	f1 e0       	ldi	r31, 0x01	; 1
    79a2:	2f 12       	cpse	r2, r31
    79a4:	42 c1       	rjmp	.+644    	; 0x7c2a <mp_map_lookup+0x37c>
    79a6:	c7 01       	movw	r24, r14
    79a8:	18 df       	rcall	.-464    	; 0x77da <mp_map_rehash>
    79aa:	26 01       	movw	r4, r12
    79ac:	27 e0       	ldi	r18, 0x07	; 7
    79ae:	42 22       	and	r4, r18
    79b0:	55 24       	eor	r5, r5
    79b2:	82 e0       	ldi	r24, 0x02	; 2
    79b4:	48 16       	cp	r4, r24
    79b6:	51 04       	cpc	r5, r1
    79b8:	59 f4       	brne	.+22     	; 0x79d0 <mp_map_lookup+0x122>
    79ba:	c6 01       	movw	r24, r12
    79bc:	96 95       	lsr	r25
    79be:	87 95       	ror	r24
    79c0:	96 95       	lsr	r25
    79c2:	87 95       	ror	r24
    79c4:	96 95       	lsr	r25
    79c6:	87 95       	ror	r24
    79c8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <qstr_hash>
    79cc:	3c 01       	movw	r6, r24
    79ce:	07 c0       	rjmp	.+14     	; 0x79de <mp_map_lookup+0x130>
    79d0:	b6 01       	movw	r22, r12
    79d2:	86 e0       	ldi	r24, 0x06	; 6
    79d4:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <mp_unary_op>
    79d8:	3c 01       	movw	r6, r24
    79da:	75 94       	asr	r7
    79dc:	67 94       	ror	r6
    79de:	d7 01       	movw	r26, r14
    79e0:	12 96       	adiw	r26, 0x02	; 2
    79e2:	6d 91       	ld	r22, X+
    79e4:	7c 91       	ld	r23, X
    79e6:	13 97       	sbiw	r26, 0x03	; 3
    79e8:	c3 01       	movw	r24, r6
    79ea:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    79ee:	c8 2f       	mov	r28, r24
    79f0:	d9 2f       	mov	r29, r25
    79f2:	88 2e       	mov	r8, r24
    79f4:	99 2e       	mov	r9, r25
    79f6:	a1 2c       	mov	r10, r1
    79f8:	b1 2c       	mov	r11, r1
    79fa:	d7 01       	movw	r26, r14
    79fc:	14 96       	adiw	r26, 0x04	; 4
    79fe:	0d 91       	ld	r16, X+
    7a00:	1c 91       	ld	r17, X
    7a02:	15 97       	sbiw	r26, 0x05	; 5
    7a04:	ce 01       	movw	r24, r28
    7a06:	88 0f       	add	r24, r24
    7a08:	99 1f       	adc	r25, r25
    7a0a:	88 0f       	add	r24, r24
    7a0c:	99 1f       	adc	r25, r25
    7a0e:	08 0f       	add	r16, r24
    7a10:	19 1f       	adc	r17, r25
    7a12:	f8 01       	movw	r30, r16
    7a14:	80 81       	ld	r24, Z
    7a16:	91 81       	ldd	r25, Z+1	; 0x01
    7a18:	00 97       	sbiw	r24, 0x00	; 0
    7a1a:	09 f0       	breq	.+2      	; 0x7a1e <mp_map_lookup+0x170>
    7a1c:	3e c0       	rjmp	.+124    	; 0x7a9a <mp_map_lookup+0x1ec>
    7a1e:	f1 e0       	ldi	r31, 0x01	; 1
    7a20:	2f 12       	cpse	r2, r31
    7a22:	06 c1       	rjmp	.+524    	; 0x7c30 <mp_map_lookup+0x382>
    7a24:	2c 91       	ld	r18, X
    7a26:	42 2f       	mov	r20, r18
    7a28:	46 95       	lsr	r20
    7a2a:	46 95       	lsr	r20
    7a2c:	46 95       	lsr	r20
    7a2e:	11 96       	adiw	r26, 0x01	; 1
    7a30:	3c 91       	ld	r19, X
    7a32:	11 97       	sbiw	r26, 0x01	; 1
    7a34:	53 2f       	mov	r21, r19
    7a36:	52 95       	swap	r21
    7a38:	55 0f       	add	r21, r21
    7a3a:	50 7e       	andi	r21, 0xE0	; 224
    7a3c:	85 2f       	mov	r24, r21
    7a3e:	84 2b       	or	r24, r20
    7a40:	93 2f       	mov	r25, r19
    7a42:	96 95       	lsr	r25
    7a44:	96 95       	lsr	r25
    7a46:	96 95       	lsr	r25
    7a48:	01 96       	adiw	r24, 0x01	; 1
    7a4a:	38 2f       	mov	r19, r24
    7a4c:	33 0f       	add	r19, r19
    7a4e:	33 0f       	add	r19, r19
    7a50:	33 0f       	add	r19, r19
    7a52:	27 70       	andi	r18, 0x07	; 7
    7a54:	23 2b       	or	r18, r19
    7a56:	2c 93       	st	X, r18
    7a58:	99 0f       	add	r25, r25
    7a5a:	99 0f       	add	r25, r25
    7a5c:	99 0f       	add	r25, r25
    7a5e:	82 95       	swap	r24
    7a60:	86 95       	lsr	r24
    7a62:	87 70       	andi	r24, 0x07	; 7
    7a64:	89 2b       	or	r24, r25
    7a66:	11 96       	adiw	r26, 0x01	; 1
    7a68:	8c 93       	st	X, r24
    7a6a:	a1 14       	cp	r10, r1
    7a6c:	b1 04       	cpc	r11, r1
    7a6e:	09 f4       	brne	.+2      	; 0x7a72 <mp_map_lookup+0x1c4>
    7a70:	58 01       	movw	r10, r16
    7a72:	d5 01       	movw	r26, r10
    7a74:	11 96       	adiw	r26, 0x01	; 1
    7a76:	dc 92       	st	X, r13
    7a78:	ce 92       	st	-X, r12
    7a7a:	13 96       	adiw	r26, 0x03	; 3
    7a7c:	1c 92       	st	X, r1
    7a7e:	1e 92       	st	-X, r1
    7a80:	12 97       	sbiw	r26, 0x02	; 2
    7a82:	b2 e0       	ldi	r27, 0x02	; 2
    7a84:	4b 16       	cp	r4, r27
    7a86:	51 04       	cpc	r5, r1
    7a88:	09 f4       	brne	.+2      	; 0x7a8c <mp_map_lookup+0x1de>
    7a8a:	d5 c0       	rjmp	.+426    	; 0x7c36 <mp_map_lookup+0x388>
    7a8c:	f7 01       	movw	r30, r14
    7a8e:	80 81       	ld	r24, Z
    7a90:	8e 7f       	andi	r24, 0xFE	; 254
    7a92:	80 83       	st	Z, r24
    7a94:	8a 2d       	mov	r24, r10
    7a96:	9b 2d       	mov	r25, r11
    7a98:	d9 c0       	rjmp	.+434    	; 0x7c4c <mp_map_lookup+0x39e>
    7a9a:	84 30       	cpi	r24, 0x04	; 4
    7a9c:	91 05       	cpc	r25, r1
    7a9e:	31 f4       	brne	.+12     	; 0x7aac <mp_map_lookup+0x1fe>
    7aa0:	a1 14       	cp	r10, r1
    7aa2:	b1 04       	cpc	r11, r1
    7aa4:	09 f0       	breq	.+2      	; 0x7aa8 <mp_map_lookup+0x1fa>
    7aa6:	5c c0       	rjmp	.+184    	; 0x7b60 <mp_map_lookup+0x2b2>
    7aa8:	58 01       	movw	r10, r16
    7aaa:	5a c0       	rjmp	.+180    	; 0x7b60 <mp_map_lookup+0x2b2>
    7aac:	c8 16       	cp	r12, r24
    7aae:	d9 06       	cpc	r13, r25
    7ab0:	41 f0       	breq	.+16     	; 0x7ac2 <mp_map_lookup+0x214>
    7ab2:	31 10       	cpse	r3, r1
    7ab4:	55 c0       	rjmp	.+170    	; 0x7b60 <mp_map_lookup+0x2b2>
    7ab6:	b6 01       	movw	r22, r12
    7ab8:	0e 94 e6 20 	call	0x41cc	; 0x41cc <mp_obj_equal>
    7abc:	88 23       	and	r24, r24
    7abe:	09 f4       	brne	.+2      	; 0x7ac2 <mp_map_lookup+0x214>
    7ac0:	4f c0       	rjmp	.+158    	; 0x7b60 <mp_map_lookup+0x2b2>
    7ac2:	f2 e0       	ldi	r31, 0x02	; 2
    7ac4:	2f 12       	cpse	r2, r31
    7ac6:	ba c0       	rjmp	.+372    	; 0x7c3c <mp_map_lookup+0x38e>
    7ac8:	d7 01       	movw	r26, r14
    7aca:	2c 91       	ld	r18, X
    7acc:	42 2f       	mov	r20, r18
    7ace:	46 95       	lsr	r20
    7ad0:	46 95       	lsr	r20
    7ad2:	46 95       	lsr	r20
    7ad4:	11 96       	adiw	r26, 0x01	; 1
    7ad6:	3c 91       	ld	r19, X
    7ad8:	11 97       	sbiw	r26, 0x01	; 1
    7ada:	53 2f       	mov	r21, r19
    7adc:	52 95       	swap	r21
    7ade:	55 0f       	add	r21, r21
    7ae0:	50 7e       	andi	r21, 0xE0	; 224
    7ae2:	85 2f       	mov	r24, r21
    7ae4:	84 2b       	or	r24, r20
    7ae6:	93 2f       	mov	r25, r19
    7ae8:	96 95       	lsr	r25
    7aea:	96 95       	lsr	r25
    7aec:	96 95       	lsr	r25
    7aee:	81 50       	subi	r24, 0x01	; 1
    7af0:	90 4e       	sbci	r25, 0xE0	; 224
    7af2:	9f 71       	andi	r25, 0x1F	; 31
    7af4:	38 2f       	mov	r19, r24
    7af6:	33 0f       	add	r19, r19
    7af8:	33 0f       	add	r19, r19
    7afa:	33 0f       	add	r19, r19
    7afc:	27 70       	andi	r18, 0x07	; 7
    7afe:	23 2b       	or	r18, r19
    7b00:	2c 93       	st	X, r18
    7b02:	99 0f       	add	r25, r25
    7b04:	99 0f       	add	r25, r25
    7b06:	99 0f       	add	r25, r25
    7b08:	82 95       	swap	r24
    7b0a:	86 95       	lsr	r24
    7b0c:	87 70       	andi	r24, 0x07	; 7
    7b0e:	89 2b       	or	r24, r25
    7b10:	11 96       	adiw	r26, 0x01	; 1
    7b12:	8c 93       	st	X, r24
    7b14:	11 97       	sbiw	r26, 0x01	; 1
    7b16:	ce 01       	movw	r24, r28
    7b18:	01 96       	adiw	r24, 0x01	; 1
    7b1a:	12 96       	adiw	r26, 0x02	; 2
    7b1c:	6d 91       	ld	r22, X+
    7b1e:	7c 91       	ld	r23, X
    7b20:	13 97       	sbiw	r26, 0x03	; 3
    7b22:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    7b26:	88 0f       	add	r24, r24
    7b28:	99 1f       	adc	r25, r25
    7b2a:	88 0f       	add	r24, r24
    7b2c:	99 1f       	adc	r25, r25
    7b2e:	d7 01       	movw	r26, r14
    7b30:	14 96       	adiw	r26, 0x04	; 4
    7b32:	ed 91       	ld	r30, X+
    7b34:	fc 91       	ld	r31, X
    7b36:	15 97       	sbiw	r26, 0x05	; 5
    7b38:	e8 0f       	add	r30, r24
    7b3a:	f9 1f       	adc	r31, r25
    7b3c:	80 81       	ld	r24, Z
    7b3e:	91 81       	ldd	r25, Z+1	; 0x01
    7b40:	89 2b       	or	r24, r25
    7b42:	31 f4       	brne	.+12     	; 0x7b50 <mp_map_lookup+0x2a2>
    7b44:	f8 01       	movw	r30, r16
    7b46:	11 82       	std	Z+1, r1	; 0x01
    7b48:	10 82       	st	Z, r1
    7b4a:	80 2f       	mov	r24, r16
    7b4c:	91 2f       	mov	r25, r17
    7b4e:	7e c0       	rjmp	.+252    	; 0x7c4c <mp_map_lookup+0x39e>
    7b50:	84 e0       	ldi	r24, 0x04	; 4
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	d8 01       	movw	r26, r16
    7b56:	8d 93       	st	X+, r24
    7b58:	9c 93       	st	X, r25
    7b5a:	80 2f       	mov	r24, r16
    7b5c:	91 2f       	mov	r25, r17
    7b5e:	76 c0       	rjmp	.+236    	; 0x7c4c <mp_map_lookup+0x39e>
    7b60:	ce 01       	movw	r24, r28
    7b62:	01 96       	adiw	r24, 0x01	; 1
    7b64:	f7 01       	movw	r30, r14
    7b66:	62 81       	ldd	r22, Z+2	; 0x02
    7b68:	73 81       	ldd	r23, Z+3	; 0x03
    7b6a:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    7b6e:	ec 01       	movw	r28, r24
    7b70:	88 16       	cp	r8, r24
    7b72:	99 06       	cpc	r9, r25
    7b74:	09 f0       	breq	.+2      	; 0x7b78 <mp_map_lookup+0x2ca>
    7b76:	41 cf       	rjmp	.-382    	; 0x79fa <mp_map_lookup+0x14c>
    7b78:	f1 e0       	ldi	r31, 0x01	; 1
    7b7a:	2f 12       	cpse	r2, r31
    7b7c:	62 c0       	rjmp	.+196    	; 0x7c42 <mp_map_lookup+0x394>
    7b7e:	a1 14       	cp	r10, r1
    7b80:	b1 04       	cpc	r11, r1
    7b82:	a9 f1       	breq	.+106    	; 0x7bee <mp_map_lookup+0x340>
    7b84:	d7 01       	movw	r26, r14
    7b86:	2c 91       	ld	r18, X
    7b88:	42 2f       	mov	r20, r18
    7b8a:	46 95       	lsr	r20
    7b8c:	46 95       	lsr	r20
    7b8e:	46 95       	lsr	r20
    7b90:	11 96       	adiw	r26, 0x01	; 1
    7b92:	3c 91       	ld	r19, X
    7b94:	11 97       	sbiw	r26, 0x01	; 1
    7b96:	53 2f       	mov	r21, r19
    7b98:	52 95       	swap	r21
    7b9a:	55 0f       	add	r21, r21
    7b9c:	50 7e       	andi	r21, 0xE0	; 224
    7b9e:	85 2f       	mov	r24, r21
    7ba0:	84 2b       	or	r24, r20
    7ba2:	93 2f       	mov	r25, r19
    7ba4:	96 95       	lsr	r25
    7ba6:	96 95       	lsr	r25
    7ba8:	96 95       	lsr	r25
    7baa:	01 96       	adiw	r24, 0x01	; 1
    7bac:	9f 71       	andi	r25, 0x1F	; 31
    7bae:	38 2f       	mov	r19, r24
    7bb0:	33 0f       	add	r19, r19
    7bb2:	33 0f       	add	r19, r19
    7bb4:	33 0f       	add	r19, r19
    7bb6:	27 70       	andi	r18, 0x07	; 7
    7bb8:	23 2b       	or	r18, r19
    7bba:	2c 93       	st	X, r18
    7bbc:	99 0f       	add	r25, r25
    7bbe:	99 0f       	add	r25, r25
    7bc0:	99 0f       	add	r25, r25
    7bc2:	82 95       	swap	r24
    7bc4:	86 95       	lsr	r24
    7bc6:	87 70       	andi	r24, 0x07	; 7
    7bc8:	89 2b       	or	r24, r25
    7bca:	11 96       	adiw	r26, 0x01	; 1
    7bcc:	8c 93       	st	X, r24
    7bce:	11 97       	sbiw	r26, 0x01	; 1
    7bd0:	f5 01       	movw	r30, r10
    7bd2:	d1 82       	std	Z+1, r13	; 0x01
    7bd4:	c0 82       	st	Z, r12
    7bd6:	13 82       	std	Z+3, r1	; 0x03
    7bd8:	12 82       	std	Z+2, r1	; 0x02
    7bda:	f2 e0       	ldi	r31, 0x02	; 2
    7bdc:	4f 16       	cp	r4, r31
    7bde:	51 04       	cpc	r5, r1
    7be0:	99 f1       	breq	.+102    	; 0x7c48 <mp_map_lookup+0x39a>
    7be2:	8c 91       	ld	r24, X
    7be4:	8e 7f       	andi	r24, 0xFE	; 254
    7be6:	8c 93       	st	X, r24
    7be8:	8a 2d       	mov	r24, r10
    7bea:	9b 2d       	mov	r25, r11
    7bec:	2f c0       	rjmp	.+94     	; 0x7c4c <mp_map_lookup+0x39e>
    7bee:	c7 01       	movw	r24, r14
    7bf0:	f4 dd       	rcall	.-1048   	; 0x77da <mp_map_rehash>
    7bf2:	d7 01       	movw	r26, r14
    7bf4:	12 96       	adiw	r26, 0x02	; 2
    7bf6:	6d 91       	ld	r22, X+
    7bf8:	7c 91       	ld	r23, X
    7bfa:	13 97       	sbiw	r26, 0x03	; 3
    7bfc:	c3 01       	movw	r24, r6
    7bfe:	0e 94 e8 c1 	call	0x183d0	; 0x183d0 <__udivmodhi4>
    7c02:	c8 2f       	mov	r28, r24
    7c04:	d9 2f       	mov	r29, r25
    7c06:	88 2e       	mov	r8, r24
    7c08:	99 2e       	mov	r9, r25
    7c0a:	f7 ce       	rjmp	.-530    	; 0x79fa <mp_map_lookup+0x14c>
    7c0c:	80 e0       	ldi	r24, 0x00	; 0
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	1d c0       	rjmp	.+58     	; 0x7c4c <mp_map_lookup+0x39e>
    7c12:	80 e0       	ldi	r24, 0x00	; 0
    7c14:	90 e0       	ldi	r25, 0x00	; 0
    7c16:	1a c0       	rjmp	.+52     	; 0x7c4c <mp_map_lookup+0x39e>
    7c18:	8c 2f       	mov	r24, r28
    7c1a:	9d 2f       	mov	r25, r29
    7c1c:	17 c0       	rjmp	.+46     	; 0x7c4c <mp_map_lookup+0x39e>
    7c1e:	8c 2f       	mov	r24, r28
    7c20:	9d 2f       	mov	r25, r29
    7c22:	14 c0       	rjmp	.+40     	; 0x7c4c <mp_map_lookup+0x39e>
    7c24:	8c 2f       	mov	r24, r28
    7c26:	9d 2f       	mov	r25, r29
    7c28:	11 c0       	rjmp	.+34     	; 0x7c4c <mp_map_lookup+0x39e>
    7c2a:	80 e0       	ldi	r24, 0x00	; 0
    7c2c:	90 e0       	ldi	r25, 0x00	; 0
    7c2e:	0e c0       	rjmp	.+28     	; 0x7c4c <mp_map_lookup+0x39e>
    7c30:	80 e0       	ldi	r24, 0x00	; 0
    7c32:	90 e0       	ldi	r25, 0x00	; 0
    7c34:	0b c0       	rjmp	.+22     	; 0x7c4c <mp_map_lookup+0x39e>
    7c36:	8a 2d       	mov	r24, r10
    7c38:	9b 2d       	mov	r25, r11
    7c3a:	08 c0       	rjmp	.+16     	; 0x7c4c <mp_map_lookup+0x39e>
    7c3c:	80 2f       	mov	r24, r16
    7c3e:	91 2f       	mov	r25, r17
    7c40:	05 c0       	rjmp	.+10     	; 0x7c4c <mp_map_lookup+0x39e>
    7c42:	80 e0       	ldi	r24, 0x00	; 0
    7c44:	90 e0       	ldi	r25, 0x00	; 0
    7c46:	02 c0       	rjmp	.+4      	; 0x7c4c <mp_map_lookup+0x39e>
    7c48:	8a 2d       	mov	r24, r10
    7c4a:	9b 2d       	mov	r25, r11
    7c4c:	df 91       	pop	r29
    7c4e:	cf 91       	pop	r28
    7c50:	1f 91       	pop	r17
    7c52:	0f 91       	pop	r16
    7c54:	ff 90       	pop	r15
    7c56:	ef 90       	pop	r14
    7c58:	df 90       	pop	r13
    7c5a:	cf 90       	pop	r12
    7c5c:	bf 90       	pop	r11
    7c5e:	af 90       	pop	r10
    7c60:	9f 90       	pop	r9
    7c62:	8f 90       	pop	r8
    7c64:	7f 90       	pop	r7
    7c66:	6f 90       	pop	r6
    7c68:	5f 90       	pop	r5
    7c6a:	4f 90       	pop	r4
    7c6c:	3f 90       	pop	r3
    7c6e:	2f 90       	pop	r2
    7c70:	08 95       	ret

00007c72 <mp_load_global>:
    7c72:	cf 93       	push	r28
    7c74:	df 93       	push	r29
    7c76:	88 0f       	add	r24, r24
    7c78:	99 1f       	adc	r25, r25
    7c7a:	88 0f       	add	r24, r24
    7c7c:	99 1f       	adc	r25, r25
    7c7e:	88 0f       	add	r24, r24
    7c80:	99 1f       	adc	r25, r25
    7c82:	ec 01       	movw	r28, r24
    7c84:	c2 60       	ori	r28, 0x02	; 2
    7c86:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
    7c8a:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
    7c8e:	40 e0       	ldi	r20, 0x00	; 0
    7c90:	be 01       	movw	r22, r28
    7c92:	02 96       	adiw	r24, 0x02	; 2
    7c94:	0c de       	rcall	.-1000   	; 0x78ae <mp_map_lookup>
    7c96:	00 97       	sbiw	r24, 0x00	; 0
    7c98:	69 f4       	brne	.+26     	; 0x7cb4 <mp_load_global+0x42>
    7c9a:	40 e0       	ldi	r20, 0x00	; 0
    7c9c:	be 01       	movw	r22, r28
    7c9e:	89 ed       	ldi	r24, 0xD9	; 217
    7ca0:	97 e1       	ldi	r25, 0x17	; 23
    7ca2:	05 de       	rcall	.-1014   	; 0x78ae <mp_map_lookup>
    7ca4:	00 97       	sbiw	r24, 0x00	; 0
    7ca6:	31 f4       	brne	.+12     	; 0x7cb4 <mp_load_global+0x42>
    7ca8:	6f eb       	ldi	r22, 0xBF	; 191
    7caa:	76 e0       	ldi	r23, 0x06	; 6
    7cac:	88 e3       	ldi	r24, 0x38	; 56
    7cae:	90 e2       	ldi	r25, 0x20	; 32
    7cb0:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    7cb4:	fc 01       	movw	r30, r24
    7cb6:	82 81       	ldd	r24, Z+2	; 0x02
    7cb8:	93 81       	ldd	r25, Z+3	; 0x03
    7cba:	df 91       	pop	r29
    7cbc:	cf 91       	pop	r28
    7cbe:	08 95       	ret

00007cc0 <mp_load_name>:
    7cc0:	cf 93       	push	r28
    7cc2:	df 93       	push	r29
    7cc4:	ec 01       	movw	r28, r24
    7cc6:	ea e5       	ldi	r30, 0x5A	; 90
    7cc8:	fb e6       	ldi	r31, 0x6B	; 107
    7cca:	84 81       	ldd	r24, Z+4	; 0x04
    7ccc:	95 81       	ldd	r25, Z+5	; 0x05
    7cce:	26 81       	ldd	r18, Z+6	; 0x06
    7cd0:	37 81       	ldd	r19, Z+7	; 0x07
    7cd2:	82 17       	cp	r24, r18
    7cd4:	93 07       	cpc	r25, r19
    7cd6:	89 f0       	breq	.+34     	; 0x7cfa <mp_load_name+0x3a>
    7cd8:	be 01       	movw	r22, r28
    7cda:	66 0f       	add	r22, r22
    7cdc:	77 1f       	adc	r23, r23
    7cde:	66 0f       	add	r22, r22
    7ce0:	77 1f       	adc	r23, r23
    7ce2:	66 0f       	add	r22, r22
    7ce4:	77 1f       	adc	r23, r23
    7ce6:	62 60       	ori	r22, 0x02	; 2
    7ce8:	40 e0       	ldi	r20, 0x00	; 0
    7cea:	02 96       	adiw	r24, 0x02	; 2
    7cec:	e0 dd       	rcall	.-1088   	; 0x78ae <mp_map_lookup>
    7cee:	00 97       	sbiw	r24, 0x00	; 0
    7cf0:	21 f0       	breq	.+8      	; 0x7cfa <mp_load_name+0x3a>
    7cf2:	fc 01       	movw	r30, r24
    7cf4:	82 81       	ldd	r24, Z+2	; 0x02
    7cf6:	93 81       	ldd	r25, Z+3	; 0x03
    7cf8:	02 c0       	rjmp	.+4      	; 0x7cfe <mp_load_name+0x3e>
    7cfa:	ce 01       	movw	r24, r28
    7cfc:	ba df       	rcall	.-140    	; 0x7c72 <mp_load_global>
    7cfe:	df 91       	pop	r29
    7d00:	cf 91       	pop	r28
    7d02:	08 95       	ret

00007d04 <mp_load_method_maybe>:
    7d04:	cf 92       	push	r12
    7d06:	df 92       	push	r13
    7d08:	ef 92       	push	r14
    7d0a:	ff 92       	push	r15
    7d0c:	0f 93       	push	r16
    7d0e:	1f 93       	push	r17
    7d10:	cf 93       	push	r28
    7d12:	df 93       	push	r29
    7d14:	7c 01       	movw	r14, r24
    7d16:	8b 01       	movw	r16, r22
    7d18:	ea 01       	movw	r28, r20
    7d1a:	19 82       	std	Y+1, r1	; 0x01
    7d1c:	18 82       	st	Y, r1
    7d1e:	1b 82       	std	Y+3, r1	; 0x03
    7d20:	1a 82       	std	Y+2, r1	; 0x02
    7d22:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    7d26:	6c 01       	movw	r12, r24
    7d28:	09 31       	cpi	r16, 0x19	; 25
    7d2a:	11 05       	cpc	r17, r1
    7d2c:	71 f4       	brne	.+28     	; 0x7d4a <mp_load_method_maybe+0x46>
    7d2e:	dc 01       	movw	r26, r24
    7d30:	56 96       	adiw	r26, 0x16	; 22
    7d32:	8d 91       	ld	r24, X+
    7d34:	9c 91       	ld	r25, X
    7d36:	57 97       	sbiw	r26, 0x17	; 23
    7d38:	89 2b       	or	r24, r25
    7d3a:	39 f0       	breq	.+14     	; 0x7d4a <mp_load_method_maybe+0x46>
    7d3c:	8b e6       	ldi	r24, 0x6B	; 107
    7d3e:	99 e1       	ldi	r25, 0x19	; 25
    7d40:	99 83       	std	Y+1, r25	; 0x01
    7d42:	88 83       	st	Y, r24
    7d44:	fb 82       	std	Y+3, r15	; 0x03
    7d46:	ea 82       	std	Y+2, r14	; 0x02
    7d48:	33 c0       	rjmp	.+102    	; 0x7db0 <mp_load_method_maybe+0xac>
    7d4a:	d6 01       	movw	r26, r12
    7d4c:	50 96       	adiw	r26, 0x10	; 16
    7d4e:	ed 91       	ld	r30, X+
    7d50:	fc 91       	ld	r31, X
    7d52:	51 97       	sbiw	r26, 0x11	; 17
    7d54:	30 97       	sbiw	r30, 0x00	; 0
    7d56:	51 f0       	breq	.+20     	; 0x7d6c <mp_load_method_maybe+0x68>
    7d58:	ae 01       	movw	r20, r28
    7d5a:	b8 01       	movw	r22, r16
    7d5c:	c7 01       	movw	r24, r14
    7d5e:	09 95       	icall
    7d60:	8a 81       	ldd	r24, Y+2	; 0x02
    7d62:	9b 81       	ldd	r25, Y+3	; 0x03
    7d64:	04 97       	sbiw	r24, 0x04	; 4
    7d66:	21 f5       	brne	.+72     	; 0x7db0 <mp_load_method_maybe+0xac>
    7d68:	1b 82       	std	Y+3, r1	; 0x03
    7d6a:	1a 82       	std	Y+2, r1	; 0x02
    7d6c:	f6 01       	movw	r30, r12
    7d6e:	86 8d       	ldd	r24, Z+30	; 0x1e
    7d70:	97 8d       	ldd	r25, Z+31	; 0x1f
    7d72:	00 97       	sbiw	r24, 0x00	; 0
    7d74:	e9 f0       	breq	.+58     	; 0x7db0 <mp_load_method_maybe+0xac>
    7d76:	dc 01       	movw	r26, r24
    7d78:	2d 91       	ld	r18, X+
    7d7a:	3c 91       	ld	r19, X
    7d7c:	28 57       	subi	r18, 0x78	; 120
    7d7e:	32 42       	sbci	r19, 0x22	; 34
    7d80:	11 f0       	breq	.+4      	; 0x7d86 <mp_load_method_maybe+0x82>
    7d82:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    7d86:	b8 01       	movw	r22, r16
    7d88:	66 0f       	add	r22, r22
    7d8a:	77 1f       	adc	r23, r23
    7d8c:	66 0f       	add	r22, r22
    7d8e:	77 1f       	adc	r23, r23
    7d90:	66 0f       	add	r22, r22
    7d92:	77 1f       	adc	r23, r23
    7d94:	62 60       	ori	r22, 0x02	; 2
    7d96:	40 e0       	ldi	r20, 0x00	; 0
    7d98:	02 96       	adiw	r24, 0x02	; 2
    7d9a:	89 dd       	rcall	.-1262   	; 0x78ae <mp_map_lookup>
    7d9c:	00 97       	sbiw	r24, 0x00	; 0
    7d9e:	41 f0       	breq	.+16     	; 0x7db0 <mp_load_method_maybe+0xac>
    7da0:	fc 01       	movw	r30, r24
    7da2:	42 81       	ldd	r20, Z+2	; 0x02
    7da4:	53 81       	ldd	r21, Z+3	; 0x03
    7da6:	9e 01       	movw	r18, r28
    7da8:	b6 01       	movw	r22, r12
    7daa:	c7 01       	movw	r24, r14
    7dac:	0e 94 33 1a 	call	0x3466	; 0x3466 <mp_convert_member_lookup>
    7db0:	df 91       	pop	r29
    7db2:	cf 91       	pop	r28
    7db4:	1f 91       	pop	r17
    7db6:	0f 91       	pop	r16
    7db8:	ff 90       	pop	r15
    7dba:	ef 90       	pop	r14
    7dbc:	df 90       	pop	r13
    7dbe:	cf 90       	pop	r12
    7dc0:	08 95       	ret

00007dc2 <mp_load_method>:
    7dc2:	cf 93       	push	r28
    7dc4:	df 93       	push	r29
    7dc6:	ea 01       	movw	r28, r20
    7dc8:	9d df       	rcall	.-198    	; 0x7d04 <mp_load_method_maybe>
    7dca:	88 81       	ld	r24, Y
    7dcc:	99 81       	ldd	r25, Y+1	; 0x01
    7dce:	89 2b       	or	r24, r25
    7dd0:	31 f4       	brne	.+12     	; 0x7dde <mp_load_method+0x1c>
    7dd2:	6d eb       	ldi	r22, 0xBD	; 189
    7dd4:	72 e0       	ldi	r23, 0x02	; 2
    7dd6:	88 e1       	ldi	r24, 0x18	; 24
    7dd8:	91 e2       	ldi	r25, 0x21	; 33
    7dda:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    7dde:	df 91       	pop	r29
    7de0:	cf 91       	pop	r28
    7de2:	08 95       	ret

00007de4 <mp_load_super_method>:
    7de4:	cf 93       	push	r28
    7de6:	df 93       	push	r29
    7de8:	00 d0       	rcall	.+0      	; 0x7dea <mp_load_super_method+0x6>
    7dea:	00 d0       	rcall	.+0      	; 0x7dec <mp_load_super_method+0x8>
    7dec:	00 d0       	rcall	.+0      	; 0x7dee <mp_load_super_method+0xa>
    7dee:	cd b7       	in	r28, 0x3d	; 61
    7df0:	de b7       	in	r29, 0x3e	; 62
    7df2:	ab 01       	movw	r20, r22
    7df4:	23 e3       	ldi	r18, 0x33	; 51
    7df6:	3a e1       	ldi	r19, 0x1A	; 26
    7df8:	3a 83       	std	Y+2, r19	; 0x02
    7dfa:	29 83       	std	Y+1, r18	; 0x01
    7dfc:	fb 01       	movw	r30, r22
    7dfe:	22 81       	ldd	r18, Z+2	; 0x02
    7e00:	33 81       	ldd	r19, Z+3	; 0x03
    7e02:	3c 83       	std	Y+4, r19	; 0x04
    7e04:	2b 83       	std	Y+3, r18	; 0x03
    7e06:	24 81       	ldd	r18, Z+4	; 0x04
    7e08:	35 81       	ldd	r19, Z+5	; 0x05
    7e0a:	3e 83       	std	Y+6, r19	; 0x06
    7e0c:	2d 83       	std	Y+5, r18	; 0x05
    7e0e:	bc 01       	movw	r22, r24
    7e10:	ce 01       	movw	r24, r28
    7e12:	01 96       	adiw	r24, 0x01	; 1
    7e14:	d6 df       	rcall	.-84     	; 0x7dc2 <mp_load_method>
    7e16:	26 96       	adiw	r28, 0x06	; 6
    7e18:	0f b6       	in	r0, 0x3f	; 63
    7e1a:	f8 94       	cli
    7e1c:	de bf       	out	0x3e, r29	; 62
    7e1e:	0f be       	out	0x3f, r0	; 63
    7e20:	cd bf       	out	0x3d, r28	; 61
    7e22:	df 91       	pop	r29
    7e24:	cf 91       	pop	r28
    7e26:	08 95       	ret

00007e28 <mp_load_attr>:
    7e28:	cf 93       	push	r28
    7e2a:	df 93       	push	r29
    7e2c:	00 d0       	rcall	.+0      	; 0x7e2e <mp_load_attr+0x6>
    7e2e:	00 d0       	rcall	.+0      	; 0x7e30 <mp_load_attr+0x8>
    7e30:	cd b7       	in	r28, 0x3d	; 61
    7e32:	de b7       	in	r29, 0x3e	; 62
    7e34:	ae 01       	movw	r20, r28
    7e36:	4f 5f       	subi	r20, 0xFF	; 255
    7e38:	5f 4f       	sbci	r21, 0xFF	; 255
    7e3a:	c3 df       	rcall	.-122    	; 0x7dc2 <mp_load_method>
    7e3c:	6b 81       	ldd	r22, Y+3	; 0x03
    7e3e:	7c 81       	ldd	r23, Y+4	; 0x04
    7e40:	61 15       	cp	r22, r1
    7e42:	71 05       	cpc	r23, r1
    7e44:	19 f4       	brne	.+6      	; 0x7e4c <mp_load_attr+0x24>
    7e46:	89 81       	ldd	r24, Y+1	; 0x01
    7e48:	9a 81       	ldd	r25, Y+2	; 0x02
    7e4a:	04 c0       	rjmp	.+8      	; 0x7e54 <mp_load_attr+0x2c>
    7e4c:	89 81       	ldd	r24, Y+1	; 0x01
    7e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    7e50:	0e 94 97 32 	call	0x652e	; 0x652e <mp_obj_new_bound_meth>
    7e54:	0f 90       	pop	r0
    7e56:	0f 90       	pop	r0
    7e58:	0f 90       	pop	r0
    7e5a:	0f 90       	pop	r0
    7e5c:	df 91       	pop	r29
    7e5e:	cf 91       	pop	r28
    7e60:	08 95       	ret

00007e62 <mp_iternext_allow_raise>:
    7e62:	0f 93       	push	r16
    7e64:	1f 93       	push	r17
    7e66:	cf 93       	push	r28
    7e68:	df 93       	push	r29
    7e6a:	00 d0       	rcall	.+0      	; 0x7e6c <mp_iternext_allow_raise+0xa>
    7e6c:	00 d0       	rcall	.+0      	; 0x7e6e <mp_iternext_allow_raise+0xc>
    7e6e:	cd b7       	in	r28, 0x3d	; 61
    7e70:	de b7       	in	r29, 0x3e	; 62
    7e72:	8c 01       	movw	r16, r24
    7e74:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    7e78:	dc 01       	movw	r26, r24
    7e7a:	56 96       	adiw	r26, 0x16	; 22
    7e7c:	ed 91       	ld	r30, X+
    7e7e:	fc 91       	ld	r31, X
    7e80:	57 97       	sbiw	r26, 0x17	; 23
    7e82:	30 97       	sbiw	r30, 0x00	; 0
    7e84:	39 f0       	breq	.+14     	; 0x7e94 <mp_iternext_allow_raise+0x32>
    7e86:	10 92 67 6b 	sts	0x6B67, r1	; 0x806b67 <mp_state_ctx+0xd>
    7e8a:	10 92 66 6b 	sts	0x6B66, r1	; 0x806b66 <mp_state_ctx+0xc>
    7e8e:	c8 01       	movw	r24, r16
    7e90:	09 95       	icall
    7e92:	19 c0       	rjmp	.+50     	; 0x7ec6 <mp_iternext_allow_raise+0x64>
    7e94:	ae 01       	movw	r20, r28
    7e96:	4f 5f       	subi	r20, 0xFF	; 255
    7e98:	5f 4f       	sbci	r21, 0xFF	; 255
    7e9a:	69 e1       	ldi	r22, 0x19	; 25
    7e9c:	70 e0       	ldi	r23, 0x00	; 0
    7e9e:	c8 01       	movw	r24, r16
    7ea0:	31 df       	rcall	.-414    	; 0x7d04 <mp_load_method_maybe>
    7ea2:	89 81       	ldd	r24, Y+1	; 0x01
    7ea4:	9a 81       	ldd	r25, Y+2	; 0x02
    7ea6:	89 2b       	or	r24, r25
    7ea8:	51 f0       	breq	.+20     	; 0x7ebe <mp_iternext_allow_raise+0x5c>
    7eaa:	ae 01       	movw	r20, r28
    7eac:	4f 5f       	subi	r20, 0xFF	; 255
    7eae:	5f 4f       	sbci	r21, 0xFF	; 255
    7eb0:	60 e0       	ldi	r22, 0x00	; 0
    7eb2:	70 e0       	ldi	r23, 0x00	; 0
    7eb4:	80 e0       	ldi	r24, 0x00	; 0
    7eb6:	90 e0       	ldi	r25, 0x00	; 0
    7eb8:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    7ebc:	04 c0       	rjmp	.+8      	; 0x7ec6 <mp_iternext_allow_raise+0x64>
    7ebe:	80 ed       	ldi	r24, 0xD0	; 208
    7ec0:	96 e0       	ldi	r25, 0x06	; 6
    7ec2:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    7ec6:	0f 90       	pop	r0
    7ec8:	0f 90       	pop	r0
    7eca:	0f 90       	pop	r0
    7ecc:	0f 90       	pop	r0
    7ece:	df 91       	pop	r29
    7ed0:	cf 91       	pop	r28
    7ed2:	1f 91       	pop	r17
    7ed4:	0f 91       	pop	r16
    7ed6:	08 95       	ret

00007ed8 <mp_obj_is_package>:
    7ed8:	cf 93       	push	r28
    7eda:	df 93       	push	r29
    7edc:	00 d0       	rcall	.+0      	; 0x7ede <mp_obj_is_package+0x6>
    7ede:	00 d0       	rcall	.+0      	; 0x7ee0 <mp_obj_is_package+0x8>
    7ee0:	cd b7       	in	r28, 0x3d	; 61
    7ee2:	de b7       	in	r29, 0x3e	; 62
    7ee4:	ae 01       	movw	r20, r28
    7ee6:	4f 5f       	subi	r20, 0xFF	; 255
    7ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    7eea:	63 eb       	ldi	r22, 0xB3	; 179
    7eec:	70 e0       	ldi	r23, 0x00	; 0
    7eee:	0a df       	rcall	.-492    	; 0x7d04 <mp_load_method_maybe>
    7ef0:	81 e0       	ldi	r24, 0x01	; 1
    7ef2:	29 81       	ldd	r18, Y+1	; 0x01
    7ef4:	3a 81       	ldd	r19, Y+2	; 0x02
    7ef6:	23 2b       	or	r18, r19
    7ef8:	09 f4       	brne	.+2      	; 0x7efc <mp_obj_is_package+0x24>
    7efa:	80 e0       	ldi	r24, 0x00	; 0
    7efc:	0f 90       	pop	r0
    7efe:	0f 90       	pop	r0
    7f00:	0f 90       	pop	r0
    7f02:	0f 90       	pop	r0
    7f04:	df 91       	pop	r29
    7f06:	cf 91       	pop	r28
    7f08:	08 95       	ret

00007f0a <mp_getiter>:
    7f0a:	cf 92       	push	r12
    7f0c:	df 92       	push	r13
    7f0e:	ef 92       	push	r14
    7f10:	ff 92       	push	r15
    7f12:	0f 93       	push	r16
    7f14:	1f 93       	push	r17
    7f16:	cf 93       	push	r28
    7f18:	df 93       	push	r29
    7f1a:	00 d0       	rcall	.+0      	; 0x7f1c <mp_getiter+0x12>
    7f1c:	00 d0       	rcall	.+0      	; 0x7f1e <mp_getiter+0x14>
    7f1e:	cd b7       	in	r28, 0x3d	; 61
    7f20:	de b7       	in	r29, 0x3e	; 62
    7f22:	7c 01       	movw	r14, r24
    7f24:	8b 01       	movw	r16, r22
    7f26:	00 97       	sbiw	r24, 0x00	; 0
    7f28:	11 f4       	brne	.+4      	; 0x7f2e <mp_getiter+0x24>
    7f2a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    7f2e:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    7f32:	6c 01       	movw	r12, r24
    7f34:	dc 01       	movw	r26, r24
    7f36:	54 96       	adiw	r26, 0x14	; 20
    7f38:	8d 91       	ld	r24, X+
    7f3a:	9c 91       	ld	r25, X
    7f3c:	55 97       	sbiw	r26, 0x15	; 21
    7f3e:	b2 e0       	ldi	r27, 0x02	; 2
    7f40:	85 31       	cpi	r24, 0x15	; 21
    7f42:	9b 07       	cpc	r25, r27
    7f44:	09 f4       	brne	.+2      	; 0x7f48 <mp_getiter+0x3e>
    7f46:	43 c0       	rjmp	.+134    	; 0x7fce <mp_getiter+0xc4>
    7f48:	00 97       	sbiw	r24, 0x00	; 0
    7f4a:	b1 f0       	breq	.+44     	; 0x7f78 <mp_getiter+0x6e>
    7f4c:	01 15       	cp	r16, r1
    7f4e:	11 05       	cpc	r17, r1
    7f50:	41 f4       	brne	.+16     	; 0x7f62 <mp_getiter+0x58>
    7f52:	82 5d       	subi	r24, 0xD2	; 210
    7f54:	96 44       	sbci	r25, 0x46	; 70
    7f56:	29 f0       	breq	.+10     	; 0x7f62 <mp_getiter+0x58>
    7f58:	88 e0       	ldi	r24, 0x08	; 8
    7f5a:	90 e0       	ldi	r25, 0x00	; 0
    7f5c:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    7f60:	8c 01       	movw	r16, r24
    7f62:	d6 01       	movw	r26, r12
    7f64:	54 96       	adiw	r26, 0x14	; 20
    7f66:	ed 91       	ld	r30, X+
    7f68:	fc 91       	ld	r31, X
    7f6a:	55 97       	sbiw	r26, 0x15	; 21
    7f6c:	b8 01       	movw	r22, r16
    7f6e:	c7 01       	movw	r24, r14
    7f70:	09 95       	icall
    7f72:	9c 01       	movw	r18, r24
    7f74:	00 97       	sbiw	r24, 0x00	; 0
    7f76:	71 f5       	brne	.+92     	; 0x7fd4 <mp_getiter+0xca>
    7f78:	ae 01       	movw	r20, r28
    7f7a:	4f 5f       	subi	r20, 0xFF	; 255
    7f7c:	5f 4f       	sbci	r21, 0xFF	; 255
    7f7e:	6f e0       	ldi	r22, 0x0F	; 15
    7f80:	70 e0       	ldi	r23, 0x00	; 0
    7f82:	c7 01       	movw	r24, r14
    7f84:	bf de       	rcall	.-642    	; 0x7d04 <mp_load_method_maybe>
    7f86:	89 81       	ldd	r24, Y+1	; 0x01
    7f88:	9a 81       	ldd	r25, Y+2	; 0x02
    7f8a:	89 2b       	or	r24, r25
    7f8c:	e1 f0       	breq	.+56     	; 0x7fc6 <mp_getiter+0xbc>
    7f8e:	01 15       	cp	r16, r1
    7f90:	11 05       	cpc	r17, r1
    7f92:	29 f4       	brne	.+10     	; 0x7f9e <mp_getiter+0x94>
    7f94:	88 e0       	ldi	r24, 0x08	; 8
    7f96:	90 e0       	ldi	r25, 0x00	; 0
    7f98:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    7f9c:	8c 01       	movw	r16, r24
    7f9e:	8c e0       	ldi	r24, 0x0C	; 12
    7fa0:	9e e1       	ldi	r25, 0x1E	; 30
    7fa2:	f8 01       	movw	r30, r16
    7fa4:	91 83       	std	Z+1, r25	; 0x01
    7fa6:	80 83       	st	Z, r24
    7fa8:	89 81       	ldd	r24, Y+1	; 0x01
    7faa:	9a 81       	ldd	r25, Y+2	; 0x02
    7fac:	93 83       	std	Z+3, r25	; 0x03
    7fae:	82 83       	std	Z+2, r24	; 0x02
    7fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    7fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    7fb4:	95 83       	std	Z+5, r25	; 0x05
    7fb6:	84 83       	std	Z+4, r24	; 0x04
    7fb8:	81 e0       	ldi	r24, 0x01	; 1
    7fba:	90 e0       	ldi	r25, 0x00	; 0
    7fbc:	97 83       	std	Z+7, r25	; 0x07
    7fbe:	86 83       	std	Z+6, r24	; 0x06
    7fc0:	80 2f       	mov	r24, r16
    7fc2:	91 2f       	mov	r25, r17
    7fc4:	08 c0       	rjmp	.+16     	; 0x7fd6 <mp_getiter+0xcc>
    7fc6:	87 ee       	ldi	r24, 0xE7	; 231
    7fc8:	96 e0       	ldi	r25, 0x06	; 6
    7fca:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    7fce:	8e 2d       	mov	r24, r14
    7fd0:	9f 2d       	mov	r25, r15
    7fd2:	01 c0       	rjmp	.+2      	; 0x7fd6 <mp_getiter+0xcc>
    7fd4:	93 2f       	mov	r25, r19
    7fd6:	0f 90       	pop	r0
    7fd8:	0f 90       	pop	r0
    7fda:	0f 90       	pop	r0
    7fdc:	0f 90       	pop	r0
    7fde:	df 91       	pop	r29
    7fe0:	cf 91       	pop	r28
    7fe2:	1f 91       	pop	r17
    7fe4:	0f 91       	pop	r16
    7fe6:	ff 90       	pop	r15
    7fe8:	ef 90       	pop	r14
    7fea:	df 90       	pop	r13
    7fec:	cf 90       	pop	r12
    7fee:	08 95       	ret

00007ff0 <mp_builtin_iter>:
    7ff0:	60 e0       	ldi	r22, 0x00	; 0
    7ff2:	70 e0       	ldi	r23, 0x00	; 0
    7ff4:	8a cf       	rjmp	.-236    	; 0x7f0a <mp_getiter>
    7ff6:	08 95       	ret

00007ff8 <map_make_new>:
    7ff8:	af 92       	push	r10
    7ffa:	bf 92       	push	r11
    7ffc:	cf 92       	push	r12
    7ffe:	df 92       	push	r13
    8000:	ef 92       	push	r14
    8002:	ff 92       	push	r15
    8004:	0f 93       	push	r16
    8006:	1f 93       	push	r17
    8008:	cf 93       	push	r28
    800a:	df 93       	push	r29
    800c:	8c 01       	movw	r16, r24
    800e:	7b 01       	movw	r14, r22
    8010:	ba 01       	movw	r22, r20
    8012:	e9 01       	movw	r28, r18
    8014:	2e ef       	ldi	r18, 0xFE	; 254
    8016:	3f ef       	ldi	r19, 0xFF	; 255
    8018:	45 e0       	ldi	r20, 0x05	; 5
    801a:	50 e0       	ldi	r21, 0x00	; 0
    801c:	c7 01       	movw	r24, r14
    801e:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    8022:	c7 01       	movw	r24, r14
    8024:	02 96       	adiw	r24, 0x02	; 2
    8026:	88 0f       	add	r24, r24
    8028:	99 1f       	adc	r25, r25
    802a:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    802e:	6c 01       	movw	r12, r24
    8030:	fc 01       	movw	r30, r24
    8032:	11 83       	std	Z+1, r17	; 0x01
    8034:	00 83       	st	Z, r16
    8036:	f1 e0       	ldi	r31, 0x01	; 1
    8038:	ef 1a       	sub	r14, r31
    803a:	f1 08       	sbc	r15, r1
    803c:	fc 01       	movw	r30, r24
    803e:	f3 82       	std	Z+3, r15	; 0x03
    8040:	e2 82       	std	Z+2, r14	; 0x02
    8042:	88 81       	ld	r24, Y
    8044:	99 81       	ldd	r25, Y+1	; 0x01
    8046:	95 83       	std	Z+5, r25	; 0x05
    8048:	84 83       	std	Z+4, r24	; 0x04
    804a:	e1 14       	cp	r14, r1
    804c:	f1 04       	cpc	r15, r1
    804e:	c1 f0       	breq	.+48     	; 0x8080 <map_make_new+0x88>
    8050:	8e 01       	movw	r16, r28
    8052:	0e 5f       	subi	r16, 0xFE	; 254
    8054:	1f 4f       	sbci	r17, 0xFF	; 255
    8056:	56 01       	movw	r10, r12
    8058:	f6 e0       	ldi	r31, 0x06	; 6
    805a:	af 0e       	add	r10, r31
    805c:	b1 1c       	adc	r11, r1
    805e:	c0 e0       	ldi	r28, 0x00	; 0
    8060:	d0 e0       	ldi	r29, 0x00	; 0
    8062:	21 96       	adiw	r28, 0x01	; 1
    8064:	60 e0       	ldi	r22, 0x00	; 0
    8066:	70 e0       	ldi	r23, 0x00	; 0
    8068:	f8 01       	movw	r30, r16
    806a:	81 91       	ld	r24, Z+
    806c:	91 91       	ld	r25, Z+
    806e:	8f 01       	movw	r16, r30
    8070:	4c df       	rcall	.-360    	; 0x7f0a <mp_getiter>
    8072:	f5 01       	movw	r30, r10
    8074:	81 93       	st	Z+, r24
    8076:	91 93       	st	Z+, r25
    8078:	5f 01       	movw	r10, r30
    807a:	ce 15       	cp	r28, r14
    807c:	df 05       	cpc	r29, r15
    807e:	88 f3       	brcs	.-30     	; 0x8062 <map_make_new+0x6a>
    8080:	c6 01       	movw	r24, r12
    8082:	df 91       	pop	r29
    8084:	cf 91       	pop	r28
    8086:	1f 91       	pop	r17
    8088:	0f 91       	pop	r16
    808a:	ff 90       	pop	r15
    808c:	ef 90       	pop	r14
    808e:	df 90       	pop	r13
    8090:	cf 90       	pop	r12
    8092:	bf 90       	pop	r11
    8094:	af 90       	pop	r10
    8096:	08 95       	ret

00008098 <zip_make_new>:
    8098:	af 92       	push	r10
    809a:	bf 92       	push	r11
    809c:	cf 92       	push	r12
    809e:	df 92       	push	r13
    80a0:	ef 92       	push	r14
    80a2:	ff 92       	push	r15
    80a4:	0f 93       	push	r16
    80a6:	1f 93       	push	r17
    80a8:	cf 93       	push	r28
    80aa:	df 93       	push	r29
    80ac:	ec 01       	movw	r28, r24
    80ae:	6b 01       	movw	r12, r22
    80b0:	ba 01       	movw	r22, r20
    80b2:	e2 2e       	mov	r14, r18
    80b4:	f3 2e       	mov	r15, r19
    80b6:	2e ef       	ldi	r18, 0xFE	; 254
    80b8:	3f ef       	ldi	r19, 0xFF	; 255
    80ba:	41 e0       	ldi	r20, 0x01	; 1
    80bc:	50 e0       	ldi	r21, 0x00	; 0
    80be:	c6 01       	movw	r24, r12
    80c0:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    80c4:	c6 01       	movw	r24, r12
    80c6:	02 96       	adiw	r24, 0x02	; 2
    80c8:	88 0f       	add	r24, r24
    80ca:	99 1f       	adc	r25, r25
    80cc:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    80d0:	5c 01       	movw	r10, r24
    80d2:	fc 01       	movw	r30, r24
    80d4:	d1 83       	std	Z+1, r29	; 0x01
    80d6:	c0 83       	st	Z, r28
    80d8:	d3 82       	std	Z+3, r13	; 0x03
    80da:	c2 82       	std	Z+2, r12	; 0x02
    80dc:	c1 14       	cp	r12, r1
    80de:	d1 04       	cpc	r13, r1
    80e0:	b9 f0       	breq	.+46     	; 0x8110 <zip_make_new+0x78>
    80e2:	0e 2d       	mov	r16, r14
    80e4:	1f 2d       	mov	r17, r15
    80e6:	7c 01       	movw	r14, r24
    80e8:	f4 e0       	ldi	r31, 0x04	; 4
    80ea:	ef 0e       	add	r14, r31
    80ec:	f1 1c       	adc	r15, r1
    80ee:	c0 e0       	ldi	r28, 0x00	; 0
    80f0:	d0 e0       	ldi	r29, 0x00	; 0
    80f2:	60 e0       	ldi	r22, 0x00	; 0
    80f4:	70 e0       	ldi	r23, 0x00	; 0
    80f6:	f8 01       	movw	r30, r16
    80f8:	81 91       	ld	r24, Z+
    80fa:	91 91       	ld	r25, Z+
    80fc:	8f 01       	movw	r16, r30
    80fe:	05 df       	rcall	.-502    	; 0x7f0a <mp_getiter>
    8100:	f7 01       	movw	r30, r14
    8102:	81 93       	st	Z+, r24
    8104:	91 93       	st	Z+, r25
    8106:	7f 01       	movw	r14, r30
    8108:	21 96       	adiw	r28, 0x01	; 1
    810a:	cc 16       	cp	r12, r28
    810c:	dd 06       	cpc	r13, r29
    810e:	89 f7       	brne	.-30     	; 0x80f2 <zip_make_new+0x5a>
    8110:	c5 01       	movw	r24, r10
    8112:	df 91       	pop	r29
    8114:	cf 91       	pop	r28
    8116:	1f 91       	pop	r17
    8118:	0f 91       	pop	r16
    811a:	ff 90       	pop	r15
    811c:	ef 90       	pop	r14
    811e:	df 90       	pop	r13
    8120:	cf 90       	pop	r12
    8122:	bf 90       	pop	r11
    8124:	af 90       	pop	r10
    8126:	08 95       	ret

00008128 <mp_arg_parse_all>:
    8128:	2f 92       	push	r2
    812a:	3f 92       	push	r3
    812c:	4f 92       	push	r4
    812e:	5f 92       	push	r5
    8130:	6f 92       	push	r6
    8132:	7f 92       	push	r7
    8134:	8f 92       	push	r8
    8136:	9f 92       	push	r9
    8138:	af 92       	push	r10
    813a:	bf 92       	push	r11
    813c:	cf 92       	push	r12
    813e:	df 92       	push	r13
    8140:	ef 92       	push	r14
    8142:	ff 92       	push	r15
    8144:	0f 93       	push	r16
    8146:	1f 93       	push	r17
    8148:	cf 93       	push	r28
    814a:	df 93       	push	r29
    814c:	00 d0       	rcall	.+0      	; 0x814e <mp_arg_parse_all+0x26>
    814e:	00 d0       	rcall	.+0      	; 0x8150 <mp_arg_parse_all+0x28>
    8150:	cd b7       	in	r28, 0x3d	; 61
    8152:	de b7       	in	r29, 0x3e	; 62
    8154:	5c 01       	movw	r10, r24
    8156:	1a 01       	movw	r2, r20
    8158:	39 01       	movw	r6, r18
    815a:	23 2b       	or	r18, r19
    815c:	09 f4       	brne	.+2      	; 0x8160 <mp_arg_parse_all+0x38>
    815e:	74 c0       	rjmp	.+232    	; 0x8248 <mp_arg_parse_all+0x120>
    8160:	0b 83       	std	Y+3, r16	; 0x03
    8162:	1c 83       	std	Y+4, r17	; 0x04
    8164:	ce 2c       	mov	r12, r14
    8166:	df 2c       	mov	r13, r15
    8168:	e6 2e       	mov	r14, r22
    816a:	f7 2e       	mov	r15, r23
    816c:	00 e0       	ldi	r16, 0x00	; 0
    816e:	10 e0       	ldi	r17, 0x00	; 0
    8170:	41 2c       	mov	r4, r1
    8172:	51 2c       	mov	r5, r1
    8174:	81 2c       	mov	r8, r1
    8176:	91 2c       	mov	r9, r1
    8178:	0a 15       	cp	r16, r10
    817a:	1b 05       	cpc	r17, r11
    817c:	68 f4       	brcc	.+26     	; 0x8198 <mp_arg_parse_all+0x70>
    817e:	eb 81       	ldd	r30, Y+3	; 0x03
    8180:	fc 81       	ldd	r31, Y+4	; 0x04
    8182:	82 81       	ldd	r24, Z+2	; 0x02
    8184:	93 81       	ldd	r25, Z+3	; 0x03
    8186:	91 fd       	sbrc	r25, 1
    8188:	66 c0       	rjmp	.+204    	; 0x8256 <mp_arg_parse_all+0x12e>
    818a:	ff ef       	ldi	r31, 0xFF	; 255
    818c:	8f 1a       	sub	r8, r31
    818e:	9f 0a       	sbc	r9, r31
    8190:	f7 01       	movw	r30, r14
    8192:	80 81       	ld	r24, Z
    8194:	91 81       	ldd	r25, Z+1	; 0x01
    8196:	28 c0       	rjmp	.+80     	; 0x81e8 <mp_arg_parse_all+0xc0>
    8198:	8b 81       	ldd	r24, Y+3	; 0x03
    819a:	9c 81       	ldd	r25, Y+4	; 0x04
    819c:	9a 83       	std	Y+2, r25	; 0x02
    819e:	89 83       	std	Y+1, r24	; 0x01
    81a0:	fc 01       	movw	r30, r24
    81a2:	60 81       	ld	r22, Z
    81a4:	71 81       	ldd	r23, Z+1	; 0x01
    81a6:	66 0f       	add	r22, r22
    81a8:	77 1f       	adc	r23, r23
    81aa:	66 0f       	add	r22, r22
    81ac:	77 1f       	adc	r23, r23
    81ae:	66 0f       	add	r22, r22
    81b0:	77 1f       	adc	r23, r23
    81b2:	62 60       	ori	r22, 0x02	; 2
    81b4:	40 e0       	ldi	r20, 0x00	; 0
    81b6:	c1 01       	movw	r24, r2
    81b8:	7a db       	rcall	.-2316   	; 0x78ae <mp_map_lookup>
    81ba:	00 97       	sbiw	r24, 0x00	; 0
    81bc:	79 f4       	brne	.+30     	; 0x81dc <mp_arg_parse_all+0xb4>
    81be:	eb 81       	ldd	r30, Y+3	; 0x03
    81c0:	fc 81       	ldd	r31, Y+4	; 0x04
    81c2:	82 81       	ldd	r24, Z+2	; 0x02
    81c4:	93 81       	ldd	r25, Z+3	; 0x03
    81c6:	90 fd       	sbrc	r25, 0
    81c8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <mp_arg_error_terse_mismatch>
    81cc:	e9 81       	ldd	r30, Y+1	; 0x01
    81ce:	fa 81       	ldd	r31, Y+2	; 0x02
    81d0:	84 81       	ldd	r24, Z+4	; 0x04
    81d2:	95 81       	ldd	r25, Z+5	; 0x05
    81d4:	f6 01       	movw	r30, r12
    81d6:	91 83       	std	Z+1, r25	; 0x01
    81d8:	80 83       	st	Z, r24
    81da:	24 c0       	rjmp	.+72     	; 0x8224 <mp_arg_parse_all+0xfc>
    81dc:	ff ef       	ldi	r31, 0xFF	; 255
    81de:	4f 1a       	sub	r4, r31
    81e0:	5f 0a       	sbc	r5, r31
    81e2:	fc 01       	movw	r30, r24
    81e4:	82 81       	ldd	r24, Z+2	; 0x02
    81e6:	93 81       	ldd	r25, Z+3	; 0x03
    81e8:	eb 81       	ldd	r30, Y+3	; 0x03
    81ea:	fc 81       	ldd	r31, Y+4	; 0x04
    81ec:	22 81       	ldd	r18, Z+2	; 0x02
    81ee:	33 81       	ldd	r19, Z+3	; 0x03
    81f0:	33 27       	eor	r19, r19
    81f2:	21 30       	cpi	r18, 0x01	; 1
    81f4:	31 05       	cpc	r19, r1
    81f6:	29 f4       	brne	.+10     	; 0x8202 <mp_arg_parse_all+0xda>
    81f8:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
    81fc:	f6 01       	movw	r30, r12
    81fe:	80 83       	st	Z, r24
    8200:	11 c0       	rjmp	.+34     	; 0x8224 <mp_arg_parse_all+0xfc>
    8202:	22 30       	cpi	r18, 0x02	; 2
    8204:	31 05       	cpc	r19, r1
    8206:	31 f4       	brne	.+12     	; 0x8214 <mp_arg_parse_all+0xec>
    8208:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    820c:	f6 01       	movw	r30, r12
    820e:	91 83       	std	Z+1, r25	; 0x01
    8210:	80 83       	st	Z, r24
    8212:	08 c0       	rjmp	.+16     	; 0x8224 <mp_arg_parse_all+0xfc>
    8214:	23 30       	cpi	r18, 0x03	; 3
    8216:	31 05       	cpc	r19, r1
    8218:	11 f0       	breq	.+4      	; 0x821e <mp_arg_parse_all+0xf6>
    821a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    821e:	f6 01       	movw	r30, r12
    8220:	91 83       	std	Z+1, r25	; 0x01
    8222:	80 83       	st	Z, r24
    8224:	0f 5f       	subi	r16, 0xFF	; 255
    8226:	1f 4f       	sbci	r17, 0xFF	; 255
    8228:	8b 81       	ldd	r24, Y+3	; 0x03
    822a:	9c 81       	ldd	r25, Y+4	; 0x04
    822c:	06 96       	adiw	r24, 0x06	; 6
    822e:	9c 83       	std	Y+4, r25	; 0x04
    8230:	8b 83       	std	Y+3, r24	; 0x03
    8232:	92 e0       	ldi	r25, 0x02	; 2
    8234:	c9 0e       	add	r12, r25
    8236:	d1 1c       	adc	r13, r1
    8238:	e2 e0       	ldi	r30, 0x02	; 2
    823a:	ee 0e       	add	r14, r30
    823c:	f1 1c       	adc	r15, r1
    823e:	60 16       	cp	r6, r16
    8240:	71 06       	cpc	r7, r17
    8242:	09 f0       	breq	.+2      	; 0x8246 <mp_arg_parse_all+0x11e>
    8244:	99 cf       	rjmp	.-206    	; 0x8178 <mp_arg_parse_all+0x50>
    8246:	04 c0       	rjmp	.+8      	; 0x8250 <mp_arg_parse_all+0x128>
    8248:	41 2c       	mov	r4, r1
    824a:	51 2c       	mov	r5, r1
    824c:	81 2c       	mov	r8, r1
    824e:	91 2c       	mov	r9, r1
    8250:	8a 14       	cp	r8, r10
    8252:	9b 04       	cpc	r9, r11
    8254:	10 f4       	brcc	.+4      	; 0x825a <mp_arg_parse_all+0x132>
    8256:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <mp_arg_error_terse_mismatch>
    825a:	f1 01       	movw	r30, r2
    825c:	20 81       	ld	r18, Z
    825e:	26 95       	lsr	r18
    8260:	26 95       	lsr	r18
    8262:	26 95       	lsr	r18
    8264:	31 81       	ldd	r19, Z+1	; 0x01
    8266:	43 2f       	mov	r20, r19
    8268:	42 95       	swap	r20
    826a:	44 0f       	add	r20, r20
    826c:	40 7e       	andi	r20, 0xE0	; 224
    826e:	84 2f       	mov	r24, r20
    8270:	82 2b       	or	r24, r18
    8272:	93 2f       	mov	r25, r19
    8274:	96 95       	lsr	r25
    8276:	96 95       	lsr	r25
    8278:	96 95       	lsr	r25
    827a:	48 16       	cp	r4, r24
    827c:	59 06       	cpc	r5, r25
    827e:	10 f4       	brcc	.+4      	; 0x8284 <mp_arg_parse_all+0x15c>
    8280:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <mp_arg_error_terse_mismatch>
    8284:	0f 90       	pop	r0
    8286:	0f 90       	pop	r0
    8288:	0f 90       	pop	r0
    828a:	0f 90       	pop	r0
    828c:	df 91       	pop	r29
    828e:	cf 91       	pop	r28
    8290:	1f 91       	pop	r17
    8292:	0f 91       	pop	r16
    8294:	ff 90       	pop	r15
    8296:	ef 90       	pop	r14
    8298:	df 90       	pop	r13
    829a:	cf 90       	pop	r12
    829c:	bf 90       	pop	r11
    829e:	af 90       	pop	r10
    82a0:	9f 90       	pop	r9
    82a2:	8f 90       	pop	r8
    82a4:	7f 90       	pop	r7
    82a6:	6f 90       	pop	r6
    82a8:	5f 90       	pop	r5
    82aa:	4f 90       	pop	r4
    82ac:	3f 90       	pop	r3
    82ae:	2f 90       	pop	r2
    82b0:	08 95       	ret

000082b2 <mp_builtin_print>:
    82b2:	2f 92       	push	r2
    82b4:	3f 92       	push	r3
    82b6:	4f 92       	push	r4
    82b8:	5f 92       	push	r5
    82ba:	6f 92       	push	r6
    82bc:	7f 92       	push	r7
    82be:	8f 92       	push	r8
    82c0:	9f 92       	push	r9
    82c2:	af 92       	push	r10
    82c4:	bf 92       	push	r11
    82c6:	cf 92       	push	r12
    82c8:	df 92       	push	r13
    82ca:	ef 92       	push	r14
    82cc:	ff 92       	push	r15
    82ce:	0f 93       	push	r16
    82d0:	1f 93       	push	r17
    82d2:	cf 93       	push	r28
    82d4:	df 93       	push	r29
    82d6:	00 d0       	rcall	.+0      	; 0x82d8 <mp_builtin_print+0x26>
    82d8:	00 d0       	rcall	.+0      	; 0x82da <mp_builtin_print+0x28>
    82da:	cd b7       	in	r28, 0x3d	; 61
    82dc:	de b7       	in	r29, 0x3e	; 62
    82de:	4c 01       	movw	r8, r24
    82e0:	26 2e       	mov	r2, r22
    82e2:	37 2e       	mov	r3, r23
    82e4:	ce 01       	movw	r24, r28
    82e6:	01 96       	adiw	r24, 0x01	; 1
    82e8:	7c 01       	movw	r14, r24
    82ea:	04 e6       	ldi	r16, 0x64	; 100
    82ec:	17 e1       	ldi	r17, 0x17	; 23
    82ee:	22 e0       	ldi	r18, 0x02	; 2
    82f0:	30 e0       	ldi	r19, 0x00	; 0
    82f2:	60 e0       	ldi	r22, 0x00	; 0
    82f4:	70 e0       	ldi	r23, 0x00	; 0
    82f6:	80 e0       	ldi	r24, 0x00	; 0
    82f8:	90 e0       	ldi	r25, 0x00	; 0
    82fa:	16 df       	rcall	.-468    	; 0x8128 <mp_arg_parse_all>
    82fc:	cb 80       	ldd	r12, Y+3	; 0x03
    82fe:	dc 80       	ldd	r13, Y+4	; 0x04
    8300:	b7 01       	movw	r22, r14
    8302:	89 81       	ldd	r24, Y+1	; 0x01
    8304:	9a 81       	ldd	r25, Y+2	; 0x02
    8306:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
    830a:	3c 01       	movw	r6, r24
    830c:	be 01       	movw	r22, r28
    830e:	6d 5f       	subi	r22, 0xFD	; 253
    8310:	7f 4f       	sbci	r23, 0xFF	; 255
    8312:	c6 01       	movw	r24, r12
    8314:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
    8318:	2c 01       	movw	r4, r24
    831a:	81 14       	cp	r8, r1
    831c:	91 04       	cpc	r9, r1
    831e:	19 f1       	breq	.+70     	; 0x8366 <mp_builtin_print+0xb4>
    8320:	a2 2c       	mov	r10, r2
    8322:	b3 2c       	mov	r11, r3
    8324:	c1 2c       	mov	r12, r1
    8326:	d1 2c       	mov	r13, r1
    8328:	0f c0       	rjmp	.+30     	; 0x8348 <mp_builtin_print+0x96>
    832a:	c1 14       	cp	r12, r1
    832c:	d1 04       	cpc	r13, r1
    832e:	61 f0       	breq	.+24     	; 0x8348 <mp_builtin_print+0x96>
    8330:	49 81       	ldd	r20, Y+1	; 0x01
    8332:	5a 81       	ldd	r21, Y+2	; 0x02
    8334:	e1 2c       	mov	r14, r1
    8336:	f1 2c       	mov	r15, r1
    8338:	00 e0       	ldi	r16, 0x00	; 0
    833a:	20 e0       	ldi	r18, 0x00	; 0
    833c:	30 e0       	ldi	r19, 0x00	; 0
    833e:	b3 01       	movw	r22, r6
    8340:	8b e1       	ldi	r24, 0x1B	; 27
    8342:	9a e2       	ldi	r25, 0x2A	; 42
    8344:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    8348:	f5 01       	movw	r30, r10
    834a:	61 91       	ld	r22, Z+
    834c:	71 91       	ld	r23, Z+
    834e:	5f 01       	movw	r10, r30
    8350:	40 e0       	ldi	r20, 0x00	; 0
    8352:	8b e1       	ldi	r24, 0x1B	; 27
    8354:	9a e2       	ldi	r25, 0x2A	; 42
    8356:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    835a:	ff ef       	ldi	r31, 0xFF	; 255
    835c:	cf 1a       	sub	r12, r31
    835e:	df 0a       	sbc	r13, r31
    8360:	8c 14       	cp	r8, r12
    8362:	9d 04       	cpc	r9, r13
    8364:	11 f7       	brne	.-60     	; 0x832a <mp_builtin_print+0x78>
    8366:	4b 81       	ldd	r20, Y+3	; 0x03
    8368:	5c 81       	ldd	r21, Y+4	; 0x04
    836a:	e1 2c       	mov	r14, r1
    836c:	f1 2c       	mov	r15, r1
    836e:	00 e0       	ldi	r16, 0x00	; 0
    8370:	20 e0       	ldi	r18, 0x00	; 0
    8372:	30 e0       	ldi	r19, 0x00	; 0
    8374:	b2 01       	movw	r22, r4
    8376:	8b e1       	ldi	r24, 0x1B	; 27
    8378:	9a e2       	ldi	r25, 0x2A	; 42
    837a:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
    837e:	86 e0       	ldi	r24, 0x06	; 6
    8380:	90 e0       	ldi	r25, 0x00	; 0
    8382:	0f 90       	pop	r0
    8384:	0f 90       	pop	r0
    8386:	0f 90       	pop	r0
    8388:	0f 90       	pop	r0
    838a:	df 91       	pop	r29
    838c:	cf 91       	pop	r28
    838e:	1f 91       	pop	r17
    8390:	0f 91       	pop	r16
    8392:	ff 90       	pop	r15
    8394:	ef 90       	pop	r14
    8396:	df 90       	pop	r13
    8398:	cf 90       	pop	r12
    839a:	bf 90       	pop	r11
    839c:	af 90       	pop	r10
    839e:	9f 90       	pop	r9
    83a0:	8f 90       	pop	r8
    83a2:	7f 90       	pop	r7
    83a4:	6f 90       	pop	r6
    83a6:	5f 90       	pop	r5
    83a8:	4f 90       	pop	r4
    83aa:	3f 90       	pop	r3
    83ac:	2f 90       	pop	r2
    83ae:	08 95       	ret

000083b0 <dict_binary_op>:
    83b0:	cf 92       	push	r12
    83b2:	df 92       	push	r13
    83b4:	ef 92       	push	r14
    83b6:	ff 92       	push	r15
    83b8:	0f 93       	push	r16
    83ba:	1f 93       	push	r17
    83bc:	cf 93       	push	r28
    83be:	df 93       	push	r29
    83c0:	00 d0       	rcall	.+0      	; 0x83c2 <dict_binary_op+0x12>
    83c2:	cd b7       	in	r28, 0x3d	; 61
    83c4:	de b7       	in	r29, 0x3e	; 62
    83c6:	8b 01       	movw	r16, r22
    83c8:	ba 01       	movw	r22, r20
    83ca:	82 30       	cpi	r24, 0x02	; 2
    83cc:	69 f0       	breq	.+26     	; 0x83e8 <dict_binary_op+0x38>
    83ce:	84 32       	cpi	r24, 0x24	; 36
    83d0:	09 f0       	breq	.+2      	; 0x83d4 <dict_binary_op+0x24>
    83d2:	68 c0       	rjmp	.+208    	; 0x84a4 <dict_binary_op+0xf4>
    83d4:	40 e0       	ldi	r20, 0x00	; 0
    83d6:	c8 01       	movw	r24, r16
    83d8:	02 96       	adiw	r24, 0x02	; 2
    83da:	69 da       	rcall	.-2862   	; 0x78ae <mp_map_lookup>
    83dc:	89 2b       	or	r24, r25
    83de:	09 f0       	breq	.+2      	; 0x83e2 <dict_binary_op+0x32>
    83e0:	64 c0       	rjmp	.+200    	; 0x84aa <dict_binary_op+0xfa>
    83e2:	8e e0       	ldi	r24, 0x0E	; 14
    83e4:	90 e0       	ldi	r25, 0x00	; 0
    83e6:	69 c0       	rjmp	.+210    	; 0x84ba <dict_binary_op+0x10a>
    83e8:	ca 01       	movw	r24, r20
    83ea:	83 70       	andi	r24, 0x03	; 3
    83ec:	99 27       	eor	r25, r25
    83ee:	89 2b       	or	r24, r25
    83f0:	09 f0       	breq	.+2      	; 0x83f4 <dict_binary_op+0x44>
    83f2:	5e c0       	rjmp	.+188    	; 0x84b0 <dict_binary_op+0x100>
    83f4:	fa 01       	movw	r30, r20
    83f6:	80 81       	ld	r24, Z
    83f8:	91 81       	ldd	r25, Z+1	; 0x01
    83fa:	88 57       	subi	r24, 0x78	; 120
    83fc:	92 42       	sbci	r25, 0x22	; 34
    83fe:	09 f0       	breq	.+2      	; 0x8402 <dict_binary_op+0x52>
    8400:	5a c0       	rjmp	.+180    	; 0x84b6 <dict_binary_op+0x106>
    8402:	f8 01       	movw	r30, r16
    8404:	82 81       	ldd	r24, Z+2	; 0x02
    8406:	86 95       	lsr	r24
    8408:	86 95       	lsr	r24
    840a:	86 95       	lsr	r24
    840c:	93 81       	ldd	r25, Z+3	; 0x03
    840e:	49 2f       	mov	r20, r25
    8410:	42 95       	swap	r20
    8412:	44 0f       	add	r20, r20
    8414:	40 7e       	andi	r20, 0xE0	; 224
    8416:	24 2f       	mov	r18, r20
    8418:	28 2b       	or	r18, r24
    841a:	39 2f       	mov	r19, r25
    841c:	36 95       	lsr	r19
    841e:	36 95       	lsr	r19
    8420:	36 95       	lsr	r19
    8422:	fb 01       	movw	r30, r22
    8424:	42 81       	ldd	r20, Z+2	; 0x02
    8426:	46 95       	lsr	r20
    8428:	46 95       	lsr	r20
    842a:	46 95       	lsr	r20
    842c:	53 81       	ldd	r21, Z+3	; 0x03
    842e:	e5 2f       	mov	r30, r21
    8430:	e2 95       	swap	r30
    8432:	ee 0f       	add	r30, r30
    8434:	e0 7e       	andi	r30, 0xE0	; 224
    8436:	8e 2f       	mov	r24, r30
    8438:	84 2b       	or	r24, r20
    843a:	95 2f       	mov	r25, r21
    843c:	96 95       	lsr	r25
    843e:	96 95       	lsr	r25
    8440:	96 95       	lsr	r25
    8442:	28 17       	cp	r18, r24
    8444:	39 07       	cpc	r19, r25
    8446:	29 f5       	brne	.+74     	; 0x8492 <dict_binary_op+0xe2>
    8448:	1a 82       	std	Y+2, r1	; 0x02
    844a:	19 82       	std	Y+1, r1	; 0x01
    844c:	7b 01       	movw	r14, r22
    844e:	f2 e0       	ldi	r31, 0x02	; 2
    8450:	ef 0e       	add	r14, r31
    8452:	f1 1c       	adc	r15, r1
    8454:	12 c0       	rjmp	.+36     	; 0x847a <dict_binary_op+0xca>
    8456:	f6 01       	movw	r30, r12
    8458:	60 81       	ld	r22, Z
    845a:	71 81       	ldd	r23, Z+1	; 0x01
    845c:	40 e0       	ldi	r20, 0x00	; 0
    845e:	c7 01       	movw	r24, r14
    8460:	26 da       	rcall	.-2996   	; 0x78ae <mp_map_lookup>
    8462:	00 97       	sbiw	r24, 0x00	; 0
    8464:	c9 f0       	breq	.+50     	; 0x8498 <dict_binary_op+0xe8>
    8466:	fc 01       	movw	r30, r24
    8468:	62 81       	ldd	r22, Z+2	; 0x02
    846a:	73 81       	ldd	r23, Z+3	; 0x03
    846c:	f6 01       	movw	r30, r12
    846e:	82 81       	ldd	r24, Z+2	; 0x02
    8470:	93 81       	ldd	r25, Z+3	; 0x03
    8472:	0e 94 e6 20 	call	0x41cc	; 0x41cc <mp_obj_equal>
    8476:	88 23       	and	r24, r24
    8478:	91 f0       	breq	.+36     	; 0x849e <dict_binary_op+0xee>
    847a:	be 01       	movw	r22, r28
    847c:	6f 5f       	subi	r22, 0xFF	; 255
    847e:	7f 4f       	sbci	r23, 0xFF	; 255
    8480:	c8 01       	movw	r24, r16
    8482:	0e 94 ba 04 	call	0x974	; 0x974 <dict_iter_next>
    8486:	6c 01       	movw	r12, r24
    8488:	89 2b       	or	r24, r25
    848a:	29 f7       	brne	.-54     	; 0x8456 <dict_binary_op+0xa6>
    848c:	8e e1       	ldi	r24, 0x1E	; 30
    848e:	90 e0       	ldi	r25, 0x00	; 0
    8490:	14 c0       	rjmp	.+40     	; 0x84ba <dict_binary_op+0x10a>
    8492:	8e e0       	ldi	r24, 0x0E	; 14
    8494:	90 e0       	ldi	r25, 0x00	; 0
    8496:	11 c0       	rjmp	.+34     	; 0x84ba <dict_binary_op+0x10a>
    8498:	8e e0       	ldi	r24, 0x0E	; 14
    849a:	90 e0       	ldi	r25, 0x00	; 0
    849c:	0e c0       	rjmp	.+28     	; 0x84ba <dict_binary_op+0x10a>
    849e:	8e e0       	ldi	r24, 0x0E	; 14
    84a0:	90 e0       	ldi	r25, 0x00	; 0
    84a2:	0b c0       	rjmp	.+22     	; 0x84ba <dict_binary_op+0x10a>
    84a4:	80 e0       	ldi	r24, 0x00	; 0
    84a6:	90 e0       	ldi	r25, 0x00	; 0
    84a8:	08 c0       	rjmp	.+16     	; 0x84ba <dict_binary_op+0x10a>
    84aa:	8e e1       	ldi	r24, 0x1E	; 30
    84ac:	90 e0       	ldi	r25, 0x00	; 0
    84ae:	05 c0       	rjmp	.+10     	; 0x84ba <dict_binary_op+0x10a>
    84b0:	8e e0       	ldi	r24, 0x0E	; 14
    84b2:	90 e0       	ldi	r25, 0x00	; 0
    84b4:	02 c0       	rjmp	.+4      	; 0x84ba <dict_binary_op+0x10a>
    84b6:	8e e0       	ldi	r24, 0x0E	; 14
    84b8:	90 e0       	ldi	r25, 0x00	; 0
    84ba:	0f 90       	pop	r0
    84bc:	0f 90       	pop	r0
    84be:	df 91       	pop	r29
    84c0:	cf 91       	pop	r28
    84c2:	1f 91       	pop	r17
    84c4:	0f 91       	pop	r16
    84c6:	ff 90       	pop	r15
    84c8:	ef 90       	pop	r14
    84ca:	df 90       	pop	r13
    84cc:	cf 90       	pop	r12
    84ce:	08 95       	ret

000084d0 <dict_view_binary_op>:
    84d0:	fb 01       	movw	r30, r22
    84d2:	94 81       	ldd	r25, Z+4	; 0x04
    84d4:	91 30       	cpi	r25, 0x01	; 1
    84d6:	31 f4       	brne	.+12     	; 0x84e4 <dict_view_binary_op+0x14>
    84d8:	84 32       	cpi	r24, 0x24	; 36
    84da:	39 f4       	brne	.+14     	; 0x84ea <dict_view_binary_op+0x1a>
    84dc:	62 81       	ldd	r22, Z+2	; 0x02
    84de:	73 81       	ldd	r23, Z+3	; 0x03
    84e0:	67 cf       	rjmp	.-306    	; 0x83b0 <dict_binary_op>
    84e2:	08 95       	ret
    84e4:	80 e0       	ldi	r24, 0x00	; 0
    84e6:	90 e0       	ldi	r25, 0x00	; 0
    84e8:	08 95       	ret
    84ea:	80 e0       	ldi	r24, 0x00	; 0
    84ec:	90 e0       	ldi	r25, 0x00	; 0
    84ee:	08 95       	ret

000084f0 <mp_obj_dict_store>:
    84f0:	ef 92       	push	r14
    84f2:	ff 92       	push	r15
    84f4:	0f 93       	push	r16
    84f6:	1f 93       	push	r17
    84f8:	cf 93       	push	r28
    84fa:	df 93       	push	r29
    84fc:	ec 01       	movw	r28, r24
    84fe:	7b 01       	movw	r14, r22
    8500:	8a 01       	movw	r16, r20
    8502:	83 70       	andi	r24, 0x03	; 3
    8504:	99 27       	eor	r25, r25
    8506:	89 2b       	or	r24, r25
    8508:	39 f4       	brne	.+14     	; 0x8518 <mp_obj_dict_store+0x28>
    850a:	e8 81       	ld	r30, Y
    850c:	f9 81       	ldd	r31, Y+1	; 0x01
    850e:	80 85       	ldd	r24, Z+8	; 0x08
    8510:	91 85       	ldd	r25, Z+9	; 0x09
    8512:	8a 5a       	subi	r24, 0xAA	; 170
    8514:	99 48       	sbci	r25, 0x89	; 137
    8516:	11 f0       	breq	.+4      	; 0x851c <mp_obj_dict_store+0x2c>
    8518:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    851c:	ce 01       	movw	r24, r28
    851e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <mp_ensure_not_fixed>
    8522:	41 e0       	ldi	r20, 0x01	; 1
    8524:	b7 01       	movw	r22, r14
    8526:	ce 01       	movw	r24, r28
    8528:	02 96       	adiw	r24, 0x02	; 2
    852a:	c1 d9       	rcall	.-3198   	; 0x78ae <mp_map_lookup>
    852c:	fc 01       	movw	r30, r24
    852e:	13 83       	std	Z+3, r17	; 0x03
    8530:	02 83       	std	Z+2, r16	; 0x02
    8532:	ce 01       	movw	r24, r28
    8534:	df 91       	pop	r29
    8536:	cf 91       	pop	r28
    8538:	1f 91       	pop	r17
    853a:	0f 91       	pop	r16
    853c:	ff 90       	pop	r15
    853e:	ef 90       	pop	r14
    8540:	08 95       	ret

00008542 <mp_store_name>:
    8542:	ab 01       	movw	r20, r22
    8544:	88 0f       	add	r24, r24
    8546:	99 1f       	adc	r25, r25
    8548:	88 0f       	add	r24, r24
    854a:	99 1f       	adc	r25, r25
    854c:	88 0f       	add	r24, r24
    854e:	99 1f       	adc	r25, r25
    8550:	bc 01       	movw	r22, r24
    8552:	62 60       	ori	r22, 0x02	; 2
    8554:	80 91 5e 6b 	lds	r24, 0x6B5E	; 0x806b5e <mp_state_ctx+0x4>
    8558:	90 91 5f 6b 	lds	r25, 0x6B5F	; 0x806b5f <mp_state_ctx+0x5>
    855c:	c9 cf       	rjmp	.-110    	; 0x84f0 <mp_obj_dict_store>
    855e:	08 95       	ret

00008560 <mp_store_global>:
    8560:	ab 01       	movw	r20, r22
    8562:	88 0f       	add	r24, r24
    8564:	99 1f       	adc	r25, r25
    8566:	88 0f       	add	r24, r24
    8568:	99 1f       	adc	r25, r25
    856a:	88 0f       	add	r24, r24
    856c:	99 1f       	adc	r25, r25
    856e:	bc 01       	movw	r22, r24
    8570:	62 60       	ori	r22, 0x02	; 2
    8572:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
    8576:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
    857a:	ba cf       	rjmp	.-140    	; 0x84f0 <mp_obj_dict_store>
    857c:	08 95       	ret

0000857e <module_print>:
    857e:	cf 93       	push	r28
    8580:	df 93       	push	r29
    8582:	c8 2f       	mov	r28, r24
    8584:	d9 2f       	mov	r29, r25
    8586:	fb 01       	movw	r30, r22
    8588:	82 81       	ldd	r24, Z+2	; 0x02
    858a:	93 81       	ldd	r25, Z+3	; 0x03
    858c:	40 e0       	ldi	r20, 0x00	; 0
    858e:	6a eb       	ldi	r22, 0xBA	; 186
    8590:	70 e0       	ldi	r23, 0x00	; 0
    8592:	02 96       	adiw	r24, 0x02	; 2
    8594:	8c d9       	rcall	.-3304   	; 0x78ae <mp_map_lookup>
    8596:	00 97       	sbiw	r24, 0x00	; 0
    8598:	31 f0       	breq	.+12     	; 0x85a6 <module_print+0x28>
    859a:	fc 01       	movw	r30, r24
    859c:	82 81       	ldd	r24, Z+2	; 0x02
    859e:	93 81       	ldd	r25, Z+3	; 0x03
    85a0:	0e 94 9c 29 	call	0x5338	; 0x5338 <mp_obj_str_get_str>
    85a4:	02 c0       	rjmp	.+4      	; 0x85aa <module_print+0x2c>
    85a6:	8d e4       	ldi	r24, 0x4D	; 77
    85a8:	9f e0       	ldi	r25, 0x0F	; 15
    85aa:	9f 93       	push	r25
    85ac:	8f 93       	push	r24
    85ae:	8b ef       	ldi	r24, 0xFB	; 251
    85b0:	96 e0       	ldi	r25, 0x06	; 6
    85b2:	9f 93       	push	r25
    85b4:	8f 93       	push	r24
    85b6:	df 93       	push	r29
    85b8:	cf 93       	push	r28
    85ba:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    85be:	0f 90       	pop	r0
    85c0:	0f 90       	pop	r0
    85c2:	0f 90       	pop	r0
    85c4:	0f 90       	pop	r0
    85c6:	0f 90       	pop	r0
    85c8:	0f 90       	pop	r0
    85ca:	df 91       	pop	r29
    85cc:	cf 91       	pop	r28
    85ce:	08 95       	ret

000085d0 <mp_module_get>:
    85d0:	cf 93       	push	r28
    85d2:	df 93       	push	r29
    85d4:	88 0f       	add	r24, r24
    85d6:	99 1f       	adc	r25, r25
    85d8:	88 0f       	add	r24, r24
    85da:	99 1f       	adc	r25, r25
    85dc:	88 0f       	add	r24, r24
    85de:	99 1f       	adc	r25, r25
    85e0:	ec 01       	movw	r28, r24
    85e2:	c2 60       	ori	r28, 0x02	; 2
    85e4:	40 e0       	ldi	r20, 0x00	; 0
    85e6:	be 01       	movw	r22, r28
    85e8:	84 e7       	ldi	r24, 0x74	; 116
    85ea:	9b e6       	ldi	r25, 0x6B	; 107
    85ec:	60 d9       	rcall	.-3392   	; 0x78ae <mp_map_lookup>
    85ee:	00 97       	sbiw	r24, 0x00	; 0
    85f0:	39 f4       	brne	.+14     	; 0x8600 <mp_module_get+0x30>
    85f2:	40 e0       	ldi	r20, 0x00	; 0
    85f4:	be 01       	movw	r22, r28
    85f6:	8a ed       	ldi	r24, 0xDA	; 218
    85f8:	9c e1       	ldi	r25, 0x1C	; 28
    85fa:	59 d9       	rcall	.-3406   	; 0x78ae <mp_map_lookup>
    85fc:	00 97       	sbiw	r24, 0x00	; 0
    85fe:	21 f0       	breq	.+8      	; 0x8608 <mp_module_get+0x38>
    8600:	fc 01       	movw	r30, r24
    8602:	82 81       	ldd	r24, Z+2	; 0x02
    8604:	93 81       	ldd	r25, Z+3	; 0x03
    8606:	02 c0       	rjmp	.+4      	; 0x860c <mp_module_get+0x3c>
    8608:	80 e0       	ldi	r24, 0x00	; 0
    860a:	90 e0       	ldi	r25, 0x00	; 0
    860c:	df 91       	pop	r29
    860e:	cf 91       	pop	r28
    8610:	08 95       	ret

00008612 <mp_obj_class_lookup>:
    8612:	0f 93       	push	r16
    8614:	1f 93       	push	r17
    8616:	cf 93       	push	r28
    8618:	df 93       	push	r29
    861a:	8c 01       	movw	r16, r24
    861c:	eb 01       	movw	r28, r22
    861e:	dc 01       	movw	r26, r24
    8620:	16 96       	adiw	r26, 0x06	; 6
    8622:	ed 91       	ld	r30, X+
    8624:	fc 91       	ld	r31, X
    8626:	17 97       	sbiw	r26, 0x07	; 7
    8628:	80 81       	ld	r24, Z
    862a:	91 81       	ldd	r25, Z+1	; 0x01
    862c:	89 2b       	or	r24, r25
    862e:	11 f0       	breq	.+4      	; 0x8634 <mp_obj_class_lookup+0x22>
    8630:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    8634:	82 81       	ldd	r24, Z+2	; 0x02
    8636:	93 81       	ldd	r25, Z+3	; 0x03
    8638:	89 2b       	or	r24, r25
    863a:	11 f0       	breq	.+4      	; 0x8640 <mp_obj_class_lookup+0x2e>
    863c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    8640:	f8 01       	movw	r30, r16
    8642:	84 81       	ldd	r24, Z+4	; 0x04
    8644:	95 81       	ldd	r25, Z+5	; 0x05
    8646:	00 97       	sbiw	r24, 0x00	; 0
    8648:	b1 f0       	breq	.+44     	; 0x8676 <mp_obj_class_lookup+0x64>
    864a:	28 85       	ldd	r18, Y+8	; 0x08
    864c:	39 85       	ldd	r19, Y+9	; 0x09
    864e:	2f 53       	subi	r18, 0x3F	; 63
    8650:	3b 44       	sbci	r19, 0x4B	; 75
    8652:	89 f0       	breq	.+34     	; 0x8676 <mp_obj_class_lookup+0x64>
    8654:	fe 01       	movw	r30, r28
    8656:	e8 0f       	add	r30, r24
    8658:	f9 1f       	adc	r31, r25
    865a:	80 81       	ld	r24, Z
    865c:	91 81       	ldd	r25, Z+1	; 0x01
    865e:	89 2b       	or	r24, r25
    8660:	51 f0       	breq	.+20     	; 0x8676 <mp_obj_class_lookup+0x64>
    8662:	d8 01       	movw	r26, r16
    8664:	16 96       	adiw	r26, 0x06	; 6
    8666:	ed 91       	ld	r30, X+
    8668:	fc 91       	ld	r31, X
    866a:	17 97       	sbiw	r26, 0x07	; 7
    866c:	84 e0       	ldi	r24, 0x04	; 4
    866e:	90 e0       	ldi	r25, 0x00	; 0
    8670:	91 83       	std	Z+1, r25	; 0x01
    8672:	80 83       	st	Z, r24
    8674:	89 c0       	rjmp	.+274    	; 0x8788 <mp_obj_class_lookup+0x176>
    8676:	8e 8d       	ldd	r24, Y+30	; 0x1e
    8678:	9f 8d       	ldd	r25, Y+31	; 0x1f
    867a:	00 97       	sbiw	r24, 0x00	; 0
    867c:	09 f4       	brne	.+2      	; 0x8680 <mp_obj_class_lookup+0x6e>
    867e:	52 c0       	rjmp	.+164    	; 0x8724 <mp_obj_class_lookup+0x112>
    8680:	9c 01       	movw	r18, r24
    8682:	23 70       	andi	r18, 0x03	; 3
    8684:	33 27       	eor	r19, r19
    8686:	23 2b       	or	r18, r19
    8688:	41 f4       	brne	.+16     	; 0x869a <mp_obj_class_lookup+0x88>
    868a:	dc 01       	movw	r26, r24
    868c:	ed 91       	ld	r30, X+
    868e:	fc 91       	ld	r31, X
    8690:	20 85       	ldd	r18, Z+8	; 0x08
    8692:	31 85       	ldd	r19, Z+9	; 0x09
    8694:	2a 5a       	subi	r18, 0xAA	; 170
    8696:	39 48       	sbci	r19, 0x89	; 137
    8698:	11 f0       	breq	.+4      	; 0x869e <mp_obj_class_lookup+0x8c>
    869a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    869e:	f8 01       	movw	r30, r16
    86a0:	62 81       	ldd	r22, Z+2	; 0x02
    86a2:	73 81       	ldd	r23, Z+3	; 0x03
    86a4:	66 0f       	add	r22, r22
    86a6:	77 1f       	adc	r23, r23
    86a8:	66 0f       	add	r22, r22
    86aa:	77 1f       	adc	r23, r23
    86ac:	66 0f       	add	r22, r22
    86ae:	77 1f       	adc	r23, r23
    86b0:	62 60       	ori	r22, 0x02	; 2
    86b2:	40 e0       	ldi	r20, 0x00	; 0
    86b4:	02 96       	adiw	r24, 0x02	; 2
    86b6:	fb d8       	rcall	.-3594   	; 0x78ae <mp_map_lookup>
    86b8:	00 97       	sbiw	r24, 0x00	; 0
    86ba:	a1 f1       	breq	.+104    	; 0x8724 <mp_obj_class_lookup+0x112>
    86bc:	d8 01       	movw	r26, r16
    86be:	18 96       	adiw	r26, 0x08	; 8
    86c0:	2c 91       	ld	r18, X
    86c2:	18 97       	sbiw	r26, 0x08	; 8
    86c4:	22 23       	and	r18, r18
    86c6:	71 f0       	breq	.+28     	; 0x86e4 <mp_obj_class_lookup+0xd2>
    86c8:	16 96       	adiw	r26, 0x06	; 6
    86ca:	2d 91       	ld	r18, X+
    86cc:	3c 91       	ld	r19, X
    86ce:	17 97       	sbiw	r26, 0x07	; 7
    86d0:	fc 01       	movw	r30, r24
    86d2:	42 81       	ldd	r20, Z+2	; 0x02
    86d4:	53 81       	ldd	r21, Z+3	; 0x03
    86d6:	6d 91       	ld	r22, X+
    86d8:	7c 91       	ld	r23, X
    86da:	80 e0       	ldi	r24, 0x00	; 0
    86dc:	90 e0       	ldi	r25, 0x00	; 0
    86de:	0e 94 33 1a 	call	0x3466	; 0x3466 <mp_convert_member_lookup>
    86e2:	52 c0       	rjmp	.+164    	; 0x8788 <mp_obj_class_lookup+0x176>
    86e4:	d8 01       	movw	r26, r16
    86e6:	ed 91       	ld	r30, X+
    86e8:	fc 91       	ld	r31, X
    86ea:	30 97       	sbiw	r30, 0x00	; 0
    86ec:	61 f0       	breq	.+24     	; 0x8706 <mp_obj_class_lookup+0xf4>
    86ee:	28 85       	ldd	r18, Y+8	; 0x08
    86f0:	39 85       	ldd	r19, Y+9	; 0x09
    86f2:	2f 53       	subi	r18, 0x3F	; 63
    86f4:	3b 44       	sbci	r19, 0x4B	; 75
    86f6:	39 f0       	breq	.+14     	; 0x8706 <mp_obj_class_lookup+0xf4>
    86f8:	2c e1       	ldi	r18, 0x1C	; 28
    86fa:	ca 3b       	cpi	r28, 0xBA	; 186
    86fc:	d2 07       	cpc	r29, r18
    86fe:	19 f0       	breq	.+6      	; 0x8706 <mp_obj_class_lookup+0xf4>
    8700:	00 84       	ldd	r0, Z+8	; 0x08
    8702:	f1 85       	ldd	r31, Z+9	; 0x09
    8704:	e0 2d       	mov	r30, r0
    8706:	d8 01       	movw	r26, r16
    8708:	16 96       	adiw	r26, 0x06	; 6
    870a:	2d 91       	ld	r18, X+
    870c:	3c 91       	ld	r19, X
    870e:	17 97       	sbiw	r26, 0x07	; 7
    8710:	dc 01       	movw	r26, r24
    8712:	12 96       	adiw	r26, 0x02	; 2
    8714:	4d 91       	ld	r20, X+
    8716:	5c 91       	ld	r21, X
    8718:	13 97       	sbiw	r26, 0x03	; 3
    871a:	be 01       	movw	r22, r28
    871c:	cf 01       	movw	r24, r30
    871e:	0e 94 33 1a 	call	0x3466	; 0x3466 <mp_convert_member_lookup>
    8722:	32 c0       	rjmp	.+100    	; 0x8788 <mp_obj_class_lookup+0x176>
    8724:	d8 01       	movw	r26, r16
    8726:	ed 91       	ld	r30, X+
    8728:	fc 91       	ld	r31, X
    872a:	11 97       	sbiw	r26, 0x01	; 1
    872c:	30 97       	sbiw	r30, 0x00	; 0
    872e:	11 f1       	breq	.+68     	; 0x8774 <mp_obj_class_lookup+0x162>
    8730:	18 96       	adiw	r26, 0x08	; 8
    8732:	8c 91       	ld	r24, X
    8734:	81 11       	cpse	r24, r1
    8736:	1e c0       	rjmp	.+60     	; 0x8774 <mp_obj_class_lookup+0x162>
    8738:	88 85       	ldd	r24, Y+8	; 0x08
    873a:	99 85       	ldd	r25, Y+9	; 0x09
    873c:	8f 53       	subi	r24, 0x3F	; 63
    873e:	9b 44       	sbci	r25, 0x4B	; 75
    8740:	c9 f0       	breq	.+50     	; 0x8774 <mp_obj_class_lookup+0x162>
    8742:	2c e1       	ldi	r18, 0x1C	; 28
    8744:	ca 3b       	cpi	r28, 0xBA	; 186
    8746:	d2 07       	cpc	r29, r18
    8748:	a9 f0       	breq	.+42     	; 0x8774 <mp_obj_class_lookup+0x162>
    874a:	d8 01       	movw	r26, r16
    874c:	16 96       	adiw	r26, 0x06	; 6
    874e:	4d 91       	ld	r20, X+
    8750:	5c 91       	ld	r21, X
    8752:	17 97       	sbiw	r26, 0x07	; 7
    8754:	12 96       	adiw	r26, 0x02	; 2
    8756:	6d 91       	ld	r22, X+
    8758:	7c 91       	ld	r23, X
    875a:	13 97       	sbiw	r26, 0x03	; 3
    875c:	80 85       	ldd	r24, Z+8	; 0x08
    875e:	91 85       	ldd	r25, Z+9	; 0x09
    8760:	d1 da       	rcall	.-2654   	; 0x7d04 <mp_load_method_maybe>
    8762:	d8 01       	movw	r26, r16
    8764:	16 96       	adiw	r26, 0x06	; 6
    8766:	ed 91       	ld	r30, X+
    8768:	fc 91       	ld	r31, X
    876a:	17 97       	sbiw	r26, 0x07	; 7
    876c:	80 81       	ld	r24, Z
    876e:	91 81       	ldd	r25, Z+1	; 0x01
    8770:	89 2b       	or	r24, r25
    8772:	51 f4       	brne	.+20     	; 0x8788 <mp_obj_class_lookup+0x176>
    8774:	0c 8c       	ldd	r0, Y+28	; 0x1c
    8776:	dd 8d       	ldd	r29, Y+29	; 0x1d
    8778:	c0 2d       	mov	r28, r0
    877a:	20 97       	sbiw	r28, 0x00	; 0
    877c:	29 f0       	breq	.+10     	; 0x8788 <mp_obj_class_lookup+0x176>
    877e:	bc e1       	ldi	r27, 0x1C	; 28
    8780:	ca 3b       	cpi	r28, 0xBA	; 186
    8782:	db 07       	cpc	r29, r27
    8784:	09 f0       	breq	.+2      	; 0x8788 <mp_obj_class_lookup+0x176>
    8786:	5c cf       	rjmp	.-328    	; 0x8640 <mp_obj_class_lookup+0x2e>
    8788:	df 91       	pop	r29
    878a:	cf 91       	pop	r28
    878c:	1f 91       	pop	r17
    878e:	0f 91       	pop	r16
    8790:	08 95       	ret

00008792 <mp_obj_instance_is_callable>:
    8792:	cf 93       	push	r28
    8794:	df 93       	push	r29
    8796:	cd b7       	in	r28, 0x3d	; 61
    8798:	de b7       	in	r29, 0x3e	; 62
    879a:	2d 97       	sbiw	r28, 0x0d	; 13
    879c:	0f b6       	in	r0, 0x3f	; 63
    879e:	f8 94       	cli
    87a0:	de bf       	out	0x3e, r29	; 62
    87a2:	0f be       	out	0x3f, r0	; 63
    87a4:	cd bf       	out	0x3d, r28	; 61
    87a6:	1a 82       	std	Y+2, r1	; 0x02
    87a8:	19 82       	std	Y+1, r1	; 0x01
    87aa:	1c 82       	std	Y+4, r1	; 0x04
    87ac:	1b 82       	std	Y+3, r1	; 0x03
    87ae:	9e 83       	std	Y+6, r25	; 0x06
    87b0:	8d 83       	std	Y+5, r24	; 0x05
    87b2:	29 e0       	ldi	r18, 0x09	; 9
    87b4:	30 e0       	ldi	r19, 0x00	; 0
    87b6:	38 87       	std	Y+8, r19	; 0x08
    87b8:	2f 83       	std	Y+7, r18	; 0x07
    87ba:	2a e0       	ldi	r18, 0x0A	; 10
    87bc:	30 e0       	ldi	r19, 0x00	; 0
    87be:	3a 87       	std	Y+10, r19	; 0x0a
    87c0:	29 87       	std	Y+9, r18	; 0x09
    87c2:	9e 01       	movw	r18, r28
    87c4:	2f 5f       	subi	r18, 0xFF	; 255
    87c6:	3f 4f       	sbci	r19, 0xFF	; 255
    87c8:	3c 87       	std	Y+12, r19	; 0x0c
    87ca:	2b 87       	std	Y+11, r18	; 0x0b
    87cc:	1d 86       	std	Y+13, r1	; 0x0d
    87ce:	fc 01       	movw	r30, r24
    87d0:	60 81       	ld	r22, Z
    87d2:	71 81       	ldd	r23, Z+1	; 0x01
    87d4:	ce 01       	movw	r24, r28
    87d6:	05 96       	adiw	r24, 0x05	; 5
    87d8:	1c df       	rcall	.-456    	; 0x8612 <mp_obj_class_lookup>
    87da:	29 81       	ldd	r18, Y+1	; 0x01
    87dc:	3a 81       	ldd	r19, Y+2	; 0x02
    87de:	81 e0       	ldi	r24, 0x01	; 1
    87e0:	23 2b       	or	r18, r19
    87e2:	09 f4       	brne	.+2      	; 0x87e6 <mp_obj_instance_is_callable+0x54>
    87e4:	80 e0       	ldi	r24, 0x00	; 0
    87e6:	2d 96       	adiw	r28, 0x0d	; 13
    87e8:	0f b6       	in	r0, 0x3f	; 63
    87ea:	f8 94       	cli
    87ec:	de bf       	out	0x3e, r29	; 62
    87ee:	0f be       	out	0x3f, r0	; 63
    87f0:	cd bf       	out	0x3d, r28	; 61
    87f2:	df 91       	pop	r29
    87f4:	cf 91       	pop	r28
    87f6:	08 95       	ret

000087f8 <mp_obj_is_callable>:
    87f8:	cf 93       	push	r28
    87fa:	df 93       	push	r29
    87fc:	ec 01       	movw	r28, r24
    87fe:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    8802:	fc 01       	movw	r30, r24
    8804:	22 85       	ldd	r18, Z+10	; 0x0a
    8806:	33 85       	ldd	r19, Z+11	; 0x0b
    8808:	f7 e4       	ldi	r31, 0x47	; 71
    880a:	25 33       	cpi	r18, 0x35	; 53
    880c:	3f 07       	cpc	r19, r31
    880e:	29 f0       	breq	.+10     	; 0x881a <mp_obj_is_callable+0x22>
    8810:	81 e0       	ldi	r24, 0x01	; 1
    8812:	23 2b       	or	r18, r19
    8814:	21 f4       	brne	.+8      	; 0x881e <mp_obj_is_callable+0x26>
    8816:	80 e0       	ldi	r24, 0x00	; 0
    8818:	02 c0       	rjmp	.+4      	; 0x881e <mp_obj_is_callable+0x26>
    881a:	ce 01       	movw	r24, r28
    881c:	ba df       	rcall	.-140    	; 0x8792 <mp_obj_instance_is_callable>
    881e:	df 91       	pop	r29
    8820:	cf 91       	pop	r28
    8822:	08 95       	ret

00008824 <mp_builtin_callable>:
    8824:	e9 df       	rcall	.-46     	; 0x87f8 <mp_obj_is_callable>
    8826:	81 11       	cpse	r24, r1
    8828:	03 c0       	rjmp	.+6      	; 0x8830 <mp_builtin_callable+0xc>
    882a:	8e e0       	ldi	r24, 0x0E	; 14
    882c:	90 e0       	ldi	r25, 0x00	; 0
    882e:	08 95       	ret
    8830:	8e e1       	ldi	r24, 0x1E	; 30
    8832:	90 e0       	ldi	r25, 0x00	; 0
    8834:	08 95       	ret

00008836 <instance_get_buffer>:
    8836:	cf 92       	push	r12
    8838:	df 92       	push	r13
    883a:	ef 92       	push	r14
    883c:	ff 92       	push	r15
    883e:	0f 93       	push	r16
    8840:	1f 93       	push	r17
    8842:	cf 93       	push	r28
    8844:	df 93       	push	r29
    8846:	cd b7       	in	r28, 0x3d	; 61
    8848:	de b7       	in	r29, 0x3e	; 62
    884a:	2d 97       	sbiw	r28, 0x0d	; 13
    884c:	0f b6       	in	r0, 0x3f	; 63
    884e:	f8 94       	cli
    8850:	de bf       	out	0x3e, r29	; 62
    8852:	0f be       	out	0x3f, r0	; 63
    8854:	cd bf       	out	0x3d, r28	; 61
    8856:	8c 01       	movw	r16, r24
    8858:	7b 01       	movw	r14, r22
    885a:	6a 01       	movw	r12, r20
    885c:	19 82       	std	Y+1, r1	; 0x01
    885e:	1a 82       	std	Y+2, r1	; 0x02
    8860:	1b 82       	std	Y+3, r1	; 0x03
    8862:	1c 82       	std	Y+4, r1	; 0x04
    8864:	9e 83       	std	Y+6, r25	; 0x06
    8866:	8d 83       	std	Y+5, r24	; 0x05
    8868:	81 e0       	ldi	r24, 0x01	; 1
    886a:	90 e0       	ldi	r25, 0x00	; 0
    886c:	98 87       	std	Y+8, r25	; 0x08
    886e:	8f 83       	std	Y+7, r24	; 0x07
    8870:	88 e1       	ldi	r24, 0x18	; 24
    8872:	90 e0       	ldi	r25, 0x00	; 0
    8874:	9a 87       	std	Y+10, r25	; 0x0a
    8876:	89 87       	std	Y+9, r24	; 0x09
    8878:	ce 01       	movw	r24, r28
    887a:	01 96       	adiw	r24, 0x01	; 1
    887c:	9c 87       	std	Y+12, r25	; 0x0c
    887e:	8b 87       	std	Y+11, r24	; 0x0b
    8880:	1d 86       	std	Y+13, r1	; 0x0d
    8882:	d8 01       	movw	r26, r16
    8884:	6d 91       	ld	r22, X+
    8886:	7c 91       	ld	r23, X
    8888:	04 96       	adiw	r24, 0x04	; 4
    888a:	c3 de       	rcall	.-634    	; 0x8612 <mp_obj_class_lookup>
    888c:	89 81       	ldd	r24, Y+1	; 0x01
    888e:	9a 81       	ldd	r25, Y+2	; 0x02
    8890:	04 97       	sbiw	r24, 0x04	; 4
    8892:	81 f4       	brne	.+32     	; 0x88b4 <instance_get_buffer+0x7e>
    8894:	f8 01       	movw	r30, r16
    8896:	00 85       	ldd	r16, Z+8	; 0x08
    8898:	11 85       	ldd	r17, Z+9	; 0x09
    889a:	c8 01       	movw	r24, r16
    889c:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    88a0:	dc 01       	movw	r26, r24
    88a2:	58 96       	adiw	r26, 0x18	; 24
    88a4:	ed 91       	ld	r30, X+
    88a6:	fc 91       	ld	r31, X
    88a8:	59 97       	sbiw	r26, 0x19	; 25
    88aa:	a6 01       	movw	r20, r12
    88ac:	b7 01       	movw	r22, r14
    88ae:	c8 01       	movw	r24, r16
    88b0:	09 95       	icall
    88b2:	02 c0       	rjmp	.+4      	; 0x88b8 <instance_get_buffer+0x82>
    88b4:	81 e0       	ldi	r24, 0x01	; 1
    88b6:	90 e0       	ldi	r25, 0x00	; 0
    88b8:	2d 96       	adiw	r28, 0x0d	; 13
    88ba:	0f b6       	in	r0, 0x3f	; 63
    88bc:	f8 94       	cli
    88be:	de bf       	out	0x3e, r29	; 62
    88c0:	0f be       	out	0x3f, r0	; 63
    88c2:	cd bf       	out	0x3d, r28	; 61
    88c4:	df 91       	pop	r29
    88c6:	cf 91       	pop	r28
    88c8:	1f 91       	pop	r17
    88ca:	0f 91       	pop	r16
    88cc:	ff 90       	pop	r15
    88ce:	ef 90       	pop	r14
    88d0:	df 90       	pop	r13
    88d2:	cf 90       	pop	r12
    88d4:	08 95       	ret

000088d6 <instance_subscr>:
    88d6:	cf 92       	push	r12
    88d8:	df 92       	push	r13
    88da:	ef 92       	push	r14
    88dc:	ff 92       	push	r15
    88de:	0f 93       	push	r16
    88e0:	1f 93       	push	r17
    88e2:	cf 93       	push	r28
    88e4:	df 93       	push	r29
    88e6:	cd b7       	in	r28, 0x3d	; 61
    88e8:	de b7       	in	r29, 0x3e	; 62
    88ea:	61 97       	sbiw	r28, 0x11	; 17
    88ec:	0f b6       	in	r0, 0x3f	; 63
    88ee:	f8 94       	cli
    88f0:	de bf       	out	0x3e, r29	; 62
    88f2:	0f be       	out	0x3f, r0	; 63
    88f4:	cd bf       	out	0x3d, r28	; 61
    88f6:	7c 01       	movw	r14, r24
    88f8:	6b 01       	movw	r12, r22
    88fa:	8a 01       	movw	r16, r20
    88fc:	1a 82       	std	Y+2, r1	; 0x02
    88fe:	19 82       	std	Y+1, r1	; 0x01
    8900:	1c 82       	std	Y+4, r1	; 0x04
    8902:	1b 82       	std	Y+3, r1	; 0x03
    8904:	7e 83       	std	Y+6, r23	; 0x06
    8906:	6d 83       	std	Y+5, r22	; 0x05
    8908:	58 87       	std	Y+8, r21	; 0x08
    890a:	4f 83       	std	Y+7, r20	; 0x07
    890c:	fe 01       	movw	r30, r28
    890e:	39 96       	adiw	r30, 0x09	; 9
    8910:	89 e0       	ldi	r24, 0x09	; 9
    8912:	df 01       	movw	r26, r30
    8914:	1d 92       	st	X+, r1
    8916:	8a 95       	dec	r24
    8918:	e9 f7       	brne	.-6      	; 0x8914 <instance_subscr+0x3e>
    891a:	fa 86       	std	Y+10, r15	; 0x0a
    891c:	e9 86       	std	Y+9, r14	; 0x09
    891e:	82 e1       	ldi	r24, 0x12	; 18
    8920:	90 e0       	ldi	r25, 0x00	; 0
    8922:	9e 87       	std	Y+14, r25	; 0x0e
    8924:	8d 87       	std	Y+13, r24	; 0x0d
    8926:	ce 01       	movw	r24, r28
    8928:	01 96       	adiw	r24, 0x01	; 1
    892a:	98 8b       	std	Y+16, r25	; 0x10
    892c:	8f 87       	std	Y+15, r24	; 0x0f
    892e:	41 15       	cp	r20, r1
    8930:	51 05       	cpc	r21, r1
    8932:	29 f4       	brne	.+10     	; 0x893e <instance_subscr+0x68>
    8934:	8b e0       	ldi	r24, 0x0B	; 11
    8936:	90 e0       	ldi	r25, 0x00	; 0
    8938:	9c 87       	std	Y+12, r25	; 0x0c
    893a:	8b 87       	std	Y+11, r24	; 0x0b
    893c:	0c c0       	rjmp	.+24     	; 0x8956 <instance_subscr+0x80>
    893e:	44 30       	cpi	r20, 0x04	; 4
    8940:	51 05       	cpc	r21, r1
    8942:	29 f4       	brne	.+10     	; 0x894e <instance_subscr+0x78>
    8944:	8f e0       	ldi	r24, 0x0F	; 15
    8946:	90 e0       	ldi	r25, 0x00	; 0
    8948:	9c 87       	std	Y+12, r25	; 0x0c
    894a:	8b 87       	std	Y+11, r24	; 0x0b
    894c:	04 c0       	rjmp	.+8      	; 0x8956 <instance_subscr+0x80>
    894e:	8c e1       	ldi	r24, 0x1C	; 28
    8950:	90 e0       	ldi	r25, 0x00	; 0
    8952:	9c 87       	std	Y+12, r25	; 0x0c
    8954:	8b 87       	std	Y+11, r24	; 0x0b
    8956:	f7 01       	movw	r30, r14
    8958:	60 81       	ld	r22, Z
    895a:	71 81       	ldd	r23, Z+1	; 0x01
    895c:	ce 01       	movw	r24, r28
    895e:	09 96       	adiw	r24, 0x09	; 9
    8960:	58 de       	rcall	.-848    	; 0x8612 <mp_obj_class_lookup>
    8962:	89 81       	ldd	r24, Y+1	; 0x01
    8964:	9a 81       	ldd	r25, Y+2	; 0x02
    8966:	84 30       	cpi	r24, 0x04	; 4
    8968:	91 05       	cpc	r25, r1
    896a:	51 f4       	brne	.+20     	; 0x8980 <instance_subscr+0xaa>
    896c:	a8 01       	movw	r20, r16
    896e:	b6 01       	movw	r22, r12
    8970:	d7 01       	movw	r26, r14
    8972:	18 96       	adiw	r26, 0x08	; 8
    8974:	8d 91       	ld	r24, X+
    8976:	9c 91       	ld	r25, X
    8978:	19 97       	sbiw	r26, 0x09	; 9
    897a:	0e 94 43 29 	call	0x5286	; 0x5286 <mp_obj_subscr>
    897e:	20 c0       	rjmp	.+64     	; 0x89c0 <instance_subscr+0xea>
    8980:	00 97       	sbiw	r24, 0x00	; 0
    8982:	f1 f0       	breq	.+60     	; 0x89c0 <instance_subscr+0xea>
    8984:	01 15       	cp	r16, r1
    8986:	11 05       	cpc	r17, r1
    8988:	81 f0       	breq	.+32     	; 0x89aa <instance_subscr+0xd4>
    898a:	04 30       	cpi	r16, 0x04	; 4
    898c:	11 05       	cpc	r17, r1
    898e:	19 f0       	breq	.+6      	; 0x8996 <instance_subscr+0xc0>
    8990:	82 e0       	ldi	r24, 0x02	; 2
    8992:	90 e0       	ldi	r25, 0x00	; 0
    8994:	0c c0       	rjmp	.+24     	; 0x89ae <instance_subscr+0xd8>
    8996:	ae 01       	movw	r20, r28
    8998:	4f 5f       	subi	r20, 0xFF	; 255
    899a:	5f 4f       	sbci	r21, 0xFF	; 255
    899c:	60 e0       	ldi	r22, 0x00	; 0
    899e:	70 e0       	ldi	r23, 0x00	; 0
    89a0:	81 e0       	ldi	r24, 0x01	; 1
    89a2:	90 e0       	ldi	r25, 0x00	; 0
    89a4:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    89a8:	0b c0       	rjmp	.+22     	; 0x89c0 <instance_subscr+0xea>
    89aa:	81 e0       	ldi	r24, 0x01	; 1
    89ac:	90 e0       	ldi	r25, 0x00	; 0
    89ae:	ae 01       	movw	r20, r28
    89b0:	4f 5f       	subi	r20, 0xFF	; 255
    89b2:	5f 4f       	sbci	r21, 0xFF	; 255
    89b4:	60 e0       	ldi	r22, 0x00	; 0
    89b6:	70 e0       	ldi	r23, 0x00	; 0
    89b8:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    89bc:	86 e0       	ldi	r24, 0x06	; 6
    89be:	90 e0       	ldi	r25, 0x00	; 0
    89c0:	61 96       	adiw	r28, 0x11	; 17
    89c2:	0f b6       	in	r0, 0x3f	; 63
    89c4:	f8 94       	cli
    89c6:	de bf       	out	0x3e, r29	; 62
    89c8:	0f be       	out	0x3f, r0	; 63
    89ca:	cd bf       	out	0x3d, r28	; 61
    89cc:	df 91       	pop	r29
    89ce:	cf 91       	pop	r28
    89d0:	1f 91       	pop	r17
    89d2:	0f 91       	pop	r16
    89d4:	ff 90       	pop	r15
    89d6:	ef 90       	pop	r14
    89d8:	df 90       	pop	r13
    89da:	cf 90       	pop	r12
    89dc:	08 95       	ret

000089de <instance_unary_op>:
    89de:	df 92       	push	r13
    89e0:	ef 92       	push	r14
    89e2:	ff 92       	push	r15
    89e4:	0f 93       	push	r16
    89e6:	1f 93       	push	r17
    89e8:	cf 93       	push	r28
    89ea:	df 93       	push	r29
    89ec:	cd b7       	in	r28, 0x3d	; 61
    89ee:	de b7       	in	r29, 0x3e	; 62
    89f0:	2d 97       	sbiw	r28, 0x0d	; 13
    89f2:	0f b6       	in	r0, 0x3f	; 63
    89f4:	f8 94       	cli
    89f6:	de bf       	out	0x3e, r29	; 62
    89f8:	0f be       	out	0x3f, r0	; 63
    89fa:	cd bf       	out	0x3d, r28	; 61
    89fc:	d8 2e       	mov	r13, r24
    89fe:	7b 01       	movw	r14, r22
    8a00:	e8 2f       	mov	r30, r24
    8a02:	f0 e0       	ldi	r31, 0x00	; 0
    8a04:	e8 56       	subi	r30, 0x68	; 104
    8a06:	f5 4e       	sbci	r31, 0xE5	; 229
    8a08:	80 81       	ld	r24, Z
    8a0a:	90 e0       	ldi	r25, 0x00	; 0
    8a0c:	19 82       	std	Y+1, r1	; 0x01
    8a0e:	1a 82       	std	Y+2, r1	; 0x02
    8a10:	1b 82       	std	Y+3, r1	; 0x03
    8a12:	1c 82       	std	Y+4, r1	; 0x04
    8a14:	7e 83       	std	Y+6, r23	; 0x06
    8a16:	6d 83       	std	Y+5, r22	; 0x05
    8a18:	98 87       	std	Y+8, r25	; 0x08
    8a1a:	8f 83       	std	Y+7, r24	; 0x07
    8a1c:	8c e0       	ldi	r24, 0x0C	; 12
    8a1e:	90 e0       	ldi	r25, 0x00	; 0
    8a20:	9a 87       	std	Y+10, r25	; 0x0a
    8a22:	89 87       	std	Y+9, r24	; 0x09
    8a24:	ce 01       	movw	r24, r28
    8a26:	01 96       	adiw	r24, 0x01	; 1
    8a28:	9c 87       	std	Y+12, r25	; 0x0c
    8a2a:	8b 87       	std	Y+11, r24	; 0x0b
    8a2c:	1d 86       	std	Y+13, r1	; 0x0d
    8a2e:	fb 01       	movw	r30, r22
    8a30:	60 81       	ld	r22, Z
    8a32:	71 81       	ldd	r23, Z+1	; 0x01
    8a34:	04 96       	adiw	r24, 0x04	; 4
    8a36:	ed dd       	rcall	.-1062   	; 0x8612 <mp_obj_class_lookup>
    8a38:	09 81       	ldd	r16, Y+1	; 0x01
    8a3a:	1a 81       	ldd	r17, Y+2	; 0x02
    8a3c:	04 30       	cpi	r16, 0x04	; 4
    8a3e:	11 05       	cpc	r17, r1
    8a40:	41 f4       	brne	.+16     	; 0x8a52 <instance_unary_op+0x74>
    8a42:	f7 01       	movw	r30, r14
    8a44:	60 85       	ldd	r22, Z+8	; 0x08
    8a46:	71 85       	ldd	r23, Z+9	; 0x09
    8a48:	8d 2d       	mov	r24, r13
    8a4a:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <mp_unary_op>
    8a4e:	8c 01       	movw	r16, r24
    8a50:	41 c0       	rjmp	.+130    	; 0x8ad4 <instance_unary_op+0xf6>
    8a52:	01 15       	cp	r16, r1
    8a54:	11 05       	cpc	r17, r1
    8a56:	19 f1       	breq	.+70     	; 0x8a9e <instance_unary_op+0xc0>
    8a58:	b7 01       	movw	r22, r14
    8a5a:	c8 01       	movw	r24, r16
    8a5c:	0e 94 29 25 	call	0x4a52	; 0x4a52 <mp_call_function_1>
    8a60:	f6 e0       	ldi	r31, 0x06	; 6
    8a62:	df 16       	cp	r13, r31
    8a64:	21 f0       	breq	.+8      	; 0x8a6e <instance_unary_op+0x90>
    8a66:	28 e0       	ldi	r18, 0x08	; 8
    8a68:	d2 16       	cp	r13, r18
    8a6a:	41 f0       	breq	.+16     	; 0x8a7c <instance_unary_op+0x9e>
    8a6c:	2e c0       	rjmp	.+92     	; 0x8aca <instance_unary_op+0xec>
    8a6e:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <mp_obj_get_int_truncated>
    8a72:	88 0f       	add	r24, r24
    8a74:	99 1f       	adc	r25, r25
    8a76:	8c 01       	movw	r16, r24
    8a78:	01 60       	ori	r16, 0x01	; 1
    8a7a:	2c c0       	rjmp	.+88     	; 0x8ad4 <instance_unary_op+0xf6>
    8a7c:	80 fd       	sbrc	r24, 0
    8a7e:	27 c0       	rjmp	.+78     	; 0x8ace <instance_unary_op+0xf0>
    8a80:	9c 01       	movw	r18, r24
    8a82:	23 70       	andi	r18, 0x03	; 3
    8a84:	33 27       	eor	r19, r19
    8a86:	23 2b       	or	r18, r19
    8a88:	31 f4       	brne	.+12     	; 0x8a96 <instance_unary_op+0xb8>
    8a8a:	fc 01       	movw	r30, r24
    8a8c:	20 81       	ld	r18, Z
    8a8e:	31 81       	ldd	r19, Z+1	; 0x01
    8a90:	28 5b       	subi	r18, 0xB8	; 184
    8a92:	3d 41       	sbci	r19, 0x1D	; 29
    8a94:	f1 f0       	breq	.+60     	; 0x8ad2 <instance_unary_op+0xf4>
    8a96:	80 e0       	ldi	r24, 0x00	; 0
    8a98:	90 e0       	ldi	r25, 0x00	; 0
    8a9a:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    8a9e:	26 e0       	ldi	r18, 0x06	; 6
    8aa0:	d2 12       	cpse	r13, r18
    8aa2:	18 c0       	rjmp	.+48     	; 0x8ad4 <instance_unary_op+0xf6>
    8aa4:	8a ea       	ldi	r24, 0xAA	; 170
    8aa6:	90 e0       	ldi	r25, 0x00	; 0
    8aa8:	98 87       	std	Y+8, r25	; 0x08
    8aaa:	8f 83       	std	Y+7, r24	; 0x07
    8aac:	f7 01       	movw	r30, r14
    8aae:	60 81       	ld	r22, Z
    8ab0:	71 81       	ldd	r23, Z+1	; 0x01
    8ab2:	ce 01       	movw	r24, r28
    8ab4:	05 96       	adiw	r24, 0x05	; 5
    8ab6:	ad dd       	rcall	.-1190   	; 0x8612 <mp_obj_class_lookup>
    8ab8:	89 81       	ldd	r24, Y+1	; 0x01
    8aba:	9a 81       	ldd	r25, Y+2	; 0x02
    8abc:	89 2b       	or	r24, r25
    8abe:	51 f4       	brne	.+20     	; 0x8ad4 <instance_unary_op+0xf6>
    8ac0:	87 01       	movw	r16, r14
    8ac2:	00 0f       	add	r16, r16
    8ac4:	11 1f       	adc	r17, r17
    8ac6:	01 60       	ori	r16, 0x01	; 1
    8ac8:	05 c0       	rjmp	.+10     	; 0x8ad4 <instance_unary_op+0xf6>
    8aca:	8c 01       	movw	r16, r24
    8acc:	03 c0       	rjmp	.+6      	; 0x8ad4 <instance_unary_op+0xf6>
    8ace:	8c 01       	movw	r16, r24
    8ad0:	01 c0       	rjmp	.+2      	; 0x8ad4 <instance_unary_op+0xf6>
    8ad2:	8c 01       	movw	r16, r24
    8ad4:	c8 01       	movw	r24, r16
    8ad6:	2d 96       	adiw	r28, 0x0d	; 13
    8ad8:	0f b6       	in	r0, 0x3f	; 63
    8ada:	f8 94       	cli
    8adc:	de bf       	out	0x3e, r29	; 62
    8ade:	0f be       	out	0x3f, r0	; 63
    8ae0:	cd bf       	out	0x3d, r28	; 61
    8ae2:	df 91       	pop	r29
    8ae4:	cf 91       	pop	r28
    8ae6:	1f 91       	pop	r17
    8ae8:	0f 91       	pop	r16
    8aea:	ff 90       	pop	r15
    8aec:	ef 90       	pop	r14
    8aee:	df 90       	pop	r13
    8af0:	08 95       	ret

00008af2 <instance_print>:
    8af2:	af 92       	push	r10
    8af4:	bf 92       	push	r11
    8af6:	df 92       	push	r13
    8af8:	ef 92       	push	r14
    8afa:	ff 92       	push	r15
    8afc:	0f 93       	push	r16
    8afe:	1f 93       	push	r17
    8b00:	cf 93       	push	r28
    8b02:	df 93       	push	r29
    8b04:	cd b7       	in	r28, 0x3d	; 61
    8b06:	de b7       	in	r29, 0x3e	; 62
    8b08:	2d 97       	sbiw	r28, 0x0d	; 13
    8b0a:	0f b6       	in	r0, 0x3f	; 63
    8b0c:	f8 94       	cli
    8b0e:	de bf       	out	0x3e, r29	; 62
    8b10:	0f be       	out	0x3f, r0	; 63
    8b12:	cd bf       	out	0x3d, r28	; 61
    8b14:	e8 2e       	mov	r14, r24
    8b16:	d9 2e       	mov	r13, r25
    8b18:	8b 01       	movw	r16, r22
    8b1a:	f4 2e       	mov	r15, r20
    8b1c:	44 23       	and	r20, r20
    8b1e:	09 f4       	brne	.+2      	; 0x8b22 <instance_print+0x30>
    8b20:	7d c0       	rjmp	.+250    	; 0x8c1c <instance_print+0x12a>
    8b22:	19 82       	std	Y+1, r1	; 0x01
    8b24:	1a 82       	std	Y+2, r1	; 0x02
    8b26:	1b 82       	std	Y+3, r1	; 0x03
    8b28:	1c 82       	std	Y+4, r1	; 0x04
    8b2a:	7e 83       	std	Y+6, r23	; 0x06
    8b2c:	6d 83       	std	Y+5, r22	; 0x05
    8b2e:	8b e1       	ldi	r24, 0x1B	; 27
    8b30:	90 e0       	ldi	r25, 0x00	; 0
    8b32:	98 87       	std	Y+8, r25	; 0x08
    8b34:	8f 83       	std	Y+7, r24	; 0x07
    8b36:	86 e0       	ldi	r24, 0x06	; 6
    8b38:	90 e0       	ldi	r25, 0x00	; 0
    8b3a:	9a 87       	std	Y+10, r25	; 0x0a
    8b3c:	89 87       	std	Y+9, r24	; 0x09
    8b3e:	ce 01       	movw	r24, r28
    8b40:	01 96       	adiw	r24, 0x01	; 1
    8b42:	9c 87       	std	Y+12, r25	; 0x0c
    8b44:	8b 87       	std	Y+11, r24	; 0x0b
    8b46:	1d 86       	std	Y+13, r1	; 0x0d
    8b48:	db 01       	movw	r26, r22
    8b4a:	6d 91       	ld	r22, X+
    8b4c:	7c 91       	ld	r23, X
    8b4e:	04 96       	adiw	r24, 0x04	; 4
    8b50:	60 dd       	rcall	.-1344   	; 0x8612 <mp_obj_class_lookup>
    8b52:	89 81       	ldd	r24, Y+1	; 0x01
    8b54:	9a 81       	ldd	r25, Y+2	; 0x02
    8b56:	00 97       	sbiw	r24, 0x00	; 0
    8b58:	09 f0       	breq	.+2      	; 0x8b5c <instance_print+0x6a>
    8b5a:	7d c0       	rjmp	.+250    	; 0x8c56 <instance_print+0x164>
    8b5c:	4a c0       	rjmp	.+148    	; 0x8bf2 <instance_print+0x100>
    8b5e:	8b e1       	ldi	r24, 0x1B	; 27
    8b60:	90 e0       	ldi	r25, 0x00	; 0
    8b62:	98 87       	std	Y+8, r25	; 0x08
    8b64:	8f 83       	std	Y+7, r24	; 0x07
    8b66:	1a 86       	std	Y+10, r1	; 0x0a
    8b68:	19 86       	std	Y+9, r1	; 0x09
    8b6a:	f8 01       	movw	r30, r16
    8b6c:	60 81       	ld	r22, Z
    8b6e:	71 81       	ldd	r23, Z+1	; 0x01
    8b70:	ce 01       	movw	r24, r28
    8b72:	05 96       	adiw	r24, 0x05	; 5
    8b74:	4e dd       	rcall	.-1380   	; 0x8612 <mp_obj_class_lookup>
    8b76:	89 81       	ldd	r24, Y+1	; 0x01
    8b78:	9a 81       	ldd	r25, Y+2	; 0x02
    8b7a:	84 30       	cpi	r24, 0x04	; 4
    8b7c:	91 05       	cpc	r25, r1
    8b7e:	69 f5       	brne	.+90     	; 0x8bda <instance_print+0xe8>
    8b80:	d8 01       	movw	r26, r16
    8b82:	18 96       	adiw	r26, 0x08	; 8
    8b84:	ad 90       	ld	r10, X+
    8b86:	bc 90       	ld	r11, X
    8b88:	19 97       	sbiw	r26, 0x09	; 9
    8b8a:	c5 01       	movw	r24, r10
    8b8c:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    8b90:	fc 01       	movw	r30, r24
    8b92:	80 85       	ldd	r24, Z+8	; 0x08
    8b94:	91 85       	ldd	r25, Z+9	; 0x09
    8b96:	8a 54       	subi	r24, 0x4A	; 74
    8b98:	96 42       	sbci	r25, 0x26	; 38
    8b9a:	c1 f4       	brne	.+48     	; 0x8bcc <instance_print+0xda>
    8b9c:	ff 20       	and	r15, r15
    8b9e:	61 f0       	breq	.+24     	; 0x8bb8 <instance_print+0xc6>
    8ba0:	d8 01       	movw	r26, r16
    8ba2:	ed 91       	ld	r30, X+
    8ba4:	fc 91       	ld	r31, X
    8ba6:	84 81       	ldd	r24, Z+4	; 0x04
    8ba8:	95 81       	ldd	r25, Z+5	; 0x05
    8baa:	0e 94 57 0b 	call	0x16ae	; 0x16ae <qstr_str>
    8bae:	bc 01       	movw	r22, r24
    8bb0:	8e 2d       	mov	r24, r14
    8bb2:	9d 2d       	mov	r25, r13
    8bb4:	0e 94 a8 0c 	call	0x1950	; 0x1950 <mp_print_str>
    8bb8:	4f 2d       	mov	r20, r15
    8bba:	40 68       	ori	r20, 0x80	; 128
    8bbc:	f8 01       	movw	r30, r16
    8bbe:	60 85       	ldd	r22, Z+8	; 0x08
    8bc0:	71 85       	ldd	r23, Z+9	; 0x09
    8bc2:	8e 2d       	mov	r24, r14
    8bc4:	9d 2d       	mov	r25, r13
    8bc6:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    8bca:	61 c0       	rjmp	.+194    	; 0x8c8e <instance_print+0x19c>
    8bcc:	4f 2d       	mov	r20, r15
    8bce:	b5 01       	movw	r22, r10
    8bd0:	8e 2d       	mov	r24, r14
    8bd2:	9d 2d       	mov	r25, r13
    8bd4:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    8bd8:	5a c0       	rjmp	.+180    	; 0x8c8e <instance_print+0x19c>
    8bda:	00 97       	sbiw	r24, 0x00	; 0
    8bdc:	51 f0       	breq	.+20     	; 0x8bf2 <instance_print+0x100>
    8bde:	b8 01       	movw	r22, r16
    8be0:	0e 94 29 25 	call	0x4a52	; 0x4a52 <mp_call_function_1>
    8be4:	40 e0       	ldi	r20, 0x00	; 0
    8be6:	bc 01       	movw	r22, r24
    8be8:	8e 2d       	mov	r24, r14
    8bea:	9d 2d       	mov	r25, r13
    8bec:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    8bf0:	4e c0       	rjmp	.+156    	; 0x8c8e <instance_print+0x19c>
    8bf2:	c8 01       	movw	r24, r16
    8bf4:	0e 94 c6 1a 	call	0x358c	; 0x358c <mp_obj_get_type_str>
    8bf8:	1f 93       	push	r17
    8bfa:	0f 93       	push	r16
    8bfc:	9f 93       	push	r25
    8bfe:	8f 93       	push	r24
    8c00:	89 e0       	ldi	r24, 0x09	; 9
    8c02:	97 e0       	ldi	r25, 0x07	; 7
    8c04:	9f 93       	push	r25
    8c06:	8f 93       	push	r24
    8c08:	df 92       	push	r13
    8c0a:	ef 92       	push	r14
    8c0c:	0e 94 56 10 	call	0x20ac	; 0x20ac <mp_printf>
    8c10:	0f b6       	in	r0, 0x3f	; 63
    8c12:	f8 94       	cli
    8c14:	de bf       	out	0x3e, r29	; 62
    8c16:	0f be       	out	0x3f, r0	; 63
    8c18:	cd bf       	out	0x3d, r28	; 61
    8c1a:	39 c0       	rjmp	.+114    	; 0x8c8e <instance_print+0x19c>
    8c1c:	19 82       	std	Y+1, r1	; 0x01
    8c1e:	1a 82       	std	Y+2, r1	; 0x02
    8c20:	1b 82       	std	Y+3, r1	; 0x03
    8c22:	1c 82       	std	Y+4, r1	; 0x04
    8c24:	7e 83       	std	Y+6, r23	; 0x06
    8c26:	6d 83       	std	Y+5, r22	; 0x05
    8c28:	8d e1       	ldi	r24, 0x1D	; 29
    8c2a:	90 e0       	ldi	r25, 0x00	; 0
    8c2c:	98 87       	std	Y+8, r25	; 0x08
    8c2e:	8f 83       	std	Y+7, r24	; 0x07
    8c30:	86 e0       	ldi	r24, 0x06	; 6
    8c32:	90 e0       	ldi	r25, 0x00	; 0
    8c34:	9a 87       	std	Y+10, r25	; 0x0a
    8c36:	89 87       	std	Y+9, r24	; 0x09
    8c38:	ce 01       	movw	r24, r28
    8c3a:	01 96       	adiw	r24, 0x01	; 1
    8c3c:	9c 87       	std	Y+12, r25	; 0x0c
    8c3e:	8b 87       	std	Y+11, r24	; 0x0b
    8c40:	1d 86       	std	Y+13, r1	; 0x0d
    8c42:	db 01       	movw	r26, r22
    8c44:	6d 91       	ld	r22, X+
    8c46:	7c 91       	ld	r23, X
    8c48:	04 96       	adiw	r24, 0x04	; 4
    8c4a:	e3 dc       	rcall	.-1594   	; 0x8612 <mp_obj_class_lookup>
    8c4c:	89 81       	ldd	r24, Y+1	; 0x01
    8c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    8c50:	89 2b       	or	r24, r25
    8c52:	31 f4       	brne	.+12     	; 0x8c60 <instance_print+0x16e>
    8c54:	84 cf       	rjmp	.-248    	; 0x8b5e <instance_print+0x6c>
    8c56:	84 30       	cpi	r24, 0x04	; 4
    8c58:	91 05       	cpc	r25, r1
    8c5a:	09 f0       	breq	.+2      	; 0x8c5e <instance_print+0x16c>
    8c5c:	c0 cf       	rjmp	.-128    	; 0x8bde <instance_print+0xec>
    8c5e:	07 c0       	rjmp	.+14     	; 0x8c6e <instance_print+0x17c>
    8c60:	89 81       	ldd	r24, Y+1	; 0x01
    8c62:	9a 81       	ldd	r25, Y+2	; 0x02
    8c64:	84 30       	cpi	r24, 0x04	; 4
    8c66:	91 05       	cpc	r25, r1
    8c68:	09 f0       	breq	.+2      	; 0x8c6c <instance_print+0x17a>
    8c6a:	b9 cf       	rjmp	.-142    	; 0x8bde <instance_print+0xec>
    8c6c:	89 cf       	rjmp	.-238    	; 0x8b80 <instance_print+0x8e>
    8c6e:	f8 01       	movw	r30, r16
    8c70:	a0 84       	ldd	r10, Z+8	; 0x08
    8c72:	b1 84       	ldd	r11, Z+9	; 0x09
    8c74:	c5 01       	movw	r24, r10
    8c76:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    8c7a:	dc 01       	movw	r26, r24
    8c7c:	18 96       	adiw	r26, 0x08	; 8
    8c7e:	8d 91       	ld	r24, X+
    8c80:	9c 91       	ld	r25, X
    8c82:	19 97       	sbiw	r26, 0x09	; 9
    8c84:	8a 54       	subi	r24, 0x4A	; 74
    8c86:	96 42       	sbci	r25, 0x26	; 38
    8c88:	09 f0       	breq	.+2      	; 0x8c8c <instance_print+0x19a>
    8c8a:	a0 cf       	rjmp	.-192    	; 0x8bcc <instance_print+0xda>
    8c8c:	89 cf       	rjmp	.-238    	; 0x8ba0 <instance_print+0xae>
    8c8e:	2d 96       	adiw	r28, 0x0d	; 13
    8c90:	0f b6       	in	r0, 0x3f	; 63
    8c92:	f8 94       	cli
    8c94:	de bf       	out	0x3e, r29	; 62
    8c96:	0f be       	out	0x3f, r0	; 63
    8c98:	cd bf       	out	0x3d, r28	; 61
    8c9a:	df 91       	pop	r29
    8c9c:	cf 91       	pop	r28
    8c9e:	1f 91       	pop	r17
    8ca0:	0f 91       	pop	r16
    8ca2:	ff 90       	pop	r15
    8ca4:	ef 90       	pop	r14
    8ca6:	df 90       	pop	r13
    8ca8:	bf 90       	pop	r11
    8caa:	af 90       	pop	r10
    8cac:	08 95       	ret

00008cae <super_attr>:
    8cae:	ef 92       	push	r14
    8cb0:	ff 92       	push	r15
    8cb2:	0f 93       	push	r16
    8cb4:	1f 93       	push	r17
    8cb6:	cf 93       	push	r28
    8cb8:	df 93       	push	r29
    8cba:	cd b7       	in	r28, 0x3d	; 61
    8cbc:	de b7       	in	r29, 0x3e	; 62
    8cbe:	29 97       	sbiw	r28, 0x09	; 9
    8cc0:	0f b6       	in	r0, 0x3f	; 63
    8cc2:	f8 94       	cli
    8cc4:	de bf       	out	0x3e, r29	; 62
    8cc6:	0f be       	out	0x3f, r0	; 63
    8cc8:	cd bf       	out	0x3d, r28	; 61
    8cca:	da 01       	movw	r26, r20
    8ccc:	2d 91       	ld	r18, X+
    8cce:	3c 91       	ld	r19, X
    8cd0:	23 2b       	or	r18, r19
    8cd2:	09 f0       	breq	.+2      	; 0x8cd6 <super_attr+0x28>
    8cd4:	5a c0       	rjmp	.+180    	; 0x8d8a <super_attr+0xdc>
    8cd6:	8a 01       	movw	r16, r20
    8cd8:	7c 01       	movw	r14, r24
    8cda:	83 70       	andi	r24, 0x03	; 3
    8cdc:	99 27       	eor	r25, r25
    8cde:	89 2b       	or	r24, r25
    8ce0:	31 f4       	brne	.+12     	; 0x8cee <super_attr+0x40>
    8ce2:	f7 01       	movw	r30, r14
    8ce4:	80 81       	ld	r24, Z
    8ce6:	91 81       	ldd	r25, Z+1	; 0x01
    8ce8:	83 53       	subi	r24, 0x33	; 51
    8cea:	9a 41       	sbci	r25, 0x1A	; 26
    8cec:	11 f0       	breq	.+4      	; 0x8cf2 <super_attr+0x44>
    8cee:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    8cf2:	d7 01       	movw	r26, r14
    8cf4:	12 96       	adiw	r26, 0x02	; 2
    8cf6:	ed 91       	ld	r30, X+
    8cf8:	fc 91       	ld	r31, X
    8cfa:	13 97       	sbiw	r26, 0x03	; 3
    8cfc:	cf 01       	movw	r24, r30
    8cfe:	83 70       	andi	r24, 0x03	; 3
    8d00:	99 27       	eor	r25, r25
    8d02:	89 2b       	or	r24, r25
    8d04:	29 f4       	brne	.+10     	; 0x8d10 <super_attr+0x62>
    8d06:	80 81       	ld	r24, Z
    8d08:	91 81       	ldd	r25, Z+1	; 0x01
    8d0a:	83 55       	subi	r24, 0x53	; 83
    8d0c:	9a 41       	sbci	r25, 0x1A	; 26
    8d0e:	11 f0       	breq	.+4      	; 0x8d14 <super_attr+0x66>
    8d10:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    8d14:	d7 01       	movw	r26, r14
    8d16:	14 96       	adiw	r26, 0x04	; 4
    8d18:	8d 91       	ld	r24, X+
    8d1a:	9c 91       	ld	r25, X
    8d1c:	15 97       	sbiw	r26, 0x05	; 5
    8d1e:	9a 83       	std	Y+2, r25	; 0x02
    8d20:	89 83       	std	Y+1, r24	; 0x01
    8d22:	7c 83       	std	Y+4, r23	; 0x04
    8d24:	6b 83       	std	Y+3, r22	; 0x03
    8d26:	1e 82       	std	Y+6, r1	; 0x06
    8d28:	1d 82       	std	Y+5, r1	; 0x05
    8d2a:	58 87       	std	Y+8, r21	; 0x08
    8d2c:	4f 83       	std	Y+7, r20	; 0x07
    8d2e:	19 86       	std	Y+9, r1	; 0x09
    8d30:	61 31       	cpi	r22, 0x11	; 17
    8d32:	71 05       	cpc	r23, r1
    8d34:	21 f4       	brne	.+8      	; 0x8d3e <super_attr+0x90>
    8d36:	88 e0       	ldi	r24, 0x08	; 8
    8d38:	90 e0       	ldi	r25, 0x00	; 0
    8d3a:	9e 83       	std	Y+6, r25	; 0x06
    8d3c:	8d 83       	std	Y+5, r24	; 0x05
    8d3e:	64 8d       	ldd	r22, Z+28	; 0x1c
    8d40:	75 8d       	ldd	r23, Z+29	; 0x1d
    8d42:	61 15       	cp	r22, r1
    8d44:	71 05       	cpc	r23, r1
    8d46:	d1 f0       	breq	.+52     	; 0x8d7c <super_attr+0xce>
    8d48:	bc e1       	ldi	r27, 0x1C	; 28
    8d4a:	6a 3b       	cpi	r22, 0xBA	; 186
    8d4c:	7b 07       	cpc	r23, r27
    8d4e:	b1 f0       	breq	.+44     	; 0x8d7c <super_attr+0xce>
    8d50:	ce 01       	movw	r24, r28
    8d52:	01 96       	adiw	r24, 0x01	; 1
    8d54:	5e dc       	rcall	.-1860   	; 0x8612 <mp_obj_class_lookup>
    8d56:	f8 01       	movw	r30, r16
    8d58:	80 81       	ld	r24, Z
    8d5a:	91 81       	ldd	r25, Z+1	; 0x01
    8d5c:	00 97       	sbiw	r24, 0x00	; 0
    8d5e:	71 f0       	breq	.+28     	; 0x8d7c <super_attr+0xce>
    8d60:	04 97       	sbiw	r24, 0x04	; 4
    8d62:	99 f4       	brne	.+38     	; 0x8d8a <super_attr+0xdc>
    8d64:	82 ea       	ldi	r24, 0xA2	; 162
    8d66:	9a e1       	ldi	r25, 0x1A	; 26
    8d68:	91 83       	std	Z+1, r25	; 0x01
    8d6a:	80 83       	st	Z, r24
    8d6c:	d7 01       	movw	r26, r14
    8d6e:	14 96       	adiw	r26, 0x04	; 4
    8d70:	8d 91       	ld	r24, X+
    8d72:	9c 91       	ld	r25, X
    8d74:	15 97       	sbiw	r26, 0x05	; 5
    8d76:	93 83       	std	Z+3, r25	; 0x03
    8d78:	82 83       	std	Z+2, r24	; 0x02
    8d7a:	07 c0       	rjmp	.+14     	; 0x8d8a <super_attr+0xdc>
    8d7c:	1e 82       	std	Y+6, r1	; 0x06
    8d7e:	1d 82       	std	Y+5, r1	; 0x05
    8d80:	6a eb       	ldi	r22, 0xBA	; 186
    8d82:	7c e1       	ldi	r23, 0x1C	; 28
    8d84:	ce 01       	movw	r24, r28
    8d86:	01 96       	adiw	r24, 0x01	; 1
    8d88:	44 dc       	rcall	.-1912   	; 0x8612 <mp_obj_class_lookup>
    8d8a:	29 96       	adiw	r28, 0x09	; 9
    8d8c:	0f b6       	in	r0, 0x3f	; 63
    8d8e:	f8 94       	cli
    8d90:	de bf       	out	0x3e, r29	; 62
    8d92:	0f be       	out	0x3f, r0	; 63
    8d94:	cd bf       	out	0x3d, r28	; 61
    8d96:	df 91       	pop	r29
    8d98:	cf 91       	pop	r28
    8d9a:	1f 91       	pop	r17
    8d9c:	0f 91       	pop	r16
    8d9e:	ff 90       	pop	r15
    8da0:	ef 90       	pop	r14
    8da2:	08 95       	ret

00008da4 <mp_obj_instance_getiter>:
    8da4:	cf 92       	push	r12
    8da6:	df 92       	push	r13
    8da8:	ef 92       	push	r14
    8daa:	ff 92       	push	r15
    8dac:	0f 93       	push	r16
    8dae:	1f 93       	push	r17
    8db0:	cf 93       	push	r28
    8db2:	df 93       	push	r29
    8db4:	cd b7       	in	r28, 0x3d	; 61
    8db6:	de b7       	in	r29, 0x3e	; 62
    8db8:	2d 97       	sbiw	r28, 0x0d	; 13
    8dba:	0f b6       	in	r0, 0x3f	; 63
    8dbc:	f8 94       	cli
    8dbe:	de bf       	out	0x3e, r29	; 62
    8dc0:	0f be       	out	0x3f, r0	; 63
    8dc2:	cd bf       	out	0x3d, r28	; 61
    8dc4:	8c 01       	movw	r16, r24
    8dc6:	7b 01       	movw	r14, r22
    8dc8:	19 82       	std	Y+1, r1	; 0x01
    8dca:	1a 82       	std	Y+2, r1	; 0x02
    8dcc:	1b 82       	std	Y+3, r1	; 0x03
    8dce:	1c 82       	std	Y+4, r1	; 0x04
    8dd0:	9e 83       	std	Y+6, r25	; 0x06
    8dd2:	8d 83       	std	Y+5, r24	; 0x05
    8dd4:	83 e1       	ldi	r24, 0x13	; 19
    8dd6:	90 e0       	ldi	r25, 0x00	; 0
    8dd8:	98 87       	std	Y+8, r25	; 0x08
    8dda:	8f 83       	std	Y+7, r24	; 0x07
    8ddc:	84 e1       	ldi	r24, 0x14	; 20
    8dde:	90 e0       	ldi	r25, 0x00	; 0
    8de0:	9a 87       	std	Y+10, r25	; 0x0a
    8de2:	89 87       	std	Y+9, r24	; 0x09
    8de4:	ce 01       	movw	r24, r28
    8de6:	01 96       	adiw	r24, 0x01	; 1
    8de8:	9c 87       	std	Y+12, r25	; 0x0c
    8dea:	8b 87       	std	Y+11, r24	; 0x0b
    8dec:	1d 86       	std	Y+13, r1	; 0x0d
    8dee:	d8 01       	movw	r26, r16
    8df0:	6d 91       	ld	r22, X+
    8df2:	7c 91       	ld	r23, X
    8df4:	04 96       	adiw	r24, 0x04	; 4
    8df6:	0d dc       	rcall	.-2022   	; 0x8612 <mp_obj_class_lookup>
    8df8:	89 81       	ldd	r24, Y+1	; 0x01
    8dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    8dfc:	00 97       	sbiw	r24, 0x00	; 0
    8dfe:	31 f1       	breq	.+76     	; 0x8e4c <mp_obj_instance_getiter+0xa8>
    8e00:	04 97       	sbiw	r24, 0x04	; 4
    8e02:	d9 f4       	brne	.+54     	; 0x8e3a <mp_obj_instance_getiter+0x96>
    8e04:	f8 01       	movw	r30, r16
    8e06:	80 85       	ldd	r24, Z+8	; 0x08
    8e08:	91 85       	ldd	r25, Z+9	; 0x09
    8e0a:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    8e0e:	6c 01       	movw	r12, r24
    8e10:	e1 14       	cp	r14, r1
    8e12:	f1 04       	cpc	r15, r1
    8e14:	29 f4       	brne	.+10     	; 0x8e20 <mp_obj_instance_getiter+0x7c>
    8e16:	88 e0       	ldi	r24, 0x08	; 8
    8e18:	90 e0       	ldi	r25, 0x00	; 0
    8e1a:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    8e1e:	7c 01       	movw	r14, r24
    8e20:	d6 01       	movw	r26, r12
    8e22:	54 96       	adiw	r26, 0x14	; 20
    8e24:	ed 91       	ld	r30, X+
    8e26:	fc 91       	ld	r31, X
    8e28:	55 97       	sbiw	r26, 0x15	; 21
    8e2a:	b7 01       	movw	r22, r14
    8e2c:	d8 01       	movw	r26, r16
    8e2e:	18 96       	adiw	r26, 0x08	; 8
    8e30:	8d 91       	ld	r24, X+
    8e32:	9c 91       	ld	r25, X
    8e34:	19 97       	sbiw	r26, 0x09	; 9
    8e36:	09 95       	icall
    8e38:	09 c0       	rjmp	.+18     	; 0x8e4c <mp_obj_instance_getiter+0xa8>
    8e3a:	ae 01       	movw	r20, r28
    8e3c:	4f 5f       	subi	r20, 0xFF	; 255
    8e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    8e40:	60 e0       	ldi	r22, 0x00	; 0
    8e42:	70 e0       	ldi	r23, 0x00	; 0
    8e44:	80 e0       	ldi	r24, 0x00	; 0
    8e46:	90 e0       	ldi	r25, 0x00	; 0
    8e48:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    8e4c:	2d 96       	adiw	r28, 0x0d	; 13
    8e4e:	0f b6       	in	r0, 0x3f	; 63
    8e50:	f8 94       	cli
    8e52:	de bf       	out	0x3e, r29	; 62
    8e54:	0f be       	out	0x3f, r0	; 63
    8e56:	cd bf       	out	0x3d, r28	; 61
    8e58:	df 91       	pop	r29
    8e5a:	cf 91       	pop	r28
    8e5c:	1f 91       	pop	r17
    8e5e:	0f 91       	pop	r16
    8e60:	ff 90       	pop	r15
    8e62:	ef 90       	pop	r14
    8e64:	df 90       	pop	r13
    8e66:	cf 90       	pop	r12
    8e68:	08 95       	ret

00008e6a <mp_obj_instance_call>:
    8e6a:	af 92       	push	r10
    8e6c:	bf 92       	push	r11
    8e6e:	cf 92       	push	r12
    8e70:	df 92       	push	r13
    8e72:	ef 92       	push	r14
    8e74:	ff 92       	push	r15
    8e76:	0f 93       	push	r16
    8e78:	1f 93       	push	r17
    8e7a:	cf 93       	push	r28
    8e7c:	df 93       	push	r29
    8e7e:	cd b7       	in	r28, 0x3d	; 61
    8e80:	de b7       	in	r29, 0x3e	; 62
    8e82:	2d 97       	sbiw	r28, 0x0d	; 13
    8e84:	0f b6       	in	r0, 0x3f	; 63
    8e86:	f8 94       	cli
    8e88:	de bf       	out	0x3e, r29	; 62
    8e8a:	0f be       	out	0x3f, r0	; 63
    8e8c:	cd bf       	out	0x3d, r28	; 61
    8e8e:	7c 01       	movw	r14, r24
    8e90:	6b 01       	movw	r12, r22
    8e92:	5a 01       	movw	r10, r20
    8e94:	89 01       	movw	r16, r18
    8e96:	1a 82       	std	Y+2, r1	; 0x02
    8e98:	19 82       	std	Y+1, r1	; 0x01
    8e9a:	1c 82       	std	Y+4, r1	; 0x04
    8e9c:	1b 82       	std	Y+3, r1	; 0x03
    8e9e:	9e 83       	std	Y+6, r25	; 0x06
    8ea0:	8d 83       	std	Y+5, r24	; 0x05
    8ea2:	89 e0       	ldi	r24, 0x09	; 9
    8ea4:	90 e0       	ldi	r25, 0x00	; 0
    8ea6:	98 87       	std	Y+8, r25	; 0x08
    8ea8:	8f 83       	std	Y+7, r24	; 0x07
    8eaa:	8a e0       	ldi	r24, 0x0A	; 10
    8eac:	90 e0       	ldi	r25, 0x00	; 0
    8eae:	9a 87       	std	Y+10, r25	; 0x0a
    8eb0:	89 87       	std	Y+9, r24	; 0x09
    8eb2:	ce 01       	movw	r24, r28
    8eb4:	01 96       	adiw	r24, 0x01	; 1
    8eb6:	9c 87       	std	Y+12, r25	; 0x0c
    8eb8:	8b 87       	std	Y+11, r24	; 0x0b
    8eba:	1d 86       	std	Y+13, r1	; 0x0d
    8ebc:	f7 01       	movw	r30, r14
    8ebe:	60 81       	ld	r22, Z
    8ec0:	71 81       	ldd	r23, Z+1	; 0x01
    8ec2:	04 96       	adiw	r24, 0x04	; 4
    8ec4:	a6 db       	rcall	.-2228   	; 0x8612 <mp_obj_class_lookup>
    8ec6:	89 81       	ldd	r24, Y+1	; 0x01
    8ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    8eca:	00 97       	sbiw	r24, 0x00	; 0
    8ecc:	21 f4       	brne	.+8      	; 0x8ed6 <mp_obj_instance_call+0x6c>
    8ece:	8e ee       	ldi	r24, 0xEE	; 238
    8ed0:	92 e0       	ldi	r25, 0x02	; 2
    8ed2:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    8ed6:	84 30       	cpi	r24, 0x04	; 4
    8ed8:	91 05       	cpc	r25, r1
    8eda:	49 f4       	brne	.+18     	; 0x8eee <mp_obj_instance_call+0x84>
    8edc:	98 01       	movw	r18, r16
    8ede:	a5 01       	movw	r20, r10
    8ee0:	b6 01       	movw	r22, r12
    8ee2:	f7 01       	movw	r30, r14
    8ee4:	80 85       	ldd	r24, Z+8	; 0x08
    8ee6:	91 85       	ldd	r25, Z+9	; 0x09
    8ee8:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
    8eec:	06 c0       	rjmp	.+12     	; 0x8efa <mp_obj_instance_call+0x90>
    8eee:	6b 81       	ldd	r22, Y+3	; 0x03
    8ef0:	7c 81       	ldd	r23, Y+4	; 0x04
    8ef2:	95 01       	movw	r18, r10
    8ef4:	a6 01       	movw	r20, r12
    8ef6:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <mp_call_method_self_n_kw>
    8efa:	2d 96       	adiw	r28, 0x0d	; 13
    8efc:	0f b6       	in	r0, 0x3f	; 63
    8efe:	f8 94       	cli
    8f00:	de bf       	out	0x3e, r29	; 62
    8f02:	0f be       	out	0x3f, r0	; 63
    8f04:	cd bf       	out	0x3d, r28	; 61
    8f06:	df 91       	pop	r29
    8f08:	cf 91       	pop	r28
    8f0a:	1f 91       	pop	r17
    8f0c:	0f 91       	pop	r16
    8f0e:	ff 90       	pop	r15
    8f10:	ef 90       	pop	r14
    8f12:	df 90       	pop	r13
    8f14:	cf 90       	pop	r12
    8f16:	bf 90       	pop	r11
    8f18:	af 90       	pop	r10
    8f1a:	08 95       	ret

00008f1c <type_attr>:
    8f1c:	0f 93       	push	r16
    8f1e:	1f 93       	push	r17
    8f20:	cf 93       	push	r28
    8f22:	df 93       	push	r29
    8f24:	cd b7       	in	r28, 0x3d	; 61
    8f26:	de b7       	in	r29, 0x3e	; 62
    8f28:	29 97       	sbiw	r28, 0x09	; 9
    8f2a:	0f b6       	in	r0, 0x3f	; 63
    8f2c:	f8 94       	cli
    8f2e:	de bf       	out	0x3e, r29	; 62
    8f30:	0f be       	out	0x3f, r0	; 63
    8f32:	cd bf       	out	0x3d, r28	; 61
    8f34:	8a 01       	movw	r16, r20
    8f36:	9c 01       	movw	r18, r24
    8f38:	23 70       	andi	r18, 0x03	; 3
    8f3a:	33 27       	eor	r19, r19
    8f3c:	23 2b       	or	r18, r19
    8f3e:	31 f4       	brne	.+12     	; 0x8f4c <type_attr+0x30>
    8f40:	dc 01       	movw	r26, r24
    8f42:	2d 91       	ld	r18, X+
    8f44:	3c 91       	ld	r19, X
    8f46:	23 55       	subi	r18, 0x53	; 83
    8f48:	3a 41       	sbci	r19, 0x1A	; 26
    8f4a:	11 f0       	breq	.+4      	; 0x8f50 <type_attr+0x34>
    8f4c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    8f50:	fa 01       	movw	r30, r20
    8f52:	20 81       	ld	r18, Z
    8f54:	31 81       	ldd	r19, Z+1	; 0x01
    8f56:	23 2b       	or	r18, r19
    8f58:	79 f4       	brne	.+30     	; 0x8f78 <type_attr+0x5c>
    8f5a:	9a 83       	std	Y+2, r25	; 0x02
    8f5c:	89 83       	std	Y+1, r24	; 0x01
    8f5e:	7c 83       	std	Y+4, r23	; 0x04
    8f60:	6b 83       	std	Y+3, r22	; 0x03
    8f62:	1e 82       	std	Y+6, r1	; 0x06
    8f64:	1d 82       	std	Y+5, r1	; 0x05
    8f66:	58 87       	std	Y+8, r21	; 0x08
    8f68:	4f 83       	std	Y+7, r20	; 0x07
    8f6a:	21 e0       	ldi	r18, 0x01	; 1
    8f6c:	29 87       	std	Y+9, r18	; 0x09
    8f6e:	bc 01       	movw	r22, r24
    8f70:	ce 01       	movw	r24, r28
    8f72:	01 96       	adiw	r24, 0x01	; 1
    8f74:	4e db       	rcall	.-2404   	; 0x8612 <mp_obj_class_lookup>
    8f76:	46 c0       	rjmp	.+140    	; 0x9004 <type_attr+0xe8>
    8f78:	dc 01       	movw	r26, r24
    8f7a:	5e 96       	adiw	r26, 0x1e	; 30
    8f7c:	ed 91       	ld	r30, X+
    8f7e:	fc 91       	ld	r31, X
    8f80:	5f 97       	sbiw	r26, 0x1f	; 31
    8f82:	30 97       	sbiw	r30, 0x00	; 0
    8f84:	09 f4       	brne	.+2      	; 0x8f88 <type_attr+0x6c>
    8f86:	3e c0       	rjmp	.+124    	; 0x9004 <type_attr+0xe8>
    8f88:	cf 01       	movw	r24, r30
    8f8a:	83 70       	andi	r24, 0x03	; 3
    8f8c:	99 27       	eor	r25, r25
    8f8e:	89 2b       	or	r24, r25
    8f90:	49 f4       	brne	.+18     	; 0x8fa4 <type_attr+0x88>
    8f92:	a0 81       	ld	r26, Z
    8f94:	b1 81       	ldd	r27, Z+1	; 0x01
    8f96:	18 96       	adiw	r26, 0x08	; 8
    8f98:	8d 91       	ld	r24, X+
    8f9a:	9c 91       	ld	r25, X
    8f9c:	19 97       	sbiw	r26, 0x09	; 9
    8f9e:	8a 5a       	subi	r24, 0xAA	; 170
    8fa0:	99 48       	sbci	r25, 0x89	; 137
    8fa2:	11 f0       	breq	.+4      	; 0x8fa8 <type_attr+0x8c>
    8fa4:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    8fa8:	82 81       	ldd	r24, Z+2	; 0x02
    8faa:	81 fd       	sbrc	r24, 1
    8fac:	2b c0       	rjmp	.+86     	; 0x9004 <type_attr+0xe8>
    8fae:	cf 01       	movw	r24, r30
    8fb0:	02 96       	adiw	r24, 0x02	; 2
    8fb2:	fa 01       	movw	r30, r20
    8fb4:	22 81       	ldd	r18, Z+2	; 0x02
    8fb6:	33 81       	ldd	r19, Z+3	; 0x03
    8fb8:	23 2b       	or	r18, r19
    8fba:	81 f4       	brne	.+32     	; 0x8fdc <type_attr+0xc0>
    8fbc:	66 0f       	add	r22, r22
    8fbe:	77 1f       	adc	r23, r23
    8fc0:	66 0f       	add	r22, r22
    8fc2:	77 1f       	adc	r23, r23
    8fc4:	66 0f       	add	r22, r22
    8fc6:	77 1f       	adc	r23, r23
    8fc8:	62 60       	ori	r22, 0x02	; 2
    8fca:	42 e0       	ldi	r20, 0x02	; 2
    8fcc:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    8fd0:	89 2b       	or	r24, r25
    8fd2:	c1 f0       	breq	.+48     	; 0x9004 <type_attr+0xe8>
    8fd4:	d8 01       	movw	r26, r16
    8fd6:	1d 92       	st	X+, r1
    8fd8:	1c 92       	st	X, r1
    8fda:	14 c0       	rjmp	.+40     	; 0x9004 <type_attr+0xe8>
    8fdc:	66 0f       	add	r22, r22
    8fde:	77 1f       	adc	r23, r23
    8fe0:	66 0f       	add	r22, r22
    8fe2:	77 1f       	adc	r23, r23
    8fe4:	66 0f       	add	r22, r22
    8fe6:	77 1f       	adc	r23, r23
    8fe8:	62 60       	ori	r22, 0x02	; 2
    8fea:	41 e0       	ldi	r20, 0x01	; 1
    8fec:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    8ff0:	f8 01       	movw	r30, r16
    8ff2:	22 81       	ldd	r18, Z+2	; 0x02
    8ff4:	33 81       	ldd	r19, Z+3	; 0x03
    8ff6:	dc 01       	movw	r26, r24
    8ff8:	13 96       	adiw	r26, 0x03	; 3
    8ffa:	3c 93       	st	X, r19
    8ffc:	2e 93       	st	-X, r18
    8ffe:	12 97       	sbiw	r26, 0x02	; 2
    9000:	11 82       	std	Z+1, r1	; 0x01
    9002:	10 82       	st	Z, r1
    9004:	29 96       	adiw	r28, 0x09	; 9
    9006:	0f b6       	in	r0, 0x3f	; 63
    9008:	f8 94       	cli
    900a:	de bf       	out	0x3e, r29	; 62
    900c:	0f be       	out	0x3f, r0	; 63
    900e:	cd bf       	out	0x3d, r28	; 61
    9010:	df 91       	pop	r29
    9012:	cf 91       	pop	r28
    9014:	1f 91       	pop	r17
    9016:	0f 91       	pop	r16
    9018:	08 95       	ret

0000901a <mp_obj_instance_attr>:
    901a:	af 92       	push	r10
    901c:	bf 92       	push	r11
    901e:	cf 92       	push	r12
    9020:	df 92       	push	r13
    9022:	ef 92       	push	r14
    9024:	ff 92       	push	r15
    9026:	0f 93       	push	r16
    9028:	1f 93       	push	r17
    902a:	cf 93       	push	r28
    902c:	df 93       	push	r29
    902e:	cd b7       	in	r28, 0x3d	; 61
    9030:	de b7       	in	r29, 0x3e	; 62
    9032:	2f 97       	sbiw	r28, 0x0f	; 15
    9034:	0f b6       	in	r0, 0x3f	; 63
    9036:	f8 94       	cli
    9038:	de bf       	out	0x3e, r29	; 62
    903a:	0f be       	out	0x3f, r0	; 63
    903c:	cd bf       	out	0x3d, r28	; 61
    903e:	5c 01       	movw	r10, r24
    9040:	8b 01       	movw	r16, r22
    9042:	7a 01       	movw	r14, r20
    9044:	fa 01       	movw	r30, r20
    9046:	80 81       	ld	r24, Z
    9048:	91 81       	ldd	r25, Z+1	; 0x01
    904a:	89 2b       	or	r24, r25
    904c:	09 f0       	breq	.+2      	; 0x9050 <mp_obj_instance_attr+0x36>
    904e:	57 c0       	rjmp	.+174    	; 0x90fe <mp_obj_instance_attr+0xe4>
    9050:	c5 01       	movw	r24, r10
    9052:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    9056:	fc 01       	movw	r30, r24
    9058:	80 85       	ldd	r24, Z+8	; 0x08
    905a:	91 85       	ldd	r25, Z+9	; 0x09
    905c:	8f 53       	subi	r24, 0x3F	; 63
    905e:	9b 44       	sbci	r25, 0x4B	; 75
    9060:	11 f0       	breq	.+4      	; 0x9066 <mp_obj_instance_attr+0x4c>
    9062:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    9066:	68 01       	movw	r12, r16
    9068:	cc 0c       	add	r12, r12
    906a:	dd 1c       	adc	r13, r13
    906c:	cc 0c       	add	r12, r12
    906e:	dd 1c       	adc	r13, r13
    9070:	cc 0c       	add	r12, r12
    9072:	dd 1c       	adc	r13, r13
    9074:	68 94       	set
    9076:	c1 f8       	bld	r12, 1
    9078:	40 e0       	ldi	r20, 0x00	; 0
    907a:	b6 01       	movw	r22, r12
    907c:	c5 01       	movw	r24, r10
    907e:	02 96       	adiw	r24, 0x02	; 2
    9080:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    9084:	00 97       	sbiw	r24, 0x00	; 0
    9086:	39 f0       	breq	.+14     	; 0x9096 <mp_obj_instance_attr+0x7c>
    9088:	fc 01       	movw	r30, r24
    908a:	82 81       	ldd	r24, Z+2	; 0x02
    908c:	93 81       	ldd	r25, Z+3	; 0x03
    908e:	f7 01       	movw	r30, r14
    9090:	91 83       	std	Z+1, r25	; 0x01
    9092:	80 83       	st	Z, r24
    9094:	5b c0       	rjmp	.+182    	; 0x914c <mp_obj_instance_attr+0x132>
    9096:	ba 82       	std	Y+2, r11	; 0x02
    9098:	a9 82       	std	Y+1, r10	; 0x01
    909a:	1c 83       	std	Y+4, r17	; 0x04
    909c:	0b 83       	std	Y+3, r16	; 0x03
    909e:	1e 82       	std	Y+6, r1	; 0x06
    90a0:	1d 82       	std	Y+5, r1	; 0x05
    90a2:	f8 86       	std	Y+8, r15	; 0x08
    90a4:	ef 82       	std	Y+7, r14	; 0x07
    90a6:	19 86       	std	Y+9, r1	; 0x09
    90a8:	f5 01       	movw	r30, r10
    90aa:	60 81       	ld	r22, Z
    90ac:	71 81       	ldd	r23, Z+1	; 0x01
    90ae:	ce 01       	movw	r24, r28
    90b0:	01 96       	adiw	r24, 0x01	; 1
    90b2:	af da       	rcall	.-2722   	; 0x8612 <mp_obj_class_lookup>
    90b4:	f7 01       	movw	r30, r14
    90b6:	80 81       	ld	r24, Z
    90b8:	91 81       	ldd	r25, Z+1	; 0x01
    90ba:	89 2b       	or	r24, r25
    90bc:	09 f0       	breq	.+2      	; 0x90c0 <mp_obj_instance_attr+0xa6>
    90be:	46 c0       	rjmp	.+140    	; 0x914c <mp_obj_instance_attr+0x132>
    90c0:	0e 30       	cpi	r16, 0x0E	; 14
    90c2:	11 05       	cpc	r17, r1
    90c4:	09 f4       	brne	.+2      	; 0x90c8 <mp_obj_instance_attr+0xae>
    90c6:	42 c0       	rjmp	.+132    	; 0x914c <mp_obj_instance_attr+0x132>
    90c8:	ae 01       	movw	r20, r28
    90ca:	46 5f       	subi	r20, 0xF6	; 246
    90cc:	5f 4f       	sbci	r21, 0xFF	; 255
    90ce:	6e e0       	ldi	r22, 0x0E	; 14
    90d0:	70 e0       	ldi	r23, 0x00	; 0
    90d2:	c5 01       	movw	r24, r10
    90d4:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
    90d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    90da:	9b 85       	ldd	r25, Y+11	; 0x0b
    90dc:	89 2b       	or	r24, r25
    90de:	b1 f1       	breq	.+108    	; 0x914c <mp_obj_instance_attr+0x132>
    90e0:	df 86       	std	Y+15, r13	; 0x0f
    90e2:	ce 86       	std	Y+14, r12	; 0x0e
    90e4:	ae 01       	movw	r20, r28
    90e6:	46 5f       	subi	r20, 0xF6	; 246
    90e8:	5f 4f       	sbci	r21, 0xFF	; 255
    90ea:	60 e0       	ldi	r22, 0x00	; 0
    90ec:	70 e0       	ldi	r23, 0x00	; 0
    90ee:	81 e0       	ldi	r24, 0x01	; 1
    90f0:	90 e0       	ldi	r25, 0x00	; 0
    90f2:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    90f6:	f7 01       	movw	r30, r14
    90f8:	91 83       	std	Z+1, r25	; 0x01
    90fa:	80 83       	st	Z, r24
    90fc:	27 c0       	rjmp	.+78     	; 0x914c <mp_obj_instance_attr+0x132>
    90fe:	fa 01       	movw	r30, r20
    9100:	c2 80       	ldd	r12, Z+2	; 0x02
    9102:	d3 80       	ldd	r13, Z+3	; 0x03
    9104:	c1 14       	cp	r12, r1
    9106:	d1 04       	cpc	r13, r1
    9108:	79 f4       	brne	.+30     	; 0x9128 <mp_obj_instance_attr+0x10e>
    910a:	66 0f       	add	r22, r22
    910c:	77 1f       	adc	r23, r23
    910e:	66 0f       	add	r22, r22
    9110:	77 1f       	adc	r23, r23
    9112:	66 0f       	add	r22, r22
    9114:	77 1f       	adc	r23, r23
    9116:	62 60       	ori	r22, 0x02	; 2
    9118:	42 e0       	ldi	r20, 0x02	; 2
    911a:	c5 01       	movw	r24, r10
    911c:	02 96       	adiw	r24, 0x02	; 2
    911e:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    9122:	89 2b       	or	r24, r25
    9124:	99 f0       	breq	.+38     	; 0x914c <mp_obj_instance_attr+0x132>
    9126:	0f c0       	rjmp	.+30     	; 0x9146 <mp_obj_instance_attr+0x12c>
    9128:	66 0f       	add	r22, r22
    912a:	77 1f       	adc	r23, r23
    912c:	66 0f       	add	r22, r22
    912e:	77 1f       	adc	r23, r23
    9130:	66 0f       	add	r22, r22
    9132:	77 1f       	adc	r23, r23
    9134:	62 60       	ori	r22, 0x02	; 2
    9136:	41 e0       	ldi	r20, 0x01	; 1
    9138:	c5 01       	movw	r24, r10
    913a:	02 96       	adiw	r24, 0x02	; 2
    913c:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    9140:	fc 01       	movw	r30, r24
    9142:	d3 82       	std	Z+3, r13	; 0x03
    9144:	c2 82       	std	Z+2, r12	; 0x02
    9146:	f7 01       	movw	r30, r14
    9148:	11 82       	std	Z+1, r1	; 0x01
    914a:	10 82       	st	Z, r1
    914c:	2f 96       	adiw	r28, 0x0f	; 15
    914e:	0f b6       	in	r0, 0x3f	; 63
    9150:	f8 94       	cli
    9152:	de bf       	out	0x3e, r29	; 62
    9154:	0f be       	out	0x3f, r0	; 63
    9156:	cd bf       	out	0x3d, r28	; 61
    9158:	df 91       	pop	r29
    915a:	cf 91       	pop	r28
    915c:	1f 91       	pop	r17
    915e:	0f 91       	pop	r16
    9160:	ff 90       	pop	r15
    9162:	ef 90       	pop	r14
    9164:	df 90       	pop	r13
    9166:	cf 90       	pop	r12
    9168:	bf 90       	pop	r11
    916a:	af 90       	pop	r10
    916c:	08 95       	ret

0000916e <mp_obj_new_type>:
    916e:	cf 92       	push	r12
    9170:	df 92       	push	r13
    9172:	ef 92       	push	r14
    9174:	ff 92       	push	r15
    9176:	0f 93       	push	r16
    9178:	1f 93       	push	r17
    917a:	cf 93       	push	r28
    917c:	df 93       	push	r29
    917e:	00 d0       	rcall	.+0      	; 0x9180 <mp_obj_new_type+0x12>
    9180:	00 d0       	rcall	.+0      	; 0x9182 <mp_obj_new_type+0x14>
    9182:	00 d0       	rcall	.+0      	; 0x9184 <mp_obj_new_type+0x16>
    9184:	cd b7       	in	r28, 0x3d	; 61
    9186:	de b7       	in	r29, 0x3e	; 62
    9188:	7c 01       	movw	r14, r24
    918a:	cb 01       	movw	r24, r22
    918c:	8a 01       	movw	r16, r20
    918e:	9b 01       	movw	r18, r22
    9190:	23 70       	andi	r18, 0x03	; 3
    9192:	33 27       	eor	r19, r19
    9194:	23 2b       	or	r18, r19
    9196:	31 f4       	brne	.+12     	; 0x91a4 <mp_obj_new_type+0x36>
    9198:	db 01       	movw	r26, r22
    919a:	2d 91       	ld	r18, X+
    919c:	3c 91       	ld	r19, X
    919e:	2e 5a       	subi	r18, 0xAE	; 174
    91a0:	3a 41       	sbci	r19, 0x1A	; 26
    91a2:	21 f0       	breq	.+8      	; 0x91ac <mp_obj_new_type+0x3e>
    91a4:	80 e0       	ldi	r24, 0x00	; 0
    91a6:	90 e0       	ldi	r25, 0x00	; 0
    91a8:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    91ac:	9a 01       	movw	r18, r20
    91ae:	23 70       	andi	r18, 0x03	; 3
    91b0:	33 27       	eor	r19, r19
    91b2:	23 2b       	or	r18, r19
    91b4:	41 f4       	brne	.+16     	; 0x91c6 <mp_obj_new_type+0x58>
    91b6:	da 01       	movw	r26, r20
    91b8:	ed 91       	ld	r30, X+
    91ba:	fc 91       	ld	r31, X
    91bc:	20 85       	ldd	r18, Z+8	; 0x08
    91be:	31 85       	ldd	r19, Z+9	; 0x09
    91c0:	2a 5a       	subi	r18, 0xAA	; 170
    91c2:	39 48       	sbci	r19, 0x89	; 137
    91c4:	21 f0       	breq	.+8      	; 0x91ce <mp_obj_new_type+0x60>
    91c6:	80 e0       	ldi	r24, 0x00	; 0
    91c8:	90 e0       	ldi	r25, 0x00	; 0
    91ca:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    91ce:	ae 01       	movw	r20, r28
    91d0:	4d 5f       	subi	r20, 0xFD	; 253
    91d2:	5f 4f       	sbci	r21, 0xFF	; 255
    91d4:	be 01       	movw	r22, r28
    91d6:	6f 5f       	subi	r22, 0xFF	; 255
    91d8:	7f 4f       	sbci	r23, 0xFF	; 255
    91da:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <mp_obj_tuple_get>
    91de:	49 81       	ldd	r20, Y+1	; 0x01
    91e0:	5a 81       	ldd	r21, Y+2	; 0x02
    91e2:	41 15       	cp	r20, r1
    91e4:	51 05       	cpc	r21, r1
    91e6:	99 f1       	breq	.+102    	; 0x924e <mp_obj_new_type+0xe0>
    91e8:	ab 81       	ldd	r26, Y+3	; 0x03
    91ea:	bc 81       	ldd	r27, Y+4	; 0x04
    91ec:	ed 91       	ld	r30, X+
    91ee:	fc 91       	ld	r31, X
    91f0:	11 97       	sbiw	r26, 0x01	; 1
    91f2:	cf 01       	movw	r24, r30
    91f4:	83 70       	andi	r24, 0x03	; 3
    91f6:	99 27       	eor	r25, r25
    91f8:	89 2b       	or	r24, r25
    91fa:	b1 f4       	brne	.+44     	; 0x9228 <mp_obj_new_type+0xba>
    91fc:	80 81       	ld	r24, Z
    91fe:	91 81       	ldd	r25, Z+1	; 0x01
    9200:	83 55       	subi	r24, 0x53	; 83
    9202:	9a 41       	sbci	r25, 0x1A	; 26
    9204:	89 f4       	brne	.+34     	; 0x9228 <mp_obj_new_type+0xba>
    9206:	80 85       	ldd	r24, Z+8	; 0x08
    9208:	91 85       	ldd	r25, Z+9	; 0x09
    920a:	89 2b       	or	r24, r25
    920c:	c9 f4       	brne	.+50     	; 0x9240 <mp_obj_new_type+0xd2>
    920e:	14 c0       	rjmp	.+40     	; 0x9238 <mp_obj_new_type+0xca>
    9210:	ed 91       	ld	r30, X+
    9212:	fd 91       	ld	r31, X+
    9214:	9f 01       	movw	r18, r30
    9216:	23 70       	andi	r18, 0x03	; 3
    9218:	33 27       	eor	r19, r19
    921a:	23 2b       	or	r18, r19
    921c:	29 f4       	brne	.+10     	; 0x9228 <mp_obj_new_type+0xba>
    921e:	20 81       	ld	r18, Z
    9220:	31 81       	ldd	r19, Z+1	; 0x01
    9222:	23 55       	subi	r18, 0x53	; 83
    9224:	3a 41       	sbci	r19, 0x1A	; 26
    9226:	21 f0       	breq	.+8      	; 0x9230 <mp_obj_new_type+0xc2>
    9228:	80 e0       	ldi	r24, 0x00	; 0
    922a:	90 e0       	ldi	r25, 0x00	; 0
    922c:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    9230:	20 85       	ldd	r18, Z+8	; 0x08
    9232:	31 85       	ldd	r19, Z+9	; 0x09
    9234:	23 2b       	or	r18, r19
    9236:	39 f4       	brne	.+14     	; 0x9246 <mp_obj_new_type+0xd8>
    9238:	8b e1       	ldi	r24, 0x1B	; 27
    923a:	97 e0       	ldi	r25, 0x07	; 7
    923c:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    9240:	12 96       	adiw	r26, 0x02	; 2
    9242:	80 e0       	ldi	r24, 0x00	; 0
    9244:	90 e0       	ldi	r25, 0x00	; 0
    9246:	01 96       	adiw	r24, 0x01	; 1
    9248:	84 17       	cp	r24, r20
    924a:	95 07       	cpc	r25, r21
    924c:	09 f7       	brne	.-62     	; 0x9210 <mp_obj_new_type+0xa2>
    924e:	80 e2       	ldi	r24, 0x20	; 32
    9250:	90 e0       	ldi	r25, 0x00	; 0
    9252:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9256:	6c 01       	movw	r12, r24
    9258:	83 e5       	ldi	r24, 0x53	; 83
    925a:	9a e1       	ldi	r25, 0x1A	; 26
    925c:	d6 01       	movw	r26, r12
    925e:	11 96       	adiw	r26, 0x01	; 1
    9260:	9c 93       	st	X, r25
    9262:	8e 93       	st	-X, r24
    9264:	8c e1       	ldi	r24, 0x1C	; 28
    9266:	90 e0       	ldi	r25, 0x00	; 0
    9268:	13 96       	adiw	r26, 0x03	; 3
    926a:	9c 93       	st	X, r25
    926c:	8e 93       	st	-X, r24
    926e:	12 97       	sbiw	r26, 0x02	; 2
    9270:	15 96       	adiw	r26, 0x05	; 5
    9272:	fc 92       	st	X, r15
    9274:	ee 92       	st	-X, r14
    9276:	14 97       	sbiw	r26, 0x04	; 4
    9278:	89 e7       	ldi	r24, 0x79	; 121
    927a:	95 e4       	ldi	r25, 0x45	; 69
    927c:	17 96       	adiw	r26, 0x07	; 7
    927e:	9c 93       	st	X, r25
    9280:	8e 93       	st	-X, r24
    9282:	16 97       	sbiw	r26, 0x06	; 6
    9284:	8f e3       	ldi	r24, 0x3F	; 63
    9286:	9b e4       	ldi	r25, 0x4B	; 75
    9288:	19 96       	adiw	r26, 0x09	; 9
    928a:	9c 93       	st	X, r25
    928c:	8e 93       	st	-X, r24
    928e:	18 97       	sbiw	r26, 0x08	; 8
    9290:	85 e3       	ldi	r24, 0x35	; 53
    9292:	97 e4       	ldi	r25, 0x47	; 71
    9294:	1b 96       	adiw	r26, 0x0b	; 11
    9296:	9c 93       	st	X, r25
    9298:	8e 93       	st	-X, r24
    929a:	1a 97       	sbiw	r26, 0x0a	; 10
    929c:	8f ee       	ldi	r24, 0xEF	; 239
    929e:	94 e4       	ldi	r25, 0x44	; 68
    92a0:	1d 96       	adiw	r26, 0x0d	; 13
    92a2:	9c 93       	st	X, r25
    92a4:	8e 93       	st	-X, r24
    92a6:	1c 97       	sbiw	r26, 0x0c	; 12
    92a8:	8e e7       	ldi	r24, 0x7E	; 126
    92aa:	9e e8       	ldi	r25, 0x8E	; 142
    92ac:	1f 96       	adiw	r26, 0x0f	; 15
    92ae:	9c 93       	st	X, r25
    92b0:	8e 93       	st	-X, r24
    92b2:	1e 97       	sbiw	r26, 0x0e	; 14
    92b4:	8d e0       	ldi	r24, 0x0D	; 13
    92b6:	98 e4       	ldi	r25, 0x48	; 72
    92b8:	51 96       	adiw	r26, 0x11	; 17
    92ba:	9c 93       	st	X, r25
    92bc:	8e 93       	st	-X, r24
    92be:	50 97       	sbiw	r26, 0x10	; 16
    92c0:	8b e6       	ldi	r24, 0x6B	; 107
    92c2:	94 e4       	ldi	r25, 0x44	; 68
    92c4:	53 96       	adiw	r26, 0x13	; 19
    92c6:	9c 93       	st	X, r25
    92c8:	8e 93       	st	-X, r24
    92ca:	52 97       	sbiw	r26, 0x12	; 18
    92cc:	82 ed       	ldi	r24, 0xD2	; 210
    92ce:	96 e4       	ldi	r25, 0x46	; 70
    92d0:	55 96       	adiw	r26, 0x15	; 21
    92d2:	9c 93       	st	X, r25
    92d4:	8e 93       	st	-X, r24
    92d6:	54 97       	sbiw	r26, 0x14	; 20
    92d8:	8b e1       	ldi	r24, 0x1B	; 27
    92da:	94 e4       	ldi	r25, 0x44	; 68
    92dc:	59 96       	adiw	r26, 0x19	; 25
    92de:	9c 93       	st	X, r25
    92e0:	8e 93       	st	-X, r24
    92e2:	58 97       	sbiw	r26, 0x18	; 24
    92e4:	89 81       	ldd	r24, Y+1	; 0x01
    92e6:	9a 81       	ldd	r25, Y+2	; 0x02
    92e8:	00 97       	sbiw	r24, 0x00	; 0
    92ea:	c1 f0       	breq	.+48     	; 0x931c <mp_obj_new_type+0x1ae>
    92ec:	eb 81       	ldd	r30, Y+3	; 0x03
    92ee:	fc 81       	ldd	r31, Y+4	; 0x04
    92f0:	a0 81       	ld	r26, Z
    92f2:	b1 81       	ldd	r27, Z+1	; 0x01
    92f4:	5a 96       	adiw	r26, 0x1a	; 26
    92f6:	2d 91       	ld	r18, X+
    92f8:	3c 91       	ld	r19, X
    92fa:	5b 97       	sbiw	r26, 0x1b	; 27
    92fc:	d6 01       	movw	r26, r12
    92fe:	5b 96       	adiw	r26, 0x1b	; 27
    9300:	3c 93       	st	X, r19
    9302:	2e 93       	st	-X, r18
    9304:	5a 97       	sbiw	r26, 0x1a	; 26
    9306:	02 97       	sbiw	r24, 0x02	; 2
    9308:	20 f0       	brcs	.+8      	; 0x9312 <mp_obj_new_type+0x1a4>
    930a:	8e e3       	ldi	r24, 0x3E	; 62
    930c:	97 e0       	ldi	r25, 0x07	; 7
    930e:	0e 94 ce 2a 	call	0x559c	; 0x559c <mp_raise_NotImplementedError>
    9312:	80 81       	ld	r24, Z
    9314:	91 81       	ldd	r25, Z+1	; 0x01
    9316:	f6 01       	movw	r30, r12
    9318:	95 8f       	std	Z+29, r25	; 0x1d
    931a:	84 8f       	std	Z+28, r24	; 0x1c
    931c:	d6 01       	movw	r26, r12
    931e:	5f 96       	adiw	r26, 0x1f	; 31
    9320:	1c 93       	st	X, r17
    9322:	0e 93       	st	-X, r16
    9324:	5e 97       	sbiw	r26, 0x1e	; 30
    9326:	be 01       	movw	r22, r28
    9328:	6b 5f       	subi	r22, 0xFB	; 251
    932a:	7f 4f       	sbci	r23, 0xFF	; 255
    932c:	c6 01       	movw	r24, r12
    932e:	0e 94 c1 03 	call	0x782	; 0x782 <instance_count_native_bases>
    9332:	02 97       	sbiw	r24, 0x02	; 2
    9334:	20 f0       	brcs	.+8      	; 0x933e <mp_obj_new_type+0x1d0>
    9336:	81 e6       	ldi	r24, 0x61	; 97
    9338:	97 e0       	ldi	r25, 0x07	; 7
    933a:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    933e:	f6 01       	movw	r30, r12
    9340:	86 8d       	ldd	r24, Z+30	; 0x1e
    9342:	97 8d       	ldd	r25, Z+31	; 0x1f
    9344:	40 e0       	ldi	r20, 0x00	; 0
    9346:	62 ec       	ldi	r22, 0xC2	; 194
    9348:	70 e0       	ldi	r23, 0x00	; 0
    934a:	02 96       	adiw	r24, 0x02	; 2
    934c:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    9350:	8c 01       	movw	r16, r24
    9352:	00 97       	sbiw	r24, 0x00	; 0
    9354:	01 f1       	breq	.+64     	; 0x9396 <mp_obj_new_type+0x228>
    9356:	dc 01       	movw	r26, r24
    9358:	12 96       	adiw	r26, 0x02	; 2
    935a:	ed 91       	ld	r30, X+
    935c:	fc 91       	ld	r31, X
    935e:	13 97       	sbiw	r26, 0x03	; 3
    9360:	cf 01       	movw	r24, r30
    9362:	83 70       	andi	r24, 0x03	; 3
    9364:	99 27       	eor	r25, r25
    9366:	89 2b       	or	r24, r25
    9368:	b1 f4       	brne	.+44     	; 0x9396 <mp_obj_new_type+0x228>
    936a:	01 90       	ld	r0, Z+
    936c:	f0 81       	ld	r31, Z
    936e:	e0 2d       	mov	r30, r0
    9370:	84 81       	ldd	r24, Z+4	; 0x04
    9372:	95 81       	ldd	r25, Z+5	; 0x05
    9374:	87 3c       	cpi	r24, 0xC7	; 199
    9376:	91 05       	cpc	r25, r1
    9378:	71 f4       	brne	.+28     	; 0x9396 <mp_obj_new_type+0x228>
    937a:	98 01       	movw	r18, r16
    937c:	2e 5f       	subi	r18, 0xFE	; 254
    937e:	3f 4f       	sbci	r19, 0xFF	; 255
    9380:	40 e0       	ldi	r20, 0x00	; 0
    9382:	50 e0       	ldi	r21, 0x00	; 0
    9384:	61 e0       	ldi	r22, 0x01	; 1
    9386:	70 e0       	ldi	r23, 0x00	; 0
    9388:	8b e0       	ldi	r24, 0x0B	; 11
    938a:	9a e1       	ldi	r25, 0x1A	; 26
    938c:	0e 94 94 3b 	call	0x7728	; 0x7728 <static_class_method_make_new>
    9390:	f8 01       	movw	r30, r16
    9392:	93 83       	std	Z+3, r25	; 0x03
    9394:	82 83       	std	Z+2, r24	; 0x02
    9396:	c6 01       	movw	r24, r12
    9398:	26 96       	adiw	r28, 0x06	; 6
    939a:	0f b6       	in	r0, 0x3f	; 63
    939c:	f8 94       	cli
    939e:	de bf       	out	0x3e, r29	; 62
    93a0:	0f be       	out	0x3f, r0	; 63
    93a2:	cd bf       	out	0x3d, r28	; 61
    93a4:	df 91       	pop	r29
    93a6:	cf 91       	pop	r28
    93a8:	1f 91       	pop	r17
    93aa:	0f 91       	pop	r16
    93ac:	ff 90       	pop	r15
    93ae:	ef 90       	pop	r14
    93b0:	df 90       	pop	r13
    93b2:	cf 90       	pop	r12
    93b4:	08 95       	ret

000093b6 <mp_map_init>:
    93b6:	cf 93       	push	r28
    93b8:	df 93       	push	r29
    93ba:	ec 01       	movw	r28, r24
    93bc:	61 15       	cp	r22, r1
    93be:	71 05       	cpc	r23, r1
    93c0:	29 f4       	brne	.+10     	; 0x93cc <mp_map_init+0x16>
    93c2:	1b 82       	std	Y+3, r1	; 0x03
    93c4:	1a 82       	std	Y+2, r1	; 0x02
    93c6:	1d 82       	std	Y+5, r1	; 0x05
    93c8:	1c 82       	std	Y+4, r1	; 0x04
    93ca:	0b c0       	rjmp	.+22     	; 0x93e2 <mp_map_init+0x2c>
    93cc:	7b 83       	std	Y+3, r23	; 0x03
    93ce:	6a 83       	std	Y+2, r22	; 0x02
    93d0:	cb 01       	movw	r24, r22
    93d2:	88 0f       	add	r24, r24
    93d4:	99 1f       	adc	r25, r25
    93d6:	88 0f       	add	r24, r24
    93d8:	99 1f       	adc	r25, r25
    93da:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    93de:	9d 83       	std	Y+5, r25	; 0x05
    93e0:	8c 83       	std	Y+4, r24	; 0x04
    93e2:	88 81       	ld	r24, Y
    93e4:	19 82       	std	Y+1, r1	; 0x01
    93e6:	84 70       	andi	r24, 0x04	; 4
    93e8:	81 60       	ori	r24, 0x01	; 1
    93ea:	8b 7f       	andi	r24, 0xFB	; 251
    93ec:	88 83       	st	Y, r24
    93ee:	df 91       	pop	r29
    93f0:	cf 91       	pop	r28
    93f2:	08 95       	ret

000093f4 <mp_obj_dict_init>:
    93f4:	28 e7       	ldi	r18, 0x78	; 120
    93f6:	32 e2       	ldi	r19, 0x22	; 34
    93f8:	fc 01       	movw	r30, r24
    93fa:	21 93       	st	Z+, r18
    93fc:	31 93       	st	Z+, r19
    93fe:	cf 01       	movw	r24, r30
    9400:	da cf       	rjmp	.-76     	; 0x93b6 <mp_map_init>
    9402:	08 95       	ret

00009404 <mp_init>:
    9404:	cf 93       	push	r28
    9406:	df 93       	push	r29
    9408:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <qstr_init>
    940c:	ca e5       	ldi	r28, 0x5A	; 90
    940e:	db e6       	ldi	r29, 0x6B	; 107
    9410:	1b 86       	std	Y+11, r1	; 0x0b
    9412:	1a 86       	std	Y+10, r1	; 0x0a
    9414:	10 92 a9 6b 	sts	0x6BA9, r1	; 0x806ba9 <mp_state_ctx+0x4f>
    9418:	10 92 a8 6b 	sts	0x6BA8, r1	; 0x806ba8 <mp_state_ctx+0x4e>
    941c:	63 e0       	ldi	r22, 0x03	; 3
    941e:	70 e0       	ldi	r23, 0x00	; 0
    9420:	82 e7       	ldi	r24, 0x72	; 114
    9422:	9b e6       	ldi	r25, 0x6B	; 107
    9424:	e7 df       	rcall	.-50     	; 0x93f4 <mp_obj_dict_init>
    9426:	61 e0       	ldi	r22, 0x01	; 1
    9428:	70 e0       	ldi	r23, 0x00	; 0
    942a:	8a e7       	ldi	r24, 0x7A	; 122
    942c:	9b e6       	ldi	r25, 0x6B	; 107
    942e:	e2 df       	rcall	.-60     	; 0x93f4 <mp_obj_dict_init>
    9430:	4a ea       	ldi	r20, 0xAA	; 170
    9432:	50 e0       	ldi	r21, 0x00	; 0
    9434:	6a eb       	ldi	r22, 0xBA	; 186
    9436:	70 e0       	ldi	r23, 0x00	; 0
    9438:	8a e7       	ldi	r24, 0x7A	; 122
    943a:	9b e6       	ldi	r25, 0x6B	; 107
    943c:	59 d8       	rcall	.-3918   	; 0x84f0 <mp_obj_dict_store>
    943e:	8a e7       	ldi	r24, 0x7A	; 122
    9440:	9b e6       	ldi	r25, 0x6B	; 107
    9442:	9d 83       	std	Y+5, r25	; 0x05
    9444:	8c 83       	std	Y+4, r24	; 0x04
    9446:	9f 83       	std	Y+7, r25	; 0x07
    9448:	8e 83       	std	Y+6, r24	; 0x06
    944a:	df 91       	pop	r29
    944c:	cf 91       	pop	r28
    944e:	08 95       	ret

00009450 <mp_obj_new_dict>:
    9450:	0f 93       	push	r16
    9452:	1f 93       	push	r17
    9454:	cf 93       	push	r28
    9456:	df 93       	push	r29
    9458:	8c 01       	movw	r16, r24
    945a:	88 e0       	ldi	r24, 0x08	; 8
    945c:	90 e0       	ldi	r25, 0x00	; 0
    945e:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9462:	ec 01       	movw	r28, r24
    9464:	b8 01       	movw	r22, r16
    9466:	c6 df       	rcall	.-116    	; 0x93f4 <mp_obj_dict_init>
    9468:	ce 01       	movw	r24, r28
    946a:	df 91       	pop	r29
    946c:	cf 91       	pop	r28
    946e:	1f 91       	pop	r17
    9470:	0f 91       	pop	r16
    9472:	08 95       	ret

00009474 <mp_obj_dict_copy>:
    9474:	0f 93       	push	r16
    9476:	1f 93       	push	r17
    9478:	cf 93       	push	r28
    947a:	df 93       	push	r29
    947c:	ec 01       	movw	r28, r24
    947e:	83 70       	andi	r24, 0x03	; 3
    9480:	99 27       	eor	r25, r25
    9482:	89 2b       	or	r24, r25
    9484:	39 f4       	brne	.+14     	; 0x9494 <mp_obj_dict_copy+0x20>
    9486:	e8 81       	ld	r30, Y
    9488:	f9 81       	ldd	r31, Y+1	; 0x01
    948a:	80 85       	ldd	r24, Z+8	; 0x08
    948c:	91 85       	ldd	r25, Z+9	; 0x09
    948e:	8a 5a       	subi	r24, 0xAA	; 170
    9490:	99 48       	sbci	r25, 0x89	; 137
    9492:	11 f0       	breq	.+4      	; 0x9498 <mp_obj_dict_copy+0x24>
    9494:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    9498:	8c 81       	ldd	r24, Y+4	; 0x04
    949a:	9d 81       	ldd	r25, Y+5	; 0x05
    949c:	d9 df       	rcall	.-78     	; 0x9450 <mp_obj_new_dict>
    949e:	8c 01       	movw	r16, r24
    94a0:	88 81       	ld	r24, Y
    94a2:	99 81       	ldd	r25, Y+1	; 0x01
    94a4:	f8 01       	movw	r30, r16
    94a6:	91 83       	std	Z+1, r25	; 0x01
    94a8:	80 83       	st	Z, r24
    94aa:	2a 81       	ldd	r18, Y+2	; 0x02
    94ac:	82 2f       	mov	r24, r18
    94ae:	86 95       	lsr	r24
    94b0:	86 95       	lsr	r24
    94b2:	86 95       	lsr	r24
    94b4:	3b 81       	ldd	r19, Y+3	; 0x03
    94b6:	23 2f       	mov	r18, r19
    94b8:	22 95       	swap	r18
    94ba:	22 0f       	add	r18, r18
    94bc:	20 7e       	andi	r18, 0xE0	; 224
    94be:	28 2b       	or	r18, r24
    94c0:	92 2f       	mov	r25, r18
    94c2:	99 0f       	add	r25, r25
    94c4:	99 0f       	add	r25, r25
    94c6:	99 0f       	add	r25, r25
    94c8:	82 81       	ldd	r24, Z+2	; 0x02
    94ca:	87 70       	andi	r24, 0x07	; 7
    94cc:	89 2b       	or	r24, r25
    94ce:	82 83       	std	Z+2, r24	; 0x02
    94d0:	38 7f       	andi	r19, 0xF8	; 248
    94d2:	22 95       	swap	r18
    94d4:	26 95       	lsr	r18
    94d6:	27 70       	andi	r18, 0x07	; 7
    94d8:	23 2b       	or	r18, r19
    94da:	23 83       	std	Z+3, r18	; 0x03
    94dc:	9a 81       	ldd	r25, Y+2	; 0x02
    94de:	90 fb       	bst	r25, 0
    94e0:	80 f9       	bld	r24, 0
    94e2:	8d 7f       	andi	r24, 0xFD	; 253
    94e4:	82 83       	std	Z+2, r24	; 0x02
    94e6:	9a 81       	ldd	r25, Y+2	; 0x02
    94e8:	92 fb       	bst	r25, 2
    94ea:	99 27       	eor	r25, r25
    94ec:	90 f9       	bld	r25, 0
    94ee:	90 fb       	bst	r25, 0
    94f0:	82 f9       	bld	r24, 2
    94f2:	82 83       	std	Z+2, r24	; 0x02
    94f4:	4c 81       	ldd	r20, Y+4	; 0x04
    94f6:	5d 81       	ldd	r21, Y+5	; 0x05
    94f8:	44 0f       	add	r20, r20
    94fa:	55 1f       	adc	r21, r21
    94fc:	44 0f       	add	r20, r20
    94fe:	55 1f       	adc	r21, r21
    9500:	6e 81       	ldd	r22, Y+6	; 0x06
    9502:	7f 81       	ldd	r23, Y+7	; 0x07
    9504:	86 81       	ldd	r24, Z+6	; 0x06
    9506:	97 81       	ldd	r25, Z+7	; 0x07
    9508:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    950c:	c8 01       	movw	r24, r16
    950e:	df 91       	pop	r29
    9510:	cf 91       	pop	r28
    9512:	1f 91       	pop	r17
    9514:	0f 91       	pop	r16
    9516:	08 95       	ret

00009518 <mp_obj_new_module>:
    9518:	ef 92       	push	r14
    951a:	ff 92       	push	r15
    951c:	0f 93       	push	r16
    951e:	1f 93       	push	r17
    9520:	cf 93       	push	r28
    9522:	df 93       	push	r29
    9524:	88 0f       	add	r24, r24
    9526:	99 1f       	adc	r25, r25
    9528:	88 0f       	add	r24, r24
    952a:	99 1f       	adc	r25, r25
    952c:	88 0f       	add	r24, r24
    952e:	99 1f       	adc	r25, r25
    9530:	ec 01       	movw	r28, r24
    9532:	c2 60       	ori	r28, 0x02	; 2
    9534:	41 e0       	ldi	r20, 0x01	; 1
    9536:	be 01       	movw	r22, r28
    9538:	84 e7       	ldi	r24, 0x74	; 116
    953a:	9b e6       	ldi	r25, 0x6B	; 107
    953c:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
    9540:	7c 01       	movw	r14, r24
    9542:	fc 01       	movw	r30, r24
    9544:	82 81       	ldd	r24, Z+2	; 0x02
    9546:	93 81       	ldd	r25, Z+3	; 0x03
    9548:	00 97       	sbiw	r24, 0x00	; 0
    954a:	c9 f4       	brne	.+50     	; 0x957e <mp_obj_new_module+0x66>
    954c:	84 e0       	ldi	r24, 0x04	; 4
    954e:	90 e0       	ldi	r25, 0x00	; 0
    9550:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9554:	8c 01       	movw	r16, r24
    9556:	8c ee       	ldi	r24, 0xEC	; 236
    9558:	9c e1       	ldi	r25, 0x1C	; 28
    955a:	f8 01       	movw	r30, r16
    955c:	91 83       	std	Z+1, r25	; 0x01
    955e:	80 83       	st	Z, r24
    9560:	81 e0       	ldi	r24, 0x01	; 1
    9562:	90 e0       	ldi	r25, 0x00	; 0
    9564:	75 df       	rcall	.-278    	; 0x9450 <mp_obj_new_dict>
    9566:	f8 01       	movw	r30, r16
    9568:	93 83       	std	Z+3, r25	; 0x03
    956a:	82 83       	std	Z+2, r24	; 0x02
    956c:	ae 01       	movw	r20, r28
    956e:	6a eb       	ldi	r22, 0xBA	; 186
    9570:	70 e0       	ldi	r23, 0x00	; 0
    9572:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
    9576:	f7 01       	movw	r30, r14
    9578:	13 83       	std	Z+3, r17	; 0x03
    957a:	02 83       	std	Z+2, r16	; 0x02
    957c:	c8 01       	movw	r24, r16
    957e:	df 91       	pop	r29
    9580:	cf 91       	pop	r28
    9582:	1f 91       	pop	r17
    9584:	0f 91       	pop	r16
    9586:	ff 90       	pop	r15
    9588:	ef 90       	pop	r14
    958a:	08 95       	ret

0000958c <mp_builtin___build_class__>:
    958c:	6f 92       	push	r6
    958e:	7f 92       	push	r7
    9590:	8f 92       	push	r8
    9592:	9f 92       	push	r9
    9594:	af 92       	push	r10
    9596:	bf 92       	push	r11
    9598:	cf 92       	push	r12
    959a:	df 92       	push	r13
    959c:	ef 92       	push	r14
    959e:	ff 92       	push	r15
    95a0:	0f 93       	push	r16
    95a2:	1f 93       	push	r17
    95a4:	cf 93       	push	r28
    95a6:	df 93       	push	r29
    95a8:	00 d0       	rcall	.+0      	; 0x95aa <mp_builtin___build_class__+0x1e>
    95aa:	00 d0       	rcall	.+0      	; 0x95ac <mp_builtin___build_class__+0x20>
    95ac:	00 d0       	rcall	.+0      	; 0x95ae <mp_builtin___build_class__+0x22>
    95ae:	cd b7       	in	r28, 0x3d	; 61
    95b0:	de b7       	in	r29, 0x3e	; 62
    95b2:	7c 01       	movw	r14, r24
    95b4:	8b 01       	movw	r16, r22
    95b6:	02 97       	sbiw	r24, 0x02	; 2
    95b8:	10 f4       	brcc	.+4      	; 0x95be <mp_builtin___build_class__+0x32>
    95ba:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    95be:	0f 2e       	mov	r0, r31
    95c0:	fa e5       	ldi	r31, 0x5A	; 90
    95c2:	cf 2e       	mov	r12, r31
    95c4:	fb e6       	ldi	r31, 0x6B	; 107
    95c6:	df 2e       	mov	r13, r31
    95c8:	f0 2d       	mov	r31, r0
    95ca:	f6 01       	movw	r30, r12
    95cc:	64 80       	ldd	r6, Z+4	; 0x04
    95ce:	75 80       	ldd	r7, Z+5	; 0x05
    95d0:	80 e0       	ldi	r24, 0x00	; 0
    95d2:	90 e0       	ldi	r25, 0x00	; 0
    95d4:	3d df       	rcall	.-390    	; 0x9450 <mp_obj_new_dict>
    95d6:	5c 01       	movw	r10, r24
    95d8:	f6 01       	movw	r30, r12
    95da:	95 83       	std	Z+5, r25	; 0x05
    95dc:	84 83       	std	Z+4, r24	; 0x04
    95de:	f8 01       	movw	r30, r16
    95e0:	80 81       	ld	r24, Z
    95e2:	91 81       	ldd	r25, Z+1	; 0x01
    95e4:	0e 94 21 25 	call	0x4a42	; 0x4a42 <mp_call_function_0>
    95e8:	4c 01       	movw	r8, r24
    95ea:	f6 01       	movw	r30, r12
    95ec:	75 82       	std	Z+5, r7	; 0x05
    95ee:	64 82       	std	Z+4, r6	; 0x04
    95f0:	f2 e0       	ldi	r31, 0x02	; 2
    95f2:	ef 16       	cp	r14, r31
    95f4:	f1 04       	cpc	r15, r1
    95f6:	39 f0       	breq	.+14     	; 0x9606 <mp_builtin___build_class__+0x7a>
    95f8:	f8 01       	movw	r30, r16
    95fa:	84 81       	ldd	r24, Z+4	; 0x04
    95fc:	95 81       	ldd	r25, Z+5	; 0x05
    95fe:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    9602:	6c 01       	movw	r12, r24
    9604:	06 c0       	rjmp	.+12     	; 0x9612 <mp_builtin___build_class__+0x86>
    9606:	0f 2e       	mov	r0, r31
    9608:	f3 e5       	ldi	r31, 0x53	; 83
    960a:	cf 2e       	mov	r12, r31
    960c:	fa e1       	ldi	r31, 0x1A	; 26
    960e:	df 2e       	mov	r13, r31
    9610:	f0 2d       	mov	r31, r0
    9612:	f8 01       	movw	r30, r16
    9614:	82 81       	ldd	r24, Z+2	; 0x02
    9616:	93 81       	ldd	r25, Z+3	; 0x03
    9618:	9a 83       	std	Y+2, r25	; 0x02
    961a:	89 83       	std	Y+1, r24	; 0x01
    961c:	b8 01       	movw	r22, r16
    961e:	6c 5f       	subi	r22, 0xFC	; 252
    9620:	7f 4f       	sbci	r23, 0xFF	; 255
    9622:	c7 01       	movw	r24, r14
    9624:	02 97       	sbiw	r24, 0x02	; 2
    9626:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
    962a:	9c 83       	std	Y+4, r25	; 0x04
    962c:	8b 83       	std	Y+3, r24	; 0x03
    962e:	be 82       	std	Y+6, r11	; 0x06
    9630:	ad 82       	std	Y+5, r10	; 0x05
    9632:	9e 01       	movw	r18, r28
    9634:	2f 5f       	subi	r18, 0xFF	; 255
    9636:	3f 4f       	sbci	r19, 0xFF	; 255
    9638:	40 e0       	ldi	r20, 0x00	; 0
    963a:	50 e0       	ldi	r21, 0x00	; 0
    963c:	63 e0       	ldi	r22, 0x03	; 3
    963e:	70 e0       	ldi	r23, 0x00	; 0
    9640:	c6 01       	movw	r24, r12
    9642:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
    9646:	f6 e0       	ldi	r31, 0x06	; 6
    9648:	8f 16       	cp	r8, r31
    964a:	91 04       	cpc	r9, r1
    964c:	19 f0       	breq	.+6      	; 0x9654 <mp_builtin___build_class__+0xc8>
    964e:	f4 01       	movw	r30, r8
    9650:	93 83       	std	Z+3, r25	; 0x03
    9652:	82 83       	std	Z+2, r24	; 0x02
    9654:	26 96       	adiw	r28, 0x06	; 6
    9656:	0f b6       	in	r0, 0x3f	; 63
    9658:	f8 94       	cli
    965a:	de bf       	out	0x3e, r29	; 62
    965c:	0f be       	out	0x3f, r0	; 63
    965e:	cd bf       	out	0x3d, r28	; 61
    9660:	df 91       	pop	r29
    9662:	cf 91       	pop	r28
    9664:	1f 91       	pop	r17
    9666:	0f 91       	pop	r16
    9668:	ff 90       	pop	r15
    966a:	ef 90       	pop	r14
    966c:	df 90       	pop	r13
    966e:	cf 90       	pop	r12
    9670:	bf 90       	pop	r11
    9672:	af 90       	pop	r10
    9674:	9f 90       	pop	r9
    9676:	8f 90       	pop	r8
    9678:	7f 90       	pop	r7
    967a:	6f 90       	pop	r6
    967c:	08 95       	ret

0000967e <mp_obj_instance_make_new>:
    967e:	6f 92       	push	r6
    9680:	7f 92       	push	r7
    9682:	8f 92       	push	r8
    9684:	9f 92       	push	r9
    9686:	af 92       	push	r10
    9688:	bf 92       	push	r11
    968a:	cf 92       	push	r12
    968c:	df 92       	push	r13
    968e:	ef 92       	push	r14
    9690:	ff 92       	push	r15
    9692:	0f 93       	push	r16
    9694:	1f 93       	push	r17
    9696:	cf 93       	push	r28
    9698:	df 93       	push	r29
    969a:	cd b7       	in	r28, 0x3d	; 61
    969c:	de b7       	in	r29, 0x3e	; 62
    969e:	61 97       	sbiw	r28, 0x11	; 17
    96a0:	0f b6       	in	r0, 0x3f	; 63
    96a2:	f8 94       	cli
    96a4:	de bf       	out	0x3e, r29	; 62
    96a6:	0f be       	out	0x3f, r0	; 63
    96a8:	cd bf       	out	0x3d, r28	; 61
    96aa:	4c 01       	movw	r8, r24
    96ac:	8b 01       	movw	r16, r22
    96ae:	6a 01       	movw	r12, r20
    96b0:	59 01       	movw	r10, r18
    96b2:	dc 01       	movw	r26, r24
    96b4:	18 96       	adiw	r26, 0x08	; 8
    96b6:	8d 91       	ld	r24, X+
    96b8:	9c 91       	ld	r25, X
    96ba:	19 97       	sbiw	r26, 0x09	; 9
    96bc:	8f 53       	subi	r24, 0x3F	; 63
    96be:	9b 44       	sbci	r25, 0x4B	; 75
    96c0:	11 f0       	breq	.+4      	; 0x96c6 <mp_obj_instance_make_new+0x48>
    96c2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    96c6:	19 82       	std	Y+1, r1	; 0x01
    96c8:	1a 82       	std	Y+2, r1	; 0x02
    96ca:	1b 82       	std	Y+3, r1	; 0x03
    96cc:	1c 82       	std	Y+4, r1	; 0x04
    96ce:	1e 82       	std	Y+6, r1	; 0x06
    96d0:	1d 82       	std	Y+5, r1	; 0x05
    96d2:	88 e1       	ldi	r24, 0x18	; 24
    96d4:	90 e0       	ldi	r25, 0x00	; 0
    96d6:	98 87       	std	Y+8, r25	; 0x08
    96d8:	8f 83       	std	Y+7, r24	; 0x07
    96da:	88 e0       	ldi	r24, 0x08	; 8
    96dc:	90 e0       	ldi	r25, 0x00	; 0
    96de:	9a 87       	std	Y+10, r25	; 0x0a
    96e0:	89 87       	std	Y+9, r24	; 0x09
    96e2:	ce 01       	movw	r24, r28
    96e4:	01 96       	adiw	r24, 0x01	; 1
    96e6:	9c 87       	std	Y+12, r25	; 0x0c
    96e8:	8b 87       	std	Y+11, r24	; 0x0b
    96ea:	1d 86       	std	Y+13, r1	; 0x0d
    96ec:	b4 01       	movw	r22, r8
    96ee:	04 96       	adiw	r24, 0x04	; 4
    96f0:	0e 94 09 43 	call	0x8612	; 0x8612 <mp_obj_class_lookup>
    96f4:	1f 86       	std	Y+15, r1	; 0x0f
    96f6:	1e 86       	std	Y+14, r1	; 0x0e
    96f8:	89 81       	ldd	r24, Y+1	; 0x01
    96fa:	9a 81       	ldd	r25, Y+2	; 0x02
    96fc:	00 97       	sbiw	r24, 0x00	; 0
    96fe:	19 f0       	breq	.+6      	; 0x9706 <mp_obj_instance_make_new+0x88>
    9700:	84 30       	cpi	r24, 0x04	; 4
    9702:	91 05       	cpc	r25, r1
    9704:	11 f5       	brne	.+68     	; 0x974a <mp_obj_instance_make_new+0xcc>
    9706:	be 01       	movw	r22, r28
    9708:	62 5f       	subi	r22, 0xF2	; 242
    970a:	7f 4f       	sbci	r23, 0xFF	; 255
    970c:	c4 01       	movw	r24, r8
    970e:	0e 94 c1 03 	call	0x782	; 0x782 <instance_count_native_bases>
    9712:	3c 01       	movw	r6, r24
    9714:	82 30       	cpi	r24, 0x02	; 2
    9716:	91 05       	cpc	r25, r1
    9718:	10 f0       	brcs	.+4      	; 0x971e <mp_obj_instance_make_new+0xa0>
    971a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    971e:	04 96       	adiw	r24, 0x04	; 4
    9720:	88 0f       	add	r24, r24
    9722:	99 1f       	adc	r25, r25
    9724:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9728:	7c 01       	movw	r14, r24
    972a:	dc 01       	movw	r26, r24
    972c:	8d 92       	st	X+, r8
    972e:	9d 92       	st	X+, r9
    9730:	cd 01       	movw	r24, r26
    9732:	60 e0       	ldi	r22, 0x00	; 0
    9734:	70 e0       	ldi	r23, 0x00	; 0
    9736:	3f de       	rcall	.-898    	; 0x93b6 <mp_map_init>
    9738:	67 28       	or	r6, r7
    973a:	09 f4       	brne	.+2      	; 0x973e <mp_obj_instance_make_new+0xc0>
    973c:	48 c0       	rjmp	.+144    	; 0x97ce <mp_obj_instance_make_new+0x150>
    973e:	82 ea       	ldi	r24, 0xA2	; 162
    9740:	9a e1       	ldi	r25, 0x1A	; 26
    9742:	f7 01       	movw	r30, r14
    9744:	91 87       	std	Z+9, r25	; 0x09
    9746:	80 87       	std	Z+8, r24	; 0x08
    9748:	42 c0       	rjmp	.+132    	; 0x97ce <mp_obj_instance_make_new+0x150>
    974a:	01 15       	cp	r16, r1
    974c:	11 05       	cpc	r17, r1
    974e:	81 f4       	brne	.+32     	; 0x9770 <mp_obj_instance_make_new+0xf2>
    9750:	c1 14       	cp	r12, r1
    9752:	d1 04       	cpc	r13, r1
    9754:	69 f4       	brne	.+26     	; 0x9770 <mp_obj_instance_make_new+0xf2>
    9756:	99 8a       	std	Y+17, r9	; 0x11
    9758:	88 8a       	std	Y+16, r8	; 0x10
    975a:	9e 01       	movw	r18, r28
    975c:	20 5f       	subi	r18, 0xF0	; 240
    975e:	3f 4f       	sbci	r19, 0xFF	; 255
    9760:	40 e0       	ldi	r20, 0x00	; 0
    9762:	50 e0       	ldi	r21, 0x00	; 0
    9764:	61 e0       	ldi	r22, 0x01	; 1
    9766:	70 e0       	ldi	r23, 0x00	; 0
    9768:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
    976c:	7c 01       	movw	r14, r24
    976e:	28 c0       	rjmp	.+80     	; 0x97c0 <mp_obj_instance_make_new+0x142>
    9770:	76 01       	movw	r14, r12
    9772:	ee 0c       	add	r14, r14
    9774:	ff 1c       	adc	r15, r15
    9776:	e0 0e       	add	r14, r16
    9778:	f1 1e       	adc	r15, r17
    977a:	ff ef       	ldi	r31, 0xFF	; 255
    977c:	ef 1a       	sub	r14, r31
    977e:	ff 0a       	sbc	r15, r31
    9780:	ee 0c       	add	r14, r14
    9782:	ff 1c       	adc	r15, r15
    9784:	c7 01       	movw	r24, r14
    9786:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    978a:	68 2e       	mov	r6, r24
    978c:	79 2e       	mov	r7, r25
    978e:	dc 01       	movw	r26, r24
    9790:	8d 92       	st	X+, r8
    9792:	9d 92       	st	X+, r9
    9794:	cd 01       	movw	r24, r26
    9796:	a7 01       	movw	r20, r14
    9798:	42 50       	subi	r20, 0x02	; 2
    979a:	51 09       	sbc	r21, r1
    979c:	b5 01       	movw	r22, r10
    979e:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    97a2:	26 2d       	mov	r18, r6
    97a4:	37 2d       	mov	r19, r7
    97a6:	a6 01       	movw	r20, r12
    97a8:	b8 01       	movw	r22, r16
    97aa:	6f 5f       	subi	r22, 0xFF	; 255
    97ac:	7f 4f       	sbci	r23, 0xFF	; 255
    97ae:	89 81       	ldd	r24, Y+1	; 0x01
    97b0:	9a 81       	ldd	r25, Y+2	; 0x02
    97b2:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
    97b6:	7c 01       	movw	r14, r24
    97b8:	86 2d       	mov	r24, r6
    97ba:	97 2d       	mov	r25, r7
    97bc:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    97c0:	c7 01       	movw	r24, r14
    97c2:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    97c6:	88 16       	cp	r8, r24
    97c8:	99 06       	cpc	r9, r25
    97ca:	09 f0       	breq	.+2      	; 0x97ce <mp_obj_instance_make_new+0x150>
    97cc:	6f c0       	rjmp	.+222    	; 0x98ac <mp_obj_instance_make_new+0x22e>
    97ce:	1c 82       	std	Y+4, r1	; 0x04
    97d0:	1b 82       	std	Y+3, r1	; 0x03
    97d2:	1a 82       	std	Y+2, r1	; 0x02
    97d4:	19 82       	std	Y+1, r1	; 0x01
    97d6:	fe 82       	std	Y+6, r15	; 0x06
    97d8:	ed 82       	std	Y+5, r14	; 0x05
    97da:	81 e1       	ldi	r24, 0x11	; 17
    97dc:	90 e0       	ldi	r25, 0x00	; 0
    97de:	98 87       	std	Y+8, r25	; 0x08
    97e0:	8f 83       	std	Y+7, r24	; 0x07
    97e2:	1a 86       	std	Y+10, r1	; 0x0a
    97e4:	19 86       	std	Y+9, r1	; 0x09
    97e6:	b4 01       	movw	r22, r8
    97e8:	ce 01       	movw	r24, r28
    97ea:	05 96       	adiw	r24, 0x05	; 5
    97ec:	0e 94 09 43 	call	0x8612	; 0x8612 <mp_obj_class_lookup>
    97f0:	89 81       	ldd	r24, Y+1	; 0x01
    97f2:	9a 81       	ldd	r25, Y+2	; 0x02
    97f4:	89 2b       	or	r24, r25
    97f6:	09 f4       	brne	.+2      	; 0x97fa <mp_obj_instance_make_new+0x17c>
    97f8:	41 c0       	rjmp	.+130    	; 0x987c <mp_obj_instance_make_new+0x1fe>
    97fa:	01 15       	cp	r16, r1
    97fc:	11 05       	cpc	r17, r1
    97fe:	71 f4       	brne	.+28     	; 0x981c <mp_obj_instance_make_new+0x19e>
    9800:	c1 14       	cp	r12, r1
    9802:	d1 04       	cpc	r13, r1
    9804:	59 f4       	brne	.+22     	; 0x981c <mp_obj_instance_make_new+0x19e>
    9806:	ae 01       	movw	r20, r28
    9808:	4f 5f       	subi	r20, 0xFF	; 255
    980a:	5f 4f       	sbci	r21, 0xFF	; 255
    980c:	60 e0       	ldi	r22, 0x00	; 0
    980e:	70 e0       	ldi	r23, 0x00	; 0
    9810:	80 e0       	ldi	r24, 0x00	; 0
    9812:	90 e0       	ldi	r25, 0x00	; 0
    9814:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    9818:	4c 01       	movw	r8, r24
    981a:	28 c0       	rjmp	.+80     	; 0x986c <mp_obj_instance_make_new+0x1ee>
    981c:	46 01       	movw	r8, r12
    981e:	88 0c       	add	r8, r8
    9820:	99 1c       	adc	r9, r9
    9822:	80 0e       	add	r8, r16
    9824:	91 1e       	adc	r9, r17
    9826:	b2 e0       	ldi	r27, 0x02	; 2
    9828:	8b 0e       	add	r8, r27
    982a:	91 1c       	adc	r9, r1
    982c:	88 0c       	add	r8, r8
    982e:	99 1c       	adc	r9, r9
    9830:	c4 01       	movw	r24, r8
    9832:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9836:	3c 01       	movw	r6, r24
    9838:	89 81       	ldd	r24, Y+1	; 0x01
    983a:	9a 81       	ldd	r25, Y+2	; 0x02
    983c:	f3 01       	movw	r30, r6
    983e:	91 83       	std	Z+1, r25	; 0x01
    9840:	80 83       	st	Z, r24
    9842:	8b 81       	ldd	r24, Y+3	; 0x03
    9844:	9c 81       	ldd	r25, Y+4	; 0x04
    9846:	93 83       	std	Z+3, r25	; 0x03
    9848:	82 83       	std	Z+2, r24	; 0x02
    984a:	a4 01       	movw	r20, r8
    984c:	44 50       	subi	r20, 0x04	; 4
    984e:	51 09       	sbc	r21, r1
    9850:	b5 01       	movw	r22, r10
    9852:	c3 01       	movw	r24, r6
    9854:	04 96       	adiw	r24, 0x04	; 4
    9856:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    985a:	a3 01       	movw	r20, r6
    985c:	b6 01       	movw	r22, r12
    985e:	c8 01       	movw	r24, r16
    9860:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
    9864:	4c 01       	movw	r8, r24
    9866:	c3 01       	movw	r24, r6
    9868:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
    986c:	f6 e0       	ldi	r31, 0x06	; 6
    986e:	8f 16       	cp	r8, r31
    9870:	91 04       	cpc	r9, r1
    9872:	21 f0       	breq	.+8      	; 0x987c <mp_obj_instance_make_new+0x1fe>
    9874:	8f e8       	ldi	r24, 0x8F	; 143
    9876:	97 e0       	ldi	r25, 0x07	; 7
    9878:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    987c:	8e 85       	ldd	r24, Y+14	; 0x0e
    987e:	9f 85       	ldd	r25, Y+15	; 0x0f
    9880:	00 97       	sbiw	r24, 0x00	; 0
    9882:	a1 f0       	breq	.+40     	; 0x98ac <mp_obj_instance_make_new+0x22e>
    9884:	d7 01       	movw	r26, r14
    9886:	18 96       	adiw	r26, 0x08	; 8
    9888:	2d 91       	ld	r18, X+
    988a:	3c 91       	ld	r19, X
    988c:	19 97       	sbiw	r26, 0x09	; 9
    988e:	22 5a       	subi	r18, 0xA2	; 162
    9890:	3a 41       	sbci	r19, 0x1A	; 26
    9892:	61 f4       	brne	.+24     	; 0x98ac <mp_obj_instance_make_new+0x22e>
    9894:	dc 01       	movw	r26, r24
    9896:	18 96       	adiw	r26, 0x08	; 8
    9898:	ed 91       	ld	r30, X+
    989a:	fc 91       	ld	r31, X
    989c:	19 97       	sbiw	r26, 0x09	; 9
    989e:	95 01       	movw	r18, r10
    98a0:	a6 01       	movw	r20, r12
    98a2:	b8 01       	movw	r22, r16
    98a4:	09 95       	icall
    98a6:	f7 01       	movw	r30, r14
    98a8:	91 87       	std	Z+9, r25	; 0x09
    98aa:	80 87       	std	Z+8, r24	; 0x08
    98ac:	c7 01       	movw	r24, r14
    98ae:	61 96       	adiw	r28, 0x11	; 17
    98b0:	0f b6       	in	r0, 0x3f	; 63
    98b2:	f8 94       	cli
    98b4:	de bf       	out	0x3e, r29	; 62
    98b6:	0f be       	out	0x3f, r0	; 63
    98b8:	cd bf       	out	0x3d, r28	; 61
    98ba:	df 91       	pop	r29
    98bc:	cf 91       	pop	r28
    98be:	1f 91       	pop	r17
    98c0:	0f 91       	pop	r16
    98c2:	ff 90       	pop	r15
    98c4:	ef 90       	pop	r14
    98c6:	df 90       	pop	r13
    98c8:	cf 90       	pop	r12
    98ca:	bf 90       	pop	r11
    98cc:	af 90       	pop	r10
    98ce:	9f 90       	pop	r9
    98d0:	8f 90       	pop	r8
    98d2:	7f 90       	pop	r7
    98d4:	6f 90       	pop	r6
    98d6:	08 95       	ret

000098d8 <mp_emit_glue_new_raw_code>:
    98d8:	87 e0       	ldi	r24, 0x07	; 7
    98da:	90 e0       	ldi	r25, 0x00	; 0
    98dc:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    98e0:	fc 01       	movw	r30, r24
    98e2:	90 81       	ld	r25, Z
    98e4:	98 7f       	andi	r25, 0xF8	; 248
    98e6:	91 60       	ori	r25, 0x01	; 1
    98e8:	90 83       	st	Z, r25
    98ea:	cf 01       	movw	r24, r30
    98ec:	08 95       	ret

000098ee <scope_new>:
    98ee:	af 92       	push	r10
    98f0:	bf 92       	push	r11
    98f2:	cf 92       	push	r12
    98f4:	df 92       	push	r13
    98f6:	ef 92       	push	r14
    98f8:	ff 92       	push	r15
    98fa:	1f 93       	push	r17
    98fc:	cf 93       	push	r28
    98fe:	df 93       	push	r29
    9900:	18 2f       	mov	r17, r24
    9902:	7b 01       	movw	r14, r22
    9904:	5a 01       	movw	r10, r20
    9906:	69 01       	movw	r12, r18
    9908:	83 e2       	ldi	r24, 0x23	; 35
    990a:	90 e0       	ldi	r25, 0x00	; 0
    990c:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9910:	ec 01       	movw	r28, r24
    9912:	18 83       	st	Y, r17
    9914:	fe 82       	std	Y+6, r15	; 0x06
    9916:	ed 82       	std	Y+5, r14	; 0x05
    9918:	ba 86       	std	Y+10, r11	; 0x0a
    991a:	a9 86       	std	Y+9, r10	; 0x09
    991c:	17 30       	cpi	r17, 0x07	; 7
    991e:	11 f0       	breq	.+4      	; 0x9924 <scope_new+0x36>
    9920:	11 30       	cpi	r17, 0x01	; 1
    9922:	b1 f4       	brne	.+44     	; 0x9950 <scope_new+0x62>
    9924:	e1 14       	cp	r14, r1
    9926:	f1 04       	cpc	r15, r1
    9928:	29 f0       	breq	.+10     	; 0x9934 <scope_new+0x46>
    992a:	c7 01       	movw	r24, r14
    992c:	83 70       	andi	r24, 0x03	; 3
    992e:	99 27       	eor	r25, r25
    9930:	89 2b       	or	r24, r25
    9932:	11 f0       	breq	.+4      	; 0x9938 <scope_new+0x4a>
    9934:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    9938:	f7 01       	movw	r30, r14
    993a:	80 85       	ldd	r24, Z+8	; 0x08
    993c:	91 85       	ldd	r25, Z+9	; 0x09
    993e:	92 95       	swap	r25
    9940:	82 95       	swap	r24
    9942:	8f 70       	andi	r24, 0x0F	; 15
    9944:	89 27       	eor	r24, r25
    9946:	9f 70       	andi	r25, 0x0F	; 15
    9948:	89 27       	eor	r24, r25
    994a:	9c 87       	std	Y+12, r25	; 0x0c
    994c:	8b 87       	std	Y+11, r24	; 0x0b
    994e:	08 c0       	rjmp	.+16     	; 0x9960 <scope_new+0x72>
    9950:	e1 2f       	mov	r30, r17
    9952:	f0 e0       	ldi	r31, 0x00	; 0
    9954:	ea 56       	subi	r30, 0x6A	; 106
    9956:	fb 4d       	sbci	r31, 0xDB	; 219
    9958:	80 81       	ld	r24, Z
    995a:	90 e0       	ldi	r25, 0x00	; 0
    995c:	9c 87       	std	Y+12, r25	; 0x0c
    995e:	8b 87       	std	Y+11, r24	; 0x0b
    9960:	bb df       	rcall	.-138    	; 0x98d8 <mp_emit_glue_new_raw_code>
    9962:	98 87       	std	Y+8, r25	; 0x08
    9964:	8f 83       	std	Y+7, r24	; 0x07
    9966:	d8 8a       	std	Y+16, r13	; 0x10
    9968:	cf 86       	std	Y+15, r12	; 0x0f
    996a:	84 e0       	ldi	r24, 0x04	; 4
    996c:	90 e0       	ldi	r25, 0x00	; 0
    996e:	9e 8f       	std	Y+30, r25	; 0x1e
    9970:	8d 8f       	std	Y+29, r24	; 0x1d
    9972:	88 e1       	ldi	r24, 0x18	; 24
    9974:	90 e0       	ldi	r25, 0x00	; 0
    9976:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    997a:	9a a3       	std	Y+34, r25	; 0x22
    997c:	89 a3       	std	Y+33, r24	; 0x21
    997e:	ce 01       	movw	r24, r28
    9980:	df 91       	pop	r29
    9982:	cf 91       	pop	r28
    9984:	1f 91       	pop	r17
    9986:	ff 90       	pop	r15
    9988:	ef 90       	pop	r14
    998a:	df 90       	pop	r13
    998c:	cf 90       	pop	r12
    998e:	bf 90       	pop	r11
    9990:	af 90       	pop	r10
    9992:	08 95       	ret

00009994 <scope_new_and_link>:
    9994:	cf 93       	push	r28
    9996:	df 93       	push	r29
    9998:	ec 01       	movw	r28, r24
    999a:	86 2f       	mov	r24, r22
    999c:	ba 01       	movw	r22, r20
    999e:	48 81       	ld	r20, Y
    99a0:	59 81       	ldd	r21, Y+1	; 0x01
    99a2:	a5 df       	rcall	.-182    	; 0x98ee <scope_new>
    99a4:	29 8d       	ldd	r18, Y+25	; 0x19
    99a6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    99a8:	fc 01       	movw	r30, r24
    99aa:	32 83       	std	Z+2, r19	; 0x02
    99ac:	21 83       	std	Z+1, r18	; 0x01
    99ae:	14 82       	std	Z+4, r1	; 0x04
    99b0:	13 82       	std	Z+3, r1	; 0x03
    99b2:	ef 89       	ldd	r30, Y+23	; 0x17
    99b4:	f8 8d       	ldd	r31, Y+24	; 0x18
    99b6:	30 97       	sbiw	r30, 0x00	; 0
    99b8:	21 f4       	brne	.+8      	; 0x99c2 <scope_new_and_link+0x2e>
    99ba:	98 8f       	std	Y+24, r25	; 0x18
    99bc:	8f 8b       	std	Y+23, r24	; 0x17
    99be:	08 c0       	rjmp	.+16     	; 0x99d0 <scope_new_and_link+0x3c>
    99c0:	f9 01       	movw	r30, r18
    99c2:	23 81       	ldd	r18, Z+3	; 0x03
    99c4:	34 81       	ldd	r19, Z+4	; 0x04
    99c6:	21 15       	cp	r18, r1
    99c8:	31 05       	cpc	r19, r1
    99ca:	d1 f7       	brne	.-12     	; 0x99c0 <scope_new_and_link+0x2c>
    99cc:	94 83       	std	Z+4, r25	; 0x04
    99ce:	83 83       	std	Z+3, r24	; 0x03
    99d0:	df 91       	pop	r29
    99d2:	cf 91       	pop	r28
    99d4:	08 95       	ret

000099d6 <compile_lambdef>:
    99d6:	0f 93       	push	r16
    99d8:	1f 93       	push	r17
    99da:	cf 93       	push	r28
    99dc:	df 93       	push	r29
    99de:	ec 01       	movw	r28, r24
    99e0:	8b 01       	movw	r16, r22
    99e2:	8b 81       	ldd	r24, Y+3	; 0x03
    99e4:	81 30       	cpi	r24, 0x01	; 1
    99e6:	59 f4       	brne	.+22     	; 0x99fe <compile_lambdef+0x28>
    99e8:	e9 8d       	ldd	r30, Y+25	; 0x19
    99ea:	fa 8d       	ldd	r31, Y+26	; 0x1a
    99ec:	27 85       	ldd	r18, Z+15	; 0x0f
    99ee:	30 89       	ldd	r19, Z+16	; 0x10
    99f0:	ab 01       	movw	r20, r22
    99f2:	62 e0       	ldi	r22, 0x02	; 2
    99f4:	ce 01       	movw	r24, r28
    99f6:	ce df       	rcall	.-100    	; 0x9994 <scope_new_and_link>
    99f8:	f8 01       	movw	r30, r16
    99fa:	95 87       	std	Z+13, r25	; 0x0d
    99fc:	84 87       	std	Z+12, r24	; 0x0c
    99fe:	f8 01       	movw	r30, r16
    9a00:	40 85       	ldd	r20, Z+8	; 0x08
    9a02:	51 85       	ldd	r21, Z+9	; 0x09
    9a04:	64 85       	ldd	r22, Z+12	; 0x0c
    9a06:	75 85       	ldd	r23, Z+13	; 0x0d
    9a08:	26 e4       	ldi	r18, 0x46	; 70
    9a0a:	ce 01       	movw	r24, r28
    9a0c:	0e 94 e6 18 	call	0x31cc	; 0x31cc <compile_funcdef_lambdef>
    9a10:	df 91       	pop	r29
    9a12:	cf 91       	pop	r28
    9a14:	1f 91       	pop	r17
    9a16:	0f 91       	pop	r16
    9a18:	08 95       	ret

00009a1a <compile_funcdef_helper>:
    9a1a:	ef 92       	push	r14
    9a1c:	ff 92       	push	r15
    9a1e:	0f 93       	push	r16
    9a20:	1f 93       	push	r17
    9a22:	cf 93       	push	r28
    9a24:	df 93       	push	r29
    9a26:	8c 01       	movw	r16, r24
    9a28:	eb 01       	movw	r28, r22
    9a2a:	fc 01       	movw	r30, r24
    9a2c:	83 81       	ldd	r24, Z+3	; 0x03
    9a2e:	81 30       	cpi	r24, 0x01	; 1
    9a30:	39 f4       	brne	.+14     	; 0x9a40 <compile_funcdef_helper+0x26>
    9a32:	9a 01       	movw	r18, r20
    9a34:	ab 01       	movw	r20, r22
    9a36:	67 e0       	ldi	r22, 0x07	; 7
    9a38:	c8 01       	movw	r24, r16
    9a3a:	ac df       	rcall	.-168    	; 0x9994 <scope_new_and_link>
    9a3c:	99 8b       	std	Y+17, r25	; 0x11
    9a3e:	88 8b       	std	Y+16, r24	; 0x10
    9a40:	e8 88       	ldd	r14, Y+16	; 0x10
    9a42:	f9 88       	ldd	r15, Y+17	; 0x11
    9a44:	4a 85       	ldd	r20, Y+10	; 0x0a
    9a46:	5b 85       	ldd	r21, Y+11	; 0x0b
    9a48:	20 e4       	ldi	r18, 0x40	; 64
    9a4a:	b7 01       	movw	r22, r14
    9a4c:	c8 01       	movw	r24, r16
    9a4e:	0e 94 e6 18 	call	0x31cc	; 0x31cc <compile_funcdef_lambdef>
    9a52:	f7 01       	movw	r30, r14
    9a54:	83 85       	ldd	r24, Z+11	; 0x0b
    9a56:	94 85       	ldd	r25, Z+12	; 0x0c
    9a58:	df 91       	pop	r29
    9a5a:	cf 91       	pop	r28
    9a5c:	1f 91       	pop	r17
    9a5e:	0f 91       	pop	r16
    9a60:	ff 90       	pop	r15
    9a62:	ef 90       	pop	r14
    9a64:	08 95       	ret

00009a66 <mp_emit_bc_end_pass>:
    9a66:	ef 92       	push	r14
    9a68:	ff 92       	push	r15
    9a6a:	0f 93       	push	r16
    9a6c:	1f 93       	push	r17
    9a6e:	cf 93       	push	r28
    9a70:	df 93       	push	r29
    9a72:	dc 01       	movw	r26, r24
    9a74:	13 96       	adiw	r26, 0x03	; 3
    9a76:	2c 91       	ld	r18, X
    9a78:	13 97       	sbiw	r26, 0x03	; 3
    9a7a:	21 30       	cpi	r18, 0x01	; 1
    9a7c:	09 f4       	brne	.+2      	; 0x9a80 <mp_emit_bc_end_pass+0x1a>
    9a7e:	c5 c0       	rjmp	.+394    	; 0x9c0a <mp_emit_bc_end_pass+0x1a4>
    9a80:	7c 01       	movw	r14, r24
    9a82:	fc 01       	movw	r30, r24
    9a84:	85 81       	ldd	r24, Z+5	; 0x05
    9a86:	96 81       	ldd	r25, Z+6	; 0x06
    9a88:	89 2b       	or	r24, r25
    9a8a:	11 f0       	breq	.+4      	; 0x9a90 <mp_emit_bc_end_pass+0x2a>
    9a8c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    9a90:	60 e0       	ldi	r22, 0x00	; 0
    9a92:	cd 01       	movw	r24, r26
    9a94:	0e 94 86 04 	call	0x90c	; 0x90c <emit_write_code_info_byte>
    9a98:	d7 01       	movw	r26, r14
    9a9a:	51 96       	adiw	r26, 0x11	; 17
    9a9c:	8d 91       	ld	r24, X+
    9a9e:	9c 91       	ld	r25, X
    9aa0:	52 97       	sbiw	r26, 0x12	; 18
    9aa2:	5b 96       	adiw	r26, 0x1b	; 27
    9aa4:	2d 91       	ld	r18, X+
    9aa6:	3c 91       	ld	r19, X
    9aa8:	5c 97       	sbiw	r26, 0x1c	; 28
    9aaa:	82 1b       	sub	r24, r18
    9aac:	93 0b       	sbc	r25, r19
    9aae:	5c 96       	adiw	r26, 0x1c	; 28
    9ab0:	9c 93       	st	X, r25
    9ab2:	8e 93       	st	-X, r24
    9ab4:	5b 97       	sbiw	r26, 0x1b	; 27
    9ab6:	5e 96       	adiw	r26, 0x1e	; 30
    9ab8:	1c 92       	st	X, r1
    9aba:	1e 92       	st	-X, r1
    9abc:	5d 97       	sbiw	r26, 0x1d	; 29
    9abe:	17 96       	adiw	r26, 0x07	; 7
    9ac0:	ed 91       	ld	r30, X+
    9ac2:	fc 91       	ld	r31, X
    9ac4:	18 97       	sbiw	r26, 0x08	; 8
    9ac6:	87 8d       	ldd	r24, Z+31	; 0x1f
    9ac8:	90 a1       	ldd	r25, Z+32	; 0x20
    9aca:	89 2b       	or	r24, r25
    9acc:	51 f1       	breq	.+84     	; 0x9b22 <mp_emit_bc_end_pass+0xbc>
    9ace:	00 e0       	ldi	r16, 0x00	; 0
    9ad0:	10 e0       	ldi	r17, 0x00	; 0
    9ad2:	c0 e0       	ldi	r28, 0x00	; 0
    9ad4:	d0 e0       	ldi	r29, 0x00	; 0
    9ad6:	01 a0       	ldd	r0, Z+33	; 0x21
    9ad8:	f2 a1       	ldd	r31, Z+34	; 0x22
    9ada:	e0 2d       	mov	r30, r0
    9adc:	e0 0f       	add	r30, r16
    9ade:	f1 1f       	adc	r31, r17
    9ae0:	80 81       	ld	r24, Z
    9ae2:	84 30       	cpi	r24, 0x04	; 4
    9ae4:	89 f4       	brne	.+34     	; 0x9b08 <mp_emit_bc_end_pass+0xa2>
    9ae6:	62 81       	ldd	r22, Z+2	; 0x02
    9ae8:	73 81       	ldd	r23, Z+3	; 0x03
    9aea:	6f 3f       	cpi	r22, 0xFF	; 255
    9aec:	71 05       	cpc	r23, r1
    9aee:	19 f0       	breq	.+6      	; 0x9af6 <mp_emit_bc_end_pass+0x90>
    9af0:	10 f0       	brcs	.+4      	; 0x9af6 <mp_emit_bc_end_pass+0x90>
    9af2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    9af6:	c7 01       	movw	r24, r14
    9af8:	0e 94 86 04 	call	0x90c	; 0x90c <emit_write_code_info_byte>
    9afc:	f7 01       	movw	r30, r14
    9afe:	85 8d       	ldd	r24, Z+29	; 0x1d
    9b00:	96 8d       	ldd	r25, Z+30	; 0x1e
    9b02:	01 96       	adiw	r24, 0x01	; 1
    9b04:	96 8f       	std	Z+30, r25	; 0x1e
    9b06:	85 8f       	std	Z+29, r24	; 0x1d
    9b08:	21 96       	adiw	r28, 0x01	; 1
    9b0a:	d7 01       	movw	r26, r14
    9b0c:	17 96       	adiw	r26, 0x07	; 7
    9b0e:	ed 91       	ld	r30, X+
    9b10:	fc 91       	ld	r31, X
    9b12:	18 97       	sbiw	r26, 0x08	; 8
    9b14:	0a 5f       	subi	r16, 0xFA	; 250
    9b16:	1f 4f       	sbci	r17, 0xFF	; 255
    9b18:	87 8d       	ldd	r24, Z+31	; 0x1f
    9b1a:	90 a1       	ldd	r25, Z+32	; 0x20
    9b1c:	c8 17       	cp	r28, r24
    9b1e:	d9 07       	cpc	r29, r25
    9b20:	d0 f2       	brcs	.-76     	; 0x9ad6 <mp_emit_bc_end_pass+0x70>
    9b22:	d7 01       	movw	r26, r14
    9b24:	13 96       	adiw	r26, 0x03	; 3
    9b26:	8c 91       	ld	r24, X
    9b28:	13 97       	sbiw	r26, 0x03	; 3
    9b2a:	83 30       	cpi	r24, 0x03	; 3
    9b2c:	68 f0       	brcs	.+26     	; 0x9b48 <mp_emit_bc_end_pass+0xe2>
    9b2e:	91 96       	adiw	r26, 0x21	; 33
    9b30:	4d 91       	ld	r20, X+
    9b32:	5c 91       	ld	r21, X
    9b34:	92 97       	sbiw	r26, 0x22	; 34
    9b36:	5f 96       	adiw	r26, 0x1f	; 31
    9b38:	2d 91       	ld	r18, X+
    9b3a:	3c 91       	ld	r19, X
    9b3c:	90 97       	sbiw	r26, 0x20	; 32
    9b3e:	42 17       	cp	r20, r18
    9b40:	53 07       	cpc	r21, r19
    9b42:	11 f0       	breq	.+4      	; 0x9b48 <mp_emit_bc_end_pass+0xe2>
    9b44:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    9b48:	d7 01       	movw	r26, r14
    9b4a:	5f 96       	adiw	r26, 0x1f	; 31
    9b4c:	2d 91       	ld	r18, X+
    9b4e:	3c 91       	ld	r19, X
    9b50:	90 97       	sbiw	r26, 0x20	; 32
    9b52:	92 96       	adiw	r26, 0x22	; 34
    9b54:	3c 93       	st	X, r19
    9b56:	2e 93       	st	-X, r18
    9b58:	91 97       	sbiw	r26, 0x21	; 33
    9b5a:	83 30       	cpi	r24, 0x03	; 3
    9b5c:	a9 f5       	brne	.+106    	; 0x9bc8 <mp_emit_bc_end_pass+0x162>
    9b5e:	51 96       	adiw	r26, 0x11	; 17
    9b60:	2d 91       	ld	r18, X+
    9b62:	3c 91       	ld	r19, X
    9b64:	52 97       	sbiw	r26, 0x12	; 18
    9b66:	54 96       	adiw	r26, 0x14	; 20
    9b68:	3c 93       	st	X, r19
    9b6a:	2e 93       	st	-X, r18
    9b6c:	53 97       	sbiw	r26, 0x13	; 19
    9b6e:	55 96       	adiw	r26, 0x15	; 21
    9b70:	8d 91       	ld	r24, X+
    9b72:	9c 91       	ld	r25, X
    9b74:	56 97       	sbiw	r26, 0x16	; 22
    9b76:	58 96       	adiw	r26, 0x18	; 24
    9b78:	9c 93       	st	X, r25
    9b7a:	8e 93       	st	-X, r24
    9b7c:	57 97       	sbiw	r26, 0x17	; 23
    9b7e:	82 0f       	add	r24, r18
    9b80:	93 1f       	adc	r25, r19
    9b82:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9b86:	f7 01       	movw	r30, r14
    9b88:	92 8f       	std	Z+26, r25	; 0x1a
    9b8a:	81 8f       	std	Z+25, r24	; 0x19
    9b8c:	07 80       	ldd	r0, Z+7	; 0x07
    9b8e:	f0 85       	ldd	r31, Z+8	; 0x08
    9b90:	e0 2d       	mov	r30, r0
    9b92:	21 89       	ldd	r18, Z+17	; 0x11
    9b94:	32 89       	ldd	r19, Z+18	; 0x12
    9b96:	83 89       	ldd	r24, Z+19	; 0x13
    9b98:	94 89       	ldd	r25, Z+20	; 0x14
    9b9a:	28 0f       	add	r18, r24
    9b9c:	39 1f       	adc	r19, r25
    9b9e:	d7 01       	movw	r26, r14
    9ba0:	5f 96       	adiw	r26, 0x1f	; 31
    9ba2:	8d 91       	ld	r24, X+
    9ba4:	9c 91       	ld	r25, X
    9ba6:	90 97       	sbiw	r26, 0x20	; 32
    9ba8:	28 0f       	add	r18, r24
    9baa:	39 1f       	adc	r19, r25
    9bac:	93 96       	adiw	r26, 0x23	; 35
    9bae:	8d 91       	ld	r24, X+
    9bb0:	9c 91       	ld	r25, X
    9bb2:	94 97       	sbiw	r26, 0x24	; 36
    9bb4:	82 0f       	add	r24, r18
    9bb6:	93 1f       	adc	r25, r19
    9bb8:	88 0f       	add	r24, r24
    9bba:	99 1f       	adc	r25, r25
    9bbc:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    9bc0:	f7 01       	movw	r30, r14
    9bc2:	96 a3       	std	Z+38, r25	; 0x26
    9bc4:	85 a3       	std	Z+37, r24	; 0x25
    9bc6:	21 c0       	rjmp	.+66     	; 0x9c0a <mp_emit_bc_end_pass+0x1a4>
    9bc8:	84 30       	cpi	r24, 0x04	; 4
    9bca:	f9 f4       	brne	.+62     	; 0x9c0a <mp_emit_bc_end_pass+0x1a4>
    9bcc:	85 85       	ldd	r24, Z+13	; 0x0d
    9bce:	d7 01       	movw	r26, r14
    9bd0:	95 96       	adiw	r26, 0x25	; 37
    9bd2:	2d 91       	ld	r18, X+
    9bd4:	3c 91       	ld	r19, X
    9bd6:	96 97       	sbiw	r26, 0x26	; 38
    9bd8:	59 96       	adiw	r26, 0x19	; 25
    9bda:	4d 91       	ld	r20, X+
    9bdc:	5c 91       	ld	r21, X
    9bde:	5a 97       	sbiw	r26, 0x1a	; 26
    9be0:	07 80       	ldd	r0, Z+7	; 0x07
    9be2:	f0 85       	ldd	r31, Z+8	; 0x08
    9be4:	e0 2d       	mov	r30, r0
    9be6:	98 2f       	mov	r25, r24
    9be8:	99 0f       	add	r25, r25
    9bea:	99 0f       	add	r25, r25
    9bec:	99 0f       	add	r25, r25
    9bee:	92 60       	ori	r25, 0x02	; 2
    9bf0:	90 83       	st	Z, r25
    9bf2:	82 95       	swap	r24
    9bf4:	86 95       	lsr	r24
    9bf6:	87 70       	andi	r24, 0x07	; 7
    9bf8:	83 70       	andi	r24, 0x03	; 3
    9bfa:	91 81       	ldd	r25, Z+1	; 0x01
    9bfc:	9c 7f       	andi	r25, 0xFC	; 252
    9bfe:	89 2b       	or	r24, r25
    9c00:	81 83       	std	Z+1, r24	; 0x01
    9c02:	54 83       	std	Z+4, r21	; 0x04
    9c04:	43 83       	std	Z+3, r20	; 0x03
    9c06:	36 83       	std	Z+6, r19	; 0x06
    9c08:	25 83       	std	Z+5, r18	; 0x05
    9c0a:	df 91       	pop	r29
    9c0c:	cf 91       	pop	r28
    9c0e:	1f 91       	pop	r17
    9c10:	0f 91       	pop	r16
    9c12:	ff 90       	pop	r15
    9c14:	ef 90       	pop	r14
    9c16:	08 95       	ret

00009c18 <emit_bc_new>:
    9c18:	87 e2       	ldi	r24, 0x27	; 39
    9c1a:	90 e0       	ldi	r25, 0x00	; 0
    9c1c:	0c 94 c3 31 	jmp	0x6386	; 0x6386 <m_malloc>
    9c20:	08 95       	ret

00009c22 <m_realloc>:
    9c22:	cf 93       	push	r28
    9c24:	df 93       	push	r29
    9c26:	eb 01       	movw	r28, r22
    9c28:	41 e0       	ldi	r20, 0x01	; 1
    9c2a:	0e 94 c7 08 	call	0x118e	; 0x118e <gc_realloc>
    9c2e:	00 97       	sbiw	r24, 0x00	; 0
    9c30:	29 f4       	brne	.+10     	; 0x9c3c <m_realloc+0x1a>
    9c32:	20 97       	sbiw	r28, 0x00	; 0
    9c34:	19 f0       	breq	.+6      	; 0x9c3c <m_realloc+0x1a>
    9c36:	ce 01       	movw	r24, r28
    9c38:	0e 94 ac 31 	call	0x6358	; 0x6358 <m_malloc_fail>
    9c3c:	df 91       	pop	r29
    9c3e:	cf 91       	pop	r28
    9c40:	08 95       	ret

00009c42 <vstr_extend>:
    9c42:	0f 93       	push	r16
    9c44:	1f 93       	push	r17
    9c46:	cf 93       	push	r28
    9c48:	df 93       	push	r29
    9c4a:	ec 01       	movw	r28, r24
    9c4c:	8b 01       	movw	r16, r22
    9c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    9c50:	80 ff       	sbrs	r24, 0
    9c52:	06 c0       	rjmp	.+12     	; 0x9c60 <vstr_extend+0x1e>
    9c54:	60 e0       	ldi	r22, 0x00	; 0
    9c56:	70 e0       	ldi	r23, 0x00	; 0
    9c58:	88 ef       	ldi	r24, 0xF8	; 248
    9c5a:	9f e1       	ldi	r25, 0x1F	; 31
    9c5c:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    9c60:	68 81       	ld	r22, Y
    9c62:	79 81       	ldd	r23, Y+1	; 0x01
    9c64:	60 0f       	add	r22, r16
    9c66:	71 1f       	adc	r23, r17
    9c68:	8c 81       	ldd	r24, Y+4	; 0x04
    9c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    9c6c:	da df       	rcall	.-76     	; 0x9c22 <m_realloc>
    9c6e:	28 81       	ld	r18, Y
    9c70:	39 81       	ldd	r19, Y+1	; 0x01
    9c72:	02 0f       	add	r16, r18
    9c74:	13 1f       	adc	r17, r19
    9c76:	19 83       	std	Y+1, r17	; 0x01
    9c78:	08 83       	st	Y, r16
    9c7a:	9d 83       	std	Y+5, r25	; 0x05
    9c7c:	8c 83       	std	Y+4, r24	; 0x04
    9c7e:	82 0f       	add	r24, r18
    9c80:	93 1f       	adc	r25, r19
    9c82:	df 91       	pop	r29
    9c84:	cf 91       	pop	r28
    9c86:	1f 91       	pop	r17
    9c88:	0f 91       	pop	r16
    9c8a:	08 95       	ret

00009c8c <vstr_null_terminated_str>:
    9c8c:	cf 93       	push	r28
    9c8e:	df 93       	push	r29
    9c90:	ec 01       	movw	r28, r24
    9c92:	28 81       	ld	r18, Y
    9c94:	39 81       	ldd	r19, Y+1	; 0x01
    9c96:	8a 81       	ldd	r24, Y+2	; 0x02
    9c98:	9b 81       	ldd	r25, Y+3	; 0x03
    9c9a:	28 17       	cp	r18, r24
    9c9c:	39 07       	cpc	r19, r25
    9c9e:	21 f4       	brne	.+8      	; 0x9ca8 <vstr_null_terminated_str+0x1c>
    9ca0:	61 e0       	ldi	r22, 0x01	; 1
    9ca2:	70 e0       	ldi	r23, 0x00	; 0
    9ca4:	ce 01       	movw	r24, r28
    9ca6:	cd df       	rcall	.-102    	; 0x9c42 <vstr_extend>
    9ca8:	ec 81       	ldd	r30, Y+4	; 0x04
    9caa:	fd 81       	ldd	r31, Y+5	; 0x05
    9cac:	8a 81       	ldd	r24, Y+2	; 0x02
    9cae:	9b 81       	ldd	r25, Y+3	; 0x03
    9cb0:	e8 0f       	add	r30, r24
    9cb2:	f9 1f       	adc	r31, r25
    9cb4:	10 82       	st	Z, r1
    9cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    9cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    9cba:	df 91       	pop	r29
    9cbc:	cf 91       	pop	r28
    9cbe:	08 95       	ret

00009cc0 <vstr_ensure_extra>:
    9cc0:	0f 93       	push	r16
    9cc2:	1f 93       	push	r17
    9cc4:	cf 93       	push	r28
    9cc6:	df 93       	push	r29
    9cc8:	fc 01       	movw	r30, r24
    9cca:	22 81       	ldd	r18, Z+2	; 0x02
    9ccc:	33 81       	ldd	r19, Z+3	; 0x03
    9cce:	62 0f       	add	r22, r18
    9cd0:	73 1f       	adc	r23, r19
    9cd2:	20 81       	ld	r18, Z
    9cd4:	31 81       	ldd	r19, Z+1	; 0x01
    9cd6:	26 17       	cp	r18, r22
    9cd8:	37 07       	cpc	r19, r23
    9cda:	b8 f4       	brcc	.+46     	; 0x9d0a <vstr_ensure_extra+0x4a>
    9cdc:	8c 01       	movw	r16, r24
    9cde:	86 81       	ldd	r24, Z+6	; 0x06
    9ce0:	80 ff       	sbrs	r24, 0
    9ce2:	06 c0       	rjmp	.+12     	; 0x9cf0 <vstr_ensure_extra+0x30>
    9ce4:	60 e0       	ldi	r22, 0x00	; 0
    9ce6:	70 e0       	ldi	r23, 0x00	; 0
    9ce8:	88 ef       	ldi	r24, 0xF8	; 248
    9cea:	9f e1       	ldi	r25, 0x1F	; 31
    9cec:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    9cf0:	eb 01       	movw	r28, r22
    9cf2:	60 96       	adiw	r28, 0x10	; 16
    9cf4:	c8 7f       	andi	r28, 0xF8	; 248
    9cf6:	28 96       	adiw	r28, 0x08	; 8
    9cf8:	be 01       	movw	r22, r28
    9cfa:	84 81       	ldd	r24, Z+4	; 0x04
    9cfc:	95 81       	ldd	r25, Z+5	; 0x05
    9cfe:	91 df       	rcall	.-222    	; 0x9c22 <m_realloc>
    9d00:	f8 01       	movw	r30, r16
    9d02:	d1 83       	std	Z+1, r29	; 0x01
    9d04:	c0 83       	st	Z, r28
    9d06:	95 83       	std	Z+5, r25	; 0x05
    9d08:	84 83       	std	Z+4, r24	; 0x04
    9d0a:	df 91       	pop	r29
    9d0c:	cf 91       	pop	r28
    9d0e:	1f 91       	pop	r17
    9d10:	0f 91       	pop	r16
    9d12:	08 95       	ret

00009d14 <vstr_add_len>:
    9d14:	0f 93       	push	r16
    9d16:	1f 93       	push	r17
    9d18:	cf 93       	push	r28
    9d1a:	df 93       	push	r29
    9d1c:	ec 01       	movw	r28, r24
    9d1e:	8b 01       	movw	r16, r22
    9d20:	cf df       	rcall	.-98     	; 0x9cc0 <vstr_ensure_extra>
    9d22:	8a 81       	ldd	r24, Y+2	; 0x02
    9d24:	9b 81       	ldd	r25, Y+3	; 0x03
    9d26:	2c 81       	ldd	r18, Y+4	; 0x04
    9d28:	3d 81       	ldd	r19, Y+5	; 0x05
    9d2a:	08 0f       	add	r16, r24
    9d2c:	19 1f       	adc	r17, r25
    9d2e:	1b 83       	std	Y+3, r17	; 0x03
    9d30:	0a 83       	std	Y+2, r16	; 0x02
    9d32:	82 0f       	add	r24, r18
    9d34:	93 1f       	adc	r25, r19
    9d36:	df 91       	pop	r29
    9d38:	cf 91       	pop	r28
    9d3a:	1f 91       	pop	r17
    9d3c:	0f 91       	pop	r16
    9d3e:	08 95       	ret

00009d40 <vstr_add_byte>:
    9d40:	cf 93       	push	r28
    9d42:	c6 2f       	mov	r28, r22
    9d44:	61 e0       	ldi	r22, 0x01	; 1
    9d46:	70 e0       	ldi	r23, 0x00	; 0
    9d48:	e5 df       	rcall	.-54     	; 0x9d14 <vstr_add_len>
    9d4a:	fc 01       	movw	r30, r24
    9d4c:	c0 83       	st	Z, r28
    9d4e:	cf 91       	pop	r28
    9d50:	08 95       	ret

00009d52 <vstr_add_strn>:
    9d52:	ef 92       	push	r14
    9d54:	ff 92       	push	r15
    9d56:	0f 93       	push	r16
    9d58:	1f 93       	push	r17
    9d5a:	cf 93       	push	r28
    9d5c:	df 93       	push	r29
    9d5e:	ec 01       	movw	r28, r24
    9d60:	7b 01       	movw	r14, r22
    9d62:	8a 01       	movw	r16, r20
    9d64:	ba 01       	movw	r22, r20
    9d66:	ac df       	rcall	.-168    	; 0x9cc0 <vstr_ensure_extra>
    9d68:	2c 81       	ldd	r18, Y+4	; 0x04
    9d6a:	3d 81       	ldd	r19, Y+5	; 0x05
    9d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    9d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    9d70:	a8 01       	movw	r20, r16
    9d72:	b7 01       	movw	r22, r14
    9d74:	82 0f       	add	r24, r18
    9d76:	93 1f       	adc	r25, r19
    9d78:	0e 94 9b c2 	call	0x18536	; 0x18536 <memmove>
    9d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    9d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    9d80:	08 0f       	add	r16, r24
    9d82:	19 1f       	adc	r17, r25
    9d84:	1b 83       	std	Y+3, r17	; 0x03
    9d86:	0a 83       	std	Y+2, r16	; 0x02
    9d88:	df 91       	pop	r29
    9d8a:	cf 91       	pop	r28
    9d8c:	1f 91       	pop	r17
    9d8e:	0f 91       	pop	r16
    9d90:	ff 90       	pop	r15
    9d92:	ef 90       	pop	r14
    9d94:	08 95       	ret

00009d96 <vstr_add_str>:
    9d96:	fb 01       	movw	r30, r22
    9d98:	01 90       	ld	r0, Z+
    9d9a:	00 20       	and	r0, r0
    9d9c:	e9 f7       	brne	.-6      	; 0x9d98 <vstr_add_str+0x2>
    9d9e:	31 97       	sbiw	r30, 0x01	; 1
    9da0:	af 01       	movw	r20, r30
    9da2:	46 1b       	sub	r20, r22
    9da4:	57 0b       	sbc	r21, r23
    9da6:	d5 cf       	rjmp	.-86     	; 0x9d52 <vstr_add_strn>
    9da8:	08 95       	ret

00009daa <stat_dir_or_file>:
    9daa:	cf 93       	push	r28
    9dac:	df 93       	push	r29
    9dae:	ec 01       	movw	r28, r24
    9db0:	6d df       	rcall	.-294    	; 0x9c8c <vstr_null_terminated_str>
    9db2:	0e 94 04 24 	call	0x4808	; 0x4808 <mp_import_stat_any>
    9db6:	81 30       	cpi	r24, 0x01	; 1
    9db8:	59 f0       	breq	.+22     	; 0x9dd0 <stat_dir_or_file+0x26>
    9dba:	65 e9       	ldi	r22, 0x95	; 149
    9dbc:	7d e0       	ldi	r23, 0x0D	; 13
    9dbe:	ce 01       	movw	r24, r28
    9dc0:	ea df       	rcall	.-44     	; 0x9d96 <vstr_add_str>
    9dc2:	ce 01       	movw	r24, r28
    9dc4:	63 df       	rcall	.-314    	; 0x9c8c <vstr_null_terminated_str>
    9dc6:	0e 94 04 24 	call	0x4808	; 0x4808 <mp_import_stat_any>
    9dca:	82 30       	cpi	r24, 0x02	; 2
    9dcc:	19 f4       	brne	.+6      	; 0x9dd4 <stat_dir_or_file+0x2a>
    9dce:	03 c0       	rjmp	.+6      	; 0x9dd6 <stat_dir_or_file+0x2c>
    9dd0:	81 e0       	ldi	r24, 0x01	; 1
    9dd2:	01 c0       	rjmp	.+2      	; 0x9dd6 <stat_dir_or_file+0x2c>
    9dd4:	80 e0       	ldi	r24, 0x00	; 0
    9dd6:	df 91       	pop	r29
    9dd8:	cf 91       	pop	r28
    9dda:	08 95       	ret

00009ddc <mp_lexer_to_next>:
    9ddc:	2f 92       	push	r2
    9dde:	3f 92       	push	r3
    9de0:	4f 92       	push	r4
    9de2:	5f 92       	push	r5
    9de4:	6f 92       	push	r6
    9de6:	7f 92       	push	r7
    9de8:	8f 92       	push	r8
    9dea:	9f 92       	push	r9
    9dec:	af 92       	push	r10
    9dee:	bf 92       	push	r11
    9df0:	cf 92       	push	r12
    9df2:	df 92       	push	r13
    9df4:	ef 92       	push	r14
    9df6:	ff 92       	push	r15
    9df8:	0f 93       	push	r16
    9dfa:	1f 93       	push	r17
    9dfc:	cf 93       	push	r28
    9dfe:	df 93       	push	r29
    9e00:	00 d0       	rcall	.+0      	; 0x9e02 <mp_lexer_to_next+0x26>
    9e02:	00 d0       	rcall	.+0      	; 0x9e04 <mp_lexer_to_next+0x28>
    9e04:	00 d0       	rcall	.+0      	; 0x9e06 <mp_lexer_to_next+0x2a>
    9e06:	cd b7       	in	r28, 0x3d	; 61
    9e08:	de b7       	in	r29, 0x3e	; 62
    9e0a:	3c 01       	movw	r6, r24
    9e0c:	dc 01       	movw	r26, r24
    9e0e:	94 96       	adiw	r26, 0x24	; 36
    9e10:	1c 92       	st	X, r1
    9e12:	1e 92       	st	-X, r1
    9e14:	93 97       	sbiw	r26, 0x23	; 35
    9e16:	60 e0       	ldi	r22, 0x00	; 0
    9e18:	0e 94 fd 05 	call	0xbfa	; 0xbfa <skip_whitespace>
    9e1c:	f3 01       	movw	r30, r6
    9e1e:	26 85       	ldd	r18, Z+14	; 0x0e
    9e20:	37 85       	ldd	r19, Z+15	; 0x0f
    9e22:	35 8f       	std	Z+29, r19	; 0x1d
    9e24:	24 8f       	std	Z+28, r18	; 0x1c
    9e26:	40 89       	ldd	r20, Z+16	; 0x10
    9e28:	51 89       	ldd	r21, Z+17	; 0x11
    9e2a:	57 8f       	std	Z+31, r21	; 0x1f
    9e2c:	46 8f       	std	Z+30, r20	; 0x1e
    9e2e:	22 89       	ldd	r18, Z+18	; 0x12
    9e30:	33 89       	ldd	r19, Z+19	; 0x13
    9e32:	33 23       	and	r19, r19
    9e34:	3c f4       	brge	.+14     	; 0x9e44 <mp_lexer_to_next+0x68>
    9e36:	86 e0       	ldi	r24, 0x06	; 6
    9e38:	80 a3       	std	Z+32, r24	; 0x20
    9e3a:	2f 5f       	subi	r18, 0xFF	; 255
    9e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    9e3e:	33 8b       	std	Z+19, r19	; 0x13
    9e40:	22 8b       	std	Z+18, r18	; 0x12
    9e42:	a9 c4       	rjmp	.+2386   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9e44:	12 16       	cp	r1, r18
    9e46:	13 06       	cpc	r1, r19
    9e48:	3c f4       	brge	.+14     	; 0x9e58 <mp_lexer_to_next+0x7c>
    9e4a:	85 e0       	ldi	r24, 0x05	; 5
    9e4c:	80 a3       	std	Z+32, r24	; 0x20
    9e4e:	21 50       	subi	r18, 0x01	; 1
    9e50:	31 09       	sbc	r19, r1
    9e52:	33 8b       	std	Z+19, r19	; 0x13
    9e54:	22 8b       	std	Z+18, r18	; 0x12
    9e56:	9f c4       	rjmp	.+2366   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9e58:	88 23       	and	r24, r24
    9e5a:	09 f4       	brne	.+2      	; 0x9e5e <mp_lexer_to_next+0x82>
    9e5c:	7f c0       	rjmp	.+254    	; 0x9f5c <mp_lexer_to_next+0x180>
    9e5e:	f3 01       	movw	r30, r6
    9e60:	84 89       	ldd	r24, Z+20	; 0x14
    9e62:	95 89       	ldd	r25, Z+21	; 0x15
    9e64:	89 2b       	or	r24, r25
    9e66:	09 f0       	breq	.+2      	; 0x9e6a <mp_lexer_to_next+0x8e>
    9e68:	79 c0       	rjmp	.+242    	; 0x9f5c <mp_lexer_to_next+0x180>
    9e6a:	84 e0       	ldi	r24, 0x04	; 4
    9e6c:	80 a3       	std	Z+32, r24	; 0x20
    9e6e:	9a 01       	movw	r18, r20
    9e70:	21 50       	subi	r18, 0x01	; 1
    9e72:	31 09       	sbc	r19, r1
    9e74:	3e 83       	std	Y+6, r19	; 0x06
    9e76:	2d 83       	std	Y+5, r18	; 0x05
    9e78:	82 8d       	ldd	r24, Z+26	; 0x1a
    9e7a:	93 8d       	ldd	r25, Z+27	; 0x1b
    9e7c:	20 8d       	ldd	r18, Z+24	; 0x18
    9e7e:	31 8d       	ldd	r19, Z+25	; 0x19
    9e80:	f9 01       	movw	r30, r18
    9e82:	e1 50       	subi	r30, 0x01	; 1
    9e84:	f0 48       	sbci	r31, 0x80	; 128
    9e86:	ee 0f       	add	r30, r30
    9e88:	ff 1f       	adc	r31, r31
    9e8a:	e8 0f       	add	r30, r24
    9e8c:	f9 1f       	adc	r31, r25
    9e8e:	40 81       	ld	r20, Z
    9e90:	51 81       	ldd	r21, Z+1	; 0x01
    9e92:	6d 81       	ldd	r22, Y+5	; 0x05
    9e94:	7e 81       	ldd	r23, Y+6	; 0x06
    9e96:	64 17       	cp	r22, r20
    9e98:	75 07       	cpc	r23, r21
    9e9a:	09 f4       	brne	.+2      	; 0x9e9e <mp_lexer_to_next+0xc2>
    9e9c:	7c c4       	rjmp	.+2296   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9e9e:	46 17       	cp	r20, r22
    9ea0:	57 07       	cpc	r21, r23
    9ea2:	20 f0       	brcs	.+8      	; 0x9eac <mp_lexer_to_next+0xd0>
    9ea4:	64 17       	cp	r22, r20
    9ea6:	75 07       	cpc	r23, r21
    9ea8:	c8 f1       	brcs	.+114    	; 0x9f1c <mp_lexer_to_next+0x140>
    9eaa:	53 c0       	rjmp	.+166    	; 0x9f52 <mp_lexer_to_next+0x176>
    9eac:	d3 01       	movw	r26, r6
    9eae:	56 96       	adiw	r26, 0x16	; 22
    9eb0:	4d 91       	ld	r20, X+
    9eb2:	5c 91       	ld	r21, X
    9eb4:	57 97       	sbiw	r26, 0x17	; 23
    9eb6:	24 17       	cp	r18, r20
    9eb8:	35 07       	cpc	r19, r21
    9eba:	70 f0       	brcs	.+28     	; 0x9ed8 <mp_lexer_to_next+0xfc>
    9ebc:	48 5f       	subi	r20, 0xF8	; 248
    9ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    9ec0:	ba 01       	movw	r22, r20
    9ec2:	66 0f       	add	r22, r22
    9ec4:	77 1f       	adc	r23, r23
    9ec6:	ad de       	rcall	.-678    	; 0x9c22 <m_realloc>
    9ec8:	f3 01       	movw	r30, r6
    9eca:	93 8f       	std	Z+27, r25	; 0x1b
    9ecc:	82 8f       	std	Z+26, r24	; 0x1a
    9ece:	86 89       	ldd	r24, Z+22	; 0x16
    9ed0:	97 89       	ldd	r25, Z+23	; 0x17
    9ed2:	08 96       	adiw	r24, 0x08	; 8
    9ed4:	97 8b       	std	Z+23, r25	; 0x17
    9ed6:	86 8b       	std	Z+22, r24	; 0x16
    9ed8:	d3 01       	movw	r26, r6
    9eda:	5a 96       	adiw	r26, 0x1a	; 26
    9edc:	ed 91       	ld	r30, X+
    9ede:	fc 91       	ld	r31, X
    9ee0:	5b 97       	sbiw	r26, 0x1b	; 27
    9ee2:	58 96       	adiw	r26, 0x18	; 24
    9ee4:	8d 91       	ld	r24, X+
    9ee6:	9c 91       	ld	r25, X
    9ee8:	59 97       	sbiw	r26, 0x19	; 25
    9eea:	9c 01       	movw	r18, r24
    9eec:	2f 5f       	subi	r18, 0xFF	; 255
    9eee:	3f 4f       	sbci	r19, 0xFF	; 255
    9ef0:	59 96       	adiw	r26, 0x19	; 25
    9ef2:	3c 93       	st	X, r19
    9ef4:	2e 93       	st	-X, r18
    9ef6:	58 97       	sbiw	r26, 0x18	; 24
    9ef8:	88 0f       	add	r24, r24
    9efa:	99 1f       	adc	r25, r25
    9efc:	e8 0f       	add	r30, r24
    9efe:	f9 1f       	adc	r31, r25
    9f00:	2d 81       	ldd	r18, Y+5	; 0x05
    9f02:	3e 81       	ldd	r19, Y+6	; 0x06
    9f04:	31 83       	std	Z+1, r19	; 0x01
    9f06:	20 83       	st	Z, r18
    9f08:	52 96       	adiw	r26, 0x12	; 18
    9f0a:	8d 91       	ld	r24, X+
    9f0c:	9c 91       	ld	r25, X
    9f0e:	53 97       	sbiw	r26, 0x13	; 19
    9f10:	01 96       	adiw	r24, 0x01	; 1
    9f12:	53 96       	adiw	r26, 0x13	; 19
    9f14:	9c 93       	st	X, r25
    9f16:	8e 93       	st	-X, r24
    9f18:	52 97       	sbiw	r26, 0x12	; 18
    9f1a:	3d c4       	rjmp	.+2170   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9f1c:	21 50       	subi	r18, 0x01	; 1
    9f1e:	31 09       	sbc	r19, r1
    9f20:	d3 01       	movw	r26, r6
    9f22:	59 96       	adiw	r26, 0x19	; 25
    9f24:	3c 93       	st	X, r19
    9f26:	2e 93       	st	-X, r18
    9f28:	58 97       	sbiw	r26, 0x18	; 24
    9f2a:	52 96       	adiw	r26, 0x12	; 18
    9f2c:	8d 91       	ld	r24, X+
    9f2e:	9c 91       	ld	r25, X
    9f30:	53 97       	sbiw	r26, 0x13	; 19
    9f32:	01 97       	sbiw	r24, 0x01	; 1
    9f34:	53 96       	adiw	r26, 0x13	; 19
    9f36:	9c 93       	st	X, r25
    9f38:	8e 93       	st	-X, r24
    9f3a:	52 97       	sbiw	r26, 0x12	; 18
    9f3c:	92 91       	ld	r25, -Z
    9f3e:	82 91       	ld	r24, -Z
    9f40:	4d 81       	ldd	r20, Y+5	; 0x05
    9f42:	5e 81       	ldd	r21, Y+6	; 0x06
    9f44:	48 17       	cp	r20, r24
    9f46:	59 07       	cpc	r21, r25
    9f48:	48 f3       	brcs	.-46     	; 0x9f1c <mp_lexer_to_next+0x140>
    9f4a:	48 17       	cp	r20, r24
    9f4c:	59 07       	cpc	r21, r25
    9f4e:	09 f4       	brne	.+2      	; 0x9f52 <mp_lexer_to_next+0x176>
    9f50:	22 c4       	rjmp	.+2116   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9f52:	82 e0       	ldi	r24, 0x02	; 2
    9f54:	d3 01       	movw	r26, r6
    9f56:	90 96       	adiw	r26, 0x20	; 32
    9f58:	8c 93       	st	X, r24
    9f5a:	1d c4       	rjmp	.+2106   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9f5c:	f3 01       	movw	r30, r6
    9f5e:	00 84       	ldd	r0, Z+8	; 0x08
    9f60:	f1 85       	ldd	r31, Z+9	; 0x09
    9f62:	e0 2d       	mov	r30, r0
    9f64:	fe 83       	std	Y+6, r31	; 0x06
    9f66:	ed 83       	std	Y+5, r30	; 0x05
    9f68:	31 96       	adiw	r30, 0x01	; 1
    9f6a:	21 f4       	brne	.+8      	; 0x9f74 <mp_lexer_to_next+0x198>
    9f6c:	d3 01       	movw	r26, r6
    9f6e:	90 96       	adiw	r26, 0x20	; 32
    9f70:	1c 92       	st	X, r1
    9f72:	11 c4       	rjmp	.+2082   	; 0xa796 <mp_lexer_to_next+0x9ba>
    9f74:	c3 01       	movw	r24, r6
    9f76:	0e 94 a8 05 	call	0xb50	; 0xb50 <is_string_or_bytes>
    9f7a:	88 23       	and	r24, r24
    9f7c:	09 f4       	brne	.+2      	; 0x9f80 <mp_lexer_to_next+0x1a4>
    9f7e:	df c1       	rjmp	.+958    	; 0xa33e <mp_lexer_to_next+0x562>
    9f80:	f3 01       	movw	r30, r6
    9f82:	10 a2       	std	Z+32, r1	; 0x20
    9f84:	22 24       	eor	r2, r2
    9f86:	23 94       	inc	r2
    9f88:	31 2c       	mov	r3, r1
    9f8a:	93 01       	movw	r18, r6
    9f8c:	2f 5d       	subi	r18, 0xDF	; 223
    9f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    9f90:	29 01       	movw	r4, r18
    9f92:	19 82       	std	Y+1, r1	; 0x01
    9f94:	1a 82       	std	Y+2, r1	; 0x02
    9f96:	32 e0       	ldi	r19, 0x02	; 2
    9f98:	3b 83       	std	Y+3, r19	; 0x03
    9f9a:	1c 82       	std	Y+4, r1	; 0x04
    9f9c:	d3 01       	movw	r26, r6
    9f9e:	18 96       	adiw	r26, 0x08	; 8
    9fa0:	8d 91       	ld	r24, X+
    9fa2:	9c 91       	ld	r25, X
    9fa4:	19 97       	sbiw	r26, 0x09	; 9
    9fa6:	85 37       	cpi	r24, 0x75	; 117
    9fa8:	91 05       	cpc	r25, r1
    9faa:	09 f1       	breq	.+66     	; 0x9fee <mp_lexer_to_next+0x212>
    9fac:	82 36       	cpi	r24, 0x62	; 98
    9fae:	91 05       	cpc	r25, r1
    9fb0:	71 f4       	brne	.+28     	; 0x9fce <mp_lexer_to_next+0x1f2>
    9fb2:	1a 96       	adiw	r26, 0x0a	; 10
    9fb4:	8d 91       	ld	r24, X+
    9fb6:	9c 91       	ld	r25, X
    9fb8:	1b 97       	sbiw	r26, 0x0b	; 11
    9fba:	82 37       	cpi	r24, 0x72	; 114
    9fbc:	91 05       	cpc	r25, r1
    9fbe:	e1 f4       	brne	.+56     	; 0x9ff8 <mp_lexer_to_next+0x21c>
    9fc0:	b2 e0       	ldi	r27, 0x02	; 2
    9fc2:	bd 83       	std	Y+5, r27	; 0x05
    9fc4:	1e 82       	std	Y+6, r1	; 0x06
    9fc6:	9b e0       	ldi	r25, 0x0B	; 11
    9fc8:	99 24       	eor	r9, r9
    9fca:	93 94       	inc	r9
    9fcc:	24 c0       	rjmp	.+72     	; 0xa016 <mp_lexer_to_next+0x23a>
    9fce:	82 37       	cpi	r24, 0x72	; 114
    9fd0:	91 05       	cpc	r25, r1
    9fd2:	b9 f4       	brne	.+46     	; 0xa002 <mp_lexer_to_next+0x226>
    9fd4:	f3 01       	movw	r30, r6
    9fd6:	82 85       	ldd	r24, Z+10	; 0x0a
    9fd8:	93 85       	ldd	r25, Z+11	; 0x0b
    9fda:	82 36       	cpi	r24, 0x62	; 98
    9fdc:	91 05       	cpc	r25, r1
    9fde:	b1 f4       	brne	.+44     	; 0xa00c <mp_lexer_to_next+0x230>
    9fe0:	f2 e0       	ldi	r31, 0x02	; 2
    9fe2:	fd 83       	std	Y+5, r31	; 0x05
    9fe4:	1e 82       	std	Y+6, r1	; 0x06
    9fe6:	9b e0       	ldi	r25, 0x0B	; 11
    9fe8:	99 24       	eor	r9, r9
    9fea:	93 94       	inc	r9
    9fec:	14 c0       	rjmp	.+40     	; 0xa016 <mp_lexer_to_next+0x23a>
    9fee:	2d 82       	std	Y+5, r2	; 0x05
    9ff0:	3e 82       	std	Y+6, r3	; 0x06
    9ff2:	9a e0       	ldi	r25, 0x0A	; 10
    9ff4:	91 2c       	mov	r9, r1
    9ff6:	0f c0       	rjmp	.+30     	; 0xa016 <mp_lexer_to_next+0x23a>
    9ff8:	2d 82       	std	Y+5, r2	; 0x05
    9ffa:	3e 82       	std	Y+6, r3	; 0x06
    9ffc:	9b e0       	ldi	r25, 0x0B	; 11
    9ffe:	91 2c       	mov	r9, r1
    a000:	0a c0       	rjmp	.+20     	; 0xa016 <mp_lexer_to_next+0x23a>
    a002:	1d 82       	std	Y+5, r1	; 0x05
    a004:	1e 82       	std	Y+6, r1	; 0x06
    a006:	9a e0       	ldi	r25, 0x0A	; 10
    a008:	91 2c       	mov	r9, r1
    a00a:	05 c0       	rjmp	.+10     	; 0xa016 <mp_lexer_to_next+0x23a>
    a00c:	2d 82       	std	Y+5, r2	; 0x05
    a00e:	3e 82       	std	Y+6, r3	; 0x06
    a010:	9a e0       	ldi	r25, 0x0A	; 10
    a012:	99 24       	eor	r9, r9
    a014:	93 94       	inc	r9
    a016:	d3 01       	movw	r26, r6
    a018:	90 96       	adiw	r26, 0x20	; 32
    a01a:	8c 91       	ld	r24, X
    a01c:	90 97       	sbiw	r26, 0x20	; 32
    a01e:	81 11       	cpse	r24, r1
    a020:	03 c0       	rjmp	.+6      	; 0xa028 <mp_lexer_to_next+0x24c>
    a022:	90 96       	adiw	r26, 0x20	; 32
    a024:	9c 93       	st	X, r25
    a026:	02 c0       	rjmp	.+4      	; 0xa02c <mp_lexer_to_next+0x250>
    a028:	98 13       	cpse	r25, r24
    a02a:	b5 c3       	rjmp	.+1898   	; 0xa796 <mp_lexer_to_next+0x9ba>
    a02c:	ed 81       	ldd	r30, Y+5	; 0x05
    a02e:	fe 81       	ldd	r31, Y+6	; 0x06
    a030:	ef 2b       	or	r30, r31
    a032:	59 f0       	breq	.+22     	; 0xa04a <mp_lexer_to_next+0x26e>
    a034:	c3 01       	movw	r24, r6
    a036:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a03a:	2d 81       	ldd	r18, Y+5	; 0x05
    a03c:	3e 81       	ldd	r19, Y+6	; 0x06
    a03e:	22 30       	cpi	r18, 0x02	; 2
    a040:	31 05       	cpc	r19, r1
    a042:	19 f4       	brne	.+6      	; 0xa04a <mp_lexer_to_next+0x26e>
    a044:	c3 01       	movw	r24, r6
    a046:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a04a:	d3 01       	movw	r26, r6
    a04c:	18 96       	adiw	r26, 0x08	; 8
    a04e:	8d 91       	ld	r24, X+
    a050:	9c 91       	ld	r25, X
    a052:	19 97       	sbiw	r26, 0x09	; 9
    a054:	82 97       	sbiw	r24, 0x22	; 34
    a056:	19 f4       	brne	.+6      	; 0xa05e <mp_lexer_to_next+0x282>
    a058:	b2 e2       	ldi	r27, 0x22	; 34
    a05a:	bd 83       	std	Y+5, r27	; 0x05
    a05c:	02 c0       	rjmp	.+4      	; 0xa062 <mp_lexer_to_next+0x286>
    a05e:	e7 e2       	ldi	r30, 0x27	; 39
    a060:	ed 83       	std	Y+5, r30	; 0x05
    a062:	c3 01       	movw	r24, r6
    a064:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a068:	d3 01       	movw	r26, r6
    a06a:	18 96       	adiw	r26, 0x08	; 8
    a06c:	6d 91       	ld	r22, X+
    a06e:	7c 91       	ld	r23, X
    a070:	19 97       	sbiw	r26, 0x09	; 9
    a072:	bd 81       	ldd	r27, Y+5	; 0x05
    a074:	ab 2e       	mov	r10, r27
    a076:	b1 2c       	mov	r11, r1
    a078:	6a 15       	cp	r22, r10
    a07a:	7b 05       	cpc	r23, r11
    a07c:	39 f4       	brne	.+14     	; 0xa08c <mp_lexer_to_next+0x2b0>
    a07e:	f3 01       	movw	r30, r6
    a080:	82 85       	ldd	r24, Z+10	; 0x0a
    a082:	93 85       	ldd	r25, Z+11	; 0x0b
    a084:	68 17       	cp	r22, r24
    a086:	79 07       	cpc	r23, r25
    a088:	09 f4       	brne	.+2      	; 0xa08c <mp_lexer_to_next+0x2b0>
    a08a:	08 c3       	rjmp	.+1552   	; 0xa69c <mp_lexer_to_next+0x8c0>
    a08c:	6f 3f       	cpi	r22, 0xFF	; 255
    a08e:	ff ef       	ldi	r31, 0xFF	; 255
    a090:	7f 07       	cpc	r23, r31
    a092:	09 f4       	brne	.+2      	; 0xa096 <mp_lexer_to_next+0x2ba>
    a094:	3c c1       	rjmp	.+632    	; 0xa30e <mp_lexer_to_next+0x532>
    a096:	c2 2c       	mov	r12, r2
    a098:	d3 2c       	mov	r13, r3
    a09a:	21 c1       	rjmp	.+578    	; 0xa2de <mp_lexer_to_next+0x502>
    a09c:	a6 16       	cp	r10, r22
    a09e:	b7 06       	cpc	r11, r23
    a0a0:	49 f4       	brne	.+18     	; 0xa0b4 <mp_lexer_to_next+0x2d8>
    a0a2:	2d 81       	ldd	r18, Y+5	; 0x05
    a0a4:	3e 81       	ldd	r19, Y+6	; 0x06
    a0a6:	2f 5f       	subi	r18, 0xFF	; 255
    a0a8:	3f 4f       	sbci	r19, 0xFF	; 255
    a0aa:	3e 83       	std	Y+6, r19	; 0x06
    a0ac:	2d 83       	std	Y+5, r18	; 0x05
    a0ae:	c2 01       	movw	r24, r4
    a0b0:	47 de       	rcall	.-882    	; 0x9d40 <vstr_add_byte>
    a0b2:	0a c1       	rjmp	.+532    	; 0xa2c8 <mp_lexer_to_next+0x4ec>
    a0b4:	6c 35       	cpi	r22, 0x5C	; 92
    a0b6:	71 05       	cpc	r23, r1
    a0b8:	09 f0       	breq	.+2      	; 0xa0bc <mp_lexer_to_next+0x2e0>
    a0ba:	fc c0       	rjmp	.+504    	; 0xa2b4 <mp_lexer_to_next+0x4d8>
    a0bc:	c3 01       	movw	r24, r6
    a0be:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a0c2:	d3 01       	movw	r26, r6
    a0c4:	18 96       	adiw	r26, 0x08	; 8
    a0c6:	0d 90       	ld	r0, X+
    a0c8:	bc 91       	ld	r27, X
    a0ca:	a0 2d       	mov	r26, r0
    a0cc:	be 83       	std	Y+6, r27	; 0x06
    a0ce:	ad 83       	std	Y+5, r26	; 0x05
    a0d0:	99 20       	and	r9, r9
    a0d2:	21 f0       	breq	.+8      	; 0xa0dc <mp_lexer_to_next+0x300>
    a0d4:	6c e5       	ldi	r22, 0x5C	; 92
    a0d6:	c2 01       	movw	r24, r4
    a0d8:	33 de       	rcall	.-922    	; 0x9d40 <vstr_add_byte>
    a0da:	d6 c0       	rjmp	.+428    	; 0xa288 <mp_lexer_to_next+0x4ac>
    a0dc:	ed 81       	ldd	r30, Y+5	; 0x05
    a0de:	fe 81       	ldd	r31, Y+6	; 0x06
    a0e0:	e2 36       	cpi	r30, 0x62	; 98
    a0e2:	f1 05       	cpc	r31, r1
    a0e4:	e9 f1       	breq	.+122    	; 0xa160 <mp_lexer_to_next+0x384>
    a0e6:	00 f5       	brcc	.+64     	; 0xa128 <mp_lexer_to_next+0x34c>
    a0e8:	ee 34       	cpi	r30, 0x4E	; 78
    a0ea:	f1 05       	cpc	r31, r1
    a0ec:	09 f4       	brne	.+2      	; 0xa0f0 <mp_lexer_to_next+0x314>
    a0ee:	82 c0       	rjmp	.+260    	; 0xa1f4 <mp_lexer_to_next+0x418>
    a0f0:	60 f4       	brcc	.+24     	; 0xa10a <mp_lexer_to_next+0x32e>
    a0f2:	e2 32       	cpi	r30, 0x22	; 34
    a0f4:	f1 05       	cpc	r31, r1
    a0f6:	09 f4       	brne	.+2      	; 0xa0fa <mp_lexer_to_next+0x31e>
    a0f8:	c7 c0       	rjmp	.+398    	; 0xa288 <mp_lexer_to_next+0x4ac>
    a0fa:	e7 32       	cpi	r30, 0x27	; 39
    a0fc:	f1 05       	cpc	r31, r1
    a0fe:	09 f4       	brne	.+2      	; 0xa102 <mp_lexer_to_next+0x326>
    a100:	c3 c0       	rjmp	.+390    	; 0xa288 <mp_lexer_to_next+0x4ac>
    a102:	3a 97       	sbiw	r30, 0x0a	; 10
    a104:	09 f4       	brne	.+2      	; 0xa108 <mp_lexer_to_next+0x32c>
    a106:	db c0       	rjmp	.+438    	; 0xa2be <mp_lexer_to_next+0x4e2>
    a108:	79 c0       	rjmp	.+242    	; 0xa1fc <mp_lexer_to_next+0x420>
    a10a:	2d 81       	ldd	r18, Y+5	; 0x05
    a10c:	3e 81       	ldd	r19, Y+6	; 0x06
    a10e:	2c 35       	cpi	r18, 0x5C	; 92
    a110:	31 05       	cpc	r19, r1
    a112:	09 f4       	brne	.+2      	; 0xa116 <mp_lexer_to_next+0x33a>
    a114:	b9 c0       	rjmp	.+370    	; 0xa288 <mp_lexer_to_next+0x4ac>
    a116:	21 36       	cpi	r18, 0x61	; 97
    a118:	31 05       	cpc	r19, r1
    a11a:	09 f4       	brne	.+2      	; 0xa11e <mp_lexer_to_next+0x342>
    a11c:	e7 c2       	rjmp	.+1486   	; 0xa6ec <mp_lexer_to_next+0x910>
    a11e:	25 35       	cpi	r18, 0x55	; 85
    a120:	31 05       	cpc	r19, r1
    a122:	09 f0       	breq	.+2      	; 0xa126 <mp_lexer_to_next+0x34a>
    a124:	6b c0       	rjmp	.+214    	; 0xa1fc <mp_lexer_to_next+0x420>
    a126:	2b c0       	rjmp	.+86     	; 0xa17e <mp_lexer_to_next+0x3a2>
    a128:	4d 81       	ldd	r20, Y+5	; 0x05
    a12a:	5e 81       	ldd	r21, Y+6	; 0x06
    a12c:	44 37       	cpi	r20, 0x74	; 116
    a12e:	51 05       	cpc	r21, r1
    a130:	09 f4       	brne	.+2      	; 0xa134 <mp_lexer_to_next+0x358>
    a132:	df c2       	rjmp	.+1470   	; 0xa6f2 <mp_lexer_to_next+0x916>
    a134:	58 f4       	brcc	.+22     	; 0xa14c <mp_lexer_to_next+0x370>
    a136:	4e 36       	cpi	r20, 0x6E	; 110
    a138:	51 05       	cpc	r21, r1
    a13a:	a9 f0       	breq	.+42     	; 0xa166 <mp_lexer_to_next+0x38a>
    a13c:	42 37       	cpi	r20, 0x72	; 114
    a13e:	51 05       	cpc	r21, r1
    a140:	d9 f0       	breq	.+54     	; 0xa178 <mp_lexer_to_next+0x39c>
    a142:	46 36       	cpi	r20, 0x66	; 102
    a144:	51 05       	cpc	r21, r1
    a146:	09 f0       	breq	.+2      	; 0xa14a <mp_lexer_to_next+0x36e>
    a148:	59 c0       	rjmp	.+178    	; 0xa1fc <mp_lexer_to_next+0x420>
    a14a:	13 c0       	rjmp	.+38     	; 0xa172 <mp_lexer_to_next+0x396>
    a14c:	6d 81       	ldd	r22, Y+5	; 0x05
    a14e:	7e 81       	ldd	r23, Y+6	; 0x06
    a150:	66 37       	cpi	r22, 0x76	; 118
    a152:	71 05       	cpc	r23, r1
    a154:	59 f0       	breq	.+22     	; 0xa16c <mp_lexer_to_next+0x390>
    a156:	98 f0       	brcs	.+38     	; 0xa17e <mp_lexer_to_next+0x3a2>
    a158:	68 37       	cpi	r22, 0x78	; 120
    a15a:	71 05       	cpc	r23, r1
    a15c:	c1 f0       	breq	.+48     	; 0xa18e <mp_lexer_to_next+0x3b2>
    a15e:	4e c0       	rjmp	.+156    	; 0xa1fc <mp_lexer_to_next+0x420>
    a160:	78 e0       	ldi	r23, 0x08	; 8
    a162:	7d 83       	std	Y+5, r23	; 0x05
    a164:	9b c0       	rjmp	.+310    	; 0xa29c <mp_lexer_to_next+0x4c0>
    a166:	8a e0       	ldi	r24, 0x0A	; 10
    a168:	8d 83       	std	Y+5, r24	; 0x05
    a16a:	98 c0       	rjmp	.+304    	; 0xa29c <mp_lexer_to_next+0x4c0>
    a16c:	9b e0       	ldi	r25, 0x0B	; 11
    a16e:	9d 83       	std	Y+5, r25	; 0x05
    a170:	95 c0       	rjmp	.+298    	; 0xa29c <mp_lexer_to_next+0x4c0>
    a172:	ac e0       	ldi	r26, 0x0C	; 12
    a174:	ad 83       	std	Y+5, r26	; 0x05
    a176:	92 c0       	rjmp	.+292    	; 0xa29c <mp_lexer_to_next+0x4c0>
    a178:	bd e0       	ldi	r27, 0x0D	; 13
    a17a:	bd 83       	std	Y+5, r27	; 0x05
    a17c:	8f c0       	rjmp	.+286    	; 0xa29c <mp_lexer_to_next+0x4c0>
    a17e:	f3 01       	movw	r30, r6
    a180:	80 a1       	ldd	r24, Z+32	; 0x20
    a182:	8b 30       	cpi	r24, 0x0B	; 11
    a184:	21 f4       	brne	.+8      	; 0xa18e <mp_lexer_to_next+0x3b2>
    a186:	6c e5       	ldi	r22, 0x5C	; 92
    a188:	c2 01       	movw	r24, r4
    a18a:	da dd       	rcall	.-1100   	; 0x9d40 <vstr_add_byte>
    a18c:	7d c0       	rjmp	.+250    	; 0xa288 <mp_lexer_to_next+0x4ac>
    a18e:	2d 81       	ldd	r18, Y+5	; 0x05
    a190:	3e 81       	ldd	r19, Y+6	; 0x06
    a192:	28 37       	cpi	r18, 0x78	; 120
    a194:	31 05       	cpc	r19, r1
    a196:	09 f4       	brne	.+2      	; 0xa19a <mp_lexer_to_next+0x3be>
    a198:	97 c2       	rjmp	.+1326   	; 0xa6c8 <mp_lexer_to_next+0x8ec>
    a19a:	25 37       	cpi	r18, 0x75	; 117
    a19c:	31 05       	cpc	r19, r1
    a19e:	09 f4       	brne	.+2      	; 0xa1a2 <mp_lexer_to_next+0x3c6>
    a1a0:	96 c2       	rjmp	.+1324   	; 0xa6ce <mp_lexer_to_next+0x8f2>
    a1a2:	98 e0       	ldi	r25, 0x08	; 8
    a1a4:	80 e0       	ldi	r24, 0x00	; 0
    a1a6:	95 c2       	rjmp	.+1322   	; 0xa6d2 <mp_lexer_to_next+0x8f6>
    a1a8:	c3 01       	movw	r24, r6
    a1aa:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a1ae:	d3 01       	movw	r26, r6
    a1b0:	18 96       	adiw	r26, 0x08	; 8
    a1b2:	0d 91       	ld	r16, X+
    a1b4:	1c 91       	ld	r17, X
    a1b6:	19 97       	sbiw	r26, 0x09	; 9
    a1b8:	c8 01       	movw	r24, r16
    a1ba:	0e 94 c9 10 	call	0x2192	; 0x2192 <unichar_isxdigit>
    a1be:	88 23       	and	r24, r24
    a1c0:	09 f4       	brne	.+2      	; 0xa1c4 <mp_lexer_to_next+0x3e8>
    a1c2:	8e c2       	rjmp	.+1308   	; 0xa6e0 <mp_lexer_to_next+0x904>
    a1c4:	ed 81       	ldd	r30, Y+5	; 0x05
    a1c6:	fe 81       	ldd	r31, Y+6	; 0x06
    a1c8:	e2 95       	swap	r30
    a1ca:	f2 95       	swap	r31
    a1cc:	f0 7f       	andi	r31, 0xF0	; 240
    a1ce:	fe 27       	eor	r31, r30
    a1d0:	e0 7f       	andi	r30, 0xF0	; 240
    a1d2:	fe 27       	eor	r31, r30
    a1d4:	fe 83       	std	Y+6, r31	; 0x06
    a1d6:	ed 83       	std	Y+5, r30	; 0x05
    a1d8:	c8 01       	movw	r24, r16
    a1da:	0e 94 d7 10 	call	0x21ae	; 0x21ae <unichar_xdigit_value>
    a1de:	2d 81       	ldd	r18, Y+5	; 0x05
    a1e0:	3e 81       	ldd	r19, Y+6	; 0x06
    a1e2:	28 0f       	add	r18, r24
    a1e4:	39 1f       	adc	r19, r25
    a1e6:	3e 83       	std	Y+6, r19	; 0x06
    a1e8:	2d 83       	std	Y+5, r18	; 0x05
    a1ea:	31 e0       	ldi	r19, 0x01	; 1
    a1ec:	e3 1a       	sub	r14, r19
    a1ee:	f1 08       	sbc	r15, r1
    a1f0:	d9 f6       	brne	.-74     	; 0xa1a8 <mp_lexer_to_next+0x3cc>
    a1f2:	4a c0       	rjmp	.+148    	; 0xa288 <mp_lexer_to_next+0x4ac>
    a1f4:	82 ef       	ldi	r24, 0xF2	; 242
    a1f6:	97 e0       	ldi	r25, 0x07	; 7
    a1f8:	0e 94 ce 2a 	call	0x559c	; 0x559c <mp_raise_NotImplementedError>
    a1fc:	0d 81       	ldd	r16, Y+5	; 0x05
    a1fe:	1e 81       	ldd	r17, Y+6	; 0x06
    a200:	00 53       	subi	r16, 0x30	; 48
    a202:	11 09       	sbc	r17, r1
    a204:	08 30       	cpi	r16, 0x08	; 8
    a206:	11 05       	cpc	r17, r1
    a208:	c8 f5       	brcc	.+114    	; 0xa27c <mp_lexer_to_next+0x4a0>
    a20a:	d3 01       	movw	r26, r6
    a20c:	1a 96       	adiw	r26, 0x0a	; 10
    a20e:	8d 91       	ld	r24, X+
    a210:	9c 91       	ld	r25, X
    a212:	1b 97       	sbiw	r26, 0x0b	; 11
    a214:	c0 97       	sbiw	r24, 0x30	; 48
    a216:	08 97       	sbiw	r24, 0x08	; 8
    a218:	a8 f5       	brcc	.+106    	; 0xa284 <mp_lexer_to_next+0x4a8>
    a21a:	c3 01       	movw	r24, r6
    a21c:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a220:	f8 01       	movw	r30, r16
    a222:	ee 0f       	add	r30, r30
    a224:	ff 1f       	adc	r31, r31
    a226:	ee 0f       	add	r30, r30
    a228:	ff 1f       	adc	r31, r31
    a22a:	ee 0f       	add	r30, r30
    a22c:	ff 1f       	adc	r31, r31
    a22e:	d3 01       	movw	r26, r6
    a230:	18 96       	adiw	r26, 0x08	; 8
    a232:	8d 91       	ld	r24, X+
    a234:	9c 91       	ld	r25, X
    a236:	19 97       	sbiw	r26, 0x09	; 9
    a238:	c0 97       	sbiw	r24, 0x30	; 48
    a23a:	e8 0f       	add	r30, r24
    a23c:	f9 1f       	adc	r31, r25
    a23e:	fe 83       	std	Y+6, r31	; 0x06
    a240:	ed 83       	std	Y+5, r30	; 0x05
    a242:	1a 96       	adiw	r26, 0x0a	; 10
    a244:	8d 91       	ld	r24, X+
    a246:	9c 91       	ld	r25, X
    a248:	1b 97       	sbiw	r26, 0x0b	; 11
    a24a:	c0 97       	sbiw	r24, 0x30	; 48
    a24c:	08 97       	sbiw	r24, 0x08	; 8
    a24e:	e0 f4       	brcc	.+56     	; 0xa288 <mp_lexer_to_next+0x4ac>
    a250:	c3 01       	movw	r24, r6
    a252:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a256:	ed 81       	ldd	r30, Y+5	; 0x05
    a258:	fe 81       	ldd	r31, Y+6	; 0x06
    a25a:	ee 0f       	add	r30, r30
    a25c:	ff 1f       	adc	r31, r31
    a25e:	ee 0f       	add	r30, r30
    a260:	ff 1f       	adc	r31, r31
    a262:	ee 0f       	add	r30, r30
    a264:	ff 1f       	adc	r31, r31
    a266:	d3 01       	movw	r26, r6
    a268:	18 96       	adiw	r26, 0x08	; 8
    a26a:	8d 91       	ld	r24, X+
    a26c:	9c 91       	ld	r25, X
    a26e:	19 97       	sbiw	r26, 0x09	; 9
    a270:	c0 97       	sbiw	r24, 0x30	; 48
    a272:	e8 0f       	add	r30, r24
    a274:	f9 1f       	adc	r31, r25
    a276:	fe 83       	std	Y+6, r31	; 0x06
    a278:	ed 83       	std	Y+5, r30	; 0x05
    a27a:	06 c0       	rjmp	.+12     	; 0xa288 <mp_lexer_to_next+0x4ac>
    a27c:	6c e5       	ldi	r22, 0x5C	; 92
    a27e:	c2 01       	movw	r24, r4
    a280:	5f dd       	rcall	.-1346   	; 0x9d40 <vstr_add_byte>
    a282:	02 c0       	rjmp	.+4      	; 0xa288 <mp_lexer_to_next+0x4ac>
    a284:	1e 83       	std	Y+6, r17	; 0x06
    a286:	0d 83       	std	Y+5, r16	; 0x05
    a288:	ed 81       	ldd	r30, Y+5	; 0x05
    a28a:	fe 81       	ldd	r31, Y+6	; 0x06
    a28c:	ef 3f       	cpi	r30, 0xFF	; 255
    a28e:	2f ef       	ldi	r18, 0xFF	; 255
    a290:	f2 07       	cpc	r31, r18
    a292:	c1 f0       	breq	.+48     	; 0xa2c4 <mp_lexer_to_next+0x4e8>
    a294:	ef 3f       	cpi	r30, 0xFF	; 255
    a296:	f1 05       	cpc	r31, r1
    a298:	09 f0       	breq	.+2      	; 0xa29c <mp_lexer_to_next+0x4c0>
    a29a:	30 f4       	brcc	.+12     	; 0xa2a8 <mp_lexer_to_next+0x4cc>
    a29c:	6d 81       	ldd	r22, Y+5	; 0x05
    a29e:	c2 01       	movw	r24, r4
    a2a0:	4f dd       	rcall	.-1378   	; 0x9d40 <vstr_add_byte>
    a2a2:	1e 82       	std	Y+6, r1	; 0x06
    a2a4:	1d 82       	std	Y+5, r1	; 0x05
    a2a6:	10 c0       	rjmp	.+32     	; 0xa2c8 <mp_lexer_to_next+0x4ec>
    a2a8:	d3 01       	movw	r26, r6
    a2aa:	90 96       	adiw	r26, 0x20	; 32
    a2ac:	8c 92       	st	X, r8
    a2ae:	1e 82       	std	Y+6, r1	; 0x06
    a2b0:	1d 82       	std	Y+5, r1	; 0x05
    a2b2:	0a c0       	rjmp	.+20     	; 0xa2c8 <mp_lexer_to_next+0x4ec>
    a2b4:	c2 01       	movw	r24, r4
    a2b6:	44 dd       	rcall	.-1400   	; 0x9d40 <vstr_add_byte>
    a2b8:	1e 82       	std	Y+6, r1	; 0x06
    a2ba:	1d 82       	std	Y+5, r1	; 0x05
    a2bc:	05 c0       	rjmp	.+10     	; 0xa2c8 <mp_lexer_to_next+0x4ec>
    a2be:	1e 82       	std	Y+6, r1	; 0x06
    a2c0:	1d 82       	std	Y+5, r1	; 0x05
    a2c2:	02 c0       	rjmp	.+4      	; 0xa2c8 <mp_lexer_to_next+0x4ec>
    a2c4:	1e 82       	std	Y+6, r1	; 0x06
    a2c6:	1d 82       	std	Y+5, r1	; 0x05
    a2c8:	c3 01       	movw	r24, r6
    a2ca:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a2ce:	f3 01       	movw	r30, r6
    a2d0:	60 85       	ldd	r22, Z+8	; 0x08
    a2d2:	71 85       	ldd	r23, Z+9	; 0x09
    a2d4:	6f 3f       	cpi	r22, 0xFF	; 255
    a2d6:	ff ef       	ldi	r31, 0xFF	; 255
    a2d8:	7f 07       	cpc	r23, r31
    a2da:	29 f4       	brne	.+10     	; 0xa2e6 <mp_lexer_to_next+0x50a>
    a2dc:	12 c0       	rjmp	.+36     	; 0xa302 <mp_lexer_to_next+0x526>
    a2de:	1e 82       	std	Y+6, r1	; 0x06
    a2e0:	1d 82       	std	Y+5, r1	; 0x05
    a2e2:	88 24       	eor	r8, r8
    a2e4:	83 94       	inc	r8
    a2e6:	52 e0       	ldi	r21, 0x02	; 2
    a2e8:	c5 16       	cp	r12, r21
    a2ea:	d1 04       	cpc	r13, r1
    a2ec:	18 f4       	brcc	.+6      	; 0xa2f4 <mp_lexer_to_next+0x518>
    a2ee:	6a 30       	cpi	r22, 0x0A	; 10
    a2f0:	71 05       	cpc	r23, r1
    a2f2:	39 f0       	breq	.+14     	; 0xa302 <mp_lexer_to_next+0x526>
    a2f4:	8d 81       	ldd	r24, Y+5	; 0x05
    a2f6:	9e 81       	ldd	r25, Y+6	; 0x06
    a2f8:	8c 15       	cp	r24, r12
    a2fa:	9d 05       	cpc	r25, r13
    a2fc:	08 f4       	brcc	.+2      	; 0xa300 <mp_lexer_to_next+0x524>
    a2fe:	ce ce       	rjmp	.-612    	; 0xa09c <mp_lexer_to_next+0x2c0>
    a300:	0f c0       	rjmp	.+30     	; 0xa320 <mp_lexer_to_next+0x544>
    a302:	ed 81       	ldd	r30, Y+5	; 0x05
    a304:	fe 81       	ldd	r31, Y+6	; 0x06
    a306:	ec 15       	cp	r30, r12
    a308:	fd 05       	cpc	r31, r13
    a30a:	30 f0       	brcs	.+12     	; 0xa318 <mp_lexer_to_next+0x53c>
    a30c:	09 c0       	rjmp	.+18     	; 0xa320 <mp_lexer_to_next+0x544>
    a30e:	1e 82       	std	Y+6, r1	; 0x06
    a310:	1d 82       	std	Y+5, r1	; 0x05
    a312:	02 c0       	rjmp	.+4      	; 0xa318 <mp_lexer_to_next+0x53c>
    a314:	1e 82       	std	Y+6, r1	; 0x06
    a316:	1d 82       	std	Y+5, r1	; 0x05
    a318:	83 e0       	ldi	r24, 0x03	; 3
    a31a:	d3 01       	movw	r26, r6
    a31c:	90 96       	adiw	r26, 0x20	; 32
    a31e:	8c 93       	st	X, r24
    a320:	6d 81       	ldd	r22, Y+5	; 0x05
    a322:	7e 81       	ldd	r23, Y+6	; 0x06
    a324:	c2 01       	movw	r24, r4
    a326:	0e 94 99 0c 	call	0x1932	; 0x1932 <vstr_cut_tail_bytes>
    a32a:	61 e0       	ldi	r22, 0x01	; 1
    a32c:	c3 01       	movw	r24, r6
    a32e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <skip_whitespace>
    a332:	c3 01       	movw	r24, r6
    a334:	0e 94 a8 05 	call	0xb50	; 0xb50 <is_string_or_bytes>
    a338:	81 11       	cpse	r24, r1
    a33a:	30 ce       	rjmp	.-928    	; 0x9f9c <mp_lexer_to_next+0x1c0>
    a33c:	2c c2       	rjmp	.+1112   	; 0xa796 <mp_lexer_to_next+0x9ba>
    a33e:	8d 81       	ldd	r24, Y+5	; 0x05
    a340:	9e 81       	ldd	r25, Y+6	; 0x06
    a342:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <unichar_isalpha>
    a346:	81 11       	cpse	r24, r1
    a348:	09 c0       	rjmp	.+18     	; 0xa35c <mp_lexer_to_next+0x580>
    a34a:	ed 81       	ldd	r30, Y+5	; 0x05
    a34c:	fe 81       	ldd	r31, Y+6	; 0x06
    a34e:	ef 35       	cpi	r30, 0x5F	; 95
    a350:	f1 05       	cpc	r31, r1
    a352:	21 f0       	breq	.+8      	; 0xa35c <mp_lexer_to_next+0x580>
    a354:	e0 38       	cpi	r30, 0x80	; 128
    a356:	f1 05       	cpc	r31, r1
    a358:	08 f4       	brcc	.+2      	; 0xa35c <mp_lexer_to_next+0x580>
    a35a:	6a c0       	rjmp	.+212    	; 0xa430 <mp_lexer_to_next+0x654>
    a35c:	87 e0       	ldi	r24, 0x07	; 7
    a35e:	d3 01       	movw	r26, r6
    a360:	90 96       	adiw	r26, 0x20	; 32
    a362:	8c 93       	st	X, r24
    a364:	83 01       	movw	r16, r6
    a366:	0f 5d       	subi	r16, 0xDF	; 223
    a368:	1f 4f       	sbci	r17, 0xFF	; 255
    a36a:	6d 81       	ldd	r22, Y+5	; 0x05
    a36c:	c8 01       	movw	r24, r16
    a36e:	e8 dc       	rcall	.-1584   	; 0x9d40 <vstr_add_byte>
    a370:	c3 01       	movw	r24, r6
    a372:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a376:	f3 01       	movw	r30, r6
    a378:	00 84       	ldd	r0, Z+8	; 0x08
    a37a:	f1 85       	ldd	r31, Z+9	; 0x09
    a37c:	e0 2d       	mov	r30, r0
    a37e:	fe 83       	std	Y+6, r31	; 0x06
    a380:	ed 83       	std	Y+5, r30	; 0x05
    a382:	31 96       	adiw	r30, 0x01	; 1
    a384:	89 f4       	brne	.+34     	; 0xa3a8 <mp_lexer_to_next+0x5cc>
    a386:	23 c0       	rjmp	.+70     	; 0xa3ce <mp_lexer_to_next+0x5f2>
    a388:	6d 81       	ldd	r22, Y+5	; 0x05
    a38a:	c8 01       	movw	r24, r16
    a38c:	d9 dc       	rcall	.-1614   	; 0x9d40 <vstr_add_byte>
    a38e:	c3 01       	movw	r24, r6
    a390:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a394:	d3 01       	movw	r26, r6
    a396:	18 96       	adiw	r26, 0x08	; 8
    a398:	0d 90       	ld	r0, X+
    a39a:	bc 91       	ld	r27, X
    a39c:	a0 2d       	mov	r26, r0
    a39e:	be 83       	std	Y+6, r27	; 0x06
    a3a0:	ad 83       	std	Y+5, r26	; 0x05
    a3a2:	11 96       	adiw	r26, 0x01	; 1
    a3a4:	a1 f0       	breq	.+40     	; 0xa3ce <mp_lexer_to_next+0x5f2>
    a3a6:	00 c0       	rjmp	.+0      	; 0xa3a8 <mp_lexer_to_next+0x5cc>
    a3a8:	8d 81       	ldd	r24, Y+5	; 0x05
    a3aa:	9e 81       	ldd	r25, Y+6	; 0x06
    a3ac:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <unichar_isalpha>
    a3b0:	81 11       	cpse	r24, r1
    a3b2:	ea cf       	rjmp	.-44     	; 0xa388 <mp_lexer_to_next+0x5ac>
    a3b4:	4d 81       	ldd	r20, Y+5	; 0x05
    a3b6:	5e 81       	ldd	r21, Y+6	; 0x06
    a3b8:	4f 35       	cpi	r20, 0x5F	; 95
    a3ba:	51 05       	cpc	r21, r1
    a3bc:	29 f3       	breq	.-54     	; 0xa388 <mp_lexer_to_next+0x5ac>
    a3be:	40 38       	cpi	r20, 0x80	; 128
    a3c0:	51 05       	cpc	r21, r1
    a3c2:	10 f7       	brcc	.-60     	; 0xa388 <mp_lexer_to_next+0x5ac>
    a3c4:	ca 01       	movw	r24, r20
    a3c6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <unichar_isdigit>
    a3ca:	81 11       	cpse	r24, r1
    a3cc:	dd cf       	rjmp	.-70     	; 0xa388 <mp_lexer_to_next+0x5ac>
    a3ce:	c8 01       	movw	r24, r16
    a3d0:	5d dc       	rcall	.-1862   	; 0x9c8c <vstr_null_terminated_str>
    a3d2:	7c 01       	movw	r14, r24
    a3d4:	0b e2       	ldi	r16, 0x2B	; 43
    a3d6:	19 e2       	ldi	r17, 0x29	; 41
    a3d8:	1e 82       	std	Y+6, r1	; 0x06
    a3da:	1d 82       	std	Y+5, r1	; 0x05
    a3dc:	d8 01       	movw	r26, r16
    a3de:	6d 91       	ld	r22, X+
    a3e0:	7d 91       	ld	r23, X+
    a3e2:	8d 01       	movw	r16, r26
    a3e4:	c7 01       	movw	r24, r14
    a3e6:	0e 94 be c2 	call	0x1857c	; 0x1857c <strcmp>
    a3ea:	00 97       	sbiw	r24, 0x00	; 0
    a3ec:	b1 f4       	brne	.+44     	; 0xa41a <mp_lexer_to_next+0x63e>
    a3ee:	ed 81       	ldd	r30, Y+5	; 0x05
    a3f0:	fe 81       	ldd	r31, Y+6	; 0x06
    a3f2:	e3 5f       	subi	r30, 0xF3	; 243
    a3f4:	d3 01       	movw	r26, r6
    a3f6:	90 96       	adiw	r26, 0x20	; 32
    a3f8:	ec 93       	st	X, r30
    a3fa:	e0 31       	cpi	r30, 0x10	; 16
    a3fc:	09 f0       	breq	.+2      	; 0xa400 <mp_lexer_to_next+0x624>
    a3fe:	cb c1       	rjmp	.+918    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a400:	80 91 a8 6b 	lds	r24, 0x6BA8	; 0x806ba8 <mp_state_ctx+0x4e>
    a404:	90 91 a9 6b 	lds	r25, 0x6BA9	; 0x806ba9 <mp_state_ctx+0x4f>
    a408:	89 2b       	or	r24, r25
    a40a:	11 f0       	breq	.+4      	; 0xa410 <mp_lexer_to_next+0x634>
    a40c:	8d e0       	ldi	r24, 0x0D	; 13
    a40e:	01 c0       	rjmp	.+2      	; 0xa412 <mp_lexer_to_next+0x636>
    a410:	8f e0       	ldi	r24, 0x0F	; 15
    a412:	d3 01       	movw	r26, r6
    a414:	90 96       	adiw	r26, 0x20	; 32
    a416:	8c 93       	st	X, r24
    a418:	be c1       	rjmp	.+892    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a41a:	99 23       	and	r25, r25
    a41c:	0c f4       	brge	.+2      	; 0xa420 <mp_lexer_to_next+0x644>
    a41e:	bb c1       	rjmp	.+886    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a420:	ed 81       	ldd	r30, Y+5	; 0x05
    a422:	fe 81       	ldd	r31, Y+6	; 0x06
    a424:	31 96       	adiw	r30, 0x01	; 1
    a426:	fe 83       	std	Y+6, r31	; 0x06
    a428:	ed 83       	std	Y+5, r30	; 0x05
    a42a:	b2 97       	sbiw	r30, 0x22	; 34
    a42c:	b9 f6       	brne	.-82     	; 0xa3dc <mp_lexer_to_next+0x600>
    a42e:	b3 c1       	rjmp	.+870    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a430:	8d 81       	ldd	r24, Y+5	; 0x05
    a432:	9e 81       	ldd	r25, Y+6	; 0x06
    a434:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <unichar_isdigit>
    a438:	81 11       	cpse	r24, r1
    a43a:	26 c0       	rjmp	.+76     	; 0xa488 <mp_lexer_to_next+0x6ac>
    a43c:	2d 81       	ldd	r18, Y+5	; 0x05
    a43e:	3e 81       	ldd	r19, Y+6	; 0x06
    a440:	2e 32       	cpi	r18, 0x2E	; 46
    a442:	31 05       	cpc	r19, r1
    a444:	71 f0       	breq	.+28     	; 0xa462 <mp_lexer_to_next+0x686>
    a446:	28 32       	cpi	r18, 0x28	; 40
    a448:	31 05       	cpc	r19, r1
    a44a:	09 f4       	brne	.+2      	; 0xa44e <mp_lexer_to_next+0x672>
    a44c:	55 c1       	rjmp	.+682    	; 0xa6f8 <mp_lexer_to_next+0x91c>
    a44e:	18 e2       	ldi	r17, 0x28	; 40
    a450:	e1 2c       	mov	r14, r1
    a452:	f1 2c       	mov	r15, r1
    a454:	0f 2e       	mov	r0, r31
    a456:	fd ea       	ldi	r31, 0xAD	; 173
    a458:	cf 2e       	mov	r12, r31
    a45a:	f7 e0       	ldi	r31, 0x07	; 7
    a45c:	df 2e       	mov	r13, r31
    a45e:	f0 2d       	mov	r31, r0
    a460:	a2 c0       	rjmp	.+324    	; 0xa5a6 <mp_lexer_to_next+0x7ca>
    a462:	d3 01       	movw	r26, r6
    a464:	1a 96       	adiw	r26, 0x0a	; 10
    a466:	8d 91       	ld	r24, X+
    a468:	9c 91       	ld	r25, X
    a46a:	1b 97       	sbiw	r26, 0x0b	; 11
    a46c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <unichar_isdigit>
    a470:	81 11       	cpse	r24, r1
    a472:	0f c0       	rjmp	.+30     	; 0xa492 <mp_lexer_to_next+0x6b6>
    a474:	18 e2       	ldi	r17, 0x28	; 40
    a476:	e1 2c       	mov	r14, r1
    a478:	f1 2c       	mov	r15, r1
    a47a:	0f 2e       	mov	r0, r31
    a47c:	fd ea       	ldi	r31, 0xAD	; 173
    a47e:	cf 2e       	mov	r12, r31
    a480:	f7 e0       	ldi	r31, 0x07	; 7
    a482:	df 2e       	mov	r13, r31
    a484:	f0 2d       	mov	r31, r0
    a486:	8f c0       	rjmp	.+286    	; 0xa5a6 <mp_lexer_to_next+0x7ca>
    a488:	2d 81       	ldd	r18, Y+5	; 0x05
    a48a:	3e 81       	ldd	r19, Y+6	; 0x06
    a48c:	2e 32       	cpi	r18, 0x2E	; 46
    a48e:	31 05       	cpc	r19, r1
    a490:	31 f4       	brne	.+12     	; 0xa49e <mp_lexer_to_next+0x6c2>
    a492:	89 e0       	ldi	r24, 0x09	; 9
    a494:	d3 01       	movw	r26, r6
    a496:	90 96       	adiw	r26, 0x20	; 32
    a498:	8c 93       	st	X, r24
    a49a:	10 e0       	ldi	r17, 0x00	; 0
    a49c:	1d c0       	rjmp	.+58     	; 0xa4d8 <mp_lexer_to_next+0x6fc>
    a49e:	88 e0       	ldi	r24, 0x08	; 8
    a4a0:	f3 01       	movw	r30, r6
    a4a2:	80 a3       	std	Z+32, r24	; 0x20
    a4a4:	2d 81       	ldd	r18, Y+5	; 0x05
    a4a6:	3e 81       	ldd	r19, Y+6	; 0x06
    a4a8:	20 33       	cpi	r18, 0x30	; 48
    a4aa:	31 05       	cpc	r19, r1
    a4ac:	a1 f4       	brne	.+40     	; 0xa4d6 <mp_lexer_to_next+0x6fa>
    a4ae:	82 85       	ldd	r24, Z+10	; 0x0a
    a4b0:	93 85       	ldd	r25, Z+11	; 0x0b
    a4b2:	80 62       	ori	r24, 0x20	; 32
    a4b4:	82 36       	cpi	r24, 0x62	; 98
    a4b6:	91 05       	cpc	r25, r1
    a4b8:	49 f0       	breq	.+18     	; 0xa4cc <mp_lexer_to_next+0x6f0>
    a4ba:	8f 36       	cpi	r24, 0x6F	; 111
    a4bc:	91 05       	cpc	r25, r1
    a4be:	41 f0       	breq	.+16     	; 0xa4d0 <mp_lexer_to_next+0x6f4>
    a4c0:	11 e0       	ldi	r17, 0x01	; 1
    a4c2:	88 37       	cpi	r24, 0x78	; 120
    a4c4:	91 05       	cpc	r25, r1
    a4c6:	29 f0       	breq	.+10     	; 0xa4d2 <mp_lexer_to_next+0x6f6>
    a4c8:	10 e0       	ldi	r17, 0x00	; 0
    a4ca:	03 c0       	rjmp	.+6      	; 0xa4d2 <mp_lexer_to_next+0x6f6>
    a4cc:	11 e0       	ldi	r17, 0x01	; 1
    a4ce:	01 c0       	rjmp	.+2      	; 0xa4d2 <mp_lexer_to_next+0x6f6>
    a4d0:	11 e0       	ldi	r17, 0x01	; 1
    a4d2:	11 70       	andi	r17, 0x01	; 1
    a4d4:	01 c0       	rjmp	.+2      	; 0xa4d8 <mp_lexer_to_next+0x6fc>
    a4d6:	10 e0       	ldi	r17, 0x00	; 0
    a4d8:	73 01       	movw	r14, r6
    a4da:	31 e2       	ldi	r19, 0x21	; 33
    a4dc:	e3 0e       	add	r14, r19
    a4de:	f1 1c       	adc	r15, r1
    a4e0:	6d 81       	ldd	r22, Y+5	; 0x05
    a4e2:	c7 01       	movw	r24, r14
    a4e4:	2d dc       	rcall	.-1958   	; 0x9d40 <vstr_add_byte>
    a4e6:	c3 01       	movw	r24, r6
    a4e8:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a4ec:	09 e0       	ldi	r16, 0x09	; 9
    a4ee:	50 c0       	rjmp	.+160    	; 0xa590 <mp_lexer_to_next+0x7b4>
    a4f0:	11 11       	cpse	r17, r1
    a4f2:	1e c0       	rjmp	.+60     	; 0xa530 <mp_lexer_to_next+0x754>
    a4f4:	8d 81       	ldd	r24, Y+5	; 0x05
    a4f6:	9e 81       	ldd	r25, Y+6	; 0x06
    a4f8:	8f 7d       	andi	r24, 0xDF	; 223
    a4fa:	85 34       	cpi	r24, 0x45	; 69
    a4fc:	91 05       	cpc	r25, r1
    a4fe:	c1 f4       	brne	.+48     	; 0xa530 <mp_lexer_to_next+0x754>
    a500:	d3 01       	movw	r26, r6
    a502:	90 96       	adiw	r26, 0x20	; 32
    a504:	0c 93       	st	X, r16
    a506:	65 e6       	ldi	r22, 0x65	; 101
    a508:	c7 01       	movw	r24, r14
    a50a:	1a dc       	rcall	.-1996   	; 0x9d40 <vstr_add_byte>
    a50c:	c3 01       	movw	r24, r6
    a50e:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a512:	f3 01       	movw	r30, r6
    a514:	60 85       	ldd	r22, Z+8	; 0x08
    a516:	71 85       	ldd	r23, Z+9	; 0x09
    a518:	6b 32       	cpi	r22, 0x2B	; 43
    a51a:	71 05       	cpc	r23, r1
    a51c:	19 f0       	breq	.+6      	; 0xa524 <mp_lexer_to_next+0x748>
    a51e:	6d 32       	cpi	r22, 0x2D	; 45
    a520:	71 05       	cpc	r23, r1
    a522:	b1 f5       	brne	.+108    	; 0xa590 <mp_lexer_to_next+0x7b4>
    a524:	c7 01       	movw	r24, r14
    a526:	0c dc       	rcall	.-2024   	; 0x9d40 <vstr_add_byte>
    a528:	c3 01       	movw	r24, r6
    a52a:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a52e:	30 c0       	rjmp	.+96     	; 0xa590 <mp_lexer_to_next+0x7b4>
    a530:	8d 81       	ldd	r24, Y+5	; 0x05
    a532:	9e 81       	ldd	r25, Y+6	; 0x06
    a534:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <unichar_isalpha>
    a538:	81 11       	cpse	r24, r1
    a53a:	0c c0       	rjmp	.+24     	; 0xa554 <mp_lexer_to_next+0x778>
    a53c:	8d 81       	ldd	r24, Y+5	; 0x05
    a53e:	9e 81       	ldd	r25, Y+6	; 0x06
    a540:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <unichar_isdigit>
    a544:	81 11       	cpse	r24, r1
    a546:	06 c0       	rjmp	.+12     	; 0xa554 <mp_lexer_to_next+0x778>
    a548:	2d 81       	ldd	r18, Y+5	; 0x05
    a54a:	3e 81       	ldd	r19, Y+6	; 0x06
    a54c:	2e 32       	cpi	r18, 0x2E	; 46
    a54e:	31 05       	cpc	r19, r1
    a550:	61 f0       	breq	.+24     	; 0xa56a <mp_lexer_to_next+0x78e>
    a552:	15 c0       	rjmp	.+42     	; 0xa57e <mp_lexer_to_next+0x7a2>
    a554:	4d 81       	ldd	r20, Y+5	; 0x05
    a556:	5e 81       	ldd	r21, Y+6	; 0x06
    a558:	4e 32       	cpi	r20, 0x2E	; 46
    a55a:	51 05       	cpc	r21, r1
    a55c:	31 f0       	breq	.+12     	; 0xa56a <mp_lexer_to_next+0x78e>
    a55e:	4a 36       	cpi	r20, 0x6A	; 106
    a560:	51 05       	cpc	r21, r1
    a562:	19 f0       	breq	.+6      	; 0xa56a <mp_lexer_to_next+0x78e>
    a564:	4a 34       	cpi	r20, 0x4A	; 74
    a566:	51 05       	cpc	r21, r1
    a568:	19 f4       	brne	.+6      	; 0xa570 <mp_lexer_to_next+0x794>
    a56a:	d3 01       	movw	r26, r6
    a56c:	90 96       	adiw	r26, 0x20	; 32
    a56e:	0c 93       	st	X, r16
    a570:	6d 81       	ldd	r22, Y+5	; 0x05
    a572:	c7 01       	movw	r24, r14
    a574:	e5 db       	rcall	.-2102   	; 0x9d40 <vstr_add_byte>
    a576:	c3 01       	movw	r24, r6
    a578:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a57c:	09 c0       	rjmp	.+18     	; 0xa590 <mp_lexer_to_next+0x7b4>
    a57e:	ed 81       	ldd	r30, Y+5	; 0x05
    a580:	fe 81       	ldd	r31, Y+6	; 0x06
    a582:	ef 35       	cpi	r30, 0x5F	; 95
    a584:	f1 05       	cpc	r31, r1
    a586:	09 f0       	breq	.+2      	; 0xa58a <mp_lexer_to_next+0x7ae>
    a588:	06 c1       	rjmp	.+524    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a58a:	c3 01       	movw	r24, r6
    a58c:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a590:	d3 01       	movw	r26, r6
    a592:	18 96       	adiw	r26, 0x08	; 8
    a594:	0d 90       	ld	r0, X+
    a596:	bc 91       	ld	r27, X
    a598:	a0 2d       	mov	r26, r0
    a59a:	be 83       	std	Y+6, r27	; 0x06
    a59c:	ad 83       	std	Y+5, r26	; 0x05
    a59e:	11 96       	adiw	r26, 0x01	; 1
    a5a0:	09 f0       	breq	.+2      	; 0xa5a4 <mp_lexer_to_next+0x7c8>
    a5a2:	a6 cf       	rjmp	.-180    	; 0xa4f0 <mp_lexer_to_next+0x714>
    a5a4:	f8 c0       	rjmp	.+496    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a5a6:	15 36       	cpi	r17, 0x65	; 101
    a5a8:	11 f0       	breq	.+4      	; 0xa5ae <mp_lexer_to_next+0x7d2>
    a5aa:	13 36       	cpi	r17, 0x63	; 99
    a5ac:	19 f4       	brne	.+6      	; 0xa5b4 <mp_lexer_to_next+0x7d8>
    a5ae:	f6 01       	movw	r30, r12
    a5b0:	31 96       	adiw	r30, 0x01	; 1
    a5b2:	01 c0       	rjmp	.+2      	; 0xa5b6 <mp_lexer_to_next+0x7da>
    a5b4:	f6 01       	movw	r30, r12
    a5b6:	2f ef       	ldi	r18, 0xFF	; 255
    a5b8:	e2 1a       	sub	r14, r18
    a5ba:	f2 0a       	sbc	r15, r18
    a5bc:	6f 01       	movw	r12, r30
    a5be:	3f ef       	ldi	r19, 0xFF	; 255
    a5c0:	c3 1a       	sub	r12, r19
    a5c2:	d3 0a       	sbc	r13, r19
    a5c4:	11 81       	ldd	r17, Z+1	; 0x01
    a5c6:	11 23       	and	r17, r17
    a5c8:	09 f4       	brne	.+2      	; 0xa5cc <mp_lexer_to_next+0x7f0>
    a5ca:	a2 c0       	rjmp	.+324    	; 0xa710 <mp_lexer_to_next+0x934>
    a5cc:	81 2f       	mov	r24, r17
    a5ce:	90 e0       	ldi	r25, 0x00	; 0
    a5d0:	4d 81       	ldd	r20, Y+5	; 0x05
    a5d2:	5e 81       	ldd	r21, Y+6	; 0x06
    a5d4:	48 17       	cp	r20, r24
    a5d6:	59 07       	cpc	r21, r25
    a5d8:	31 f7       	brne	.-52     	; 0xa5a6 <mp_lexer_to_next+0x7ca>
    a5da:	a2 c0       	rjmp	.+324    	; 0xa720 <mp_lexer_to_next+0x944>
    a5dc:	d3 01       	movw	r26, r6
    a5de:	18 96       	adiw	r26, 0x08	; 8
    a5e0:	8d 91       	ld	r24, X+
    a5e2:	9c 91       	ld	r25, X
    a5e4:	19 97       	sbiw	r26, 0x09	; 9
    a5e6:	cd 97       	sbiw	r24, 0x3d	; 61
    a5e8:	39 f4       	brne	.+14     	; 0xa5f8 <mp_lexer_to_next+0x81c>
    a5ea:	c3 01       	movw	r24, r6
    a5ec:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a5f0:	86 e3       	ldi	r24, 0x36	; 54
    a5f2:	f3 01       	movw	r30, r6
    a5f4:	80 a3       	std	Z+32, r24	; 0x20
    a5f6:	cf c0       	rjmp	.+414    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a5f8:	81 e0       	ldi	r24, 0x01	; 1
    a5fa:	d3 01       	movw	r26, r6
    a5fc:	90 96       	adiw	r26, 0x20	; 32
    a5fe:	8c 93       	st	X, r24
    a600:	ca c0       	rjmp	.+404    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a602:	1e 32       	cpi	r17, 0x2E	; 46
    a604:	61 f4       	brne	.+24     	; 0xa61e <mp_lexer_to_next+0x842>
    a606:	f3 01       	movw	r30, r6
    a608:	80 85       	ldd	r24, Z+8	; 0x08
    a60a:	91 85       	ldd	r25, Z+9	; 0x09
    a60c:	8e 97       	sbiw	r24, 0x2e	; 46
    a60e:	09 f0       	breq	.+2      	; 0xa612 <mp_lexer_to_next+0x836>
    a610:	98 c0       	rjmp	.+304    	; 0xa742 <mp_lexer_to_next+0x966>
    a612:	82 85       	ldd	r24, Z+10	; 0x0a
    a614:	93 85       	ldd	r25, Z+11	; 0x0b
    a616:	8e 97       	sbiw	r24, 0x2e	; 46
    a618:	09 f0       	breq	.+2      	; 0xa61c <mp_lexer_to_next+0x840>
    a61a:	93 c0       	rjmp	.+294    	; 0xa742 <mp_lexer_to_next+0x966>
    a61c:	88 c0       	rjmp	.+272    	; 0xa72e <mp_lexer_to_next+0x952>
    a61e:	96 01       	movw	r18, r12
    a620:	2f 5f       	subi	r18, 0xFF	; 255
    a622:	3f 4f       	sbci	r19, 0xFF	; 255
    a624:	87 01       	movw	r16, r14
    a626:	0f 5f       	subi	r16, 0xFF	; 255
    a628:	1f 4f       	sbci	r17, 0xFF	; 255
    a62a:	3e 83       	std	Y+6, r19	; 0x06
    a62c:	2d 83       	std	Y+5, r18	; 0x05
    a62e:	08 c0       	rjmp	.+16     	; 0xa640 <mp_lexer_to_next+0x864>
    a630:	4d 81       	ldd	r20, Y+5	; 0x05
    a632:	5e 81       	ldd	r21, Y+6	; 0x06
    a634:	4e 5f       	subi	r20, 0xFE	; 254
    a636:	5f 4f       	sbci	r21, 0xFF	; 255
    a638:	5e 83       	std	Y+6, r21	; 0x06
    a63a:	4d 83       	std	Y+5, r20	; 0x05
    a63c:	0f 5f       	subi	r16, 0xFF	; 255
    a63e:	1f 4f       	sbci	r17, 0xFF	; 255
    a640:	ad 81       	ldd	r26, Y+5	; 0x05
    a642:	be 81       	ldd	r27, Y+6	; 0x06
    a644:	8c 91       	ld	r24, X
    a646:	83 36       	cpi	r24, 0x63	; 99
    a648:	09 f4       	brne	.+2      	; 0xa64c <mp_lexer_to_next+0x870>
    a64a:	98 c0       	rjmp	.+304    	; 0xa77c <mp_lexer_to_next+0x9a0>
    a64c:	85 36       	cpi	r24, 0x65	; 101
    a64e:	09 f4       	brne	.+2      	; 0xa652 <mp_lexer_to_next+0x876>
    a650:	82 c0       	rjmp	.+260    	; 0xa756 <mp_lexer_to_next+0x97a>
    a652:	f7 01       	movw	r30, r14
    a654:	e1 59       	subi	r30, 0x91	; 145
    a656:	f6 4d       	sbci	r31, 0xD6	; 214
    a658:	80 81       	ld	r24, Z
    a65a:	f3 01       	movw	r30, r6
    a65c:	80 a3       	std	Z+32, r24	; 0x20
    a65e:	98 2f       	mov	r25, r24
    a660:	9d 7f       	andi	r25, 0xFD	; 253
    a662:	91 35       	cpi	r25, 0x51	; 81
    a664:	11 f0       	breq	.+4      	; 0xa66a <mp_lexer_to_next+0x88e>
    a666:	85 35       	cpi	r24, 0x55	; 85
    a668:	59 f4       	brne	.+22     	; 0xa680 <mp_lexer_to_next+0x8a4>
    a66a:	d3 01       	movw	r26, r6
    a66c:	54 96       	adiw	r26, 0x14	; 20
    a66e:	8d 91       	ld	r24, X+
    a670:	9c 91       	ld	r25, X
    a672:	55 97       	sbiw	r26, 0x15	; 21
    a674:	01 96       	adiw	r24, 0x01	; 1
    a676:	55 96       	adiw	r26, 0x15	; 21
    a678:	9c 93       	st	X, r25
    a67a:	8e 93       	st	-X, r24
    a67c:	54 97       	sbiw	r26, 0x14	; 20
    a67e:	8b c0       	rjmp	.+278    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a680:	98 2f       	mov	r25, r24
    a682:	9b 7f       	andi	r25, 0xFB	; 251
    a684:	92 35       	cpi	r25, 0x52	; 82
    a686:	19 f0       	breq	.+6      	; 0xa68e <mp_lexer_to_next+0x8b2>
    a688:	84 35       	cpi	r24, 0x54	; 84
    a68a:	09 f0       	breq	.+2      	; 0xa68e <mp_lexer_to_next+0x8b2>
    a68c:	84 c0       	rjmp	.+264    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a68e:	f3 01       	movw	r30, r6
    a690:	84 89       	ldd	r24, Z+20	; 0x14
    a692:	95 89       	ldd	r25, Z+21	; 0x15
    a694:	01 97       	sbiw	r24, 0x01	; 1
    a696:	95 8b       	std	Z+21, r25	; 0x15
    a698:	84 8b       	std	Z+20, r24	; 0x14
    a69a:	7d c0       	rjmp	.+250    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a69c:	c3 01       	movw	r24, r6
    a69e:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a6a2:	c3 01       	movw	r24, r6
    a6a4:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a6a8:	d3 01       	movw	r26, r6
    a6aa:	18 96       	adiw	r26, 0x08	; 8
    a6ac:	6d 91       	ld	r22, X+
    a6ae:	7c 91       	ld	r23, X
    a6b0:	19 97       	sbiw	r26, 0x09	; 9
    a6b2:	6f 3f       	cpi	r22, 0xFF	; 255
    a6b4:	bf ef       	ldi	r27, 0xFF	; 255
    a6b6:	7b 07       	cpc	r23, r27
    a6b8:	09 f4       	brne	.+2      	; 0xa6bc <mp_lexer_to_next+0x8e0>
    a6ba:	2c ce       	rjmp	.-936    	; 0xa314 <mp_lexer_to_next+0x538>
    a6bc:	0f 2e       	mov	r0, r31
    a6be:	f3 e0       	ldi	r31, 0x03	; 3
    a6c0:	cf 2e       	mov	r12, r31
    a6c2:	d1 2c       	mov	r13, r1
    a6c4:	f0 2d       	mov	r31, r0
    a6c6:	0b ce       	rjmp	.-1002   	; 0xa2de <mp_lexer_to_next+0x502>
    a6c8:	9b 81       	ldd	r25, Y+3	; 0x03
    a6ca:	8c 81       	ldd	r24, Y+4	; 0x04
    a6cc:	02 c0       	rjmp	.+4      	; 0xa6d2 <mp_lexer_to_next+0x8f6>
    a6ce:	94 e0       	ldi	r25, 0x04	; 4
    a6d0:	80 e0       	ldi	r24, 0x00	; 0
    a6d2:	e9 2e       	mov	r14, r25
    a6d4:	f8 2e       	mov	r15, r24
    a6d6:	e9 81       	ldd	r30, Y+1	; 0x01
    a6d8:	ed 83       	std	Y+5, r30	; 0x05
    a6da:	fa 81       	ldd	r31, Y+2	; 0x02
    a6dc:	fe 83       	std	Y+6, r31	; 0x06
    a6de:	64 cd       	rjmp	.-1336   	; 0xa1a8 <mp_lexer_to_next+0x3cc>
    a6e0:	d3 01       	movw	r26, r6
    a6e2:	90 96       	adiw	r26, 0x20	; 32
    a6e4:	8c 92       	st	X, r8
    a6e6:	b9 81       	ldd	r27, Y+1	; 0x01
    a6e8:	bd 83       	std	Y+5, r27	; 0x05
    a6ea:	d8 cd       	rjmp	.-1104   	; 0xa29c <mp_lexer_to_next+0x4c0>
    a6ec:	f7 e0       	ldi	r31, 0x07	; 7
    a6ee:	fd 83       	std	Y+5, r31	; 0x05
    a6f0:	d5 cd       	rjmp	.-1110   	; 0xa29c <mp_lexer_to_next+0x4c0>
    a6f2:	29 e0       	ldi	r18, 0x09	; 9
    a6f4:	2d 83       	std	Y+5, r18	; 0x05
    a6f6:	d2 cd       	rjmp	.-1116   	; 0xa29c <mp_lexer_to_next+0x4c0>
    a6f8:	c3 01       	movw	r24, r6
    a6fa:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a6fe:	0f 2e       	mov	r0, r31
    a700:	fd ea       	ldi	r31, 0xAD	; 173
    a702:	cf 2e       	mov	r12, r31
    a704:	f7 e0       	ldi	r31, 0x07	; 7
    a706:	df 2e       	mov	r13, r31
    a708:	f0 2d       	mov	r31, r0
    a70a:	e1 2c       	mov	r14, r1
    a70c:	f1 2c       	mov	r15, r1
    a70e:	87 cf       	rjmp	.-242    	; 0xa61e <mp_lexer_to_next+0x842>
    a710:	c3 01       	movw	r24, r6
    a712:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a716:	81 e0       	ldi	r24, 0x01	; 1
    a718:	d3 01       	movw	r26, r6
    a71a:	90 96       	adiw	r26, 0x20	; 32
    a71c:	8c 93       	st	X, r24
    a71e:	3b c0       	rjmp	.+118    	; 0xa796 <mp_lexer_to_next+0x9ba>
    a720:	c3 01       	movw	r24, r6
    a722:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a726:	11 32       	cpi	r17, 0x21	; 33
    a728:	09 f0       	breq	.+2      	; 0xa72c <mp_lexer_to_next+0x950>
    a72a:	6b cf       	rjmp	.-298    	; 0xa602 <mp_lexer_to_next+0x826>
    a72c:	57 cf       	rjmp	.-338    	; 0xa5dc <mp_lexer_to_next+0x800>
    a72e:	c3 01       	movw	r24, r6
    a730:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a734:	c3 01       	movw	r24, r6
    a736:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a73a:	8c e0       	ldi	r24, 0x0C	; 12
    a73c:	f3 01       	movw	r30, r6
    a73e:	80 a3       	std	Z+32, r24	; 0x20
    a740:	2a c0       	rjmp	.+84     	; 0xa796 <mp_lexer_to_next+0x9ba>
    a742:	89 e5       	ldi	r24, 0x59	; 89
    a744:	d3 01       	movw	r26, r6
    a746:	90 96       	adiw	r26, 0x20	; 32
    a748:	8c 93       	st	X, r24
    a74a:	25 c0       	rjmp	.+74     	; 0xa796 <mp_lexer_to_next+0x9ba>
    a74c:	c3 01       	movw	r24, r6
    a74e:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a752:	78 01       	movw	r14, r16
    a754:	7e cf       	rjmp	.-260    	; 0xa652 <mp_lexer_to_next+0x876>
    a756:	ed 81       	ldd	r30, Y+5	; 0x05
    a758:	fe 81       	ldd	r31, Y+6	; 0x06
    a75a:	81 81       	ldd	r24, Z+1	; 0x01
    a75c:	90 e0       	ldi	r25, 0x00	; 0
    a75e:	d3 01       	movw	r26, r6
    a760:	18 96       	adiw	r26, 0x08	; 8
    a762:	2d 91       	ld	r18, X+
    a764:	3c 91       	ld	r19, X
    a766:	19 97       	sbiw	r26, 0x09	; 9
    a768:	28 17       	cp	r18, r24
    a76a:	39 07       	cpc	r19, r25
    a76c:	09 f0       	breq	.+2      	; 0xa770 <mp_lexer_to_next+0x994>
    a76e:	60 cf       	rjmp	.-320    	; 0xa630 <mp_lexer_to_next+0x854>
    a770:	ed cf       	rjmp	.-38     	; 0xa74c <mp_lexer_to_next+0x970>
    a772:	c3 01       	movw	r24, r6
    a774:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a778:	78 01       	movw	r14, r16
    a77a:	5a cf       	rjmp	.-332    	; 0xa630 <mp_lexer_to_next+0x854>
    a77c:	ed 81       	ldd	r30, Y+5	; 0x05
    a77e:	fe 81       	ldd	r31, Y+6	; 0x06
    a780:	81 81       	ldd	r24, Z+1	; 0x01
    a782:	90 e0       	ldi	r25, 0x00	; 0
    a784:	d3 01       	movw	r26, r6
    a786:	18 96       	adiw	r26, 0x08	; 8
    a788:	2d 91       	ld	r18, X+
    a78a:	3c 91       	ld	r19, X
    a78c:	19 97       	sbiw	r26, 0x09	; 9
    a78e:	82 17       	cp	r24, r18
    a790:	93 07       	cpc	r25, r19
    a792:	79 f3       	breq	.-34     	; 0xa772 <mp_lexer_to_next+0x996>
    a794:	5e cf       	rjmp	.-324    	; 0xa652 <mp_lexer_to_next+0x876>
    a796:	26 96       	adiw	r28, 0x06	; 6
    a798:	0f b6       	in	r0, 0x3f	; 63
    a79a:	f8 94       	cli
    a79c:	de bf       	out	0x3e, r29	; 62
    a79e:	0f be       	out	0x3f, r0	; 63
    a7a0:	cd bf       	out	0x3d, r28	; 61
    a7a2:	df 91       	pop	r29
    a7a4:	cf 91       	pop	r28
    a7a6:	1f 91       	pop	r17
    a7a8:	0f 91       	pop	r16
    a7aa:	ff 90       	pop	r15
    a7ac:	ef 90       	pop	r14
    a7ae:	df 90       	pop	r13
    a7b0:	cf 90       	pop	r12
    a7b2:	bf 90       	pop	r11
    a7b4:	af 90       	pop	r10
    a7b6:	9f 90       	pop	r9
    a7b8:	8f 90       	pop	r8
    a7ba:	7f 90       	pop	r7
    a7bc:	6f 90       	pop	r6
    a7be:	5f 90       	pop	r5
    a7c0:	4f 90       	pop	r4
    a7c2:	3f 90       	pop	r3
    a7c4:	2f 90       	pop	r2
    a7c6:	08 95       	ret

0000a7c8 <mp_lexer_new>:
    a7c8:	ef 92       	push	r14
    a7ca:	ff 92       	push	r15
    a7cc:	0f 93       	push	r16
    a7ce:	1f 93       	push	r17
    a7d0:	cf 93       	push	r28
    a7d2:	df 93       	push	r29
    a7d4:	00 d0       	rcall	.+0      	; 0xa7d6 <mp_lexer_new+0xe>
    a7d6:	00 d0       	rcall	.+0      	; 0xa7d8 <mp_lexer_new+0x10>
    a7d8:	00 d0       	rcall	.+0      	; 0xa7da <mp_lexer_new+0x12>
    a7da:	cd b7       	in	r28, 0x3d	; 61
    a7dc:	de b7       	in	r29, 0x3e	; 62
    a7de:	7c 01       	movw	r14, r24
    a7e0:	29 83       	std	Y+1, r18	; 0x01
    a7e2:	3a 83       	std	Y+2, r19	; 0x02
    a7e4:	4b 83       	std	Y+3, r20	; 0x03
    a7e6:	5c 83       	std	Y+4, r21	; 0x04
    a7e8:	6d 83       	std	Y+5, r22	; 0x05
    a7ea:	7e 83       	std	Y+6, r23	; 0x06
    a7ec:	88 e2       	ldi	r24, 0x28	; 40
    a7ee:	90 e0       	ldi	r25, 0x00	; 0
    a7f0:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    a7f4:	8c 01       	movw	r16, r24
    a7f6:	dc 01       	movw	r26, r24
    a7f8:	ed 92       	st	X+, r14
    a7fa:	fd 92       	st	X+, r15
    a7fc:	86 e0       	ldi	r24, 0x06	; 6
    a7fe:	fe 01       	movw	r30, r28
    a800:	31 96       	adiw	r30, 0x01	; 1
    a802:	01 90       	ld	r0, Z+
    a804:	0d 92       	st	X+, r0
    a806:	8a 95       	dec	r24
    a808:	e1 f7       	brne	.-8      	; 0xa802 <mp_lexer_new+0x3a>
    a80a:	81 e0       	ldi	r24, 0x01	; 1
    a80c:	90 e0       	ldi	r25, 0x00	; 0
    a80e:	d8 01       	movw	r26, r16
    a810:	1f 96       	adiw	r26, 0x0f	; 15
    a812:	9c 93       	st	X, r25
    a814:	8e 93       	st	-X, r24
    a816:	1e 97       	sbiw	r26, 0x0e	; 14
    a818:	2e ef       	ldi	r18, 0xFE	; 254
    a81a:	3f ef       	ldi	r19, 0xFF	; 255
    a81c:	51 96       	adiw	r26, 0x11	; 17
    a81e:	3c 93       	st	X, r19
    a820:	2e 93       	st	-X, r18
    a822:	50 97       	sbiw	r26, 0x10	; 16
    a824:	53 96       	adiw	r26, 0x13	; 19
    a826:	1c 92       	st	X, r1
    a828:	1e 92       	st	-X, r1
    a82a:	52 97       	sbiw	r26, 0x12	; 18
    a82c:	55 96       	adiw	r26, 0x15	; 21
    a82e:	1c 92       	st	X, r1
    a830:	1e 92       	st	-X, r1
    a832:	54 97       	sbiw	r26, 0x14	; 20
    a834:	2a e0       	ldi	r18, 0x0A	; 10
    a836:	30 e0       	ldi	r19, 0x00	; 0
    a838:	57 96       	adiw	r26, 0x17	; 23
    a83a:	3c 93       	st	X, r19
    a83c:	2e 93       	st	-X, r18
    a83e:	56 97       	sbiw	r26, 0x16	; 22
    a840:	59 96       	adiw	r26, 0x19	; 25
    a842:	9c 93       	st	X, r25
    a844:	8e 93       	st	-X, r24
    a846:	58 97       	sbiw	r26, 0x18	; 24
    a848:	84 e1       	ldi	r24, 0x14	; 20
    a84a:	90 e0       	ldi	r25, 0x00	; 0
    a84c:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    a850:	f8 01       	movw	r30, r16
    a852:	93 8f       	std	Z+27, r25	; 0x1b
    a854:	82 8f       	std	Z+26, r24	; 0x1a
    a856:	60 e2       	ldi	r22, 0x20	; 32
    a858:	70 e0       	ldi	r23, 0x00	; 0
    a85a:	c8 01       	movw	r24, r16
    a85c:	81 96       	adiw	r24, 0x21	; 33
    a85e:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
    a862:	d8 01       	movw	r26, r16
    a864:	5a 96       	adiw	r26, 0x1a	; 26
    a866:	ed 91       	ld	r30, X+
    a868:	fc 91       	ld	r31, X
    a86a:	5b 97       	sbiw	r26, 0x1b	; 27
    a86c:	11 82       	std	Z+1, r1	; 0x01
    a86e:	10 82       	st	Z, r1
    a870:	1d 96       	adiw	r26, 0x0d	; 13
    a872:	1c 92       	st	X, r1
    a874:	1e 92       	st	-X, r1
    a876:	1c 97       	sbiw	r26, 0x0c	; 12
    a878:	1b 96       	adiw	r26, 0x0b	; 11
    a87a:	1c 92       	st	X, r1
    a87c:	1e 92       	st	-X, r1
    a87e:	1a 97       	sbiw	r26, 0x0a	; 10
    a880:	19 96       	adiw	r26, 0x09	; 9
    a882:	1c 92       	st	X, r1
    a884:	1e 92       	st	-X, r1
    a886:	18 97       	sbiw	r26, 0x08	; 8
    a888:	c8 01       	movw	r24, r16
    a88a:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a88e:	c8 01       	movw	r24, r16
    a890:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a894:	c8 01       	movw	r24, r16
    a896:	0e 94 4e 01 	call	0x29c	; 0x29c <next_char>
    a89a:	c8 01       	movw	r24, r16
    a89c:	9f da       	rcall	.-2754   	; 0x9ddc <mp_lexer_to_next>
    a89e:	f8 01       	movw	r30, r16
    a8a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    a8a2:	97 8d       	ldd	r25, Z+31	; 0x1f
    a8a4:	01 97       	sbiw	r24, 0x01	; 1
    a8a6:	11 f0       	breq	.+4      	; 0xa8ac <mp_lexer_new+0xe4>
    a8a8:	85 e0       	ldi	r24, 0x05	; 5
    a8aa:	80 a3       	std	Z+32, r24	; 0x20
    a8ac:	c8 01       	movw	r24, r16
    a8ae:	26 96       	adiw	r28, 0x06	; 6
    a8b0:	0f b6       	in	r0, 0x3f	; 63
    a8b2:	f8 94       	cli
    a8b4:	de bf       	out	0x3e, r29	; 62
    a8b6:	0f be       	out	0x3f, r0	; 63
    a8b8:	cd bf       	out	0x3d, r28	; 61
    a8ba:	df 91       	pop	r29
    a8bc:	cf 91       	pop	r28
    a8be:	1f 91       	pop	r17
    a8c0:	0f 91       	pop	r16
    a8c2:	ff 90       	pop	r15
    a8c4:	ef 90       	pop	r14
    a8c6:	08 95       	ret

0000a8c8 <mp_lexer_new_from_str_len>:
    a8c8:	0f 93       	push	r16
    a8ca:	1f 93       	push	r17
    a8cc:	cf 93       	push	r28
    a8ce:	df 93       	push	r29
    a8d0:	00 d0       	rcall	.+0      	; 0xa8d2 <mp_lexer_new_from_str_len+0xa>
    a8d2:	00 d0       	rcall	.+0      	; 0xa8d4 <mp_lexer_new_from_str_len+0xc>
    a8d4:	00 d0       	rcall	.+0      	; 0xa8d6 <mp_lexer_new_from_str_len+0xe>
    a8d6:	cd b7       	in	r28, 0x3d	; 61
    a8d8:	de b7       	in	r29, 0x3e	; 62
    a8da:	8c 01       	movw	r16, r24
    a8dc:	ce 01       	movw	r24, r28
    a8de:	01 96       	adiw	r24, 0x01	; 1
    a8e0:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <mp_reader_new_mem>
    a8e4:	29 81       	ldd	r18, Y+1	; 0x01
    a8e6:	3a 81       	ldd	r19, Y+2	; 0x02
    a8e8:	4b 81       	ldd	r20, Y+3	; 0x03
    a8ea:	5c 81       	ldd	r21, Y+4	; 0x04
    a8ec:	6d 81       	ldd	r22, Y+5	; 0x05
    a8ee:	7e 81       	ldd	r23, Y+6	; 0x06
    a8f0:	c8 01       	movw	r24, r16
    a8f2:	6a df       	rcall	.-300    	; 0xa7c8 <mp_lexer_new>
    a8f4:	26 96       	adiw	r28, 0x06	; 6
    a8f6:	0f b6       	in	r0, 0x3f	; 63
    a8f8:	f8 94       	cli
    a8fa:	de bf       	out	0x3e, r29	; 62
    a8fc:	0f be       	out	0x3f, r0	; 63
    a8fe:	cd bf       	out	0x3d, r28	; 61
    a900:	df 91       	pop	r29
    a902:	cf 91       	pop	r28
    a904:	1f 91       	pop	r17
    a906:	0f 91       	pop	r16
    a908:	08 95       	ret

0000a90a <push_result_node>:
    a90a:	0f 93       	push	r16
    a90c:	1f 93       	push	r17
    a90e:	cf 93       	push	r28
    a910:	df 93       	push	r29
    a912:	ec 01       	movw	r28, r24
    a914:	8b 01       	movw	r16, r22
    a916:	6e 81       	ldd	r22, Y+6	; 0x06
    a918:	7f 81       	ldd	r23, Y+7	; 0x07
    a91a:	88 85       	ldd	r24, Y+8	; 0x08
    a91c:	99 85       	ldd	r25, Y+9	; 0x09
    a91e:	86 17       	cp	r24, r22
    a920:	97 07       	cpc	r25, r23
    a922:	70 f0       	brcs	.+28     	; 0xa940 <push_result_node+0x36>
    a924:	60 5f       	subi	r22, 0xF0	; 240
    a926:	7f 4f       	sbci	r23, 0xFF	; 255
    a928:	66 0f       	add	r22, r22
    a92a:	77 1f       	adc	r23, r23
    a92c:	8a 85       	ldd	r24, Y+10	; 0x0a
    a92e:	9b 85       	ldd	r25, Y+11	; 0x0b
    a930:	78 d9       	rcall	.-3344   	; 0x9c22 <m_realloc>
    a932:	9b 87       	std	Y+11, r25	; 0x0b
    a934:	8a 87       	std	Y+10, r24	; 0x0a
    a936:	8e 81       	ldd	r24, Y+6	; 0x06
    a938:	9f 81       	ldd	r25, Y+7	; 0x07
    a93a:	40 96       	adiw	r24, 0x10	; 16
    a93c:	9f 83       	std	Y+7, r25	; 0x07
    a93e:	8e 83       	std	Y+6, r24	; 0x06
    a940:	ea 85       	ldd	r30, Y+10	; 0x0a
    a942:	fb 85       	ldd	r31, Y+11	; 0x0b
    a944:	88 85       	ldd	r24, Y+8	; 0x08
    a946:	99 85       	ldd	r25, Y+9	; 0x09
    a948:	9c 01       	movw	r18, r24
    a94a:	2f 5f       	subi	r18, 0xFF	; 255
    a94c:	3f 4f       	sbci	r19, 0xFF	; 255
    a94e:	39 87       	std	Y+9, r19	; 0x09
    a950:	28 87       	std	Y+8, r18	; 0x08
    a952:	88 0f       	add	r24, r24
    a954:	99 1f       	adc	r25, r25
    a956:	e8 0f       	add	r30, r24
    a958:	f9 1f       	adc	r31, r25
    a95a:	11 83       	std	Z+1, r17	; 0x01
    a95c:	00 83       	st	Z, r16
    a95e:	df 91       	pop	r29
    a960:	cf 91       	pop	r28
    a962:	1f 91       	pop	r17
    a964:	0f 91       	pop	r16
    a966:	08 95       	ret

0000a968 <push_result_rule>:
    a968:	8f 92       	push	r8
    a96a:	9f 92       	push	r9
    a96c:	bf 92       	push	r11
    a96e:	cf 92       	push	r12
    a970:	df 92       	push	r13
    a972:	ef 92       	push	r14
    a974:	ff 92       	push	r15
    a976:	0f 93       	push	r16
    a978:	1f 93       	push	r17
    a97a:	cf 93       	push	r28
    a97c:	df 93       	push	r29
    a97e:	6c 01       	movw	r12, r24
    a980:	8b 01       	movw	r16, r22
    a982:	b4 2e       	mov	r11, r20
    a984:	e9 01       	movw	r28, r18
    a986:	8a e2       	ldi	r24, 0x2A	; 42
    a988:	48 13       	cpse	r20, r24
    a98a:	14 c0       	rjmp	.+40     	; 0xa9b4 <push_result_rule+0x4c>
    a98c:	60 e0       	ldi	r22, 0x00	; 0
    a98e:	70 e0       	ldi	r23, 0x00	; 0
    a990:	c6 01       	movw	r24, r12
    a992:	0e 94 33 04 	call	0x866	; 0x866 <peek_result>
    a996:	00 97       	sbiw	r24, 0x00	; 0
    a998:	09 f4       	brne	.+2      	; 0xa99c <push_result_rule+0x34>
    a99a:	af c0       	rjmp	.+350    	; 0xaafa <push_result_rule+0x192>
    a99c:	9c 01       	movw	r18, r24
    a99e:	23 70       	andi	r18, 0x03	; 3
    a9a0:	33 27       	eor	r19, r19
    a9a2:	23 2b       	or	r18, r19
    a9a4:	09 f0       	breq	.+2      	; 0xa9a8 <push_result_rule+0x40>
    a9a6:	c7 c0       	rjmp	.+398    	; 0xab36 <push_result_rule+0x1ce>
    a9a8:	fc 01       	movw	r30, r24
    a9aa:	84 81       	ldd	r24, Z+4	; 0x04
    a9ac:	8b 38       	cpi	r24, 0x8B	; 139
    a9ae:	09 f0       	breq	.+2      	; 0xa9b2 <push_result_rule+0x4a>
    a9b0:	c2 c0       	rjmp	.+388    	; 0xab36 <push_result_rule+0x1ce>
    a9b2:	a3 c0       	rjmp	.+326    	; 0xaafa <push_result_rule+0x192>
    a9b4:	fb e8       	ldi	r31, 0x8B	; 139
    a9b6:	4f 13       	cpse	r20, r31
    a9b8:	45 c0       	rjmp	.+138    	; 0xaa44 <push_result_rule+0xdc>
    a9ba:	22 30       	cpi	r18, 0x02	; 2
    a9bc:	31 05       	cpc	r19, r1
    a9be:	11 f0       	breq	.+4      	; 0xa9c4 <push_result_rule+0x5c>
    a9c0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    a9c4:	60 e0       	ldi	r22, 0x00	; 0
    a9c6:	70 e0       	ldi	r23, 0x00	; 0
    a9c8:	c6 01       	movw	r24, r12
    a9ca:	0e 94 33 04 	call	0x866	; 0x866 <peek_result>
    a9ce:	7c 01       	movw	r14, r24
    a9d0:	00 97       	sbiw	r24, 0x00	; 0
    a9d2:	09 f4       	brne	.+2      	; 0xa9d6 <push_result_rule+0x6e>
    a9d4:	77 c0       	rjmp	.+238    	; 0xaac4 <push_result_rule+0x15c>
    a9d6:	83 70       	andi	r24, 0x03	; 3
    a9d8:	99 27       	eor	r25, r25
    a9da:	89 2b       	or	r24, r25
    a9dc:	09 f0       	breq	.+2      	; 0xa9e0 <push_result_rule+0x78>
    a9de:	72 c0       	rjmp	.+228    	; 0xaac4 <push_result_rule+0x15c>
    a9e0:	f7 01       	movw	r30, r14
    a9e2:	84 81       	ldd	r24, Z+4	; 0x04
    a9e4:	95 81       	ldd	r25, Z+5	; 0x05
    a9e6:	a6 81       	ldd	r26, Z+6	; 0x06
    a9e8:	b7 81       	ldd	r27, Z+7	; 0x07
    a9ea:	99 27       	eor	r25, r25
    a9ec:	aa 27       	eor	r26, r26
    a9ee:	bb 27       	eor	r27, r27
    a9f0:	8e 38       	cpi	r24, 0x8E	; 142
    a9f2:	91 05       	cpc	r25, r1
    a9f4:	a1 05       	cpc	r26, r1
    a9f6:	b1 05       	cpc	r27, r1
    a9f8:	31 f4       	brne	.+12     	; 0xaa06 <push_result_rule+0x9e>
    a9fa:	c6 01       	movw	r24, r12
    a9fc:	0e 94 4d 04 	call	0x89a	; 0x89a <pop_result>
    aa00:	c1 e0       	ldi	r28, 0x01	; 1
    aa02:	d0 e0       	ldi	r29, 0x00	; 0
    aa04:	5f c0       	rjmp	.+190    	; 0xaac4 <push_result_rule+0x15c>
    aa06:	8f 38       	cpi	r24, 0x8F	; 143
    aa08:	91 05       	cpc	r25, r1
    aa0a:	a1 05       	cpc	r26, r1
    aa0c:	b1 05       	cpc	r27, r1
    aa0e:	09 f0       	breq	.+2      	; 0xaa12 <push_result_rule+0xaa>
    aa10:	59 c0       	rjmp	.+178    	; 0xaac4 <push_result_rule+0x15c>
    aa12:	c6 01       	movw	r24, r12
    aa14:	0e 94 4d 04 	call	0x89a	; 0x89a <pop_result>
    aa18:	60 e0       	ldi	r22, 0x00	; 0
    aa1a:	70 e0       	ldi	r23, 0x00	; 0
    aa1c:	c6 01       	movw	r24, r12
    aa1e:	0e 94 33 04 	call	0x866	; 0x866 <peek_result>
    aa22:	e8 16       	cp	r14, r24
    aa24:	f9 06       	cpc	r15, r25
    aa26:	11 f0       	breq	.+4      	; 0xaa2c <push_result_rule+0xc4>
    aa28:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    aa2c:	f7 01       	movw	r30, r14
    aa2e:	84 81       	ldd	r24, Z+4	; 0x04
    aa30:	95 81       	ldd	r25, Z+5	; 0x05
    aa32:	a6 81       	ldd	r26, Z+6	; 0x06
    aa34:	b7 81       	ldd	r27, Z+7	; 0x07
    aa36:	88 27       	eor	r24, r24
    aa38:	8b 68       	ori	r24, 0x8B	; 139
    aa3a:	84 83       	std	Z+4, r24	; 0x04
    aa3c:	95 83       	std	Z+5, r25	; 0x05
    aa3e:	a6 83       	std	Z+6, r26	; 0x06
    aa40:	b7 83       	std	Z+7, r27	; 0x07
    aa42:	79 c0       	rjmp	.+242    	; 0xab36 <push_result_rule+0x1ce>
    aa44:	ff e8       	ldi	r31, 0x8F	; 143
    aa46:	4f 13       	cpse	r20, r31
    aa48:	58 c0       	rjmp	.+176    	; 0xaafa <push_result_rule+0x192>
    aa4a:	49 01       	movw	r8, r18
    aa4c:	8f ef       	ldi	r24, 0xFF	; 255
    aa4e:	88 1a       	sub	r8, r24
    aa50:	98 0a       	sbc	r9, r24
    aa52:	b9 01       	movw	r22, r18
    aa54:	6b 5f       	subi	r22, 0xFB	; 251
    aa56:	7f 4f       	sbci	r23, 0xFF	; 255
    aa58:	66 0f       	add	r22, r22
    aa5a:	77 1f       	adc	r23, r23
    aa5c:	c6 01       	movw	r24, r12
    aa5e:	0e 94 25 32 	call	0x644a	; 0x644a <parser_alloc>
    aa62:	7c 01       	movw	r14, r24
    aa64:	c8 01       	movw	r24, r16
    aa66:	a0 e0       	ldi	r26, 0x00	; 0
    aa68:	b0 e0       	ldi	r27, 0x00	; 0
    aa6a:	f7 01       	movw	r30, r14
    aa6c:	80 83       	st	Z, r24
    aa6e:	91 83       	std	Z+1, r25	; 0x01
    aa70:	a2 83       	std	Z+2, r26	; 0x02
    aa72:	b3 83       	std	Z+3, r27	; 0x03
    aa74:	98 2d       	mov	r25, r8
    aa76:	88 27       	eor	r24, r24
    aa78:	8f 68       	ori	r24, 0x8F	; 143
    aa7a:	a0 e0       	ldi	r26, 0x00	; 0
    aa7c:	b0 e0       	ldi	r27, 0x00	; 0
    aa7e:	84 83       	std	Z+4, r24	; 0x04
    aa80:	95 83       	std	Z+5, r25	; 0x05
    aa82:	a6 83       	std	Z+6, r26	; 0x06
    aa84:	b7 83       	std	Z+7, r27	; 0x07
    aa86:	81 14       	cp	r8, r1
    aa88:	91 04       	cpc	r9, r1
    aa8a:	a9 f0       	breq	.+42     	; 0xaab6 <push_result_rule+0x14e>
    aa8c:	e4 01       	movw	r28, r8
    aa8e:	8e 01       	movw	r16, r28
    aa90:	00 0f       	add	r16, r16
    aa92:	11 1f       	adc	r17, r17
    aa94:	08 5f       	subi	r16, 0xF8	; 248
    aa96:	1f 4f       	sbci	r17, 0xFF	; 255
    aa98:	0e 0d       	add	r16, r14
    aa9a:	1f 1d       	adc	r17, r15
    aa9c:	21 97       	sbiw	r28, 0x01	; 1
    aa9e:	c6 01       	movw	r24, r12
    aaa0:	0e 94 4d 04 	call	0x89a	; 0x89a <pop_result>
    aaa4:	f8 01       	movw	r30, r16
    aaa6:	92 93       	st	-Z, r25
    aaa8:	82 93       	st	-Z, r24
    aaaa:	8f 01       	movw	r16, r30
    aaac:	20 97       	sbiw	r28, 0x00	; 0
    aaae:	b1 f7       	brne	.-20     	; 0xaa9c <push_result_rule+0x134>
    aab0:	ff e8       	ldi	r31, 0x8F	; 143
    aab2:	bf 12       	cpse	r11, r31
    aab4:	03 c0       	rjmp	.+6      	; 0xaabc <push_result_rule+0x154>
    aab6:	b7 01       	movw	r22, r14
    aab8:	c6 01       	movw	r24, r12
    aaba:	27 df       	rcall	.-434    	; 0xa90a <push_result_node>
    aabc:	b7 01       	movw	r22, r14
    aabe:	c6 01       	movw	r24, r12
    aac0:	24 df       	rcall	.-440    	; 0xa90a <push_result_node>
    aac2:	39 c0       	rjmp	.+114    	; 0xab36 <push_result_rule+0x1ce>
    aac4:	be 01       	movw	r22, r28
    aac6:	6c 5f       	subi	r22, 0xFC	; 252
    aac8:	7f 4f       	sbci	r23, 0xFF	; 255
    aaca:	66 0f       	add	r22, r22
    aacc:	77 1f       	adc	r23, r23
    aace:	c6 01       	movw	r24, r12
    aad0:	0e 94 25 32 	call	0x644a	; 0x644a <parser_alloc>
    aad4:	7c 01       	movw	r14, r24
    aad6:	c8 01       	movw	r24, r16
    aad8:	a0 e0       	ldi	r26, 0x00	; 0
    aada:	b0 e0       	ldi	r27, 0x00	; 0
    aadc:	f7 01       	movw	r30, r14
    aade:	80 83       	st	Z, r24
    aae0:	91 83       	std	Z+1, r25	; 0x01
    aae2:	a2 83       	std	Z+2, r26	; 0x02
    aae4:	b3 83       	std	Z+3, r27	; 0x03
    aae6:	9c 2f       	mov	r25, r28
    aae8:	88 27       	eor	r24, r24
    aaea:	8b 68       	ori	r24, 0x8B	; 139
    aaec:	a0 e0       	ldi	r26, 0x00	; 0
    aaee:	b0 e0       	ldi	r27, 0x00	; 0
    aaf0:	84 83       	std	Z+4, r24	; 0x04
    aaf2:	95 83       	std	Z+5, r25	; 0x05
    aaf4:	a6 83       	std	Z+6, r26	; 0x06
    aaf6:	b7 83       	std	Z+7, r27	; 0x07
    aaf8:	ca cf       	rjmp	.-108    	; 0xaa8e <push_result_rule+0x126>
    aafa:	be 01       	movw	r22, r28
    aafc:	6c 5f       	subi	r22, 0xFC	; 252
    aafe:	7f 4f       	sbci	r23, 0xFF	; 255
    ab00:	66 0f       	add	r22, r22
    ab02:	77 1f       	adc	r23, r23
    ab04:	c6 01       	movw	r24, r12
    ab06:	0e 94 25 32 	call	0x644a	; 0x644a <parser_alloc>
    ab0a:	7c 01       	movw	r14, r24
    ab0c:	c8 01       	movw	r24, r16
    ab0e:	a0 e0       	ldi	r26, 0x00	; 0
    ab10:	b0 e0       	ldi	r27, 0x00	; 0
    ab12:	f7 01       	movw	r30, r14
    ab14:	80 83       	st	Z, r24
    ab16:	91 83       	std	Z+1, r25	; 0x01
    ab18:	a2 83       	std	Z+2, r26	; 0x02
    ab1a:	b3 83       	std	Z+3, r27	; 0x03
    ab1c:	9c 2f       	mov	r25, r28
    ab1e:	88 27       	eor	r24, r24
    ab20:	8b 29       	or	r24, r11
    ab22:	a0 e0       	ldi	r26, 0x00	; 0
    ab24:	b0 e0       	ldi	r27, 0x00	; 0
    ab26:	84 83       	std	Z+4, r24	; 0x04
    ab28:	95 83       	std	Z+5, r25	; 0x05
    ab2a:	a6 83       	std	Z+6, r26	; 0x06
    ab2c:	b7 83       	std	Z+7, r27	; 0x07
    ab2e:	20 97       	sbiw	r28, 0x00	; 0
    ab30:	09 f0       	breq	.+2      	; 0xab34 <push_result_rule+0x1cc>
    ab32:	ad cf       	rjmp	.-166    	; 0xaa8e <push_result_rule+0x126>
    ab34:	c3 cf       	rjmp	.-122    	; 0xaabc <push_result_rule+0x154>
    ab36:	df 91       	pop	r29
    ab38:	cf 91       	pop	r28
    ab3a:	1f 91       	pop	r17
    ab3c:	0f 91       	pop	r16
    ab3e:	ff 90       	pop	r15
    ab40:	ef 90       	pop	r14
    ab42:	df 90       	pop	r13
    ab44:	cf 90       	pop	r12
    ab46:	bf 90       	pop	r11
    ab48:	9f 90       	pop	r9
    ab4a:	8f 90       	pop	r8
    ab4c:	08 95       	ret

0000ab4e <push_rule>:
    ab4e:	ef 92       	push	r14
    ab50:	ff 92       	push	r15
    ab52:	0f 93       	push	r16
    ab54:	1f 93       	push	r17
    ab56:	cf 93       	push	r28
    ab58:	df 93       	push	r29
    ab5a:	ec 01       	movw	r28, r24
    ab5c:	e6 2e       	mov	r14, r22
    ab5e:	f4 2e       	mov	r15, r20
    ab60:	89 01       	movw	r16, r18
    ab62:	68 81       	ld	r22, Y
    ab64:	79 81       	ldd	r23, Y+1	; 0x01
    ab66:	8a 81       	ldd	r24, Y+2	; 0x02
    ab68:	9b 81       	ldd	r25, Y+3	; 0x03
    ab6a:	86 17       	cp	r24, r22
    ab6c:	97 07       	cpc	r25, r23
    ab6e:	80 f0       	brcs	.+32     	; 0xab90 <push_rule+0x42>
    ab70:	60 5f       	subi	r22, 0xF0	; 240
    ab72:	7f 4f       	sbci	r23, 0xFF	; 255
    ab74:	66 0f       	add	r22, r22
    ab76:	77 1f       	adc	r23, r23
    ab78:	66 0f       	add	r22, r22
    ab7a:	77 1f       	adc	r23, r23
    ab7c:	8c 81       	ldd	r24, Y+4	; 0x04
    ab7e:	9d 81       	ldd	r25, Y+5	; 0x05
    ab80:	50 d8       	rcall	.-3936   	; 0x9c22 <m_realloc>
    ab82:	9d 83       	std	Y+5, r25	; 0x05
    ab84:	8c 83       	std	Y+4, r24	; 0x04
    ab86:	88 81       	ld	r24, Y
    ab88:	99 81       	ldd	r25, Y+1	; 0x01
    ab8a:	40 96       	adiw	r24, 0x10	; 16
    ab8c:	99 83       	std	Y+1, r25	; 0x01
    ab8e:	88 83       	st	Y, r24
    ab90:	ec 81       	ldd	r30, Y+4	; 0x04
    ab92:	fd 81       	ldd	r31, Y+5	; 0x05
    ab94:	8a 81       	ldd	r24, Y+2	; 0x02
    ab96:	9b 81       	ldd	r25, Y+3	; 0x03
    ab98:	9c 01       	movw	r18, r24
    ab9a:	2f 5f       	subi	r18, 0xFF	; 255
    ab9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ab9e:	3b 83       	std	Y+3, r19	; 0x03
    aba0:	2a 83       	std	Y+2, r18	; 0x02
    aba2:	88 0f       	add	r24, r24
    aba4:	99 1f       	adc	r25, r25
    aba6:	88 0f       	add	r24, r24
    aba8:	99 1f       	adc	r25, r25
    abaa:	e8 0f       	add	r30, r24
    abac:	f9 1f       	adc	r31, r25
    abae:	e0 82       	st	Z, r14
    abb0:	f1 82       	std	Z+1, r15	; 0x01
    abb2:	13 83       	std	Z+3, r17	; 0x03
    abb4:	02 83       	std	Z+2, r16	; 0x02
    abb6:	df 91       	pop	r29
    abb8:	cf 91       	pop	r28
    abba:	1f 91       	pop	r17
    abbc:	0f 91       	pop	r16
    abbe:	ff 90       	pop	r15
    abc0:	ef 90       	pop	r14
    abc2:	08 95       	ret

0000abc4 <push_rule_from_arg>:
    abc4:	9b 01       	movw	r18, r22
    abc6:	22 27       	eor	r18, r18
    abc8:	30 7e       	andi	r19, 0xE0	; 224
    abca:	21 15       	cp	r18, r1
    abcc:	30 42       	sbci	r19, 0x20	; 32
    abce:	11 f0       	breq	.+4      	; 0xabd4 <push_rule_from_arg+0x10>
    abd0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    abd4:	ab 01       	movw	r20, r22
    abd6:	5f 70       	andi	r21, 0x0F	; 15
    abd8:	dc 01       	movw	r26, r24
    abda:	1c 96       	adiw	r26, 0x0c	; 12
    abdc:	ed 91       	ld	r30, X+
    abde:	fc 91       	ld	r31, X
    abe0:	1d 97       	sbiw	r26, 0x0d	; 13
    abe2:	64 8d       	ldd	r22, Z+28	; 0x1c
    abe4:	75 8d       	ldd	r23, Z+29	; 0x1d
    abe6:	20 e0       	ldi	r18, 0x00	; 0
    abe8:	30 e0       	ldi	r19, 0x00	; 0
    abea:	b1 cf       	rjmp	.-158    	; 0xab4e <push_rule>
    abec:	08 95       	ret

0000abee <scope_find_or_add_id>:
    abee:	ff 92       	push	r15
    abf0:	0f 93       	push	r16
    abf2:	1f 93       	push	r17
    abf4:	cf 93       	push	r28
    abf6:	df 93       	push	r29
    abf8:	ec 01       	movw	r28, r24
    abfa:	8b 01       	movw	r16, r22
    abfc:	f4 2e       	mov	r15, r20
    abfe:	0e 94 7e 11 	call	0x22fc	; 0x22fc <scope_find>
    ac02:	00 97       	sbiw	r24, 0x00	; 0
    ac04:	a9 f5       	brne	.+106    	; 0xac70 <scope_find_or_add_id+0x82>
    ac06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ac08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ac0a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    ac0c:	38 a1       	ldd	r19, Y+32	; 0x20
    ac0e:	28 17       	cp	r18, r24
    ac10:	39 07       	cpc	r19, r25
    ac12:	a0 f0       	brcs	.+40     	; 0xac3c <scope_find_or_add_id+0x4e>
    ac14:	bc 01       	movw	r22, r24
    ac16:	66 0f       	add	r22, r22
    ac18:	77 1f       	adc	r23, r23
    ac1a:	68 0f       	add	r22, r24
    ac1c:	79 1f       	adc	r23, r25
    ac1e:	66 0f       	add	r22, r22
    ac20:	77 1f       	adc	r23, r23
    ac22:	6c 5d       	subi	r22, 0xDC	; 220
    ac24:	7f 4f       	sbci	r23, 0xFF	; 255
    ac26:	89 a1       	ldd	r24, Y+33	; 0x21
    ac28:	9a a1       	ldd	r25, Y+34	; 0x22
    ac2a:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
    ac2e:	9a a3       	std	Y+34, r25	; 0x22
    ac30:	89 a3       	std	Y+33, r24	; 0x21
    ac32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    ac34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    ac36:	06 96       	adiw	r24, 0x06	; 6
    ac38:	9e 8f       	std	Y+30, r25	; 0x1e
    ac3a:	8d 8f       	std	Y+29, r24	; 0x1d
    ac3c:	e9 a1       	ldd	r30, Y+33	; 0x21
    ac3e:	fa a1       	ldd	r31, Y+34	; 0x22
    ac40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    ac42:	98 a1       	ldd	r25, Y+32	; 0x20
    ac44:	9c 01       	movw	r18, r24
    ac46:	2f 5f       	subi	r18, 0xFF	; 255
    ac48:	3f 4f       	sbci	r19, 0xFF	; 255
    ac4a:	38 a3       	std	Y+32, r19	; 0x20
    ac4c:	2f 8f       	std	Y+31, r18	; 0x1f
    ac4e:	9c 01       	movw	r18, r24
    ac50:	22 0f       	add	r18, r18
    ac52:	33 1f       	adc	r19, r19
    ac54:	82 0f       	add	r24, r18
    ac56:	93 1f       	adc	r25, r19
    ac58:	88 0f       	add	r24, r24
    ac5a:	99 1f       	adc	r25, r25
    ac5c:	e8 0f       	add	r30, r24
    ac5e:	f9 1f       	adc	r31, r25
    ac60:	f0 82       	st	Z, r15
    ac62:	11 82       	std	Z+1, r1	; 0x01
    ac64:	13 82       	std	Z+3, r1	; 0x03
    ac66:	12 82       	std	Z+2, r1	; 0x02
    ac68:	15 83       	std	Z+5, r17	; 0x05
    ac6a:	04 83       	std	Z+4, r16	; 0x04
    ac6c:	8e 2f       	mov	r24, r30
    ac6e:	9f 2f       	mov	r25, r31
    ac70:	df 91       	pop	r29
    ac72:	cf 91       	pop	r28
    ac74:	1f 91       	pop	r17
    ac76:	0f 91       	pop	r16
    ac78:	ff 90       	pop	r15
    ac7a:	08 95       	ret

0000ac7c <scope_check_to_close_over>:
    ac7c:	cf 92       	push	r12
    ac7e:	df 92       	push	r13
    ac80:	ef 92       	push	r14
    ac82:	ff 92       	push	r15
    ac84:	0f 93       	push	r16
    ac86:	1f 93       	push	r17
    ac88:	cf 93       	push	r28
    ac8a:	df 93       	push	r29
    ac8c:	6c 01       	movw	r12, r24
    ac8e:	7b 01       	movw	r14, r22
    ac90:	dc 01       	movw	r26, r24
    ac92:	11 96       	adiw	r26, 0x01	; 1
    ac94:	ed 91       	ld	r30, X+
    ac96:	fc 91       	ld	r31, X
    ac98:	12 97       	sbiw	r26, 0x02	; 2
    ac9a:	30 97       	sbiw	r30, 0x00	; 0
    ac9c:	09 f0       	breq	.+2      	; 0xaca0 <scope_check_to_close_over+0x24>
    ac9e:	43 c0       	rjmp	.+134    	; 0xad26 <scope_check_to_close_over+0xaa>
    aca0:	47 c0       	rjmp	.+142    	; 0xad30 <scope_check_to_close_over+0xb4>
    aca2:	d7 01       	movw	r26, r14
    aca4:	14 96       	adiw	r26, 0x04	; 4
    aca6:	0d 91       	ld	r16, X+
    aca8:	1c 91       	ld	r17, X
    acaa:	15 97       	sbiw	r26, 0x05	; 5
    acac:	b8 01       	movw	r22, r16
    acae:	cf 01       	movw	r24, r30
    acb0:	0e 94 7e 11 	call	0x22fc	; 0x22fc <scope_find>
    acb4:	fe 01       	movw	r30, r28
    acb6:	00 97       	sbiw	r24, 0x00	; 0
    acb8:	b1 f1       	breq	.+108    	; 0xad26 <scope_check_to_close_over+0xaa>
    acba:	fc 01       	movw	r30, r24
    acbc:	80 81       	ld	r24, Z
    acbe:	83 50       	subi	r24, 0x03	; 3
    acc0:	83 30       	cpi	r24, 0x03	; 3
    acc2:	b0 f5       	brcc	.+108    	; 0xad30 <scope_check_to_close_over+0xb4>
    acc4:	85 e0       	ldi	r24, 0x05	; 5
    acc6:	d7 01       	movw	r26, r14
    acc8:	8c 93       	st	X, r24
    acca:	f6 01       	movw	r30, r12
    accc:	c1 81       	ldd	r28, Z+1	; 0x01
    acce:	d2 81       	ldd	r29, Z+2	; 0x02
    acd0:	20 97       	sbiw	r28, 0x00	; 0
    acd2:	49 f0       	breq	.+18     	; 0xace6 <scope_check_to_close_over+0x6a>
    acd4:	89 81       	ldd	r24, Y+1	; 0x01
    acd6:	9a 81       	ldd	r25, Y+2	; 0x02
    acd8:	89 2b       	or	r24, r25
    acda:	39 f0       	breq	.+14     	; 0xacea <scope_check_to_close_over+0x6e>
    acdc:	0f 2e       	mov	r0, r31
    acde:	f5 e0       	ldi	r31, 0x05	; 5
    ace0:	ff 2e       	mov	r15, r31
    ace2:	f0 2d       	mov	r31, r0
    ace4:	04 c0       	rjmp	.+8      	; 0xacee <scope_check_to_close_over+0x72>
    ace6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    acea:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    acee:	40 e0       	ldi	r20, 0x00	; 0
    acf0:	b8 01       	movw	r22, r16
    acf2:	ce 01       	movw	r24, r28
    acf4:	7c df       	rcall	.-264    	; 0xabee <scope_find_or_add_id>
    acf6:	dc 01       	movw	r26, r24
    acf8:	2c 91       	ld	r18, X
    acfa:	21 11       	cpse	r18, r1
    acfc:	09 c0       	rjmp	.+18     	; 0xad10 <scope_check_to_close_over+0x94>
    acfe:	fc 92       	st	X, r15
    ad00:	09 80       	ldd	r0, Y+1	; 0x01
    ad02:	da 81       	ldd	r29, Y+2	; 0x02
    ad04:	c0 2d       	mov	r28, r0
    ad06:	89 81       	ldd	r24, Y+1	; 0x01
    ad08:	9a 81       	ldd	r25, Y+2	; 0x02
    ad0a:	89 2b       	or	r24, r25
    ad0c:	81 f7       	brne	.-32     	; 0xacee <scope_check_to_close_over+0x72>
    ad0e:	ed cf       	rjmp	.-38     	; 0xacea <scope_check_to_close_over+0x6e>
    ad10:	23 30       	cpi	r18, 0x03	; 3
    ad12:	21 f4       	brne	.+8      	; 0xad1c <scope_check_to_close_over+0xa0>
    ad14:	24 e0       	ldi	r18, 0x04	; 4
    ad16:	fc 01       	movw	r30, r24
    ad18:	20 83       	st	Z, r18
    ad1a:	0a c0       	rjmp	.+20     	; 0xad30 <scope_check_to_close_over+0xb4>
    ad1c:	24 50       	subi	r18, 0x04	; 4
    ad1e:	22 30       	cpi	r18, 0x02	; 2
    ad20:	38 f0       	brcs	.+14     	; 0xad30 <scope_check_to_close_over+0xb4>
    ad22:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ad26:	c1 81       	ldd	r28, Z+1	; 0x01
    ad28:	d2 81       	ldd	r29, Z+2	; 0x02
    ad2a:	20 97       	sbiw	r28, 0x00	; 0
    ad2c:	09 f0       	breq	.+2      	; 0xad30 <scope_check_to_close_over+0xb4>
    ad2e:	b9 cf       	rjmp	.-142    	; 0xaca2 <scope_check_to_close_over+0x26>
    ad30:	df 91       	pop	r29
    ad32:	cf 91       	pop	r28
    ad34:	1f 91       	pop	r17
    ad36:	0f 91       	pop	r16
    ad38:	ff 90       	pop	r15
    ad3a:	ef 90       	pop	r14
    ad3c:	df 90       	pop	r13
    ad3e:	cf 90       	pop	r12
    ad40:	08 95       	ret

0000ad42 <compile_scope_func_lambda_param>:
    ad42:	cf 92       	push	r12
    ad44:	df 92       	push	r13
    ad46:	ef 92       	push	r14
    ad48:	ff 92       	push	r15
    ad4a:	0f 93       	push	r16
    ad4c:	1f 93       	push	r17
    ad4e:	cf 93       	push	r28
    ad50:	df 93       	push	r29
    ad52:	7c 01       	movw	r14, r24
    ad54:	eb 01       	movw	r28, r22
    ad56:	dc 01       	movw	r26, r24
    ad58:	59 96       	adiw	r26, 0x19	; 25
    ad5a:	ed 91       	ld	r30, X+
    ad5c:	fc 91       	ld	r31, X
    ad5e:	5a 97       	sbiw	r26, 0x1a	; 26
    ad60:	c5 84       	ldd	r12, Z+13	; 0x0d
    ad62:	d6 84       	ldd	r13, Z+14	; 0x0e
    ad64:	c1 fe       	sbrs	r12, 1
    ad66:	05 c0       	rjmp	.+10     	; 0xad72 <compile_scope_func_lambda_param+0x30>
    ad68:	47 e0       	ldi	r20, 0x07	; 7
    ad6a:	58 e0       	ldi	r21, 0x08	; 8
    ad6c:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    ad70:	cd c0       	rjmp	.+410    	; 0xaf0c <compile_scope_func_lambda_param+0x1ca>
    ad72:	cb 01       	movw	r24, r22
    ad74:	8f 70       	andi	r24, 0x0F	; 15
    ad76:	99 27       	eor	r25, r25
    ad78:	02 97       	sbiw	r24, 0x02	; 2
    ad7a:	c9 f4       	brne	.+50     	; 0xadae <compile_scope_func_lambda_param+0x6c>
    ad7c:	72 95       	swap	r23
    ad7e:	62 95       	swap	r22
    ad80:	6f 70       	andi	r22, 0x0F	; 15
    ad82:	67 27       	eor	r22, r23
    ad84:	7f 70       	andi	r23, 0x0F	; 15
    ad86:	67 27       	eor	r22, r23
    ad88:	d7 01       	movw	r26, r14
    ad8a:	14 96       	adiw	r26, 0x04	; 4
    ad8c:	8c 91       	ld	r24, X
    ad8e:	88 23       	and	r24, r24
    ad90:	39 f0       	breq	.+14     	; 0xada0 <compile_scope_func_lambda_param+0x5e>
    ad92:	83 89       	ldd	r24, Z+19	; 0x13
    ad94:	94 89       	ldd	r25, Z+20	; 0x14
    ad96:	01 96       	adiw	r24, 0x01	; 1
    ad98:	94 8b       	std	Z+20, r25	; 0x14
    ad9a:	83 8b       	std	Z+19, r24	; 0x13
    ad9c:	11 e0       	ldi	r17, 0x01	; 1
    ad9e:	a0 c0       	rjmp	.+320    	; 0xaee0 <compile_scope_func_lambda_param+0x19e>
    ada0:	81 89       	ldd	r24, Z+17	; 0x11
    ada2:	92 89       	ldd	r25, Z+18	; 0x12
    ada4:	01 96       	adiw	r24, 0x01	; 1
    ada6:	92 8b       	std	Z+18, r25	; 0x12
    ada8:	81 8b       	std	Z+17, r24	; 0x11
    adaa:	11 e0       	ldi	r17, 0x01	; 1
    adac:	99 c0       	rjmp	.+306    	; 0xaee0 <compile_scope_func_lambda_param+0x19e>
    adae:	20 97       	sbiw	r28, 0x00	; 0
    adb0:	29 f0       	breq	.+10     	; 0xadbc <compile_scope_func_lambda_param+0x7a>
    adb2:	cb 01       	movw	r24, r22
    adb4:	83 70       	andi	r24, 0x03	; 3
    adb6:	99 27       	eor	r25, r25
    adb8:	89 2b       	or	r24, r25
    adba:	11 f0       	breq	.+4      	; 0xadc0 <compile_scope_func_lambda_param+0x7e>
    adbc:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    adc0:	8c 81       	ldd	r24, Y+4	; 0x04
    adc2:	9d 81       	ldd	r25, Y+5	; 0x05
    adc4:	ae 81       	ldd	r26, Y+6	; 0x06
    adc6:	bf 81       	ldd	r27, Y+7	; 0x07
    adc8:	99 27       	eor	r25, r25
    adca:	aa 27       	eor	r26, r26
    adcc:	bb 27       	eor	r27, r27
    adce:	50 e0       	ldi	r21, 0x00	; 0
    add0:	60 e0       	ldi	r22, 0x00	; 0
    add2:	70 e0       	ldi	r23, 0x00	; 0
    add4:	84 17       	cp	r24, r20
    add6:	95 07       	cpc	r25, r21
    add8:	a6 07       	cpc	r26, r22
    adda:	b7 07       	cpc	r27, r23
    addc:	d9 f4       	brne	.+54     	; 0xae14 <compile_scope_func_lambda_param+0xd2>
    adde:	68 85       	ldd	r22, Y+8	; 0x08
    ade0:	79 85       	ldd	r23, Y+9	; 0x09
    ade2:	72 95       	swap	r23
    ade4:	62 95       	swap	r22
    ade6:	6f 70       	andi	r22, 0x0F	; 15
    ade8:	67 27       	eor	r22, r23
    adea:	7f 70       	andi	r23, 0x0F	; 15
    adec:	67 27       	eor	r22, r23
    adee:	d7 01       	movw	r26, r14
    adf0:	14 96       	adiw	r26, 0x04	; 4
    adf2:	8c 91       	ld	r24, X
    adf4:	88 23       	and	r24, r24
    adf6:	39 f0       	breq	.+14     	; 0xae06 <compile_scope_func_lambda_param+0xc4>
    adf8:	83 89       	ldd	r24, Z+19	; 0x13
    adfa:	94 89       	ldd	r25, Z+20	; 0x14
    adfc:	01 96       	adiw	r24, 0x01	; 1
    adfe:	94 8b       	std	Z+20, r25	; 0x14
    ae00:	83 8b       	std	Z+19, r24	; 0x13
    ae02:	11 e0       	ldi	r17, 0x01	; 1
    ae04:	6d c0       	rjmp	.+218    	; 0xaee0 <compile_scope_func_lambda_param+0x19e>
    ae06:	81 89       	ldd	r24, Z+17	; 0x11
    ae08:	92 89       	ldd	r25, Z+18	; 0x12
    ae0a:	01 96       	adiw	r24, 0x01	; 1
    ae0c:	92 8b       	std	Z+18, r25	; 0x12
    ae0e:	81 8b       	std	Z+17, r24	; 0x11
    ae10:	11 e0       	ldi	r17, 0x01	; 1
    ae12:	66 c0       	rjmp	.+204    	; 0xaee0 <compile_scope_func_lambda_param+0x19e>
    ae14:	42 2f       	mov	r20, r18
    ae16:	50 e0       	ldi	r21, 0x00	; 0
    ae18:	60 e0       	ldi	r22, 0x00	; 0
    ae1a:	70 e0       	ldi	r23, 0x00	; 0
    ae1c:	84 17       	cp	r24, r20
    ae1e:	95 07       	cpc	r25, r21
    ae20:	a6 07       	cpc	r26, r22
    ae22:	b7 07       	cpc	r27, r23
    ae24:	09 f0       	breq	.+2      	; 0xae28 <compile_scope_func_lambda_param+0xe6>
    ae26:	45 c0       	rjmp	.+138    	; 0xaeb2 <compile_scope_func_lambda_param+0x170>
    ae28:	d7 01       	movw	r26, r14
    ae2a:	14 96       	adiw	r26, 0x04	; 4
    ae2c:	8c 91       	ld	r24, X
    ae2e:	88 23       	and	r24, r24
    ae30:	39 f0       	breq	.+14     	; 0xae40 <compile_scope_func_lambda_param+0xfe>
    ae32:	47 e0       	ldi	r20, 0x07	; 7
    ae34:	58 e0       	ldi	r21, 0x08	; 8
    ae36:	be 01       	movw	r22, r28
    ae38:	c7 01       	movw	r24, r14
    ae3a:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    ae3e:	66 c0       	rjmp	.+204    	; 0xaf0c <compile_scope_func_lambda_param+0x1ca>
    ae40:	81 e0       	ldi	r24, 0x01	; 1
    ae42:	d7 01       	movw	r26, r14
    ae44:	14 96       	adiw	r26, 0x04	; 4
    ae46:	8c 93       	st	X, r24
    ae48:	a8 85       	ldd	r26, Y+8	; 0x08
    ae4a:	b9 85       	ldd	r27, Y+9	; 0x09
    ae4c:	10 97       	sbiw	r26, 0x00	; 0
    ae4e:	09 f4       	brne	.+2      	; 0xae52 <compile_scope_func_lambda_param+0x110>
    ae50:	5d c0       	rjmp	.+186    	; 0xaf0c <compile_scope_func_lambda_param+0x1ca>
    ae52:	cd 01       	movw	r24, r26
    ae54:	8f 70       	andi	r24, 0x0F	; 15
    ae56:	99 27       	eor	r25, r25
    ae58:	02 97       	sbiw	r24, 0x02	; 2
    ae5a:	79 f4       	brne	.+30     	; 0xae7a <compile_scope_func_lambda_param+0x138>
    ae5c:	85 85       	ldd	r24, Z+13	; 0x0d
    ae5e:	96 85       	ldd	r25, Z+14	; 0x0e
    ae60:	84 60       	ori	r24, 0x04	; 4
    ae62:	96 87       	std	Z+14, r25	; 0x0e
    ae64:	85 87       	std	Z+13, r24	; 0x0d
    ae66:	68 85       	ldd	r22, Y+8	; 0x08
    ae68:	79 85       	ldd	r23, Y+9	; 0x09
    ae6a:	72 95       	swap	r23
    ae6c:	62 95       	swap	r22
    ae6e:	6f 70       	andi	r22, 0x0F	; 15
    ae70:	67 27       	eor	r22, r23
    ae72:	7f 70       	andi	r23, 0x0F	; 15
    ae74:	67 27       	eor	r22, r23
    ae76:	13 e0       	ldi	r17, 0x03	; 3
    ae78:	33 c0       	rjmp	.+102    	; 0xaee0 <compile_scope_func_lambda_param+0x19e>
    ae7a:	cd 01       	movw	r24, r26
    ae7c:	83 70       	andi	r24, 0x03	; 3
    ae7e:	99 27       	eor	r25, r25
    ae80:	89 2b       	or	r24, r25
    ae82:	21 f4       	brne	.+8      	; 0xae8c <compile_scope_func_lambda_param+0x14a>
    ae84:	14 96       	adiw	r26, 0x04	; 4
    ae86:	8c 91       	ld	r24, X
    ae88:	85 34       	cpi	r24, 0x45	; 69
    ae8a:	11 f0       	breq	.+4      	; 0xae90 <compile_scope_func_lambda_param+0x14e>
    ae8c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ae90:	85 85       	ldd	r24, Z+13	; 0x0d
    ae92:	96 85       	ldd	r25, Z+14	; 0x0e
    ae94:	84 60       	ori	r24, 0x04	; 4
    ae96:	96 87       	std	Z+14, r25	; 0x0e
    ae98:	85 87       	std	Z+13, r24	; 0x0d
    ae9a:	e8 85       	ldd	r30, Y+8	; 0x08
    ae9c:	f9 85       	ldd	r31, Y+9	; 0x09
    ae9e:	60 85       	ldd	r22, Z+8	; 0x08
    aea0:	71 85       	ldd	r23, Z+9	; 0x09
    aea2:	72 95       	swap	r23
    aea4:	62 95       	swap	r22
    aea6:	6f 70       	andi	r22, 0x0F	; 15
    aea8:	67 27       	eor	r22, r23
    aeaa:	7f 70       	andi	r23, 0x0F	; 15
    aeac:	67 27       	eor	r22, r23
    aeae:	13 e0       	ldi	r17, 0x03	; 3
    aeb0:	17 c0       	rjmp	.+46     	; 0xaee0 <compile_scope_func_lambda_param+0x19e>
    aeb2:	10 e0       	ldi	r17, 0x00	; 0
    aeb4:	20 e0       	ldi	r18, 0x00	; 0
    aeb6:	30 e0       	ldi	r19, 0x00	; 0
    aeb8:	80 17       	cp	r24, r16
    aeba:	91 07       	cpc	r25, r17
    aebc:	a2 07       	cpc	r26, r18
    aebe:	b3 07       	cpc	r27, r19
    aec0:	11 f0       	breq	.+4      	; 0xaec6 <compile_scope_func_lambda_param+0x184>
    aec2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    aec6:	68 85       	ldd	r22, Y+8	; 0x08
    aec8:	79 85       	ldd	r23, Y+9	; 0x09
    aeca:	72 95       	swap	r23
    aecc:	62 95       	swap	r22
    aece:	6f 70       	andi	r22, 0x0F	; 15
    aed0:	67 27       	eor	r22, r23
    aed2:	7f 70       	andi	r23, 0x0F	; 15
    aed4:	67 27       	eor	r22, r23
    aed6:	68 94       	set
    aed8:	c1 f8       	bld	r12, 1
    aeda:	d6 86       	std	Z+14, r13	; 0x0e
    aedc:	c5 86       	std	Z+13, r12	; 0x0d
    aede:	15 e0       	ldi	r17, 0x05	; 5
    aee0:	61 15       	cp	r22, r1
    aee2:	71 05       	cpc	r23, r1
    aee4:	99 f0       	breq	.+38     	; 0xaf0c <compile_scope_func_lambda_param+0x1ca>
    aee6:	40 e0       	ldi	r20, 0x00	; 0
    aee8:	f7 01       	movw	r30, r14
    aeea:	81 8d       	ldd	r24, Z+25	; 0x19
    aeec:	92 8d       	ldd	r25, Z+26	; 0x1a
    aeee:	7f de       	rcall	.-770    	; 0xabee <scope_find_or_add_id>
    aef0:	fc 01       	movw	r30, r24
    aef2:	80 81       	ld	r24, Z
    aef4:	88 23       	and	r24, r24
    aef6:	39 f0       	breq	.+14     	; 0xaf06 <compile_scope_func_lambda_param+0x1c4>
    aef8:	46 e1       	ldi	r20, 0x16	; 22
    aefa:	58 e0       	ldi	r21, 0x08	; 8
    aefc:	be 01       	movw	r22, r28
    aefe:	c7 01       	movw	r24, r14
    af00:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    af04:	03 c0       	rjmp	.+6      	; 0xaf0c <compile_scope_func_lambda_param+0x1ca>
    af06:	83 e0       	ldi	r24, 0x03	; 3
    af08:	80 83       	st	Z, r24
    af0a:	11 83       	std	Z+1, r17	; 0x01
    af0c:	df 91       	pop	r29
    af0e:	cf 91       	pop	r28
    af10:	1f 91       	pop	r17
    af12:	0f 91       	pop	r16
    af14:	ff 90       	pop	r15
    af16:	ef 90       	pop	r14
    af18:	df 90       	pop	r13
    af1a:	cf 90       	pop	r12
    af1c:	08 95       	ret

0000af1e <compile_scope_lambda_param>:
    af1e:	0f 93       	push	r16
    af20:	0a e4       	ldi	r16, 0x4A	; 74
    af22:	29 e4       	ldi	r18, 0x49	; 73
    af24:	48 e4       	ldi	r20, 0x48	; 72
    af26:	0d df       	rcall	.-486    	; 0xad42 <compile_scope_func_lambda_param>
    af28:	0f 91       	pop	r16
    af2a:	08 95       	ret

0000af2c <compile_scope_func_param>:
    af2c:	0f 93       	push	r16
    af2e:	04 e4       	ldi	r16, 0x44	; 68
    af30:	23 e4       	ldi	r18, 0x43	; 67
    af32:	42 e4       	ldi	r20, 0x42	; 66
    af34:	06 df       	rcall	.-500    	; 0xad42 <compile_scope_func_lambda_param>
    af36:	0f 91       	pop	r16
    af38:	08 95       	ret

0000af3a <compile_load_id>:
    af3a:	fc 01       	movw	r30, r24
    af3c:	83 81       	ldd	r24, Z+3	; 0x03
    af3e:	81 30       	cpi	r24, 0x01	; 1
    af40:	29 f4       	brne	.+10     	; 0xaf4c <compile_load_id+0x12>
    af42:	41 e0       	ldi	r20, 0x01	; 1
    af44:	81 8d       	ldd	r24, Z+25	; 0x19
    af46:	92 8d       	ldd	r25, Z+26	; 0x1a
    af48:	52 ce       	rjmp	.-860    	; 0xabee <scope_find_or_add_id>
    af4a:	08 95       	ret
    af4c:	41 8d       	ldd	r20, Z+25	; 0x19
    af4e:	52 8d       	ldd	r21, Z+26	; 0x1a
    af50:	9b 01       	movw	r18, r22
    af52:	66 e2       	ldi	r22, 0x26	; 38
    af54:	74 e2       	ldi	r23, 0x24	; 36
    af56:	83 8d       	ldd	r24, Z+27	; 0x1b
    af58:	94 8d       	ldd	r25, Z+28	; 0x1c
    af5a:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <mp_emit_common_id_op>
    af5e:	08 95       	ret

0000af60 <compile_node>:
    af60:	0f 93       	push	r16
    af62:	1f 93       	push	r17
    af64:	cf 93       	push	r28
    af66:	df 93       	push	r29
    af68:	00 d0       	rcall	.+0      	; 0xaf6a <compile_node+0xa>
    af6a:	cd b7       	in	r28, 0x3d	; 61
    af6c:	de b7       	in	r29, 0x3e	; 62
    af6e:	61 15       	cp	r22, r1
    af70:	71 05       	cpc	r23, r1
    af72:	09 f4       	brne	.+2      	; 0xaf76 <compile_node+0x16>
    af74:	6c c0       	rjmp	.+216    	; 0xb04e <compile_node+0xee>
    af76:	8c 01       	movw	r16, r24
    af78:	60 ff       	sbrs	r22, 0
    af7a:	08 c0       	rjmp	.+16     	; 0xaf8c <compile_node+0x2c>
    af7c:	75 95       	asr	r23
    af7e:	67 95       	ror	r22
    af80:	fc 01       	movw	r30, r24
    af82:	83 8d       	ldd	r24, Z+27	; 0x1b
    af84:	94 8d       	ldd	r25, Z+28	; 0x1c
    af86:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <mp_emit_bc_load_const_small_int>
    af8a:	61 c0       	rjmp	.+194    	; 0xb04e <compile_node+0xee>
    af8c:	cb 01       	movw	r24, r22
    af8e:	83 70       	andi	r24, 0x03	; 3
    af90:	99 27       	eor	r25, r25
    af92:	89 2b       	or	r24, r25
    af94:	09 f4       	brne	.+2      	; 0xaf98 <compile_node+0x38>
    af96:	42 c0       	rjmp	.+132    	; 0xb01c <compile_node+0xbc>
    af98:	cb 01       	movw	r24, r22
    af9a:	92 95       	swap	r25
    af9c:	82 95       	swap	r24
    af9e:	8f 70       	andi	r24, 0x0F	; 15
    afa0:	89 27       	eor	r24, r25
    afa2:	9f 70       	andi	r25, 0x0F	; 15
    afa4:	89 27       	eor	r24, r25
    afa6:	6f 70       	andi	r22, 0x0F	; 15
    afa8:	77 27       	eor	r23, r23
    afaa:	66 30       	cpi	r22, 0x06	; 6
    afac:	71 05       	cpc	r23, r1
    afae:	51 f0       	breq	.+20     	; 0xafc4 <compile_node+0x64>
    afb0:	6a 30       	cpi	r22, 0x0A	; 10
    afb2:	71 05       	cpc	r23, r1
    afb4:	71 f0       	breq	.+28     	; 0xafd2 <compile_node+0x72>
    afb6:	62 30       	cpi	r22, 0x02	; 2
    afb8:	71 05       	cpc	r23, r1
    afba:	31 f5       	brne	.+76     	; 0xb008 <compile_node+0xa8>
    afbc:	bc 01       	movw	r22, r24
    afbe:	c8 01       	movw	r24, r16
    afc0:	bc df       	rcall	.-136    	; 0xaf3a <compile_load_id>
    afc2:	45 c0       	rjmp	.+138    	; 0xb04e <compile_node+0xee>
    afc4:	bc 01       	movw	r22, r24
    afc6:	f8 01       	movw	r30, r16
    afc8:	83 8d       	ldd	r24, Z+27	; 0x1b
    afca:	94 8d       	ldd	r25, Z+28	; 0x1c
    afcc:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
    afd0:	3e c0       	rjmp	.+124    	; 0xb04e <compile_node+0xee>
    afd2:	f8 01       	movw	r30, r16
    afd4:	23 81       	ldd	r18, Z+3	; 0x03
    afd6:	24 30       	cpi	r18, 0x04	; 4
    afd8:	39 f0       	breq	.+14     	; 0xafe8 <compile_node+0x88>
    afda:	66 e0       	ldi	r22, 0x06	; 6
    afdc:	70 e0       	ldi	r23, 0x00	; 0
    afde:	83 8d       	ldd	r24, Z+27	; 0x1b
    afe0:	94 8d       	ldd	r25, Z+28	; 0x1c
    afe2:	0e 94 02 16 	call	0x2c04	; 0x2c04 <mp_emit_bc_load_const_obj>
    afe6:	33 c0       	rjmp	.+102    	; 0xb04e <compile_node+0xee>
    afe8:	be 01       	movw	r22, r28
    afea:	6f 5f       	subi	r22, 0xFF	; 255
    afec:	7f 4f       	sbci	r23, 0xFF	; 255
    afee:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    aff2:	69 81       	ldd	r22, Y+1	; 0x01
    aff4:	7a 81       	ldd	r23, Y+2	; 0x02
    aff6:	0e 94 a8 38 	call	0x7150	; 0x7150 <mp_obj_new_bytes>
    affa:	bc 01       	movw	r22, r24
    affc:	f8 01       	movw	r30, r16
    affe:	83 8d       	ldd	r24, Z+27	; 0x1b
    b000:	94 8d       	ldd	r25, Z+28	; 0x1c
    b002:	0e 94 02 16 	call	0x2c04	; 0x2c04 <mp_emit_bc_load_const_obj>
    b006:	23 c0       	rjmp	.+70     	; 0xb04e <compile_node+0xee>
    b008:	84 30       	cpi	r24, 0x04	; 4
    b00a:	91 05       	cpc	r25, r1
    b00c:	01 f1       	breq	.+64     	; 0xb04e <compile_node+0xee>
    b00e:	68 2f       	mov	r22, r24
    b010:	f8 01       	movw	r30, r16
    b012:	83 8d       	ldd	r24, Z+27	; 0x1b
    b014:	94 8d       	ldd	r25, Z+28	; 0x1c
    b016:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    b01a:	19 c0       	rjmp	.+50     	; 0xb04e <compile_node+0xee>
    b01c:	fb 01       	movw	r30, r22
    b01e:	84 81       	ldd	r24, Z+4	; 0x04
    b020:	95 81       	ldd	r25, Z+5	; 0x05
    b022:	a6 81       	ldd	r26, Z+6	; 0x06
    b024:	b7 81       	ldd	r27, Z+7	; 0x07
    b026:	99 27       	eor	r25, r25
    b028:	aa 27       	eor	r26, r26
    b02a:	bb 27       	eor	r27, r27
    b02c:	86 33       	cpi	r24, 0x36	; 54
    b02e:	91 05       	cpc	r25, r1
    b030:	a1 05       	cpc	r26, r1
    b032:	b1 05       	cpc	r27, r1
    b034:	10 f0       	brcs	.+4      	; 0xb03a <compile_node+0xda>
    b036:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b03a:	88 0f       	add	r24, r24
    b03c:	99 1f       	adc	r25, r25
    b03e:	fc 01       	movw	r30, r24
    b040:	e6 5d       	subi	r30, 0xD6	; 214
    b042:	fb 4d       	sbci	r31, 0xDB	; 219
    b044:	01 90       	ld	r0, Z+
    b046:	f0 81       	ld	r31, Z
    b048:	e0 2d       	mov	r30, r0
    b04a:	c8 01       	movw	r24, r16
    b04c:	09 95       	icall
    b04e:	0f 90       	pop	r0
    b050:	0f 90       	pop	r0
    b052:	df 91       	pop	r29
    b054:	cf 91       	pop	r28
    b056:	1f 91       	pop	r17
    b058:	0f 91       	pop	r16
    b05a:	08 95       	ret

0000b05c <c_if_cond>:
    b05c:	4f 92       	push	r4
    b05e:	5f 92       	push	r5
    b060:	6f 92       	push	r6
    b062:	7f 92       	push	r7
    b064:	8f 92       	push	r8
    b066:	9f 92       	push	r9
    b068:	af 92       	push	r10
    b06a:	bf 92       	push	r11
    b06c:	cf 92       	push	r12
    b06e:	df 92       	push	r13
    b070:	ef 92       	push	r14
    b072:	ff 92       	push	r15
    b074:	0f 93       	push	r16
    b076:	1f 93       	push	r17
    b078:	cf 93       	push	r28
    b07a:	df 93       	push	r29
    b07c:	8c 01       	movw	r16, r24
    b07e:	eb 01       	movw	r28, r22
    b080:	54 2e       	mov	r5, r20
    b082:	79 01       	movw	r14, r18
    b084:	cb 01       	movw	r24, r22
    b086:	0e 94 f5 10 	call	0x21ea	; 0x21ea <mp_parse_node_is_const_false>
    b08a:	88 23       	and	r24, r24
    b08c:	49 f0       	breq	.+18     	; 0xb0a0 <c_if_cond+0x44>
    b08e:	51 10       	cpse	r5, r1
    b090:	cb c0       	rjmp	.+406    	; 0xb228 <c_if_cond+0x1cc>
    b092:	b7 01       	movw	r22, r14
    b094:	f8 01       	movw	r30, r16
    b096:	83 8d       	ldd	r24, Z+27	; 0x1b
    b098:	94 8d       	ldd	r25, Z+28	; 0x1c
    b09a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    b09e:	c4 c0       	rjmp	.+392    	; 0xb228 <c_if_cond+0x1cc>
    b0a0:	ce 01       	movw	r24, r28
    b0a2:	0e 94 07 11 	call	0x220e	; 0x220e <mp_parse_node_is_const_true>
    b0a6:	88 23       	and	r24, r24
    b0a8:	51 f0       	breq	.+20     	; 0xb0be <c_if_cond+0x62>
    b0aa:	55 20       	and	r5, r5
    b0ac:	09 f4       	brne	.+2      	; 0xb0b0 <c_if_cond+0x54>
    b0ae:	bc c0       	rjmp	.+376    	; 0xb228 <c_if_cond+0x1cc>
    b0b0:	b7 01       	movw	r22, r14
    b0b2:	f8 01       	movw	r30, r16
    b0b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    b0b6:	94 8d       	ldd	r25, Z+28	; 0x1c
    b0b8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    b0bc:	b5 c0       	rjmp	.+362    	; 0xb228 <c_if_cond+0x1cc>
    b0be:	20 97       	sbiw	r28, 0x00	; 0
    b0c0:	09 f4       	brne	.+2      	; 0xb0c4 <c_if_cond+0x68>
    b0c2:	a8 c0       	rjmp	.+336    	; 0xb214 <c_if_cond+0x1b8>
    b0c4:	ce 01       	movw	r24, r28
    b0c6:	83 70       	andi	r24, 0x03	; 3
    b0c8:	99 27       	eor	r25, r25
    b0ca:	89 2b       	or	r24, r25
    b0cc:	09 f0       	breq	.+2      	; 0xb0d0 <c_if_cond+0x74>
    b0ce:	a2 c0       	rjmp	.+324    	; 0xb214 <c_if_cond+0x1b8>
    b0d0:	4c 81       	ldd	r20, Y+4	; 0x04
    b0d2:	5d 81       	ldd	r21, Y+5	; 0x05
    b0d4:	6e 81       	ldd	r22, Y+6	; 0x06
    b0d6:	7f 81       	ldd	r23, Y+7	; 0x07
    b0d8:	bb 27       	eor	r27, r27
    b0da:	a7 2f       	mov	r26, r23
    b0dc:	96 2f       	mov	r25, r22
    b0de:	85 2f       	mov	r24, r21
    b0e0:	9c 01       	movw	r18, r24
    b0e2:	55 27       	eor	r21, r21
    b0e4:	66 27       	eor	r22, r22
    b0e6:	77 27       	eor	r23, r23
    b0e8:	4c 31       	cpi	r20, 0x1C	; 28
    b0ea:	51 05       	cpc	r21, r1
    b0ec:	61 05       	cpc	r22, r1
    b0ee:	71 05       	cpc	r23, r1
    b0f0:	09 f0       	breq	.+2      	; 0xb0f4 <c_if_cond+0x98>
    b0f2:	56 c0       	rjmp	.+172    	; 0xb1a0 <c_if_cond+0x144>
    b0f4:	55 20       	and	r5, r5
    b0f6:	21 f0       	breq	.+8      	; 0xb100 <c_if_cond+0xa4>
    b0f8:	12 16       	cp	r1, r18
    b0fa:	13 06       	cpc	r1, r19
    b0fc:	e4 f1       	brlt	.+120    	; 0xb176 <c_if_cond+0x11a>
    b0fe:	94 c0       	rjmp	.+296    	; 0xb228 <c_if_cond+0x1cc>
    b100:	f8 01       	movw	r30, r16
    b102:	81 84       	ldd	r8, Z+9	; 0x09
    b104:	92 84       	ldd	r9, Z+10	; 0x0a
    b106:	94 01       	movw	r18, r8
    b108:	2f 5f       	subi	r18, 0xFF	; 255
    b10a:	3f 4f       	sbci	r19, 0xFF	; 255
    b10c:	32 87       	std	Z+10, r19	; 0x0a
    b10e:	21 87       	std	Z+9, r18	; 0x09
    b110:	3c 01       	movw	r6, r24
    b112:	f1 e0       	ldi	r31, 0x01	; 1
    b114:	6f 1a       	sub	r6, r31
    b116:	71 08       	sbc	r7, r1
    b118:	16 14       	cp	r1, r6
    b11a:	17 04       	cpc	r1, r7
    b11c:	c4 f4       	brge	.+48     	; 0xb14e <c_if_cond+0xf2>
    b11e:	5e 01       	movw	r10, r28
    b120:	28 e0       	ldi	r18, 0x08	; 8
    b122:	a2 0e       	add	r10, r18
    b124:	b1 1c       	adc	r11, r1
    b126:	03 96       	adiw	r24, 0x03	; 3
    b128:	88 0f       	add	r24, r24
    b12a:	99 1f       	adc	r25, r25
    b12c:	6e 01       	movw	r12, r28
    b12e:	c8 0e       	add	r12, r24
    b130:	d9 1e       	adc	r13, r25
    b132:	81 e0       	ldi	r24, 0x01	; 1
    b134:	45 2c       	mov	r4, r5
    b136:	48 26       	eor	r4, r24
    b138:	f5 01       	movw	r30, r10
    b13a:	61 91       	ld	r22, Z+
    b13c:	71 91       	ld	r23, Z+
    b13e:	5f 01       	movw	r10, r30
    b140:	94 01       	movw	r18, r8
    b142:	44 2d       	mov	r20, r4
    b144:	c8 01       	movw	r24, r16
    b146:	8a df       	rcall	.-236    	; 0xb05c <c_if_cond>
    b148:	ca 14       	cp	r12, r10
    b14a:	db 04       	cpc	r13, r11
    b14c:	a9 f7       	brne	.-22     	; 0xb138 <c_if_cond+0xdc>
    b14e:	f4 e0       	ldi	r31, 0x04	; 4
    b150:	6f 0e       	add	r6, r31
    b152:	71 1c       	adc	r7, r1
    b154:	66 0c       	add	r6, r6
    b156:	77 1c       	adc	r7, r7
    b158:	c6 0d       	add	r28, r6
    b15a:	d7 1d       	adc	r29, r7
    b15c:	68 81       	ld	r22, Y
    b15e:	79 81       	ldd	r23, Y+1	; 0x01
    b160:	97 01       	movw	r18, r14
    b162:	45 2d       	mov	r20, r5
    b164:	c8 01       	movw	r24, r16
    b166:	7a df       	rcall	.-268    	; 0xb05c <c_if_cond>
    b168:	b4 01       	movw	r22, r8
    b16a:	f8 01       	movw	r30, r16
    b16c:	83 8d       	ldd	r24, Z+27	; 0x1b
    b16e:	94 8d       	ldd	r25, Z+28	; 0x1c
    b170:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    b174:	59 c0       	rjmp	.+178    	; 0xb228 <c_if_cond+0x1cc>
    b176:	5e 01       	movw	r10, r28
    b178:	f8 e0       	ldi	r31, 0x08	; 8
    b17a:	af 0e       	add	r10, r31
    b17c:	b1 1c       	adc	r11, r1
    b17e:	04 96       	adiw	r24, 0x04	; 4
    b180:	88 0f       	add	r24, r24
    b182:	99 1f       	adc	r25, r25
    b184:	c8 0f       	add	r28, r24
    b186:	d9 1f       	adc	r29, r25
    b188:	f5 01       	movw	r30, r10
    b18a:	61 91       	ld	r22, Z+
    b18c:	71 91       	ld	r23, Z+
    b18e:	5f 01       	movw	r10, r30
    b190:	97 01       	movw	r18, r14
    b192:	45 2d       	mov	r20, r5
    b194:	c8 01       	movw	r24, r16
    b196:	62 df       	rcall	.-316    	; 0xb05c <c_if_cond>
    b198:	ac 16       	cp	r10, r28
    b19a:	bd 06       	cpc	r11, r29
    b19c:	a9 f7       	brne	.-22     	; 0xb188 <c_if_cond+0x12c>
    b19e:	44 c0       	rjmp	.+136    	; 0xb228 <c_if_cond+0x1cc>
    b1a0:	4d 31       	cpi	r20, 0x1D	; 29
    b1a2:	51 05       	cpc	r21, r1
    b1a4:	61 05       	cpc	r22, r1
    b1a6:	71 05       	cpc	r23, r1
    b1a8:	19 f4       	brne	.+6      	; 0xb1b0 <c_if_cond+0x154>
    b1aa:	51 10       	cpse	r5, r1
    b1ac:	a9 cf       	rjmp	.-174    	; 0xb100 <c_if_cond+0xa4>
    b1ae:	a4 cf       	rjmp	.-184    	; 0xb0f8 <c_if_cond+0x9c>
    b1b0:	4e 31       	cpi	r20, 0x1E	; 30
    b1b2:	51 05       	cpc	r21, r1
    b1b4:	61 05       	cpc	r22, r1
    b1b6:	71 05       	cpc	r23, r1
    b1b8:	41 f4       	brne	.+16     	; 0xb1ca <c_if_cond+0x16e>
    b1ba:	41 e0       	ldi	r20, 0x01	; 1
    b1bc:	45 25       	eor	r20, r5
    b1be:	68 85       	ldd	r22, Y+8	; 0x08
    b1c0:	79 85       	ldd	r23, Y+9	; 0x09
    b1c2:	97 01       	movw	r18, r14
    b1c4:	c8 01       	movw	r24, r16
    b1c6:	4a df       	rcall	.-364    	; 0xb05c <c_if_cond>
    b1c8:	2f c0       	rjmp	.+94     	; 0xb228 <c_if_cond+0x1cc>
    b1ca:	4a 32       	cpi	r20, 0x2A	; 42
    b1cc:	51 05       	cpc	r21, r1
    b1ce:	61 05       	cpc	r22, r1
    b1d0:	71 05       	cpc	r23, r1
    b1d2:	01 f5       	brne	.+64     	; 0xb214 <c_if_cond+0x1b8>
    b1d4:	e8 85       	ldd	r30, Y+8	; 0x08
    b1d6:	f9 85       	ldd	r31, Y+9	; 0x09
    b1d8:	30 97       	sbiw	r30, 0x00	; 0
    b1da:	49 f4       	brne	.+18     	; 0xb1ee <c_if_cond+0x192>
    b1dc:	51 10       	cpse	r5, r1
    b1de:	24 c0       	rjmp	.+72     	; 0xb228 <c_if_cond+0x1cc>
    b1e0:	b7 01       	movw	r22, r14
    b1e2:	f8 01       	movw	r30, r16
    b1e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    b1e6:	94 8d       	ldd	r25, Z+28	; 0x1c
    b1e8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    b1ec:	1d c0       	rjmp	.+58     	; 0xb228 <c_if_cond+0x1cc>
    b1ee:	cf 01       	movw	r24, r30
    b1f0:	83 70       	andi	r24, 0x03	; 3
    b1f2:	99 27       	eor	r25, r25
    b1f4:	89 2b       	or	r24, r25
    b1f6:	19 f4       	brne	.+6      	; 0xb1fe <c_if_cond+0x1a2>
    b1f8:	84 81       	ldd	r24, Z+4	; 0x04
    b1fa:	8b 38       	cpi	r24, 0x8B	; 139
    b1fc:	11 f0       	breq	.+4      	; 0xb202 <c_if_cond+0x1a6>
    b1fe:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b202:	55 20       	and	r5, r5
    b204:	89 f0       	breq	.+34     	; 0xb228 <c_if_cond+0x1cc>
    b206:	b7 01       	movw	r22, r14
    b208:	f8 01       	movw	r30, r16
    b20a:	83 8d       	ldd	r24, Z+27	; 0x1b
    b20c:	94 8d       	ldd	r25, Z+28	; 0x1c
    b20e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    b212:	0a c0       	rjmp	.+20     	; 0xb228 <c_if_cond+0x1cc>
    b214:	be 01       	movw	r22, r28
    b216:	c8 01       	movw	r24, r16
    b218:	a3 de       	rcall	.-698    	; 0xaf60 <compile_node>
    b21a:	a7 01       	movw	r20, r14
    b21c:	65 2d       	mov	r22, r5
    b21e:	f8 01       	movw	r30, r16
    b220:	83 8d       	ldd	r24, Z+27	; 0x1b
    b222:	94 8d       	ldd	r25, Z+28	; 0x1c
    b224:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <mp_emit_bc_pop_jump_if>
    b228:	df 91       	pop	r29
    b22a:	cf 91       	pop	r28
    b22c:	1f 91       	pop	r17
    b22e:	0f 91       	pop	r16
    b230:	ff 90       	pop	r15
    b232:	ef 90       	pop	r14
    b234:	df 90       	pop	r13
    b236:	cf 90       	pop	r12
    b238:	bf 90       	pop	r11
    b23a:	af 90       	pop	r10
    b23c:	9f 90       	pop	r9
    b23e:	8f 90       	pop	r8
    b240:	7f 90       	pop	r7
    b242:	6f 90       	pop	r6
    b244:	5f 90       	pop	r5
    b246:	4f 90       	pop	r4
    b248:	08 95       	ret

0000b24a <compile_yield_expr>:
    b24a:	cf 93       	push	r28
    b24c:	df 93       	push	r29
    b24e:	ec 01       	movw	r28, r24
    b250:	e9 8d       	ldd	r30, Y+25	; 0x19
    b252:	fa 8d       	ldd	r31, Y+26	; 0x1a
    b254:	80 81       	ld	r24, Z
    b256:	87 30       	cpi	r24, 0x07	; 7
    b258:	09 f4       	brne	.+2      	; 0xb25c <compile_yield_expr+0x12>
    b25a:	41 c0       	rjmp	.+130    	; 0xb2de <compile_yield_expr+0x94>
    b25c:	82 30       	cpi	r24, 0x02	; 2
    b25e:	31 f0       	breq	.+12     	; 0xb26c <compile_yield_expr+0x22>
    b260:	4b e2       	ldi	r20, 0x2B	; 43
    b262:	58 e0       	ldi	r21, 0x08	; 8
    b264:	ce 01       	movw	r24, r28
    b266:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b26a:	40 c0       	rjmp	.+128    	; 0xb2ec <compile_yield_expr+0xa2>
    b26c:	fb 01       	movw	r30, r22
    b26e:	60 85       	ldd	r22, Z+8	; 0x08
    b270:	71 85       	ldd	r23, Z+9	; 0x09
    b272:	61 15       	cp	r22, r1
    b274:	71 05       	cpc	r23, r1
    b276:	61 f4       	brne	.+24     	; 0xb290 <compile_yield_expr+0x46>
    b278:	6e e0       	ldi	r22, 0x0E	; 14
    b27a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b27c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b27e:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    b282:	60 e0       	ldi	r22, 0x00	; 0
    b284:	70 e0       	ldi	r23, 0x00	; 0
    b286:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b288:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b28a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <mp_emit_bc_yield>
    b28e:	2e c0       	rjmp	.+92     	; 0xb2ec <compile_yield_expr+0xa2>
    b290:	cb 01       	movw	r24, r22
    b292:	83 70       	andi	r24, 0x03	; 3
    b294:	99 27       	eor	r25, r25
    b296:	89 2b       	or	r24, r25
    b298:	c9 f4       	brne	.+50     	; 0xb2cc <compile_yield_expr+0x82>
    b29a:	fb 01       	movw	r30, r22
    b29c:	84 81       	ldd	r24, Z+4	; 0x04
    b29e:	82 3a       	cpi	r24, 0xA2	; 162
    b2a0:	a9 f4       	brne	.+42     	; 0xb2cc <compile_yield_expr+0x82>
    b2a2:	60 85       	ldd	r22, Z+8	; 0x08
    b2a4:	71 85       	ldd	r23, Z+9	; 0x09
    b2a6:	ce 01       	movw	r24, r28
    b2a8:	5b de       	rcall	.-842    	; 0xaf60 <compile_node>
    b2aa:	60 e0       	ldi	r22, 0x00	; 0
    b2ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2b0:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <mp_emit_bc_get_iter>
    b2b4:	6e e0       	ldi	r22, 0x0E	; 14
    b2b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2ba:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    b2be:	61 e0       	ldi	r22, 0x01	; 1
    b2c0:	70 e0       	ldi	r23, 0x00	; 0
    b2c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2c6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <mp_emit_bc_yield>
    b2ca:	10 c0       	rjmp	.+32     	; 0xb2ec <compile_yield_expr+0xa2>
    b2cc:	ce 01       	movw	r24, r28
    b2ce:	48 de       	rcall	.-880    	; 0xaf60 <compile_node>
    b2d0:	60 e0       	ldi	r22, 0x00	; 0
    b2d2:	70 e0       	ldi	r23, 0x00	; 0
    b2d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b2d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b2d8:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <mp_emit_bc_yield>
    b2dc:	07 c0       	rjmp	.+14     	; 0xb2ec <compile_yield_expr+0xa2>
    b2de:	fb 01       	movw	r30, r22
    b2e0:	60 85       	ldd	r22, Z+8	; 0x08
    b2e2:	71 85       	ldd	r23, Z+9	; 0x09
    b2e4:	61 15       	cp	r22, r1
    b2e6:	71 05       	cpc	r23, r1
    b2e8:	99 f6       	brne	.-90     	; 0xb290 <compile_yield_expr+0x46>
    b2ea:	c6 cf       	rjmp	.-116    	; 0xb278 <compile_yield_expr+0x2e>
    b2ec:	df 91       	pop	r29
    b2ee:	cf 91       	pop	r28
    b2f0:	08 95       	ret

0000b2f2 <compile_comprehension>:
    b2f2:	ff 92       	push	r15
    b2f4:	0f 93       	push	r16
    b2f6:	1f 93       	push	r17
    b2f8:	cf 93       	push	r28
    b2fa:	df 93       	push	r29
    b2fc:	8c 01       	movw	r16, r24
    b2fe:	f4 2e       	mov	r15, r20
    b300:	fb 01       	movw	r30, r22
    b302:	84 81       	ldd	r24, Z+4	; 0x04
    b304:	95 81       	ldd	r25, Z+5	; 0x05
    b306:	a6 81       	ldd	r26, Z+6	; 0x06
    b308:	b7 81       	ldd	r27, Z+7	; 0x07
    b30a:	89 2f       	mov	r24, r25
    b30c:	9a 2f       	mov	r25, r26
    b30e:	ab 2f       	mov	r26, r27
    b310:	bb 27       	eor	r27, r27
    b312:	02 97       	sbiw	r24, 0x02	; 2
    b314:	a1 05       	cpc	r26, r1
    b316:	b1 05       	cpc	r27, r1
    b318:	11 f0       	breq	.+4      	; 0xb31e <compile_comprehension+0x2c>
    b31a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b31e:	c2 85       	ldd	r28, Z+10	; 0x0a
    b320:	d3 85       	ldd	r29, Z+11	; 0x0b
    b322:	20 97       	sbiw	r28, 0x00	; 0
    b324:	41 f0       	breq	.+16     	; 0xb336 <compile_comprehension+0x44>
    b326:	ce 01       	movw	r24, r28
    b328:	83 70       	andi	r24, 0x03	; 3
    b32a:	99 27       	eor	r25, r25
    b32c:	89 2b       	or	r24, r25
    b32e:	19 f4       	brne	.+6      	; 0xb336 <compile_comprehension+0x44>
    b330:	8c 81       	ldd	r24, Y+4	; 0x04
    b332:	8f 39       	cpi	r24, 0x9F	; 159
    b334:	11 f0       	breq	.+4      	; 0xb33a <compile_comprehension+0x48>
    b336:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b33a:	f8 01       	movw	r30, r16
    b33c:	83 81       	ldd	r24, Z+3	; 0x03
    b33e:	81 30       	cpi	r24, 0x01	; 1
    b340:	61 f4       	brne	.+24     	; 0xb35a <compile_comprehension+0x68>
    b342:	01 8c       	ldd	r0, Z+25	; 0x19
    b344:	f2 8d       	ldd	r31, Z+26	; 0x1a
    b346:	e0 2d       	mov	r30, r0
    b348:	27 85       	ldd	r18, Z+15	; 0x0f
    b34a:	30 89       	ldd	r19, Z+16	; 0x10
    b34c:	ab 01       	movw	r20, r22
    b34e:	6f 2d       	mov	r22, r15
    b350:	c8 01       	movw	r24, r16
    b352:	0e 94 ca 4c 	call	0x9994	; 0x9994 <scope_new_and_link>
    b356:	9f 87       	std	Y+15, r25	; 0x0f
    b358:	8e 87       	std	Y+14, r24	; 0x0e
    b35a:	6e 85       	ldd	r22, Y+14	; 0x0e
    b35c:	7f 85       	ldd	r23, Y+15	; 0x0f
    b35e:	20 e0       	ldi	r18, 0x00	; 0
    b360:	30 e0       	ldi	r19, 0x00	; 0
    b362:	40 e0       	ldi	r20, 0x00	; 0
    b364:	50 e0       	ldi	r21, 0x00	; 0
    b366:	c8 01       	movw	r24, r16
    b368:	0e 94 17 18 	call	0x302e	; 0x302e <close_over_variables_etc>
    b36c:	6a 85       	ldd	r22, Y+10	; 0x0a
    b36e:	7b 85       	ldd	r23, Y+11	; 0x0b
    b370:	c8 01       	movw	r24, r16
    b372:	f6 dd       	rcall	.-1044   	; 0xaf60 <compile_node>
    b374:	f6 e0       	ldi	r31, 0x06	; 6
    b376:	ff 12       	cpse	r15, r31
    b378:	08 c0       	rjmp	.+16     	; 0xb38a <compile_comprehension+0x98>
    b37a:	60 e0       	ldi	r22, 0x00	; 0
    b37c:	d8 01       	movw	r26, r16
    b37e:	5b 96       	adiw	r26, 0x1b	; 27
    b380:	8d 91       	ld	r24, X+
    b382:	9c 91       	ld	r25, X
    b384:	5c 97       	sbiw	r26, 0x1c	; 28
    b386:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <mp_emit_bc_get_iter>
    b38a:	20 e0       	ldi	r18, 0x00	; 0
    b38c:	30 e0       	ldi	r19, 0x00	; 0
    b38e:	40 e0       	ldi	r20, 0x00	; 0
    b390:	50 e0       	ldi	r21, 0x00	; 0
    b392:	61 e0       	ldi	r22, 0x01	; 1
    b394:	70 e0       	ldi	r23, 0x00	; 0
    b396:	f8 01       	movw	r30, r16
    b398:	83 8d       	ldd	r24, Z+27	; 0x1b
    b39a:	94 8d       	ldd	r25, Z+28	; 0x1c
    b39c:	0e 94 30 19 	call	0x3260	; 0x3260 <mp_emit_bc_call_function>
    b3a0:	df 91       	pop	r29
    b3a2:	cf 91       	pop	r28
    b3a4:	1f 91       	pop	r17
    b3a6:	0f 91       	pop	r16
    b3a8:	ff 90       	pop	r15
    b3aa:	08 95       	ret

0000b3ac <compile_trailer_paren_helper>:
    b3ac:	2f 92       	push	r2
    b3ae:	3f 92       	push	r3
    b3b0:	4f 92       	push	r4
    b3b2:	5f 92       	push	r5
    b3b4:	6f 92       	push	r6
    b3b6:	7f 92       	push	r7
    b3b8:	8f 92       	push	r8
    b3ba:	9f 92       	push	r9
    b3bc:	af 92       	push	r10
    b3be:	bf 92       	push	r11
    b3c0:	cf 92       	push	r12
    b3c2:	df 92       	push	r13
    b3c4:	ef 92       	push	r14
    b3c6:	ff 92       	push	r15
    b3c8:	0f 93       	push	r16
    b3ca:	1f 93       	push	r17
    b3cc:	cf 93       	push	r28
    b3ce:	df 93       	push	r29
    b3d0:	cd b7       	in	r28, 0x3d	; 61
    b3d2:	de b7       	in	r29, 0x3e	; 62
    b3d4:	27 97       	sbiw	r28, 0x07	; 7
    b3d6:	0f b6       	in	r0, 0x3f	; 63
    b3d8:	f8 94       	cli
    b3da:	de bf       	out	0x3e, r29	; 62
    b3dc:	0f be       	out	0x3f, r0	; 63
    b3de:	cd bf       	out	0x3d, r28	; 61
    b3e0:	2c 01       	movw	r4, r24
    b3e2:	7c 83       	std	Y+4, r23	; 0x04
    b3e4:	6b 83       	std	Y+3, r22	; 0x03
    b3e6:	4f 83       	std	Y+7, r20	; 0x07
    b3e8:	69 01       	movw	r12, r18
    b3ea:	ae 01       	movw	r20, r28
    b3ec:	4f 5f       	subi	r20, 0xFF	; 255
    b3ee:	5f 4f       	sbci	r21, 0xFF	; 255
    b3f0:	68 e9       	ldi	r22, 0x98	; 152
    b3f2:	70 e0       	ldi	r23, 0x00	; 0
    b3f4:	ce 01       	movw	r24, r28
    b3f6:	03 96       	adiw	r24, 0x03	; 3
    b3f8:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    b3fc:	4c 01       	movw	r8, r24
    b3fe:	89 2b       	or	r24, r25
    b400:	09 f4       	brne	.+2      	; 0xb404 <compile_trailer_paren_helper+0x58>
    b402:	cf c0       	rjmp	.+414    	; 0xb5a2 <compile_trailer_paren_helper+0x1f6>
    b404:	00 e0       	ldi	r16, 0x00	; 0
    b406:	10 e0       	ldi	r17, 0x00	; 0
    b408:	1e 82       	std	Y+6, r1	; 0x06
    b40a:	1d 82       	std	Y+5, r1	; 0x05
    b40c:	21 2c       	mov	r2, r1
    b40e:	31 2c       	mov	r3, r1
    b410:	a1 2c       	mov	r10, r1
    b412:	b1 2c       	mov	r11, r1
    b414:	61 2c       	mov	r6, r1
    b416:	71 2c       	mov	r7, r1
    b418:	e9 81       	ldd	r30, Y+1	; 0x01
    b41a:	fa 81       	ldd	r31, Y+2	; 0x02
    b41c:	c8 01       	movw	r24, r16
    b41e:	88 0f       	add	r24, r24
    b420:	99 1f       	adc	r25, r25
    b422:	e8 0f       	add	r30, r24
    b424:	f9 1f       	adc	r31, r25
    b426:	e0 80       	ld	r14, Z
    b428:	f1 80       	ldd	r15, Z+1	; 0x01
    b42a:	e1 14       	cp	r14, r1
    b42c:	f1 04       	cpc	r15, r1
    b42e:	09 f4       	brne	.+2      	; 0xb432 <compile_trailer_paren_helper+0x86>
    b430:	72 c0       	rjmp	.+228    	; 0xb516 <compile_trailer_paren_helper+0x16a>
    b432:	c7 01       	movw	r24, r14
    b434:	83 70       	andi	r24, 0x03	; 3
    b436:	99 27       	eor	r25, r25
    b438:	89 2b       	or	r24, r25
    b43a:	09 f0       	breq	.+2      	; 0xb43e <compile_trailer_paren_helper+0x92>
    b43c:	6c c0       	rjmp	.+216    	; 0xb516 <compile_trailer_paren_helper+0x16a>
    b43e:	f7 01       	movw	r30, r14
    b440:	84 81       	ldd	r24, Z+4	; 0x04
    b442:	95 81       	ldd	r25, Z+5	; 0x05
    b444:	a6 81       	ldd	r26, Z+6	; 0x06
    b446:	b7 81       	ldd	r27, Z+7	; 0x07
    b448:	99 27       	eor	r25, r25
    b44a:	aa 27       	eor	r26, r26
    b44c:	bb 27       	eor	r27, r27
    b44e:	8a 39       	cpi	r24, 0x9A	; 154
    b450:	91 05       	cpc	r25, r1
    b452:	a1 05       	cpc	r26, r1
    b454:	b1 05       	cpc	r27, r1
    b456:	69 f4       	brne	.+26     	; 0xb472 <compile_trailer_paren_helper+0xc6>
    b458:	a0 fe       	sbrs	r10, 0
    b45a:	07 c0       	rjmp	.+14     	; 0xb46a <compile_trailer_paren_helper+0xbe>
    b45c:	44 e4       	ldi	r20, 0x44	; 68
    b45e:	58 e0       	ldi	r21, 0x08	; 8
    b460:	b7 01       	movw	r22, r14
    b462:	c2 01       	movw	r24, r4
    b464:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b468:	b6 c0       	rjmp	.+364    	; 0xb5d6 <compile_trailer_paren_helper+0x22a>
    b46a:	68 94       	set
    b46c:	a0 f8       	bld	r10, 0
    b46e:	17 01       	movw	r2, r14
    b470:	6c c0       	rjmp	.+216    	; 0xb54a <compile_trailer_paren_helper+0x19e>
    b472:	8b 39       	cpi	r24, 0x9B	; 155
    b474:	91 05       	cpc	r25, r1
    b476:	a1 05       	cpc	r26, r1
    b478:	b1 05       	cpc	r27, r1
    b47a:	71 f4       	brne	.+28     	; 0xb498 <compile_trailer_paren_helper+0xec>
    b47c:	a1 fe       	sbrs	r10, 1
    b47e:	07 c0       	rjmp	.+14     	; 0xb48e <compile_trailer_paren_helper+0xe2>
    b480:	4b e5       	ldi	r20, 0x5B	; 91
    b482:	58 e0       	ldi	r21, 0x08	; 8
    b484:	b7 01       	movw	r22, r14
    b486:	c2 01       	movw	r24, r4
    b488:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b48c:	a4 c0       	rjmp	.+328    	; 0xb5d6 <compile_trailer_paren_helper+0x22a>
    b48e:	68 94       	set
    b490:	a1 f8       	bld	r10, 1
    b492:	fe 82       	std	Y+6, r15	; 0x06
    b494:	ed 82       	std	Y+5, r14	; 0x05
    b496:	59 c0       	rjmp	.+178    	; 0xb54a <compile_trailer_paren_helper+0x19e>
    b498:	8c 39       	cpi	r24, 0x9C	; 156
    b49a:	91 05       	cpc	r25, r1
    b49c:	a1 05       	cpc	r26, r1
    b49e:	b1 05       	cpc	r27, r1
    b4a0:	d1 f5       	brne	.+116    	; 0xb516 <compile_trailer_paren_helper+0x16a>
    b4a2:	02 84       	ldd	r0, Z+10	; 0x0a
    b4a4:	f3 85       	ldd	r31, Z+11	; 0x0b
    b4a6:	e0 2d       	mov	r30, r0
    b4a8:	30 97       	sbiw	r30, 0x00	; 0
    b4aa:	41 f0       	breq	.+16     	; 0xb4bc <compile_trailer_paren_helper+0x110>
    b4ac:	cf 01       	movw	r24, r30
    b4ae:	83 70       	andi	r24, 0x03	; 3
    b4b0:	99 27       	eor	r25, r25
    b4b2:	89 2b       	or	r24, r25
    b4b4:	19 f4       	brne	.+6      	; 0xb4bc <compile_trailer_paren_helper+0x110>
    b4b6:	84 81       	ldd	r24, Z+4	; 0x04
    b4b8:	8f 39       	cpi	r24, 0x9F	; 159
    b4ba:	29 f1       	breq	.+74     	; 0xb506 <compile_trailer_paren_helper+0x15a>
    b4bc:	f7 01       	movw	r30, r14
    b4be:	60 85       	ldd	r22, Z+8	; 0x08
    b4c0:	71 85       	ldd	r23, Z+9	; 0x09
    b4c2:	cb 01       	movw	r24, r22
    b4c4:	8f 70       	andi	r24, 0x0F	; 15
    b4c6:	99 27       	eor	r25, r25
    b4c8:	02 97       	sbiw	r24, 0x02	; 2
    b4ca:	39 f0       	breq	.+14     	; 0xb4da <compile_trailer_paren_helper+0x12e>
    b4cc:	43 e7       	ldi	r20, 0x73	; 115
    b4ce:	58 e0       	ldi	r21, 0x08	; 8
    b4d0:	b7 01       	movw	r22, r14
    b4d2:	c2 01       	movw	r24, r4
    b4d4:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b4d8:	7e c0       	rjmp	.+252    	; 0xb5d6 <compile_trailer_paren_helper+0x22a>
    b4da:	72 95       	swap	r23
    b4dc:	62 95       	swap	r22
    b4de:	6f 70       	andi	r22, 0x0F	; 15
    b4e0:	67 27       	eor	r22, r23
    b4e2:	7f 70       	andi	r23, 0x0F	; 15
    b4e4:	67 27       	eor	r22, r23
    b4e6:	d2 01       	movw	r26, r4
    b4e8:	5b 96       	adiw	r26, 0x1b	; 27
    b4ea:	8d 91       	ld	r24, X+
    b4ec:	9c 91       	ld	r25, X
    b4ee:	5c 97       	sbiw	r26, 0x1c	; 28
    b4f0:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
    b4f4:	f7 01       	movw	r30, r14
    b4f6:	62 85       	ldd	r22, Z+10	; 0x0a
    b4f8:	73 85       	ldd	r23, Z+11	; 0x0b
    b4fa:	c2 01       	movw	r24, r4
    b4fc:	31 dd       	rcall	.-1438   	; 0xaf60 <compile_node>
    b4fe:	ff ef       	ldi	r31, 0xFF	; 255
    b500:	6f 1a       	sub	r6, r31
    b502:	7f 0a       	sbc	r7, r31
    b504:	22 c0       	rjmp	.+68     	; 0xb54a <compile_trailer_paren_helper+0x19e>
    b506:	46 e0       	ldi	r20, 0x06	; 6
    b508:	b7 01       	movw	r22, r14
    b50a:	c2 01       	movw	r24, r4
    b50c:	f2 de       	rcall	.-540    	; 0xb2f2 <compile_comprehension>
    b50e:	8f ef       	ldi	r24, 0xFF	; 255
    b510:	c8 1a       	sub	r12, r24
    b512:	d8 0a       	sbc	r13, r24
    b514:	1a c0       	rjmp	.+52     	; 0xb54a <compile_trailer_paren_helper+0x19e>
    b516:	a1 14       	cp	r10, r1
    b518:	b1 04       	cpc	r11, r1
    b51a:	39 f0       	breq	.+14     	; 0xb52a <compile_trailer_paren_helper+0x17e>
    b51c:	44 e9       	ldi	r20, 0x94	; 148
    b51e:	58 e0       	ldi	r21, 0x08	; 8
    b520:	b7 01       	movw	r22, r14
    b522:	c2 01       	movw	r24, r4
    b524:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b528:	56 c0       	rjmp	.+172    	; 0xb5d6 <compile_trailer_paren_helper+0x22a>
    b52a:	61 14       	cp	r6, r1
    b52c:	71 04       	cpc	r7, r1
    b52e:	39 f0       	breq	.+14     	; 0xb53e <compile_trailer_paren_helper+0x192>
    b530:	4f ea       	ldi	r20, 0xAF	; 175
    b532:	58 e0       	ldi	r21, 0x08	; 8
    b534:	b7 01       	movw	r22, r14
    b536:	c2 01       	movw	r24, r4
    b538:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b53c:	4c c0       	rjmp	.+152    	; 0xb5d6 <compile_trailer_paren_helper+0x22a>
    b53e:	b7 01       	movw	r22, r14
    b540:	c2 01       	movw	r24, r4
    b542:	0e dd       	rcall	.-1508   	; 0xaf60 <compile_node>
    b544:	9f ef       	ldi	r25, 0xFF	; 255
    b546:	c9 1a       	sub	r12, r25
    b548:	d9 0a       	sbc	r13, r25
    b54a:	0f 5f       	subi	r16, 0xFF	; 255
    b54c:	1f 4f       	sbci	r17, 0xFF	; 255
    b54e:	80 16       	cp	r8, r16
    b550:	91 06       	cpc	r9, r17
    b552:	09 f0       	breq	.+2      	; 0xb556 <compile_trailer_paren_helper+0x1aa>
    b554:	61 cf       	rjmp	.-318    	; 0xb418 <compile_trailer_paren_helper+0x6c>
    b556:	a1 14       	cp	r10, r1
    b558:	b1 04       	cpc	r11, r1
    b55a:	39 f1       	breq	.+78     	; 0xb5aa <compile_trailer_paren_helper+0x1fe>
    b55c:	21 14       	cp	r2, r1
    b55e:	31 04       	cpc	r3, r1
    b560:	41 f4       	brne	.+16     	; 0xb572 <compile_trailer_paren_helper+0x1c6>
    b562:	d2 01       	movw	r26, r4
    b564:	5b 96       	adiw	r26, 0x1b	; 27
    b566:	8d 91       	ld	r24, X+
    b568:	9c 91       	ld	r25, X
    b56a:	5c 97       	sbiw	r26, 0x1c	; 28
    b56c:	0e 94 32 16 	call	0x2c64	; 0x2c64 <mp_emit_bc_load_null>
    b570:	05 c0       	rjmp	.+10     	; 0xb57c <compile_trailer_paren_helper+0x1d0>
    b572:	f1 01       	movw	r30, r2
    b574:	60 85       	ldd	r22, Z+8	; 0x08
    b576:	71 85       	ldd	r23, Z+9	; 0x09
    b578:	c2 01       	movw	r24, r4
    b57a:	f2 dc       	rcall	.-1564   	; 0xaf60 <compile_node>
    b57c:	8d 81       	ldd	r24, Y+5	; 0x05
    b57e:	9e 81       	ldd	r25, Y+6	; 0x06
    b580:	89 2b       	or	r24, r25
    b582:	41 f4       	brne	.+16     	; 0xb594 <compile_trailer_paren_helper+0x1e8>
    b584:	d2 01       	movw	r26, r4
    b586:	5b 96       	adiw	r26, 0x1b	; 27
    b588:	8d 91       	ld	r24, X+
    b58a:	9c 91       	ld	r25, X
    b58c:	5c 97       	sbiw	r26, 0x1c	; 28
    b58e:	0e 94 32 16 	call	0x2c64	; 0x2c64 <mp_emit_bc_load_null>
    b592:	0b c0       	rjmp	.+22     	; 0xb5aa <compile_trailer_paren_helper+0x1fe>
    b594:	ed 81       	ldd	r30, Y+5	; 0x05
    b596:	fe 81       	ldd	r31, Y+6	; 0x06
    b598:	60 85       	ldd	r22, Z+8	; 0x08
    b59a:	71 85       	ldd	r23, Z+9	; 0x09
    b59c:	c2 01       	movw	r24, r4
    b59e:	e0 dc       	rcall	.-1600   	; 0xaf60 <compile_node>
    b5a0:	04 c0       	rjmp	.+8      	; 0xb5aa <compile_trailer_paren_helper+0x1fe>
    b5a2:	a1 2c       	mov	r10, r1
    b5a4:	b1 2c       	mov	r11, r1
    b5a6:	61 2c       	mov	r6, r1
    b5a8:	71 2c       	mov	r7, r1
    b5aa:	ff 81       	ldd	r31, Y+7	; 0x07
    b5ac:	ff 23       	and	r31, r31
    b5ae:	59 f0       	breq	.+22     	; 0xb5c6 <compile_trailer_paren_helper+0x21a>
    b5b0:	95 01       	movw	r18, r10
    b5b2:	a3 01       	movw	r20, r6
    b5b4:	b6 01       	movw	r22, r12
    b5b6:	d2 01       	movw	r26, r4
    b5b8:	5b 96       	adiw	r26, 0x1b	; 27
    b5ba:	8d 91       	ld	r24, X+
    b5bc:	9c 91       	ld	r25, X
    b5be:	5c 97       	sbiw	r26, 0x1c	; 28
    b5c0:	0e 94 41 19 	call	0x3282	; 0x3282 <mp_emit_bc_call_method>
    b5c4:	08 c0       	rjmp	.+16     	; 0xb5d6 <compile_trailer_paren_helper+0x22a>
    b5c6:	95 01       	movw	r18, r10
    b5c8:	a3 01       	movw	r20, r6
    b5ca:	b6 01       	movw	r22, r12
    b5cc:	f2 01       	movw	r30, r4
    b5ce:	83 8d       	ldd	r24, Z+27	; 0x1b
    b5d0:	94 8d       	ldd	r25, Z+28	; 0x1c
    b5d2:	0e 94 30 19 	call	0x3260	; 0x3260 <mp_emit_bc_call_function>
    b5d6:	27 96       	adiw	r28, 0x07	; 7
    b5d8:	0f b6       	in	r0, 0x3f	; 63
    b5da:	f8 94       	cli
    b5dc:	de bf       	out	0x3e, r29	; 62
    b5de:	0f be       	out	0x3f, r0	; 63
    b5e0:	cd bf       	out	0x3d, r28	; 61
    b5e2:	df 91       	pop	r29
    b5e4:	cf 91       	pop	r28
    b5e6:	1f 91       	pop	r17
    b5e8:	0f 91       	pop	r16
    b5ea:	ff 90       	pop	r15
    b5ec:	ef 90       	pop	r14
    b5ee:	df 90       	pop	r13
    b5f0:	cf 90       	pop	r12
    b5f2:	bf 90       	pop	r11
    b5f4:	af 90       	pop	r10
    b5f6:	9f 90       	pop	r9
    b5f8:	8f 90       	pop	r8
    b5fa:	7f 90       	pop	r7
    b5fc:	6f 90       	pop	r6
    b5fe:	5f 90       	pop	r5
    b600:	4f 90       	pop	r4
    b602:	3f 90       	pop	r3
    b604:	2f 90       	pop	r2
    b606:	08 95       	ret

0000b608 <compile_classdef_helper>:
    b608:	ef 92       	push	r14
    b60a:	ff 92       	push	r15
    b60c:	0f 93       	push	r16
    b60e:	1f 93       	push	r17
    b610:	cf 93       	push	r28
    b612:	df 93       	push	r29
    b614:	ec 01       	movw	r28, r24
    b616:	7b 01       	movw	r14, r22
    b618:	8b 81       	ldd	r24, Y+3	; 0x03
    b61a:	81 30       	cpi	r24, 0x01	; 1
    b61c:	49 f4       	brne	.+18     	; 0xb630 <compile_classdef_helper+0x28>
    b61e:	9a 01       	movw	r18, r20
    b620:	ab 01       	movw	r20, r22
    b622:	61 e0       	ldi	r22, 0x01	; 1
    b624:	ce 01       	movw	r24, r28
    b626:	0e 94 ca 4c 	call	0x9994	; 0x9994 <scope_new_and_link>
    b62a:	f7 01       	movw	r30, r14
    b62c:	97 87       	std	Z+15, r25	; 0x0f
    b62e:	86 87       	std	Z+14, r24	; 0x0e
    b630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b634:	0e 94 48 16 	call	0x2c90	; 0x2c90 <mp_emit_bc_load_build_class>
    b638:	f7 01       	movw	r30, r14
    b63a:	06 85       	ldd	r16, Z+14	; 0x0e
    b63c:	17 85       	ldd	r17, Z+15	; 0x0f
    b63e:	20 e0       	ldi	r18, 0x00	; 0
    b640:	30 e0       	ldi	r19, 0x00	; 0
    b642:	40 e0       	ldi	r20, 0x00	; 0
    b644:	50 e0       	ldi	r21, 0x00	; 0
    b646:	b8 01       	movw	r22, r16
    b648:	ce 01       	movw	r24, r28
    b64a:	0e 94 17 18 	call	0x302e	; 0x302e <close_over_variables_etc>
    b64e:	f8 01       	movw	r30, r16
    b650:	63 85       	ldd	r22, Z+11	; 0x0b
    b652:	74 85       	ldd	r23, Z+12	; 0x0c
    b654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b658:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
    b65c:	f7 01       	movw	r30, r14
    b65e:	62 85       	ldd	r22, Z+10	; 0x0a
    b660:	73 85       	ldd	r23, Z+11	; 0x0b
    b662:	61 15       	cp	r22, r1
    b664:	71 05       	cpc	r23, r1
    b666:	59 f0       	breq	.+22     	; 0xb67e <compile_classdef_helper+0x76>
    b668:	cb 01       	movw	r24, r22
    b66a:	83 70       	andi	r24, 0x03	; 3
    b66c:	99 27       	eor	r25, r25
    b66e:	89 2b       	or	r24, r25
    b670:	31 f4       	brne	.+12     	; 0xb67e <compile_classdef_helper+0x76>
    b672:	fb 01       	movw	r30, r22
    b674:	84 81       	ldd	r24, Z+4	; 0x04
    b676:	87 39       	cpi	r24, 0x97	; 151
    b678:	11 f4       	brne	.+4      	; 0xb67e <compile_classdef_helper+0x76>
    b67a:	60 e0       	ldi	r22, 0x00	; 0
    b67c:	70 e0       	ldi	r23, 0x00	; 0
    b67e:	22 e0       	ldi	r18, 0x02	; 2
    b680:	30 e0       	ldi	r19, 0x00	; 0
    b682:	40 e0       	ldi	r20, 0x00	; 0
    b684:	ce 01       	movw	r24, r28
    b686:	92 de       	rcall	.-732    	; 0xb3ac <compile_trailer_paren_helper>
    b688:	f8 01       	movw	r30, r16
    b68a:	83 85       	ldd	r24, Z+11	; 0x0b
    b68c:	94 85       	ldd	r25, Z+12	; 0x0c
    b68e:	df 91       	pop	r29
    b690:	cf 91       	pop	r28
    b692:	1f 91       	pop	r17
    b694:	0f 91       	pop	r16
    b696:	ff 90       	pop	r15
    b698:	ef 90       	pop	r14
    b69a:	08 95       	ret

0000b69c <compile_trailer_paren>:
    b69c:	fb 01       	movw	r30, r22
    b69e:	60 85       	ldd	r22, Z+8	; 0x08
    b6a0:	71 85       	ldd	r23, Z+9	; 0x09
    b6a2:	20 e0       	ldi	r18, 0x00	; 0
    b6a4:	30 e0       	ldi	r19, 0x00	; 0
    b6a6:	40 e0       	ldi	r20, 0x00	; 0
    b6a8:	81 ce       	rjmp	.-766    	; 0xb3ac <compile_trailer_paren_helper>
    b6aa:	08 95       	ret

0000b6ac <compile_dictorsetmaker_item>:
    b6ac:	0f 93       	push	r16
    b6ae:	1f 93       	push	r17
    b6b0:	cf 93       	push	r28
    b6b2:	df 93       	push	r29
    b6b4:	8c 01       	movw	r16, r24
    b6b6:	eb 01       	movw	r28, r22
    b6b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    b6ba:	7b 85       	ldd	r23, Y+11	; 0x0b
    b6bc:	51 dc       	rcall	.-1886   	; 0xaf60 <compile_node>
    b6be:	68 85       	ldd	r22, Y+8	; 0x08
    b6c0:	79 85       	ldd	r23, Y+9	; 0x09
    b6c2:	c8 01       	movw	r24, r16
    b6c4:	4d dc       	rcall	.-1894   	; 0xaf60 <compile_node>
    b6c6:	df 91       	pop	r29
    b6c8:	cf 91       	pop	r28
    b6ca:	1f 91       	pop	r17
    b6cc:	0f 91       	pop	r16
    b6ce:	08 95       	ret

0000b6d0 <compile_trailer_bracket>:
    b6d0:	cf 93       	push	r28
    b6d2:	df 93       	push	r29
    b6d4:	ec 01       	movw	r28, r24
    b6d6:	fb 01       	movw	r30, r22
    b6d8:	60 85       	ldd	r22, Z+8	; 0x08
    b6da:	71 85       	ldd	r23, Z+9	; 0x09
    b6dc:	41 dc       	rcall	.-1918   	; 0xaf60 <compile_node>
    b6de:	60 e0       	ldi	r22, 0x00	; 0
    b6e0:	70 e0       	ldi	r23, 0x00	; 0
    b6e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b6e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b6e6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <mp_emit_bc_subscr>
    b6ea:	df 91       	pop	r29
    b6ec:	cf 91       	pop	r28
    b6ee:	08 95       	ret

0000b6f0 <compile_atom_brace>:
    b6f0:	af 92       	push	r10
    b6f2:	bf 92       	push	r11
    b6f4:	cf 92       	push	r12
    b6f6:	df 92       	push	r13
    b6f8:	ef 92       	push	r14
    b6fa:	ff 92       	push	r15
    b6fc:	0f 93       	push	r16
    b6fe:	1f 93       	push	r17
    b700:	cf 93       	push	r28
    b702:	df 93       	push	r29
    b704:	00 d0       	rcall	.+0      	; 0xb706 <compile_atom_brace+0x16>
    b706:	cd b7       	in	r28, 0x3d	; 61
    b708:	de b7       	in	r29, 0x3e	; 62
    b70a:	8c 01       	movw	r16, r24
    b70c:	db 01       	movw	r26, r22
    b70e:	18 96       	adiw	r26, 0x08	; 8
    b710:	ed 90       	ld	r14, X+
    b712:	fc 90       	ld	r15, X
    b714:	19 97       	sbiw	r26, 0x09	; 9
    b716:	e1 14       	cp	r14, r1
    b718:	f1 04       	cpc	r15, r1
    b71a:	51 f4       	brne	.+20     	; 0xb730 <compile_atom_brace+0x40>
    b71c:	42 e0       	ldi	r20, 0x02	; 2
    b71e:	50 e0       	ldi	r21, 0x00	; 0
    b720:	60 e0       	ldi	r22, 0x00	; 0
    b722:	70 e0       	ldi	r23, 0x00	; 0
    b724:	fc 01       	movw	r30, r24
    b726:	83 8d       	ldd	r24, Z+27	; 0x1b
    b728:	94 8d       	ldd	r25, Z+28	; 0x1c
    b72a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    b72e:	a6 c0       	rjmp	.+332    	; 0xb87c <compile_atom_brace+0x18c>
    b730:	c7 01       	movw	r24, r14
    b732:	83 70       	andi	r24, 0x03	; 3
    b734:	99 27       	eor	r25, r25
    b736:	89 2b       	or	r24, r25
    b738:	09 f0       	breq	.+2      	; 0xb73c <compile_atom_brace+0x4c>
    b73a:	88 c0       	rjmp	.+272    	; 0xb84c <compile_atom_brace+0x15c>
    b73c:	f7 01       	movw	r30, r14
    b73e:	84 81       	ldd	r24, Z+4	; 0x04
    b740:	95 81       	ldd	r25, Z+5	; 0x05
    b742:	a6 81       	ldd	r26, Z+6	; 0x06
    b744:	b7 81       	ldd	r27, Z+7	; 0x07
    b746:	99 27       	eor	r25, r25
    b748:	aa 27       	eor	r26, r26
    b74a:	bb 27       	eor	r27, r27
    b74c:	82 33       	cpi	r24, 0x32	; 50
    b74e:	91 05       	cpc	r25, r1
    b750:	a1 05       	cpc	r26, r1
    b752:	b1 05       	cpc	r27, r1
    b754:	a1 f4       	brne	.+40     	; 0xb77e <compile_atom_brace+0x8e>
    b756:	42 e0       	ldi	r20, 0x02	; 2
    b758:	50 e0       	ldi	r21, 0x00	; 0
    b75a:	61 e0       	ldi	r22, 0x01	; 1
    b75c:	70 e0       	ldi	r23, 0x00	; 0
    b75e:	d8 01       	movw	r26, r16
    b760:	5b 96       	adiw	r26, 0x1b	; 27
    b762:	8d 91       	ld	r24, X+
    b764:	9c 91       	ld	r25, X
    b766:	5c 97       	sbiw	r26, 0x1c	; 28
    b768:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    b76c:	b7 01       	movw	r22, r14
    b76e:	c8 01       	movw	r24, r16
    b770:	f7 db       	rcall	.-2066   	; 0xaf60 <compile_node>
    b772:	f8 01       	movw	r30, r16
    b774:	83 8d       	ldd	r24, Z+27	; 0x1b
    b776:	94 8d       	ldd	r25, Z+28	; 0x1c
    b778:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <mp_emit_bc_store_map>
    b77c:	7f c0       	rjmp	.+254    	; 0xb87c <compile_atom_brace+0x18c>
    b77e:	83 39       	cpi	r24, 0x93	; 147
    b780:	91 05       	cpc	r25, r1
    b782:	a1 05       	cpc	r26, r1
    b784:	b1 05       	cpc	r27, r1
    b786:	09 f0       	breq	.+2      	; 0xb78a <compile_atom_brace+0x9a>
    b788:	61 c0       	rjmp	.+194    	; 0xb84c <compile_atom_brace+0x15c>
    b78a:	02 84       	ldd	r0, Z+10	; 0x0a
    b78c:	f3 85       	ldd	r31, Z+11	; 0x0b
    b78e:	e0 2d       	mov	r30, r0
    b790:	30 97       	sbiw	r30, 0x00	; 0
    b792:	29 f0       	breq	.+10     	; 0xb79e <compile_atom_brace+0xae>
    b794:	cf 01       	movw	r24, r30
    b796:	83 70       	andi	r24, 0x03	; 3
    b798:	99 27       	eor	r25, r25
    b79a:	89 2b       	or	r24, r25
    b79c:	11 f0       	breq	.+4      	; 0xb7a2 <compile_atom_brace+0xb2>
    b79e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b7a2:	44 81       	ldd	r20, Z+4	; 0x04
    b7a4:	55 81       	ldd	r21, Z+5	; 0x05
    b7a6:	66 81       	ldd	r22, Z+6	; 0x06
    b7a8:	77 81       	ldd	r23, Z+7	; 0x07
    b7aa:	55 27       	eor	r21, r21
    b7ac:	66 27       	eor	r22, r22
    b7ae:	77 27       	eor	r23, r23
    b7b0:	45 39       	cpi	r20, 0x95	; 149
    b7b2:	51 05       	cpc	r21, r1
    b7b4:	61 05       	cpc	r22, r1
    b7b6:	71 05       	cpc	r23, r1
    b7b8:	e9 f5       	brne	.+122    	; 0xb834 <compile_atom_brace+0x144>
    b7ba:	ae 01       	movw	r20, r28
    b7bc:	4f 5f       	subi	r20, 0xFF	; 255
    b7be:	5f 4f       	sbci	r21, 0xFF	; 255
    b7c0:	66 e9       	ldi	r22, 0x96	; 150
    b7c2:	70 e0       	ldi	r23, 0x00	; 0
    b7c4:	cf 01       	movw	r24, r30
    b7c6:	08 96       	adiw	r24, 0x08	; 8
    b7c8:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    b7cc:	5c 01       	movw	r10, r24
    b7ce:	bc 01       	movw	r22, r24
    b7d0:	6f 5f       	subi	r22, 0xFF	; 255
    b7d2:	7f 4f       	sbci	r23, 0xFF	; 255
    b7d4:	42 e0       	ldi	r20, 0x02	; 2
    b7d6:	50 e0       	ldi	r21, 0x00	; 0
    b7d8:	f8 01       	movw	r30, r16
    b7da:	83 8d       	ldd	r24, Z+27	; 0x1b
    b7dc:	94 8d       	ldd	r25, Z+28	; 0x1c
    b7de:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    b7e2:	d7 01       	movw	r26, r14
    b7e4:	18 96       	adiw	r26, 0x08	; 8
    b7e6:	6d 91       	ld	r22, X+
    b7e8:	7c 91       	ld	r23, X
    b7ea:	19 97       	sbiw	r26, 0x09	; 9
    b7ec:	c8 01       	movw	r24, r16
    b7ee:	b8 db       	rcall	.-2192   	; 0xaf60 <compile_node>
    b7f0:	f8 01       	movw	r30, r16
    b7f2:	83 8d       	ldd	r24, Z+27	; 0x1b
    b7f4:	94 8d       	ldd	r25, Z+28	; 0x1c
    b7f6:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <mp_emit_bc_store_map>
    b7fa:	a1 14       	cp	r10, r1
    b7fc:	b1 04       	cpc	r11, r1
    b7fe:	09 f4       	brne	.+2      	; 0xb802 <compile_atom_brace+0x112>
    b800:	3d c0       	rjmp	.+122    	; 0xb87c <compile_atom_brace+0x18c>
    b802:	c1 2c       	mov	r12, r1
    b804:	d1 2c       	mov	r13, r1
    b806:	e9 81       	ldd	r30, Y+1	; 0x01
    b808:	fa 81       	ldd	r31, Y+2	; 0x02
    b80a:	c6 01       	movw	r24, r12
    b80c:	88 0f       	add	r24, r24
    b80e:	99 1f       	adc	r25, r25
    b810:	e8 0f       	add	r30, r24
    b812:	f9 1f       	adc	r31, r25
    b814:	60 81       	ld	r22, Z
    b816:	71 81       	ldd	r23, Z+1	; 0x01
    b818:	61 15       	cp	r22, r1
    b81a:	71 05       	cpc	r23, r1
    b81c:	c9 f0       	breq	.+50     	; 0xb850 <compile_atom_brace+0x160>
    b81e:	cb 01       	movw	r24, r22
    b820:	83 70       	andi	r24, 0x03	; 3
    b822:	99 27       	eor	r25, r25
    b824:	89 2b       	or	r24, r25
    b826:	a1 f4       	brne	.+40     	; 0xb850 <compile_atom_brace+0x160>
    b828:	db 01       	movw	r26, r22
    b82a:	14 96       	adiw	r26, 0x04	; 4
    b82c:	8c 91       	ld	r24, X
    b82e:	82 33       	cpi	r24, 0x32	; 50
    b830:	79 f4       	brne	.+30     	; 0xb850 <compile_atom_brace+0x160>
    b832:	17 c0       	rjmp	.+46     	; 0xb862 <compile_atom_brace+0x172>
    b834:	4f 39       	cpi	r20, 0x9F	; 159
    b836:	51 05       	cpc	r21, r1
    b838:	61 05       	cpc	r22, r1
    b83a:	71 05       	cpc	r23, r1
    b83c:	11 f0       	breq	.+4      	; 0xb842 <compile_atom_brace+0x152>
    b83e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b842:	44 e0       	ldi	r20, 0x04	; 4
    b844:	b7 01       	movw	r22, r14
    b846:	c8 01       	movw	r24, r16
    b848:	54 dd       	rcall	.-1368   	; 0xb2f2 <compile_comprehension>
    b84a:	18 c0       	rjmp	.+48     	; 0xb87c <compile_atom_brace+0x18c>
    b84c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b850:	c8 01       	movw	r24, r16
    b852:	86 db       	rcall	.-2292   	; 0xaf60 <compile_node>
    b854:	47 e0       	ldi	r20, 0x07	; 7
    b856:	58 e0       	ldi	r21, 0x08	; 8
    b858:	b7 01       	movw	r22, r14
    b85a:	c8 01       	movw	r24, r16
    b85c:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    b860:	0d c0       	rjmp	.+26     	; 0xb87c <compile_atom_brace+0x18c>
    b862:	c8 01       	movw	r24, r16
    b864:	7d db       	rcall	.-2310   	; 0xaf60 <compile_node>
    b866:	f8 01       	movw	r30, r16
    b868:	83 8d       	ldd	r24, Z+27	; 0x1b
    b86a:	94 8d       	ldd	r25, Z+28	; 0x1c
    b86c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <mp_emit_bc_store_map>
    b870:	ff ef       	ldi	r31, 0xFF	; 255
    b872:	cf 1a       	sub	r12, r31
    b874:	df 0a       	sbc	r13, r31
    b876:	ac 14       	cp	r10, r12
    b878:	bd 04       	cpc	r11, r13
    b87a:	29 f6       	brne	.-118    	; 0xb806 <compile_atom_brace+0x116>
    b87c:	0f 90       	pop	r0
    b87e:	0f 90       	pop	r0
    b880:	df 91       	pop	r29
    b882:	cf 91       	pop	r28
    b884:	1f 91       	pop	r17
    b886:	0f 91       	pop	r16
    b888:	ff 90       	pop	r15
    b88a:	ef 90       	pop	r14
    b88c:	df 90       	pop	r13
    b88e:	cf 90       	pop	r12
    b890:	bf 90       	pop	r11
    b892:	af 90       	pop	r10
    b894:	08 95       	ret

0000b896 <compile_factor_2>:
    b896:	0f 93       	push	r16
    b898:	1f 93       	push	r17
    b89a:	cf 93       	push	r28
    b89c:	df 93       	push	r29
    b89e:	8c 01       	movw	r16, r24
    b8a0:	eb 01       	movw	r28, r22
    b8a2:	6a 85       	ldd	r22, Y+10	; 0x0a
    b8a4:	7b 85       	ldd	r23, Y+11	; 0x0b
    b8a6:	5c db       	rcall	.-2376   	; 0xaf60 <compile_node>
    b8a8:	68 85       	ldd	r22, Y+8	; 0x08
    b8aa:	79 85       	ldd	r23, Y+9	; 0x09
    b8ac:	72 95       	swap	r23
    b8ae:	62 95       	swap	r22
    b8b0:	6f 70       	andi	r22, 0x0F	; 15
    b8b2:	67 27       	eor	r22, r23
    b8b4:	7f 70       	andi	r23, 0x0F	; 15
    b8b6:	67 27       	eor	r22, r23
    b8b8:	60 33       	cpi	r22, 0x30	; 48
    b8ba:	29 f0       	breq	.+10     	; 0xb8c6 <compile_factor_2+0x30>
    b8bc:	6c 53       	subi	r22, 0x3C	; 60
    b8be:	62 30       	cpi	r22, 0x02	; 2
    b8c0:	18 f0       	brcs	.+6      	; 0xb8c8 <compile_factor_2+0x32>
    b8c2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    b8c6:	62 e0       	ldi	r22, 0x02	; 2
    b8c8:	f8 01       	movw	r30, r16
    b8ca:	83 8d       	ldd	r24, Z+27	; 0x1b
    b8cc:	94 8d       	ldd	r25, Z+28	; 0x1c
    b8ce:	0e 94 75 17 	call	0x2eea	; 0x2eea <mp_emit_bc_unary_op>
    b8d2:	df 91       	pop	r29
    b8d4:	cf 91       	pop	r28
    b8d6:	1f 91       	pop	r17
    b8d8:	0f 91       	pop	r16
    b8da:	08 95       	ret

0000b8dc <compile_term>:
    b8dc:	cf 92       	push	r12
    b8de:	df 92       	push	r13
    b8e0:	ef 92       	push	r14
    b8e2:	ff 92       	push	r15
    b8e4:	0f 93       	push	r16
    b8e6:	1f 93       	push	r17
    b8e8:	cf 93       	push	r28
    b8ea:	df 93       	push	r29
    b8ec:	8c 01       	movw	r16, r24
    b8ee:	eb 01       	movw	r28, r22
    b8f0:	8c 81       	ldd	r24, Y+4	; 0x04
    b8f2:	9d 81       	ldd	r25, Y+5	; 0x05
    b8f4:	ae 81       	ldd	r26, Y+6	; 0x06
    b8f6:	bf 81       	ldd	r27, Y+7	; 0x07
    b8f8:	89 2f       	mov	r24, r25
    b8fa:	9a 2f       	mov	r25, r26
    b8fc:	ab 2f       	mov	r26, r27
    b8fe:	bb 27       	eor	r27, r27
    b900:	7c 01       	movw	r14, r24
    b902:	68 85       	ldd	r22, Y+8	; 0x08
    b904:	79 85       	ldd	r23, Y+9	; 0x09
    b906:	c8 01       	movw	r24, r16
    b908:	2b db       	rcall	.-2474   	; 0xaf60 <compile_node>
    b90a:	83 e0       	ldi	r24, 0x03	; 3
    b90c:	e8 16       	cp	r14, r24
    b90e:	f1 04       	cpc	r15, r1
    b910:	ec f0       	brlt	.+58     	; 0xb94c <compile_term+0x70>
    b912:	68 94       	set
    b914:	cc 24       	eor	r12, r12
    b916:	c1 f8       	bld	r12, 1
    b918:	d1 2c       	mov	r13, r1
    b91a:	6c 85       	ldd	r22, Y+12	; 0x0c
    b91c:	7d 85       	ldd	r23, Y+13	; 0x0d
    b91e:	c8 01       	movw	r24, r16
    b920:	1f db       	rcall	.-2498   	; 0xaf60 <compile_node>
    b922:	6a 85       	ldd	r22, Y+10	; 0x0a
    b924:	7b 85       	ldd	r23, Y+11	; 0x0b
    b926:	72 95       	swap	r23
    b928:	62 95       	swap	r22
    b92a:	6f 70       	andi	r22, 0x0F	; 15
    b92c:	67 27       	eor	r22, r23
    b92e:	7f 70       	andi	r23, 0x0F	; 15
    b930:	67 27       	eor	r22, r23
    b932:	61 52       	subi	r22, 0x21	; 33
    b934:	f8 01       	movw	r30, r16
    b936:	83 8d       	ldd	r24, Z+27	; 0x1b
    b938:	94 8d       	ldd	r25, Z+28	; 0x1c
    b93a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    b93e:	f2 e0       	ldi	r31, 0x02	; 2
    b940:	cf 0e       	add	r12, r31
    b942:	d1 1c       	adc	r13, r1
    b944:	24 96       	adiw	r28, 0x04	; 4
    b946:	ce 14       	cp	r12, r14
    b948:	df 04       	cpc	r13, r15
    b94a:	3c f3       	brlt	.-50     	; 0xb91a <compile_term+0x3e>
    b94c:	df 91       	pop	r29
    b94e:	cf 91       	pop	r28
    b950:	1f 91       	pop	r17
    b952:	0f 91       	pop	r16
    b954:	ff 90       	pop	r15
    b956:	ef 90       	pop	r14
    b958:	df 90       	pop	r13
    b95a:	cf 90       	pop	r12
    b95c:	08 95       	ret

0000b95e <compile_binary_op>:
    b95e:	8f 92       	push	r8
    b960:	9f 92       	push	r9
    b962:	af 92       	push	r10
    b964:	bf 92       	push	r11
    b966:	df 92       	push	r13
    b968:	ef 92       	push	r14
    b96a:	ff 92       	push	r15
    b96c:	0f 93       	push	r16
    b96e:	1f 93       	push	r17
    b970:	cf 93       	push	r28
    b972:	df 93       	push	r29
    b974:	8c 01       	movw	r16, r24
    b976:	7b 01       	movw	r14, r22
    b978:	fb 01       	movw	r30, r22
    b97a:	84 81       	ldd	r24, Z+4	; 0x04
    b97c:	95 81       	ldd	r25, Z+5	; 0x05
    b97e:	a6 81       	ldd	r26, Z+6	; 0x06
    b980:	b7 81       	ldd	r27, Z+7	; 0x07
    b982:	0f 2e       	mov	r0, r31
    b984:	f5 ef       	ldi	r31, 0xF5	; 245
    b986:	df 2e       	mov	r13, r31
    b988:	f0 2d       	mov	r31, r0
    b98a:	d8 0e       	add	r13, r24
    b98c:	89 2e       	mov	r8, r25
    b98e:	9a 2e       	mov	r9, r26
    b990:	ab 2e       	mov	r10, r27
    b992:	bb 24       	eor	r11, r11
    b994:	60 85       	ldd	r22, Z+8	; 0x08
    b996:	71 85       	ldd	r23, Z+9	; 0x09
    b998:	c8 01       	movw	r24, r16
    b99a:	e2 da       	rcall	.-2620   	; 0xaf60 <compile_node>
    b99c:	f2 e0       	ldi	r31, 0x02	; 2
    b99e:	8f 16       	cp	r8, r31
    b9a0:	91 04       	cpc	r9, r1
    b9a2:	ac f0       	brlt	.+42     	; 0xb9ce <compile_binary_op+0x70>
    b9a4:	e7 01       	movw	r28, r14
    b9a6:	2a 96       	adiw	r28, 0x0a	; 10
    b9a8:	c4 01       	movw	r24, r8
    b9aa:	04 96       	adiw	r24, 0x04	; 4
    b9ac:	88 0f       	add	r24, r24
    b9ae:	99 1f       	adc	r25, r25
    b9b0:	e8 0e       	add	r14, r24
    b9b2:	f9 1e       	adc	r15, r25
    b9b4:	69 91       	ld	r22, Y+
    b9b6:	79 91       	ld	r23, Y+
    b9b8:	c8 01       	movw	r24, r16
    b9ba:	d2 da       	rcall	.-2652   	; 0xaf60 <compile_node>
    b9bc:	6d 2d       	mov	r22, r13
    b9be:	f8 01       	movw	r30, r16
    b9c0:	83 8d       	ldd	r24, Z+27	; 0x1b
    b9c2:	94 8d       	ldd	r25, Z+28	; 0x1c
    b9c4:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    b9c8:	ce 15       	cp	r28, r14
    b9ca:	df 05       	cpc	r29, r15
    b9cc:	99 f7       	brne	.-26     	; 0xb9b4 <compile_binary_op+0x56>
    b9ce:	df 91       	pop	r29
    b9d0:	cf 91       	pop	r28
    b9d2:	1f 91       	pop	r17
    b9d4:	0f 91       	pop	r16
    b9d6:	ff 90       	pop	r15
    b9d8:	ef 90       	pop	r14
    b9da:	df 90       	pop	r13
    b9dc:	bf 90       	pop	r11
    b9de:	af 90       	pop	r10
    b9e0:	9f 90       	pop	r9
    b9e2:	8f 90       	pop	r8
    b9e4:	08 95       	ret

0000b9e6 <compile_comparison>:
    b9e6:	7f 92       	push	r7
    b9e8:	8f 92       	push	r8
    b9ea:	9f 92       	push	r9
    b9ec:	af 92       	push	r10
    b9ee:	bf 92       	push	r11
    b9f0:	cf 92       	push	r12
    b9f2:	df 92       	push	r13
    b9f4:	ef 92       	push	r14
    b9f6:	ff 92       	push	r15
    b9f8:	0f 93       	push	r16
    b9fa:	1f 93       	push	r17
    b9fc:	cf 93       	push	r28
    b9fe:	df 93       	push	r29
    ba00:	ec 01       	movw	r28, r24
    ba02:	7b 01       	movw	r14, r22
    ba04:	fb 01       	movw	r30, r22
    ba06:	84 81       	ldd	r24, Z+4	; 0x04
    ba08:	95 81       	ldd	r25, Z+5	; 0x05
    ba0a:	a6 81       	ldd	r26, Z+6	; 0x06
    ba0c:	b7 81       	ldd	r27, Z+7	; 0x07
    ba0e:	89 2f       	mov	r24, r25
    ba10:	9a 2f       	mov	r25, r26
    ba12:	ab 2f       	mov	r26, r27
    ba14:	bb 27       	eor	r27, r27
    ba16:	6c 01       	movw	r12, r24
    ba18:	60 85       	ldd	r22, Z+8	; 0x08
    ba1a:	71 85       	ldd	r23, Z+9	; 0x09
    ba1c:	ce 01       	movw	r24, r28
    ba1e:	a0 da       	rcall	.-2752   	; 0xaf60 <compile_node>
    ba20:	f4 e0       	ldi	r31, 0x04	; 4
    ba22:	cf 16       	cp	r12, r31
    ba24:	d1 04       	cpc	r13, r1
    ba26:	3c f0       	brlt	.+14     	; 0xba36 <compile_comparison+0x50>
    ba28:	89 84       	ldd	r8, Y+9	; 0x09
    ba2a:	9a 84       	ldd	r9, Y+10	; 0x0a
    ba2c:	c4 01       	movw	r24, r8
    ba2e:	01 96       	adiw	r24, 0x01	; 1
    ba30:	9a 87       	std	Y+10, r25	; 0x0a
    ba32:	89 87       	std	Y+9, r24	; 0x09
    ba34:	02 c0       	rjmp	.+4      	; 0xba3a <compile_comparison+0x54>
    ba36:	81 2c       	mov	r8, r1
    ba38:	91 2c       	mov	r9, r1
    ba3a:	01 e0       	ldi	r16, 0x01	; 1
    ba3c:	10 e0       	ldi	r17, 0x00	; 0
    ba3e:	0f 2e       	mov	r0, r31
    ba40:	f6 e0       	ldi	r31, 0x06	; 6
    ba42:	7f 2e       	mov	r7, r31
    ba44:	f0 2d       	mov	r31, r0
    ba46:	65 c0       	rjmp	.+202    	; 0xbb12 <compile_comparison+0x12c>
    ba48:	57 01       	movw	r10, r14
    ba4a:	d7 01       	movw	r26, r14
    ba4c:	1c 96       	adiw	r26, 0x0c	; 12
    ba4e:	6d 91       	ld	r22, X+
    ba50:	7c 91       	ld	r23, X
    ba52:	1d 97       	sbiw	r26, 0x0d	; 13
    ba54:	ce 01       	movw	r24, r28
    ba56:	84 da       	rcall	.-2808   	; 0xaf60 <compile_node>
    ba58:	0e 5f       	subi	r16, 0xFE	; 254
    ba5a:	1f 4f       	sbci	r17, 0xFF	; 255
    ba5c:	0c 15       	cp	r16, r12
    ba5e:	1d 05       	cpc	r17, r13
    ba60:	44 f4       	brge	.+16     	; 0xba72 <compile_comparison+0x8c>
    ba62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ba64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ba66:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    ba6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ba6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ba6e:	0e 94 91 16 	call	0x2d22	; 0x2d22 <mp_emit_bc_rot_three>
    ba72:	d5 01       	movw	r26, r10
    ba74:	1a 96       	adiw	r26, 0x0a	; 10
    ba76:	ed 91       	ld	r30, X+
    ba78:	fc 91       	ld	r31, X
    ba7a:	1b 97       	sbiw	r26, 0x0b	; 11
    ba7c:	cf 01       	movw	r24, r30
    ba7e:	8f 70       	andi	r24, 0x0F	; 15
    ba80:	99 27       	eor	r25, r25
    ba82:	0e 97       	sbiw	r24, 0x0e	; 14
    ba84:	89 f4       	brne	.+34     	; 0xbaa8 <compile_comparison+0xc2>
    ba86:	f2 95       	swap	r31
    ba88:	e2 95       	swap	r30
    ba8a:	ef 70       	andi	r30, 0x0F	; 15
    ba8c:	ef 27       	eor	r30, r31
    ba8e:	ff 70       	andi	r31, 0x0F	; 15
    ba90:	ef 27       	eor	r30, r31
    ba92:	e2 32       	cpi	r30, 0x22	; 34
    ba94:	19 f0       	breq	.+6      	; 0xba9c <compile_comparison+0xb6>
    ba96:	6f ec       	ldi	r22, 0xCF	; 207
    ba98:	6e 0f       	add	r22, r30
    ba9a:	01 c0       	rjmp	.+2      	; 0xba9e <compile_comparison+0xb8>
    ba9c:	67 2d       	mov	r22, r7
    ba9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    baa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    baa2:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    baa6:	29 c0       	rjmp	.+82     	; 0xbafa <compile_comparison+0x114>
    baa8:	30 97       	sbiw	r30, 0x00	; 0
    baaa:	29 f0       	breq	.+10     	; 0xbab6 <compile_comparison+0xd0>
    baac:	cf 01       	movw	r24, r30
    baae:	83 70       	andi	r24, 0x03	; 3
    bab0:	99 27       	eor	r25, r25
    bab2:	89 2b       	or	r24, r25
    bab4:	11 f0       	breq	.+4      	; 0xbaba <compile_comparison+0xd4>
    bab6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    baba:	84 81       	ldd	r24, Z+4	; 0x04
    babc:	95 81       	ldd	r25, Z+5	; 0x05
    babe:	99 27       	eor	r25, r25
    bac0:	8e 37       	cpi	r24, 0x7E	; 126
    bac2:	91 05       	cpc	r25, r1
    bac4:	31 f4       	brne	.+12     	; 0xbad2 <compile_comparison+0xec>
    bac6:	62 e3       	ldi	r22, 0x32	; 50
    bac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    baca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bacc:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    bad0:	14 c0       	rjmp	.+40     	; 0xbafa <compile_comparison+0x114>
    bad2:	8f 37       	cpi	r24, 0x7F	; 127
    bad4:	91 05       	cpc	r25, r1
    bad6:	11 f0       	breq	.+4      	; 0xbadc <compile_comparison+0xf6>
    bad8:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    badc:	80 85       	ldd	r24, Z+8	; 0x08
    bade:	91 85       	ldd	r25, Z+9	; 0x09
    bae0:	89 2b       	or	r24, r25
    bae2:	31 f4       	brne	.+12     	; 0xbaf0 <compile_comparison+0x10a>
    bae4:	67 e0       	ldi	r22, 0x07	; 7
    bae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    baea:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    baee:	05 c0       	rjmp	.+10     	; 0xbafa <compile_comparison+0x114>
    baf0:	63 e3       	ldi	r22, 0x33	; 51
    baf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    baf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    baf6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    bafa:	0c 15       	cp	r16, r12
    bafc:	1d 05       	cpc	r17, r13
    bafe:	34 f4       	brge	.+12     	; 0xbb0c <compile_comparison+0x126>
    bb00:	a4 01       	movw	r20, r8
    bb02:	60 e0       	ldi	r22, 0x00	; 0
    bb04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb08:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <mp_emit_bc_jump_if_or_pop>
    bb0c:	b4 e0       	ldi	r27, 0x04	; 4
    bb0e:	eb 0e       	add	r14, r27
    bb10:	f1 1c       	adc	r15, r1
    bb12:	c8 01       	movw	r24, r16
    bb14:	01 96       	adiw	r24, 0x01	; 1
    bb16:	8c 15       	cp	r24, r12
    bb18:	9d 05       	cpc	r25, r13
    bb1a:	0c f4       	brge	.+2      	; 0xbb1e <compile_comparison+0x138>
    bb1c:	95 cf       	rjmp	.-214    	; 0xba48 <compile_comparison+0x62>
    bb1e:	e4 e0       	ldi	r30, 0x04	; 4
    bb20:	ce 16       	cp	r12, r30
    bb22:	d1 04       	cpc	r13, r1
    bb24:	1c f1       	brlt	.+70     	; 0xbb6c <compile_comparison+0x186>
    bb26:	09 85       	ldd	r16, Y+9	; 0x09
    bb28:	1a 85       	ldd	r17, Y+10	; 0x0a
    bb2a:	c8 01       	movw	r24, r16
    bb2c:	01 96       	adiw	r24, 0x01	; 1
    bb2e:	9a 87       	std	Y+10, r25	; 0x0a
    bb30:	89 87       	std	Y+9, r24	; 0x09
    bb32:	b8 01       	movw	r22, r16
    bb34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb38:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    bb3c:	b4 01       	movw	r22, r8
    bb3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb40:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb42:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    bb46:	61 e0       	ldi	r22, 0x01	; 1
    bb48:	70 e0       	ldi	r23, 0x00	; 0
    bb4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb4e:	0e 94 88 13 	call	0x2710	; 0x2710 <mp_emit_bc_adjust_stack_size>
    bb52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb56:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <mp_emit_bc_rot_two>
    bb5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb5e:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    bb62:	b8 01       	movw	r22, r16
    bb64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb68:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    bb6c:	df 91       	pop	r29
    bb6e:	cf 91       	pop	r28
    bb70:	1f 91       	pop	r17
    bb72:	0f 91       	pop	r16
    bb74:	ff 90       	pop	r15
    bb76:	ef 90       	pop	r14
    bb78:	df 90       	pop	r13
    bb7a:	cf 90       	pop	r12
    bb7c:	bf 90       	pop	r11
    bb7e:	af 90       	pop	r10
    bb80:	9f 90       	pop	r9
    bb82:	8f 90       	pop	r8
    bb84:	7f 90       	pop	r7
    bb86:	08 95       	ret

0000bb88 <compile_not_test_2>:
    bb88:	cf 93       	push	r28
    bb8a:	df 93       	push	r29
    bb8c:	ec 01       	movw	r28, r24
    bb8e:	fb 01       	movw	r30, r22
    bb90:	60 85       	ldd	r22, Z+8	; 0x08
    bb92:	71 85       	ldd	r23, Z+9	; 0x09
    bb94:	e5 d9       	rcall	.-3126   	; 0xaf60 <compile_node>
    bb96:	63 e0       	ldi	r22, 0x03	; 3
    bb98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bb9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bb9c:	0e 94 75 17 	call	0x2eea	; 0x2eea <mp_emit_bc_unary_op>
    bba0:	df 91       	pop	r29
    bba2:	cf 91       	pop	r28
    bba4:	08 95       	ret

0000bba6 <compile_or_and_test>:
    bba6:	af 92       	push	r10
    bba8:	bf 92       	push	r11
    bbaa:	df 92       	push	r13
    bbac:	ef 92       	push	r14
    bbae:	ff 92       	push	r15
    bbb0:	0f 93       	push	r16
    bbb2:	1f 93       	push	r17
    bbb4:	cf 93       	push	r28
    bbb6:	df 93       	push	r29
    bbb8:	8c 01       	movw	r16, r24
    bbba:	fb 01       	movw	r30, r22
    bbbc:	84 81       	ldd	r24, Z+4	; 0x04
    bbbe:	dd 24       	eor	r13, r13
    bbc0:	d3 94       	inc	r13
    bbc2:	8c 31       	cpi	r24, 0x1C	; 28
    bbc4:	09 f0       	breq	.+2      	; 0xbbc8 <compile_or_and_test+0x22>
    bbc6:	d1 2c       	mov	r13, r1
    bbc8:	d8 01       	movw	r26, r16
    bbca:	19 96       	adiw	r26, 0x09	; 9
    bbcc:	ed 90       	ld	r14, X+
    bbce:	fc 90       	ld	r15, X
    bbd0:	1a 97       	sbiw	r26, 0x0a	; 10
    bbd2:	c7 01       	movw	r24, r14
    bbd4:	01 96       	adiw	r24, 0x01	; 1
    bbd6:	1a 96       	adiw	r26, 0x0a	; 10
    bbd8:	9c 93       	st	X, r25
    bbda:	8e 93       	st	-X, r24
    bbdc:	19 97       	sbiw	r26, 0x09	; 9
    bbde:	84 81       	ldd	r24, Z+4	; 0x04
    bbe0:	95 81       	ldd	r25, Z+5	; 0x05
    bbe2:	a6 81       	ldd	r26, Z+6	; 0x06
    bbe4:	b7 81       	ldd	r27, Z+7	; 0x07
    bbe6:	89 2f       	mov	r24, r25
    bbe8:	9a 2f       	mov	r25, r26
    bbea:	ab 2f       	mov	r26, r27
    bbec:	bb 27       	eor	r27, r27
    bbee:	18 16       	cp	r1, r24
    bbf0:	19 06       	cpc	r1, r25
    bbf2:	bc f4       	brge	.+46     	; 0xbc22 <compile_or_and_test+0x7c>
    bbf4:	ef 01       	movw	r28, r30
    bbf6:	28 96       	adiw	r28, 0x08	; 8
    bbf8:	04 96       	adiw	r24, 0x04	; 4
    bbfa:	88 0f       	add	r24, r24
    bbfc:	99 1f       	adc	r25, r25
    bbfe:	5f 01       	movw	r10, r30
    bc00:	a8 0e       	add	r10, r24
    bc02:	b9 1e       	adc	r11, r25
    bc04:	69 91       	ld	r22, Y+
    bc06:	79 91       	ld	r23, Y+
    bc08:	c8 01       	movw	r24, r16
    bc0a:	aa d9       	rcall	.-3244   	; 0xaf60 <compile_node>
    bc0c:	ca 15       	cp	r28, r10
    bc0e:	db 05       	cpc	r29, r11
    bc10:	41 f0       	breq	.+16     	; 0xbc22 <compile_or_and_test+0x7c>
    bc12:	a7 01       	movw	r20, r14
    bc14:	6d 2d       	mov	r22, r13
    bc16:	f8 01       	movw	r30, r16
    bc18:	83 8d       	ldd	r24, Z+27	; 0x1b
    bc1a:	94 8d       	ldd	r25, Z+28	; 0x1c
    bc1c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <mp_emit_bc_jump_if_or_pop>
    bc20:	f1 cf       	rjmp	.-30     	; 0xbc04 <compile_or_and_test+0x5e>
    bc22:	b7 01       	movw	r22, r14
    bc24:	d8 01       	movw	r26, r16
    bc26:	5b 96       	adiw	r26, 0x1b	; 27
    bc28:	8d 91       	ld	r24, X+
    bc2a:	9c 91       	ld	r25, X
    bc2c:	5c 97       	sbiw	r26, 0x1c	; 28
    bc2e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    bc32:	df 91       	pop	r29
    bc34:	cf 91       	pop	r28
    bc36:	1f 91       	pop	r17
    bc38:	0f 91       	pop	r16
    bc3a:	ff 90       	pop	r15
    bc3c:	ef 90       	pop	r14
    bc3e:	df 90       	pop	r13
    bc40:	bf 90       	pop	r11
    bc42:	af 90       	pop	r10
    bc44:	08 95       	ret

0000bc46 <compile_funcdef_lambdef_param>:
    bc46:	ef 92       	push	r14
    bc48:	ff 92       	push	r15
    bc4a:	0f 93       	push	r16
    bc4c:	1f 93       	push	r17
    bc4e:	cf 93       	push	r28
    bc50:	df 93       	push	r29
    bc52:	ec 01       	movw	r28, r24
    bc54:	cb 01       	movw	r24, r22
    bc56:	8f 70       	andi	r24, 0x0F	; 15
    bc58:	99 27       	eor	r25, r25
    bc5a:	02 97       	sbiw	r24, 0x02	; 2
    bc5c:	a9 f1       	breq	.+106    	; 0xbcc8 <compile_funcdef_lambdef_param+0x82>
    bc5e:	61 15       	cp	r22, r1
    bc60:	71 05       	cpc	r23, r1
    bc62:	29 f0       	breq	.+10     	; 0xbc6e <compile_funcdef_lambdef_param+0x28>
    bc64:	cb 01       	movw	r24, r22
    bc66:	83 70       	andi	r24, 0x03	; 3
    bc68:	99 27       	eor	r25, r25
    bc6a:	89 2b       	or	r24, r25
    bc6c:	11 f0       	breq	.+4      	; 0xbc72 <compile_funcdef_lambdef_param+0x2c>
    bc6e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    bc72:	fb 01       	movw	r30, r22
    bc74:	84 81       	ldd	r24, Z+4	; 0x04
    bc76:	95 81       	ldd	r25, Z+5	; 0x05
    bc78:	99 27       	eor	r25, r25
    bc7a:	83 34       	cpi	r24, 0x43	; 67
    bc7c:	91 05       	cpc	r25, r1
    bc7e:	19 f0       	breq	.+6      	; 0xbc86 <compile_funcdef_lambdef_param+0x40>
    bc80:	89 34       	cpi	r24, 0x49	; 73
    bc82:	91 05       	cpc	r25, r1
    bc84:	19 f4       	brne	.+6      	; 0xbc8c <compile_funcdef_lambdef_param+0x46>
    bc86:	81 e0       	ldi	r24, 0x01	; 1
    bc88:	8c 83       	std	Y+4, r24	; 0x04
    bc8a:	69 c0       	rjmp	.+210    	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bc8c:	84 34       	cpi	r24, 0x44	; 68
    bc8e:	91 05       	cpc	r25, r1
    bc90:	09 f4       	brne	.+2      	; 0xbc94 <compile_funcdef_lambdef_param+0x4e>
    bc92:	65 c0       	rjmp	.+202    	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bc94:	8a 34       	cpi	r24, 0x4A	; 74
    bc96:	91 05       	cpc	r25, r1
    bc98:	09 f4       	brne	.+2      	; 0xbc9c <compile_funcdef_lambdef_param+0x56>
    bc9a:	61 c0       	rjmp	.+194    	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bc9c:	82 34       	cpi	r24, 0x42	; 66
    bc9e:	91 05       	cpc	r25, r1
    bca0:	31 f4       	brne	.+12     	; 0xbcae <compile_funcdef_lambdef_param+0x68>
    bca2:	fb 01       	movw	r30, r22
    bca4:	00 85       	ldd	r16, Z+8	; 0x08
    bca6:	11 85       	ldd	r17, Z+9	; 0x09
    bca8:	e4 84       	ldd	r14, Z+12	; 0x0c
    bcaa:	f5 84       	ldd	r15, Z+13	; 0x0d
    bcac:	0a c0       	rjmp	.+20     	; 0xbcc2 <compile_funcdef_lambdef_param+0x7c>
    bcae:	88 34       	cpi	r24, 0x48	; 72
    bcb0:	91 05       	cpc	r25, r1
    bcb2:	11 f0       	breq	.+4      	; 0xbcb8 <compile_funcdef_lambdef_param+0x72>
    bcb4:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    bcb8:	fb 01       	movw	r30, r22
    bcba:	00 85       	ldd	r16, Z+8	; 0x08
    bcbc:	11 85       	ldd	r17, Z+9	; 0x09
    bcbe:	e2 84       	ldd	r14, Z+10	; 0x0a
    bcc0:	f3 84       	ldd	r15, Z+11	; 0x0b
    bcc2:	e1 14       	cp	r14, r1
    bcc4:	f1 04       	cpc	r15, r1
    bcc6:	71 f4       	brne	.+28     	; 0xbce4 <compile_funcdef_lambdef_param+0x9e>
    bcc8:	8c 81       	ldd	r24, Y+4	; 0x04
    bcca:	81 11       	cpse	r24, r1
    bccc:	48 c0       	rjmp	.+144    	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bcce:	8d 85       	ldd	r24, Y+13	; 0x0d
    bcd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    bcd2:	89 2b       	or	r24, r25
    bcd4:	09 f4       	brne	.+2      	; 0xbcd8 <compile_funcdef_lambdef_param+0x92>
    bcd6:	43 c0       	rjmp	.+134    	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bcd8:	41 ed       	ldi	r20, 0xD1	; 209
    bcda:	58 e0       	ldi	r21, 0x08	; 8
    bcdc:	ce 01       	movw	r24, r28
    bcde:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    bce2:	3d c0       	rjmp	.+122    	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bce4:	8c 81       	ldd	r24, Y+4	; 0x04
    bce6:	88 23       	and	r24, r24
    bce8:	91 f1       	breq	.+100    	; 0xbd4e <compile_funcdef_lambdef_param+0x108>
    bcea:	8b 85       	ldd	r24, Y+11	; 0x0b
    bcec:	9c 85       	ldd	r25, Y+12	; 0x0c
    bcee:	01 96       	adiw	r24, 0x01	; 1
    bcf0:	9c 87       	std	Y+12, r25	; 0x0c
    bcf2:	8b 87       	std	Y+11, r24	; 0x0b
    bcf4:	01 97       	sbiw	r24, 0x01	; 1
    bcf6:	c1 f4       	brne	.+48     	; 0xbd28 <compile_funcdef_lambdef_param+0xe2>
    bcf8:	6d 85       	ldd	r22, Y+13	; 0x0d
    bcfa:	7e 85       	ldd	r23, Y+14	; 0x0e
    bcfc:	61 15       	cp	r22, r1
    bcfe:	71 05       	cpc	r23, r1
    bd00:	39 f0       	breq	.+14     	; 0xbd10 <compile_funcdef_lambdef_param+0xca>
    bd02:	40 e0       	ldi	r20, 0x00	; 0
    bd04:	50 e0       	ldi	r21, 0x00	; 0
    bd06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bd08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bd0a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    bd0e:	04 c0       	rjmp	.+8      	; 0xbd18 <compile_funcdef_lambdef_param+0xd2>
    bd10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bd12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bd14:	0e 94 32 16 	call	0x2c64	; 0x2c64 <mp_emit_bc_load_null>
    bd18:	42 e0       	ldi	r20, 0x02	; 2
    bd1a:	50 e0       	ldi	r21, 0x00	; 0
    bd1c:	60 e0       	ldi	r22, 0x00	; 0
    bd1e:	70 e0       	ldi	r23, 0x00	; 0
    bd20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bd22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bd24:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    bd28:	b7 01       	movw	r22, r14
    bd2a:	ce 01       	movw	r24, r28
    bd2c:	19 d9       	rcall	.-3534   	; 0xaf60 <compile_node>
    bd2e:	b8 01       	movw	r22, r16
    bd30:	72 95       	swap	r23
    bd32:	62 95       	swap	r22
    bd34:	6f 70       	andi	r22, 0x0F	; 15
    bd36:	67 27       	eor	r22, r23
    bd38:	7f 70       	andi	r23, 0x0F	; 15
    bd3a:	67 27       	eor	r22, r23
    bd3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bd3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bd40:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
    bd44:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bd46:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bd48:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <mp_emit_bc_store_map>
    bd4c:	08 c0       	rjmp	.+16     	; 0xbd5e <compile_funcdef_lambdef_param+0x118>
    bd4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    bd50:	9e 85       	ldd	r25, Y+14	; 0x0e
    bd52:	01 96       	adiw	r24, 0x01	; 1
    bd54:	9e 87       	std	Y+14, r25	; 0x0e
    bd56:	8d 87       	std	Y+13, r24	; 0x0d
    bd58:	b7 01       	movw	r22, r14
    bd5a:	ce 01       	movw	r24, r28
    bd5c:	01 d9       	rcall	.-3582   	; 0xaf60 <compile_node>
    bd5e:	df 91       	pop	r29
    bd60:	cf 91       	pop	r28
    bd62:	1f 91       	pop	r17
    bd64:	0f 91       	pop	r16
    bd66:	ff 90       	pop	r15
    bd68:	ef 90       	pop	r14
    bd6a:	08 95       	ret

0000bd6c <compile_test_if_expr>:
    bd6c:	af 92       	push	r10
    bd6e:	bf 92       	push	r11
    bd70:	cf 92       	push	r12
    bd72:	df 92       	push	r13
    bd74:	ef 92       	push	r14
    bd76:	ff 92       	push	r15
    bd78:	0f 93       	push	r16
    bd7a:	1f 93       	push	r17
    bd7c:	cf 93       	push	r28
    bd7e:	df 93       	push	r29
    bd80:	ec 01       	movw	r28, r24
    bd82:	6b 01       	movw	r12, r22
    bd84:	fb 01       	movw	r30, r22
    bd86:	02 85       	ldd	r16, Z+10	; 0x0a
    bd88:	13 85       	ldd	r17, Z+11	; 0x0b
    bd8a:	01 15       	cp	r16, r1
    bd8c:	11 05       	cpc	r17, r1
    bd8e:	49 f0       	breq	.+18     	; 0xbda2 <compile_test_if_expr+0x36>
    bd90:	c8 01       	movw	r24, r16
    bd92:	83 70       	andi	r24, 0x03	; 3
    bd94:	99 27       	eor	r25, r25
    bd96:	89 2b       	or	r24, r25
    bd98:	21 f4       	brne	.+8      	; 0xbda2 <compile_test_if_expr+0x36>
    bd9a:	f8 01       	movw	r30, r16
    bd9c:	84 81       	ldd	r24, Z+4	; 0x04
    bd9e:	8a 37       	cpi	r24, 0x7A	; 122
    bda0:	11 f0       	breq	.+4      	; 0xbda6 <compile_test_if_expr+0x3a>
    bda2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    bda6:	e9 84       	ldd	r14, Y+9	; 0x09
    bda8:	fa 84       	ldd	r15, Y+10	; 0x0a
    bdaa:	57 01       	movw	r10, r14
    bdac:	ff ef       	ldi	r31, 0xFF	; 255
    bdae:	af 1a       	sub	r10, r31
    bdb0:	bf 0a       	sbc	r11, r31
    bdb2:	c7 01       	movw	r24, r14
    bdb4:	02 96       	adiw	r24, 0x02	; 2
    bdb6:	9a 87       	std	Y+10, r25	; 0x0a
    bdb8:	89 87       	std	Y+9, r24	; 0x09
    bdba:	f8 01       	movw	r30, r16
    bdbc:	60 85       	ldd	r22, Z+8	; 0x08
    bdbe:	71 85       	ldd	r23, Z+9	; 0x09
    bdc0:	97 01       	movw	r18, r14
    bdc2:	40 e0       	ldi	r20, 0x00	; 0
    bdc4:	ce 01       	movw	r24, r28
    bdc6:	4a d9       	rcall	.-3436   	; 0xb05c <c_if_cond>
    bdc8:	f6 01       	movw	r30, r12
    bdca:	60 85       	ldd	r22, Z+8	; 0x08
    bdcc:	71 85       	ldd	r23, Z+9	; 0x09
    bdce:	ce 01       	movw	r24, r28
    bdd0:	c7 d8       	rcall	.-3698   	; 0xaf60 <compile_node>
    bdd2:	b5 01       	movw	r22, r10
    bdd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bdd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bdd8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    bddc:	b7 01       	movw	r22, r14
    bdde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bde0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bde2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    bde6:	6f ef       	ldi	r22, 0xFF	; 255
    bde8:	7f ef       	ldi	r23, 0xFF	; 255
    bdea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bdec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bdee:	0e 94 88 13 	call	0x2710	; 0x2710 <mp_emit_bc_adjust_stack_size>
    bdf2:	f8 01       	movw	r30, r16
    bdf4:	62 85       	ldd	r22, Z+10	; 0x0a
    bdf6:	73 85       	ldd	r23, Z+11	; 0x0b
    bdf8:	ce 01       	movw	r24, r28
    bdfa:	b2 d8       	rcall	.-3740   	; 0xaf60 <compile_node>
    bdfc:	b5 01       	movw	r22, r10
    bdfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    be00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    be02:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    be06:	df 91       	pop	r29
    be08:	cf 91       	pop	r28
    be0a:	1f 91       	pop	r17
    be0c:	0f 91       	pop	r16
    be0e:	ff 90       	pop	r15
    be10:	ef 90       	pop	r14
    be12:	df 90       	pop	r13
    be14:	cf 90       	pop	r12
    be16:	bf 90       	pop	r11
    be18:	af 90       	pop	r10
    be1a:	08 95       	ret

0000be1c <compile_while_stmt>:
    be1c:	4f 92       	push	r4
    be1e:	5f 92       	push	r5
    be20:	6f 92       	push	r6
    be22:	7f 92       	push	r7
    be24:	8f 92       	push	r8
    be26:	9f 92       	push	r9
    be28:	af 92       	push	r10
    be2a:	bf 92       	push	r11
    be2c:	cf 92       	push	r12
    be2e:	df 92       	push	r13
    be30:	ef 92       	push	r14
    be32:	ff 92       	push	r15
    be34:	0f 93       	push	r16
    be36:	1f 93       	push	r17
    be38:	cf 93       	push	r28
    be3a:	df 93       	push	r29
    be3c:	ec 01       	movw	r28, r24
    be3e:	7b 01       	movw	r14, r22
    be40:	8f 84       	ldd	r8, Y+15	; 0x0f
    be42:	98 88       	ldd	r9, Y+16	; 0x10
    be44:	69 88       	ldd	r6, Y+17	; 0x11
    be46:	7a 88       	ldd	r7, Y+18	; 0x12
    be48:	4d 88       	ldd	r4, Y+21	; 0x15
    be4a:	5e 88       	ldd	r5, Y+22	; 0x16
    be4c:	09 85       	ldd	r16, Y+9	; 0x09
    be4e:	1a 85       	ldd	r17, Y+10	; 0x0a
    be50:	58 01       	movw	r10, r16
    be52:	8f ef       	ldi	r24, 0xFF	; 255
    be54:	a8 1a       	sub	r10, r24
    be56:	b8 0a       	sbc	r11, r24
    be58:	68 01       	movw	r12, r16
    be5a:	e2 e0       	ldi	r30, 0x02	; 2
    be5c:	ce 0e       	add	r12, r30
    be5e:	d1 1c       	adc	r13, r1
    be60:	da 86       	std	Y+10, r13	; 0x0a
    be62:	c9 86       	std	Y+9, r12	; 0x09
    be64:	18 8b       	std	Y+16, r17	; 0x10
    be66:	0f 87       	std	Y+15, r16	; 0x0f
    be68:	ba 8a       	std	Y+18, r11	; 0x12
    be6a:	a9 8a       	std	Y+17, r10	; 0x11
    be6c:	8b 89       	ldd	r24, Y+19	; 0x13
    be6e:	9c 89       	ldd	r25, Y+20	; 0x14
    be70:	9e 8b       	std	Y+22, r25	; 0x16
    be72:	8d 8b       	std	Y+21, r24	; 0x15
    be74:	fb 01       	movw	r30, r22
    be76:	80 85       	ldd	r24, Z+8	; 0x08
    be78:	91 85       	ldd	r25, Z+9	; 0x09
    be7a:	0e 94 f5 10 	call	0x21ea	; 0x21ea <mp_parse_node_is_const_false>
    be7e:	81 11       	cpse	r24, r1
    be80:	26 c0       	rjmp	.+76     	; 0xbece <compile_while_stmt+0xb2>
    be82:	c8 01       	movw	r24, r16
    be84:	03 96       	adiw	r24, 0x03	; 3
    be86:	9a 87       	std	Y+10, r25	; 0x0a
    be88:	89 87       	std	Y+9, r24	; 0x09
    be8a:	f7 01       	movw	r30, r14
    be8c:	80 85       	ldd	r24, Z+8	; 0x08
    be8e:	91 85       	ldd	r25, Z+9	; 0x09
    be90:	0e 94 07 11 	call	0x220e	; 0x220e <mp_parse_node_is_const_true>
    be94:	81 11       	cpse	r24, r1
    be96:	05 c0       	rjmp	.+10     	; 0xbea2 <compile_while_stmt+0x86>
    be98:	b5 01       	movw	r22, r10
    be9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    be9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    be9e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    bea2:	b6 01       	movw	r22, r12
    bea4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bea6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bea8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    beac:	f7 01       	movw	r30, r14
    beae:	62 85       	ldd	r22, Z+10	; 0x0a
    beb0:	73 85       	ldd	r23, Z+11	; 0x0b
    beb2:	ce 01       	movw	r24, r28
    beb4:	55 d8       	rcall	.-3926   	; 0xaf60 <compile_node>
    beb6:	b5 01       	movw	r22, r10
    beb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    beba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    bebc:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    bec0:	f7 01       	movw	r30, r14
    bec2:	60 85       	ldd	r22, Z+8	; 0x08
    bec4:	71 85       	ldd	r23, Z+9	; 0x09
    bec6:	96 01       	movw	r18, r12
    bec8:	41 e0       	ldi	r20, 0x01	; 1
    beca:	ce 01       	movw	r24, r28
    becc:	c7 d8       	rcall	.-3698   	; 0xb05c <c_if_cond>
    bece:	98 8a       	std	Y+16, r9	; 0x10
    bed0:	8f 86       	std	Y+15, r8	; 0x0f
    bed2:	7a 8a       	std	Y+18, r7	; 0x12
    bed4:	69 8a       	std	Y+17, r6	; 0x11
    bed6:	5e 8a       	std	Y+22, r5	; 0x16
    bed8:	4d 8a       	std	Y+21, r4	; 0x15
    beda:	f7 01       	movw	r30, r14
    bedc:	64 85       	ldd	r22, Z+12	; 0x0c
    bede:	75 85       	ldd	r23, Z+13	; 0x0d
    bee0:	ce 01       	movw	r24, r28
    bee2:	3e d8       	rcall	.-3972   	; 0xaf60 <compile_node>
    bee4:	b8 01       	movw	r22, r16
    bee6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bee8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    beea:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    beee:	df 91       	pop	r29
    bef0:	cf 91       	pop	r28
    bef2:	1f 91       	pop	r17
    bef4:	0f 91       	pop	r16
    bef6:	ff 90       	pop	r15
    bef8:	ef 90       	pop	r14
    befa:	df 90       	pop	r13
    befc:	cf 90       	pop	r12
    befe:	bf 90       	pop	r11
    bf00:	af 90       	pop	r10
    bf02:	9f 90       	pop	r9
    bf04:	8f 90       	pop	r8
    bf06:	7f 90       	pop	r7
    bf08:	6f 90       	pop	r6
    bf0a:	5f 90       	pop	r5
    bf0c:	4f 90       	pop	r4
    bf0e:	08 95       	ret

0000bf10 <compile_if_stmt>:
    bf10:	4f 92       	push	r4
    bf12:	5f 92       	push	r5
    bf14:	6f 92       	push	r6
    bf16:	7f 92       	push	r7
    bf18:	8f 92       	push	r8
    bf1a:	9f 92       	push	r9
    bf1c:	af 92       	push	r10
    bf1e:	bf 92       	push	r11
    bf20:	cf 92       	push	r12
    bf22:	df 92       	push	r13
    bf24:	ef 92       	push	r14
    bf26:	ff 92       	push	r15
    bf28:	0f 93       	push	r16
    bf2a:	1f 93       	push	r17
    bf2c:	cf 93       	push	r28
    bf2e:	df 93       	push	r29
    bf30:	00 d0       	rcall	.+0      	; 0xbf32 <compile_if_stmt+0x22>
    bf32:	cd b7       	in	r28, 0x3d	; 61
    bf34:	de b7       	in	r29, 0x3e	; 62
    bf36:	6c 01       	movw	r12, r24
    bf38:	2b 01       	movw	r4, r22
    bf3a:	dc 01       	movw	r26, r24
    bf3c:	19 96       	adiw	r26, 0x09	; 9
    bf3e:	6d 90       	ld	r6, X+
    bf40:	7c 90       	ld	r7, X
    bf42:	1a 97       	sbiw	r26, 0x0a	; 10
    bf44:	83 01       	movw	r16, r6
    bf46:	0f 5f       	subi	r16, 0xFF	; 255
    bf48:	1f 4f       	sbci	r17, 0xFF	; 255
    bf4a:	1a 96       	adiw	r26, 0x0a	; 10
    bf4c:	1c 93       	st	X, r17
    bf4e:	0e 93       	st	-X, r16
    bf50:	19 97       	sbiw	r26, 0x09	; 9
    bf52:	fb 01       	movw	r30, r22
    bf54:	80 85       	ldd	r24, Z+8	; 0x08
    bf56:	91 85       	ldd	r25, Z+9	; 0x09
    bf58:	0e 94 f5 10 	call	0x21ea	; 0x21ea <mp_parse_node_is_const_false>
    bf5c:	81 11       	cpse	r24, r1
    bf5e:	3c c0       	rjmp	.+120    	; 0xbfd8 <compile_if_stmt+0xc8>
    bf60:	c3 01       	movw	r24, r6
    bf62:	02 96       	adiw	r24, 0x02	; 2
    bf64:	d6 01       	movw	r26, r12
    bf66:	1a 96       	adiw	r26, 0x0a	; 10
    bf68:	9c 93       	st	X, r25
    bf6a:	8e 93       	st	-X, r24
    bf6c:	19 97       	sbiw	r26, 0x09	; 9
    bf6e:	f2 01       	movw	r30, r4
    bf70:	60 85       	ldd	r22, Z+8	; 0x08
    bf72:	71 85       	ldd	r23, Z+9	; 0x09
    bf74:	98 01       	movw	r18, r16
    bf76:	40 e0       	ldi	r20, 0x00	; 0
    bf78:	c6 01       	movw	r24, r12
    bf7a:	70 d8       	rcall	.-3872   	; 0xb05c <c_if_cond>
    bf7c:	d2 01       	movw	r26, r4
    bf7e:	1a 96       	adiw	r26, 0x0a	; 10
    bf80:	6d 91       	ld	r22, X+
    bf82:	7c 91       	ld	r23, X
    bf84:	1b 97       	sbiw	r26, 0x0b	; 11
    bf86:	c6 01       	movw	r24, r12
    bf88:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    bf8c:	f2 01       	movw	r30, r4
    bf8e:	80 85       	ldd	r24, Z+8	; 0x08
    bf90:	91 85       	ldd	r25, Z+9	; 0x09
    bf92:	0e 94 07 11 	call	0x220e	; 0x220e <mp_parse_node_is_const_true>
    bf96:	81 11       	cpse	r24, r1
    bf98:	9f c0       	rjmp	.+318    	; 0xc0d8 <compile_if_stmt+0x1c8>
    bf9a:	d2 01       	movw	r26, r4
    bf9c:	1c 96       	adiw	r26, 0x0c	; 12
    bf9e:	8d 91       	ld	r24, X+
    bfa0:	9c 91       	ld	r25, X
    bfa2:	1d 97       	sbiw	r26, 0x0d	; 13
    bfa4:	89 2b       	or	r24, r25
    bfa6:	31 f4       	brne	.+12     	; 0xbfb4 <compile_if_stmt+0xa4>
    bfa8:	1e 96       	adiw	r26, 0x0e	; 14
    bfaa:	8d 91       	ld	r24, X+
    bfac:	9c 91       	ld	r25, X
    bfae:	1f 97       	sbiw	r26, 0x0f	; 15
    bfb0:	89 2b       	or	r24, r25
    bfb2:	61 f0       	breq	.+24     	; 0xbfcc <compile_if_stmt+0xbc>
    bfb4:	d6 01       	movw	r26, r12
    bfb6:	5b 96       	adiw	r26, 0x1b	; 27
    bfb8:	ed 91       	ld	r30, X+
    bfba:	fc 91       	ld	r31, X
    bfbc:	5c 97       	sbiw	r26, 0x1c	; 28
    bfbe:	84 81       	ldd	r24, Z+4	; 0x04
    bfc0:	81 11       	cpse	r24, r1
    bfc2:	04 c0       	rjmp	.+8      	; 0xbfcc <compile_if_stmt+0xbc>
    bfc4:	b3 01       	movw	r22, r6
    bfc6:	cf 01       	movw	r24, r30
    bfc8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    bfcc:	b8 01       	movw	r22, r16
    bfce:	f6 01       	movw	r30, r12
    bfd0:	83 8d       	ldd	r24, Z+27	; 0x1b
    bfd2:	94 8d       	ldd	r25, Z+28	; 0x1c
    bfd4:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    bfd8:	ae 01       	movw	r20, r28
    bfda:	4f 5f       	subi	r20, 0xFF	; 255
    bfdc:	5f 4f       	sbci	r21, 0xFF	; 255
    bfde:	6a e6       	ldi	r22, 0x6A	; 106
    bfe0:	70 e0       	ldi	r23, 0x00	; 0
    bfe2:	c2 01       	movw	r24, r4
    bfe4:	0c 96       	adiw	r24, 0x0c	; 12
    bfe6:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    bfea:	4c 01       	movw	r8, r24
    bfec:	89 2b       	or	r24, r25
    bfee:	09 f4       	brne	.+2      	; 0xbff2 <compile_if_stmt+0xe2>
    bff0:	6b c0       	rjmp	.+214    	; 0xc0c8 <compile_if_stmt+0x1b8>
    bff2:	e9 81       	ldd	r30, Y+1	; 0x01
    bff4:	fa 81       	ldd	r31, Y+2	; 0x02
    bff6:	01 90       	ld	r0, Z+
    bff8:	f0 81       	ld	r31, Z
    bffa:	e0 2d       	mov	r30, r0
    bffc:	30 97       	sbiw	r30, 0x00	; 0
    bffe:	09 f1       	breq	.+66     	; 0xc042 <compile_if_stmt+0x132>
    c000:	cf 01       	movw	r24, r30
    c002:	83 70       	andi	r24, 0x03	; 3
    c004:	99 27       	eor	r25, r25
    c006:	89 2b       	or	r24, r25
    c008:	e1 f4       	brne	.+56     	; 0xc042 <compile_if_stmt+0x132>
    c00a:	7f 01       	movw	r14, r30
    c00c:	84 81       	ldd	r24, Z+4	; 0x04
    c00e:	8b 36       	cpi	r24, 0x6B	; 107
    c010:	c1 f4       	brne	.+48     	; 0xc042 <compile_if_stmt+0x132>
    c012:	00 e0       	ldi	r16, 0x00	; 0
    c014:	10 e0       	ldi	r17, 0x00	; 0
    c016:	17 c0       	rjmp	.+46     	; 0xc046 <compile_if_stmt+0x136>
    c018:	e9 81       	ldd	r30, Y+1	; 0x01
    c01a:	fa 81       	ldd	r31, Y+2	; 0x02
    c01c:	c8 01       	movw	r24, r16
    c01e:	88 0f       	add	r24, r24
    c020:	99 1f       	adc	r25, r25
    c022:	e8 0f       	add	r30, r24
    c024:	f9 1f       	adc	r31, r25
    c026:	01 90       	ld	r0, Z+
    c028:	f0 81       	ld	r31, Z
    c02a:	e0 2d       	mov	r30, r0
    c02c:	30 97       	sbiw	r30, 0x00	; 0
    c02e:	49 f0       	breq	.+18     	; 0xc042 <compile_if_stmt+0x132>
    c030:	cf 01       	movw	r24, r30
    c032:	83 70       	andi	r24, 0x03	; 3
    c034:	99 27       	eor	r25, r25
    c036:	89 2b       	or	r24, r25
    c038:	21 f4       	brne	.+8      	; 0xc042 <compile_if_stmt+0x132>
    c03a:	7f 01       	movw	r14, r30
    c03c:	84 81       	ldd	r24, Z+4	; 0x04
    c03e:	8b 36       	cpi	r24, 0x6B	; 107
    c040:	11 f0       	breq	.+4      	; 0xc046 <compile_if_stmt+0x136>
    c042:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    c046:	d7 01       	movw	r26, r14
    c048:	18 96       	adiw	r26, 0x08	; 8
    c04a:	8d 91       	ld	r24, X+
    c04c:	9c 91       	ld	r25, X
    c04e:	19 97       	sbiw	r26, 0x09	; 9
    c050:	0e 94 f5 10 	call	0x21ea	; 0x21ea <mp_parse_node_is_const_false>
    c054:	81 11       	cpse	r24, r1
    c056:	32 c0       	rjmp	.+100    	; 0xc0bc <compile_if_stmt+0x1ac>
    c058:	f6 01       	movw	r30, r12
    c05a:	a1 84       	ldd	r10, Z+9	; 0x09
    c05c:	b2 84       	ldd	r11, Z+10	; 0x0a
    c05e:	c5 01       	movw	r24, r10
    c060:	01 96       	adiw	r24, 0x01	; 1
    c062:	92 87       	std	Z+10, r25	; 0x0a
    c064:	81 87       	std	Z+9, r24	; 0x09
    c066:	d7 01       	movw	r26, r14
    c068:	18 96       	adiw	r26, 0x08	; 8
    c06a:	6d 91       	ld	r22, X+
    c06c:	7c 91       	ld	r23, X
    c06e:	19 97       	sbiw	r26, 0x09	; 9
    c070:	95 01       	movw	r18, r10
    c072:	40 e0       	ldi	r20, 0x00	; 0
    c074:	c6 01       	movw	r24, r12
    c076:	0e 94 2e 58 	call	0xb05c	; 0xb05c <c_if_cond>
    c07a:	f7 01       	movw	r30, r14
    c07c:	62 85       	ldd	r22, Z+10	; 0x0a
    c07e:	73 85       	ldd	r23, Z+11	; 0x0b
    c080:	c6 01       	movw	r24, r12
    c082:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c086:	d7 01       	movw	r26, r14
    c088:	18 96       	adiw	r26, 0x08	; 8
    c08a:	8d 91       	ld	r24, X+
    c08c:	9c 91       	ld	r25, X
    c08e:	19 97       	sbiw	r26, 0x09	; 9
    c090:	0e 94 07 11 	call	0x220e	; 0x220e <mp_parse_node_is_const_true>
    c094:	81 11       	cpse	r24, r1
    c096:	20 c0       	rjmp	.+64     	; 0xc0d8 <compile_if_stmt+0x1c8>
    c098:	d6 01       	movw	r26, r12
    c09a:	5b 96       	adiw	r26, 0x1b	; 27
    c09c:	ed 91       	ld	r30, X+
    c09e:	fc 91       	ld	r31, X
    c0a0:	5c 97       	sbiw	r26, 0x1c	; 28
    c0a2:	84 81       	ldd	r24, Z+4	; 0x04
    c0a4:	81 11       	cpse	r24, r1
    c0a6:	04 c0       	rjmp	.+8      	; 0xc0b0 <compile_if_stmt+0x1a0>
    c0a8:	b3 01       	movw	r22, r6
    c0aa:	cf 01       	movw	r24, r30
    c0ac:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    c0b0:	b5 01       	movw	r22, r10
    c0b2:	f6 01       	movw	r30, r12
    c0b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    c0b6:	94 8d       	ldd	r25, Z+28	; 0x1c
    c0b8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    c0bc:	0f 5f       	subi	r16, 0xFF	; 255
    c0be:	1f 4f       	sbci	r17, 0xFF	; 255
    c0c0:	80 16       	cp	r8, r16
    c0c2:	91 06       	cpc	r9, r17
    c0c4:	09 f0       	breq	.+2      	; 0xc0c8 <compile_if_stmt+0x1b8>
    c0c6:	a8 cf       	rjmp	.-176    	; 0xc018 <compile_if_stmt+0x108>
    c0c8:	d2 01       	movw	r26, r4
    c0ca:	1e 96       	adiw	r26, 0x0e	; 14
    c0cc:	6d 91       	ld	r22, X+
    c0ce:	7c 91       	ld	r23, X
    c0d0:	1f 97       	sbiw	r26, 0x0f	; 15
    c0d2:	c6 01       	movw	r24, r12
    c0d4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c0d8:	b3 01       	movw	r22, r6
    c0da:	f6 01       	movw	r30, r12
    c0dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    c0de:	94 8d       	ldd	r25, Z+28	; 0x1c
    c0e0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    c0e4:	0f 90       	pop	r0
    c0e6:	0f 90       	pop	r0
    c0e8:	df 91       	pop	r29
    c0ea:	cf 91       	pop	r28
    c0ec:	1f 91       	pop	r17
    c0ee:	0f 91       	pop	r16
    c0f0:	ff 90       	pop	r15
    c0f2:	ef 90       	pop	r14
    c0f4:	df 90       	pop	r13
    c0f6:	cf 90       	pop	r12
    c0f8:	bf 90       	pop	r11
    c0fa:	af 90       	pop	r10
    c0fc:	9f 90       	pop	r9
    c0fe:	8f 90       	pop	r8
    c100:	7f 90       	pop	r7
    c102:	6f 90       	pop	r6
    c104:	5f 90       	pop	r5
    c106:	4f 90       	pop	r4
    c108:	08 95       	ret

0000c10a <compile_assert_stmt>:
    c10a:	ef 92       	push	r14
    c10c:	ff 92       	push	r15
    c10e:	0f 93       	push	r16
    c110:	1f 93       	push	r17
    c112:	cf 93       	push	r28
    c114:	df 93       	push	r29
    c116:	20 91 a8 6b 	lds	r18, 0x6BA8	; 0x806ba8 <mp_state_ctx+0x4e>
    c11a:	30 91 a9 6b 	lds	r19, 0x6BA9	; 0x806ba9 <mp_state_ctx+0x4f>
    c11e:	23 2b       	or	r18, r19
    c120:	b1 f5       	brne	.+108    	; 0xc18e <compile_assert_stmt+0x84>
    c122:	8b 01       	movw	r16, r22
    c124:	ec 01       	movw	r28, r24
    c126:	e9 84       	ldd	r14, Y+9	; 0x09
    c128:	fa 84       	ldd	r15, Y+10	; 0x0a
    c12a:	c7 01       	movw	r24, r14
    c12c:	01 96       	adiw	r24, 0x01	; 1
    c12e:	9a 87       	std	Y+10, r25	; 0x0a
    c130:	89 87       	std	Y+9, r24	; 0x09
    c132:	fb 01       	movw	r30, r22
    c134:	60 85       	ldd	r22, Z+8	; 0x08
    c136:	71 85       	ldd	r23, Z+9	; 0x09
    c138:	97 01       	movw	r18, r14
    c13a:	41 e0       	ldi	r20, 0x01	; 1
    c13c:	ce 01       	movw	r24, r28
    c13e:	0e 94 2e 58 	call	0xb05c	; 0xb05c <c_if_cond>
    c142:	41 e0       	ldi	r20, 0x01	; 1
    c144:	50 e0       	ldi	r21, 0x00	; 0
    c146:	6f e1       	ldi	r22, 0x1F	; 31
    c148:	70 e0       	ldi	r23, 0x00	; 0
    c14a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c14c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c14e:	0e 94 98 14 	call	0x2930	; 0x2930 <mp_emit_bc_load_global>
    c152:	f8 01       	movw	r30, r16
    c154:	62 85       	ldd	r22, Z+10	; 0x0a
    c156:	73 85       	ldd	r23, Z+11	; 0x0b
    c158:	61 15       	cp	r22, r1
    c15a:	71 05       	cpc	r23, r1
    c15c:	69 f0       	breq	.+26     	; 0xc178 <compile_assert_stmt+0x6e>
    c15e:	ce 01       	movw	r24, r28
    c160:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c164:	20 e0       	ldi	r18, 0x00	; 0
    c166:	30 e0       	ldi	r19, 0x00	; 0
    c168:	40 e0       	ldi	r20, 0x00	; 0
    c16a:	50 e0       	ldi	r21, 0x00	; 0
    c16c:	61 e0       	ldi	r22, 0x01	; 1
    c16e:	70 e0       	ldi	r23, 0x00	; 0
    c170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c174:	0e 94 30 19 	call	0x3260	; 0x3260 <mp_emit_bc_call_function>
    c178:	61 e0       	ldi	r22, 0x01	; 1
    c17a:	70 e0       	ldi	r23, 0x00	; 0
    c17c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c17e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c180:	0e 94 5e 19 	call	0x32bc	; 0x32bc <mp_emit_bc_raise_varargs>
    c184:	b7 01       	movw	r22, r14
    c186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c18a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    c18e:	df 91       	pop	r29
    c190:	cf 91       	pop	r28
    c192:	1f 91       	pop	r17
    c194:	0f 91       	pop	r16
    c196:	ff 90       	pop	r15
    c198:	ef 90       	pop	r14
    c19a:	08 95       	ret

0000c19c <compile_raise_stmt>:
    c19c:	0f 93       	push	r16
    c19e:	1f 93       	push	r17
    c1a0:	cf 93       	push	r28
    c1a2:	df 93       	push	r29
    c1a4:	8c 01       	movw	r16, r24
    c1a6:	fb 01       	movw	r30, r22
    c1a8:	c0 85       	ldd	r28, Z+8	; 0x08
    c1aa:	d1 85       	ldd	r29, Z+9	; 0x09
    c1ac:	20 97       	sbiw	r28, 0x00	; 0
    c1ae:	41 f4       	brne	.+16     	; 0xc1c0 <compile_raise_stmt+0x24>
    c1b0:	60 e0       	ldi	r22, 0x00	; 0
    c1b2:	70 e0       	ldi	r23, 0x00	; 0
    c1b4:	fc 01       	movw	r30, r24
    c1b6:	83 8d       	ldd	r24, Z+27	; 0x1b
    c1b8:	94 8d       	ldd	r25, Z+28	; 0x1c
    c1ba:	0e 94 5e 19 	call	0x32bc	; 0x32bc <mp_emit_bc_raise_varargs>
    c1be:	25 c0       	rjmp	.+74     	; 0xc20a <compile_raise_stmt+0x6e>
    c1c0:	ce 01       	movw	r24, r28
    c1c2:	83 70       	andi	r24, 0x03	; 3
    c1c4:	99 27       	eor	r25, r25
    c1c6:	89 2b       	or	r24, r25
    c1c8:	a9 f4       	brne	.+42     	; 0xc1f4 <compile_raise_stmt+0x58>
    c1ca:	8c 81       	ldd	r24, Y+4	; 0x04
    c1cc:	88 35       	cpi	r24, 0x58	; 88
    c1ce:	91 f4       	brne	.+36     	; 0xc1f4 <compile_raise_stmt+0x58>
    c1d0:	68 85       	ldd	r22, Y+8	; 0x08
    c1d2:	79 85       	ldd	r23, Y+9	; 0x09
    c1d4:	c8 01       	movw	r24, r16
    c1d6:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c1da:	6a 85       	ldd	r22, Y+10	; 0x0a
    c1dc:	7b 85       	ldd	r23, Y+11	; 0x0b
    c1de:	c8 01       	movw	r24, r16
    c1e0:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c1e4:	62 e0       	ldi	r22, 0x02	; 2
    c1e6:	70 e0       	ldi	r23, 0x00	; 0
    c1e8:	f8 01       	movw	r30, r16
    c1ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    c1ec:	94 8d       	ldd	r25, Z+28	; 0x1c
    c1ee:	0e 94 5e 19 	call	0x32bc	; 0x32bc <mp_emit_bc_raise_varargs>
    c1f2:	0b c0       	rjmp	.+22     	; 0xc20a <compile_raise_stmt+0x6e>
    c1f4:	be 01       	movw	r22, r28
    c1f6:	c8 01       	movw	r24, r16
    c1f8:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c1fc:	61 e0       	ldi	r22, 0x01	; 1
    c1fe:	70 e0       	ldi	r23, 0x00	; 0
    c200:	f8 01       	movw	r30, r16
    c202:	83 8d       	ldd	r24, Z+27	; 0x1b
    c204:	94 8d       	ldd	r25, Z+28	; 0x1c
    c206:	0e 94 5e 19 	call	0x32bc	; 0x32bc <mp_emit_bc_raise_varargs>
    c20a:	df 91       	pop	r29
    c20c:	cf 91       	pop	r28
    c20e:	1f 91       	pop	r17
    c210:	0f 91       	pop	r16
    c212:	08 95       	ret

0000c214 <compile_yield_stmt>:
    c214:	cf 93       	push	r28
    c216:	df 93       	push	r29
    c218:	ec 01       	movw	r28, r24
    c21a:	fb 01       	movw	r30, r22
    c21c:	60 85       	ldd	r22, Z+8	; 0x08
    c21e:	71 85       	ldd	r23, Z+9	; 0x09
    c220:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c224:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c226:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c228:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    c22c:	df 91       	pop	r29
    c22e:	cf 91       	pop	r28
    c230:	08 95       	ret

0000c232 <compile_return_stmt>:
    c232:	cf 93       	push	r28
    c234:	df 93       	push	r29
    c236:	ec 01       	movw	r28, r24
    c238:	fb 01       	movw	r30, r22
    c23a:	60 85       	ldd	r22, Z+8	; 0x08
    c23c:	71 85       	ldd	r23, Z+9	; 0x09
    c23e:	61 15       	cp	r22, r1
    c240:	71 05       	cpc	r23, r1
    c242:	31 f4       	brne	.+12     	; 0xc250 <compile_return_stmt+0x1e>
    c244:	6e e0       	ldi	r22, 0x0E	; 14
    c246:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c248:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c24a:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    c24e:	02 c0       	rjmp	.+4      	; 0xc254 <compile_return_stmt+0x22>
    c250:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c254:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c256:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c258:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    c25c:	df 91       	pop	r29
    c25e:	cf 91       	pop	r28
    c260:	08 95       	ret

0000c262 <compile_generic_tuple>:
    c262:	8f 92       	push	r8
    c264:	9f 92       	push	r9
    c266:	af 92       	push	r10
    c268:	bf 92       	push	r11
    c26a:	cf 92       	push	r12
    c26c:	df 92       	push	r13
    c26e:	ef 92       	push	r14
    c270:	ff 92       	push	r15
    c272:	0f 93       	push	r16
    c274:	1f 93       	push	r17
    c276:	cf 93       	push	r28
    c278:	df 93       	push	r29
    c27a:	7c 01       	movw	r14, r24
    c27c:	fb 01       	movw	r30, r22
    c27e:	84 80       	ldd	r8, Z+4	; 0x04
    c280:	95 80       	ldd	r9, Z+5	; 0x05
    c282:	a6 80       	ldd	r10, Z+6	; 0x06
    c284:	b7 80       	ldd	r11, Z+7	; 0x07
    c286:	89 2c       	mov	r8, r9
    c288:	9a 2c       	mov	r9, r10
    c28a:	ab 2c       	mov	r10, r11
    c28c:	bb 24       	eor	r11, r11
    c28e:	64 01       	movw	r12, r8
    c290:	81 14       	cp	r8, r1
    c292:	91 04       	cpc	r9, r1
    c294:	81 f0       	breq	.+32     	; 0xc2b6 <compile_generic_tuple+0x54>
    c296:	8b 01       	movw	r16, r22
    c298:	08 5f       	subi	r16, 0xF8	; 248
    c29a:	1f 4f       	sbci	r17, 0xFF	; 255
    c29c:	c0 e0       	ldi	r28, 0x00	; 0
    c29e:	d0 e0       	ldi	r29, 0x00	; 0
    c2a0:	f8 01       	movw	r30, r16
    c2a2:	61 91       	ld	r22, Z+
    c2a4:	71 91       	ld	r23, Z+
    c2a6:	8f 01       	movw	r16, r30
    c2a8:	c7 01       	movw	r24, r14
    c2aa:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c2ae:	21 96       	adiw	r28, 0x01	; 1
    c2b0:	cc 15       	cp	r28, r12
    c2b2:	dd 05       	cpc	r29, r13
    c2b4:	a8 f3       	brcs	.-22     	; 0xc2a0 <compile_generic_tuple+0x3e>
    c2b6:	40 e0       	ldi	r20, 0x00	; 0
    c2b8:	50 e0       	ldi	r21, 0x00	; 0
    c2ba:	b4 01       	movw	r22, r8
    c2bc:	f7 01       	movw	r30, r14
    c2be:	83 8d       	ldd	r24, Z+27	; 0x1b
    c2c0:	94 8d       	ldd	r25, Z+28	; 0x1c
    c2c2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    c2c6:	df 91       	pop	r29
    c2c8:	cf 91       	pop	r28
    c2ca:	1f 91       	pop	r17
    c2cc:	0f 91       	pop	r16
    c2ce:	ff 90       	pop	r15
    c2d0:	ef 90       	pop	r14
    c2d2:	df 90       	pop	r13
    c2d4:	cf 90       	pop	r12
    c2d6:	bf 90       	pop	r11
    c2d8:	af 90       	pop	r10
    c2da:	9f 90       	pop	r9
    c2dc:	8f 90       	pop	r8
    c2de:	08 95       	ret

0000c2e0 <compile_atom_paren>:
    c2e0:	0f 93       	push	r16
    c2e2:	1f 93       	push	r17
    c2e4:	db 01       	movw	r26, r22
    c2e6:	18 96       	adiw	r26, 0x08	; 8
    c2e8:	6d 91       	ld	r22, X+
    c2ea:	7c 91       	ld	r23, X
    c2ec:	19 97       	sbiw	r26, 0x09	; 9
    c2ee:	61 15       	cp	r22, r1
    c2f0:	71 05       	cpc	r23, r1
    c2f2:	51 f4       	brne	.+20     	; 0xc308 <compile_atom_paren+0x28>
    c2f4:	40 e0       	ldi	r20, 0x00	; 0
    c2f6:	50 e0       	ldi	r21, 0x00	; 0
    c2f8:	60 e0       	ldi	r22, 0x00	; 0
    c2fa:	70 e0       	ldi	r23, 0x00	; 0
    c2fc:	fc 01       	movw	r30, r24
    c2fe:	83 8d       	ldd	r24, Z+27	; 0x1b
    c300:	94 8d       	ldd	r25, Z+28	; 0x1c
    c302:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    c306:	2d c0       	rjmp	.+90     	; 0xc362 <compile_atom_paren+0x82>
    c308:	9b 01       	movw	r18, r22
    c30a:	23 70       	andi	r18, 0x03	; 3
    c30c:	33 27       	eor	r19, r19
    c30e:	23 2b       	or	r18, r19
    c310:	49 f4       	brne	.+18     	; 0xc324 <compile_atom_paren+0x44>
    c312:	db 01       	movw	r26, r22
    c314:	14 96       	adiw	r26, 0x04	; 4
    c316:	0d 91       	ld	r16, X+
    c318:	1d 91       	ld	r17, X+
    c31a:	2d 91       	ld	r18, X+
    c31c:	3c 91       	ld	r19, X
    c31e:	17 97       	sbiw	r26, 0x07	; 7
    c320:	0b 38       	cpi	r16, 0x8B	; 139
    c322:	11 f0       	breq	.+4      	; 0xc328 <compile_atom_paren+0x48>
    c324:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    c328:	01 2f       	mov	r16, r17
    c32a:	12 2f       	mov	r17, r18
    c32c:	23 2f       	mov	r18, r19
    c32e:	33 27       	eor	r19, r19
    c330:	02 30       	cpi	r16, 0x02	; 2
    c332:	11 05       	cpc	r17, r1
    c334:	21 05       	cpc	r18, r1
    c336:	31 05       	cpc	r19, r1
    c338:	99 f4       	brne	.+38     	; 0xc360 <compile_atom_paren+0x80>
    c33a:	db 01       	movw	r26, r22
    c33c:	1a 96       	adiw	r26, 0x0a	; 10
    c33e:	ed 91       	ld	r30, X+
    c340:	fc 91       	ld	r31, X
    c342:	1b 97       	sbiw	r26, 0x0b	; 11
    c344:	30 97       	sbiw	r30, 0x00	; 0
    c346:	61 f0       	breq	.+24     	; 0xc360 <compile_atom_paren+0x80>
    c348:	9f 01       	movw	r18, r30
    c34a:	23 70       	andi	r18, 0x03	; 3
    c34c:	33 27       	eor	r19, r19
    c34e:	23 2b       	or	r18, r19
    c350:	39 f4       	brne	.+14     	; 0xc360 <compile_atom_paren+0x80>
    c352:	24 81       	ldd	r18, Z+4	; 0x04
    c354:	2f 39       	cpi	r18, 0x9F	; 159
    c356:	21 f4       	brne	.+8      	; 0xc360 <compile_atom_paren+0x80>
    c358:	46 e0       	ldi	r20, 0x06	; 6
    c35a:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <compile_comprehension>
    c35e:	01 c0       	rjmp	.+2      	; 0xc362 <compile_atom_paren+0x82>
    c360:	80 df       	rcall	.-256    	; 0xc262 <compile_generic_tuple>
    c362:	1f 91       	pop	r17
    c364:	0f 91       	pop	r16
    c366:	08 95       	ret

0000c368 <compile_generic_all_nodes>:
    c368:	af 92       	push	r10
    c36a:	bf 92       	push	r11
    c36c:	cf 92       	push	r12
    c36e:	df 92       	push	r13
    c370:	ef 92       	push	r14
    c372:	ff 92       	push	r15
    c374:	0f 93       	push	r16
    c376:	1f 93       	push	r17
    c378:	cf 93       	push	r28
    c37a:	df 93       	push	r29
    c37c:	fb 01       	movw	r30, r22
    c37e:	04 81       	ldd	r16, Z+4	; 0x04
    c380:	15 81       	ldd	r17, Z+5	; 0x05
    c382:	26 81       	ldd	r18, Z+6	; 0x06
    c384:	37 81       	ldd	r19, Z+7	; 0x07
    c386:	01 2f       	mov	r16, r17
    c388:	12 2f       	mov	r17, r18
    c38a:	23 2f       	mov	r18, r19
    c38c:	33 27       	eor	r19, r19
    c38e:	58 01       	movw	r10, r16
    c390:	10 16       	cp	r1, r16
    c392:	11 06       	cpc	r1, r17
    c394:	1c f5       	brge	.+70     	; 0xc3dc <compile_generic_all_nodes+0x74>
    c396:	7b 01       	movw	r14, r22
    c398:	8c 01       	movw	r16, r24
    c39a:	6b 01       	movw	r12, r22
    c39c:	f8 e0       	ldi	r31, 0x08	; 8
    c39e:	cf 0e       	add	r12, r31
    c3a0:	d1 1c       	adc	r13, r1
    c3a2:	c0 e0       	ldi	r28, 0x00	; 0
    c3a4:	d0 e0       	ldi	r29, 0x00	; 0
    c3a6:	f6 01       	movw	r30, r12
    c3a8:	61 91       	ld	r22, Z+
    c3aa:	71 91       	ld	r23, Z+
    c3ac:	6f 01       	movw	r12, r30
    c3ae:	c8 01       	movw	r24, r16
    c3b0:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c3b4:	f8 01       	movw	r30, r16
    c3b6:	85 81       	ldd	r24, Z+5	; 0x05
    c3b8:	96 81       	ldd	r25, Z+6	; 0x06
    c3ba:	89 2b       	or	r24, r25
    c3bc:	59 f0       	breq	.+22     	; 0xc3d4 <compile_generic_all_nodes+0x6c>
    c3be:	24 96       	adiw	r28, 0x04	; 4
    c3c0:	cc 0f       	add	r28, r28
    c3c2:	dd 1f       	adc	r29, r29
    c3c4:	ce 0d       	add	r28, r14
    c3c6:	df 1d       	adc	r29, r15
    c3c8:	68 81       	ld	r22, Y
    c3ca:	79 81       	ldd	r23, Y+1	; 0x01
    c3cc:	c8 01       	movw	r24, r16
    c3ce:	0e 94 a3 01 	call	0x346	; 0x346 <compile_error_set_line>
    c3d2:	04 c0       	rjmp	.+8      	; 0xc3dc <compile_generic_all_nodes+0x74>
    c3d4:	21 96       	adiw	r28, 0x01	; 1
    c3d6:	ca 15       	cp	r28, r10
    c3d8:	db 05       	cpc	r29, r11
    c3da:	2c f3       	brlt	.-54     	; 0xc3a6 <compile_generic_all_nodes+0x3e>
    c3dc:	df 91       	pop	r29
    c3de:	cf 91       	pop	r28
    c3e0:	1f 91       	pop	r17
    c3e2:	0f 91       	pop	r16
    c3e4:	ff 90       	pop	r15
    c3e6:	ef 90       	pop	r14
    c3e8:	df 90       	pop	r13
    c3ea:	cf 90       	pop	r12
    c3ec:	bf 90       	pop	r11
    c3ee:	af 90       	pop	r10
    c3f0:	08 95       	ret

0000c3f2 <compile_power>:
    c3f2:	cf 93       	push	r28
    c3f4:	df 93       	push	r29
    c3f6:	ec 01       	movw	r28, r24
    c3f8:	b7 df       	rcall	.-146    	; 0xc368 <compile_generic_all_nodes>
    c3fa:	62 e2       	ldi	r22, 0x22	; 34
    c3fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c3fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c400:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    c404:	df 91       	pop	r29
    c406:	cf 91       	pop	r28
    c408:	08 95       	ret

0000c40a <compile_atom_bracket>:
    c40a:	0f 93       	push	r16
    c40c:	1f 93       	push	r17
    c40e:	cf 93       	push	r28
    c410:	df 93       	push	r29
    c412:	8c 01       	movw	r16, r24
    c414:	fb 01       	movw	r30, r22
    c416:	c0 85       	ldd	r28, Z+8	; 0x08
    c418:	d1 85       	ldd	r29, Z+9	; 0x09
    c41a:	20 97       	sbiw	r28, 0x00	; 0
    c41c:	51 f4       	brne	.+20     	; 0xc432 <compile_atom_bracket+0x28>
    c41e:	41 e0       	ldi	r20, 0x01	; 1
    c420:	50 e0       	ldi	r21, 0x00	; 0
    c422:	60 e0       	ldi	r22, 0x00	; 0
    c424:	70 e0       	ldi	r23, 0x00	; 0
    c426:	fc 01       	movw	r30, r24
    c428:	83 8d       	ldd	r24, Z+27	; 0x1b
    c42a:	94 8d       	ldd	r25, Z+28	; 0x1c
    c42c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    c430:	45 c0       	rjmp	.+138    	; 0xc4bc <compile_atom_bracket+0xb2>
    c432:	ce 01       	movw	r24, r28
    c434:	83 70       	andi	r24, 0x03	; 3
    c436:	99 27       	eor	r25, r25
    c438:	89 2b       	or	r24, r25
    c43a:	99 f5       	brne	.+102    	; 0xc4a2 <compile_atom_bracket+0x98>
    c43c:	8c 81       	ldd	r24, Y+4	; 0x04
    c43e:	9d 81       	ldd	r25, Y+5	; 0x05
    c440:	ae 81       	ldd	r26, Y+6	; 0x06
    c442:	bf 81       	ldd	r27, Y+7	; 0x07
    c444:	8b 38       	cpi	r24, 0x8B	; 139
    c446:	69 f5       	brne	.+90     	; 0xc4a2 <compile_atom_bracket+0x98>
    c448:	89 2f       	mov	r24, r25
    c44a:	9a 2f       	mov	r25, r26
    c44c:	ab 2f       	mov	r26, r27
    c44e:	bb 27       	eor	r27, r27
    c450:	02 97       	sbiw	r24, 0x02	; 2
    c452:	a1 05       	cpc	r26, r1
    c454:	b1 05       	cpc	r27, r1
    c456:	91 f4       	brne	.+36     	; 0xc47c <compile_atom_bracket+0x72>
    c458:	ea 85       	ldd	r30, Y+10	; 0x0a
    c45a:	fb 85       	ldd	r31, Y+11	; 0x0b
    c45c:	30 97       	sbiw	r30, 0x00	; 0
    c45e:	71 f0       	breq	.+28     	; 0xc47c <compile_atom_bracket+0x72>
    c460:	cf 01       	movw	r24, r30
    c462:	83 70       	andi	r24, 0x03	; 3
    c464:	99 27       	eor	r25, r25
    c466:	89 2b       	or	r24, r25
    c468:	49 f4       	brne	.+18     	; 0xc47c <compile_atom_bracket+0x72>
    c46a:	84 81       	ldd	r24, Z+4	; 0x04
    c46c:	8f 39       	cpi	r24, 0x9F	; 159
    c46e:	31 f4       	brne	.+12     	; 0xc47c <compile_atom_bracket+0x72>
    c470:	43 e0       	ldi	r20, 0x03	; 3
    c472:	be 01       	movw	r22, r28
    c474:	c8 01       	movw	r24, r16
    c476:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <compile_comprehension>
    c47a:	20 c0       	rjmp	.+64     	; 0xc4bc <compile_atom_bracket+0xb2>
    c47c:	be 01       	movw	r22, r28
    c47e:	c8 01       	movw	r24, r16
    c480:	73 df       	rcall	.-282    	; 0xc368 <compile_generic_all_nodes>
    c482:	8c 81       	ldd	r24, Y+4	; 0x04
    c484:	9d 81       	ldd	r25, Y+5	; 0x05
    c486:	ae 81       	ldd	r26, Y+6	; 0x06
    c488:	bf 81       	ldd	r27, Y+7	; 0x07
    c48a:	69 2f       	mov	r22, r25
    c48c:	7a 2f       	mov	r23, r26
    c48e:	8b 2f       	mov	r24, r27
    c490:	99 27       	eor	r25, r25
    c492:	41 e0       	ldi	r20, 0x01	; 1
    c494:	50 e0       	ldi	r21, 0x00	; 0
    c496:	f8 01       	movw	r30, r16
    c498:	83 8d       	ldd	r24, Z+27	; 0x1b
    c49a:	94 8d       	ldd	r25, Z+28	; 0x1c
    c49c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    c4a0:	0d c0       	rjmp	.+26     	; 0xc4bc <compile_atom_bracket+0xb2>
    c4a2:	be 01       	movw	r22, r28
    c4a4:	c8 01       	movw	r24, r16
    c4a6:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c4aa:	41 e0       	ldi	r20, 0x01	; 1
    c4ac:	50 e0       	ldi	r21, 0x00	; 0
    c4ae:	61 e0       	ldi	r22, 0x01	; 1
    c4b0:	70 e0       	ldi	r23, 0x00	; 0
    c4b2:	f8 01       	movw	r30, r16
    c4b4:	83 8d       	ldd	r24, Z+27	; 0x1b
    c4b6:	94 8d       	ldd	r25, Z+28	; 0x1c
    c4b8:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    c4bc:	df 91       	pop	r29
    c4be:	cf 91       	pop	r28
    c4c0:	1f 91       	pop	r17
    c4c2:	0f 91       	pop	r16
    c4c4:	08 95       	ret

0000c4c6 <compile_atom_expr_normal>:
    c4c6:	8f 92       	push	r8
    c4c8:	9f 92       	push	r9
    c4ca:	af 92       	push	r10
    c4cc:	bf 92       	push	r11
    c4ce:	cf 92       	push	r12
    c4d0:	df 92       	push	r13
    c4d2:	ef 92       	push	r14
    c4d4:	ff 92       	push	r15
    c4d6:	0f 93       	push	r16
    c4d8:	1f 93       	push	r17
    c4da:	cf 93       	push	r28
    c4dc:	df 93       	push	r29
    c4de:	6c 01       	movw	r12, r24
    c4e0:	eb 01       	movw	r28, r22
    c4e2:	68 85       	ldd	r22, Y+8	; 0x08
    c4e4:	79 85       	ldd	r23, Y+9	; 0x09
    c4e6:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c4ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    c4ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    c4ee:	30 97       	sbiw	r30, 0x00	; 0
    c4f0:	09 f4       	brne	.+2      	; 0xc4f4 <compile_atom_expr_normal+0x2e>
    c4f2:	21 c1       	rjmp	.+578    	; 0xc736 <compile_atom_expr_normal+0x270>
    c4f4:	84 81       	ldd	r24, Z+4	; 0x04
    c4f6:	95 81       	ldd	r25, Z+5	; 0x05
    c4f8:	a6 81       	ldd	r26, Z+6	; 0x06
    c4fa:	b7 81       	ldd	r27, Z+7	; 0x07
    c4fc:	87 38       	cpi	r24, 0x87	; 135
    c4fe:	09 f0       	breq	.+2      	; 0xc502 <compile_atom_expr_normal+0x3c>
    c500:	f1 c0       	rjmp	.+482    	; 0xc6e4 <compile_atom_expr_normal+0x21e>
    c502:	89 2f       	mov	r24, r25
    c504:	9a 2f       	mov	r25, r26
    c506:	ab 2f       	mov	r26, r27
    c508:	bb 27       	eor	r27, r27
    c50a:	7c 01       	movw	r14, r24
    c50c:	8f 01       	movw	r16, r30
    c50e:	08 5f       	subi	r16, 0xF8	; 248
    c510:	1f 4f       	sbci	r17, 0xFF	; 255
    c512:	d6 01       	movw	r26, r12
    c514:	59 96       	adiw	r26, 0x19	; 25
    c516:	ed 91       	ld	r30, X+
    c518:	fc 91       	ld	r31, X
    c51a:	5a 97       	sbiw	r26, 0x1a	; 26
    c51c:	80 81       	ld	r24, Z
    c51e:	87 30       	cpi	r24, 0x07	; 7
    c520:	09 f0       	breq	.+2      	; 0xc524 <compile_atom_expr_normal+0x5e>
    c522:	84 c0       	rjmp	.+264    	; 0xc62c <compile_atom_expr_normal+0x166>
    c524:	88 85       	ldd	r24, Y+8	; 0x08
    c526:	99 85       	ldd	r25, Y+9	; 0x09
    c528:	9c 01       	movw	r18, r24
    c52a:	2f 70       	andi	r18, 0x0F	; 15
    c52c:	33 27       	eor	r19, r19
    c52e:	22 30       	cpi	r18, 0x02	; 2
    c530:	31 05       	cpc	r19, r1
    c532:	09 f0       	breq	.+2      	; 0xc536 <compile_atom_expr_normal+0x70>
    c534:	7e c0       	rjmp	.+252    	; 0xc632 <compile_atom_expr_normal+0x16c>
    c536:	03 c0       	rjmp	.+6      	; 0xc53e <compile_atom_expr_normal+0x78>
    c538:	ee 24       	eor	r14, r14
    c53a:	e3 94       	inc	r14
    c53c:	f1 2c       	mov	r15, r1
    c53e:	92 95       	swap	r25
    c540:	82 95       	swap	r24
    c542:	8f 70       	andi	r24, 0x0F	; 15
    c544:	89 27       	eor	r24, r25
    c546:	9f 70       	andi	r25, 0x0F	; 15
    c548:	89 27       	eor	r24, r25
    c54a:	8a 39       	cpi	r24, 0x9A	; 154
    c54c:	91 05       	cpc	r25, r1
    c54e:	09 f0       	breq	.+2      	; 0xc552 <compile_atom_expr_normal+0x8c>
    c550:	73 c0       	rjmp	.+230    	; 0xc638 <compile_atom_expr_normal+0x172>
    c552:	d8 01       	movw	r26, r16
    c554:	ed 91       	ld	r30, X+
    c556:	fc 91       	ld	r31, X
    c558:	84 81       	ldd	r24, Z+4	; 0x04
    c55a:	8d 32       	cpi	r24, 0x2D	; 45
    c55c:	09 f0       	breq	.+2      	; 0xc560 <compile_atom_expr_normal+0x9a>
    c55e:	6f c0       	rjmp	.+222    	; 0xc63e <compile_atom_expr_normal+0x178>
    c560:	80 85       	ldd	r24, Z+8	; 0x08
    c562:	91 85       	ldd	r25, Z+9	; 0x09
    c564:	89 2b       	or	r24, r25
    c566:	09 f0       	breq	.+2      	; 0xc56a <compile_atom_expr_normal+0xa4>
    c568:	6d c0       	rjmp	.+218    	; 0xc644 <compile_atom_expr_normal+0x17e>
    c56a:	6a e0       	ldi	r22, 0x0A	; 10
    c56c:	70 e0       	ldi	r23, 0x00	; 0
    c56e:	c6 01       	movw	r24, r12
    c570:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    c574:	f6 01       	movw	r30, r12
    c576:	a1 8d       	ldd	r26, Z+25	; 0x19
    c578:	b2 8d       	ldd	r27, Z+26	; 0x1a
    c57a:	91 96       	adiw	r26, 0x21	; 33
    c57c:	ed 91       	ld	r30, X+
    c57e:	fc 91       	ld	r31, X
    c580:	92 97       	sbiw	r26, 0x22	; 34
    c582:	5f 96       	adiw	r26, 0x1f	; 31
    c584:	8d 91       	ld	r24, X+
    c586:	9c 91       	ld	r25, X
    c588:	90 97       	sbiw	r26, 0x20	; 32
    c58a:	00 97       	sbiw	r24, 0x00	; 0
    c58c:	09 f4       	brne	.+2      	; 0xc590 <compile_atom_expr_normal+0xca>
    c58e:	bb c0       	rjmp	.+374    	; 0xc706 <compile_atom_expr_normal+0x240>
    c590:	21 81       	ldd	r18, Z+1	; 0x01
    c592:	20 ff       	sbrs	r18, 0
    c594:	0e c0       	rjmp	.+28     	; 0xc5b2 <compile_atom_expr_normal+0xec>
    c596:	03 c0       	rjmp	.+6      	; 0xc59e <compile_atom_expr_normal+0xd8>
    c598:	21 81       	ldd	r18, Z+1	; 0x01
    c59a:	20 ff       	sbrs	r18, 0
    c59c:	0a c0       	rjmp	.+20     	; 0xc5b2 <compile_atom_expr_normal+0xec>
    c59e:	64 81       	ldd	r22, Z+4	; 0x04
    c5a0:	75 81       	ldd	r23, Z+5	; 0x05
    c5a2:	c6 01       	movw	r24, r12
    c5a4:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    c5a8:	f3 e0       	ldi	r31, 0x03	; 3
    c5aa:	ef 16       	cp	r14, r31
    c5ac:	f1 04       	cpc	r15, r1
    c5ae:	30 f4       	brcc	.+12     	; 0xc5bc <compile_atom_expr_normal+0xf6>
    c5b0:	2d c0       	rjmp	.+90     	; 0xc60c <compile_atom_expr_normal+0x146>
    c5b2:	01 97       	sbiw	r24, 0x01	; 1
    c5b4:	36 96       	adiw	r30, 0x06	; 6
    c5b6:	00 97       	sbiw	r24, 0x00	; 0
    c5b8:	79 f7       	brne	.-34     	; 0xc598 <compile_atom_expr_normal+0xd2>
    c5ba:	a5 c0       	rjmp	.+330    	; 0xc706 <compile_atom_expr_normal+0x240>
    c5bc:	d8 01       	movw	r26, r16
    c5be:	12 96       	adiw	r26, 0x02	; 2
    c5c0:	ed 91       	ld	r30, X+
    c5c2:	fc 91       	ld	r31, X
    c5c4:	13 97       	sbiw	r26, 0x03	; 3
    c5c6:	84 81       	ldd	r24, Z+4	; 0x04
    c5c8:	8f 32       	cpi	r24, 0x2F	; 47
    c5ca:	01 f5       	brne	.+64     	; 0xc60c <compile_atom_expr_normal+0x146>
    c5cc:	14 96       	adiw	r26, 0x04	; 4
    c5ce:	cd 91       	ld	r28, X+
    c5d0:	dc 91       	ld	r29, X
    c5d2:	15 97       	sbiw	r26, 0x05	; 5
    c5d4:	8c 81       	ldd	r24, Y+4	; 0x04
    c5d6:	8d 32       	cpi	r24, 0x2D	; 45
    c5d8:	c9 f4       	brne	.+50     	; 0xc60c <compile_atom_expr_normal+0x146>
    c5da:	60 85       	ldd	r22, Z+8	; 0x08
    c5dc:	71 85       	ldd	r23, Z+9	; 0x09
    c5de:	72 95       	swap	r23
    c5e0:	62 95       	swap	r22
    c5e2:	6f 70       	andi	r22, 0x0F	; 15
    c5e4:	67 27       	eor	r22, r23
    c5e6:	7f 70       	andi	r23, 0x0F	; 15
    c5e8:	67 27       	eor	r22, r23
    c5ea:	41 e0       	ldi	r20, 0x01	; 1
    c5ec:	f6 01       	movw	r30, r12
    c5ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    c5f0:	94 8d       	ldd	r25, Z+28	; 0x1c
    c5f2:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <mp_emit_bc_load_method>
    c5f6:	68 85       	ldd	r22, Y+8	; 0x08
    c5f8:	79 85       	ldd	r23, Y+9	; 0x09
    c5fa:	20 e0       	ldi	r18, 0x00	; 0
    c5fc:	30 e0       	ldi	r19, 0x00	; 0
    c5fe:	41 e0       	ldi	r20, 0x01	; 1
    c600:	c6 01       	movw	r24, r12
    c602:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <compile_trailer_paren_helper>
    c606:	c3 e0       	ldi	r28, 0x03	; 3
    c608:	d0 e0       	ldi	r29, 0x00	; 0
    c60a:	1e c0       	rjmp	.+60     	; 0xc648 <compile_atom_expr_normal+0x182>
    c60c:	20 e0       	ldi	r18, 0x00	; 0
    c60e:	30 e0       	ldi	r19, 0x00	; 0
    c610:	40 e0       	ldi	r20, 0x00	; 0
    c612:	50 e0       	ldi	r21, 0x00	; 0
    c614:	62 e0       	ldi	r22, 0x02	; 2
    c616:	70 e0       	ldi	r23, 0x00	; 0
    c618:	d6 01       	movw	r26, r12
    c61a:	5b 96       	adiw	r26, 0x1b	; 27
    c61c:	8d 91       	ld	r24, X+
    c61e:	9c 91       	ld	r25, X
    c620:	5c 97       	sbiw	r26, 0x1c	; 28
    c622:	0e 94 30 19 	call	0x3260	; 0x3260 <mp_emit_bc_call_function>
    c626:	c1 e0       	ldi	r28, 0x01	; 1
    c628:	d0 e0       	ldi	r29, 0x00	; 0
    c62a:	0e c0       	rjmp	.+28     	; 0xc648 <compile_atom_expr_normal+0x182>
    c62c:	c0 e0       	ldi	r28, 0x00	; 0
    c62e:	d0 e0       	ldi	r29, 0x00	; 0
    c630:	0b c0       	rjmp	.+22     	; 0xc648 <compile_atom_expr_normal+0x182>
    c632:	c0 e0       	ldi	r28, 0x00	; 0
    c634:	d0 e0       	ldi	r29, 0x00	; 0
    c636:	08 c0       	rjmp	.+16     	; 0xc648 <compile_atom_expr_normal+0x182>
    c638:	c0 e0       	ldi	r28, 0x00	; 0
    c63a:	d0 e0       	ldi	r29, 0x00	; 0
    c63c:	05 c0       	rjmp	.+10     	; 0xc648 <compile_atom_expr_normal+0x182>
    c63e:	c0 e0       	ldi	r28, 0x00	; 0
    c640:	d0 e0       	ldi	r29, 0x00	; 0
    c642:	02 c0       	rjmp	.+4      	; 0xc648 <compile_atom_expr_normal+0x182>
    c644:	c0 e0       	ldi	r28, 0x00	; 0
    c646:	d0 e0       	ldi	r29, 0x00	; 0
    c648:	ce 15       	cp	r28, r14
    c64a:	df 05       	cpc	r29, r15
    c64c:	08 f0       	brcs	.+2      	; 0xc650 <compile_atom_expr_normal+0x18a>
    c64e:	73 c0       	rjmp	.+230    	; 0xc736 <compile_atom_expr_normal+0x270>
    c650:	5e 01       	movw	r10, r28
    c652:	bf ef       	ldi	r27, 0xFF	; 255
    c654:	ab 1a       	sub	r10, r27
    c656:	bb 0a       	sbc	r11, r27
    c658:	ae 14       	cp	r10, r14
    c65a:	bf 04       	cpc	r11, r15
    c65c:	98 f5       	brcc	.+102    	; 0xc6c4 <compile_atom_expr_normal+0x1fe>
    c65e:	ce 01       	movw	r24, r28
    c660:	88 0f       	add	r24, r24
    c662:	99 1f       	adc	r25, r25
    c664:	f8 01       	movw	r30, r16
    c666:	e8 0f       	add	r30, r24
    c668:	f9 1f       	adc	r31, r25
    c66a:	01 90       	ld	r0, Z+
    c66c:	f0 81       	ld	r31, Z
    c66e:	e0 2d       	mov	r30, r0
    c670:	24 81       	ldd	r18, Z+4	; 0x04
    c672:	2f 32       	cpi	r18, 0x2F	; 47
    c674:	39 f5       	brne	.+78     	; 0xc6c4 <compile_atom_expr_normal+0x1fe>
    c676:	d8 01       	movw	r26, r16
    c678:	a8 0f       	add	r26, r24
    c67a:	b9 1f       	adc	r27, r25
    c67c:	12 96       	adiw	r26, 0x02	; 2
    c67e:	8d 90       	ld	r8, X+
    c680:	9c 90       	ld	r9, X
    c682:	13 97       	sbiw	r26, 0x03	; 3
    c684:	d4 01       	movw	r26, r8
    c686:	14 96       	adiw	r26, 0x04	; 4
    c688:	8c 91       	ld	r24, X
    c68a:	8d 32       	cpi	r24, 0x2D	; 45
    c68c:	d9 f4       	brne	.+54     	; 0xc6c4 <compile_atom_expr_normal+0x1fe>
    c68e:	60 85       	ldd	r22, Z+8	; 0x08
    c690:	71 85       	ldd	r23, Z+9	; 0x09
    c692:	72 95       	swap	r23
    c694:	62 95       	swap	r22
    c696:	6f 70       	andi	r22, 0x0F	; 15
    c698:	67 27       	eor	r22, r23
    c69a:	7f 70       	andi	r23, 0x0F	; 15
    c69c:	67 27       	eor	r22, r23
    c69e:	40 e0       	ldi	r20, 0x00	; 0
    c6a0:	f6 01       	movw	r30, r12
    c6a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    c6a4:	94 8d       	ldd	r25, Z+28	; 0x1c
    c6a6:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <mp_emit_bc_load_method>
    c6aa:	d4 01       	movw	r26, r8
    c6ac:	18 96       	adiw	r26, 0x08	; 8
    c6ae:	6d 91       	ld	r22, X+
    c6b0:	7c 91       	ld	r23, X
    c6b2:	19 97       	sbiw	r26, 0x09	; 9
    c6b4:	20 e0       	ldi	r18, 0x00	; 0
    c6b6:	30 e0       	ldi	r19, 0x00	; 0
    c6b8:	41 e0       	ldi	r20, 0x01	; 1
    c6ba:	c6 01       	movw	r24, r12
    c6bc:	0e 94 d6 59 	call	0xb3ac	; 0xb3ac <compile_trailer_paren_helper>
    c6c0:	e5 01       	movw	r28, r10
    c6c2:	0a c0       	rjmp	.+20     	; 0xc6d8 <compile_atom_expr_normal+0x212>
    c6c4:	fe 01       	movw	r30, r28
    c6c6:	ee 0f       	add	r30, r30
    c6c8:	ff 1f       	adc	r31, r31
    c6ca:	e0 0f       	add	r30, r16
    c6cc:	f1 1f       	adc	r31, r17
    c6ce:	60 81       	ld	r22, Z
    c6d0:	71 81       	ldd	r23, Z+1	; 0x01
    c6d2:	c6 01       	movw	r24, r12
    c6d4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c6d8:	21 96       	adiw	r28, 0x01	; 1
    c6da:	ce 15       	cp	r28, r14
    c6dc:	df 05       	cpc	r29, r15
    c6de:	08 f4       	brcc	.+2      	; 0xc6e2 <compile_atom_expr_normal+0x21c>
    c6e0:	b7 cf       	rjmp	.-146    	; 0xc650 <compile_atom_expr_normal+0x18a>
    c6e2:	29 c0       	rjmp	.+82     	; 0xc736 <compile_atom_expr_normal+0x270>
    c6e4:	8e 01       	movw	r16, r28
    c6e6:	06 5f       	subi	r16, 0xF6	; 246
    c6e8:	1f 4f       	sbci	r17, 0xFF	; 255
    c6ea:	d6 01       	movw	r26, r12
    c6ec:	59 96       	adiw	r26, 0x19	; 25
    c6ee:	ed 91       	ld	r30, X+
    c6f0:	fc 91       	ld	r31, X
    c6f2:	5a 97       	sbiw	r26, 0x1a	; 26
    c6f4:	80 81       	ld	r24, Z
    c6f6:	87 30       	cpi	r24, 0x07	; 7
    c6f8:	79 f0       	breq	.+30     	; 0xc718 <compile_atom_expr_normal+0x252>
    c6fa:	c0 e0       	ldi	r28, 0x00	; 0
    c6fc:	d0 e0       	ldi	r29, 0x00	; 0
    c6fe:	ee 24       	eor	r14, r14
    c700:	e3 94       	inc	r14
    c702:	f1 2c       	mov	r15, r1
    c704:	a5 cf       	rjmp	.-182    	; 0xc650 <compile_atom_expr_normal+0x18a>
    c706:	f8 01       	movw	r30, r16
    c708:	60 81       	ld	r22, Z
    c70a:	71 81       	ldd	r23, Z+1	; 0x01
    c70c:	4f ef       	ldi	r20, 0xFF	; 255
    c70e:	58 e0       	ldi	r21, 0x08	; 8
    c710:	c6 01       	movw	r24, r12
    c712:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    c716:	0f c0       	rjmp	.+30     	; 0xc736 <compile_atom_expr_normal+0x270>
    c718:	88 85       	ldd	r24, Y+8	; 0x08
    c71a:	99 85       	ldd	r25, Y+9	; 0x09
    c71c:	9c 01       	movw	r18, r24
    c71e:	2f 70       	andi	r18, 0x0F	; 15
    c720:	33 27       	eor	r19, r19
    c722:	22 30       	cpi	r18, 0x02	; 2
    c724:	31 05       	cpc	r19, r1
    c726:	09 f4       	brne	.+2      	; 0xc72a <compile_atom_expr_normal+0x264>
    c728:	07 cf       	rjmp	.-498    	; 0xc538 <compile_atom_expr_normal+0x72>
    c72a:	c0 e0       	ldi	r28, 0x00	; 0
    c72c:	d0 e0       	ldi	r29, 0x00	; 0
    c72e:	ee 24       	eor	r14, r14
    c730:	e3 94       	inc	r14
    c732:	f1 2c       	mov	r15, r1
    c734:	8d cf       	rjmp	.-230    	; 0xc650 <compile_atom_expr_normal+0x18a>
    c736:	df 91       	pop	r29
    c738:	cf 91       	pop	r28
    c73a:	1f 91       	pop	r17
    c73c:	0f 91       	pop	r16
    c73e:	ff 90       	pop	r15
    c740:	ef 90       	pop	r14
    c742:	df 90       	pop	r13
    c744:	cf 90       	pop	r12
    c746:	bf 90       	pop	r11
    c748:	af 90       	pop	r10
    c74a:	9f 90       	pop	r9
    c74c:	8f 90       	pop	r8
    c74e:	08 95       	ret

0000c750 <compile_global_nonlocal_stmt>:
    c750:	2f 92       	push	r2
    c752:	3f 92       	push	r3
    c754:	4f 92       	push	r4
    c756:	5f 92       	push	r5
    c758:	6f 92       	push	r6
    c75a:	7f 92       	push	r7
    c75c:	8f 92       	push	r8
    c75e:	9f 92       	push	r9
    c760:	af 92       	push	r10
    c762:	bf 92       	push	r11
    c764:	cf 92       	push	r12
    c766:	df 92       	push	r13
    c768:	ef 92       	push	r14
    c76a:	ff 92       	push	r15
    c76c:	0f 93       	push	r16
    c76e:	1f 93       	push	r17
    c770:	cf 93       	push	r28
    c772:	df 93       	push	r29
    c774:	00 d0       	rcall	.+0      	; 0xc776 <compile_global_nonlocal_stmt+0x26>
    c776:	cd b7       	in	r28, 0x3d	; 61
    c778:	de b7       	in	r29, 0x3e	; 62
    c77a:	dc 01       	movw	r26, r24
    c77c:	13 96       	adiw	r26, 0x03	; 3
    c77e:	2c 91       	ld	r18, X
    c780:	13 97       	sbiw	r26, 0x03	; 3
    c782:	21 30       	cpi	r18, 0x01	; 1
    c784:	09 f0       	breq	.+2      	; 0xc788 <compile_global_nonlocal_stmt+0x38>
    c786:	8c c0       	rjmp	.+280    	; 0xc8a0 <compile_global_nonlocal_stmt+0x150>
    c788:	5b 01       	movw	r10, r22
    c78a:	6c 01       	movw	r12, r24
    c78c:	fb 01       	movw	r30, r22
    c78e:	44 80       	ldd	r4, Z+4	; 0x04
    c790:	55 80       	ldd	r5, Z+5	; 0x05
    c792:	66 80       	ldd	r6, Z+6	; 0x06
    c794:	77 80       	ldd	r7, Z+7	; 0x07
    c796:	55 24       	eor	r5, r5
    c798:	66 24       	eor	r6, r6
    c79a:	77 24       	eor	r7, r7
    c79c:	f0 e1       	ldi	r31, 0x10	; 16
    c79e:	4f 16       	cp	r4, r31
    c7a0:	51 04       	cpc	r5, r1
    c7a2:	61 04       	cpc	r6, r1
    c7a4:	71 04       	cpc	r7, r1
    c7a6:	69 f0       	breq	.+26     	; 0xc7c2 <compile_global_nonlocal_stmt+0x72>
    c7a8:	59 96       	adiw	r26, 0x19	; 25
    c7aa:	ed 91       	ld	r30, X+
    c7ac:	fc 91       	ld	r31, X
    c7ae:	5a 97       	sbiw	r26, 0x1a	; 26
    c7b0:	80 81       	ld	r24, Z
    c7b2:	81 11       	cpse	r24, r1
    c7b4:	06 c0       	rjmp	.+12     	; 0xc7c2 <compile_global_nonlocal_stmt+0x72>
    c7b6:	47 e1       	ldi	r20, 0x17	; 23
    c7b8:	59 e0       	ldi	r21, 0x09	; 9
    c7ba:	cd 01       	movw	r24, r26
    c7bc:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    c7c0:	6f c0       	rjmp	.+222    	; 0xc8a0 <compile_global_nonlocal_stmt+0x150>
    c7c2:	ae 01       	movw	r20, r28
    c7c4:	4f 5f       	subi	r20, 0xFF	; 255
    c7c6:	5f 4f       	sbci	r21, 0xFF	; 255
    c7c8:	67 e6       	ldi	r22, 0x67	; 103
    c7ca:	70 e0       	ldi	r23, 0x00	; 0
    c7cc:	c5 01       	movw	r24, r10
    c7ce:	08 96       	adiw	r24, 0x08	; 8
    c7d0:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    c7d4:	4c 01       	movw	r8, r24
    c7d6:	89 2b       	or	r24, r25
    c7d8:	09 f4       	brne	.+2      	; 0xc7dc <compile_global_nonlocal_stmt+0x8c>
    c7da:	62 c0       	rjmp	.+196    	; 0xc8a0 <compile_global_nonlocal_stmt+0x150>
    c7dc:	00 e0       	ldi	r16, 0x00	; 0
    c7de:	10 e0       	ldi	r17, 0x00	; 0
    c7e0:	22 24       	eor	r2, r2
    c7e2:	23 94       	inc	r2
    c7e4:	68 94       	set
    c7e6:	33 24       	eor	r3, r3
    c7e8:	31 f8       	bld	r3, 1
    c7ea:	e9 81       	ldd	r30, Y+1	; 0x01
    c7ec:	fa 81       	ldd	r31, Y+2	; 0x02
    c7ee:	c8 01       	movw	r24, r16
    c7f0:	88 0f       	add	r24, r24
    c7f2:	99 1f       	adc	r25, r25
    c7f4:	e8 0f       	add	r30, r24
    c7f6:	f9 1f       	adc	r31, r25
    c7f8:	60 81       	ld	r22, Z
    c7fa:	71 81       	ldd	r23, Z+1	; 0x01
    c7fc:	72 95       	swap	r23
    c7fe:	62 95       	swap	r22
    c800:	6f 70       	andi	r22, 0x0F	; 15
    c802:	67 27       	eor	r22, r23
    c804:	7f 70       	andi	r23, 0x0F	; 15
    c806:	67 27       	eor	r22, r23
    c808:	40 e0       	ldi	r20, 0x00	; 0
    c80a:	f6 01       	movw	r30, r12
    c80c:	81 8d       	ldd	r24, Z+25	; 0x19
    c80e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c810:	0e 94 f7 55 	call	0xabee	; 0xabee <scope_find_or_add_id>
    c814:	7c 01       	movw	r14, r24
    c816:	f0 e1       	ldi	r31, 0x10	; 16
    c818:	4f 16       	cp	r4, r31
    c81a:	51 04       	cpc	r5, r1
    c81c:	61 04       	cpc	r6, r1
    c81e:	71 04       	cpc	r7, r1
    c820:	d9 f4       	brne	.+54     	; 0xc858 <compile_global_nonlocal_stmt+0x108>
    c822:	dc 01       	movw	r26, r24
    c824:	8c 91       	ld	r24, X
    c826:	8d 7f       	andi	r24, 0xFD	; 253
    c828:	39 f0       	breq	.+14     	; 0xc838 <compile_global_nonlocal_stmt+0xe8>
    c82a:	4c e3       	ldi	r20, 0x3C	; 60
    c82c:	59 e0       	ldi	r21, 0x09	; 9
    c82e:	b5 01       	movw	r22, r10
    c830:	c6 01       	movw	r24, r12
    c832:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    c836:	2e c0       	rjmp	.+92     	; 0xc894 <compile_global_nonlocal_stmt+0x144>
    c838:	f7 01       	movw	r30, r14
    c83a:	30 82       	st	Z, r3
    c83c:	64 81       	ldd	r22, Z+4	; 0x04
    c83e:	75 81       	ldd	r23, Z+5	; 0x05
    c840:	d6 01       	movw	r26, r12
    c842:	59 96       	adiw	r26, 0x19	; 25
    c844:	8d 91       	ld	r24, X+
    c846:	9c 91       	ld	r25, X
    c848:	5a 97       	sbiw	r26, 0x1a	; 26
    c84a:	0e 94 a7 11 	call	0x234e	; 0x234e <scope_find_global>
    c84e:	00 97       	sbiw	r24, 0x00	; 0
    c850:	09 f1       	breq	.+66     	; 0xc894 <compile_global_nonlocal_stmt+0x144>
    c852:	fc 01       	movw	r30, r24
    c854:	30 82       	st	Z, r3
    c856:	1e c0       	rjmp	.+60     	; 0xc894 <compile_global_nonlocal_stmt+0x144>
    c858:	dc 01       	movw	r26, r24
    c85a:	8c 91       	ld	r24, X
    c85c:	81 11       	cpse	r24, r1
    c85e:	12 c0       	rjmp	.+36     	; 0xc884 <compile_global_nonlocal_stmt+0x134>
    c860:	2c 92       	st	X, r2
    c862:	b7 01       	movw	r22, r14
    c864:	f6 01       	movw	r30, r12
    c866:	81 8d       	ldd	r24, Z+25	; 0x19
    c868:	92 8d       	ldd	r25, Z+26	; 0x1a
    c86a:	0e 94 3e 56 	call	0xac7c	; 0xac7c <scope_check_to_close_over>
    c86e:	d7 01       	movw	r26, r14
    c870:	8c 91       	ld	r24, X
    c872:	81 30       	cpi	r24, 0x01	; 1
    c874:	79 f4       	brne	.+30     	; 0xc894 <compile_global_nonlocal_stmt+0x144>
    c876:	4b e5       	ldi	r20, 0x5B	; 91
    c878:	59 e0       	ldi	r21, 0x09	; 9
    c87a:	b5 01       	movw	r22, r10
    c87c:	c6 01       	movw	r24, r12
    c87e:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    c882:	08 c0       	rjmp	.+16     	; 0xc894 <compile_global_nonlocal_stmt+0x144>
    c884:	85 30       	cpi	r24, 0x05	; 5
    c886:	31 f0       	breq	.+12     	; 0xc894 <compile_global_nonlocal_stmt+0x144>
    c888:	49 e7       	ldi	r20, 0x79	; 121
    c88a:	59 e0       	ldi	r21, 0x09	; 9
    c88c:	b5 01       	movw	r22, r10
    c88e:	c6 01       	movw	r24, r12
    c890:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    c894:	0f 5f       	subi	r16, 0xFF	; 255
    c896:	1f 4f       	sbci	r17, 0xFF	; 255
    c898:	80 16       	cp	r8, r16
    c89a:	91 06       	cpc	r9, r17
    c89c:	09 f0       	breq	.+2      	; 0xc8a0 <compile_global_nonlocal_stmt+0x150>
    c89e:	a5 cf       	rjmp	.-182    	; 0xc7ea <compile_global_nonlocal_stmt+0x9a>
    c8a0:	0f 90       	pop	r0
    c8a2:	0f 90       	pop	r0
    c8a4:	df 91       	pop	r29
    c8a6:	cf 91       	pop	r28
    c8a8:	1f 91       	pop	r17
    c8aa:	0f 91       	pop	r16
    c8ac:	ff 90       	pop	r15
    c8ae:	ef 90       	pop	r14
    c8b0:	df 90       	pop	r13
    c8b2:	cf 90       	pop	r12
    c8b4:	bf 90       	pop	r11
    c8b6:	af 90       	pop	r10
    c8b8:	9f 90       	pop	r9
    c8ba:	8f 90       	pop	r8
    c8bc:	7f 90       	pop	r7
    c8be:	6f 90       	pop	r6
    c8c0:	5f 90       	pop	r5
    c8c2:	4f 90       	pop	r4
    c8c4:	3f 90       	pop	r3
    c8c6:	2f 90       	pop	r2
    c8c8:	08 95       	ret

0000c8ca <mp_emit_common_get_id_for_modification>:
    c8ca:	cf 93       	push	r28
    c8cc:	df 93       	push	r29
    c8ce:	ec 01       	movw	r28, r24
    c8d0:	41 e0       	ldi	r20, 0x01	; 1
    c8d2:	0e 94 f7 55 	call	0xabee	; 0xabee <scope_find_or_add_id>
    c8d6:	28 81       	ld	r18, Y
    c8d8:	22 30       	cpi	r18, 0x02	; 2
    c8da:	30 f0       	brcs	.+12     	; 0xc8e8 <mp_emit_common_get_id_for_modification+0x1e>
    c8dc:	fc 01       	movw	r30, r24
    c8de:	20 81       	ld	r18, Z
    c8e0:	21 30       	cpi	r18, 0x01	; 1
    c8e2:	11 f4       	brne	.+4      	; 0xc8e8 <mp_emit_common_get_id_for_modification+0x1e>
    c8e4:	23 e0       	ldi	r18, 0x03	; 3
    c8e6:	20 83       	st	Z, r18
    c8e8:	df 91       	pop	r29
    c8ea:	cf 91       	pop	r28
    c8ec:	08 95       	ret

0000c8ee <compile_store_id>:
    c8ee:	fc 01       	movw	r30, r24
    c8f0:	83 81       	ldd	r24, Z+3	; 0x03
    c8f2:	81 30       	cpi	r24, 0x01	; 1
    c8f4:	21 f4       	brne	.+8      	; 0xc8fe <compile_store_id+0x10>
    c8f6:	81 8d       	ldd	r24, Z+25	; 0x19
    c8f8:	92 8d       	ldd	r25, Z+26	; 0x1a
    c8fa:	e7 cf       	rjmp	.-50     	; 0xc8ca <mp_emit_common_get_id_for_modification>
    c8fc:	08 95       	ret
    c8fe:	41 8d       	ldd	r20, Z+25	; 0x19
    c900:	52 8d       	ldd	r21, Z+26	; 0x1a
    c902:	9b 01       	movw	r18, r22
    c904:	62 e2       	ldi	r22, 0x22	; 34
    c906:	74 e2       	ldi	r23, 0x24	; 36
    c908:	83 8d       	ldd	r24, Z+27	; 0x1b
    c90a:	94 8d       	ldd	r25, Z+28	; 0x1c
    c90c:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <mp_emit_common_id_op>
    c910:	08 95       	ret

0000c912 <c_assign>:
    c912:	4f 92       	push	r4
    c914:	5f 92       	push	r5
    c916:	6f 92       	push	r6
    c918:	7f 92       	push	r7
    c91a:	9f 92       	push	r9
    c91c:	af 92       	push	r10
    c91e:	bf 92       	push	r11
    c920:	cf 92       	push	r12
    c922:	df 92       	push	r13
    c924:	ef 92       	push	r14
    c926:	ff 92       	push	r15
    c928:	0f 93       	push	r16
    c92a:	1f 93       	push	r17
    c92c:	cf 93       	push	r28
    c92e:	df 93       	push	r29
    c930:	8c 01       	movw	r16, r24
    c932:	eb 01       	movw	r28, r22
    c934:	94 2e       	mov	r9, r20
    c936:	20 97       	sbiw	r28, 0x00	; 0
    c938:	11 f4       	brne	.+4      	; 0xc93e <c_assign+0x2c>
    c93a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    c93e:	cb 01       	movw	r24, r22
    c940:	83 70       	andi	r24, 0x03	; 3
    c942:	99 27       	eor	r25, r25
    c944:	89 2b       	or	r24, r25
    c946:	c1 f0       	breq	.+48     	; 0xc978 <c_assign+0x66>
    c948:	cb 01       	movw	r24, r22
    c94a:	8f 70       	andi	r24, 0x0F	; 15
    c94c:	99 27       	eor	r25, r25
    c94e:	02 97       	sbiw	r24, 0x02	; 2
    c950:	09 f0       	breq	.+2      	; 0xc954 <c_assign+0x42>
    c952:	6c c1       	rjmp	.+728    	; 0xcc2c <c_assign+0x31a>
    c954:	72 95       	swap	r23
    c956:	62 95       	swap	r22
    c958:	6f 70       	andi	r22, 0x0F	; 15
    c95a:	67 27       	eor	r22, r23
    c95c:	7f 70       	andi	r23, 0x0F	; 15
    c95e:	67 27       	eor	r22, r23
    c960:	44 23       	and	r20, r20
    c962:	19 f0       	breq	.+6      	; 0xc96a <c_assign+0x58>
    c964:	82 e0       	ldi	r24, 0x02	; 2
    c966:	48 13       	cpse	r20, r24
    c968:	03 c0       	rjmp	.+6      	; 0xc970 <c_assign+0x5e>
    c96a:	c8 01       	movw	r24, r16
    c96c:	c0 df       	rcall	.-128    	; 0xc8ee <compile_store_id>
    c96e:	64 c1       	rjmp	.+712    	; 0xcc38 <c_assign+0x326>
    c970:	c8 01       	movw	r24, r16
    c972:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    c976:	60 c1       	rjmp	.+704    	; 0xcc38 <c_assign+0x326>
    c978:	cc 80       	ldd	r12, Y+4	; 0x04
    c97a:	dd 80       	ldd	r13, Y+5	; 0x05
    c97c:	ee 80       	ldd	r14, Y+6	; 0x06
    c97e:	ff 80       	ldd	r15, Y+7	; 0x07
    c980:	d7 01       	movw	r26, r14
    c982:	c6 01       	movw	r24, r12
    c984:	99 27       	eor	r25, r25
    c986:	aa 27       	eor	r26, r26
    c988:	bb 27       	eor	r27, r27
    c98a:	8a 32       	cpi	r24, 0x2A	; 42
    c98c:	91 05       	cpc	r25, r1
    c98e:	a1 05       	cpc	r26, r1
    c990:	b1 05       	cpc	r27, r1
    c992:	09 f4       	brne	.+2      	; 0xc996 <c_assign+0x84>
    c994:	f7 c0       	rjmp	.+494    	; 0xcb84 <c_assign+0x272>
    c996:	58 f4       	brcc	.+22     	; 0xc9ae <c_assign+0x9c>
    c998:	86 30       	cpi	r24, 0x06	; 6
    c99a:	91 05       	cpc	r25, r1
    c99c:	a1 05       	cpc	r26, r1
    c99e:	b1 05       	cpc	r27, r1
    c9a0:	09 f4       	brne	.+2      	; 0xc9a4 <c_assign+0x92>
    c9a2:	e4 c0       	rjmp	.+456    	; 0xcb6c <c_assign+0x25a>
    c9a4:	89 97       	sbiw	r24, 0x29	; 41
    c9a6:	a1 05       	cpc	r26, r1
    c9a8:	b1 05       	cpc	r27, r1
    c9aa:	71 f0       	breq	.+28     	; 0xc9c8 <c_assign+0xb6>
    c9ac:	3f c1       	rjmp	.+638    	; 0xcc2c <c_assign+0x31a>
    c9ae:	8b 32       	cpi	r24, 0x2B	; 43
    c9b0:	91 05       	cpc	r25, r1
    c9b2:	a1 05       	cpc	r26, r1
    c9b4:	b1 05       	cpc	r27, r1
    c9b6:	09 f4       	brne	.+2      	; 0xc9ba <c_assign+0xa8>
    c9b8:	f8 c0       	rjmp	.+496    	; 0xcbaa <c_assign+0x298>
    c9ba:	81 39       	cpi	r24, 0x91	; 145
    c9bc:	91 05       	cpc	r25, r1
    c9be:	a1 05       	cpc	r26, r1
    c9c0:	b1 05       	cpc	r27, r1
    c9c2:	09 f4       	brne	.+2      	; 0xc9c6 <c_assign+0xb4>
    c9c4:	d3 c0       	rjmp	.+422    	; 0xcb6c <c_assign+0x25a>
    c9c6:	32 c1       	rjmp	.+612    	; 0xcc2c <c_assign+0x31a>
    c9c8:	e2 e0       	ldi	r30, 0x02	; 2
    c9ca:	4e 17       	cp	r20, r30
    c9cc:	29 f0       	breq	.+10     	; 0xc9d8 <c_assign+0xc6>
    c9ce:	68 85       	ldd	r22, Y+8	; 0x08
    c9d0:	79 85       	ldd	r23, Y+9	; 0x09
    c9d2:	c8 01       	movw	r24, r16
    c9d4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    c9d8:	ea 84       	ldd	r14, Y+10	; 0x0a
    c9da:	fb 84       	ldd	r15, Y+11	; 0x0b
    c9dc:	e1 14       	cp	r14, r1
    c9de:	f1 04       	cpc	r15, r1
    c9e0:	09 f4       	brne	.+2      	; 0xc9e4 <c_assign+0xd2>
    c9e2:	bd c0       	rjmp	.+378    	; 0xcb5e <c_assign+0x24c>
    c9e4:	c7 01       	movw	r24, r14
    c9e6:	83 70       	andi	r24, 0x03	; 3
    c9e8:	99 27       	eor	r25, r25
    c9ea:	89 2b       	or	r24, r25
    c9ec:	09 f0       	breq	.+2      	; 0xc9f0 <c_assign+0xde>
    c9ee:	b7 c0       	rjmp	.+366    	; 0xcb5e <c_assign+0x24c>
    c9f0:	67 01       	movw	r12, r14
    c9f2:	f7 01       	movw	r30, r14
    c9f4:	84 81       	ldd	r24, Z+4	; 0x04
    c9f6:	95 81       	ldd	r25, Z+5	; 0x05
    c9f8:	a6 81       	ldd	r26, Z+6	; 0x06
    c9fa:	b7 81       	ldd	r27, Z+7	; 0x07
    c9fc:	87 38       	cpi	r24, 0x87	; 135
    c9fe:	a9 f5       	brne	.+106    	; 0xca6a <c_assign+0x158>
    ca00:	49 2e       	mov	r4, r25
    ca02:	5a 2e       	mov	r5, r26
    ca04:	6b 2e       	mov	r6, r27
    ca06:	77 24       	eor	r7, r7
    ca08:	f2 e0       	ldi	r31, 0x02	; 2
    ca0a:	9f 16       	cp	r9, r31
    ca0c:	d1 f0       	breq	.+52     	; 0xca42 <c_assign+0x130>
    ca0e:	c2 01       	movw	r24, r4
    ca10:	01 97       	sbiw	r24, 0x01	; 1
    ca12:	18 16       	cp	r1, r24
    ca14:	19 06       	cpc	r1, r25
    ca16:	ac f4       	brge	.+42     	; 0xca42 <c_assign+0x130>
    ca18:	88 e0       	ldi	r24, 0x08	; 8
    ca1a:	c8 0e       	add	r12, r24
    ca1c:	d1 1c       	adc	r13, r1
    ca1e:	52 01       	movw	r10, r4
    ca20:	e3 e0       	ldi	r30, 0x03	; 3
    ca22:	ae 0e       	add	r10, r30
    ca24:	b1 1c       	adc	r11, r1
    ca26:	aa 0c       	add	r10, r10
    ca28:	bb 1c       	adc	r11, r11
    ca2a:	ae 0c       	add	r10, r14
    ca2c:	bf 1c       	adc	r11, r15
    ca2e:	f6 01       	movw	r30, r12
    ca30:	61 91       	ld	r22, Z+
    ca32:	71 91       	ld	r23, Z+
    ca34:	6f 01       	movw	r12, r30
    ca36:	c8 01       	movw	r24, r16
    ca38:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    ca3c:	ca 14       	cp	r12, r10
    ca3e:	db 04       	cpc	r13, r11
    ca40:	b1 f7       	brne	.-20     	; 0xca2e <c_assign+0x11c>
    ca42:	f3 e0       	ldi	r31, 0x03	; 3
    ca44:	4f 0e       	add	r4, r31
    ca46:	51 1c       	adc	r5, r1
    ca48:	44 0c       	add	r4, r4
    ca4a:	55 1c       	adc	r5, r5
    ca4c:	f7 01       	movw	r30, r14
    ca4e:	e4 0d       	add	r30, r4
    ca50:	f5 1d       	adc	r31, r5
    ca52:	c0 80       	ld	r12, Z
    ca54:	d1 80       	ldd	r13, Z+1	; 0x01
    ca56:	c1 14       	cp	r12, r1
    ca58:	d1 04       	cpc	r13, r1
    ca5a:	29 f0       	breq	.+10     	; 0xca66 <c_assign+0x154>
    ca5c:	c6 01       	movw	r24, r12
    ca5e:	83 70       	andi	r24, 0x03	; 3
    ca60:	99 27       	eor	r25, r25
    ca62:	89 2b       	or	r24, r25
    ca64:	11 f0       	breq	.+4      	; 0xca6a <c_assign+0x158>
    ca66:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ca6a:	f6 01       	movw	r30, r12
    ca6c:	84 81       	ldd	r24, Z+4	; 0x04
    ca6e:	95 81       	ldd	r25, Z+5	; 0x05
    ca70:	a6 81       	ldd	r26, Z+6	; 0x06
    ca72:	b7 81       	ldd	r27, Z+7	; 0x07
    ca74:	99 27       	eor	r25, r25
    ca76:	aa 27       	eor	r26, r26
    ca78:	bb 27       	eor	r27, r27
    ca7a:	8e 32       	cpi	r24, 0x2E	; 46
    ca7c:	91 05       	cpc	r25, r1
    ca7e:	a1 05       	cpc	r26, r1
    ca80:	b1 05       	cpc	r27, r1
    ca82:	71 f5       	brne	.+92     	; 0xcae0 <c_assign+0x1ce>
    ca84:	f2 e0       	ldi	r31, 0x02	; 2
    ca86:	9f 12       	cpse	r9, r31
    ca88:	0d c0       	rjmp	.+26     	; 0xcaa4 <c_assign+0x192>
    ca8a:	f8 01       	movw	r30, r16
    ca8c:	83 8d       	ldd	r24, Z+27	; 0x1b
    ca8e:	94 8d       	ldd	r25, Z+28	; 0x1c
    ca90:	0e 94 91 16 	call	0x2d22	; 0x2d22 <mp_emit_bc_rot_three>
    ca94:	61 e0       	ldi	r22, 0x01	; 1
    ca96:	70 e0       	ldi	r23, 0x00	; 0
    ca98:	f8 01       	movw	r30, r16
    ca9a:	83 8d       	ldd	r24, Z+27	; 0x1b
    ca9c:	94 8d       	ldd	r25, Z+28	; 0x1c
    ca9e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <mp_emit_bc_subscr>
    caa2:	ca c0       	rjmp	.+404    	; 0xcc38 <c_assign+0x326>
    caa4:	f6 01       	movw	r30, r12
    caa6:	60 85       	ldd	r22, Z+8	; 0x08
    caa8:	71 85       	ldd	r23, Z+9	; 0x09
    caaa:	c8 01       	movw	r24, r16
    caac:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    cab0:	f1 e0       	ldi	r31, 0x01	; 1
    cab2:	9f 12       	cpse	r9, r31
    cab4:	0d c0       	rjmp	.+26     	; 0xcad0 <c_assign+0x1be>
    cab6:	f8 01       	movw	r30, r16
    cab8:	83 8d       	ldd	r24, Z+27	; 0x1b
    caba:	94 8d       	ldd	r25, Z+28	; 0x1c
    cabc:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <mp_emit_bc_dup_top_two>
    cac0:	60 e0       	ldi	r22, 0x00	; 0
    cac2:	70 e0       	ldi	r23, 0x00	; 0
    cac4:	f8 01       	movw	r30, r16
    cac6:	83 8d       	ldd	r24, Z+27	; 0x1b
    cac8:	94 8d       	ldd	r25, Z+28	; 0x1c
    caca:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <mp_emit_bc_subscr>
    cace:	b4 c0       	rjmp	.+360    	; 0xcc38 <c_assign+0x326>
    cad0:	61 e0       	ldi	r22, 0x01	; 1
    cad2:	70 e0       	ldi	r23, 0x00	; 0
    cad4:	f8 01       	movw	r30, r16
    cad6:	83 8d       	ldd	r24, Z+27	; 0x1b
    cad8:	94 8d       	ldd	r25, Z+28	; 0x1c
    cada:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <mp_emit_bc_subscr>
    cade:	ac c0       	rjmp	.+344    	; 0xcc38 <c_assign+0x326>
    cae0:	8f 97       	sbiw	r24, 0x2f	; 47
    cae2:	a1 05       	cpc	r26, r1
    cae4:	b1 05       	cpc	r27, r1
    cae6:	d9 f5       	brne	.+118    	; 0xcb5e <c_assign+0x24c>
    cae8:	f6 01       	movw	r30, r12
    caea:	80 85       	ldd	r24, Z+8	; 0x08
    caec:	91 85       	ldd	r25, Z+9	; 0x09
    caee:	8f 70       	andi	r24, 0x0F	; 15
    caf0:	99 27       	eor	r25, r25
    caf2:	02 97       	sbiw	r24, 0x02	; 2
    caf4:	11 f0       	breq	.+4      	; 0xcafa <c_assign+0x1e8>
    caf6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    cafa:	f1 e0       	ldi	r31, 0x01	; 1
    cafc:	9f 12       	cpse	r9, r31
    cafe:	16 c0       	rjmp	.+44     	; 0xcb2c <c_assign+0x21a>
    cb00:	f8 01       	movw	r30, r16
    cb02:	83 8d       	ldd	r24, Z+27	; 0x1b
    cb04:	94 8d       	ldd	r25, Z+28	; 0x1c
    cb06:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    cb0a:	f6 01       	movw	r30, r12
    cb0c:	60 85       	ldd	r22, Z+8	; 0x08
    cb0e:	71 85       	ldd	r23, Z+9	; 0x09
    cb10:	72 95       	swap	r23
    cb12:	62 95       	swap	r22
    cb14:	6f 70       	andi	r22, 0x0F	; 15
    cb16:	67 27       	eor	r22, r23
    cb18:	7f 70       	andi	r23, 0x0F	; 15
    cb1a:	67 27       	eor	r22, r23
    cb1c:	40 e0       	ldi	r20, 0x00	; 0
    cb1e:	50 e0       	ldi	r21, 0x00	; 0
    cb20:	f8 01       	movw	r30, r16
    cb22:	83 8d       	ldd	r24, Z+27	; 0x1b
    cb24:	94 8d       	ldd	r25, Z+28	; 0x1c
    cb26:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <mp_emit_bc_attr>
    cb2a:	86 c0       	rjmp	.+268    	; 0xcc38 <c_assign+0x326>
    cb2c:	f2 e0       	ldi	r31, 0x02	; 2
    cb2e:	9f 12       	cpse	r9, r31
    cb30:	05 c0       	rjmp	.+10     	; 0xcb3c <c_assign+0x22a>
    cb32:	f8 01       	movw	r30, r16
    cb34:	83 8d       	ldd	r24, Z+27	; 0x1b
    cb36:	94 8d       	ldd	r25, Z+28	; 0x1c
    cb38:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <mp_emit_bc_rot_two>
    cb3c:	f6 01       	movw	r30, r12
    cb3e:	60 85       	ldd	r22, Z+8	; 0x08
    cb40:	71 85       	ldd	r23, Z+9	; 0x09
    cb42:	72 95       	swap	r23
    cb44:	62 95       	swap	r22
    cb46:	6f 70       	andi	r22, 0x0F	; 15
    cb48:	67 27       	eor	r22, r23
    cb4a:	7f 70       	andi	r23, 0x0F	; 15
    cb4c:	67 27       	eor	r22, r23
    cb4e:	41 e0       	ldi	r20, 0x01	; 1
    cb50:	50 e0       	ldi	r21, 0x00	; 0
    cb52:	f8 01       	movw	r30, r16
    cb54:	83 8d       	ldd	r24, Z+27	; 0x1b
    cb56:	94 8d       	ldd	r25, Z+28	; 0x1c
    cb58:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <mp_emit_bc_attr>
    cb5c:	6d c0       	rjmp	.+218    	; 0xcc38 <c_assign+0x326>
    cb5e:	4a e9       	ldi	r20, 0x9A	; 154
    cb60:	59 e0       	ldi	r21, 0x09	; 9
    cb62:	be 01       	movw	r22, r28
    cb64:	c8 01       	movw	r24, r16
    cb66:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    cb6a:	66 c0       	rjmp	.+204    	; 0xcc38 <c_assign+0x326>
    cb6c:	91 10       	cpse	r9, r1
    cb6e:	5e c0       	rjmp	.+188    	; 0xcc2c <c_assign+0x31a>
    cb70:	ae 01       	movw	r20, r28
    cb72:	48 5f       	subi	r20, 0xF8	; 248
    cb74:	5f 4f       	sbci	r21, 0xFF	; 255
    cb76:	99 27       	eor	r25, r25
    cb78:	8f 2d       	mov	r24, r15
    cb7a:	7e 2d       	mov	r23, r14
    cb7c:	6d 2d       	mov	r22, r13
    cb7e:	c8 01       	movw	r24, r16
    cb80:	2a d1       	rcall	.+596    	; 0xcdd6 <c_assign_tuple>
    cb82:	5a c0       	rjmp	.+180    	; 0xcc38 <c_assign+0x326>
    cb84:	e8 85       	ldd	r30, Y+8	; 0x08
    cb86:	f9 85       	ldd	r31, Y+9	; 0x09
    cb88:	30 97       	sbiw	r30, 0x00	; 0
    cb8a:	09 f4       	brne	.+2      	; 0xcb8e <c_assign+0x27c>
    cb8c:	4f c0       	rjmp	.+158    	; 0xcc2c <c_assign+0x31a>
    cb8e:	cf 01       	movw	r24, r30
    cb90:	83 70       	andi	r24, 0x03	; 3
    cb92:	99 27       	eor	r25, r25
    cb94:	89 2b       	or	r24, r25
    cb96:	21 f4       	brne	.+8      	; 0xcba0 <c_assign+0x28e>
    cb98:	df 01       	movw	r26, r30
    cb9a:	84 81       	ldd	r24, Z+4	; 0x04
    cb9c:	8b 38       	cpi	r24, 0x8B	; 139
    cb9e:	11 f0       	breq	.+4      	; 0xcba4 <c_assign+0x292>
    cba0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    cba4:	41 11       	cpse	r20, r1
    cba6:	42 c0       	rjmp	.+132    	; 0xcc2c <c_assign+0x31a>
    cba8:	1e c0       	rjmp	.+60     	; 0xcbe6 <c_assign+0x2d4>
    cbaa:	41 11       	cpse	r20, r1
    cbac:	3f c0       	rjmp	.+126    	; 0xcc2c <c_assign+0x31a>
    cbae:	e8 85       	ldd	r30, Y+8	; 0x08
    cbb0:	f9 85       	ldd	r31, Y+9	; 0x09
    cbb2:	30 97       	sbiw	r30, 0x00	; 0
    cbb4:	39 f4       	brne	.+14     	; 0xcbc4 <c_assign+0x2b2>
    cbb6:	40 e0       	ldi	r20, 0x00	; 0
    cbb8:	50 e0       	ldi	r21, 0x00	; 0
    cbba:	60 e0       	ldi	r22, 0x00	; 0
    cbbc:	70 e0       	ldi	r23, 0x00	; 0
    cbbe:	c8 01       	movw	r24, r16
    cbc0:	0a d1       	rcall	.+532    	; 0xcdd6 <c_assign_tuple>
    cbc2:	3a c0       	rjmp	.+116    	; 0xcc38 <c_assign+0x326>
    cbc4:	cf 01       	movw	r24, r30
    cbc6:	83 70       	andi	r24, 0x03	; 3
    cbc8:	99 27       	eor	r25, r25
    cbca:	89 2b       	or	r24, r25
    cbcc:	21 f4       	brne	.+8      	; 0xcbd6 <c_assign+0x2c4>
    cbce:	df 01       	movw	r26, r30
    cbd0:	84 81       	ldd	r24, Z+4	; 0x04
    cbd2:	8b 38       	cpi	r24, 0x8B	; 139
    cbd4:	41 f0       	breq	.+16     	; 0xcbe6 <c_assign+0x2d4>
    cbd6:	ae 01       	movw	r20, r28
    cbd8:	48 5f       	subi	r20, 0xF8	; 248
    cbda:	5f 4f       	sbci	r21, 0xFF	; 255
    cbdc:	61 e0       	ldi	r22, 0x01	; 1
    cbde:	70 e0       	ldi	r23, 0x00	; 0
    cbe0:	c8 01       	movw	r24, r16
    cbe2:	f9 d0       	rcall	.+498    	; 0xcdd6 <c_assign_tuple>
    cbe4:	29 c0       	rjmp	.+82     	; 0xcc38 <c_assign+0x326>
    cbe6:	14 96       	adiw	r26, 0x04	; 4
    cbe8:	4d 91       	ld	r20, X+
    cbea:	5d 91       	ld	r21, X+
    cbec:	6d 91       	ld	r22, X+
    cbee:	7c 91       	ld	r23, X
    cbf0:	17 97       	sbiw	r26, 0x07	; 7
    cbf2:	99 27       	eor	r25, r25
    cbf4:	87 2f       	mov	r24, r23
    cbf6:	76 2f       	mov	r23, r22
    cbf8:	65 2f       	mov	r22, r21
    cbfa:	62 30       	cpi	r22, 0x02	; 2
    cbfc:	71 05       	cpc	r23, r1
    cbfe:	81 05       	cpc	r24, r1
    cc00:	91 05       	cpc	r25, r1
    cc02:	71 f4       	brne	.+28     	; 0xcc20 <c_assign+0x30e>
    cc04:	1a 96       	adiw	r26, 0x0a	; 10
    cc06:	ed 91       	ld	r30, X+
    cc08:	fc 91       	ld	r31, X
    cc0a:	1b 97       	sbiw	r26, 0x0b	; 11
    cc0c:	30 97       	sbiw	r30, 0x00	; 0
    cc0e:	41 f0       	breq	.+16     	; 0xcc20 <c_assign+0x30e>
    cc10:	9f 01       	movw	r18, r30
    cc12:	23 70       	andi	r18, 0x03	; 3
    cc14:	33 27       	eor	r19, r19
    cc16:	23 2b       	or	r18, r19
    cc18:	19 f4       	brne	.+6      	; 0xcc20 <c_assign+0x30e>
    cc1a:	24 81       	ldd	r18, Z+4	; 0x04
    cc1c:	2f 39       	cpi	r18, 0x9F	; 159
    cc1e:	31 f0       	breq	.+12     	; 0xcc2c <c_assign+0x31a>
    cc20:	ad 01       	movw	r20, r26
    cc22:	48 5f       	subi	r20, 0xF8	; 248
    cc24:	5f 4f       	sbci	r21, 0xFF	; 255
    cc26:	c8 01       	movw	r24, r16
    cc28:	d6 d0       	rcall	.+428    	; 0xcdd6 <c_assign_tuple>
    cc2a:	06 c0       	rjmp	.+12     	; 0xcc38 <c_assign+0x326>
    cc2c:	4a e9       	ldi	r20, 0x9A	; 154
    cc2e:	59 e0       	ldi	r21, 0x09	; 9
    cc30:	be 01       	movw	r22, r28
    cc32:	c8 01       	movw	r24, r16
    cc34:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    cc38:	df 91       	pop	r29
    cc3a:	cf 91       	pop	r28
    cc3c:	1f 91       	pop	r17
    cc3e:	0f 91       	pop	r16
    cc40:	ff 90       	pop	r15
    cc42:	ef 90       	pop	r14
    cc44:	df 90       	pop	r13
    cc46:	cf 90       	pop	r12
    cc48:	bf 90       	pop	r11
    cc4a:	af 90       	pop	r10
    cc4c:	9f 90       	pop	r9
    cc4e:	7f 90       	pop	r7
    cc50:	6f 90       	pop	r6
    cc52:	5f 90       	pop	r5
    cc54:	4f 90       	pop	r4
    cc56:	08 95       	ret

0000cc58 <compile_scope_comp_iter>:
    cc58:	8f 92       	push	r8
    cc5a:	9f 92       	push	r9
    cc5c:	af 92       	push	r10
    cc5e:	bf 92       	push	r11
    cc60:	cf 92       	push	r12
    cc62:	df 92       	push	r13
    cc64:	ef 92       	push	r14
    cc66:	ff 92       	push	r15
    cc68:	0f 93       	push	r16
    cc6a:	1f 93       	push	r17
    cc6c:	cf 93       	push	r28
    cc6e:	df 93       	push	r29
    cc70:	8c 01       	movw	r16, r24
    cc72:	eb 01       	movw	r28, r22
    cc74:	4a 01       	movw	r8, r20
    cc76:	69 01       	movw	r12, r18
    cc78:	dc 01       	movw	r26, r24
    cc7a:	19 96       	adiw	r26, 0x09	; 9
    cc7c:	ed 90       	ld	r14, X+
    cc7e:	fc 90       	ld	r15, X
    cc80:	1a 97       	sbiw	r26, 0x0a	; 10
    cc82:	57 01       	movw	r10, r14
    cc84:	bf ef       	ldi	r27, 0xFF	; 255
    cc86:	ab 1a       	sub	r10, r27
    cc88:	bb 0a       	sbc	r11, r27
    cc8a:	c7 01       	movw	r24, r14
    cc8c:	02 96       	adiw	r24, 0x02	; 2
    cc8e:	f8 01       	movw	r30, r16
    cc90:	92 87       	std	Z+10, r25	; 0x0a
    cc92:	81 87       	std	Z+9, r24	; 0x09
    cc94:	b7 01       	movw	r22, r14
    cc96:	83 8d       	ldd	r24, Z+27	; 0x1b
    cc98:	94 8d       	ldd	r25, Z+28	; 0x1c
    cc9a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    cc9e:	b5 01       	movw	r22, r10
    cca0:	d8 01       	movw	r26, r16
    cca2:	5b 96       	adiw	r26, 0x1b	; 27
    cca4:	8d 91       	ld	r24, X+
    cca6:	9c 91       	ld	r25, X
    cca8:	5c 97       	sbiw	r26, 0x1c	; 28
    ccaa:	0e 94 65 17 	call	0x2eca	; 0x2eca <mp_emit_bc_for_iter>
    ccae:	68 85       	ldd	r22, Y+8	; 0x08
    ccb0:	79 85       	ldd	r23, Y+9	; 0x09
    ccb2:	40 e0       	ldi	r20, 0x00	; 0
    ccb4:	c8 01       	movw	r24, r16
    ccb6:	2d de       	rcall	.-934    	; 0xc912 <c_assign>
    ccb8:	ec 85       	ldd	r30, Y+12	; 0x0c
    ccba:	fd 85       	ldd	r31, Y+13	; 0x0d
    ccbc:	30 97       	sbiw	r30, 0x00	; 0
    ccbe:	71 f0       	breq	.+28     	; 0xccdc <compile_scope_comp_iter+0x84>
    ccc0:	ef 01       	movw	r28, r30
    ccc2:	84 81       	ldd	r24, Z+4	; 0x04
    ccc4:	95 81       	ldd	r25, Z+5	; 0x05
    ccc6:	a6 81       	ldd	r26, Z+6	; 0x06
    ccc8:	b7 81       	ldd	r27, Z+7	; 0x07
    ccca:	99 27       	eor	r25, r25
    cccc:	aa 27       	eor	r26, r26
    ccce:	bb 27       	eor	r27, r27
    ccd0:	80 3a       	cpi	r24, 0xA0	; 160
    ccd2:	91 05       	cpc	r25, r1
    ccd4:	a1 05       	cpc	r26, r1
    ccd6:	b1 05       	cpc	r27, r1
    ccd8:	b9 f1       	breq	.+110    	; 0xcd48 <compile_scope_comp_iter+0xf0>
    ccda:	42 c0       	rjmp	.+132    	; 0xcd60 <compile_scope_comp_iter+0x108>
    ccdc:	b4 01       	movw	r22, r8
    ccde:	c8 01       	movw	r24, r16
    cce0:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    cce4:	d8 01       	movw	r26, r16
    cce6:	59 96       	adiw	r26, 0x19	; 25
    cce8:	ed 91       	ld	r30, X+
    ccea:	fc 91       	ld	r31, X
    ccec:	5a 97       	sbiw	r26, 0x1a	; 26
    ccee:	60 81       	ld	r22, Z
    ccf0:	66 30       	cpi	r22, 0x06	; 6
    ccf2:	71 f4       	brne	.+28     	; 0xcd10 <compile_scope_comp_iter+0xb8>
    ccf4:	60 e0       	ldi	r22, 0x00	; 0
    ccf6:	70 e0       	ldi	r23, 0x00	; 0
    ccf8:	5b 96       	adiw	r26, 0x1b	; 27
    ccfa:	8d 91       	ld	r24, X+
    ccfc:	9c 91       	ld	r25, X
    ccfe:	5c 97       	sbiw	r26, 0x1c	; 28
    cd00:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <mp_emit_bc_yield>
    cd04:	f8 01       	movw	r30, r16
    cd06:	83 8d       	ldd	r24, Z+27	; 0x1b
    cd08:	94 8d       	ldd	r25, Z+28	; 0x1c
    cd0a:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    cd0e:	41 c0       	rjmp	.+130    	; 0xcd92 <compile_scope_comp_iter+0x13a>
    cd10:	a6 01       	movw	r20, r12
    cd12:	44 0f       	add	r20, r20
    cd14:	55 1f       	adc	r21, r21
    cd16:	44 0f       	add	r20, r20
    cd18:	55 1f       	adc	r21, r21
    cd1a:	4b 5f       	subi	r20, 0xFB	; 251
    cd1c:	5f 4f       	sbci	r21, 0xFF	; 255
    cd1e:	d8 01       	movw	r26, r16
    cd20:	5b 96       	adiw	r26, 0x1b	; 27
    cd22:	8d 91       	ld	r24, X+
    cd24:	9c 91       	ld	r25, X
    cd26:	5c 97       	sbiw	r26, 0x1c	; 28
    cd28:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <mp_emit_bc_store_comp>
    cd2c:	32 c0       	rjmp	.+100    	; 0xcd92 <compile_scope_comp_iter+0x13a>
    cd2e:	ef 01       	movw	r28, r30
    cd30:	84 81       	ldd	r24, Z+4	; 0x04
    cd32:	95 81       	ldd	r25, Z+5	; 0x05
    cd34:	a6 81       	ldd	r26, Z+6	; 0x06
    cd36:	b7 81       	ldd	r27, Z+7	; 0x07
    cd38:	99 27       	eor	r25, r25
    cd3a:	aa 27       	eor	r26, r26
    cd3c:	bb 27       	eor	r27, r27
    cd3e:	80 3a       	cpi	r24, 0xA0	; 160
    cd40:	91 05       	cpc	r25, r1
    cd42:	a1 05       	cpc	r26, r1
    cd44:	b1 05       	cpc	r27, r1
    cd46:	61 f4       	brne	.+24     	; 0xcd60 <compile_scope_comp_iter+0x108>
    cd48:	68 85       	ldd	r22, Y+8	; 0x08
    cd4a:	79 85       	ldd	r23, Y+9	; 0x09
    cd4c:	97 01       	movw	r18, r14
    cd4e:	40 e0       	ldi	r20, 0x00	; 0
    cd50:	c8 01       	movw	r24, r16
    cd52:	0e 94 2e 58 	call	0xb05c	; 0xb05c <c_if_cond>
    cd56:	ea 85       	ldd	r30, Y+10	; 0x0a
    cd58:	fb 85       	ldd	r31, Y+11	; 0x0b
    cd5a:	30 97       	sbiw	r30, 0x00	; 0
    cd5c:	41 f7       	brne	.-48     	; 0xcd2e <compile_scope_comp_iter+0xd6>
    cd5e:	be cf       	rjmp	.-132    	; 0xccdc <compile_scope_comp_iter+0x84>
    cd60:	8f 39       	cpi	r24, 0x9F	; 159
    cd62:	91 05       	cpc	r25, r1
    cd64:	a1 05       	cpc	r26, r1
    cd66:	b1 05       	cpc	r27, r1
    cd68:	11 f0       	breq	.+4      	; 0xcd6e <compile_scope_comp_iter+0x116>
    cd6a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    cd6e:	6a 85       	ldd	r22, Y+10	; 0x0a
    cd70:	7b 85       	ldd	r23, Y+11	; 0x0b
    cd72:	c8 01       	movw	r24, r16
    cd74:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    cd78:	61 e0       	ldi	r22, 0x01	; 1
    cd7a:	f8 01       	movw	r30, r16
    cd7c:	83 8d       	ldd	r24, Z+27	; 0x1b
    cd7e:	94 8d       	ldd	r25, Z+28	; 0x1c
    cd80:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <mp_emit_bc_get_iter>
    cd84:	96 01       	movw	r18, r12
    cd86:	2f 5f       	subi	r18, 0xFF	; 255
    cd88:	3f 4f       	sbci	r19, 0xFF	; 255
    cd8a:	a4 01       	movw	r20, r8
    cd8c:	be 01       	movw	r22, r28
    cd8e:	c8 01       	movw	r24, r16
    cd90:	63 df       	rcall	.-314    	; 0xcc58 <compile_scope_comp_iter>
    cd92:	b7 01       	movw	r22, r14
    cd94:	d8 01       	movw	r26, r16
    cd96:	5b 96       	adiw	r26, 0x1b	; 27
    cd98:	8d 91       	ld	r24, X+
    cd9a:	9c 91       	ld	r25, X
    cd9c:	5c 97       	sbiw	r26, 0x1c	; 28
    cd9e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    cda2:	b5 01       	movw	r22, r10
    cda4:	f8 01       	movw	r30, r16
    cda6:	83 8d       	ldd	r24, Z+27	; 0x1b
    cda8:	94 8d       	ldd	r25, Z+28	; 0x1c
    cdaa:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    cdae:	d8 01       	movw	r26, r16
    cdb0:	5b 96       	adiw	r26, 0x1b	; 27
    cdb2:	8d 91       	ld	r24, X+
    cdb4:	9c 91       	ld	r25, X
    cdb6:	5c 97       	sbiw	r26, 0x1c	; 28
    cdb8:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <mp_emit_bc_for_iter_end>
    cdbc:	df 91       	pop	r29
    cdbe:	cf 91       	pop	r28
    cdc0:	1f 91       	pop	r17
    cdc2:	0f 91       	pop	r16
    cdc4:	ff 90       	pop	r15
    cdc6:	ef 90       	pop	r14
    cdc8:	df 90       	pop	r13
    cdca:	cf 90       	pop	r12
    cdcc:	bf 90       	pop	r11
    cdce:	af 90       	pop	r10
    cdd0:	9f 90       	pop	r9
    cdd2:	8f 90       	pop	r8
    cdd4:	08 95       	ret

0000cdd6 <c_assign_tuple>:
    cdd6:	6f 92       	push	r6
    cdd8:	7f 92       	push	r7
    cdda:	8f 92       	push	r8
    cddc:	9f 92       	push	r9
    cdde:	af 92       	push	r10
    cde0:	bf 92       	push	r11
    cde2:	cf 92       	push	r12
    cde4:	df 92       	push	r13
    cde6:	ef 92       	push	r14
    cde8:	ff 92       	push	r15
    cdea:	0f 93       	push	r16
    cdec:	1f 93       	push	r17
    cdee:	cf 93       	push	r28
    cdf0:	df 93       	push	r29
    cdf2:	6c 01       	movw	r12, r24
    cdf4:	4b 01       	movw	r8, r22
    cdf6:	64 2e       	mov	r6, r20
    cdf8:	75 2e       	mov	r7, r21
    cdfa:	61 15       	cp	r22, r1
    cdfc:	71 05       	cpc	r23, r1
    cdfe:	b9 f1       	breq	.+110    	; 0xce6e <c_assign_tuple+0x98>
    ce00:	04 2f       	mov	r16, r20
    ce02:	15 2f       	mov	r17, r21
    ce04:	c0 e0       	ldi	r28, 0x00	; 0
    ce06:	d0 e0       	ldi	r29, 0x00	; 0
    ce08:	ee 24       	eor	r14, r14
    ce0a:	ea 94       	dec	r14
    ce0c:	fe 2c       	mov	r15, r14
    ce0e:	5b 01       	movw	r10, r22
    ce10:	81 e0       	ldi	r24, 0x01	; 1
    ce12:	a8 1a       	sub	r10, r24
    ce14:	b1 08       	sbc	r11, r1
    ce16:	d8 01       	movw	r26, r16
    ce18:	ed 91       	ld	r30, X+
    ce1a:	fd 91       	ld	r31, X+
    ce1c:	8d 01       	movw	r16, r26
    ce1e:	30 97       	sbiw	r30, 0x00	; 0
    ce20:	e9 f0       	breq	.+58     	; 0xce5c <c_assign_tuple+0x86>
    ce22:	cf 01       	movw	r24, r30
    ce24:	83 70       	andi	r24, 0x03	; 3
    ce26:	99 27       	eor	r25, r25
    ce28:	89 2b       	or	r24, r25
    ce2a:	c1 f4       	brne	.+48     	; 0xce5c <c_assign_tuple+0x86>
    ce2c:	84 81       	ldd	r24, Z+4	; 0x04
    ce2e:	80 32       	cpi	r24, 0x20	; 32
    ce30:	a9 f4       	brne	.+42     	; 0xce5c <c_assign_tuple+0x86>
    ce32:	ef 20       	and	r14, r15
    ce34:	e0 94       	com	r14
    ce36:	59 f4       	brne	.+22     	; 0xce4e <c_assign_tuple+0x78>
    ce38:	a5 01       	movw	r20, r10
    ce3a:	4c 1b       	sub	r20, r28
    ce3c:	5d 0b       	sbc	r21, r29
    ce3e:	be 01       	movw	r22, r28
    ce40:	f6 01       	movw	r30, r12
    ce42:	83 8d       	ldd	r24, Z+27	; 0x1b
    ce44:	94 8d       	ldd	r25, Z+28	; 0x1c
    ce46:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <mp_emit_bc_unpack_ex>
    ce4a:	7e 01       	movw	r14, r28
    ce4c:	07 c0       	rjmp	.+14     	; 0xce5c <c_assign_tuple+0x86>
    ce4e:	45 eb       	ldi	r20, 0xB5	; 181
    ce50:	59 e0       	ldi	r21, 0x09	; 9
    ce52:	bf 01       	movw	r22, r30
    ce54:	c6 01       	movw	r24, r12
    ce56:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    ce5a:	33 c0       	rjmp	.+102    	; 0xcec2 <c_assign_tuple+0xec>
    ce5c:	21 96       	adiw	r28, 0x01	; 1
    ce5e:	8c 16       	cp	r8, r28
    ce60:	9d 06       	cpc	r9, r29
    ce62:	c9 f6       	brne	.-78     	; 0xce16 <c_assign_tuple+0x40>
    ce64:	ff ef       	ldi	r31, 0xFF	; 255
    ce66:	ef 16       	cp	r14, r31
    ce68:	ff 06       	cpc	r15, r31
    ce6a:	79 f4       	brne	.+30     	; 0xce8a <c_assign_tuple+0xb4>
    ce6c:	03 c0       	rjmp	.+6      	; 0xce74 <c_assign_tuple+0x9e>
    ce6e:	ee 24       	eor	r14, r14
    ce70:	ea 94       	dec	r14
    ce72:	fe 2c       	mov	r15, r14
    ce74:	b4 01       	movw	r22, r8
    ce76:	d6 01       	movw	r26, r12
    ce78:	5b 96       	adiw	r26, 0x1b	; 27
    ce7a:	8d 91       	ld	r24, X+
    ce7c:	9c 91       	ld	r25, X
    ce7e:	5c 97       	sbiw	r26, 0x1c	; 28
    ce80:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <mp_emit_bc_unpack_sequence>
    ce84:	81 14       	cp	r8, r1
    ce86:	91 04       	cpc	r9, r1
    ce88:	e1 f0       	breq	.+56     	; 0xcec2 <c_assign_tuple+0xec>
    ce8a:	06 2d       	mov	r16, r6
    ce8c:	17 2d       	mov	r17, r7
    ce8e:	c0 e0       	ldi	r28, 0x00	; 0
    ce90:	d0 e0       	ldi	r29, 0x00	; 0
    ce92:	ce 15       	cp	r28, r14
    ce94:	df 05       	cpc	r29, r15
    ce96:	49 f4       	brne	.+18     	; 0xceaa <c_assign_tuple+0xd4>
    ce98:	d8 01       	movw	r26, r16
    ce9a:	ed 91       	ld	r30, X+
    ce9c:	fc 91       	ld	r31, X
    ce9e:	60 85       	ldd	r22, Z+8	; 0x08
    cea0:	71 85       	ldd	r23, Z+9	; 0x09
    cea2:	40 e0       	ldi	r20, 0x00	; 0
    cea4:	c6 01       	movw	r24, r12
    cea6:	35 dd       	rcall	.-1430   	; 0xc912 <c_assign>
    cea8:	06 c0       	rjmp	.+12     	; 0xceb6 <c_assign_tuple+0xe0>
    ceaa:	f8 01       	movw	r30, r16
    ceac:	60 81       	ld	r22, Z
    ceae:	71 81       	ldd	r23, Z+1	; 0x01
    ceb0:	40 e0       	ldi	r20, 0x00	; 0
    ceb2:	c6 01       	movw	r24, r12
    ceb4:	2e dd       	rcall	.-1444   	; 0xc912 <c_assign>
    ceb6:	21 96       	adiw	r28, 0x01	; 1
    ceb8:	0e 5f       	subi	r16, 0xFE	; 254
    ceba:	1f 4f       	sbci	r17, 0xFF	; 255
    cebc:	8c 16       	cp	r8, r28
    cebe:	9d 06       	cpc	r9, r29
    cec0:	41 f7       	brne	.-48     	; 0xce92 <c_assign_tuple+0xbc>
    cec2:	df 91       	pop	r29
    cec4:	cf 91       	pop	r28
    cec6:	1f 91       	pop	r17
    cec8:	0f 91       	pop	r16
    ceca:	ff 90       	pop	r15
    cecc:	ef 90       	pop	r14
    cece:	df 90       	pop	r13
    ced0:	cf 90       	pop	r12
    ced2:	bf 90       	pop	r11
    ced4:	af 90       	pop	r10
    ced6:	9f 90       	pop	r9
    ced8:	8f 90       	pop	r8
    ceda:	7f 90       	pop	r7
    cedc:	6f 90       	pop	r6
    cede:	08 95       	ret

0000cee0 <compile_with_stmt_helper>:
    cee0:	8f 92       	push	r8
    cee2:	9f 92       	push	r9
    cee4:	af 92       	push	r10
    cee6:	bf 92       	push	r11
    cee8:	cf 92       	push	r12
    ceea:	df 92       	push	r13
    ceec:	ef 92       	push	r14
    ceee:	ff 92       	push	r15
    cef0:	0f 93       	push	r16
    cef2:	1f 93       	push	r17
    cef4:	cf 93       	push	r28
    cef6:	df 93       	push	r29
    cef8:	ec 01       	movw	r28, r24
    cefa:	8b 01       	movw	r16, r22
    cefc:	7a 01       	movw	r14, r20
    cefe:	69 01       	movw	r12, r18
    cf00:	67 2b       	or	r22, r23
    cf02:	21 f4       	brne	.+8      	; 0xcf0c <compile_with_stmt_helper+0x2c>
    cf04:	b9 01       	movw	r22, r18
    cf06:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    cf0a:	46 c0       	rjmp	.+140    	; 0xcf98 <compile_with_stmt_helper+0xb8>
    cf0c:	a9 84       	ldd	r10, Y+9	; 0x09
    cf0e:	ba 84       	ldd	r11, Y+10	; 0x0a
    cf10:	c5 01       	movw	r24, r10
    cf12:	01 96       	adiw	r24, 0x01	; 1
    cf14:	9a 87       	std	Y+10, r25	; 0x0a
    cf16:	89 87       	std	Y+9, r24	; 0x09
    cf18:	fa 01       	movw	r30, r20
    cf1a:	80 80       	ld	r8, Z
    cf1c:	91 80       	ldd	r9, Z+1	; 0x01
    cf1e:	81 14       	cp	r8, r1
    cf20:	91 04       	cpc	r9, r1
    cf22:	d9 f0       	breq	.+54     	; 0xcf5a <compile_with_stmt_helper+0x7a>
    cf24:	c4 01       	movw	r24, r8
    cf26:	83 70       	andi	r24, 0x03	; 3
    cf28:	99 27       	eor	r25, r25
    cf2a:	89 2b       	or	r24, r25
    cf2c:	b1 f4       	brne	.+44     	; 0xcf5a <compile_with_stmt_helper+0x7a>
    cf2e:	f4 01       	movw	r30, r8
    cf30:	84 81       	ldd	r24, Z+4	; 0x04
    cf32:	84 37       	cpi	r24, 0x74	; 116
    cf34:	91 f4       	brne	.+36     	; 0xcf5a <compile_with_stmt_helper+0x7a>
    cf36:	60 85       	ldd	r22, Z+8	; 0x08
    cf38:	71 85       	ldd	r23, Z+9	; 0x09
    cf3a:	ce 01       	movw	r24, r28
    cf3c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    cf40:	40 e0       	ldi	r20, 0x00	; 0
    cf42:	50 e0       	ldi	r21, 0x00	; 0
    cf44:	b5 01       	movw	r22, r10
    cf46:	ce 01       	movw	r24, r28
    cf48:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <compile_increase_except_level>
    cf4c:	f4 01       	movw	r30, r8
    cf4e:	62 85       	ldd	r22, Z+10	; 0x0a
    cf50:	73 85       	ldd	r23, Z+11	; 0x0b
    cf52:	40 e0       	ldi	r20, 0x00	; 0
    cf54:	ce 01       	movw	r24, r28
    cf56:	dd dc       	rcall	.-1606   	; 0xc912 <c_assign>
    cf58:	0e c0       	rjmp	.+28     	; 0xcf76 <compile_with_stmt_helper+0x96>
    cf5a:	b4 01       	movw	r22, r8
    cf5c:	ce 01       	movw	r24, r28
    cf5e:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    cf62:	40 e0       	ldi	r20, 0x00	; 0
    cf64:	50 e0       	ldi	r21, 0x00	; 0
    cf66:	b5 01       	movw	r22, r10
    cf68:	ce 01       	movw	r24, r28
    cf6a:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <compile_increase_except_level>
    cf6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cf70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cf72:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    cf76:	a7 01       	movw	r20, r14
    cf78:	4e 5f       	subi	r20, 0xFE	; 254
    cf7a:	5f 4f       	sbci	r21, 0xFF	; 255
    cf7c:	b8 01       	movw	r22, r16
    cf7e:	61 50       	subi	r22, 0x01	; 1
    cf80:	71 09       	sbc	r23, r1
    cf82:	96 01       	movw	r18, r12
    cf84:	ce 01       	movw	r24, r28
    cf86:	ac df       	rcall	.-168    	; 0xcee0 <compile_with_stmt_helper>
    cf88:	b5 01       	movw	r22, r10
    cf8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cf8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cf8e:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <mp_emit_bc_with_cleanup>
    cf92:	ce 01       	movw	r24, r28
    cf94:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <compile_decrease_except_level>
    cf98:	df 91       	pop	r29
    cf9a:	cf 91       	pop	r28
    cf9c:	1f 91       	pop	r17
    cf9e:	0f 91       	pop	r16
    cfa0:	ff 90       	pop	r15
    cfa2:	ef 90       	pop	r14
    cfa4:	df 90       	pop	r13
    cfa6:	cf 90       	pop	r12
    cfa8:	bf 90       	pop	r11
    cfaa:	af 90       	pop	r10
    cfac:	9f 90       	pop	r9
    cfae:	8f 90       	pop	r8
    cfb0:	08 95       	ret

0000cfb2 <compile_with_stmt>:
    cfb2:	ef 92       	push	r14
    cfb4:	ff 92       	push	r15
    cfb6:	0f 93       	push	r16
    cfb8:	1f 93       	push	r17
    cfba:	cf 93       	push	r28
    cfbc:	df 93       	push	r29
    cfbe:	00 d0       	rcall	.+0      	; 0xcfc0 <compile_with_stmt+0xe>
    cfc0:	cd b7       	in	r28, 0x3d	; 61
    cfc2:	de b7       	in	r29, 0x3e	; 62
    cfc4:	7c 01       	movw	r14, r24
    cfc6:	8b 01       	movw	r16, r22
    cfc8:	ae 01       	movw	r20, r28
    cfca:	4f 5f       	subi	r20, 0xFF	; 255
    cfcc:	5f 4f       	sbci	r21, 0xFF	; 255
    cfce:	63 e7       	ldi	r22, 0x73	; 115
    cfd0:	70 e0       	ldi	r23, 0x00	; 0
    cfd2:	c8 01       	movw	r24, r16
    cfd4:	08 96       	adiw	r24, 0x08	; 8
    cfd6:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    cfda:	00 97       	sbiw	r24, 0x00	; 0
    cfdc:	11 f4       	brne	.+4      	; 0xcfe2 <compile_with_stmt+0x30>
    cfde:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    cfe2:	f8 01       	movw	r30, r16
    cfe4:	22 85       	ldd	r18, Z+10	; 0x0a
    cfe6:	33 85       	ldd	r19, Z+11	; 0x0b
    cfe8:	49 81       	ldd	r20, Y+1	; 0x01
    cfea:	5a 81       	ldd	r21, Y+2	; 0x02
    cfec:	bc 01       	movw	r22, r24
    cfee:	c7 01       	movw	r24, r14
    cff0:	77 df       	rcall	.-274    	; 0xcee0 <compile_with_stmt_helper>
    cff2:	0f 90       	pop	r0
    cff4:	0f 90       	pop	r0
    cff6:	df 91       	pop	r29
    cff8:	cf 91       	pop	r28
    cffa:	1f 91       	pop	r17
    cffc:	0f 91       	pop	r16
    cffe:	ff 90       	pop	r15
    d000:	ef 90       	pop	r14
    d002:	08 95       	ret

0000d004 <compile_for_stmt>:
    d004:	2f 92       	push	r2
    d006:	3f 92       	push	r3
    d008:	4f 92       	push	r4
    d00a:	5f 92       	push	r5
    d00c:	6f 92       	push	r6
    d00e:	7f 92       	push	r7
    d010:	8f 92       	push	r8
    d012:	9f 92       	push	r9
    d014:	af 92       	push	r10
    d016:	bf 92       	push	r11
    d018:	cf 92       	push	r12
    d01a:	df 92       	push	r13
    d01c:	ef 92       	push	r14
    d01e:	ff 92       	push	r15
    d020:	0f 93       	push	r16
    d022:	1f 93       	push	r17
    d024:	cf 93       	push	r28
    d026:	df 93       	push	r29
    d028:	cd b7       	in	r28, 0x3d	; 61
    d02a:	de b7       	in	r29, 0x3e	; 62
    d02c:	62 97       	sbiw	r28, 0x12	; 18
    d02e:	0f b6       	in	r0, 0x3f	; 63
    d030:	f8 94       	cli
    d032:	de bf       	out	0x3e, r29	; 62
    d034:	0f be       	out	0x3f, r0	; 63
    d036:	cd bf       	out	0x3d, r28	; 61
    d038:	1c 01       	movw	r2, r24
    d03a:	8b 01       	movw	r16, r22
    d03c:	db 01       	movw	r26, r22
    d03e:	18 96       	adiw	r26, 0x08	; 8
    d040:	8d 91       	ld	r24, X+
    d042:	9c 91       	ld	r25, X
    d044:	19 97       	sbiw	r26, 0x09	; 9
    d046:	8f 70       	andi	r24, 0x0F	; 15
    d048:	99 27       	eor	r25, r25
    d04a:	02 97       	sbiw	r24, 0x02	; 2
    d04c:	09 f0       	breq	.+2      	; 0xd050 <compile_for_stmt+0x4c>
    d04e:	60 c1       	rjmp	.+704    	; 0xd310 <compile_for_stmt+0x30c>
    d050:	1a 96       	adiw	r26, 0x0a	; 10
    d052:	ed 91       	ld	r30, X+
    d054:	fc 91       	ld	r31, X
    d056:	1b 97       	sbiw	r26, 0x0b	; 11
    d058:	30 97       	sbiw	r30, 0x00	; 0
    d05a:	09 f4       	brne	.+2      	; 0xd05e <compile_for_stmt+0x5a>
    d05c:	59 c1       	rjmp	.+690    	; 0xd310 <compile_for_stmt+0x30c>
    d05e:	cf 01       	movw	r24, r30
    d060:	83 70       	andi	r24, 0x03	; 3
    d062:	99 27       	eor	r25, r25
    d064:	89 2b       	or	r24, r25
    d066:	09 f0       	breq	.+2      	; 0xd06a <compile_for_stmt+0x66>
    d068:	53 c1       	rjmp	.+678    	; 0xd310 <compile_for_stmt+0x30c>
    d06a:	84 81       	ldd	r24, Z+4	; 0x04
    d06c:	89 32       	cpi	r24, 0x29	; 41
    d06e:	09 f0       	breq	.+2      	; 0xd072 <compile_for_stmt+0x6e>
    d070:	4f c1       	rjmp	.+670    	; 0xd310 <compile_for_stmt+0x30c>
    d072:	80 85       	ldd	r24, Z+8	; 0x08
    d074:	91 85       	ldd	r25, Z+9	; 0x09
    d076:	9c 01       	movw	r18, r24
    d078:	2f 70       	andi	r18, 0x0F	; 15
    d07a:	33 27       	eor	r19, r19
    d07c:	22 30       	cpi	r18, 0x02	; 2
    d07e:	31 05       	cpc	r19, r1
    d080:	09 f0       	breq	.+2      	; 0xd084 <compile_for_stmt+0x80>
    d082:	46 c1       	rjmp	.+652    	; 0xd310 <compile_for_stmt+0x30c>
    d084:	92 95       	swap	r25
    d086:	82 95       	swap	r24
    d088:	8f 70       	andi	r24, 0x0F	; 15
    d08a:	89 27       	eor	r24, r25
    d08c:	9f 70       	andi	r25, 0x0F	; 15
    d08e:	89 27       	eor	r24, r25
    d090:	8c 37       	cpi	r24, 0x7C	; 124
    d092:	91 05       	cpc	r25, r1
    d094:	09 f0       	breq	.+2      	; 0xd098 <compile_for_stmt+0x94>
    d096:	3c c1       	rjmp	.+632    	; 0xd310 <compile_for_stmt+0x30c>
    d098:	02 84       	ldd	r0, Z+10	; 0x0a
    d09a:	f3 85       	ldd	r31, Z+11	; 0x0b
    d09c:	e0 2d       	mov	r30, r0
    d09e:	84 81       	ldd	r24, Z+4	; 0x04
    d0a0:	8d 32       	cpi	r24, 0x2D	; 45
    d0a2:	09 f0       	breq	.+2      	; 0xd0a6 <compile_for_stmt+0xa2>
    d0a4:	35 c1       	rjmp	.+618    	; 0xd310 <compile_for_stmt+0x30c>
    d0a6:	80 85       	ldd	r24, Z+8	; 0x08
    d0a8:	91 85       	ldd	r25, Z+9	; 0x09
    d0aa:	9c 83       	std	Y+4, r25	; 0x04
    d0ac:	8b 83       	std	Y+3, r24	; 0x03
    d0ae:	ae 01       	movw	r20, r28
    d0b0:	4f 5f       	subi	r20, 0xFF	; 255
    d0b2:	5f 4f       	sbci	r21, 0xFF	; 255
    d0b4:	68 e9       	ldi	r22, 0x98	; 152
    d0b6:	70 e0       	ldi	r23, 0x00	; 0
    d0b8:	ce 01       	movw	r24, r28
    d0ba:	03 96       	adiw	r24, 0x03	; 3
    d0bc:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    d0c0:	9c 01       	movw	r18, r24
    d0c2:	21 50       	subi	r18, 0x01	; 1
    d0c4:	31 09       	sbc	r19, r1
    d0c6:	23 30       	cpi	r18, 0x03	; 3
    d0c8:	31 05       	cpc	r19, r1
    d0ca:	08 f0       	brcs	.+2      	; 0xd0ce <compile_for_stmt+0xca>
    d0cc:	21 c1       	rjmp	.+578    	; 0xd310 <compile_for_stmt+0x30c>
    d0ce:	81 30       	cpi	r24, 0x01	; 1
    d0d0:	91 05       	cpc	r25, r1
    d0d2:	69 f4       	brne	.+26     	; 0xd0ee <compile_for_stmt+0xea>
    d0d4:	e9 81       	ldd	r30, Y+1	; 0x01
    d0d6:	fa 81       	ldd	r31, Y+2	; 0x02
    d0d8:	e0 80       	ld	r14, Z
    d0da:	f1 80       	ldd	r15, Z+1	; 0x01
    d0dc:	0f 2e       	mov	r0, r31
    d0de:	f3 e0       	ldi	r31, 0x03	; 3
    d0e0:	cf 2e       	mov	r12, r31
    d0e2:	d1 2c       	mov	r13, r1
    d0e4:	f0 2d       	mov	r31, r0
    d0e6:	aa 24       	eor	r10, r10
    d0e8:	a3 94       	inc	r10
    d0ea:	b1 2c       	mov	r11, r1
    d0ec:	a0 c1       	rjmp	.+832    	; 0xd42e <compile_for_stmt+0x42a>
    d0ee:	02 97       	sbiw	r24, 0x02	; 2
    d0f0:	61 f4       	brne	.+24     	; 0xd10a <compile_for_stmt+0x106>
    d0f2:	e9 81       	ldd	r30, Y+1	; 0x01
    d0f4:	fa 81       	ldd	r31, Y+2	; 0x02
    d0f6:	a0 80       	ld	r10, Z
    d0f8:	b1 80       	ldd	r11, Z+1	; 0x01
    d0fa:	e2 80       	ldd	r14, Z+2	; 0x02
    d0fc:	f3 80       	ldd	r15, Z+3	; 0x03
    d0fe:	0f 2e       	mov	r0, r31
    d100:	f3 e0       	ldi	r31, 0x03	; 3
    d102:	cf 2e       	mov	r12, r31
    d104:	d1 2c       	mov	r13, r1
    d106:	f0 2d       	mov	r31, r0
    d108:	8e c1       	rjmp	.+796    	; 0xd426 <compile_for_stmt+0x422>
    d10a:	e9 81       	ldd	r30, Y+1	; 0x01
    d10c:	fa 81       	ldd	r31, Y+2	; 0x02
    d10e:	a0 80       	ld	r10, Z
    d110:	b1 80       	ldd	r11, Z+1	; 0x01
    d112:	e2 80       	ldd	r14, Z+2	; 0x02
    d114:	f3 80       	ldd	r15, Z+3	; 0x03
    d116:	c4 80       	ldd	r12, Z+4	; 0x04
    d118:	d5 80       	ldd	r13, Z+5	; 0x05
    d11a:	c0 fe       	sbrs	r12, 0
    d11c:	f9 c0       	rjmp	.+498    	; 0xd310 <compile_for_stmt+0x30c>
    d11e:	c6 01       	movw	r24, r12
    d120:	95 95       	asr	r25
    d122:	87 95       	ror	r24
    d124:	89 2b       	or	r24, r25
    d126:	09 f4       	brne	.+2      	; 0xd12a <compile_for_stmt+0x126>
    d128:	f3 c0       	rjmp	.+486    	; 0xd310 <compile_for_stmt+0x30c>
    d12a:	7d c1       	rjmp	.+762    	; 0xd426 <compile_for_stmt+0x422>
    d12c:	c5 01       	movw	r24, r10
    d12e:	83 70       	andi	r24, 0x03	; 3
    d130:	99 27       	eor	r25, r25
    d132:	89 2b       	or	r24, r25
    d134:	09 f0       	breq	.+2      	; 0xd138 <compile_for_stmt+0x134>
    d136:	7b c1       	rjmp	.+758    	; 0xd42e <compile_for_stmt+0x42a>
    d138:	f5 01       	movw	r30, r10
    d13a:	84 81       	ldd	r24, Z+4	; 0x04
    d13c:	95 81       	ldd	r25, Z+5	; 0x05
    d13e:	99 27       	eor	r25, r25
    d140:	8a 59       	subi	r24, 0x9A	; 154
    d142:	91 09       	sbc	r25, r1
    d144:	03 97       	sbiw	r24, 0x03	; 3
    d146:	08 f4       	brcc	.+2      	; 0xd14a <compile_for_stmt+0x146>
    d148:	e3 c0       	rjmp	.+454    	; 0xd310 <compile_for_stmt+0x30c>
    d14a:	71 c1       	rjmp	.+738    	; 0xd42e <compile_for_stmt+0x42a>
    d14c:	c7 01       	movw	r24, r14
    d14e:	83 70       	andi	r24, 0x03	; 3
    d150:	99 27       	eor	r25, r25
    d152:	89 2b       	or	r24, r25
    d154:	09 f0       	breq	.+2      	; 0xd158 <compile_for_stmt+0x154>
    d156:	6f c1       	rjmp	.+734    	; 0xd436 <compile_for_stmt+0x432>
    d158:	d7 01       	movw	r26, r14
    d15a:	14 96       	adiw	r26, 0x04	; 4
    d15c:	8d 91       	ld	r24, X+
    d15e:	9c 91       	ld	r25, X
    d160:	15 97       	sbiw	r26, 0x05	; 5
    d162:	99 27       	eor	r25, r25
    d164:	8a 59       	subi	r24, 0x9A	; 154
    d166:	91 09       	sbc	r25, r1
    d168:	03 97       	sbiw	r24, 0x03	; 3
    d16a:	08 f4       	brcc	.+2      	; 0xd16e <compile_for_stmt+0x16a>
    d16c:	d1 c0       	rjmp	.+418    	; 0xd310 <compile_for_stmt+0x30c>
    d16e:	63 c1       	rjmp	.+710    	; 0xd436 <compile_for_stmt+0x432>
    d170:	b7 01       	movw	r22, r14
    d172:	c1 01       	movw	r24, r2
    d174:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d178:	b5 01       	movw	r22, r10
    d17a:	c1 01       	movw	r24, r2
    d17c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d180:	6d 81       	ldd	r22, Y+5	; 0x05
    d182:	7e 81       	ldd	r23, Y+6	; 0x06
    d184:	f1 01       	movw	r30, r2
    d186:	83 8d       	ldd	r24, Z+27	; 0x1b
    d188:	94 8d       	ldd	r25, Z+28	; 0x1c
    d18a:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    d18e:	6f 81       	ldd	r22, Y+7	; 0x07
    d190:	78 85       	ldd	r23, Y+8	; 0x08
    d192:	d1 01       	movw	r26, r2
    d194:	5b 96       	adiw	r26, 0x1b	; 27
    d196:	8d 91       	ld	r24, X+
    d198:	9c 91       	ld	r25, X
    d19a:	5c 97       	sbiw	r26, 0x1c	; 28
    d19c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d1a0:	f1 01       	movw	r30, r2
    d1a2:	83 8d       	ldd	r24, Z+27	; 0x1b
    d1a4:	94 8d       	ldd	r25, Z+28	; 0x1c
    d1a6:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    d1aa:	40 e0       	ldi	r20, 0x00	; 0
    d1ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    d1ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    d1b0:	c1 01       	movw	r24, r2
    d1b2:	af db       	rcall	.-2210   	; 0xc912 <c_assign>
    d1b4:	69 85       	ldd	r22, Y+9	; 0x09
    d1b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    d1b8:	c1 01       	movw	r24, r2
    d1ba:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d1be:	b3 01       	movw	r22, r6
    d1c0:	d1 01       	movw	r26, r2
    d1c2:	5b 96       	adiw	r26, 0x1b	; 27
    d1c4:	8d 91       	ld	r24, X+
    d1c6:	9c 91       	ld	r25, X
    d1c8:	5c 97       	sbiw	r26, 0x1c	; 28
    d1ca:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d1ce:	b6 01       	movw	r22, r12
    d1d0:	c1 01       	movw	r24, r2
    d1d2:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d1d6:	6e e0       	ldi	r22, 0x0E	; 14
    d1d8:	f1 01       	movw	r30, r2
    d1da:	83 8d       	ldd	r24, Z+27	; 0x1b
    d1dc:	94 8d       	ldd	r25, Z+28	; 0x1c
    d1de:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    d1e2:	6d 81       	ldd	r22, Y+5	; 0x05
    d1e4:	7e 81       	ldd	r23, Y+6	; 0x06
    d1e6:	d1 01       	movw	r26, r2
    d1e8:	5b 96       	adiw	r26, 0x1b	; 27
    d1ea:	8d 91       	ld	r24, X+
    d1ec:	9c 91       	ld	r25, X
    d1ee:	5c 97       	sbiw	r26, 0x1c	; 28
    d1f0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d1f4:	81 14       	cp	r8, r1
    d1f6:	91 04       	cpc	r9, r1
    d1f8:	69 f4       	brne	.+26     	; 0xd214 <compile_for_stmt+0x210>
    d1fa:	f1 01       	movw	r30, r2
    d1fc:	83 8d       	ldd	r24, Z+27	; 0x1b
    d1fe:	94 8d       	ldd	r25, Z+28	; 0x1c
    d200:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <mp_emit_bc_dup_top_two>
    d204:	d1 01       	movw	r26, r2
    d206:	5b 96       	adiw	r26, 0x1b	; 27
    d208:	8d 91       	ld	r24, X+
    d20a:	9c 91       	ld	r25, X
    d20c:	5c 97       	sbiw	r26, 0x1c	; 28
    d20e:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <mp_emit_bc_rot_two>
    d212:	09 c0       	rjmp	.+18     	; 0xd226 <compile_for_stmt+0x222>
    d214:	f1 01       	movw	r30, r2
    d216:	83 8d       	ldd	r24, Z+27	; 0x1b
    d218:	94 8d       	ldd	r25, Z+28	; 0x1c
    d21a:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    d21e:	b7 01       	movw	r22, r14
    d220:	c1 01       	movw	r24, r2
    d222:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d226:	c0 fe       	sbrs	r12, 0
    d228:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    d22c:	dd 20       	and	r13, r13
    d22e:	4c f0       	brlt	.+18     	; 0xd242 <compile_for_stmt+0x23e>
    d230:	60 e0       	ldi	r22, 0x00	; 0
    d232:	d1 01       	movw	r26, r2
    d234:	5b 96       	adiw	r26, 0x1b	; 27
    d236:	8d 91       	ld	r24, X+
    d238:	9c 91       	ld	r25, X
    d23a:	5c 97       	sbiw	r26, 0x1c	; 28
    d23c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    d240:	06 c0       	rjmp	.+12     	; 0xd24e <compile_for_stmt+0x24a>
    d242:	61 e0       	ldi	r22, 0x01	; 1
    d244:	f1 01       	movw	r30, r2
    d246:	83 8d       	ldd	r24, Z+27	; 0x1b
    d248:	94 8d       	ldd	r25, Z+28	; 0x1c
    d24a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    d24e:	4f 81       	ldd	r20, Y+7	; 0x07
    d250:	58 85       	ldd	r21, Y+8	; 0x08
    d252:	61 e0       	ldi	r22, 0x01	; 1
    d254:	d1 01       	movw	r26, r2
    d256:	5b 96       	adiw	r26, 0x1b	; 27
    d258:	8d 91       	ld	r24, X+
    d25a:	9c 91       	ld	r25, X
    d25c:	5c 97       	sbiw	r26, 0x1c	; 28
    d25e:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <mp_emit_bc_pop_jump_if>
    d262:	8d 85       	ldd	r24, Y+13	; 0x0d
    d264:	9e 85       	ldd	r25, Y+14	; 0x0e
    d266:	f1 01       	movw	r30, r2
    d268:	90 8b       	std	Z+16, r25	; 0x10
    d26a:	87 87       	std	Z+15, r24	; 0x0f
    d26c:	af 85       	ldd	r26, Y+15	; 0x0f
    d26e:	b8 89       	ldd	r27, Y+16	; 0x10
    d270:	b2 8b       	std	Z+18, r27	; 0x12
    d272:	a1 8b       	std	Z+17, r26	; 0x11
    d274:	89 89       	ldd	r24, Y+17	; 0x11
    d276:	9a 89       	ldd	r25, Y+18	; 0x12
    d278:	96 8b       	std	Z+22, r25	; 0x16
    d27a:	85 8b       	std	Z+21, r24	; 0x15
    d27c:	41 14       	cp	r4, r1
    d27e:	51 04       	cpc	r5, r1
    d280:	09 f4       	brne	.+2      	; 0xd284 <compile_for_stmt+0x280>
    d282:	2b c1       	rjmp	.+598    	; 0xd4da <compile_for_stmt+0x4d6>
    d284:	83 8d       	ldd	r24, Z+27	; 0x1b
    d286:	94 8d       	ldd	r25, Z+28	; 0x1c
    d288:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    d28c:	81 14       	cp	r8, r1
    d28e:	91 04       	cpc	r9, r1
    d290:	39 f4       	brne	.+14     	; 0xd2a0 <compile_for_stmt+0x29c>
    d292:	d1 01       	movw	r26, r2
    d294:	5b 96       	adiw	r26, 0x1b	; 27
    d296:	8d 91       	ld	r24, X+
    d298:	9c 91       	ld	r25, X
    d29a:	5c 97       	sbiw	r26, 0x1c	; 28
    d29c:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    d2a0:	b2 01       	movw	r22, r4
    d2a2:	c1 01       	movw	r24, r2
    d2a4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d2a8:	f1 01       	movw	r30, r2
    d2aa:	e1 84       	ldd	r14, Z+9	; 0x09
    d2ac:	f2 84       	ldd	r15, Z+10	; 0x0a
    d2ae:	c7 01       	movw	r24, r14
    d2b0:	01 96       	adiw	r24, 0x01	; 1
    d2b2:	92 87       	std	Z+10, r25	; 0x0a
    d2b4:	81 87       	std	Z+9, r24	; 0x09
    d2b6:	b7 01       	movw	r22, r14
    d2b8:	83 8d       	ldd	r24, Z+27	; 0x1b
    d2ba:	94 8d       	ldd	r25, Z+28	; 0x1c
    d2bc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    d2c0:	81 e0       	ldi	r24, 0x01	; 1
    d2c2:	90 e0       	ldi	r25, 0x00	; 0
    d2c4:	81 14       	cp	r8, r1
    d2c6:	91 04       	cpc	r9, r1
    d2c8:	11 f0       	breq	.+4      	; 0xd2ce <compile_for_stmt+0x2ca>
    d2ca:	80 e0       	ldi	r24, 0x00	; 0
    d2cc:	90 e0       	ldi	r25, 0x00	; 0
    d2ce:	bc 01       	movw	r22, r24
    d2d0:	6f 5f       	subi	r22, 0xFF	; 255
    d2d2:	7f 4f       	sbci	r23, 0xFF	; 255
    d2d4:	d1 01       	movw	r26, r2
    d2d6:	5b 96       	adiw	r26, 0x1b	; 27
    d2d8:	8d 91       	ld	r24, X+
    d2da:	9c 91       	ld	r25, X
    d2dc:	5c 97       	sbiw	r26, 0x1c	; 28
    d2de:	0e 94 88 13 	call	0x2710	; 0x2710 <mp_emit_bc_adjust_stack_size>
    d2e2:	b8 01       	movw	r22, r16
    d2e4:	f1 01       	movw	r30, r2
    d2e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    d2e8:	94 8d       	ldd	r25, Z+28	; 0x1c
    d2ea:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d2ee:	d1 01       	movw	r26, r2
    d2f0:	5b 96       	adiw	r26, 0x1b	; 27
    d2f2:	8d 91       	ld	r24, X+
    d2f4:	9c 91       	ld	r25, X
    d2f6:	5c 97       	sbiw	r26, 0x1c	; 28
    d2f8:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    d2fc:	89 28       	or	r8, r9
    d2fe:	09 f4       	brne	.+2      	; 0xd302 <compile_for_stmt+0x2fe>
    d300:	00 c1       	rjmp	.+512    	; 0xd502 <compile_for_stmt+0x4fe>
    d302:	b7 01       	movw	r22, r14
    d304:	f1 01       	movw	r30, r2
    d306:	83 8d       	ldd	r24, Z+27	; 0x1b
    d308:	94 8d       	ldd	r25, Z+28	; 0x1c
    d30a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d30e:	ff c0       	rjmp	.+510    	; 0xd50e <compile_for_stmt+0x50a>
    d310:	d1 01       	movw	r26, r2
    d312:	1f 96       	adiw	r26, 0x0f	; 15
    d314:	8d 90       	ld	r8, X+
    d316:	9c 90       	ld	r9, X
    d318:	50 97       	sbiw	r26, 0x10	; 16
    d31a:	51 96       	adiw	r26, 0x11	; 17
    d31c:	6d 90       	ld	r6, X+
    d31e:	7c 90       	ld	r7, X
    d320:	52 97       	sbiw	r26, 0x12	; 18
    d322:	55 96       	adiw	r26, 0x15	; 21
    d324:	4d 90       	ld	r4, X+
    d326:	5c 90       	ld	r5, X
    d328:	56 97       	sbiw	r26, 0x16	; 22
    d32a:	19 96       	adiw	r26, 0x09	; 9
    d32c:	ed 90       	ld	r14, X+
    d32e:	fc 90       	ld	r15, X
    d330:	1a 97       	sbiw	r26, 0x0a	; 10
    d332:	67 01       	movw	r12, r14
    d334:	bf ef       	ldi	r27, 0xFF	; 255
    d336:	cb 1a       	sub	r12, r27
    d338:	db 0a       	sbc	r13, r27
    d33a:	57 01       	movw	r10, r14
    d33c:	e2 e0       	ldi	r30, 0x02	; 2
    d33e:	ae 0e       	add	r10, r30
    d340:	b1 1c       	adc	r11, r1
    d342:	d1 01       	movw	r26, r2
    d344:	52 96       	adiw	r26, 0x12	; 18
    d346:	dc 92       	st	X, r13
    d348:	ce 92       	st	-X, r12
    d34a:	51 97       	sbiw	r26, 0x11	; 17
    d34c:	53 96       	adiw	r26, 0x13	; 19
    d34e:	8d 91       	ld	r24, X+
    d350:	9c 91       	ld	r25, X
    d352:	54 97       	sbiw	r26, 0x14	; 20
    d354:	56 96       	adiw	r26, 0x16	; 22
    d356:	9c 93       	st	X, r25
    d358:	8e 93       	st	-X, r24
    d35a:	55 97       	sbiw	r26, 0x15	; 21
    d35c:	c7 01       	movw	r24, r14
    d35e:	90 68       	ori	r25, 0x80	; 128
    d360:	50 96       	adiw	r26, 0x10	; 16
    d362:	9c 93       	st	X, r25
    d364:	8e 93       	st	-X, r24
    d366:	1f 97       	sbiw	r26, 0x0f	; 15
    d368:	c7 01       	movw	r24, r14
    d36a:	03 96       	adiw	r24, 0x03	; 3
    d36c:	1a 96       	adiw	r26, 0x0a	; 10
    d36e:	9c 93       	st	X, r25
    d370:	8e 93       	st	-X, r24
    d372:	19 97       	sbiw	r26, 0x09	; 9
    d374:	f8 01       	movw	r30, r16
    d376:	62 85       	ldd	r22, Z+10	; 0x0a
    d378:	73 85       	ldd	r23, Z+11	; 0x0b
    d37a:	c1 01       	movw	r24, r2
    d37c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d380:	61 e0       	ldi	r22, 0x01	; 1
    d382:	d1 01       	movw	r26, r2
    d384:	5b 96       	adiw	r26, 0x1b	; 27
    d386:	8d 91       	ld	r24, X+
    d388:	9c 91       	ld	r25, X
    d38a:	5c 97       	sbiw	r26, 0x1c	; 28
    d38c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <mp_emit_bc_get_iter>
    d390:	b6 01       	movw	r22, r12
    d392:	f1 01       	movw	r30, r2
    d394:	83 8d       	ldd	r24, Z+27	; 0x1b
    d396:	94 8d       	ldd	r25, Z+28	; 0x1c
    d398:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d39c:	b5 01       	movw	r22, r10
    d39e:	d1 01       	movw	r26, r2
    d3a0:	5b 96       	adiw	r26, 0x1b	; 27
    d3a2:	8d 91       	ld	r24, X+
    d3a4:	9c 91       	ld	r25, X
    d3a6:	5c 97       	sbiw	r26, 0x1c	; 28
    d3a8:	0e 94 65 17 	call	0x2eca	; 0x2eca <mp_emit_bc_for_iter>
    d3ac:	f8 01       	movw	r30, r16
    d3ae:	60 85       	ldd	r22, Z+8	; 0x08
    d3b0:	71 85       	ldd	r23, Z+9	; 0x09
    d3b2:	40 e0       	ldi	r20, 0x00	; 0
    d3b4:	c1 01       	movw	r24, r2
    d3b6:	ad da       	rcall	.-2726   	; 0xc912 <c_assign>
    d3b8:	d8 01       	movw	r26, r16
    d3ba:	1c 96       	adiw	r26, 0x0c	; 12
    d3bc:	6d 91       	ld	r22, X+
    d3be:	7c 91       	ld	r23, X
    d3c0:	1d 97       	sbiw	r26, 0x0d	; 13
    d3c2:	c1 01       	movw	r24, r2
    d3c4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d3c8:	d1 01       	movw	r26, r2
    d3ca:	5b 96       	adiw	r26, 0x1b	; 27
    d3cc:	ed 91       	ld	r30, X+
    d3ce:	fc 91       	ld	r31, X
    d3d0:	5c 97       	sbiw	r26, 0x1c	; 28
    d3d2:	84 81       	ldd	r24, Z+4	; 0x04
    d3d4:	81 11       	cpse	r24, r1
    d3d6:	04 c0       	rjmp	.+8      	; 0xd3e0 <compile_for_stmt+0x3dc>
    d3d8:	b6 01       	movw	r22, r12
    d3da:	cf 01       	movw	r24, r30
    d3dc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <mp_emit_bc_jump>
    d3e0:	b5 01       	movw	r22, r10
    d3e2:	f1 01       	movw	r30, r2
    d3e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    d3e6:	94 8d       	ldd	r25, Z+28	; 0x1c
    d3e8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d3ec:	d1 01       	movw	r26, r2
    d3ee:	5b 96       	adiw	r26, 0x1b	; 27
    d3f0:	8d 91       	ld	r24, X+
    d3f2:	9c 91       	ld	r25, X
    d3f4:	5c 97       	sbiw	r26, 0x1c	; 28
    d3f6:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <mp_emit_bc_for_iter_end>
    d3fa:	f1 01       	movw	r30, r2
    d3fc:	90 8a       	std	Z+16, r9	; 0x10
    d3fe:	87 86       	std	Z+15, r8	; 0x0f
    d400:	72 8a       	std	Z+18, r7	; 0x12
    d402:	61 8a       	std	Z+17, r6	; 0x11
    d404:	56 8a       	std	Z+22, r5	; 0x16
    d406:	45 8a       	std	Z+21, r4	; 0x15
    d408:	d8 01       	movw	r26, r16
    d40a:	1e 96       	adiw	r26, 0x0e	; 14
    d40c:	6d 91       	ld	r22, X+
    d40e:	7c 91       	ld	r23, X
    d410:	1f 97       	sbiw	r26, 0x0f	; 15
    d412:	c1 01       	movw	r24, r2
    d414:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d418:	b7 01       	movw	r22, r14
    d41a:	f1 01       	movw	r30, r2
    d41c:	83 8d       	ldd	r24, Z+27	; 0x1b
    d41e:	94 8d       	ldd	r25, Z+28	; 0x1c
    d420:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d424:	74 c0       	rjmp	.+232    	; 0xd50e <compile_for_stmt+0x50a>
    d426:	a1 14       	cp	r10, r1
    d428:	b1 04       	cpc	r11, r1
    d42a:	09 f0       	breq	.+2      	; 0xd42e <compile_for_stmt+0x42a>
    d42c:	7f ce       	rjmp	.-770    	; 0xd12c <compile_for_stmt+0x128>
    d42e:	e1 14       	cp	r14, r1
    d430:	f1 04       	cpc	r15, r1
    d432:	09 f0       	breq	.+2      	; 0xd436 <compile_for_stmt+0x432>
    d434:	8b ce       	rjmp	.-746    	; 0xd14c <compile_for_stmt+0x148>
    d436:	d8 01       	movw	r26, r16
    d438:	1e 96       	adiw	r26, 0x0e	; 14
    d43a:	4d 90       	ld	r4, X+
    d43c:	5c 90       	ld	r5, X
    d43e:	1f 97       	sbiw	r26, 0x0f	; 15
    d440:	1c 96       	adiw	r26, 0x0c	; 12
    d442:	ed 91       	ld	r30, X+
    d444:	fc 91       	ld	r31, X
    d446:	1d 97       	sbiw	r26, 0x0d	; 13
    d448:	fa 87       	std	Y+10, r31	; 0x0a
    d44a:	e9 87       	std	Y+9, r30	; 0x09
    d44c:	18 96       	adiw	r26, 0x08	; 8
    d44e:	8d 91       	ld	r24, X+
    d450:	9c 91       	ld	r25, X
    d452:	19 97       	sbiw	r26, 0x09	; 9
    d454:	9c 87       	std	Y+12, r25	; 0x0c
    d456:	8b 87       	std	Y+11, r24	; 0x0b
    d458:	d1 01       	movw	r26, r2
    d45a:	1f 96       	adiw	r26, 0x0f	; 15
    d45c:	0d 90       	ld	r0, X+
    d45e:	bc 91       	ld	r27, X
    d460:	a0 2d       	mov	r26, r0
    d462:	be 87       	std	Y+14, r27	; 0x0e
    d464:	ad 87       	std	Y+13, r26	; 0x0d
    d466:	f1 01       	movw	r30, r2
    d468:	01 88       	ldd	r0, Z+17	; 0x11
    d46a:	f2 89       	ldd	r31, Z+18	; 0x12
    d46c:	e0 2d       	mov	r30, r0
    d46e:	f8 8b       	std	Y+16, r31	; 0x10
    d470:	ef 87       	std	Y+15, r30	; 0x0f
    d472:	d1 01       	movw	r26, r2
    d474:	55 96       	adiw	r26, 0x15	; 21
    d476:	0d 90       	ld	r0, X+
    d478:	bc 91       	ld	r27, X
    d47a:	a0 2d       	mov	r26, r0
    d47c:	ba 8b       	std	Y+18, r27	; 0x12
    d47e:	a9 8b       	std	Y+17, r26	; 0x11
    d480:	f1 01       	movw	r30, r2
    d482:	01 85       	ldd	r16, Z+9	; 0x09
    d484:	12 85       	ldd	r17, Z+10	; 0x0a
    d486:	38 01       	movw	r6, r16
    d488:	ff ef       	ldi	r31, 0xFF	; 255
    d48a:	6f 1a       	sub	r6, r31
    d48c:	7f 0a       	sbc	r7, r31
    d48e:	c8 01       	movw	r24, r16
    d490:	02 96       	adiw	r24, 0x02	; 2
    d492:	98 87       	std	Y+8, r25	; 0x08
    d494:	8f 83       	std	Y+7, r24	; 0x07
    d496:	d1 01       	movw	r26, r2
    d498:	50 96       	adiw	r26, 0x10	; 16
    d49a:	1c 93       	st	X, r17
    d49c:	0e 93       	st	-X, r16
    d49e:	1f 97       	sbiw	r26, 0x0f	; 15
    d4a0:	52 96       	adiw	r26, 0x12	; 18
    d4a2:	7c 92       	st	X, r7
    d4a4:	6e 92       	st	-X, r6
    d4a6:	51 97       	sbiw	r26, 0x11	; 17
    d4a8:	53 96       	adiw	r26, 0x13	; 19
    d4aa:	8d 91       	ld	r24, X+
    d4ac:	9c 91       	ld	r25, X
    d4ae:	54 97       	sbiw	r26, 0x14	; 20
    d4b0:	56 96       	adiw	r26, 0x16	; 22
    d4b2:	9c 93       	st	X, r25
    d4b4:	8e 93       	st	-X, r24
    d4b6:	55 97       	sbiw	r26, 0x15	; 21
    d4b8:	f8 01       	movw	r30, r16
    d4ba:	33 96       	adiw	r30, 0x03	; 3
    d4bc:	fe 83       	std	Y+6, r31	; 0x06
    d4be:	ed 83       	std	Y+5, r30	; 0x05
    d4c0:	c8 01       	movw	r24, r16
    d4c2:	04 96       	adiw	r24, 0x04	; 4
    d4c4:	1a 96       	adiw	r26, 0x0a	; 10
    d4c6:	9c 93       	st	X, r25
    d4c8:	8e 93       	st	-X, r24
    d4ca:	19 97       	sbiw	r26, 0x09	; 9
    d4cc:	47 01       	movw	r8, r14
    d4ce:	f1 e0       	ldi	r31, 0x01	; 1
    d4d0:	8f 22       	and	r8, r31
    d4d2:	99 24       	eor	r9, r9
    d4d4:	e0 fc       	sbrc	r14, 0
    d4d6:	50 ce       	rjmp	.-864    	; 0xd178 <compile_for_stmt+0x174>
    d4d8:	4b ce       	rjmp	.-874    	; 0xd170 <compile_for_stmt+0x16c>
    d4da:	b8 01       	movw	r22, r16
    d4dc:	83 8d       	ldd	r24, Z+27	; 0x1b
    d4de:	94 8d       	ldd	r25, Z+28	; 0x1c
    d4e0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d4e4:	f1 01       	movw	r30, r2
    d4e6:	83 8d       	ldd	r24, Z+27	; 0x1b
    d4e8:	94 8d       	ldd	r25, Z+28	; 0x1c
    d4ea:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    d4ee:	89 28       	or	r8, r9
    d4f0:	71 f4       	brne	.+28     	; 0xd50e <compile_for_stmt+0x50a>
    d4f2:	d1 01       	movw	r26, r2
    d4f4:	5b 96       	adiw	r26, 0x1b	; 27
    d4f6:	8d 91       	ld	r24, X+
    d4f8:	9c 91       	ld	r25, X
    d4fa:	5c 97       	sbiw	r26, 0x1c	; 28
    d4fc:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    d500:	06 c0       	rjmp	.+12     	; 0xd50e <compile_for_stmt+0x50a>
    d502:	f1 01       	movw	r30, r2
    d504:	83 8d       	ldd	r24, Z+27	; 0x1b
    d506:	94 8d       	ldd	r25, Z+28	; 0x1c
    d508:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    d50c:	fa ce       	rjmp	.-524    	; 0xd302 <compile_for_stmt+0x2fe>
    d50e:	62 96       	adiw	r28, 0x12	; 18
    d510:	0f b6       	in	r0, 0x3f	; 63
    d512:	f8 94       	cli
    d514:	de bf       	out	0x3e, r29	; 62
    d516:	0f be       	out	0x3f, r0	; 63
    d518:	cd bf       	out	0x3d, r28	; 61
    d51a:	df 91       	pop	r29
    d51c:	cf 91       	pop	r28
    d51e:	1f 91       	pop	r17
    d520:	0f 91       	pop	r16
    d522:	ff 90       	pop	r15
    d524:	ef 90       	pop	r14
    d526:	df 90       	pop	r13
    d528:	cf 90       	pop	r12
    d52a:	bf 90       	pop	r11
    d52c:	af 90       	pop	r10
    d52e:	9f 90       	pop	r9
    d530:	8f 90       	pop	r8
    d532:	7f 90       	pop	r7
    d534:	6f 90       	pop	r6
    d536:	5f 90       	pop	r5
    d538:	4f 90       	pop	r4
    d53a:	3f 90       	pop	r3
    d53c:	2f 90       	pop	r2
    d53e:	08 95       	ret

0000d540 <compile_classdef>:
    d540:	cf 93       	push	r28
    d542:	df 93       	push	r29
    d544:	ec 01       	movw	r28, r24
    d546:	e9 8d       	ldd	r30, Y+25	; 0x19
    d548:	fa 8d       	ldd	r31, Y+26	; 0x1a
    d54a:	47 85       	ldd	r20, Z+15	; 0x0f
    d54c:	50 89       	ldd	r21, Z+16	; 0x10
    d54e:	0e 94 04 5b 	call	0xb608	; 0xb608 <compile_classdef_helper>
    d552:	bc 01       	movw	r22, r24
    d554:	ce 01       	movw	r24, r28
    d556:	cb d9       	rcall	.-3178   	; 0xc8ee <compile_store_id>
    d558:	df 91       	pop	r29
    d55a:	cf 91       	pop	r28
    d55c:	08 95       	ret

0000d55e <compile_funcdef>:
    d55e:	cf 93       	push	r28
    d560:	df 93       	push	r29
    d562:	ec 01       	movw	r28, r24
    d564:	e9 8d       	ldd	r30, Y+25	; 0x19
    d566:	fa 8d       	ldd	r31, Y+26	; 0x1a
    d568:	47 85       	ldd	r20, Z+15	; 0x0f
    d56a:	50 89       	ldd	r21, Z+16	; 0x10
    d56c:	0e 94 0d 4d 	call	0x9a1a	; 0x9a1a <compile_funcdef_helper>
    d570:	bc 01       	movw	r22, r24
    d572:	ce 01       	movw	r24, r28
    d574:	bc d9       	rcall	.-3208   	; 0xc8ee <compile_store_id>
    d576:	df 91       	pop	r29
    d578:	cf 91       	pop	r28
    d57a:	08 95       	ret

0000d57c <compile_decorated>:
    d57c:	2f 92       	push	r2
    d57e:	3f 92       	push	r3
    d580:	4f 92       	push	r4
    d582:	5f 92       	push	r5
    d584:	6f 92       	push	r6
    d586:	7f 92       	push	r7
    d588:	8f 92       	push	r8
    d58a:	9f 92       	push	r9
    d58c:	af 92       	push	r10
    d58e:	bf 92       	push	r11
    d590:	cf 92       	push	r12
    d592:	df 92       	push	r13
    d594:	ef 92       	push	r14
    d596:	ff 92       	push	r15
    d598:	0f 93       	push	r16
    d59a:	1f 93       	push	r17
    d59c:	cf 93       	push	r28
    d59e:	df 93       	push	r29
    d5a0:	00 d0       	rcall	.+0      	; 0xd5a2 <compile_decorated+0x26>
    d5a2:	00 d0       	rcall	.+0      	; 0xd5a4 <compile_decorated+0x28>
    d5a4:	00 d0       	rcall	.+0      	; 0xd5a6 <compile_decorated+0x2a>
    d5a6:	cd b7       	in	r28, 0x3d	; 61
    d5a8:	de b7       	in	r29, 0x3e	; 62
    d5aa:	6c 01       	movw	r12, r24
    d5ac:	7e 83       	std	Y+6, r23	; 0x06
    d5ae:	6d 83       	std	Y+5, r22	; 0x05
    d5b0:	ae 01       	movw	r20, r28
    d5b2:	4f 5f       	subi	r20, 0xFF	; 255
    d5b4:	5f 4f       	sbci	r21, 0xFF	; 255
    d5b6:	6d e3       	ldi	r22, 0x3D	; 61
    d5b8:	70 e0       	ldi	r23, 0x00	; 0
    d5ba:	8d 81       	ldd	r24, Y+5	; 0x05
    d5bc:	9e 81       	ldd	r25, Y+6	; 0x06
    d5be:	08 96       	adiw	r24, 0x08	; 8
    d5c0:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    d5c4:	2c 01       	movw	r4, r24
    d5c6:	d6 01       	movw	r26, r12
    d5c8:	59 96       	adiw	r26, 0x19	; 25
    d5ca:	ed 91       	ld	r30, X+
    d5cc:	fc 91       	ld	r31, X
    d5ce:	5a 97       	sbiw	r26, 0x1a	; 26
    d5d0:	27 84       	ldd	r2, Z+15	; 0x0f
    d5d2:	30 88       	ldd	r3, Z+16	; 0x10
    d5d4:	89 2b       	or	r24, r25
    d5d6:	09 f4       	brne	.+2      	; 0xd5da <compile_decorated+0x5e>
    d5d8:	a3 c0       	rjmp	.+326    	; 0xd720 <compile_decorated+0x1a4>
    d5da:	e9 81       	ldd	r30, Y+1	; 0x01
    d5dc:	fa 81       	ldd	r31, Y+2	; 0x02
    d5de:	01 90       	ld	r0, Z+
    d5e0:	f0 81       	ld	r31, Z
    d5e2:	e0 2d       	mov	r30, r0
    d5e4:	30 97       	sbiw	r30, 0x00	; 0
    d5e6:	19 f1       	breq	.+70     	; 0xd62e <compile_decorated+0xb2>
    d5e8:	cf 01       	movw	r24, r30
    d5ea:	83 70       	andi	r24, 0x03	; 3
    d5ec:	99 27       	eor	r25, r25
    d5ee:	89 2b       	or	r24, r25
    d5f0:	f1 f4       	brne	.+60     	; 0xd62e <compile_decorated+0xb2>
    d5f2:	3f 01       	movw	r6, r30
    d5f4:	84 81       	ldd	r24, Z+4	; 0x04
    d5f6:	8c 33       	cpi	r24, 0x3C	; 60
    d5f8:	d1 f4       	brne	.+52     	; 0xd62e <compile_decorated+0xb2>
    d5fa:	a1 2c       	mov	r10, r1
    d5fc:	b1 2c       	mov	r11, r1
    d5fe:	81 2c       	mov	r8, r1
    d600:	91 2c       	mov	r9, r1
    d602:	17 c0       	rjmp	.+46     	; 0xd632 <compile_decorated+0xb6>
    d604:	e9 81       	ldd	r30, Y+1	; 0x01
    d606:	fa 81       	ldd	r31, Y+2	; 0x02
    d608:	c5 01       	movw	r24, r10
    d60a:	88 0f       	add	r24, r24
    d60c:	99 1f       	adc	r25, r25
    d60e:	e8 0f       	add	r30, r24
    d610:	f9 1f       	adc	r31, r25
    d612:	01 90       	ld	r0, Z+
    d614:	f0 81       	ld	r31, Z
    d616:	e0 2d       	mov	r30, r0
    d618:	30 97       	sbiw	r30, 0x00	; 0
    d61a:	49 f0       	breq	.+18     	; 0xd62e <compile_decorated+0xb2>
    d61c:	cf 01       	movw	r24, r30
    d61e:	83 70       	andi	r24, 0x03	; 3
    d620:	99 27       	eor	r25, r25
    d622:	89 2b       	or	r24, r25
    d624:	21 f4       	brne	.+8      	; 0xd62e <compile_decorated+0xb2>
    d626:	3f 01       	movw	r6, r30
    d628:	84 81       	ldd	r24, Z+4	; 0x04
    d62a:	8c 33       	cpi	r24, 0x3C	; 60
    d62c:	11 f0       	breq	.+4      	; 0xd632 <compile_decorated+0xb6>
    d62e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    d632:	ae 01       	movw	r20, r28
    d634:	4d 5f       	subi	r20, 0xFD	; 253
    d636:	5f 4f       	sbci	r21, 0xFF	; 255
    d638:	66 e6       	ldi	r22, 0x66	; 102
    d63a:	70 e0       	ldi	r23, 0x00	; 0
    d63c:	c3 01       	movw	r24, r6
    d63e:	08 96       	adiw	r24, 0x08	; 8
    d640:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    d644:	7c 01       	movw	r14, r24
    d646:	eb 81       	ldd	r30, Y+3	; 0x03
    d648:	fc 81       	ldd	r31, Y+4	; 0x04
    d64a:	60 81       	ld	r22, Z
    d64c:	71 81       	ldd	r23, Z+1	; 0x01
    d64e:	cb 01       	movw	r24, r22
    d650:	92 95       	swap	r25
    d652:	82 95       	swap	r24
    d654:	8f 70       	andi	r24, 0x0F	; 15
    d656:	89 27       	eor	r24, r25
    d658:	9f 70       	andi	r25, 0x0F	; 15
    d65a:	89 27       	eor	r24, r25
    d65c:	83 37       	cpi	r24, 0x73	; 115
    d65e:	91 05       	cpc	r25, r1
    d660:	09 f0       	breq	.+2      	; 0xd664 <compile_decorated+0xe8>
    d662:	a7 c0       	rjmp	.+334    	; 0xd7b2 <compile_decorated+0x236>
    d664:	b2 e0       	ldi	r27, 0x02	; 2
    d666:	eb 16       	cp	r14, r27
    d668:	f1 04       	cpc	r15, r1
    d66a:	31 f0       	breq	.+12     	; 0xd678 <compile_decorated+0xfc>
    d66c:	4f ec       	ldi	r20, 0xCF	; 207
    d66e:	59 e0       	ldi	r21, 0x09	; 9
    d670:	c6 01       	movw	r24, r12
    d672:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    d676:	99 c0       	rjmp	.+306    	; 0xd7aa <compile_decorated+0x22e>
    d678:	62 81       	ldd	r22, Z+2	; 0x02
    d67a:	73 81       	ldd	r23, Z+3	; 0x03
    d67c:	cb 01       	movw	r24, r22
    d67e:	92 95       	swap	r25
    d680:	82 95       	swap	r24
    d682:	8f 70       	andi	r24, 0x0F	; 15
    d684:	89 27       	eor	r24, r25
    d686:	9f 70       	andi	r25, 0x0F	; 15
    d688:	89 27       	eor	r24, r25
    d68a:	81 34       	cpi	r24, 0x41	; 65
    d68c:	91 05       	cpc	r25, r1
    d68e:	09 f4       	brne	.+2      	; 0xd692 <compile_decorated+0x116>
    d690:	89 c0       	rjmp	.+274    	; 0xd7a4 <compile_decorated+0x228>
    d692:	4f ec       	ldi	r20, 0xCF	; 207
    d694:	59 e0       	ldi	r21, 0x09	; 9
    d696:	c6 01       	movw	r24, r12
    d698:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    d69c:	86 c0       	rjmp	.+268    	; 0xd7aa <compile_decorated+0x22e>
    d69e:	eb 81       	ldd	r30, Y+3	; 0x03
    d6a0:	fc 81       	ldd	r31, Y+4	; 0x04
    d6a2:	62 81       	ldd	r22, Z+2	; 0x02
    d6a4:	73 81       	ldd	r23, Z+3	; 0x03
    d6a6:	cb 01       	movw	r24, r22
    d6a8:	8f 70       	andi	r24, 0x0F	; 15
    d6aa:	99 27       	eor	r25, r25
    d6ac:	02 97       	sbiw	r24, 0x02	; 2
    d6ae:	89 f4       	brne	.+34     	; 0xd6d2 <compile_decorated+0x156>
    d6b0:	01 e0       	ldi	r16, 0x01	; 1
    d6b2:	10 e0       	ldi	r17, 0x00	; 0
    d6b4:	10 c0       	rjmp	.+32     	; 0xd6d6 <compile_decorated+0x15a>
    d6b6:	eb 81       	ldd	r30, Y+3	; 0x03
    d6b8:	fc 81       	ldd	r31, Y+4	; 0x04
    d6ba:	c8 01       	movw	r24, r16
    d6bc:	88 0f       	add	r24, r24
    d6be:	99 1f       	adc	r25, r25
    d6c0:	e8 0f       	add	r30, r24
    d6c2:	f9 1f       	adc	r31, r25
    d6c4:	60 81       	ld	r22, Z
    d6c6:	71 81       	ldd	r23, Z+1	; 0x01
    d6c8:	cb 01       	movw	r24, r22
    d6ca:	8f 70       	andi	r24, 0x0F	; 15
    d6cc:	99 27       	eor	r25, r25
    d6ce:	02 97       	sbiw	r24, 0x02	; 2
    d6d0:	11 f0       	breq	.+4      	; 0xd6d6 <compile_decorated+0x15a>
    d6d2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    d6d6:	72 95       	swap	r23
    d6d8:	62 95       	swap	r22
    d6da:	6f 70       	andi	r22, 0x0F	; 15
    d6dc:	67 27       	eor	r22, r23
    d6de:	7f 70       	andi	r23, 0x0F	; 15
    d6e0:	67 27       	eor	r22, r23
    d6e2:	40 e0       	ldi	r20, 0x00	; 0
    d6e4:	50 e0       	ldi	r21, 0x00	; 0
    d6e6:	f6 01       	movw	r30, r12
    d6e8:	83 8d       	ldd	r24, Z+27	; 0x1b
    d6ea:	94 8d       	ldd	r25, Z+28	; 0x1c
    d6ec:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <mp_emit_bc_attr>
    d6f0:	0f 5f       	subi	r16, 0xFF	; 255
    d6f2:	1f 4f       	sbci	r17, 0xFF	; 255
    d6f4:	e0 16       	cp	r14, r16
    d6f6:	f1 06       	cpc	r15, r17
    d6f8:	f1 f6       	brne	.-68     	; 0xd6b6 <compile_decorated+0x13a>
    d6fa:	d3 01       	movw	r26, r6
    d6fc:	1a 96       	adiw	r26, 0x0a	; 10
    d6fe:	6d 91       	ld	r22, X+
    d700:	7c 91       	ld	r23, X
    d702:	1b 97       	sbiw	r26, 0x0b	; 11
    d704:	61 15       	cp	r22, r1
    d706:	71 05       	cpc	r23, r1
    d708:	19 f0       	breq	.+6      	; 0xd710 <compile_decorated+0x194>
    d70a:	c6 01       	movw	r24, r12
    d70c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d710:	bf ef       	ldi	r27, 0xFF	; 255
    d712:	ab 1a       	sub	r10, r27
    d714:	bb 0a       	sbc	r11, r27
    d716:	4a 14       	cp	r4, r10
    d718:	5b 04       	cpc	r5, r11
    d71a:	09 f0       	breq	.+2      	; 0xd71e <compile_decorated+0x1a2>
    d71c:	73 cf       	rjmp	.-282    	; 0xd604 <compile_decorated+0x88>
    d71e:	02 c0       	rjmp	.+4      	; 0xd724 <compile_decorated+0x1a8>
    d720:	81 2c       	mov	r8, r1
    d722:	91 2c       	mov	r9, r1
    d724:	ed 81       	ldd	r30, Y+5	; 0x05
    d726:	fe 81       	ldd	r31, Y+6	; 0x06
    d728:	62 85       	ldd	r22, Z+10	; 0x0a
    d72a:	73 85       	ldd	r23, Z+11	; 0x0b
    d72c:	fb 01       	movw	r30, r22
    d72e:	84 81       	ldd	r24, Z+4	; 0x04
    d730:	95 81       	ldd	r25, Z+5	; 0x05
    d732:	a6 81       	ldd	r26, Z+6	; 0x06
    d734:	b7 81       	ldd	r27, Z+7	; 0x07
    d736:	99 27       	eor	r25, r25
    d738:	aa 27       	eor	r26, r26
    d73a:	bb 27       	eor	r27, r27
    d73c:	83 30       	cpi	r24, 0x03	; 3
    d73e:	91 05       	cpc	r25, r1
    d740:	a1 05       	cpc	r26, r1
    d742:	b1 05       	cpc	r27, r1
    d744:	39 f4       	brne	.+14     	; 0xd754 <compile_decorated+0x1d8>
    d746:	42 2d       	mov	r20, r2
    d748:	53 2d       	mov	r21, r3
    d74a:	c6 01       	movw	r24, r12
    d74c:	0e 94 0d 4d 	call	0x9a1a	; 0x9a1a <compile_funcdef_helper>
    d750:	8c 01       	movw	r16, r24
    d752:	0c c0       	rjmp	.+24     	; 0xd76c <compile_decorated+0x1f0>
    d754:	c3 97       	sbiw	r24, 0x33	; 51
    d756:	a1 05       	cpc	r26, r1
    d758:	b1 05       	cpc	r27, r1
    d75a:	11 f0       	breq	.+4      	; 0xd760 <compile_decorated+0x1e4>
    d75c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    d760:	42 2d       	mov	r20, r2
    d762:	53 2d       	mov	r21, r3
    d764:	c6 01       	movw	r24, r12
    d766:	0e 94 04 5b 	call	0xb608	; 0xb608 <compile_classdef_helper>
    d76a:	8c 01       	movw	r16, r24
    d76c:	48 18       	sub	r4, r8
    d76e:	59 08       	sbc	r5, r9
    d770:	a9 f0       	breq	.+42     	; 0xd79c <compile_decorated+0x220>
    d772:	e1 2c       	mov	r14, r1
    d774:	f1 2c       	mov	r15, r1
    d776:	20 e0       	ldi	r18, 0x00	; 0
    d778:	30 e0       	ldi	r19, 0x00	; 0
    d77a:	40 e0       	ldi	r20, 0x00	; 0
    d77c:	50 e0       	ldi	r21, 0x00	; 0
    d77e:	61 e0       	ldi	r22, 0x01	; 1
    d780:	70 e0       	ldi	r23, 0x00	; 0
    d782:	d6 01       	movw	r26, r12
    d784:	5b 96       	adiw	r26, 0x1b	; 27
    d786:	8d 91       	ld	r24, X+
    d788:	9c 91       	ld	r25, X
    d78a:	5c 97       	sbiw	r26, 0x1c	; 28
    d78c:	0e 94 30 19 	call	0x3260	; 0x3260 <mp_emit_bc_call_function>
    d790:	bf ef       	ldi	r27, 0xFF	; 255
    d792:	eb 1a       	sub	r14, r27
    d794:	fb 0a       	sbc	r15, r27
    d796:	4e 14       	cp	r4, r14
    d798:	5f 04       	cpc	r5, r15
    d79a:	69 f7       	brne	.-38     	; 0xd776 <compile_decorated+0x1fa>
    d79c:	b8 01       	movw	r22, r16
    d79e:	c6 01       	movw	r24, r12
    d7a0:	a6 d8       	rcall	.-3764   	; 0xc8ee <compile_store_id>
    d7a2:	10 c0       	rjmp	.+32     	; 0xd7c4 <compile_decorated+0x248>
    d7a4:	22 24       	eor	r2, r2
    d7a6:	23 94       	inc	r2
    d7a8:	31 2c       	mov	r3, r1
    d7aa:	ef ef       	ldi	r30, 0xFF	; 255
    d7ac:	8e 1a       	sub	r8, r30
    d7ae:	9e 0a       	sbc	r9, r30
    d7b0:	af cf       	rjmp	.-162    	; 0xd710 <compile_decorated+0x194>
    d7b2:	c6 01       	movw	r24, r12
    d7b4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d7b8:	f2 e0       	ldi	r31, 0x02	; 2
    d7ba:	ef 16       	cp	r14, r31
    d7bc:	f1 04       	cpc	r15, r1
    d7be:	08 f0       	brcs	.+2      	; 0xd7c2 <compile_decorated+0x246>
    d7c0:	6e cf       	rjmp	.-292    	; 0xd69e <compile_decorated+0x122>
    d7c2:	9b cf       	rjmp	.-202    	; 0xd6fa <compile_decorated+0x17e>
    d7c4:	26 96       	adiw	r28, 0x06	; 6
    d7c6:	0f b6       	in	r0, 0x3f	; 63
    d7c8:	f8 94       	cli
    d7ca:	de bf       	out	0x3e, r29	; 62
    d7cc:	0f be       	out	0x3f, r0	; 63
    d7ce:	cd bf       	out	0x3d, r28	; 61
    d7d0:	df 91       	pop	r29
    d7d2:	cf 91       	pop	r28
    d7d4:	1f 91       	pop	r17
    d7d6:	0f 91       	pop	r16
    d7d8:	ff 90       	pop	r15
    d7da:	ef 90       	pop	r14
    d7dc:	df 90       	pop	r13
    d7de:	cf 90       	pop	r12
    d7e0:	bf 90       	pop	r11
    d7e2:	af 90       	pop	r10
    d7e4:	9f 90       	pop	r9
    d7e6:	8f 90       	pop	r8
    d7e8:	7f 90       	pop	r7
    d7ea:	6f 90       	pop	r6
    d7ec:	5f 90       	pop	r5
    d7ee:	4f 90       	pop	r4
    d7f0:	3f 90       	pop	r3
    d7f2:	2f 90       	pop	r2
    d7f4:	08 95       	ret

0000d7f6 <compile_delete_id>:
    d7f6:	fc 01       	movw	r30, r24
    d7f8:	83 81       	ldd	r24, Z+3	; 0x03
    d7fa:	81 30       	cpi	r24, 0x01	; 1
    d7fc:	21 f4       	brne	.+8      	; 0xd806 <compile_delete_id+0x10>
    d7fe:	81 8d       	ldd	r24, Z+25	; 0x19
    d800:	92 8d       	ldd	r25, Z+26	; 0x1a
    d802:	63 c8       	rjmp	.-3898   	; 0xc8ca <mp_emit_common_get_id_for_modification>
    d804:	08 95       	ret
    d806:	41 8d       	ldd	r20, Z+25	; 0x19
    d808:	52 8d       	ldd	r21, Z+26	; 0x1a
    d80a:	9b 01       	movw	r18, r22
    d80c:	6e e1       	ldi	r22, 0x1E	; 30
    d80e:	74 e2       	ldi	r23, 0x24	; 36
    d810:	83 8d       	ldd	r24, Z+27	; 0x1b
    d812:	94 8d       	ldd	r25, Z+28	; 0x1c
    d814:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <mp_emit_common_id_op>
    d818:	08 95       	ret

0000d81a <compile_try_except>:
    d81a:	2f 92       	push	r2
    d81c:	3f 92       	push	r3
    d81e:	4f 92       	push	r4
    d820:	5f 92       	push	r5
    d822:	6f 92       	push	r6
    d824:	7f 92       	push	r7
    d826:	8f 92       	push	r8
    d828:	9f 92       	push	r9
    d82a:	af 92       	push	r10
    d82c:	bf 92       	push	r11
    d82e:	cf 92       	push	r12
    d830:	df 92       	push	r13
    d832:	ef 92       	push	r14
    d834:	ff 92       	push	r15
    d836:	0f 93       	push	r16
    d838:	1f 93       	push	r17
    d83a:	cf 93       	push	r28
    d83c:	df 93       	push	r29
    d83e:	cd b7       	in	r28, 0x3d	; 61
    d840:	de b7       	in	r29, 0x3e	; 62
    d842:	28 97       	sbiw	r28, 0x08	; 8
    d844:	0f b6       	in	r0, 0x3f	; 63
    d846:	f8 94       	cli
    d848:	de bf       	out	0x3e, r29	; 62
    d84a:	0f be       	out	0x3f, r0	; 63
    d84c:	cd bf       	out	0x3d, r28	; 61
    d84e:	98 87       	std	Y+8, r25	; 0x08
    d850:	8f 83       	std	Y+7, r24	; 0x07
    d852:	7b 01       	movw	r14, r22
    d854:	1a 01       	movw	r2, r20
    d856:	59 01       	movw	r10, r18
    d858:	1e 83       	std	Y+6, r17	; 0x06
    d85a:	0d 83       	std	Y+5, r16	; 0x05
    d85c:	dc 01       	movw	r26, r24
    d85e:	19 96       	adiw	r26, 0x09	; 9
    d860:	0d 91       	ld	r16, X+
    d862:	1c 91       	ld	r17, X
    d864:	1a 97       	sbiw	r26, 0x0a	; 10
    d866:	f8 01       	movw	r30, r16
    d868:	31 96       	adiw	r30, 0x01	; 1
    d86a:	fc 83       	std	Y+4, r31	; 0x04
    d86c:	eb 83       	std	Y+3, r30	; 0x03
    d86e:	c8 01       	movw	r24, r16
    d870:	02 96       	adiw	r24, 0x02	; 2
    d872:	1a 96       	adiw	r26, 0x0a	; 10
    d874:	9c 93       	st	X, r25
    d876:	8e 93       	st	-X, r24
    d878:	19 97       	sbiw	r26, 0x09	; 9
    d87a:	41 e0       	ldi	r20, 0x01	; 1
    d87c:	50 e0       	ldi	r21, 0x00	; 0
    d87e:	b8 01       	movw	r22, r16
    d880:	cd 01       	movw	r24, r26
    d882:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <compile_increase_except_level>
    d886:	b7 01       	movw	r22, r14
    d888:	8f 81       	ldd	r24, Y+7	; 0x07
    d88a:	98 85       	ldd	r25, Y+8	; 0x08
    d88c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d890:	40 e0       	ldi	r20, 0x00	; 0
    d892:	6b 81       	ldd	r22, Y+3	; 0x03
    d894:	7c 81       	ldd	r23, Y+4	; 0x04
    d896:	af 81       	ldd	r26, Y+7	; 0x07
    d898:	b8 85       	ldd	r27, Y+8	; 0x08
    d89a:	5b 96       	adiw	r26, 0x1b	; 27
    d89c:	8d 91       	ld	r24, X+
    d89e:	9c 91       	ld	r25, X
    d8a0:	5c 97       	sbiw	r26, 0x1c	; 28
    d8a2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <mp_emit_bc_pop_except_jump>
    d8a6:	b8 01       	movw	r22, r16
    d8a8:	ef 81       	ldd	r30, Y+7	; 0x07
    d8aa:	f8 85       	ldd	r31, Y+8	; 0x08
    d8ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    d8ae:	94 8d       	ldd	r25, Z+28	; 0x1c
    d8b0:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    d8b4:	af 81       	ldd	r26, Y+7	; 0x07
    d8b6:	b8 85       	ldd	r27, Y+8	; 0x08
    d8b8:	5b 96       	adiw	r26, 0x1b	; 27
    d8ba:	8d 91       	ld	r24, X+
    d8bc:	9c 91       	ld	r25, X
    d8be:	5c 97       	sbiw	r26, 0x1c	; 28
    d8c0:	0e 94 7d 19 	call	0x32fa	; 0x32fa <mp_emit_bc_start_except_handler>
    d8c4:	ef 81       	ldd	r30, Y+7	; 0x07
    d8c6:	f8 85       	ldd	r31, Y+8	; 0x08
    d8c8:	01 84       	ldd	r0, Z+9	; 0x09
    d8ca:	f2 85       	ldd	r31, Z+10	; 0x0a
    d8cc:	e0 2d       	mov	r30, r0
    d8ce:	fa 83       	std	Y+2, r31	; 0x02
    d8d0:	e9 83       	std	Y+1, r30	; 0x01
    d8d2:	cf 01       	movw	r24, r30
    d8d4:	01 96       	adiw	r24, 0x01	; 1
    d8d6:	af 81       	ldd	r26, Y+7	; 0x07
    d8d8:	b8 85       	ldd	r27, Y+8	; 0x08
    d8da:	1a 96       	adiw	r26, 0x0a	; 10
    d8dc:	9c 93       	st	X, r25
    d8de:	8e 93       	st	-X, r24
    d8e0:	19 97       	sbiw	r26, 0x09	; 9
    d8e2:	12 14       	cp	r1, r2
    d8e4:	13 04       	cpc	r1, r3
    d8e6:	0c f0       	brlt	.+2      	; 0xd8ea <compile_try_except+0xd0>
    d8e8:	ea c0       	rjmp	.+468    	; 0xdabe <compile_try_except+0x2a4>
    d8ea:	d5 01       	movw	r26, r10
    d8ec:	ed 91       	ld	r30, X+
    d8ee:	fc 91       	ld	r31, X
    d8f0:	30 97       	sbiw	r30, 0x00	; 0
    d8f2:	f1 f0       	breq	.+60     	; 0xd930 <compile_try_except+0x116>
    d8f4:	cf 01       	movw	r24, r30
    d8f6:	83 70       	andi	r24, 0x03	; 3
    d8f8:	99 27       	eor	r25, r25
    d8fa:	89 2b       	or	r24, r25
    d8fc:	c9 f4       	brne	.+50     	; 0xd930 <compile_try_except+0x116>
    d8fe:	6f 01       	movw	r12, r30
    d900:	84 81       	ldd	r24, Z+4	; 0x04
    d902:	8e 36       	cpi	r24, 0x6E	; 110
    d904:	b9 f0       	breq	.+46     	; 0xd934 <compile_try_except+0x11a>
    d906:	14 c0       	rjmp	.+40     	; 0xd930 <compile_try_except+0x116>
    d908:	b2 e0       	ldi	r27, 0x02	; 2
    d90a:	ab 0e       	add	r10, r27
    d90c:	b1 1c       	adc	r11, r1
    d90e:	d5 01       	movw	r26, r10
    d910:	ed 91       	ld	r30, X+
    d912:	fc 91       	ld	r31, X
    d914:	30 97       	sbiw	r30, 0x00	; 0
    d916:	61 f0       	breq	.+24     	; 0xd930 <compile_try_except+0x116>
    d918:	cf 01       	movw	r24, r30
    d91a:	83 70       	andi	r24, 0x03	; 3
    d91c:	99 27       	eor	r25, r25
    d91e:	89 2b       	or	r24, r25
    d920:	39 f4       	brne	.+14     	; 0xd930 <compile_try_except+0x116>
    d922:	6f 01       	movw	r12, r30
    d924:	bf ef       	ldi	r27, 0xFF	; 255
    d926:	eb 1a       	sub	r14, r27
    d928:	fb 0a       	sbc	r15, r27
    d92a:	84 81       	ldd	r24, Z+4	; 0x04
    d92c:	8e 36       	cpi	r24, 0x6E	; 110
    d92e:	31 f0       	breq	.+12     	; 0xd93c <compile_try_except+0x122>
    d930:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    d934:	21 01       	movw	r4, r2
    d936:	ee 24       	eor	r14, r14
    d938:	e3 94       	inc	r14
    d93a:	f1 2c       	mov	r15, r1
    d93c:	ef 81       	ldd	r30, Y+7	; 0x07
    d93e:	f8 85       	ldd	r31, Y+8	; 0x08
    d940:	01 85       	ldd	r16, Z+9	; 0x09
    d942:	12 85       	ldd	r17, Z+10	; 0x0a
    d944:	c8 01       	movw	r24, r16
    d946:	01 96       	adiw	r24, 0x01	; 1
    d948:	92 87       	std	Z+10, r25	; 0x0a
    d94a:	81 87       	std	Z+9, r24	; 0x09
    d94c:	d6 01       	movw	r26, r12
    d94e:	18 96       	adiw	r26, 0x08	; 8
    d950:	6d 90       	ld	r6, X+
    d952:	7c 90       	ld	r7, X
    d954:	19 97       	sbiw	r26, 0x09	; 9
    d956:	61 14       	cp	r6, r1
    d958:	71 04       	cpc	r7, r1
    d95a:	91 f4       	brne	.+36     	; 0xd980 <compile_try_except+0x166>
    d95c:	2e 14       	cp	r2, r14
    d95e:	3f 04       	cpc	r3, r15
    d960:	09 f4       	brne	.+2      	; 0xd964 <compile_try_except+0x14a>
    d962:	fe c0       	rjmp	.+508    	; 0xdb60 <compile_try_except+0x346>
    d964:	f5 01       	movw	r30, r10
    d966:	60 81       	ld	r22, Z
    d968:	71 81       	ldd	r23, Z+1	; 0x01
    d96a:	4d ee       	ldi	r20, 0xED	; 237
    d96c:	59 e0       	ldi	r21, 0x09	; 9
    d96e:	8f 81       	ldd	r24, Y+7	; 0x07
    d970:	98 85       	ldd	r25, Y+8	; 0x08
    d972:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    d976:	8f 81       	ldd	r24, Y+7	; 0x07
    d978:	98 85       	ldd	r25, Y+8	; 0x08
    d97a:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <compile_decrease_except_level>
    d97e:	00 c1       	rjmp	.+512    	; 0xdb80 <compile_try_except+0x366>
    d980:	c3 01       	movw	r24, r6
    d982:	83 70       	andi	r24, 0x03	; 3
    d984:	99 27       	eor	r25, r25
    d986:	89 2b       	or	r24, r25
    d988:	09 f0       	breq	.+2      	; 0xd98c <compile_try_except+0x172>
    d98a:	be c0       	rjmp	.+380    	; 0xdb08 <compile_try_except+0x2ee>
    d98c:	d3 01       	movw	r26, r6
    d98e:	14 96       	adiw	r26, 0x04	; 4
    d990:	8c 91       	ld	r24, X
    d992:	14 97       	sbiw	r26, 0x04	; 4
    d994:	8f 36       	cpi	r24, 0x6F	; 111
    d996:	09 f0       	breq	.+2      	; 0xd99a <compile_try_except+0x180>
    d998:	b7 c0       	rjmp	.+366    	; 0xdb08 <compile_try_except+0x2ee>
    d99a:	18 96       	adiw	r26, 0x08	; 8
    d99c:	8d 90       	ld	r8, X+
    d99e:	9c 90       	ld	r9, X
    d9a0:	19 97       	sbiw	r26, 0x09	; 9
    d9a2:	1a 96       	adiw	r26, 0x0a	; 10
    d9a4:	6d 90       	ld	r6, X+
    d9a6:	7c 90       	ld	r7, X
    d9a8:	1b 97       	sbiw	r26, 0x0b	; 11
    d9aa:	76 94       	lsr	r7
    d9ac:	67 94       	ror	r6
    d9ae:	76 94       	lsr	r7
    d9b0:	67 94       	ror	r6
    d9b2:	76 94       	lsr	r7
    d9b4:	67 94       	ror	r6
    d9b6:	76 94       	lsr	r7
    d9b8:	67 94       	ror	r6
    d9ba:	ef 81       	ldd	r30, Y+7	; 0x07
    d9bc:	f8 85       	ldd	r31, Y+8	; 0x08
    d9be:	83 8d       	ldd	r24, Z+27	; 0x1b
    d9c0:	94 8d       	ldd	r25, Z+28	; 0x1c
    d9c2:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    d9c6:	b4 01       	movw	r22, r8
    d9c8:	8f 81       	ldd	r24, Y+7	; 0x07
    d9ca:	98 85       	ldd	r25, Y+8	; 0x08
    d9cc:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    d9d0:	68 e0       	ldi	r22, 0x08	; 8
    d9d2:	af 81       	ldd	r26, Y+7	; 0x07
    d9d4:	b8 85       	ldd	r27, Y+8	; 0x08
    d9d6:	5b 96       	adiw	r26, 0x1b	; 27
    d9d8:	8d 91       	ld	r24, X+
    d9da:	9c 91       	ld	r25, X
    d9dc:	5c 97       	sbiw	r26, 0x1c	; 28
    d9de:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    d9e2:	a8 01       	movw	r20, r16
    d9e4:	60 e0       	ldi	r22, 0x00	; 0
    d9e6:	ef 81       	ldd	r30, Y+7	; 0x07
    d9e8:	f8 85       	ldd	r31, Y+8	; 0x08
    d9ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    d9ec:	94 8d       	ldd	r25, Z+28	; 0x1c
    d9ee:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <mp_emit_bc_pop_jump_if>
    d9f2:	61 14       	cp	r6, r1
    d9f4:	71 04       	cpc	r7, r1
    d9f6:	09 f4       	brne	.+2      	; 0xd9fa <compile_try_except+0x1e0>
    d9f8:	b3 c0       	rjmp	.+358    	; 0xdb60 <compile_try_except+0x346>
    d9fa:	b3 01       	movw	r22, r6
    d9fc:	8f 81       	ldd	r24, Y+7	; 0x07
    d9fe:	98 85       	ldd	r25, Y+8	; 0x08
    da00:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
    da04:	af 81       	ldd	r26, Y+7	; 0x07
    da06:	b8 85       	ldd	r27, Y+8	; 0x08
    da08:	19 96       	adiw	r26, 0x09	; 9
    da0a:	8d 90       	ld	r8, X+
    da0c:	9c 90       	ld	r9, X
    da0e:	1a 97       	sbiw	r26, 0x0a	; 10
    da10:	c4 01       	movw	r24, r8
    da12:	01 96       	adiw	r24, 0x01	; 1
    da14:	1a 96       	adiw	r26, 0x0a	; 10
    da16:	9c 93       	st	X, r25
    da18:	8e 93       	st	-X, r24
    da1a:	19 97       	sbiw	r26, 0x09	; 9
    da1c:	42 e0       	ldi	r20, 0x02	; 2
    da1e:	50 e0       	ldi	r21, 0x00	; 0
    da20:	b4 01       	movw	r22, r8
    da22:	cd 01       	movw	r24, r26
    da24:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <compile_increase_except_level>
    da28:	f6 01       	movw	r30, r12
    da2a:	62 85       	ldd	r22, Z+10	; 0x0a
    da2c:	73 85       	ldd	r23, Z+11	; 0x0b
    da2e:	8f 81       	ldd	r24, Y+7	; 0x07
    da30:	98 85       	ldd	r25, Y+8	; 0x08
    da32:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    da36:	6e e0       	ldi	r22, 0x0E	; 14
    da38:	af 81       	ldd	r26, Y+7	; 0x07
    da3a:	b8 85       	ldd	r27, Y+8	; 0x08
    da3c:	5b 96       	adiw	r26, 0x1b	; 27
    da3e:	8d 91       	ld	r24, X+
    da40:	9c 91       	ld	r25, X
    da42:	5c 97       	sbiw	r26, 0x1c	; 28
    da44:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    da48:	b4 01       	movw	r22, r8
    da4a:	ef 81       	ldd	r30, Y+7	; 0x07
    da4c:	f8 85       	ldd	r31, Y+8	; 0x08
    da4e:	83 8d       	ldd	r24, Z+27	; 0x1b
    da50:	94 8d       	ldd	r25, Z+28	; 0x1c
    da52:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    da56:	6e e0       	ldi	r22, 0x0E	; 14
    da58:	af 81       	ldd	r26, Y+7	; 0x07
    da5a:	b8 85       	ldd	r27, Y+8	; 0x08
    da5c:	5b 96       	adiw	r26, 0x1b	; 27
    da5e:	8d 91       	ld	r24, X+
    da60:	9c 91       	ld	r25, X
    da62:	5c 97       	sbiw	r26, 0x1c	; 28
    da64:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    da68:	b3 01       	movw	r22, r6
    da6a:	8f 81       	ldd	r24, Y+7	; 0x07
    da6c:	98 85       	ldd	r25, Y+8	; 0x08
    da6e:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
    da72:	b3 01       	movw	r22, r6
    da74:	8f 81       	ldd	r24, Y+7	; 0x07
    da76:	98 85       	ldd	r25, Y+8	; 0x08
    da78:	be de       	rcall	.-644    	; 0xd7f6 <compile_delete_id>
    da7a:	8f 81       	ldd	r24, Y+7	; 0x07
    da7c:	98 85       	ldd	r25, Y+8	; 0x08
    da7e:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <compile_decrease_except_level>
    da82:	41 e0       	ldi	r20, 0x01	; 1
    da84:	69 81       	ldd	r22, Y+1	; 0x01
    da86:	7a 81       	ldd	r23, Y+2	; 0x02
    da88:	ef 81       	ldd	r30, Y+7	; 0x07
    da8a:	f8 85       	ldd	r31, Y+8	; 0x08
    da8c:	83 8d       	ldd	r24, Z+27	; 0x1b
    da8e:	94 8d       	ldd	r25, Z+28	; 0x1c
    da90:	0e 94 6f 17 	call	0x2ede	; 0x2ede <mp_emit_bc_pop_except_jump>
    da94:	b8 01       	movw	r22, r16
    da96:	af 81       	ldd	r26, Y+7	; 0x07
    da98:	b8 85       	ldd	r27, Y+8	; 0x08
    da9a:	5b 96       	adiw	r26, 0x1b	; 27
    da9c:	8d 91       	ld	r24, X+
    da9e:	9c 91       	ld	r25, X
    daa0:	5c 97       	sbiw	r26, 0x1c	; 28
    daa2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    daa6:	61 e0       	ldi	r22, 0x01	; 1
    daa8:	70 e0       	ldi	r23, 0x00	; 0
    daaa:	ef 81       	ldd	r30, Y+7	; 0x07
    daac:	f8 85       	ldd	r31, Y+8	; 0x08
    daae:	83 8d       	ldd	r24, Z+27	; 0x1b
    dab0:	94 8d       	ldd	r25, Z+28	; 0x1c
    dab2:	0e 94 88 13 	call	0x2710	; 0x2710 <mp_emit_bc_adjust_stack_size>
    dab6:	4e 14       	cp	r4, r14
    dab8:	5f 04       	cpc	r5, r15
    daba:	09 f0       	breq	.+2      	; 0xdabe <compile_try_except+0x2a4>
    dabc:	25 cf       	rjmp	.-438    	; 0xd908 <compile_try_except+0xee>
    dabe:	8f 81       	ldd	r24, Y+7	; 0x07
    dac0:	98 85       	ldd	r25, Y+8	; 0x08
    dac2:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <compile_decrease_except_level>
    dac6:	af 81       	ldd	r26, Y+7	; 0x07
    dac8:	b8 85       	ldd	r27, Y+8	; 0x08
    daca:	5b 96       	adiw	r26, 0x1b	; 27
    dacc:	8d 91       	ld	r24, X+
    dace:	9c 91       	ld	r25, X
    dad0:	5c 97       	sbiw	r26, 0x1c	; 28
    dad2:	0e 94 81 19 	call	0x3302	; 0x3302 <mp_emit_bc_end_except_handler>
    dad6:	6b 81       	ldd	r22, Y+3	; 0x03
    dad8:	7c 81       	ldd	r23, Y+4	; 0x04
    dada:	ef 81       	ldd	r30, Y+7	; 0x07
    dadc:	f8 85       	ldd	r31, Y+8	; 0x08
    dade:	83 8d       	ldd	r24, Z+27	; 0x1b
    dae0:	94 8d       	ldd	r25, Z+28	; 0x1c
    dae2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    dae6:	6d 81       	ldd	r22, Y+5	; 0x05
    dae8:	7e 81       	ldd	r23, Y+6	; 0x06
    daea:	8f 81       	ldd	r24, Y+7	; 0x07
    daec:	98 85       	ldd	r25, Y+8	; 0x08
    daee:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    daf2:	69 81       	ldd	r22, Y+1	; 0x01
    daf4:	7a 81       	ldd	r23, Y+2	; 0x02
    daf6:	af 81       	ldd	r26, Y+7	; 0x07
    daf8:	b8 85       	ldd	r27, Y+8	; 0x08
    dafa:	5b 96       	adiw	r26, 0x1b	; 27
    dafc:	8d 91       	ld	r24, X+
    dafe:	9c 91       	ld	r25, X
    db00:	5c 97       	sbiw	r26, 0x1c	; 28
    db02:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    db06:	3c c0       	rjmp	.+120    	; 0xdb80 <compile_try_except+0x366>
    db08:	ef 81       	ldd	r30, Y+7	; 0x07
    db0a:	f8 85       	ldd	r31, Y+8	; 0x08
    db0c:	83 8d       	ldd	r24, Z+27	; 0x1b
    db0e:	94 8d       	ldd	r25, Z+28	; 0x1c
    db10:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    db14:	b3 01       	movw	r22, r6
    db16:	8f 81       	ldd	r24, Y+7	; 0x07
    db18:	98 85       	ldd	r25, Y+8	; 0x08
    db1a:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    db1e:	68 e0       	ldi	r22, 0x08	; 8
    db20:	af 81       	ldd	r26, Y+7	; 0x07
    db22:	b8 85       	ldd	r27, Y+8	; 0x08
    db24:	5b 96       	adiw	r26, 0x1b	; 27
    db26:	8d 91       	ld	r24, X+
    db28:	9c 91       	ld	r25, X
    db2a:	5c 97       	sbiw	r26, 0x1c	; 28
    db2c:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    db30:	a8 01       	movw	r20, r16
    db32:	60 e0       	ldi	r22, 0x00	; 0
    db34:	ef 81       	ldd	r30, Y+7	; 0x07
    db36:	f8 85       	ldd	r31, Y+8	; 0x08
    db38:	83 8d       	ldd	r24, Z+27	; 0x1b
    db3a:	94 8d       	ldd	r25, Z+28	; 0x1c
    db3c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <mp_emit_bc_pop_jump_if>
    db40:	af 81       	ldd	r26, Y+7	; 0x07
    db42:	b8 85       	ldd	r27, Y+8	; 0x08
    db44:	5b 96       	adiw	r26, 0x1b	; 27
    db46:	8d 91       	ld	r24, X+
    db48:	9c 91       	ld	r25, X
    db4a:	5c 97       	sbiw	r26, 0x1c	; 28
    db4c:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    db50:	f6 01       	movw	r30, r12
    db52:	62 85       	ldd	r22, Z+10	; 0x0a
    db54:	73 85       	ldd	r23, Z+11	; 0x0b
    db56:	8f 81       	ldd	r24, Y+7	; 0x07
    db58:	98 85       	ldd	r25, Y+8	; 0x08
    db5a:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    db5e:	91 cf       	rjmp	.-222    	; 0xda82 <compile_try_except+0x268>
    db60:	af 81       	ldd	r26, Y+7	; 0x07
    db62:	b8 85       	ldd	r27, Y+8	; 0x08
    db64:	5b 96       	adiw	r26, 0x1b	; 27
    db66:	8d 91       	ld	r24, X+
    db68:	9c 91       	ld	r25, X
    db6a:	5c 97       	sbiw	r26, 0x1c	; 28
    db6c:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    db70:	f6 01       	movw	r30, r12
    db72:	62 85       	ldd	r22, Z+10	; 0x0a
    db74:	73 85       	ldd	r23, Z+11	; 0x0b
    db76:	8f 81       	ldd	r24, Y+7	; 0x07
    db78:	98 85       	ldd	r25, Y+8	; 0x08
    db7a:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    db7e:	81 cf       	rjmp	.-254    	; 0xda82 <compile_try_except+0x268>
    db80:	28 96       	adiw	r28, 0x08	; 8
    db82:	0f b6       	in	r0, 0x3f	; 63
    db84:	f8 94       	cli
    db86:	de bf       	out	0x3e, r29	; 62
    db88:	0f be       	out	0x3f, r0	; 63
    db8a:	cd bf       	out	0x3d, r28	; 61
    db8c:	df 91       	pop	r29
    db8e:	cf 91       	pop	r28
    db90:	1f 91       	pop	r17
    db92:	0f 91       	pop	r16
    db94:	ff 90       	pop	r15
    db96:	ef 90       	pop	r14
    db98:	df 90       	pop	r13
    db9a:	cf 90       	pop	r12
    db9c:	bf 90       	pop	r11
    db9e:	af 90       	pop	r10
    dba0:	9f 90       	pop	r9
    dba2:	8f 90       	pop	r8
    dba4:	7f 90       	pop	r7
    dba6:	6f 90       	pop	r6
    dba8:	5f 90       	pop	r5
    dbaa:	4f 90       	pop	r4
    dbac:	3f 90       	pop	r3
    dbae:	2f 90       	pop	r2
    dbb0:	08 95       	ret

0000dbb2 <compile_try_finally>:
    dbb2:	6f 92       	push	r6
    dbb4:	7f 92       	push	r7
    dbb6:	8f 92       	push	r8
    dbb8:	9f 92       	push	r9
    dbba:	af 92       	push	r10
    dbbc:	bf 92       	push	r11
    dbbe:	cf 92       	push	r12
    dbc0:	df 92       	push	r13
    dbc2:	ef 92       	push	r14
    dbc4:	ff 92       	push	r15
    dbc6:	0f 93       	push	r16
    dbc8:	1f 93       	push	r17
    dbca:	cf 93       	push	r28
    dbcc:	df 93       	push	r29
    dbce:	ec 01       	movw	r28, r24
    dbd0:	5b 01       	movw	r10, r22
    dbd2:	6a 01       	movw	r12, r20
    dbd4:	39 01       	movw	r6, r18
    dbd6:	47 01       	movw	r8, r14
    dbd8:	e9 84       	ldd	r14, Y+9	; 0x09
    dbda:	fa 84       	ldd	r15, Y+10	; 0x0a
    dbdc:	c7 01       	movw	r24, r14
    dbde:	01 96       	adiw	r24, 0x01	; 1
    dbe0:	9a 87       	std	Y+10, r25	; 0x0a
    dbe2:	89 87       	std	Y+9, r24	; 0x09
    dbe4:	42 e0       	ldi	r20, 0x02	; 2
    dbe6:	50 e0       	ldi	r21, 0x00	; 0
    dbe8:	b7 01       	movw	r22, r14
    dbea:	ce 01       	movw	r24, r28
    dbec:	0e 94 15 17 	call	0x2e2a	; 0x2e2a <compile_increase_except_level>
    dbf0:	c1 14       	cp	r12, r1
    dbf2:	d1 04       	cpc	r13, r1
    dbf4:	a9 f4       	brne	.+42     	; 0xdc20 <compile_try_finally+0x6e>
    dbf6:	01 2b       	or	r16, r17
    dbf8:	11 f0       	breq	.+4      	; 0xdbfe <compile_try_finally+0x4c>
    dbfa:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    dbfe:	63 e0       	ldi	r22, 0x03	; 3
    dc00:	70 e0       	ldi	r23, 0x00	; 0
    dc02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dc04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    dc06:	0e 94 88 13 	call	0x2710	; 0x2710 <mp_emit_bc_adjust_stack_size>
    dc0a:	b5 01       	movw	r22, r10
    dc0c:	ce 01       	movw	r24, r28
    dc0e:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    dc12:	6d ef       	ldi	r22, 0xFD	; 253
    dc14:	7f ef       	ldi	r23, 0xFF	; 255
    dc16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dc18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    dc1a:	0e 94 88 13 	call	0x2710	; 0x2710 <mp_emit_bc_adjust_stack_size>
    dc1e:	05 c0       	rjmp	.+10     	; 0xdc2a <compile_try_finally+0x78>
    dc20:	93 01       	movw	r18, r6
    dc22:	a6 01       	movw	r20, r12
    dc24:	b5 01       	movw	r22, r10
    dc26:	ce 01       	movw	r24, r28
    dc28:	f8 dd       	rcall	.-1040   	; 0xd81a <compile_try_except>
    dc2a:	6e e0       	ldi	r22, 0x0E	; 14
    dc2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dc2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    dc30:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    dc34:	b7 01       	movw	r22, r14
    dc36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dc38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    dc3a:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <mp_emit_bc_label_assign>
    dc3e:	b4 01       	movw	r22, r8
    dc40:	ce 01       	movw	r24, r28
    dc42:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    dc46:	ce 01       	movw	r24, r28
    dc48:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <compile_decrease_except_level>
    dc4c:	df 91       	pop	r29
    dc4e:	cf 91       	pop	r28
    dc50:	1f 91       	pop	r17
    dc52:	0f 91       	pop	r16
    dc54:	ff 90       	pop	r15
    dc56:	ef 90       	pop	r14
    dc58:	df 90       	pop	r13
    dc5a:	cf 90       	pop	r12
    dc5c:	bf 90       	pop	r11
    dc5e:	af 90       	pop	r10
    dc60:	9f 90       	pop	r9
    dc62:	8f 90       	pop	r8
    dc64:	7f 90       	pop	r7
    dc66:	6f 90       	pop	r6
    dc68:	08 95       	ret

0000dc6a <compile_try_stmt>:
    dc6a:	af 92       	push	r10
    dc6c:	bf 92       	push	r11
    dc6e:	cf 92       	push	r12
    dc70:	df 92       	push	r13
    dc72:	ef 92       	push	r14
    dc74:	ff 92       	push	r15
    dc76:	0f 93       	push	r16
    dc78:	1f 93       	push	r17
    dc7a:	cf 93       	push	r28
    dc7c:	df 93       	push	r29
    dc7e:	00 d0       	rcall	.+0      	; 0xdc80 <compile_try_stmt+0x16>
    dc80:	cd b7       	in	r28, 0x3d	; 61
    dc82:	de b7       	in	r29, 0x3e	; 62
    dc84:	6c 01       	movw	r12, r24
    dc86:	8b 01       	movw	r16, r22
    dc88:	db 01       	movw	r26, r22
    dc8a:	1a 96       	adiw	r26, 0x0a	; 10
    dc8c:	ad 90       	ld	r10, X+
    dc8e:	bc 90       	ld	r11, X
    dc90:	1b 97       	sbiw	r26, 0x0b	; 11
    dc92:	a1 14       	cp	r10, r1
    dc94:	b1 04       	cpc	r11, r1
    dc96:	29 f0       	breq	.+10     	; 0xdca2 <compile_try_stmt+0x38>
    dc98:	c5 01       	movw	r24, r10
    dc9a:	83 70       	andi	r24, 0x03	; 3
    dc9c:	99 27       	eor	r25, r25
    dc9e:	89 2b       	or	r24, r25
    dca0:	11 f0       	breq	.+4      	; 0xdca6 <compile_try_stmt+0x3c>
    dca2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    dca6:	f5 01       	movw	r30, r10
    dca8:	84 81       	ldd	r24, Z+4	; 0x04
    dcaa:	95 81       	ldd	r25, Z+5	; 0x05
    dcac:	a6 81       	ldd	r26, Z+6	; 0x06
    dcae:	b7 81       	ldd	r27, Z+7	; 0x07
    dcb0:	99 27       	eor	r25, r25
    dcb2:	aa 27       	eor	r26, r26
    dcb4:	bb 27       	eor	r27, r27
    dcb6:	81 37       	cpi	r24, 0x71	; 113
    dcb8:	91 05       	cpc	r25, r1
    dcba:	a1 05       	cpc	r26, r1
    dcbc:	b1 05       	cpc	r27, r1
    dcbe:	81 f4       	brne	.+32     	; 0xdce0 <compile_try_stmt+0x76>
    dcc0:	e0 84       	ldd	r14, Z+8	; 0x08
    dcc2:	f1 84       	ldd	r15, Z+9	; 0x09
    dcc4:	db 01       	movw	r26, r22
    dcc6:	18 96       	adiw	r26, 0x08	; 8
    dcc8:	6d 91       	ld	r22, X+
    dcca:	7c 91       	ld	r23, X
    dccc:	19 97       	sbiw	r26, 0x09	; 9
    dcce:	00 e0       	ldi	r16, 0x00	; 0
    dcd0:	10 e0       	ldi	r17, 0x00	; 0
    dcd2:	20 e0       	ldi	r18, 0x00	; 0
    dcd4:	30 e0       	ldi	r19, 0x00	; 0
    dcd6:	40 e0       	ldi	r20, 0x00	; 0
    dcd8:	50 e0       	ldi	r21, 0x00	; 0
    dcda:	c6 01       	movw	r24, r12
    dcdc:	6a df       	rcall	.-300    	; 0xdbb2 <compile_try_finally>
    dcde:	49 c0       	rjmp	.+146    	; 0xdd72 <compile_try_stmt+0x108>
    dce0:	8d 36       	cpi	r24, 0x6D	; 109
    dce2:	91 05       	cpc	r25, r1
    dce4:	a1 05       	cpc	r26, r1
    dce6:	b1 05       	cpc	r27, r1
    dce8:	79 f5       	brne	.+94     	; 0xdd48 <compile_try_stmt+0xde>
    dcea:	ae 01       	movw	r20, r28
    dcec:	4f 5f       	subi	r20, 0xFF	; 255
    dcee:	5f 4f       	sbci	r21, 0xFF	; 255
    dcf0:	60 e7       	ldi	r22, 0x70	; 112
    dcf2:	70 e0       	ldi	r23, 0x00	; 0
    dcf4:	c5 01       	movw	r24, r10
    dcf6:	08 96       	adiw	r24, 0x08	; 8
    dcf8:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    dcfc:	d5 01       	movw	r26, r10
    dcfe:	1c 96       	adiw	r26, 0x0c	; 12
    dd00:	ed 91       	ld	r30, X+
    dd02:	fc 91       	ld	r31, X
    dd04:	1d 97       	sbiw	r26, 0x0d	; 13
    dd06:	30 97       	sbiw	r30, 0x00	; 0
    dd08:	71 f4       	brne	.+28     	; 0xdd26 <compile_try_stmt+0xbc>
    dd0a:	1a 96       	adiw	r26, 0x0a	; 10
    dd0c:	4d 91       	ld	r20, X+
    dd0e:	5c 91       	ld	r21, X
    dd10:	1b 97       	sbiw	r26, 0x0b	; 11
    dd12:	29 81       	ldd	r18, Y+1	; 0x01
    dd14:	3a 81       	ldd	r19, Y+2	; 0x02
    dd16:	f8 01       	movw	r30, r16
    dd18:	60 85       	ldd	r22, Z+8	; 0x08
    dd1a:	71 85       	ldd	r23, Z+9	; 0x09
    dd1c:	8a 01       	movw	r16, r20
    dd1e:	ac 01       	movw	r20, r24
    dd20:	c6 01       	movw	r24, r12
    dd22:	7b dd       	rcall	.-1290   	; 0xd81a <compile_try_except>
    dd24:	26 c0       	rjmp	.+76     	; 0xdd72 <compile_try_stmt+0x108>
    dd26:	e0 84       	ldd	r14, Z+8	; 0x08
    dd28:	f1 84       	ldd	r15, Z+9	; 0x09
    dd2a:	d5 01       	movw	r26, r10
    dd2c:	1a 96       	adiw	r26, 0x0a	; 10
    dd2e:	4d 91       	ld	r20, X+
    dd30:	5c 91       	ld	r21, X
    dd32:	1b 97       	sbiw	r26, 0x0b	; 11
    dd34:	29 81       	ldd	r18, Y+1	; 0x01
    dd36:	3a 81       	ldd	r19, Y+2	; 0x02
    dd38:	f8 01       	movw	r30, r16
    dd3a:	60 85       	ldd	r22, Z+8	; 0x08
    dd3c:	71 85       	ldd	r23, Z+9	; 0x09
    dd3e:	8a 01       	movw	r16, r20
    dd40:	ac 01       	movw	r20, r24
    dd42:	c6 01       	movw	r24, r12
    dd44:	36 df       	rcall	.-404    	; 0xdbb2 <compile_try_finally>
    dd46:	15 c0       	rjmp	.+42     	; 0xdd72 <compile_try_stmt+0x108>
    dd48:	ae 01       	movw	r20, r28
    dd4a:	4f 5f       	subi	r20, 0xFF	; 255
    dd4c:	5f 4f       	sbci	r21, 0xFF	; 255
    dd4e:	60 e7       	ldi	r22, 0x70	; 112
    dd50:	70 e0       	ldi	r23, 0x00	; 0
    dd52:	c8 01       	movw	r24, r16
    dd54:	0a 96       	adiw	r24, 0x0a	; 10
    dd56:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    dd5a:	29 81       	ldd	r18, Y+1	; 0x01
    dd5c:	3a 81       	ldd	r19, Y+2	; 0x02
    dd5e:	d8 01       	movw	r26, r16
    dd60:	18 96       	adiw	r26, 0x08	; 8
    dd62:	6d 91       	ld	r22, X+
    dd64:	7c 91       	ld	r23, X
    dd66:	19 97       	sbiw	r26, 0x09	; 9
    dd68:	00 e0       	ldi	r16, 0x00	; 0
    dd6a:	10 e0       	ldi	r17, 0x00	; 0
    dd6c:	ac 01       	movw	r20, r24
    dd6e:	c6 01       	movw	r24, r12
    dd70:	54 dd       	rcall	.-1368   	; 0xd81a <compile_try_except>
    dd72:	0f 90       	pop	r0
    dd74:	0f 90       	pop	r0
    dd76:	df 91       	pop	r29
    dd78:	cf 91       	pop	r28
    dd7a:	1f 91       	pop	r17
    dd7c:	0f 91       	pop	r16
    dd7e:	ff 90       	pop	r15
    dd80:	ef 90       	pop	r14
    dd82:	df 90       	pop	r13
    dd84:	cf 90       	pop	r12
    dd86:	bf 90       	pop	r11
    dd88:	af 90       	pop	r10
    dd8a:	08 95       	ret

0000dd8c <c_del_stmt>:
    dd8c:	8f 92       	push	r8
    dd8e:	9f 92       	push	r9
    dd90:	af 92       	push	r10
    dd92:	bf 92       	push	r11
    dd94:	cf 92       	push	r12
    dd96:	df 92       	push	r13
    dd98:	ef 92       	push	r14
    dd9a:	ff 92       	push	r15
    dd9c:	0f 93       	push	r16
    dd9e:	1f 93       	push	r17
    dda0:	cf 93       	push	r28
    dda2:	df 93       	push	r29
    dda4:	8c 01       	movw	r16, r24
    dda6:	eb 01       	movw	r28, r22
    dda8:	cb 01       	movw	r24, r22
    ddaa:	8f 70       	andi	r24, 0x0F	; 15
    ddac:	99 27       	eor	r25, r25
    ddae:	02 97       	sbiw	r24, 0x02	; 2
    ddb0:	49 f4       	brne	.+18     	; 0xddc4 <c_del_stmt+0x38>
    ddb2:	72 95       	swap	r23
    ddb4:	62 95       	swap	r22
    ddb6:	6f 70       	andi	r22, 0x0F	; 15
    ddb8:	67 27       	eor	r22, r23
    ddba:	7f 70       	andi	r23, 0x0F	; 15
    ddbc:	67 27       	eor	r22, r23
    ddbe:	c8 01       	movw	r24, r16
    ddc0:	1a dd       	rcall	.-1484   	; 0xd7f6 <compile_delete_id>
    ddc2:	ed c0       	rjmp	.+474    	; 0xdf9e <c_del_stmt+0x212>
    ddc4:	20 97       	sbiw	r28, 0x00	; 0
    ddc6:	09 f4       	brne	.+2      	; 0xddca <c_del_stmt+0x3e>
    ddc8:	df c0       	rjmp	.+446    	; 0xdf88 <c_del_stmt+0x1fc>
    ddca:	cb 01       	movw	r24, r22
    ddcc:	83 70       	andi	r24, 0x03	; 3
    ddce:	99 27       	eor	r25, r25
    ddd0:	89 2b       	or	r24, r25
    ddd2:	09 f0       	breq	.+2      	; 0xddd6 <c_del_stmt+0x4a>
    ddd4:	d9 c0       	rjmp	.+434    	; 0xdf88 <c_del_stmt+0x1fc>
    ddd6:	8c 81       	ldd	r24, Y+4	; 0x04
    ddd8:	89 32       	cpi	r24, 0x29	; 41
    ddda:	09 f0       	breq	.+2      	; 0xddde <c_del_stmt+0x52>
    dddc:	dc c0       	rjmp	.+440    	; 0xdf96 <c_del_stmt+0x20a>
    ddde:	68 85       	ldd	r22, Y+8	; 0x08
    dde0:	79 85       	ldd	r23, Y+9	; 0x09
    dde2:	c8 01       	movw	r24, r16
    dde4:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    dde8:	ea 84       	ldd	r14, Y+10	; 0x0a
    ddea:	fb 84       	ldd	r15, Y+11	; 0x0b
    ddec:	e1 14       	cp	r14, r1
    ddee:	f1 04       	cpc	r15, r1
    ddf0:	09 f4       	brne	.+2      	; 0xddf4 <c_del_stmt+0x68>
    ddf2:	ca c0       	rjmp	.+404    	; 0xdf88 <c_del_stmt+0x1fc>
    ddf4:	c7 01       	movw	r24, r14
    ddf6:	83 70       	andi	r24, 0x03	; 3
    ddf8:	99 27       	eor	r25, r25
    ddfa:	89 2b       	or	r24, r25
    ddfc:	09 f0       	breq	.+2      	; 0xde00 <c_del_stmt+0x74>
    ddfe:	c4 c0       	rjmp	.+392    	; 0xdf88 <c_del_stmt+0x1fc>
    de00:	97 01       	movw	r18, r14
    de02:	f7 01       	movw	r30, r14
    de04:	84 81       	ldd	r24, Z+4	; 0x04
    de06:	95 81       	ldd	r25, Z+5	; 0x05
    de08:	a6 81       	ldd	r26, Z+6	; 0x06
    de0a:	b7 81       	ldd	r27, Z+7	; 0x07
    de0c:	87 38       	cpi	r24, 0x87	; 135
    de0e:	91 f5       	brne	.+100    	; 0xde74 <c_del_stmt+0xe8>
    de10:	89 2f       	mov	r24, r25
    de12:	9a 2f       	mov	r25, r26
    de14:	ab 2f       	mov	r26, r27
    de16:	bb 27       	eor	r27, r27
    de18:	5c 01       	movw	r10, r24
    de1a:	f1 e0       	ldi	r31, 0x01	; 1
    de1c:	af 1a       	sub	r10, r31
    de1e:	b1 08       	sbc	r11, r1
    de20:	1a 14       	cp	r1, r10
    de22:	1b 04       	cpc	r1, r11
    de24:	a4 f4       	brge	.+40     	; 0xde4e <c_del_stmt+0xc2>
    de26:	47 01       	movw	r8, r14
    de28:	28 e0       	ldi	r18, 0x08	; 8
    de2a:	82 0e       	add	r8, r18
    de2c:	91 1c       	adc	r9, r1
    de2e:	03 96       	adiw	r24, 0x03	; 3
    de30:	88 0f       	add	r24, r24
    de32:	99 1f       	adc	r25, r25
    de34:	67 01       	movw	r12, r14
    de36:	c8 0e       	add	r12, r24
    de38:	d9 1e       	adc	r13, r25
    de3a:	d4 01       	movw	r26, r8
    de3c:	6d 91       	ld	r22, X+
    de3e:	7d 91       	ld	r23, X+
    de40:	4d 01       	movw	r8, r26
    de42:	c8 01       	movw	r24, r16
    de44:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    de48:	8c 14       	cp	r8, r12
    de4a:	9d 04       	cpc	r9, r13
    de4c:	b1 f7       	brne	.-20     	; 0xde3a <c_del_stmt+0xae>
    de4e:	f5 01       	movw	r30, r10
    de50:	34 96       	adiw	r30, 0x04	; 4
    de52:	ee 0f       	add	r30, r30
    de54:	ff 1f       	adc	r31, r31
    de56:	ee 0d       	add	r30, r14
    de58:	ff 1d       	adc	r31, r15
    de5a:	01 90       	ld	r0, Z+
    de5c:	f0 81       	ld	r31, Z
    de5e:	e0 2d       	mov	r30, r0
    de60:	30 97       	sbiw	r30, 0x00	; 0
    de62:	29 f0       	breq	.+10     	; 0xde6e <c_del_stmt+0xe2>
    de64:	cf 01       	movw	r24, r30
    de66:	83 70       	andi	r24, 0x03	; 3
    de68:	99 27       	eor	r25, r25
    de6a:	89 2b       	or	r24, r25
    de6c:	11 f0       	breq	.+4      	; 0xde72 <c_del_stmt+0xe6>
    de6e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    de72:	9f 01       	movw	r18, r30
    de74:	f9 01       	movw	r30, r18
    de76:	84 81       	ldd	r24, Z+4	; 0x04
    de78:	95 81       	ldd	r25, Z+5	; 0x05
    de7a:	a6 81       	ldd	r26, Z+6	; 0x06
    de7c:	b7 81       	ldd	r27, Z+7	; 0x07
    de7e:	99 27       	eor	r25, r25
    de80:	aa 27       	eor	r26, r26
    de82:	bb 27       	eor	r27, r27
    de84:	8e 32       	cpi	r24, 0x2E	; 46
    de86:	91 05       	cpc	r25, r1
    de88:	a1 05       	cpc	r26, r1
    de8a:	b1 05       	cpc	r27, r1
    de8c:	79 f4       	brne	.+30     	; 0xdeac <c_del_stmt+0x120>
    de8e:	60 85       	ldd	r22, Z+8	; 0x08
    de90:	71 85       	ldd	r23, Z+9	; 0x09
    de92:	c8 01       	movw	r24, r16
    de94:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    de98:	62 e0       	ldi	r22, 0x02	; 2
    de9a:	70 e0       	ldi	r23, 0x00	; 0
    de9c:	d8 01       	movw	r26, r16
    de9e:	5b 96       	adiw	r26, 0x1b	; 27
    dea0:	8d 91       	ld	r24, X+
    dea2:	9c 91       	ld	r25, X
    dea4:	5c 97       	sbiw	r26, 0x1c	; 28
    dea6:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <mp_emit_bc_subscr>
    deaa:	79 c0       	rjmp	.+242    	; 0xdf9e <c_del_stmt+0x212>
    deac:	8f 97       	sbiw	r24, 0x2f	; 47
    deae:	a1 05       	cpc	r26, r1
    deb0:	b1 05       	cpc	r27, r1
    deb2:	09 f0       	breq	.+2      	; 0xdeb6 <c_del_stmt+0x12a>
    deb4:	69 c0       	rjmp	.+210    	; 0xdf88 <c_del_stmt+0x1fc>
    deb6:	f9 01       	movw	r30, r18
    deb8:	60 85       	ldd	r22, Z+8	; 0x08
    deba:	71 85       	ldd	r23, Z+9	; 0x09
    debc:	cb 01       	movw	r24, r22
    debe:	8f 70       	andi	r24, 0x0F	; 15
    dec0:	99 27       	eor	r25, r25
    dec2:	02 97       	sbiw	r24, 0x02	; 2
    dec4:	11 f0       	breq	.+4      	; 0xdeca <c_del_stmt+0x13e>
    dec6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    deca:	72 95       	swap	r23
    decc:	62 95       	swap	r22
    dece:	6f 70       	andi	r22, 0x0F	; 15
    ded0:	67 27       	eor	r22, r23
    ded2:	7f 70       	andi	r23, 0x0F	; 15
    ded4:	67 27       	eor	r22, r23
    ded6:	42 e0       	ldi	r20, 0x02	; 2
    ded8:	50 e0       	ldi	r21, 0x00	; 0
    deda:	d8 01       	movw	r26, r16
    dedc:	5b 96       	adiw	r26, 0x1b	; 27
    dede:	8d 91       	ld	r24, X+
    dee0:	9c 91       	ld	r25, X
    dee2:	5c 97       	sbiw	r26, 0x1c	; 28
    dee4:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <mp_emit_bc_attr>
    dee8:	5a c0       	rjmp	.+180    	; 0xdf9e <c_del_stmt+0x212>
    deea:	08 84       	ldd	r0, Y+8	; 0x08
    deec:	d9 85       	ldd	r29, Y+9	; 0x09
    deee:	c0 2d       	mov	r28, r0
    def0:	20 97       	sbiw	r28, 0x00	; 0
    def2:	09 f4       	brne	.+2      	; 0xdef6 <c_del_stmt+0x16a>
    def4:	49 c0       	rjmp	.+146    	; 0xdf88 <c_del_stmt+0x1fc>
    def6:	ce 01       	movw	r24, r28
    def8:	83 70       	andi	r24, 0x03	; 3
    defa:	99 27       	eor	r25, r25
    defc:	89 2b       	or	r24, r25
    defe:	39 f4       	brne	.+14     	; 0xdf0e <c_del_stmt+0x182>
    df00:	6e 01       	movw	r12, r28
    df02:	8c 81       	ldd	r24, Y+4	; 0x04
    df04:	9d 81       	ldd	r25, Y+5	; 0x05
    df06:	ae 81       	ldd	r26, Y+6	; 0x06
    df08:	bf 81       	ldd	r27, Y+7	; 0x07
    df0a:	8b 38       	cpi	r24, 0x8B	; 139
    df0c:	11 f0       	breq	.+4      	; 0xdf12 <c_del_stmt+0x186>
    df0e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    df12:	89 2f       	mov	r24, r25
    df14:	9a 2f       	mov	r25, r26
    df16:	ab 2f       	mov	r26, r27
    df18:	bb 27       	eor	r27, r27
    df1a:	82 30       	cpi	r24, 0x02	; 2
    df1c:	91 05       	cpc	r25, r1
    df1e:	a1 05       	cpc	r26, r1
    df20:	b1 05       	cpc	r27, r1
    df22:	81 f4       	brne	.+32     	; 0xdf44 <c_del_stmt+0x1b8>
    df24:	ea 85       	ldd	r30, Y+10	; 0x0a
    df26:	fb 85       	ldd	r31, Y+11	; 0x0b
    df28:	30 97       	sbiw	r30, 0x00	; 0
    df2a:	29 f0       	breq	.+10     	; 0xdf36 <c_del_stmt+0x1aa>
    df2c:	cf 01       	movw	r24, r30
    df2e:	83 70       	andi	r24, 0x03	; 3
    df30:	99 27       	eor	r25, r25
    df32:	89 2b       	or	r24, r25
    df34:	61 f0       	breq	.+24     	; 0xdf4e <c_del_stmt+0x1c2>
    df36:	76 01       	movw	r14, r12
    df38:	b8 e0       	ldi	r27, 0x08	; 8
    df3a:	eb 0e       	add	r14, r27
    df3c:	f1 1c       	adc	r15, r1
    df3e:	c0 e0       	ldi	r28, 0x00	; 0
    df40:	d0 e0       	ldi	r29, 0x00	; 0
    df42:	09 c0       	rjmp	.+18     	; 0xdf56 <c_del_stmt+0x1ca>
    df44:	89 2b       	or	r24, r25
    df46:	8a 2b       	or	r24, r26
    df48:	8b 2b       	or	r24, r27
    df4a:	a9 f7       	brne	.-22     	; 0xdf36 <c_del_stmt+0x1aa>
    df4c:	28 c0       	rjmp	.+80     	; 0xdf9e <c_del_stmt+0x212>
    df4e:	84 81       	ldd	r24, Z+4	; 0x04
    df50:	8f 39       	cpi	r24, 0x9F	; 159
    df52:	89 f7       	brne	.-30     	; 0xdf36 <c_del_stmt+0x1aa>
    df54:	19 c0       	rjmp	.+50     	; 0xdf88 <c_del_stmt+0x1fc>
    df56:	f7 01       	movw	r30, r14
    df58:	61 91       	ld	r22, Z+
    df5a:	71 91       	ld	r23, Z+
    df5c:	7f 01       	movw	r14, r30
    df5e:	c8 01       	movw	r24, r16
    df60:	15 df       	rcall	.-470    	; 0xdd8c <c_del_stmt>
    df62:	21 96       	adiw	r28, 0x01	; 1
    df64:	ae 01       	movw	r20, r28
    df66:	60 e0       	ldi	r22, 0x00	; 0
    df68:	70 e0       	ldi	r23, 0x00	; 0
    df6a:	f6 01       	movw	r30, r12
    df6c:	84 81       	ldd	r24, Z+4	; 0x04
    df6e:	95 81       	ldd	r25, Z+5	; 0x05
    df70:	a6 81       	ldd	r26, Z+6	; 0x06
    df72:	b7 81       	ldd	r27, Z+7	; 0x07
    df74:	89 2f       	mov	r24, r25
    df76:	9a 2f       	mov	r25, r26
    df78:	ab 2f       	mov	r26, r27
    df7a:	bb 27       	eor	r27, r27
    df7c:	48 17       	cp	r20, r24
    df7e:	59 07       	cpc	r21, r25
    df80:	6a 07       	cpc	r22, r26
    df82:	7b 07       	cpc	r23, r27
    df84:	40 f3       	brcs	.-48     	; 0xdf56 <c_del_stmt+0x1ca>
    df86:	0b c0       	rjmp	.+22     	; 0xdf9e <c_del_stmt+0x212>
    df88:	4b e0       	ldi	r20, 0x0B	; 11
    df8a:	5a e0       	ldi	r21, 0x0A	; 10
    df8c:	be 01       	movw	r22, r28
    df8e:	c8 01       	movw	r24, r16
    df90:	0e 94 08 27 	call	0x4e10	; 0x4e10 <compile_syntax_error>
    df94:	04 c0       	rjmp	.+8      	; 0xdf9e <c_del_stmt+0x212>
    df96:	8c 81       	ldd	r24, Y+4	; 0x04
    df98:	8a 32       	cpi	r24, 0x2A	; 42
    df9a:	b1 f7       	brne	.-20     	; 0xdf88 <c_del_stmt+0x1fc>
    df9c:	a6 cf       	rjmp	.-180    	; 0xdeea <c_del_stmt+0x15e>
    df9e:	df 91       	pop	r29
    dfa0:	cf 91       	pop	r28
    dfa2:	1f 91       	pop	r17
    dfa4:	0f 91       	pop	r16
    dfa6:	ff 90       	pop	r15
    dfa8:	ef 90       	pop	r14
    dfaa:	df 90       	pop	r13
    dfac:	cf 90       	pop	r12
    dfae:	bf 90       	pop	r11
    dfb0:	af 90       	pop	r10
    dfb2:	9f 90       	pop	r9
    dfb4:	8f 90       	pop	r8
    dfb6:	08 95       	ret

0000dfb8 <compile_scope>:
    dfb8:	cf 92       	push	r12
    dfba:	df 92       	push	r13
    dfbc:	ef 92       	push	r14
    dfbe:	ff 92       	push	r15
    dfc0:	0f 93       	push	r16
    dfc2:	1f 93       	push	r17
    dfc4:	cf 93       	push	r28
    dfc6:	df 93       	push	r29
    dfc8:	ec 01       	movw	r28, r24
    dfca:	8b 01       	movw	r16, r22
    dfcc:	64 2f       	mov	r22, r20
    dfce:	4b 83       	std	Y+3, r20	; 0x03
    dfd0:	1a 8f       	std	Y+26, r17	; 0x1a
    dfd2:	09 8f       	std	Y+25, r16	; 0x19
    dfd4:	1a 86       	std	Y+10, r1	; 0x0a
    dfd6:	19 86       	std	Y+9, r1	; 0x09
    dfd8:	a8 01       	movw	r20, r16
    dfda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    dfdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    dfde:	0e 94 0e 12 	call	0x241c	; 0x241c <mp_emit_bc_start_pass>
    dfe2:	8b 81       	ldd	r24, Y+3	; 0x03
    dfe4:	81 30       	cpi	r24, 0x01	; 1
    dfe6:	29 f4       	brne	.+10     	; 0xdff2 <compile_scope+0x3a>
    dfe8:	f8 01       	movw	r30, r16
    dfea:	12 8e       	std	Z+26, r1	; 0x1a
    dfec:	11 8e       	std	Z+25, r1	; 0x19
    dfee:	14 8e       	std	Z+28, r1	; 0x1c
    dff0:	13 8e       	std	Z+27, r1	; 0x1b
    dff2:	f8 01       	movw	r30, r16
    dff4:	e5 80       	ldd	r14, Z+5	; 0x05
    dff6:	f6 80       	ldd	r15, Z+6	; 0x06
    dff8:	e1 14       	cp	r14, r1
    dffa:	f1 04       	cpc	r15, r1
    dffc:	c9 f0       	breq	.+50     	; 0xe030 <compile_scope+0x78>
    dffe:	c7 01       	movw	r24, r14
    e000:	83 70       	andi	r24, 0x03	; 3
    e002:	99 27       	eor	r25, r25
    e004:	89 2b       	or	r24, r25
    e006:	a1 f4       	brne	.+40     	; 0xe030 <compile_scope+0x78>
    e008:	f7 01       	movw	r30, r14
    e00a:	84 81       	ldd	r24, Z+4	; 0x04
    e00c:	8a 33       	cpi	r24, 0x3A	; 58
    e00e:	81 f4       	brne	.+32     	; 0xe030 <compile_scope+0x78>
    e010:	f8 01       	movw	r30, r16
    e012:	80 81       	ld	r24, Z
    e014:	81 11       	cpse	r24, r1
    e016:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e01a:	f7 01       	movw	r30, r14
    e01c:	60 85       	ldd	r22, Z+8	; 0x08
    e01e:	71 85       	ldd	r23, Z+9	; 0x09
    e020:	ce 01       	movw	r24, r28
    e022:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e026:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e028:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e02a:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    e02e:	72 c1       	rjmp	.+740    	; 0xe314 <compile_scope+0x35c>
    e030:	f8 01       	movw	r30, r16
    e032:	80 81       	ld	r24, Z
    e034:	81 11       	cpse	r24, r1
    e036:	0e c0       	rjmp	.+28     	; 0xe054 <compile_scope+0x9c>
    e038:	b7 01       	movw	r22, r14
    e03a:	ce 01       	movw	r24, r28
    e03c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e040:	6e e0       	ldi	r22, 0x0E	; 14
    e042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e046:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    e04a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e04c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e04e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    e052:	60 c1       	rjmp	.+704    	; 0xe314 <compile_scope+0x35c>
    e054:	87 30       	cpi	r24, 0x07	; 7
    e056:	89 f5       	brne	.+98     	; 0xe0ba <compile_scope+0x102>
    e058:	e1 14       	cp	r14, r1
    e05a:	f1 04       	cpc	r15, r1
    e05c:	29 f0       	breq	.+10     	; 0xe068 <compile_scope+0xb0>
    e05e:	c7 01       	movw	r24, r14
    e060:	83 70       	andi	r24, 0x03	; 3
    e062:	99 27       	eor	r25, r25
    e064:	89 2b       	or	r24, r25
    e066:	11 f0       	breq	.+4      	; 0xe06c <compile_scope+0xb4>
    e068:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e06c:	f7 01       	movw	r30, r14
    e06e:	84 81       	ldd	r24, Z+4	; 0x04
    e070:	83 30       	cpi	r24, 0x03	; 3
    e072:	11 f0       	breq	.+4      	; 0xe078 <compile_scope+0xc0>
    e074:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e078:	8b 81       	ldd	r24, Y+3	; 0x03
    e07a:	81 30       	cpi	r24, 0x01	; 1
    e07c:	51 f4       	brne	.+20     	; 0xe092 <compile_scope+0xda>
    e07e:	1c 82       	std	Y+4, r1	; 0x04
    e080:	f7 01       	movw	r30, r14
    e082:	62 85       	ldd	r22, Z+10	; 0x0a
    e084:	73 85       	ldd	r23, Z+11	; 0x0b
    e086:	26 e9       	ldi	r18, 0x96	; 150
    e088:	37 e5       	ldi	r19, 0x57	; 87
    e08a:	40 e4       	ldi	r20, 0x40	; 64
    e08c:	ce 01       	movw	r24, r28
    e08e:	0e 94 b7 01 	call	0x36e	; 0x36e <apply_to_single_or_list>
    e092:	f7 01       	movw	r30, r14
    e094:	66 85       	ldd	r22, Z+14	; 0x0e
    e096:	77 85       	ldd	r23, Z+15	; 0x0f
    e098:	ce 01       	movw	r24, r28
    e09a:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e09e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    e0a0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    e0a2:	84 81       	ldd	r24, Z+4	; 0x04
    e0a4:	81 11       	cpse	r24, r1
    e0a6:	36 c1       	rjmp	.+620    	; 0xe314 <compile_scope+0x35c>
    e0a8:	6e e0       	ldi	r22, 0x0E	; 14
    e0aa:	cf 01       	movw	r24, r30
    e0ac:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    e0b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e0b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e0b4:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    e0b8:	2d c1       	rjmp	.+602    	; 0xe314 <compile_scope+0x35c>
    e0ba:	82 30       	cpi	r24, 0x02	; 2
    e0bc:	f1 f5       	brne	.+124    	; 0xe13a <compile_scope+0x182>
    e0be:	e1 14       	cp	r14, r1
    e0c0:	f1 04       	cpc	r15, r1
    e0c2:	29 f0       	breq	.+10     	; 0xe0ce <compile_scope+0x116>
    e0c4:	c7 01       	movw	r24, r14
    e0c6:	83 70       	andi	r24, 0x03	; 3
    e0c8:	99 27       	eor	r25, r25
    e0ca:	89 2b       	or	r24, r25
    e0cc:	11 f0       	breq	.+4      	; 0xe0d2 <compile_scope+0x11a>
    e0ce:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e0d2:	f7 01       	movw	r30, r14
    e0d4:	84 81       	ldd	r24, Z+4	; 0x04
    e0d6:	95 81       	ldd	r25, Z+5	; 0x05
    e0d8:	a6 81       	ldd	r26, Z+6	; 0x06
    e0da:	b7 81       	ldd	r27, Z+7	; 0x07
    e0dc:	89 2f       	mov	r24, r25
    e0de:	9a 2f       	mov	r25, r26
    e0e0:	ab 2f       	mov	r26, r27
    e0e2:	bb 27       	eor	r27, r27
    e0e4:	03 97       	sbiw	r24, 0x03	; 3
    e0e6:	a1 05       	cpc	r26, r1
    e0e8:	b1 05       	cpc	r27, r1
    e0ea:	11 f0       	breq	.+4      	; 0xe0f0 <compile_scope+0x138>
    e0ec:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e0f0:	8b 81       	ldd	r24, Y+3	; 0x03
    e0f2:	81 30       	cpi	r24, 0x01	; 1
    e0f4:	51 f4       	brne	.+20     	; 0xe10a <compile_scope+0x152>
    e0f6:	1c 82       	std	Y+4, r1	; 0x04
    e0f8:	f7 01       	movw	r30, r14
    e0fa:	60 85       	ldd	r22, Z+8	; 0x08
    e0fc:	71 85       	ldd	r23, Z+9	; 0x09
    e0fe:	2f e8       	ldi	r18, 0x8F	; 143
    e100:	37 e5       	ldi	r19, 0x57	; 87
    e102:	46 e4       	ldi	r20, 0x46	; 70
    e104:	ce 01       	movw	r24, r28
    e106:	0e 94 b7 01 	call	0x36e	; 0x36e <apply_to_single_or_list>
    e10a:	f7 01       	movw	r30, r14
    e10c:	62 85       	ldd	r22, Z+10	; 0x0a
    e10e:	73 85       	ldd	r23, Z+11	; 0x0b
    e110:	ce 01       	movw	r24, r28
    e112:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e116:	f8 01       	movw	r30, r16
    e118:	85 85       	ldd	r24, Z+13	; 0x0d
    e11a:	80 ff       	sbrs	r24, 0
    e11c:	09 c0       	rjmp	.+18     	; 0xe130 <compile_scope+0x178>
    e11e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e122:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    e126:	6e e0       	ldi	r22, 0x0E	; 14
    e128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e12a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e12c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    e130:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e132:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e134:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    e138:	ed c0       	rjmp	.+474    	; 0xe314 <compile_scope+0x35c>
    e13a:	9d ef       	ldi	r25, 0xFD	; 253
    e13c:	98 0f       	add	r25, r24
    e13e:	94 30       	cpi	r25, 0x04	; 4
    e140:	08 f0       	brcs	.+2      	; 0xe144 <compile_scope+0x18c>
    e142:	87 c0       	rjmp	.+270    	; 0xe252 <compile_scope+0x29a>
    e144:	e1 14       	cp	r14, r1
    e146:	f1 04       	cpc	r15, r1
    e148:	29 f0       	breq	.+10     	; 0xe154 <compile_scope+0x19c>
    e14a:	c7 01       	movw	r24, r14
    e14c:	83 70       	andi	r24, 0x03	; 3
    e14e:	99 27       	eor	r25, r25
    e150:	89 2b       	or	r24, r25
    e152:	11 f0       	breq	.+4      	; 0xe158 <compile_scope+0x1a0>
    e154:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e158:	f7 01       	movw	r30, r14
    e15a:	84 81       	ldd	r24, Z+4	; 0x04
    e15c:	95 81       	ldd	r25, Z+5	; 0x05
    e15e:	a6 81       	ldd	r26, Z+6	; 0x06
    e160:	b7 81       	ldd	r27, Z+7	; 0x07
    e162:	89 2f       	mov	r24, r25
    e164:	9a 2f       	mov	r25, r26
    e166:	ab 2f       	mov	r26, r27
    e168:	bb 27       	eor	r27, r27
    e16a:	02 97       	sbiw	r24, 0x02	; 2
    e16c:	a1 05       	cpc	r26, r1
    e16e:	b1 05       	cpc	r27, r1
    e170:	11 f0       	breq	.+4      	; 0xe176 <compile_scope+0x1be>
    e172:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e176:	f7 01       	movw	r30, r14
    e178:	c2 84       	ldd	r12, Z+10	; 0x0a
    e17a:	d3 84       	ldd	r13, Z+11	; 0x0b
    e17c:	c1 14       	cp	r12, r1
    e17e:	d1 04       	cpc	r13, r1
    e180:	49 f0       	breq	.+18     	; 0xe194 <compile_scope+0x1dc>
    e182:	c6 01       	movw	r24, r12
    e184:	83 70       	andi	r24, 0x03	; 3
    e186:	99 27       	eor	r25, r25
    e188:	89 2b       	or	r24, r25
    e18a:	21 f4       	brne	.+8      	; 0xe194 <compile_scope+0x1dc>
    e18c:	f6 01       	movw	r30, r12
    e18e:	84 81       	ldd	r24, Z+4	; 0x04
    e190:	8f 39       	cpi	r24, 0x9F	; 159
    e192:	11 f0       	breq	.+4      	; 0xe198 <compile_scope+0x1e0>
    e194:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e198:	8b 81       	ldd	r24, Y+3	; 0x03
    e19a:	81 30       	cpi	r24, 0x01	; 1
    e19c:	61 f4       	brne	.+24     	; 0xe1b6 <compile_scope+0x1fe>
    e19e:	43 e0       	ldi	r20, 0x03	; 3
    e1a0:	61 e0       	ldi	r22, 0x01	; 1
    e1a2:	70 e0       	ldi	r23, 0x00	; 0
    e1a4:	89 8d       	ldd	r24, Y+25	; 0x19
    e1a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    e1a8:	0e 94 f7 55 	call	0xabee	; 0xabee <scope_find_or_add_id>
    e1ac:	81 e0       	ldi	r24, 0x01	; 1
    e1ae:	90 e0       	ldi	r25, 0x00	; 0
    e1b0:	f8 01       	movw	r30, r16
    e1b2:	92 8b       	std	Z+18, r25	; 0x12
    e1b4:	81 8b       	std	Z+17, r24	; 0x11
    e1b6:	2b 8d       	ldd	r18, Y+27	; 0x1b
    e1b8:	3c 8d       	ldd	r19, Y+28	; 0x1c
    e1ba:	f8 01       	movw	r30, r16
    e1bc:	90 81       	ld	r25, Z
    e1be:	93 30       	cpi	r25, 0x03	; 3
    e1c0:	41 f4       	brne	.+16     	; 0xe1d2 <compile_scope+0x21a>
    e1c2:	41 e0       	ldi	r20, 0x01	; 1
    e1c4:	50 e0       	ldi	r21, 0x00	; 0
    e1c6:	60 e0       	ldi	r22, 0x00	; 0
    e1c8:	70 e0       	ldi	r23, 0x00	; 0
    e1ca:	c9 01       	movw	r24, r18
    e1cc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    e1d0:	09 c0       	rjmp	.+18     	; 0xe1e4 <compile_scope+0x22c>
    e1d2:	94 30       	cpi	r25, 0x04	; 4
    e1d4:	39 f4       	brne	.+14     	; 0xe1e4 <compile_scope+0x22c>
    e1d6:	42 e0       	ldi	r20, 0x02	; 2
    e1d8:	50 e0       	ldi	r21, 0x00	; 0
    e1da:	60 e0       	ldi	r22, 0x00	; 0
    e1dc:	70 e0       	ldi	r23, 0x00	; 0
    e1de:	c9 01       	movw	r24, r18
    e1e0:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    e1e4:	f8 01       	movw	r30, r16
    e1e6:	80 81       	ld	r24, Z
    e1e8:	86 30       	cpi	r24, 0x06	; 6
    e1ea:	91 f4       	brne	.+36     	; 0xe210 <compile_scope+0x258>
    e1ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e1ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e1f0:	0e 94 32 16 	call	0x2c64	; 0x2c64 <mp_emit_bc_load_null>
    e1f4:	61 e0       	ldi	r22, 0x01	; 1
    e1f6:	70 e0       	ldi	r23, 0x00	; 0
    e1f8:	ce 01       	movw	r24, r28
    e1fa:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    e1fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e202:	0e 94 32 16 	call	0x2c64	; 0x2c64 <mp_emit_bc_load_null>
    e206:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e208:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e20a:	0e 94 32 16 	call	0x2c64	; 0x2c64 <mp_emit_bc_load_null>
    e20e:	0a c0       	rjmp	.+20     	; 0xe224 <compile_scope+0x26c>
    e210:	61 e0       	ldi	r22, 0x01	; 1
    e212:	70 e0       	ldi	r23, 0x00	; 0
    e214:	ce 01       	movw	r24, r28
    e216:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    e21a:	61 e0       	ldi	r22, 0x01	; 1
    e21c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e21e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e220:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <mp_emit_bc_get_iter>
    e224:	f7 01       	movw	r30, r14
    e226:	40 85       	ldd	r20, Z+8	; 0x08
    e228:	51 85       	ldd	r21, Z+9	; 0x09
    e22a:	20 e0       	ldi	r18, 0x00	; 0
    e22c:	30 e0       	ldi	r19, 0x00	; 0
    e22e:	b6 01       	movw	r22, r12
    e230:	ce 01       	movw	r24, r28
    e232:	0e 94 2c 66 	call	0xcc58	; 0xcc58 <compile_scope_comp_iter>
    e236:	f8 01       	movw	r30, r16
    e238:	80 81       	ld	r24, Z
    e23a:	86 30       	cpi	r24, 0x06	; 6
    e23c:	29 f4       	brne	.+10     	; 0xe248 <compile_scope+0x290>
    e23e:	6e e0       	ldi	r22, 0x0E	; 14
    e240:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e242:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e244:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    e248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e24a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e24c:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    e250:	61 c0       	rjmp	.+194    	; 0xe314 <compile_scope+0x35c>
    e252:	81 30       	cpi	r24, 0x01	; 1
    e254:	11 f0       	breq	.+4      	; 0xe25a <compile_scope+0x2a2>
    e256:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e25a:	e1 14       	cp	r14, r1
    e25c:	f1 04       	cpc	r15, r1
    e25e:	29 f0       	breq	.+10     	; 0xe26a <compile_scope+0x2b2>
    e260:	c7 01       	movw	r24, r14
    e262:	83 70       	andi	r24, 0x03	; 3
    e264:	99 27       	eor	r25, r25
    e266:	89 2b       	or	r24, r25
    e268:	11 f0       	breq	.+4      	; 0xe26e <compile_scope+0x2b6>
    e26a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e26e:	f7 01       	movw	r30, r14
    e270:	84 81       	ldd	r24, Z+4	; 0x04
    e272:	83 33       	cpi	r24, 0x33	; 51
    e274:	11 f0       	breq	.+4      	; 0xe27a <compile_scope+0x2c2>
    e276:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e27a:	8b 81       	ldd	r24, Y+3	; 0x03
    e27c:	81 30       	cpi	r24, 0x01	; 1
    e27e:	31 f4       	brne	.+12     	; 0xe28c <compile_scope+0x2d4>
    e280:	43 e0       	ldi	r20, 0x03	; 3
    e282:	6a e0       	ldi	r22, 0x0A	; 10
    e284:	70 e0       	ldi	r23, 0x00	; 0
    e286:	c8 01       	movw	r24, r16
    e288:	0e 94 f7 55 	call	0xabee	; 0xabee <scope_find_or_add_id>
    e28c:	67 e1       	ldi	r22, 0x17	; 23
    e28e:	70 e0       	ldi	r23, 0x00	; 0
    e290:	ce 01       	movw	r24, r28
    e292:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    e296:	66 e1       	ldi	r22, 0x16	; 22
    e298:	70 e0       	ldi	r23, 0x00	; 0
    e29a:	ce 01       	movw	r24, r28
    e29c:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
    e2a0:	f7 01       	movw	r30, r14
    e2a2:	60 85       	ldd	r22, Z+8	; 0x08
    e2a4:	71 85       	ldd	r23, Z+9	; 0x09
    e2a6:	72 95       	swap	r23
    e2a8:	62 95       	swap	r22
    e2aa:	6f 70       	andi	r22, 0x0F	; 15
    e2ac:	67 27       	eor	r22, r23
    e2ae:	7f 70       	andi	r23, 0x0F	; 15
    e2b0:	67 27       	eor	r22, r23
    e2b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e2b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e2b6:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
    e2ba:	6a e1       	ldi	r22, 0x1A	; 26
    e2bc:	70 e0       	ldi	r23, 0x00	; 0
    e2be:	ce 01       	movw	r24, r28
    e2c0:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
    e2c4:	f7 01       	movw	r30, r14
    e2c6:	64 85       	ldd	r22, Z+12	; 0x0c
    e2c8:	75 85       	ldd	r23, Z+13	; 0x0d
    e2ca:	ce 01       	movw	r24, r28
    e2cc:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e2d0:	6a e0       	ldi	r22, 0x0A	; 10
    e2d2:	70 e0       	ldi	r23, 0x00	; 0
    e2d4:	c8 01       	movw	r24, r16
    e2d6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <scope_find>
    e2da:	00 97       	sbiw	r24, 0x00	; 0
    e2dc:	11 f4       	brne	.+4      	; 0xe2e2 <compile_scope+0x32a>
    e2de:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e2e2:	fc 01       	movw	r30, r24
    e2e4:	20 81       	ld	r18, Z
    e2e6:	23 30       	cpi	r18, 0x03	; 3
    e2e8:	31 f4       	brne	.+12     	; 0xe2f6 <compile_scope+0x33e>
    e2ea:	6e e0       	ldi	r22, 0x0E	; 14
    e2ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e2ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e2f0:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
    e2f4:	0b c0       	rjmp	.+22     	; 0xe30c <compile_scope+0x354>
    e2f6:	fc 01       	movw	r30, r24
    e2f8:	42 81       	ldd	r20, Z+2	; 0x02
    e2fa:	53 81       	ldd	r21, Z+3	; 0x03
    e2fc:	20 e0       	ldi	r18, 0x00	; 0
    e2fe:	30 e0       	ldi	r19, 0x00	; 0
    e300:	6a e0       	ldi	r22, 0x0A	; 10
    e302:	70 e0       	ldi	r23, 0x00	; 0
    e304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e308:	0e 94 59 14 	call	0x28b2	; 0x28b2 <mp_emit_bc_load_local>
    e30c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e30e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e310:	0e 94 52 19 	call	0x32a4	; 0x32a4 <mp_emit_bc_return_value>
    e314:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e316:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e318:	0e 94 33 4d 	call	0x9a66	; 0x9a66 <mp_emit_bc_end_pass>
    e31c:	8b 89       	ldd	r24, Y+19	; 0x13
    e31e:	9c 89       	ldd	r25, Y+20	; 0x14
    e320:	89 2b       	or	r24, r25
    e322:	11 f0       	breq	.+4      	; 0xe328 <compile_scope+0x370>
    e324:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e328:	df 91       	pop	r29
    e32a:	cf 91       	pop	r28
    e32c:	1f 91       	pop	r17
    e32e:	0f 91       	pop	r16
    e330:	ff 90       	pop	r15
    e332:	ef 90       	pop	r14
    e334:	df 90       	pop	r13
    e336:	cf 90       	pop	r12
    e338:	08 95       	ret

0000e33a <compile_expr_stmt>:
    e33a:	8f 92       	push	r8
    e33c:	9f 92       	push	r9
    e33e:	af 92       	push	r10
    e340:	bf 92       	push	r11
    e342:	cf 92       	push	r12
    e344:	df 92       	push	r13
    e346:	ef 92       	push	r14
    e348:	ff 92       	push	r15
    e34a:	0f 93       	push	r16
    e34c:	1f 93       	push	r17
    e34e:	cf 93       	push	r28
    e350:	df 93       	push	r29
    e352:	ec 01       	movw	r28, r24
    e354:	8b 01       	movw	r16, r22
    e356:	db 01       	movw	r26, r22
    e358:	1a 96       	adiw	r26, 0x0a	; 10
    e35a:	6d 91       	ld	r22, X+
    e35c:	7c 91       	ld	r23, X
    e35e:	1b 97       	sbiw	r26, 0x0b	; 11
    e360:	61 15       	cp	r22, r1
    e362:	71 05       	cpc	r23, r1
    e364:	09 f0       	breq	.+2      	; 0xe368 <compile_expr_stmt+0x2e>
    e366:	41 c0       	rjmp	.+130    	; 0xe3ea <compile_expr_stmt+0xb0>
    e368:	8a 81       	ldd	r24, Y+2	; 0x02
    e36a:	88 23       	and	r24, r24
    e36c:	f9 f0       	breq	.+62     	; 0xe3ac <compile_expr_stmt+0x72>
    e36e:	e9 8d       	ldd	r30, Y+25	; 0x19
    e370:	fa 8d       	ldd	r31, Y+26	; 0x1a
    e372:	80 81       	ld	r24, Z
    e374:	81 11       	cpse	r24, r1
    e376:	1a c0       	rjmp	.+52     	; 0xe3ac <compile_expr_stmt+0x72>
    e378:	64 eb       	ldi	r22, 0xB4	; 180
    e37a:	70 e0       	ldi	r23, 0x00	; 0
    e37c:	ce 01       	movw	r24, r28
    e37e:	0e 94 9d 57 	call	0xaf3a	; 0xaf3a <compile_load_id>
    e382:	f8 01       	movw	r30, r16
    e384:	60 85       	ldd	r22, Z+8	; 0x08
    e386:	71 85       	ldd	r23, Z+9	; 0x09
    e388:	ce 01       	movw	r24, r28
    e38a:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e38e:	20 e0       	ldi	r18, 0x00	; 0
    e390:	30 e0       	ldi	r19, 0x00	; 0
    e392:	40 e0       	ldi	r20, 0x00	; 0
    e394:	50 e0       	ldi	r21, 0x00	; 0
    e396:	61 e0       	ldi	r22, 0x01	; 1
    e398:	70 e0       	ldi	r23, 0x00	; 0
    e39a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e39c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e39e:	0e 94 30 19 	call	0x3260	; 0x3260 <mp_emit_bc_call_function>
    e3a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e3a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e3a6:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    e3aa:	f0 c0       	rjmp	.+480    	; 0xe58c <compile_expr_stmt+0x252>
    e3ac:	d8 01       	movw	r26, r16
    e3ae:	18 96       	adiw	r26, 0x08	; 8
    e3b0:	6d 91       	ld	r22, X+
    e3b2:	7c 91       	ld	r23, X
    e3b4:	19 97       	sbiw	r26, 0x09	; 9
    e3b6:	cb 01       	movw	r24, r22
    e3b8:	83 70       	andi	r24, 0x03	; 3
    e3ba:	99 27       	eor	r25, r25
    e3bc:	89 2b       	or	r24, r25
    e3be:	09 f4       	brne	.+2      	; 0xe3c2 <compile_expr_stmt+0x88>
    e3c0:	c8 c0       	rjmp	.+400    	; 0xe552 <compile_expr_stmt+0x218>
    e3c2:	cb 01       	movw	r24, r22
    e3c4:	8f 70       	andi	r24, 0x0F	; 15
    e3c6:	99 27       	eor	r25, r25
    e3c8:	02 97       	sbiw	r24, 0x02	; 2
    e3ca:	09 f0       	breq	.+2      	; 0xe3ce <compile_expr_stmt+0x94>
    e3cc:	df c0       	rjmp	.+446    	; 0xe58c <compile_expr_stmt+0x252>
    e3ce:	05 c0       	rjmp	.+10     	; 0xe3da <compile_expr_stmt+0xa0>
    e3d0:	fb 01       	movw	r30, r22
    e3d2:	84 81       	ldd	r24, Z+4	; 0x04
    e3d4:	85 33       	cpi	r24, 0x35	; 53
    e3d6:	09 f4       	brne	.+2      	; 0xe3da <compile_expr_stmt+0xa0>
    e3d8:	d9 c0       	rjmp	.+434    	; 0xe58c <compile_expr_stmt+0x252>
    e3da:	ce 01       	movw	r24, r28
    e3dc:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e3e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e3e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e3e4:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
    e3e8:	d1 c0       	rjmp	.+418    	; 0xe58c <compile_expr_stmt+0x252>
    e3ea:	cb 01       	movw	r24, r22
    e3ec:	83 70       	andi	r24, 0x03	; 3
    e3ee:	99 27       	eor	r25, r25
    e3f0:	89 2b       	or	r24, r25
    e3f2:	09 f0       	breq	.+2      	; 0xe3f6 <compile_expr_stmt+0xbc>
    e3f4:	a3 c0       	rjmp	.+326    	; 0xe53c <compile_expr_stmt+0x202>
    e3f6:	7b 01       	movw	r14, r22
    e3f8:	db 01       	movw	r26, r22
    e3fa:	14 96       	adiw	r26, 0x04	; 4
    e3fc:	8d 90       	ld	r8, X+
    e3fe:	9d 90       	ld	r9, X+
    e400:	ad 90       	ld	r10, X+
    e402:	bc 90       	ld	r11, X
    e404:	17 97       	sbiw	r26, 0x07	; 7
    e406:	c4 01       	movw	r24, r8
    e408:	99 27       	eor	r25, r25
    e40a:	85 35       	cpi	r24, 0x55	; 85
    e40c:	91 05       	cpc	r25, r1
    e40e:	31 f5       	brne	.+76     	; 0xe45c <compile_expr_stmt+0x122>
    e410:	1a 96       	adiw	r26, 0x0a	; 10
    e412:	6d 91       	ld	r22, X+
    e414:	7c 91       	ld	r23, X
    e416:	1b 97       	sbiw	r26, 0x0b	; 11
    e418:	61 15       	cp	r22, r1
    e41a:	71 05       	cpc	r23, r1
    e41c:	09 f0       	breq	.+2      	; 0xe420 <compile_expr_stmt+0xe6>
    e41e:	8e c0       	rjmp	.+284    	; 0xe53c <compile_expr_stmt+0x202>
    e420:	e9 8d       	ldd	r30, Y+25	; 0x19
    e422:	fa 8d       	ldd	r31, Y+26	; 0x1a
    e424:	80 81       	ld	r24, Z
    e426:	87 30       	cpi	r24, 0x07	; 7
    e428:	09 f0       	breq	.+2      	; 0xe42c <compile_expr_stmt+0xf2>
    e42a:	b0 c0       	rjmp	.+352    	; 0xe58c <compile_expr_stmt+0x252>
    e42c:	d8 01       	movw	r26, r16
    e42e:	18 96       	adiw	r26, 0x08	; 8
    e430:	8d 91       	ld	r24, X+
    e432:	9c 91       	ld	r25, X
    e434:	19 97       	sbiw	r26, 0x09	; 9
    e436:	9c 01       	movw	r18, r24
    e438:	2f 70       	andi	r18, 0x0F	; 15
    e43a:	33 27       	eor	r19, r19
    e43c:	22 30       	cpi	r18, 0x02	; 2
    e43e:	31 05       	cpc	r19, r1
    e440:	09 f0       	breq	.+2      	; 0xe444 <compile_expr_stmt+0x10a>
    e442:	a4 c0       	rjmp	.+328    	; 0xe58c <compile_expr_stmt+0x252>
    e444:	bc 01       	movw	r22, r24
    e446:	72 95       	swap	r23
    e448:	62 95       	swap	r22
    e44a:	6f 70       	andi	r22, 0x0F	; 15
    e44c:	67 27       	eor	r22, r23
    e44e:	7f 70       	andi	r23, 0x0F	; 15
    e450:	67 27       	eor	r22, r23
    e452:	43 e0       	ldi	r20, 0x03	; 3
    e454:	cf 01       	movw	r24, r30
    e456:	0e 94 f7 55 	call	0xabee	; 0xabee <scope_find_or_add_id>
    e45a:	98 c0       	rjmp	.+304    	; 0xe58c <compile_expr_stmt+0x252>
    e45c:	80 35       	cpi	r24, 0x50	; 80
    e45e:	91 05       	cpc	r25, r1
    e460:	71 f5       	brne	.+92     	; 0xe4be <compile_expr_stmt+0x184>
    e462:	f8 01       	movw	r30, r16
    e464:	60 85       	ldd	r22, Z+8	; 0x08
    e466:	71 85       	ldd	r23, Z+9	; 0x09
    e468:	41 e0       	ldi	r20, 0x01	; 1
    e46a:	ce 01       	movw	r24, r28
    e46c:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e470:	d7 01       	movw	r26, r14
    e472:	1a 96       	adiw	r26, 0x0a	; 10
    e474:	6d 91       	ld	r22, X+
    e476:	7c 91       	ld	r23, X
    e478:	1b 97       	sbiw	r26, 0x0b	; 11
    e47a:	ce 01       	movw	r24, r28
    e47c:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e480:	f7 01       	movw	r30, r14
    e482:	60 85       	ldd	r22, Z+8	; 0x08
    e484:	71 85       	ldd	r23, Z+9	; 0x09
    e486:	cb 01       	movw	r24, r22
    e488:	8f 70       	andi	r24, 0x0F	; 15
    e48a:	99 27       	eor	r25, r25
    e48c:	0e 97       	sbiw	r24, 0x0e	; 14
    e48e:	11 f0       	breq	.+4      	; 0xe494 <compile_expr_stmt+0x15a>
    e490:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e494:	72 95       	swap	r23
    e496:	62 95       	swap	r22
    e498:	6f 70       	andi	r22, 0x0F	; 15
    e49a:	67 27       	eor	r22, r23
    e49c:	7f 70       	andi	r23, 0x0F	; 15
    e49e:	67 27       	eor	r22, r23
    e4a0:	6b 53       	subi	r22, 0x3B	; 59
    e4a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e4a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e4a6:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <mp_emit_bc_binary_op>
    e4aa:	d8 01       	movw	r26, r16
    e4ac:	18 96       	adiw	r26, 0x08	; 8
    e4ae:	6d 91       	ld	r22, X+
    e4b0:	7c 91       	ld	r23, X
    e4b2:	19 97       	sbiw	r26, 0x09	; 9
    e4b4:	42 e0       	ldi	r20, 0x02	; 2
    e4b6:	ce 01       	movw	r24, r28
    e4b8:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e4bc:	67 c0       	rjmp	.+206    	; 0xe58c <compile_expr_stmt+0x252>
    e4be:	81 35       	cpi	r24, 0x51	; 81
    e4c0:	91 05       	cpc	r25, r1
    e4c2:	e1 f5       	brne	.+120    	; 0xe53c <compile_expr_stmt+0x202>
    e4c4:	89 2c       	mov	r8, r9
    e4c6:	9a 2c       	mov	r9, r10
    e4c8:	ab 2c       	mov	r10, r11
    e4ca:	bb 24       	eor	r11, r11
    e4cc:	64 01       	movw	r12, r8
    e4ce:	b1 e0       	ldi	r27, 0x01	; 1
    e4d0:	cb 1a       	sub	r12, r27
    e4d2:	d1 08       	sbc	r13, r1
    e4d4:	f4 01       	movw	r30, r8
    e4d6:	33 96       	adiw	r30, 0x03	; 3
    e4d8:	ee 0f       	add	r30, r30
    e4da:	ff 1f       	adc	r31, r31
    e4dc:	e6 0f       	add	r30, r22
    e4de:	f7 1f       	adc	r31, r23
    e4e0:	60 81       	ld	r22, Z
    e4e2:	71 81       	ldd	r23, Z+1	; 0x01
    e4e4:	ce 01       	movw	r24, r28
    e4e6:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e4ea:	1c 14       	cp	r1, r12
    e4ec:	1d 04       	cpc	r1, r13
    e4ee:	b4 f5       	brge	.+108    	; 0xe55c <compile_expr_stmt+0x222>
    e4f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e4f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e4f4:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    e4f8:	f8 01       	movw	r30, r16
    e4fa:	60 85       	ldd	r22, Z+8	; 0x08
    e4fc:	71 85       	ldd	r23, Z+9	; 0x09
    e4fe:	40 e0       	ldi	r20, 0x00	; 0
    e500:	ce 01       	movw	r24, r28
    e502:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e506:	87 01       	movw	r16, r14
    e508:	08 5f       	subi	r16, 0xF8	; 248
    e50a:	1f 4f       	sbci	r17, 0xFF	; 255
    e50c:	64 01       	movw	r12, r8
    e50e:	f2 e0       	ldi	r31, 0x02	; 2
    e510:	cf 0e       	add	r12, r31
    e512:	d1 1c       	adc	r13, r1
    e514:	cc 0c       	add	r12, r12
    e516:	dd 1c       	adc	r13, r13
    e518:	ce 0c       	add	r12, r14
    e51a:	df 1c       	adc	r13, r15
    e51c:	c0 16       	cp	r12, r16
    e51e:	d1 06       	cpc	r13, r17
    e520:	39 f1       	breq	.+78     	; 0xe570 <compile_expr_stmt+0x236>
    e522:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e524:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e526:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <mp_emit_bc_dup_top>
    e52a:	d8 01       	movw	r26, r16
    e52c:	6d 91       	ld	r22, X+
    e52e:	7d 91       	ld	r23, X+
    e530:	8d 01       	movw	r16, r26
    e532:	40 e0       	ldi	r20, 0x00	; 0
    e534:	ce 01       	movw	r24, r28
    e536:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e53a:	f0 cf       	rjmp	.-32     	; 0xe51c <compile_expr_stmt+0x1e2>
    e53c:	ce 01       	movw	r24, r28
    e53e:	0e 94 b0 57 	call	0xaf60	; 0xaf60 <compile_node>
    e542:	f8 01       	movw	r30, r16
    e544:	60 85       	ldd	r22, Z+8	; 0x08
    e546:	71 85       	ldd	r23, Z+9	; 0x09
    e548:	40 e0       	ldi	r20, 0x00	; 0
    e54a:	ce 01       	movw	r24, r28
    e54c:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e550:	1d c0       	rjmp	.+58     	; 0xe58c <compile_expr_stmt+0x252>
    e552:	61 15       	cp	r22, r1
    e554:	71 05       	cpc	r23, r1
    e556:	09 f0       	breq	.+2      	; 0xe55a <compile_expr_stmt+0x220>
    e558:	3b cf       	rjmp	.-394    	; 0xe3d0 <compile_expr_stmt+0x96>
    e55a:	3f cf       	rjmp	.-386    	; 0xe3da <compile_expr_stmt+0xa0>
    e55c:	d8 01       	movw	r26, r16
    e55e:	18 96       	adiw	r26, 0x08	; 8
    e560:	6d 91       	ld	r22, X+
    e562:	7c 91       	ld	r23, X
    e564:	19 97       	sbiw	r26, 0x09	; 9
    e566:	40 e0       	ldi	r20, 0x00	; 0
    e568:	ce 01       	movw	r24, r28
    e56a:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e56e:	0e c0       	rjmp	.+28     	; 0xe58c <compile_expr_stmt+0x252>
    e570:	b2 e0       	ldi	r27, 0x02	; 2
    e572:	8b 0e       	add	r8, r27
    e574:	91 1c       	adc	r9, r1
    e576:	88 0c       	add	r8, r8
    e578:	99 1c       	adc	r9, r9
    e57a:	f7 01       	movw	r30, r14
    e57c:	e8 0d       	add	r30, r8
    e57e:	f9 1d       	adc	r31, r9
    e580:	60 81       	ld	r22, Z
    e582:	71 81       	ldd	r23, Z+1	; 0x01
    e584:	40 e0       	ldi	r20, 0x00	; 0
    e586:	ce 01       	movw	r24, r28
    e588:	0e 94 89 64 	call	0xc912	; 0xc912 <c_assign>
    e58c:	df 91       	pop	r29
    e58e:	cf 91       	pop	r28
    e590:	1f 91       	pop	r17
    e592:	0f 91       	pop	r16
    e594:	ff 90       	pop	r15
    e596:	ef 90       	pop	r14
    e598:	df 90       	pop	r13
    e59a:	cf 90       	pop	r12
    e59c:	bf 90       	pop	r11
    e59e:	af 90       	pop	r10
    e5a0:	9f 90       	pop	r9
    e5a2:	8f 90       	pop	r8
    e5a4:	08 95       	ret

0000e5a6 <mp_obj_list_append>:
    e5a6:	0f 93       	push	r16
    e5a8:	1f 93       	push	r17
    e5aa:	cf 93       	push	r28
    e5ac:	df 93       	push	r29
    e5ae:	ec 01       	movw	r28, r24
    e5b0:	8b 01       	movw	r16, r22
    e5b2:	83 70       	andi	r24, 0x03	; 3
    e5b4:	99 27       	eor	r25, r25
    e5b6:	89 2b       	or	r24, r25
    e5b8:	29 f4       	brne	.+10     	; 0xe5c4 <mp_obj_list_append+0x1e>
    e5ba:	88 81       	ld	r24, Y
    e5bc:	99 81       	ldd	r25, Y+1	; 0x01
    e5be:	8c 52       	subi	r24, 0x2C	; 44
    e5c0:	9d 41       	sbci	r25, 0x1D	; 29
    e5c2:	11 f0       	breq	.+4      	; 0xe5c8 <mp_obj_list_append+0x22>
    e5c4:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e5c8:	6a 81       	ldd	r22, Y+2	; 0x02
    e5ca:	7b 81       	ldd	r23, Y+3	; 0x03
    e5cc:	8c 81       	ldd	r24, Y+4	; 0x04
    e5ce:	9d 81       	ldd	r25, Y+5	; 0x05
    e5d0:	86 17       	cp	r24, r22
    e5d2:	97 07       	cpc	r25, r23
    e5d4:	10 f1       	brcs	.+68     	; 0xe61a <mp_obj_list_append+0x74>
    e5d6:	66 0f       	add	r22, r22
    e5d8:	77 1f       	adc	r23, r23
    e5da:	66 0f       	add	r22, r22
    e5dc:	77 1f       	adc	r23, r23
    e5de:	8e 81       	ldd	r24, Y+6	; 0x06
    e5e0:	9f 81       	ldd	r25, Y+7	; 0x07
    e5e2:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
    e5e6:	9f 83       	std	Y+7, r25	; 0x07
    e5e8:	8e 83       	std	Y+6, r24	; 0x06
    e5ea:	4a 81       	ldd	r20, Y+2	; 0x02
    e5ec:	5b 81       	ldd	r21, Y+3	; 0x03
    e5ee:	44 0f       	add	r20, r20
    e5f0:	55 1f       	adc	r21, r21
    e5f2:	5b 83       	std	Y+3, r21	; 0x03
    e5f4:	4a 83       	std	Y+2, r20	; 0x02
    e5f6:	2c 81       	ldd	r18, Y+4	; 0x04
    e5f8:	3d 81       	ldd	r19, Y+5	; 0x05
    e5fa:	42 1b       	sub	r20, r18
    e5fc:	53 0b       	sbc	r21, r19
    e5fe:	41 50       	subi	r20, 0x01	; 1
    e600:	50 48       	sbci	r21, 0x80	; 128
    e602:	44 0f       	add	r20, r20
    e604:	55 1f       	adc	r21, r21
    e606:	2f 5f       	subi	r18, 0xFF	; 255
    e608:	3f 4f       	sbci	r19, 0xFF	; 255
    e60a:	22 0f       	add	r18, r18
    e60c:	33 1f       	adc	r19, r19
    e60e:	60 e0       	ldi	r22, 0x00	; 0
    e610:	70 e0       	ldi	r23, 0x00	; 0
    e612:	82 0f       	add	r24, r18
    e614:	93 1f       	adc	r25, r19
    e616:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    e61a:	ee 81       	ldd	r30, Y+6	; 0x06
    e61c:	ff 81       	ldd	r31, Y+7	; 0x07
    e61e:	8c 81       	ldd	r24, Y+4	; 0x04
    e620:	9d 81       	ldd	r25, Y+5	; 0x05
    e622:	9c 01       	movw	r18, r24
    e624:	2f 5f       	subi	r18, 0xFF	; 255
    e626:	3f 4f       	sbci	r19, 0xFF	; 255
    e628:	3d 83       	std	Y+5, r19	; 0x05
    e62a:	2c 83       	std	Y+4, r18	; 0x04
    e62c:	88 0f       	add	r24, r24
    e62e:	99 1f       	adc	r25, r25
    e630:	e8 0f       	add	r30, r24
    e632:	f9 1f       	adc	r31, r25
    e634:	11 83       	std	Z+1, r17	; 0x01
    e636:	00 83       	st	Z, r16
    e638:	86 e0       	ldi	r24, 0x06	; 6
    e63a:	90 e0       	ldi	r25, 0x00	; 0
    e63c:	df 91       	pop	r29
    e63e:	cf 91       	pop	r28
    e640:	1f 91       	pop	r17
    e642:	0f 91       	pop	r16
    e644:	08 95       	ret

0000e646 <list_insert>:
    e646:	ef 92       	push	r14
    e648:	ff 92       	push	r15
    e64a:	0f 93       	push	r16
    e64c:	1f 93       	push	r17
    e64e:	cf 93       	push	r28
    e650:	df 93       	push	r29
    e652:	7c 01       	movw	r14, r24
    e654:	8a 01       	movw	r16, r20
    e656:	83 70       	andi	r24, 0x03	; 3
    e658:	99 27       	eor	r25, r25
    e65a:	89 2b       	or	r24, r25
    e65c:	31 f4       	brne	.+12     	; 0xe66a <list_insert+0x24>
    e65e:	d7 01       	movw	r26, r14
    e660:	8d 91       	ld	r24, X+
    e662:	9c 91       	ld	r25, X
    e664:	8c 52       	subi	r24, 0x2C	; 44
    e666:	9d 41       	sbci	r25, 0x1D	; 29
    e668:	11 f0       	breq	.+4      	; 0xe66e <list_insert+0x28>
    e66a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    e66e:	eb 01       	movw	r28, r22
    e670:	d5 95       	asr	r29
    e672:	c7 95       	ror	r28
    e674:	dd 23       	and	r29, r29
    e676:	2c f4       	brge	.+10     	; 0xe682 <list_insert+0x3c>
    e678:	f7 01       	movw	r30, r14
    e67a:	84 81       	ldd	r24, Z+4	; 0x04
    e67c:	95 81       	ldd	r25, Z+5	; 0x05
    e67e:	c8 0f       	add	r28, r24
    e680:	d9 1f       	adc	r29, r25
    e682:	dd 23       	and	r29, r29
    e684:	14 f4       	brge	.+4      	; 0xe68a <list_insert+0x44>
    e686:	c0 e0       	ldi	r28, 0x00	; 0
    e688:	d0 e0       	ldi	r29, 0x00	; 0
    e68a:	d7 01       	movw	r26, r14
    e68c:	14 96       	adiw	r26, 0x04	; 4
    e68e:	8d 91       	ld	r24, X+
    e690:	9c 91       	ld	r25, X
    e692:	15 97       	sbiw	r26, 0x05	; 5
    e694:	8c 17       	cp	r24, r28
    e696:	9d 07       	cpc	r25, r29
    e698:	08 f4       	brcc	.+2      	; 0xe69c <list_insert+0x56>
    e69a:	ec 01       	movw	r28, r24
    e69c:	66 e0       	ldi	r22, 0x06	; 6
    e69e:	70 e0       	ldi	r23, 0x00	; 0
    e6a0:	c7 01       	movw	r24, r14
    e6a2:	81 df       	rcall	.-254    	; 0xe5a6 <mp_obj_list_append>
    e6a4:	f7 01       	movw	r30, r14
    e6a6:	84 81       	ldd	r24, Z+4	; 0x04
    e6a8:	95 81       	ldd	r25, Z+5	; 0x05
    e6aa:	9c 01       	movw	r18, r24
    e6ac:	21 50       	subi	r18, 0x01	; 1
    e6ae:	31 09       	sbc	r19, r1
    e6b0:	c2 17       	cp	r28, r18
    e6b2:	d3 07       	cpc	r29, r19
    e6b4:	bc f4       	brge	.+46     	; 0xe6e4 <list_insert+0x9e>
    e6b6:	81 50       	subi	r24, 0x01	; 1
    e6b8:	90 48       	sbci	r25, 0x80	; 128
    e6ba:	88 0f       	add	r24, r24
    e6bc:	99 1f       	adc	r25, r25
    e6be:	d7 01       	movw	r26, r14
    e6c0:	16 96       	adiw	r26, 0x06	; 6
    e6c2:	ed 91       	ld	r30, X+
    e6c4:	fc 91       	ld	r31, X
    e6c6:	17 97       	sbiw	r26, 0x07	; 7
    e6c8:	e8 0f       	add	r30, r24
    e6ca:	f9 1f       	adc	r31, r25
    e6cc:	df 01       	movw	r26, r30
    e6ce:	12 97       	sbiw	r26, 0x02	; 2
    e6d0:	4d 91       	ld	r20, X+
    e6d2:	5c 91       	ld	r21, X
    e6d4:	51 83       	std	Z+1, r21	; 0x01
    e6d6:	40 83       	st	Z, r20
    e6d8:	21 50       	subi	r18, 0x01	; 1
    e6da:	31 09       	sbc	r19, r1
    e6dc:	02 97       	sbiw	r24, 0x02	; 2
    e6de:	c2 17       	cp	r28, r18
    e6e0:	d3 07       	cpc	r29, r19
    e6e2:	6c f3       	brlt	.-38     	; 0xe6be <list_insert+0x78>
    e6e4:	cc 0f       	add	r28, r28
    e6e6:	dd 1f       	adc	r29, r29
    e6e8:	f7 01       	movw	r30, r14
    e6ea:	86 81       	ldd	r24, Z+6	; 0x06
    e6ec:	97 81       	ldd	r25, Z+7	; 0x07
    e6ee:	c8 0f       	add	r28, r24
    e6f0:	d9 1f       	adc	r29, r25
    e6f2:	19 83       	std	Y+1, r17	; 0x01
    e6f4:	08 83       	st	Y, r16
    e6f6:	86 e0       	ldi	r24, 0x06	; 6
    e6f8:	90 e0       	ldi	r25, 0x00	; 0
    e6fa:	df 91       	pop	r29
    e6fc:	cf 91       	pop	r28
    e6fe:	1f 91       	pop	r17
    e700:	0f 91       	pop	r16
    e702:	ff 90       	pop	r15
    e704:	ef 90       	pop	r14
    e706:	08 95       	ret

0000e708 <mp_obj_str_split>:
    e708:	2f 92       	push	r2
    e70a:	3f 92       	push	r3
    e70c:	4f 92       	push	r4
    e70e:	5f 92       	push	r5
    e710:	6f 92       	push	r6
    e712:	7f 92       	push	r7
    e714:	8f 92       	push	r8
    e716:	9f 92       	push	r9
    e718:	af 92       	push	r10
    e71a:	bf 92       	push	r11
    e71c:	cf 92       	push	r12
    e71e:	df 92       	push	r13
    e720:	ef 92       	push	r14
    e722:	ff 92       	push	r15
    e724:	0f 93       	push	r16
    e726:	1f 93       	push	r17
    e728:	cf 93       	push	r28
    e72a:	df 93       	push	r29
    e72c:	cd b7       	in	r28, 0x3d	; 61
    e72e:	de b7       	in	r29, 0x3e	; 62
    e730:	28 97       	sbiw	r28, 0x08	; 8
    e732:	0f b6       	in	r0, 0x3f	; 63
    e734:	f8 94       	cli
    e736:	de bf       	out	0x3e, r29	; 62
    e738:	0f be       	out	0x3f, r0	; 63
    e73a:	cd bf       	out	0x3d, r28	; 61
    e73c:	6c 01       	movw	r12, r24
    e73e:	7b 01       	movw	r14, r22
    e740:	db 01       	movw	r26, r22
    e742:	8d 91       	ld	r24, X+
    e744:	9c 91       	ld	r25, X
    e746:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    e74a:	2c 01       	movw	r4, r24
    e74c:	b2 e0       	ldi	r27, 0x02	; 2
    e74e:	cb 16       	cp	r12, r27
    e750:	d1 04       	cpc	r13, r1
    e752:	80 f0       	brcs	.+32     	; 0xe774 <mp_obj_str_split+0x6c>
    e754:	f7 01       	movw	r30, r14
    e756:	02 81       	ldd	r16, Z+2	; 0x02
    e758:	13 81       	ldd	r17, Z+3	; 0x03
    e75a:	f3 e0       	ldi	r31, 0x03	; 3
    e75c:	cf 16       	cp	r12, r31
    e75e:	d1 04       	cpc	r13, r1
    e760:	78 f0       	brcs	.+30     	; 0xe780 <mp_obj_str_split+0x78>
    e762:	d7 01       	movw	r26, r14
    e764:	14 96       	adiw	r26, 0x04	; 4
    e766:	8d 91       	ld	r24, X+
    e768:	9c 91       	ld	r25, X
    e76a:	15 97       	sbiw	r26, 0x05	; 5
    e76c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    e770:	4c 01       	movw	r8, r24
    e772:	09 c0       	rjmp	.+18     	; 0xe786 <mp_obj_str_split+0x7e>
    e774:	06 e0       	ldi	r16, 0x06	; 6
    e776:	10 e0       	ldi	r17, 0x00	; 0
    e778:	88 24       	eor	r8, r8
    e77a:	8a 94       	dec	r8
    e77c:	98 2c       	mov	r9, r8
    e77e:	03 c0       	rjmp	.+6      	; 0xe786 <mp_obj_str_split+0x7e>
    e780:	88 24       	eor	r8, r8
    e782:	8a 94       	dec	r8
    e784:	98 2c       	mov	r9, r8
    e786:	60 e0       	ldi	r22, 0x00	; 0
    e788:	70 e0       	ldi	r23, 0x00	; 0
    e78a:	80 e0       	ldi	r24, 0x00	; 0
    e78c:	90 e0       	ldi	r25, 0x00	; 0
    e78e:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
    e792:	9e 83       	std	Y+6, r25	; 0x06
    e794:	8d 83       	std	Y+5, r24	; 0x05
    e796:	d7 01       	movw	r26, r14
    e798:	ed 91       	ld	r30, X+
    e79a:	fc 91       	ld	r31, X
    e79c:	cf 01       	movw	r24, r30
    e79e:	87 70       	andi	r24, 0x07	; 7
    e7a0:	99 27       	eor	r25, r25
    e7a2:	02 97       	sbiw	r24, 0x02	; 2
    e7a4:	71 f4       	brne	.+28     	; 0xe7c2 <mp_obj_str_split+0xba>
    e7a6:	be 01       	movw	r22, r28
    e7a8:	6f 5f       	subi	r22, 0xFF	; 255
    e7aa:	7f 4f       	sbci	r23, 0xFF	; 255
    e7ac:	cf 01       	movw	r24, r30
    e7ae:	96 95       	lsr	r25
    e7b0:	87 95       	ror	r24
    e7b2:	96 95       	lsr	r25
    e7b4:	87 95       	ror	r24
    e7b6:	96 95       	lsr	r25
    e7b8:	87 95       	ror	r24
    e7ba:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    e7be:	5c 01       	movw	r10, r24
    e7c0:	06 c0       	rjmp	.+12     	; 0xe7ce <mp_obj_str_split+0xc6>
    e7c2:	84 81       	ldd	r24, Z+4	; 0x04
    e7c4:	95 81       	ldd	r25, Z+5	; 0x05
    e7c6:	9a 83       	std	Y+2, r25	; 0x02
    e7c8:	89 83       	std	Y+1, r24	; 0x01
    e7ca:	a6 80       	ldd	r10, Z+6	; 0x06
    e7cc:	b7 80       	ldd	r11, Z+7	; 0x07
    e7ce:	c9 80       	ldd	r12, Y+1	; 0x01
    e7d0:	da 80       	ldd	r13, Y+2	; 0x02
    e7d2:	ca 0c       	add	r12, r10
    e7d4:	db 1c       	adc	r13, r11
    e7d6:	06 30       	cpi	r16, 0x06	; 6
    e7d8:	11 05       	cpc	r17, r1
    e7da:	09 f0       	breq	.+2      	; 0xe7de <mp_obj_str_split+0xd6>
    e7dc:	73 c0       	rjmp	.+230    	; 0xe8c4 <mp_obj_str_split+0x1bc>
    e7de:	ac 14       	cp	r10, r12
    e7e0:	bd 04       	cpc	r11, r13
    e7e2:	70 f0       	brcs	.+28     	; 0xe800 <mp_obj_str_split+0xf8>
    e7e4:	d5 c0       	rjmp	.+426    	; 0xe990 <mp_obj_str_split+0x288>
    e7e6:	18 01       	movw	r2, r16
    e7e8:	60 16       	cp	r6, r16
    e7ea:	71 06       	cpc	r7, r17
    e7ec:	59 f4       	brne	.+22     	; 0xe804 <mp_obj_str_split+0xfc>
    e7ee:	59 c0       	rjmp	.+178    	; 0xe8a2 <mp_obj_str_split+0x19a>
    e7f0:	ac 14       	cp	r10, r12
    e7f2:	bd 04       	cpc	r11, r13
    e7f4:	08 f0       	brcs	.+2      	; 0xe7f8 <mp_obj_str_split+0xf0>
    e7f6:	cc c0       	rjmp	.+408    	; 0xe990 <mp_obj_str_split+0x288>
    e7f8:	81 14       	cp	r8, r1
    e7fa:	91 04       	cpc	r9, r1
    e7fc:	a1 f4       	brne	.+40     	; 0xe826 <mp_obj_str_split+0x11e>
    e7fe:	56 c0       	rjmp	.+172    	; 0xe8ac <mp_obj_str_split+0x1a4>
    e800:	85 01       	movw	r16, r10
    e802:	36 01       	movw	r6, r12
    e804:	58 01       	movw	r10, r16
    e806:	0f 5f       	subi	r16, 0xFF	; 255
    e808:	1f 4f       	sbci	r17, 0xFF	; 255
    e80a:	f5 01       	movw	r30, r10
    e80c:	80 81       	ld	r24, Z
    e80e:	90 e0       	ldi	r25, 0x00	; 0
    e810:	0e 94 de 00 	call	0x1bc	; 0x1bc <unichar_isspace>
    e814:	81 11       	cpse	r24, r1
    e816:	e7 cf       	rjmp	.-50     	; 0xe7e6 <mp_obj_str_split+0xde>
    e818:	eb cf       	rjmp	.-42     	; 0xe7f0 <mp_obj_str_split+0xe8>
    e81a:	17 01       	movw	r2, r14
    e81c:	87 01       	movw	r16, r14
    e81e:	ec 14       	cp	r14, r12
    e820:	fd 04       	cpc	r15, r13
    e822:	38 f0       	brcs	.+14     	; 0xe832 <mp_obj_str_split+0x12a>
    e824:	9e c0       	rjmp	.+316    	; 0xe962 <mp_obj_str_split+0x25a>
    e826:	b8 86       	std	Y+8, r11	; 0x08
    e828:	af 82       	std	Y+7, r10	; 0x07
    e82a:	02 c0       	rjmp	.+4      	; 0xe830 <mp_obj_str_split+0x128>
    e82c:	b8 86       	std	Y+8, r11	; 0x08
    e82e:	af 82       	std	Y+7, r10	; 0x07
    e830:	85 01       	movw	r16, r10
    e832:	78 01       	movw	r14, r16
    e834:	ff ef       	ldi	r31, 0xFF	; 255
    e836:	ef 1a       	sub	r14, r31
    e838:	ff 0a       	sbc	r15, r31
    e83a:	d8 01       	movw	r26, r16
    e83c:	8c 91       	ld	r24, X
    e83e:	90 e0       	ldi	r25, 0x00	; 0
    e840:	0e 94 de 00 	call	0x1bc	; 0x1bc <unichar_isspace>
    e844:	88 23       	and	r24, r24
    e846:	49 f3       	breq	.-46     	; 0xe81a <mp_obj_str_split+0x112>
    e848:	a8 01       	movw	r20, r16
    e84a:	ef 81       	ldd	r30, Y+7	; 0x07
    e84c:	f8 85       	ldd	r31, Y+8	; 0x08
    e84e:	4e 1b       	sub	r20, r30
    e850:	5f 0b       	sbc	r21, r31
    e852:	bf 01       	movw	r22, r30
    e854:	c2 01       	movw	r24, r4
    e856:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    e85a:	bc 01       	movw	r22, r24
    e85c:	8d 81       	ldd	r24, Y+5	; 0x05
    e85e:	9e 81       	ldd	r25, Y+6	; 0x06
    e860:	a2 de       	rcall	.-700    	; 0xe5a6 <mp_obj_list_append>
    e862:	0c 15       	cp	r16, r12
    e864:	1d 05       	cpc	r17, r13
    e866:	28 f0       	brcs	.+10     	; 0xe872 <mp_obj_str_split+0x16a>
    e868:	93 c0       	rjmp	.+294    	; 0xe990 <mp_obj_str_split+0x288>
    e86a:	58 01       	movw	r10, r16
    e86c:	60 16       	cp	r6, r16
    e86e:	71 06       	cpc	r7, r17
    e870:	51 f0       	breq	.+20     	; 0xe886 <mp_obj_str_split+0x17e>
    e872:	58 01       	movw	r10, r16
    e874:	0f 5f       	subi	r16, 0xFF	; 255
    e876:	1f 4f       	sbci	r17, 0xFF	; 255
    e878:	d5 01       	movw	r26, r10
    e87a:	8c 91       	ld	r24, X
    e87c:	90 e0       	ldi	r25, 0x00	; 0
    e87e:	0e 94 de 00 	call	0x1bc	; 0x1bc <unichar_isspace>
    e882:	81 11       	cpse	r24, r1
    e884:	f2 cf       	rjmp	.-28     	; 0xe86a <mp_obj_str_split+0x162>
    e886:	18 14       	cp	r1, r8
    e888:	19 04       	cpc	r1, r9
    e88a:	1c f4       	brge	.+6      	; 0xe892 <mp_obj_str_split+0x18a>
    e88c:	b1 e0       	ldi	r27, 0x01	; 1
    e88e:	8b 1a       	sub	r8, r27
    e890:	91 08       	sbc	r9, r1
    e892:	ac 14       	cp	r10, r12
    e894:	bd 04       	cpc	r11, r13
    e896:	08 f0       	brcs	.+2      	; 0xe89a <mp_obj_str_split+0x192>
    e898:	7b c0       	rjmp	.+246    	; 0xe990 <mp_obj_str_split+0x288>
    e89a:	81 14       	cp	r8, r1
    e89c:	91 04       	cpc	r9, r1
    e89e:	31 f6       	brne	.-116    	; 0xe82c <mp_obj_str_split+0x124>
    e8a0:	05 c0       	rjmp	.+10     	; 0xe8ac <mp_obj_str_split+0x1a4>
    e8a2:	2c 14       	cp	r2, r12
    e8a4:	3d 04       	cpc	r3, r13
    e8a6:	08 f0       	brcs	.+2      	; 0xe8aa <mp_obj_str_split+0x1a2>
    e8a8:	73 c0       	rjmp	.+230    	; 0xe990 <mp_obj_str_split+0x288>
    e8aa:	51 01       	movw	r10, r2
    e8ac:	a6 01       	movw	r20, r12
    e8ae:	4a 19       	sub	r20, r10
    e8b0:	5b 09       	sbc	r21, r11
    e8b2:	b5 01       	movw	r22, r10
    e8b4:	c2 01       	movw	r24, r4
    e8b6:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    e8ba:	bc 01       	movw	r22, r24
    e8bc:	8d 81       	ldd	r24, Y+5	; 0x05
    e8be:	9e 81       	ldd	r25, Y+6	; 0x06
    e8c0:	72 de       	rcall	.-796    	; 0xe5a6 <mp_obj_list_append>
    e8c2:	66 c0       	rjmp	.+204    	; 0xe990 <mp_obj_str_split+0x288>
    e8c4:	c8 01       	movw	r24, r16
    e8c6:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    e8ca:	48 16       	cp	r4, r24
    e8cc:	59 06       	cpc	r5, r25
    e8ce:	21 f0       	breq	.+8      	; 0xe8d8 <mp_obj_str_split+0x1d0>
    e8d0:	81 e7       	ldi	r24, 0x71	; 113
    e8d2:	94 e0       	ldi	r25, 0x04	; 4
    e8d4:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    e8d8:	be 01       	movw	r22, r28
    e8da:	6d 5f       	subi	r22, 0xFD	; 253
    e8dc:	7f 4f       	sbci	r23, 0xFF	; 255
    e8de:	c8 01       	movw	r24, r16
    e8e0:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
    e8e4:	3c 01       	movw	r6, r24
    e8e6:	8b 81       	ldd	r24, Y+3	; 0x03
    e8e8:	9c 81       	ldd	r25, Y+4	; 0x04
    e8ea:	89 2b       	or	r24, r25
    e8ec:	21 f4       	brne	.+8      	; 0xe8f6 <mp_obj_str_split+0x1ee>
    e8ee:	83 e2       	ldi	r24, 0x23	; 35
    e8f0:	9a e0       	ldi	r25, 0x0A	; 10
    e8f2:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    e8f6:	81 14       	cp	r8, r1
    e8f8:	91 04       	cpc	r9, r1
    e8fa:	09 f4       	brne	.+2      	; 0xe8fe <mp_obj_str_split+0x1f6>
    e8fc:	3e c0       	rjmp	.+124    	; 0xe97a <mp_obj_str_split+0x272>
    e8fe:	eb 80       	ldd	r14, Y+3	; 0x03
    e900:	fc 80       	ldd	r15, Y+4	; 0x04
    e902:	c5 01       	movw	r24, r10
    e904:	8e 0d       	add	r24, r14
    e906:	9f 1d       	adc	r25, r15
    e908:	c8 16       	cp	r12, r24
    e90a:	d9 06       	cpc	r13, r25
    e90c:	b0 f1       	brcs	.+108    	; 0xe97a <mp_obj_str_split+0x272>
    e90e:	85 01       	movw	r16, r10
    e910:	a7 01       	movw	r20, r14
    e912:	b3 01       	movw	r22, r6
    e914:	c8 01       	movw	r24, r16
    e916:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    e91a:	89 2b       	or	r24, r25
    e91c:	49 f0       	breq	.+18     	; 0xe930 <mp_obj_str_split+0x228>
    e91e:	0f 5f       	subi	r16, 0xFF	; 255
    e920:	1f 4f       	sbci	r17, 0xFF	; 255
    e922:	c8 01       	movw	r24, r16
    e924:	8e 0d       	add	r24, r14
    e926:	9f 1d       	adc	r25, r15
    e928:	c8 16       	cp	r12, r24
    e92a:	d9 06       	cpc	r13, r25
    e92c:	88 f7       	brcc	.-30     	; 0xe910 <mp_obj_str_split+0x208>
    e92e:	25 c0       	rjmp	.+74     	; 0xe97a <mp_obj_str_split+0x272>
    e930:	a8 01       	movw	r20, r16
    e932:	4a 19       	sub	r20, r10
    e934:	5b 09       	sbc	r21, r11
    e936:	b5 01       	movw	r22, r10
    e938:	c2 01       	movw	r24, r4
    e93a:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    e93e:	bc 01       	movw	r22, r24
    e940:	8d 81       	ldd	r24, Y+5	; 0x05
    e942:	9e 81       	ldd	r25, Y+6	; 0x06
    e944:	30 de       	rcall	.-928    	; 0xe5a6 <mp_obj_list_append>
    e946:	0c 15       	cp	r16, r12
    e948:	1d 05       	cpc	r17, r13
    e94a:	10 f5       	brcc	.+68     	; 0xe990 <mp_obj_str_split+0x288>
    e94c:	ab 80       	ldd	r10, Y+3	; 0x03
    e94e:	bc 80       	ldd	r11, Y+4	; 0x04
    e950:	a0 0e       	add	r10, r16
    e952:	b1 1e       	adc	r11, r17
    e954:	18 14       	cp	r1, r8
    e956:	19 04       	cpc	r1, r9
    e958:	74 f6       	brge	.-100    	; 0xe8f6 <mp_obj_str_split+0x1ee>
    e95a:	e1 e0       	ldi	r30, 0x01	; 1
    e95c:	8e 1a       	sub	r8, r30
    e95e:	91 08       	sbc	r9, r1
    e960:	ca cf       	rjmp	.-108    	; 0xe8f6 <mp_obj_str_split+0x1ee>
    e962:	a7 01       	movw	r20, r14
    e964:	4a 19       	sub	r20, r10
    e966:	5b 09       	sbc	r21, r11
    e968:	b5 01       	movw	r22, r10
    e96a:	c2 01       	movw	r24, r4
    e96c:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    e970:	bc 01       	movw	r22, r24
    e972:	8d 81       	ldd	r24, Y+5	; 0x05
    e974:	9e 81       	ldd	r25, Y+6	; 0x06
    e976:	17 de       	rcall	.-978    	; 0xe5a6 <mp_obj_list_append>
    e978:	94 cf       	rjmp	.-216    	; 0xe8a2 <mp_obj_str_split+0x19a>
    e97a:	a6 01       	movw	r20, r12
    e97c:	4a 19       	sub	r20, r10
    e97e:	5b 09       	sbc	r21, r11
    e980:	b5 01       	movw	r22, r10
    e982:	c2 01       	movw	r24, r4
    e984:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    e988:	bc 01       	movw	r22, r24
    e98a:	8d 81       	ldd	r24, Y+5	; 0x05
    e98c:	9e 81       	ldd	r25, Y+6	; 0x06
    e98e:	0b de       	rcall	.-1002   	; 0xe5a6 <mp_obj_list_append>
    e990:	8d 81       	ldd	r24, Y+5	; 0x05
    e992:	9e 81       	ldd	r25, Y+6	; 0x06
    e994:	28 96       	adiw	r28, 0x08	; 8
    e996:	0f b6       	in	r0, 0x3f	; 63
    e998:	f8 94       	cli
    e99a:	de bf       	out	0x3e, r29	; 62
    e99c:	0f be       	out	0x3f, r0	; 63
    e99e:	cd bf       	out	0x3d, r28	; 61
    e9a0:	df 91       	pop	r29
    e9a2:	cf 91       	pop	r28
    e9a4:	1f 91       	pop	r17
    e9a6:	0f 91       	pop	r16
    e9a8:	ff 90       	pop	r15
    e9aa:	ef 90       	pop	r14
    e9ac:	df 90       	pop	r13
    e9ae:	cf 90       	pop	r12
    e9b0:	bf 90       	pop	r11
    e9b2:	af 90       	pop	r10
    e9b4:	9f 90       	pop	r9
    e9b6:	8f 90       	pop	r8
    e9b8:	7f 90       	pop	r7
    e9ba:	6f 90       	pop	r6
    e9bc:	5f 90       	pop	r5
    e9be:	4f 90       	pop	r4
    e9c0:	3f 90       	pop	r3
    e9c2:	2f 90       	pop	r2
    e9c4:	08 95       	ret

0000e9c6 <str_rsplit>:
    e9c6:	2f 92       	push	r2
    e9c8:	3f 92       	push	r3
    e9ca:	4f 92       	push	r4
    e9cc:	5f 92       	push	r5
    e9ce:	6f 92       	push	r6
    e9d0:	7f 92       	push	r7
    e9d2:	8f 92       	push	r8
    e9d4:	9f 92       	push	r9
    e9d6:	af 92       	push	r10
    e9d8:	bf 92       	push	r11
    e9da:	cf 92       	push	r12
    e9dc:	df 92       	push	r13
    e9de:	ef 92       	push	r14
    e9e0:	ff 92       	push	r15
    e9e2:	0f 93       	push	r16
    e9e4:	1f 93       	push	r17
    e9e6:	cf 93       	push	r28
    e9e8:	df 93       	push	r29
    e9ea:	cd b7       	in	r28, 0x3d	; 61
    e9ec:	de b7       	in	r29, 0x3e	; 62
    e9ee:	2a 97       	sbiw	r28, 0x0a	; 10
    e9f0:	0f b6       	in	r0, 0x3f	; 63
    e9f2:	f8 94       	cli
    e9f4:	de bf       	out	0x3e, r29	; 62
    e9f6:	0f be       	out	0x3f, r0	; 63
    e9f8:	cd bf       	out	0x3d, r28	; 61
    e9fa:	7c 01       	movw	r14, r24
    e9fc:	8b 01       	movw	r16, r22
    e9fe:	83 e0       	ldi	r24, 0x03	; 3
    ea00:	e8 16       	cp	r14, r24
    ea02:	f1 04       	cpc	r15, r1
    ea04:	18 f4       	brcc	.+6      	; 0xea0c <str_rsplit+0x46>
    ea06:	c7 01       	movw	r24, r14
    ea08:	7f de       	rcall	.-770    	; 0xe708 <mp_obj_str_split>
    ea0a:	e3 c0       	rjmp	.+454    	; 0xebd2 <str_rsplit+0x20c>
    ea0c:	fb 01       	movw	r30, r22
    ea0e:	c0 80       	ld	r12, Z
    ea10:	d1 80       	ldd	r13, Z+1	; 0x01
    ea12:	c6 01       	movw	r24, r12
    ea14:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    ea18:	98 87       	std	Y+8, r25	; 0x08
    ea1a:	8f 83       	std	Y+7, r24	; 0x07
    ea1c:	f8 01       	movw	r30, r16
    ea1e:	82 80       	ldd	r8, Z+2	; 0x02
    ea20:	93 80       	ldd	r9, Z+3	; 0x03
    ea22:	c6 01       	movw	r24, r12
    ea24:	87 70       	andi	r24, 0x07	; 7
    ea26:	99 27       	eor	r25, r25
    ea28:	02 97       	sbiw	r24, 0x02	; 2
    ea2a:	71 f4       	brne	.+28     	; 0xea48 <str_rsplit+0x82>
    ea2c:	be 01       	movw	r22, r28
    ea2e:	6f 5f       	subi	r22, 0xFF	; 255
    ea30:	7f 4f       	sbci	r23, 0xFF	; 255
    ea32:	c6 01       	movw	r24, r12
    ea34:	96 95       	lsr	r25
    ea36:	87 95       	ror	r24
    ea38:	96 95       	lsr	r25
    ea3a:	87 95       	ror	r24
    ea3c:	96 95       	lsr	r25
    ea3e:	87 95       	ror	r24
    ea40:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    ea44:	6c 01       	movw	r12, r24
    ea46:	07 c0       	rjmp	.+14     	; 0xea56 <str_rsplit+0x90>
    ea48:	f6 01       	movw	r30, r12
    ea4a:	84 81       	ldd	r24, Z+4	; 0x04
    ea4c:	95 81       	ldd	r25, Z+5	; 0x05
    ea4e:	9a 83       	std	Y+2, r25	; 0x02
    ea50:	89 83       	std	Y+1, r24	; 0x01
    ea52:	c6 80       	ldd	r12, Z+6	; 0x06
    ea54:	d7 80       	ldd	r13, Z+7	; 0x07
    ea56:	f8 01       	movw	r30, r16
    ea58:	84 81       	ldd	r24, Z+4	; 0x04
    ea5a:	95 81       	ldd	r25, Z+5	; 0x05
    ea5c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    ea60:	5c 01       	movw	r10, r24
    ea62:	99 23       	and	r25, r25
    ea64:	24 f4       	brge	.+8      	; 0xea6e <str_rsplit+0xa8>
    ea66:	b8 01       	movw	r22, r16
    ea68:	c7 01       	movw	r24, r14
    ea6a:	4e de       	rcall	.-868    	; 0xe708 <mp_obj_str_split>
    ea6c:	b2 c0       	rjmp	.+356    	; 0xebd2 <str_rsplit+0x20c>
    ea6e:	01 96       	adiw	r24, 0x01	; 1
    ea70:	9a 87       	std	Y+10, r25	; 0x0a
    ea72:	89 87       	std	Y+9, r24	; 0x09
    ea74:	60 e0       	ldi	r22, 0x00	; 0
    ea76:	70 e0       	ldi	r23, 0x00	; 0
    ea78:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
    ea7c:	9e 83       	std	Y+6, r25	; 0x06
    ea7e:	8d 83       	std	Y+5, r24	; 0x05
    ea80:	96 e0       	ldi	r25, 0x06	; 6
    ea82:	89 16       	cp	r8, r25
    ea84:	91 04       	cpc	r9, r1
    ea86:	21 f4       	brne	.+8      	; 0xea90 <str_rsplit+0xca>
    ea88:	83 e3       	ldi	r24, 0x33	; 51
    ea8a:	9a e0       	ldi	r25, 0x0A	; 10
    ea8c:	0e 94 ce 2a 	call	0x559c	; 0x559c <mp_raise_NotImplementedError>
    ea90:	be 01       	movw	r22, r28
    ea92:	6d 5f       	subi	r22, 0xFD	; 253
    ea94:	7f 4f       	sbci	r23, 0xFF	; 255
    ea96:	c4 01       	movw	r24, r8
    ea98:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
    ea9c:	3c 01       	movw	r6, r24
    ea9e:	8b 81       	ldd	r24, Y+3	; 0x03
    eaa0:	9c 81       	ldd	r25, Y+4	; 0x04
    eaa2:	89 2b       	or	r24, r25
    eaa4:	21 f4       	brne	.+8      	; 0xeaae <str_rsplit+0xe8>
    eaa6:	83 e2       	ldi	r24, 0x23	; 35
    eaa8:	9a e0       	ldi	r25, 0x0A	; 10
    eaaa:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    eaae:	49 80       	ldd	r4, Y+1	; 0x01
    eab0:	5a 80       	ldd	r5, Y+2	; 0x02
    eab2:	4c 0c       	add	r4, r12
    eab4:	5d 1c       	adc	r5, r13
    eab6:	45 01       	movw	r8, r10
    eab8:	88 0c       	add	r8, r8
    eaba:	99 1c       	adc	r9, r9
    eabc:	eb 80       	ldd	r14, Y+3	; 0x03
    eabe:	fc 80       	ldd	r15, Y+4	; 0x04
    eac0:	82 01       	movw	r16, r4
    eac2:	0e 19       	sub	r16, r14
    eac4:	1f 09       	sbc	r17, r15
    eac6:	a1 14       	cp	r10, r1
    eac8:	b1 04       	cpc	r11, r1
    eaca:	09 f4       	brne	.+2      	; 0xeace <str_rsplit+0x108>
    eacc:	6e c0       	rjmp	.+220    	; 0xebaa <str_rsplit+0x1e4>
    eace:	0c 15       	cp	r16, r12
    ead0:	1d 05       	cpc	r17, r13
    ead2:	88 f1       	brcs	.+98     	; 0xeb36 <str_rsplit+0x170>
    ead4:	a7 01       	movw	r20, r14
    ead6:	b3 01       	movw	r22, r6
    ead8:	c8 01       	movw	r24, r16
    eada:	0e 94 85 c2 	call	0x1850a	; 0x1850a <memcmp>
    eade:	89 2b       	or	r24, r25
    eae0:	39 f1       	breq	.+78     	; 0xeb30 <str_rsplit+0x16a>
    eae2:	01 50       	subi	r16, 0x01	; 1
    eae4:	11 09       	sbc	r17, r1
    eae6:	0c 15       	cp	r16, r12
    eae8:	1d 05       	cpc	r17, r13
    eaea:	a0 f7       	brcc	.-24     	; 0xead4 <str_rsplit+0x10e>
    eaec:	24 c0       	rjmp	.+72     	; 0xeb36 <str_rsplit+0x170>
    eaee:	ed 81       	ldd	r30, Y+5	; 0x05
    eaf0:	fe 81       	ldd	r31, Y+6	; 0x06
    eaf2:	86 81       	ldd	r24, Z+6	; 0x06
    eaf4:	97 81       	ldd	r25, Z+7	; 0x07
    eaf6:	1c 01       	movw	r2, r24
    eaf8:	28 0c       	add	r2, r8
    eafa:	39 1c       	adc	r3, r9
    eafc:	a2 01       	movw	r20, r4
    eafe:	40 1b       	sub	r20, r16
    eb00:	51 0b       	sbc	r21, r17
    eb02:	4e 19       	sub	r20, r14
    eb04:	5f 09       	sbc	r21, r15
    eb06:	b8 01       	movw	r22, r16
    eb08:	6e 0d       	add	r22, r14
    eb0a:	7f 1d       	adc	r23, r15
    eb0c:	8f 81       	ldd	r24, Y+7	; 0x07
    eb0e:	98 85       	ldd	r25, Y+8	; 0x08
    eb10:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    eb14:	f1 01       	movw	r30, r2
    eb16:	91 83       	std	Z+1, r25	; 0x01
    eb18:	80 83       	st	Z, r24
    eb1a:	f1 e0       	ldi	r31, 0x01	; 1
    eb1c:	af 1a       	sub	r10, r31
    eb1e:	b1 08       	sbc	r11, r1
    eb20:	82 e0       	ldi	r24, 0x02	; 2
    eb22:	88 1a       	sub	r8, r24
    eb24:	91 08       	sbc	r9, r1
    eb26:	28 01       	movw	r4, r16
    eb28:	c9 cf       	rjmp	.-110    	; 0xeabc <str_rsplit+0xf6>
    eb2a:	8d 81       	ldd	r24, Y+5	; 0x05
    eb2c:	9e 81       	ldd	r25, Y+6	; 0x06
    eb2e:	51 c0       	rjmp	.+162    	; 0xebd2 <str_rsplit+0x20c>
    eb30:	0c 15       	cp	r16, r12
    eb32:	1d 05       	cpc	r17, r13
    eb34:	e0 f6       	brcc	.-72     	; 0xeaee <str_rsplit+0x128>
    eb36:	85 01       	movw	r16, r10
    eb38:	00 0f       	add	r16, r16
    eb3a:	11 1f       	adc	r17, r17
    eb3c:	ed 81       	ldd	r30, Y+5	; 0x05
    eb3e:	fe 81       	ldd	r31, Y+6	; 0x06
    eb40:	e6 80       	ldd	r14, Z+6	; 0x06
    eb42:	f7 80       	ldd	r15, Z+7	; 0x07
    eb44:	e0 0e       	add	r14, r16
    eb46:	f1 1e       	adc	r15, r17
    eb48:	a2 01       	movw	r20, r4
    eb4a:	4c 19       	sub	r20, r12
    eb4c:	5d 09       	sbc	r21, r13
    eb4e:	b6 01       	movw	r22, r12
    eb50:	8f 81       	ldd	r24, Y+7	; 0x07
    eb52:	98 85       	ldd	r25, Y+8	; 0x08
    eb54:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    eb58:	f7 01       	movw	r30, r14
    eb5a:	91 83       	std	Z+1, r25	; 0x01
    eb5c:	80 83       	st	Z, r24
    eb5e:	e9 84       	ldd	r14, Y+9	; 0x09
    eb60:	fa 84       	ldd	r15, Y+10	; 0x0a
    eb62:	ea 18       	sub	r14, r10
    eb64:	fb 08       	sbc	r15, r11
    eb66:	67 01       	movw	r12, r14
    eb68:	cc 0c       	add	r12, r12
    eb6a:	dd 1c       	adc	r13, r13
    eb6c:	ed 81       	ldd	r30, Y+5	; 0x05
    eb6e:	fe 81       	ldd	r31, Y+6	; 0x06
    eb70:	86 81       	ldd	r24, Z+6	; 0x06
    eb72:	97 81       	ldd	r25, Z+7	; 0x07
    eb74:	bc 01       	movw	r22, r24
    eb76:	60 0f       	add	r22, r16
    eb78:	71 1f       	adc	r23, r17
    eb7a:	a6 01       	movw	r20, r12
    eb7c:	0e 94 9b c2 	call	0x18536	; 0x18536 <memmove>
    eb80:	ed 81       	ldd	r30, Y+5	; 0x05
    eb82:	fe 81       	ldd	r31, Y+6	; 0x06
    eb84:	42 81       	ldd	r20, Z+2	; 0x02
    eb86:	53 81       	ldd	r21, Z+3	; 0x03
    eb88:	4e 19       	sub	r20, r14
    eb8a:	5f 09       	sbc	r21, r15
    eb8c:	44 0f       	add	r20, r20
    eb8e:	55 1f       	adc	r21, r21
    eb90:	86 81       	ldd	r24, Z+6	; 0x06
    eb92:	97 81       	ldd	r25, Z+7	; 0x07
    eb94:	60 e0       	ldi	r22, 0x00	; 0
    eb96:	70 e0       	ldi	r23, 0x00	; 0
    eb98:	8c 0d       	add	r24, r12
    eb9a:	9d 1d       	adc	r25, r13
    eb9c:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    eba0:	ed 81       	ldd	r30, Y+5	; 0x05
    eba2:	fe 81       	ldd	r31, Y+6	; 0x06
    eba4:	f5 82       	std	Z+5, r15	; 0x05
    eba6:	e4 82       	std	Z+4, r14	; 0x04
    eba8:	c0 cf       	rjmp	.-128    	; 0xeb2a <str_rsplit+0x164>
    ebaa:	aa 0c       	add	r10, r10
    ebac:	bb 1c       	adc	r11, r11
    ebae:	ed 81       	ldd	r30, Y+5	; 0x05
    ebb0:	fe 81       	ldd	r31, Y+6	; 0x06
    ebb2:	86 81       	ldd	r24, Z+6	; 0x06
    ebb4:	97 81       	ldd	r25, Z+7	; 0x07
    ebb6:	a8 0e       	add	r10, r24
    ebb8:	b9 1e       	adc	r11, r25
    ebba:	a2 01       	movw	r20, r4
    ebbc:	4c 19       	sub	r20, r12
    ebbe:	5d 09       	sbc	r21, r13
    ebc0:	b6 01       	movw	r22, r12
    ebc2:	8f 81       	ldd	r24, Y+7	; 0x07
    ebc4:	98 85       	ldd	r25, Y+8	; 0x08
    ebc6:	0e 94 ae 38 	call	0x715c	; 0x715c <mp_obj_new_str_of_type>
    ebca:	f5 01       	movw	r30, r10
    ebcc:	91 83       	std	Z+1, r25	; 0x01
    ebce:	80 83       	st	Z, r24
    ebd0:	ac cf       	rjmp	.-168    	; 0xeb2a <str_rsplit+0x164>
    ebd2:	2a 96       	adiw	r28, 0x0a	; 10
    ebd4:	0f b6       	in	r0, 0x3f	; 63
    ebd6:	f8 94       	cli
    ebd8:	de bf       	out	0x3e, r29	; 62
    ebda:	0f be       	out	0x3f, r0	; 63
    ebdc:	cd bf       	out	0x3d, r28	; 61
    ebde:	df 91       	pop	r29
    ebe0:	cf 91       	pop	r28
    ebe2:	1f 91       	pop	r17
    ebe4:	0f 91       	pop	r16
    ebe6:	ff 90       	pop	r15
    ebe8:	ef 90       	pop	r14
    ebea:	df 90       	pop	r13
    ebec:	cf 90       	pop	r12
    ebee:	bf 90       	pop	r11
    ebf0:	af 90       	pop	r10
    ebf2:	9f 90       	pop	r9
    ebf4:	8f 90       	pop	r8
    ebf6:	7f 90       	pop	r7
    ebf8:	6f 90       	pop	r6
    ebfa:	5f 90       	pop	r5
    ebfc:	4f 90       	pop	r4
    ebfe:	3f 90       	pop	r3
    ec00:	2f 90       	pop	r2
    ec02:	08 95       	ret

0000ec04 <list_pop>:
    ec04:	0f 93       	push	r16
    ec06:	1f 93       	push	r17
    ec08:	cf 93       	push	r28
    ec0a:	df 93       	push	r29
    ec0c:	db 01       	movw	r26, r22
    ec0e:	cd 91       	ld	r28, X+
    ec10:	dc 91       	ld	r29, X
    ec12:	9e 01       	movw	r18, r28
    ec14:	23 70       	andi	r18, 0x03	; 3
    ec16:	33 27       	eor	r19, r19
    ec18:	23 2b       	or	r18, r19
    ec1a:	29 f4       	brne	.+10     	; 0xec26 <list_pop+0x22>
    ec1c:	28 81       	ld	r18, Y
    ec1e:	39 81       	ldd	r19, Y+1	; 0x01
    ec20:	2c 52       	subi	r18, 0x2C	; 44
    ec22:	3d 41       	sbci	r19, 0x1D	; 29
    ec24:	11 f0       	breq	.+4      	; 0xec2a <list_pop+0x26>
    ec26:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ec2a:	ec 81       	ldd	r30, Y+4	; 0x04
    ec2c:	fd 81       	ldd	r31, Y+5	; 0x05
    ec2e:	30 97       	sbiw	r30, 0x00	; 0
    ec30:	31 f4       	brne	.+12     	; 0xec3e <list_pop+0x3a>
    ec32:	62 e4       	ldi	r22, 0x42	; 66
    ec34:	7a e0       	ldi	r23, 0x0A	; 10
    ec36:	88 e9       	ldi	r24, 0x98	; 152
    ec38:	90 e2       	ldi	r25, 0x20	; 32
    ec3a:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    ec3e:	01 97       	sbiw	r24, 0x01	; 1
    ec40:	31 f0       	breq	.+12     	; 0xec4e <list_pop+0x4a>
    ec42:	db 01       	movw	r26, r22
    ec44:	12 96       	adiw	r26, 0x02	; 2
    ec46:	4d 91       	ld	r20, X+
    ec48:	5c 91       	ld	r21, X
    ec4a:	13 97       	sbiw	r26, 0x03	; 3
    ec4c:	02 c0       	rjmp	.+4      	; 0xec52 <list_pop+0x4e>
    ec4e:	4f ef       	ldi	r20, 0xFF	; 255
    ec50:	5f ef       	ldi	r21, 0xFF	; 255
    ec52:	20 e0       	ldi	r18, 0x00	; 0
    ec54:	bf 01       	movw	r22, r30
    ec56:	8c e2       	ldi	r24, 0x2C	; 44
    ec58:	9d e1       	ldi	r25, 0x1D	; 29
    ec5a:	0e 94 30 2b 	call	0x5660	; 0x5660 <mp_get_index>
    ec5e:	6e 81       	ldd	r22, Y+6	; 0x06
    ec60:	7f 81       	ldd	r23, Y+7	; 0x07
    ec62:	9c 01       	movw	r18, r24
    ec64:	22 0f       	add	r18, r18
    ec66:	33 1f       	adc	r19, r19
    ec68:	fb 01       	movw	r30, r22
    ec6a:	e2 0f       	add	r30, r18
    ec6c:	f3 1f       	adc	r31, r19
    ec6e:	00 81       	ld	r16, Z
    ec70:	11 81       	ldd	r17, Z+1	; 0x01
    ec72:	4c 81       	ldd	r20, Y+4	; 0x04
    ec74:	5d 81       	ldd	r21, Y+5	; 0x05
    ec76:	41 50       	subi	r20, 0x01	; 1
    ec78:	51 09       	sbc	r21, r1
    ec7a:	5d 83       	std	Y+5, r21	; 0x05
    ec7c:	4c 83       	std	Y+4, r20	; 0x04
    ec7e:	48 1b       	sub	r20, r24
    ec80:	59 0b       	sbc	r21, r25
    ec82:	44 0f       	add	r20, r20
    ec84:	55 1f       	adc	r21, r21
    ec86:	2e 5f       	subi	r18, 0xFE	; 254
    ec88:	3f 4f       	sbci	r19, 0xFF	; 255
    ec8a:	62 0f       	add	r22, r18
    ec8c:	73 1f       	adc	r23, r19
    ec8e:	cf 01       	movw	r24, r30
    ec90:	0e 94 9b c2 	call	0x18536	; 0x18536 <memmove>
    ec94:	ec 81       	ldd	r30, Y+4	; 0x04
    ec96:	fd 81       	ldd	r31, Y+5	; 0x05
    ec98:	ee 0f       	add	r30, r30
    ec9a:	ff 1f       	adc	r31, r31
    ec9c:	8e 81       	ldd	r24, Y+6	; 0x06
    ec9e:	9f 81       	ldd	r25, Y+7	; 0x07
    eca0:	e8 0f       	add	r30, r24
    eca2:	f9 1f       	adc	r31, r25
    eca4:	11 82       	std	Z+1, r1	; 0x01
    eca6:	10 82       	st	Z, r1
    eca8:	6a 81       	ldd	r22, Y+2	; 0x02
    ecaa:	7b 81       	ldd	r23, Y+3	; 0x03
    ecac:	65 30       	cpi	r22, 0x05	; 5
    ecae:	71 05       	cpc	r23, r1
    ecb0:	a0 f0       	brcs	.+40     	; 0xecda <list_pop+0xd6>
    ecb2:	8c 81       	ldd	r24, Y+4	; 0x04
    ecb4:	9d 81       	ldd	r25, Y+5	; 0x05
    ecb6:	88 0f       	add	r24, r24
    ecb8:	99 1f       	adc	r25, r25
    ecba:	86 17       	cp	r24, r22
    ecbc:	97 07       	cpc	r25, r23
    ecbe:	68 f4       	brcc	.+26     	; 0xecda <list_pop+0xd6>
    ecc0:	6e 7f       	andi	r22, 0xFE	; 254
    ecc2:	8e 81       	ldd	r24, Y+6	; 0x06
    ecc4:	9f 81       	ldd	r25, Y+7	; 0x07
    ecc6:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
    ecca:	9f 83       	std	Y+7, r25	; 0x07
    eccc:	8e 83       	std	Y+6, r24	; 0x06
    ecce:	8a 81       	ldd	r24, Y+2	; 0x02
    ecd0:	9b 81       	ldd	r25, Y+3	; 0x03
    ecd2:	96 95       	lsr	r25
    ecd4:	87 95       	ror	r24
    ecd6:	9b 83       	std	Y+3, r25	; 0x03
    ecd8:	8a 83       	std	Y+2, r24	; 0x02
    ecda:	c8 01       	movw	r24, r16
    ecdc:	df 91       	pop	r29
    ecde:	cf 91       	pop	r28
    ece0:	1f 91       	pop	r17
    ece2:	0f 91       	pop	r16
    ece4:	08 95       	ret

0000ece6 <mp_obj_list_remove>:
    ece6:	cf 93       	push	r28
    ece8:	df 93       	push	r29
    ecea:	00 d0       	rcall	.+0      	; 0xecec <mp_obj_list_remove+0x6>
    ecec:	00 d0       	rcall	.+0      	; 0xecee <mp_obj_list_remove+0x8>
    ecee:	cd b7       	in	r28, 0x3d	; 61
    ecf0:	de b7       	in	r29, 0x3e	; 62
    ecf2:	9c 01       	movw	r18, r24
    ecf4:	23 70       	andi	r18, 0x03	; 3
    ecf6:	33 27       	eor	r19, r19
    ecf8:	23 2b       	or	r18, r19
    ecfa:	31 f4       	brne	.+12     	; 0xed08 <mp_obj_list_remove+0x22>
    ecfc:	fc 01       	movw	r30, r24
    ecfe:	20 81       	ld	r18, Z
    ed00:	31 81       	ldd	r19, Z+1	; 0x01
    ed02:	2c 52       	subi	r18, 0x2C	; 44
    ed04:	3d 41       	sbci	r19, 0x1D	; 29
    ed06:	11 f0       	breq	.+4      	; 0xed0c <mp_obj_list_remove+0x26>
    ed08:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ed0c:	9a 83       	std	Y+2, r25	; 0x02
    ed0e:	89 83       	std	Y+1, r24	; 0x01
    ed10:	7c 83       	std	Y+4, r23	; 0x04
    ed12:	6b 83       	std	Y+3, r22	; 0x03
    ed14:	be 01       	movw	r22, r28
    ed16:	6f 5f       	subi	r22, 0xFF	; 255
    ed18:	7f 4f       	sbci	r23, 0xFF	; 255
    ed1a:	82 e0       	ldi	r24, 0x02	; 2
    ed1c:	90 e0       	ldi	r25, 0x00	; 0
    ed1e:	0e 94 3d 2c 	call	0x587a	; 0x587a <list_index>
    ed22:	9c 83       	std	Y+4, r25	; 0x04
    ed24:	8b 83       	std	Y+3, r24	; 0x03
    ed26:	be 01       	movw	r22, r28
    ed28:	6f 5f       	subi	r22, 0xFF	; 255
    ed2a:	7f 4f       	sbci	r23, 0xFF	; 255
    ed2c:	82 e0       	ldi	r24, 0x02	; 2
    ed2e:	90 e0       	ldi	r25, 0x00	; 0
    ed30:	69 df       	rcall	.-302    	; 0xec04 <list_pop>
    ed32:	86 e0       	ldi	r24, 0x06	; 6
    ed34:	90 e0       	ldi	r25, 0x00	; 0
    ed36:	0f 90       	pop	r0
    ed38:	0f 90       	pop	r0
    ed3a:	0f 90       	pop	r0
    ed3c:	0f 90       	pop	r0
    ed3e:	df 91       	pop	r29
    ed40:	cf 91       	pop	r28
    ed42:	08 95       	ret

0000ed44 <list_subscr>:
    ed44:	0f 93       	push	r16
    ed46:	1f 93       	push	r17
    ed48:	cf 93       	push	r28
    ed4a:	df 93       	push	r29
    ed4c:	00 d0       	rcall	.+0      	; 0xed4e <list_subscr+0xa>
    ed4e:	00 d0       	rcall	.+0      	; 0xed50 <list_subscr+0xc>
    ed50:	cd b7       	in	r28, 0x3d	; 61
    ed52:	de b7       	in	r29, 0x3e	; 62
    ed54:	8c 01       	movw	r16, r24
    ed56:	41 15       	cp	r20, r1
    ed58:	51 05       	cpc	r21, r1
    ed5a:	69 f4       	brne	.+26     	; 0xed76 <list_subscr+0x32>
    ed5c:	9a 83       	std	Y+2, r25	; 0x02
    ed5e:	89 83       	std	Y+1, r24	; 0x01
    ed60:	7c 83       	std	Y+4, r23	; 0x04
    ed62:	6b 83       	std	Y+3, r22	; 0x03
    ed64:	be 01       	movw	r22, r28
    ed66:	6f 5f       	subi	r22, 0xFF	; 255
    ed68:	7f 4f       	sbci	r23, 0xFF	; 255
    ed6a:	82 e0       	ldi	r24, 0x02	; 2
    ed6c:	90 e0       	ldi	r25, 0x00	; 0
    ed6e:	4a df       	rcall	.-364    	; 0xec04 <list_pop>
    ed70:	86 e0       	ldi	r24, 0x06	; 6
    ed72:	90 e0       	ldi	r25, 0x00	; 0
    ed74:	1f c0       	rjmp	.+62     	; 0xedb4 <list_subscr+0x70>
    ed76:	44 30       	cpi	r20, 0x04	; 4
    ed78:	51 05       	cpc	r21, r1
    ed7a:	c1 f4       	brne	.+48     	; 0xedac <list_subscr+0x68>
    ed7c:	dc 01       	movw	r26, r24
    ed7e:	14 96       	adiw	r26, 0x04	; 4
    ed80:	8d 91       	ld	r24, X+
    ed82:	9c 91       	ld	r25, X
    ed84:	15 97       	sbiw	r26, 0x05	; 5
    ed86:	20 e0       	ldi	r18, 0x00	; 0
    ed88:	ab 01       	movw	r20, r22
    ed8a:	bc 01       	movw	r22, r24
    ed8c:	8d 91       	ld	r24, X+
    ed8e:	9c 91       	ld	r25, X
    ed90:	0e 94 30 2b 	call	0x5660	; 0x5660 <mp_get_index>
    ed94:	88 0f       	add	r24, r24
    ed96:	99 1f       	adc	r25, r25
    ed98:	d8 01       	movw	r26, r16
    ed9a:	16 96       	adiw	r26, 0x06	; 6
    ed9c:	ed 91       	ld	r30, X+
    ed9e:	fc 91       	ld	r31, X
    eda0:	17 97       	sbiw	r26, 0x07	; 7
    eda2:	e8 0f       	add	r30, r24
    eda4:	f9 1f       	adc	r31, r25
    eda6:	80 81       	ld	r24, Z
    eda8:	91 81       	ldd	r25, Z+1	; 0x01
    edaa:	04 c0       	rjmp	.+8      	; 0xedb4 <list_subscr+0x70>
    edac:	0e 94 7d 2b 	call	0x56fa	; 0x56fa <mp_obj_list_store>
    edb0:	86 e0       	ldi	r24, 0x06	; 6
    edb2:	90 e0       	ldi	r25, 0x00	; 0
    edb4:	0f 90       	pop	r0
    edb6:	0f 90       	pop	r0
    edb8:	0f 90       	pop	r0
    edba:	0f 90       	pop	r0
    edbc:	df 91       	pop	r29
    edbe:	cf 91       	pop	r28
    edc0:	1f 91       	pop	r17
    edc2:	0f 91       	pop	r16
    edc4:	08 95       	ret

0000edc6 <list_clear>:
    edc6:	cf 93       	push	r28
    edc8:	df 93       	push	r29
    edca:	ec 01       	movw	r28, r24
    edcc:	83 70       	andi	r24, 0x03	; 3
    edce:	99 27       	eor	r25, r25
    edd0:	89 2b       	or	r24, r25
    edd2:	29 f4       	brne	.+10     	; 0xedde <list_clear+0x18>
    edd4:	88 81       	ld	r24, Y
    edd6:	99 81       	ldd	r25, Y+1	; 0x01
    edd8:	8c 52       	subi	r24, 0x2C	; 44
    edda:	9d 41       	sbci	r25, 0x1D	; 29
    eddc:	11 f0       	breq	.+4      	; 0xede2 <list_clear+0x1c>
    edde:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ede2:	1d 82       	std	Y+5, r1	; 0x05
    ede4:	1c 82       	std	Y+4, r1	; 0x04
    ede6:	68 e0       	ldi	r22, 0x08	; 8
    ede8:	70 e0       	ldi	r23, 0x00	; 0
    edea:	8e 81       	ldd	r24, Y+6	; 0x06
    edec:	9f 81       	ldd	r25, Y+7	; 0x07
    edee:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
    edf2:	9f 83       	std	Y+7, r25	; 0x07
    edf4:	8e 83       	std	Y+6, r24	; 0x06
    edf6:	24 e0       	ldi	r18, 0x04	; 4
    edf8:	30 e0       	ldi	r19, 0x00	; 0
    edfa:	3b 83       	std	Y+3, r19	; 0x03
    edfc:	2a 83       	std	Y+2, r18	; 0x02
    edfe:	28 e0       	ldi	r18, 0x08	; 8
    ee00:	fc 01       	movw	r30, r24
    ee02:	11 92       	st	Z+, r1
    ee04:	2a 95       	dec	r18
    ee06:	e9 f7       	brne	.-6      	; 0xee02 <list_clear+0x3c>
    ee08:	86 e0       	ldi	r24, 0x06	; 6
    ee0a:	90 e0       	ldi	r25, 0x00	; 0
    ee0c:	df 91       	pop	r29
    ee0e:	cf 91       	pop	r28
    ee10:	08 95       	ret

0000ee12 <mp_obj_new_str_from_vstr>:
    ee12:	ef 92       	push	r14
    ee14:	ff 92       	push	r15
    ee16:	0f 93       	push	r16
    ee18:	1f 93       	push	r17
    ee1a:	cf 93       	push	r28
    ee1c:	df 93       	push	r29
    ee1e:	7c 01       	movw	r14, r24
    ee20:	8b 01       	movw	r16, r22
    ee22:	82 e1       	ldi	r24, 0x12	; 18
    ee24:	e8 16       	cp	r14, r24
    ee26:	8b e1       	ldi	r24, 0x1B	; 27
    ee28:	f8 06       	cpc	r15, r24
    ee2a:	c9 f4       	brne	.+50     	; 0xee5e <mp_obj_new_str_from_vstr+0x4c>
    ee2c:	fb 01       	movw	r30, r22
    ee2e:	62 81       	ldd	r22, Z+2	; 0x02
    ee30:	73 81       	ldd	r23, Z+3	; 0x03
    ee32:	84 81       	ldd	r24, Z+4	; 0x04
    ee34:	95 81       	ldd	r25, Z+5	; 0x05
    ee36:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <qstr_find_strn>
    ee3a:	ec 01       	movw	r28, r24
    ee3c:	89 2b       	or	r24, r25
    ee3e:	79 f0       	breq	.+30     	; 0xee5e <mp_obj_new_str_from_vstr+0x4c>
    ee40:	c8 01       	movw	r24, r16
    ee42:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vstr_clear>
    ee46:	f8 01       	movw	r30, r16
    ee48:	11 82       	std	Z+1, r1	; 0x01
    ee4a:	10 82       	st	Z, r1
    ee4c:	cc 0f       	add	r28, r28
    ee4e:	dd 1f       	adc	r29, r29
    ee50:	cc 0f       	add	r28, r28
    ee52:	dd 1f       	adc	r29, r29
    ee54:	cc 0f       	add	r28, r28
    ee56:	dd 1f       	adc	r29, r29
    ee58:	ce 01       	movw	r24, r28
    ee5a:	82 60       	ori	r24, 0x02	; 2
    ee5c:	37 c0       	rjmp	.+110    	; 0xeecc <mp_obj_new_str_from_vstr+0xba>
    ee5e:	88 e0       	ldi	r24, 0x08	; 8
    ee60:	90 e0       	ldi	r25, 0x00	; 0
    ee62:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
    ee66:	ec 01       	movw	r28, r24
    ee68:	f9 82       	std	Y+1, r15	; 0x01
    ee6a:	e8 82       	st	Y, r14
    ee6c:	f8 01       	movw	r30, r16
    ee6e:	82 81       	ldd	r24, Z+2	; 0x02
    ee70:	93 81       	ldd	r25, Z+3	; 0x03
    ee72:	9d 83       	std	Y+5, r25	; 0x05
    ee74:	8c 83       	std	Y+4, r24	; 0x04
    ee76:	62 81       	ldd	r22, Z+2	; 0x02
    ee78:	73 81       	ldd	r23, Z+3	; 0x03
    ee7a:	84 81       	ldd	r24, Z+4	; 0x04
    ee7c:	95 81       	ldd	r25, Z+5	; 0x05
    ee7e:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    ee82:	9b 83       	std	Y+3, r25	; 0x03
    ee84:	8a 83       	std	Y+2, r24	; 0x02
    ee86:	f8 01       	movw	r30, r16
    ee88:	62 81       	ldd	r22, Z+2	; 0x02
    ee8a:	73 81       	ldd	r23, Z+3	; 0x03
    ee8c:	6f 5f       	subi	r22, 0xFF	; 255
    ee8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ee90:	80 81       	ld	r24, Z
    ee92:	91 81       	ldd	r25, Z+1	; 0x01
    ee94:	68 17       	cp	r22, r24
    ee96:	79 07       	cpc	r23, r25
    ee98:	29 f4       	brne	.+10     	; 0xeea4 <mp_obj_new_str_from_vstr+0x92>
    ee9a:	84 81       	ldd	r24, Z+4	; 0x04
    ee9c:	95 81       	ldd	r25, Z+5	; 0x05
    ee9e:	9f 83       	std	Y+7, r25	; 0x07
    eea0:	8e 83       	std	Y+6, r24	; 0x06
    eea2:	07 c0       	rjmp	.+14     	; 0xeeb2 <mp_obj_new_str_from_vstr+0xa0>
    eea4:	f8 01       	movw	r30, r16
    eea6:	84 81       	ldd	r24, Z+4	; 0x04
    eea8:	95 81       	ldd	r25, Z+5	; 0x05
    eeaa:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
    eeae:	9f 83       	std	Y+7, r25	; 0x07
    eeb0:	8e 83       	std	Y+6, r24	; 0x06
    eeb2:	ee 81       	ldd	r30, Y+6	; 0x06
    eeb4:	ff 81       	ldd	r31, Y+7	; 0x07
    eeb6:	8c 81       	ldd	r24, Y+4	; 0x04
    eeb8:	9d 81       	ldd	r25, Y+5	; 0x05
    eeba:	e8 0f       	add	r30, r24
    eebc:	f9 1f       	adc	r31, r25
    eebe:	10 82       	st	Z, r1
    eec0:	f8 01       	movw	r30, r16
    eec2:	15 82       	std	Z+5, r1	; 0x05
    eec4:	14 82       	std	Z+4, r1	; 0x04
    eec6:	11 82       	std	Z+1, r1	; 0x01
    eec8:	10 82       	st	Z, r1
    eeca:	ce 01       	movw	r24, r28
    eecc:	df 91       	pop	r29
    eece:	cf 91       	pop	r28
    eed0:	1f 91       	pop	r17
    eed2:	0f 91       	pop	r16
    eed4:	ff 90       	pop	r15
    eed6:	ef 90       	pop	r14
    eed8:	08 95       	ret

0000eeda <int_to_bytes>:
    eeda:	7f 92       	push	r7
    eedc:	8f 92       	push	r8
    eede:	9f 92       	push	r9
    eee0:	af 92       	push	r10
    eee2:	bf 92       	push	r11
    eee4:	cf 92       	push	r12
    eee6:	df 92       	push	r13
    eee8:	ef 92       	push	r14
    eeea:	ff 92       	push	r15
    eeec:	0f 93       	push	r16
    eeee:	1f 93       	push	r17
    eef0:	cf 93       	push	r28
    eef2:	df 93       	push	r29
    eef4:	cd b7       	in	r28, 0x3d	; 61
    eef6:	de b7       	in	r29, 0x3e	; 62
    eef8:	27 97       	sbiw	r28, 0x07	; 7
    eefa:	0f b6       	in	r0, 0x3f	; 63
    eefc:	f8 94       	cli
    eefe:	de bf       	out	0x3e, r29	; 62
    ef00:	0f be       	out	0x3f, r0	; 63
    ef02:	cd bf       	out	0x3d, r28	; 61
    ef04:	7b 01       	movw	r14, r22
    ef06:	fb 01       	movw	r30, r22
    ef08:	82 81       	ldd	r24, Z+2	; 0x02
    ef0a:	93 81       	ldd	r25, Z+3	; 0x03
    ef0c:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    ef10:	8c 01       	movw	r16, r24
    ef12:	99 23       	and	r25, r25
    ef14:	24 f4       	brge	.+8      	; 0xef1e <int_to_bytes+0x44>
    ef16:	80 e0       	ldi	r24, 0x00	; 0
    ef18:	90 e0       	ldi	r25, 0x00	; 0
    ef1a:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    ef1e:	f7 01       	movw	r30, r14
    ef20:	84 80       	ldd	r8, Z+4	; 0x04
    ef22:	95 80       	ldd	r9, Z+5	; 0x05
    ef24:	77 24       	eor	r7, r7
    ef26:	73 94       	inc	r7
    ef28:	fa e6       	ldi	r31, 0x6A	; 106
    ef2a:	8f 16       	cp	r8, r31
    ef2c:	f3 e0       	ldi	r31, 0x03	; 3
    ef2e:	9f 06       	cpc	r9, r31
    ef30:	09 f4       	brne	.+2      	; 0xef34 <int_to_bytes+0x5a>
    ef32:	71 2c       	mov	r7, r1
    ef34:	b8 01       	movw	r22, r16
    ef36:	ce 01       	movw	r24, r28
    ef38:	01 96       	adiw	r24, 0x01	; 1
    ef3a:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
    ef3e:	ad 80       	ldd	r10, Y+5	; 0x05
    ef40:	be 80       	ldd	r11, Y+6	; 0x06
    ef42:	a8 01       	movw	r20, r16
    ef44:	60 e0       	ldi	r22, 0x00	; 0
    ef46:	70 e0       	ldi	r23, 0x00	; 0
    ef48:	c5 01       	movw	r24, r10
    ef4a:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
    ef4e:	c8 01       	movw	r24, r16
    ef50:	03 30       	cpi	r16, 0x03	; 3
    ef52:	11 05       	cpc	r17, r1
    ef54:	10 f0       	brcs	.+4      	; 0xef5a <int_to_bytes+0x80>
    ef56:	82 e0       	ldi	r24, 0x02	; 2
    ef58:	90 e0       	ldi	r25, 0x00	; 0
    ef5a:	f7 01       	movw	r30, r14
    ef5c:	20 81       	ld	r18, Z
    ef5e:	31 81       	ldd	r19, Z+1	; 0x01
    ef60:	35 95       	asr	r19
    ef62:	27 95       	ror	r18
    ef64:	fa e6       	ldi	r31, 0x6A	; 106
    ef66:	8f 16       	cp	r8, r31
    ef68:	f3 e0       	ldi	r31, 0x03	; 3
    ef6a:	9f 06       	cpc	r9, r31
    ef6c:	21 f0       	breq	.+8      	; 0xef76 <int_to_bytes+0x9c>
    ef6e:	a8 01       	movw	r20, r16
    ef70:	48 1b       	sub	r20, r24
    ef72:	59 0b       	sbc	r21, r25
    ef74:	02 c0       	rjmp	.+4      	; 0xef7a <int_to_bytes+0xa0>
    ef76:	40 e0       	ldi	r20, 0x00	; 0
    ef78:	50 e0       	ldi	r21, 0x00	; 0
    ef7a:	4a 0d       	add	r20, r10
    ef7c:	5b 1d       	adc	r21, r11
    ef7e:	67 2d       	mov	r22, r7
    ef80:	0e 94 37 23 	call	0x466e	; 0x466e <mp_binary_set_int>
    ef84:	be 01       	movw	r22, r28
    ef86:	6f 5f       	subi	r22, 0xFF	; 255
    ef88:	7f 4f       	sbci	r23, 0xFF	; 255
    ef8a:	82 ef       	ldi	r24, 0xF2	; 242
    ef8c:	9a e1       	ldi	r25, 0x1A	; 26
    ef8e:	41 df       	rcall	.-382    	; 0xee12 <mp_obj_new_str_from_vstr>
    ef90:	27 96       	adiw	r28, 0x07	; 7
    ef92:	0f b6       	in	r0, 0x3f	; 63
    ef94:	f8 94       	cli
    ef96:	de bf       	out	0x3e, r29	; 62
    ef98:	0f be       	out	0x3f, r0	; 63
    ef9a:	cd bf       	out	0x3d, r28	; 61
    ef9c:	df 91       	pop	r29
    ef9e:	cf 91       	pop	r28
    efa0:	1f 91       	pop	r17
    efa2:	0f 91       	pop	r16
    efa4:	ff 90       	pop	r15
    efa6:	ef 90       	pop	r14
    efa8:	df 90       	pop	r13
    efaa:	cf 90       	pop	r12
    efac:	bf 90       	pop	r11
    efae:	af 90       	pop	r10
    efb0:	9f 90       	pop	r9
    efb2:	8f 90       	pop	r8
    efb4:	7f 90       	pop	r7
    efb6:	08 95       	ret

0000efb8 <mp_obj_str_make_new>:
    efb8:	af 92       	push	r10
    efba:	bf 92       	push	r11
    efbc:	cf 92       	push	r12
    efbe:	df 92       	push	r13
    efc0:	ef 92       	push	r14
    efc2:	ff 92       	push	r15
    efc4:	0f 93       	push	r16
    efc6:	1f 93       	push	r17
    efc8:	cf 93       	push	r28
    efca:	df 93       	push	r29
    efcc:	cd b7       	in	r28, 0x3d	; 61
    efce:	de b7       	in	r29, 0x3e	; 62
    efd0:	2b 97       	sbiw	r28, 0x0b	; 11
    efd2:	0f b6       	in	r0, 0x3f	; 63
    efd4:	f8 94       	cli
    efd6:	de bf       	out	0x3e, r29	; 62
    efd8:	0f be       	out	0x3f, r0	; 63
    efda:	cd bf       	out	0x3d, r28	; 61
    efdc:	6c 01       	movw	r12, r24
    efde:	8b 01       	movw	r16, r22
    efe0:	ba 01       	movw	r22, r20
    efe2:	79 01       	movw	r14, r18
    efe4:	26 e0       	ldi	r18, 0x06	; 6
    efe6:	30 e0       	ldi	r19, 0x00	; 0
    efe8:	40 e0       	ldi	r20, 0x00	; 0
    efea:	50 e0       	ldi	r21, 0x00	; 0
    efec:	c8 01       	movw	r24, r16
    efee:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
    eff2:	01 15       	cp	r16, r1
    eff4:	11 05       	cpc	r17, r1
    eff6:	09 f4       	brne	.+2      	; 0xeffa <mp_obj_str_make_new+0x42>
    eff8:	91 c0       	rjmp	.+290    	; 0xf11c <mp_obj_str_make_new+0x164>
    effa:	01 30       	cpi	r16, 0x01	; 1
    effc:	11 05       	cpc	r17, r1
    effe:	d1 f4       	brne	.+52     	; 0xf034 <mp_obj_str_make_new+0x7c>
    f000:	60 e1       	ldi	r22, 0x10	; 16
    f002:	70 e0       	ldi	r23, 0x00	; 0
    f004:	8e 01       	movw	r16, r28
    f006:	0f 5f       	subi	r16, 0xFF	; 255
    f008:	1f 4f       	sbci	r17, 0xFF	; 255
    f00a:	c8 01       	movw	r24, r16
    f00c:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
    f010:	19 87       	std	Y+9, r17	; 0x09
    f012:	08 87       	std	Y+8, r16	; 0x08
    f014:	89 ea       	ldi	r24, 0xA9	; 169
    f016:	9e e4       	ldi	r25, 0x4E	; 78
    f018:	9b 87       	std	Y+11, r25	; 0x0b
    f01a:	8a 87       	std	Y+10, r24	; 0x0a
    f01c:	f7 01       	movw	r30, r14
    f01e:	60 81       	ld	r22, Z
    f020:	71 81       	ldd	r23, Z+1	; 0x01
    f022:	40 e0       	ldi	r20, 0x00	; 0
    f024:	ce 01       	movw	r24, r28
    f026:	08 96       	adiw	r24, 0x08	; 8
    f028:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    f02c:	b8 01       	movw	r22, r16
    f02e:	c6 01       	movw	r24, r12
    f030:	f0 de       	rcall	.-544    	; 0xee12 <mp_obj_new_str_from_vstr>
    f032:	76 c0       	rjmp	.+236    	; 0xf120 <mp_obj_str_make_new+0x168>
    f034:	f7 01       	movw	r30, r14
    f036:	80 81       	ld	r24, Z
    f038:	91 81       	ldd	r25, Z+1	; 0x01
    f03a:	ac 01       	movw	r20, r24
    f03c:	9c 01       	movw	r18, r24
    f03e:	23 70       	andi	r18, 0x03	; 3
    f040:	33 27       	eor	r19, r19
    f042:	23 2b       	or	r18, r19
    f044:	09 f0       	breq	.+2      	; 0xf048 <mp_obj_str_make_new+0x90>
    f046:	5c c0       	rjmp	.+184    	; 0xf100 <mp_obj_str_make_new+0x148>
    f048:	fc 01       	movw	r30, r24
    f04a:	20 81       	ld	r18, Z
    f04c:	31 81       	ldd	r19, Z+1	; 0x01
    f04e:	22 5f       	subi	r18, 0xF2	; 242
    f050:	3a 41       	sbci	r19, 0x1A	; 26
    f052:	09 f0       	breq	.+2      	; 0xf056 <mp_obj_str_make_new+0x9e>
    f054:	55 c0       	rjmp	.+170    	; 0xf100 <mp_obj_str_make_new+0x148>
    f056:	47 70       	andi	r20, 0x07	; 7
    f058:	55 27       	eor	r21, r21
    f05a:	42 30       	cpi	r20, 0x02	; 2
    f05c:	51 05       	cpc	r21, r1
    f05e:	b1 f4       	brne	.+44     	; 0xf08c <mp_obj_str_make_new+0xd4>
    f060:	be 01       	movw	r22, r28
    f062:	6f 5f       	subi	r22, 0xFF	; 255
    f064:	7f 4f       	sbci	r23, 0xFF	; 255
    f066:	96 95       	lsr	r25
    f068:	87 95       	ror	r24
    f06a:	96 95       	lsr	r25
    f06c:	87 95       	ror	r24
    f06e:	96 95       	lsr	r25
    f070:	87 95       	ror	r24
    f072:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f076:	8c 01       	movw	r16, r24
    f078:	f7 01       	movw	r30, r14
    f07a:	80 81       	ld	r24, Z
    f07c:	91 81       	ldd	r25, Z+1	; 0x01
    f07e:	9c 01       	movw	r18, r24
    f080:	27 70       	andi	r18, 0x07	; 7
    f082:	33 27       	eor	r19, r19
    f084:	22 30       	cpi	r18, 0x02	; 2
    f086:	31 05       	cpc	r19, r1
    f088:	49 f0       	breq	.+18     	; 0xf09c <mp_obj_str_make_new+0xe4>
    f08a:	12 c0       	rjmp	.+36     	; 0xf0b0 <mp_obj_str_make_new+0xf8>
    f08c:	fc 01       	movw	r30, r24
    f08e:	24 81       	ldd	r18, Z+4	; 0x04
    f090:	35 81       	ldd	r19, Z+5	; 0x05
    f092:	3a 83       	std	Y+2, r19	; 0x02
    f094:	29 83       	std	Y+1, r18	; 0x01
    f096:	06 81       	ldd	r16, Z+6	; 0x06
    f098:	17 81       	ldd	r17, Z+7	; 0x07
    f09a:	0a c0       	rjmp	.+20     	; 0xf0b0 <mp_obj_str_make_new+0xf8>
    f09c:	96 95       	lsr	r25
    f09e:	87 95       	ror	r24
    f0a0:	96 95       	lsr	r25
    f0a2:	87 95       	ror	r24
    f0a4:	96 95       	lsr	r25
    f0a6:	87 95       	ror	r24
    f0a8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <qstr_hash>
    f0ac:	7c 01       	movw	r14, r24
    f0ae:	03 c0       	rjmp	.+6      	; 0xf0b6 <mp_obj_str_make_new+0xfe>
    f0b0:	fc 01       	movw	r30, r24
    f0b2:	e2 80       	ldd	r14, Z+2	; 0x02
    f0b4:	f3 80       	ldd	r15, Z+3	; 0x03
    f0b6:	e1 14       	cp	r14, r1
    f0b8:	f1 04       	cpc	r15, r1
    f0ba:	31 f4       	brne	.+12     	; 0xf0c8 <mp_obj_str_make_new+0x110>
    f0bc:	69 81       	ldd	r22, Y+1	; 0x01
    f0be:	7a 81       	ldd	r23, Y+2	; 0x02
    f0c0:	c8 01       	movw	r24, r16
    f0c2:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    f0c6:	7c 01       	movw	r14, r24
    f0c8:	a9 80       	ldd	r10, Y+1	; 0x01
    f0ca:	ba 80       	ldd	r11, Y+2	; 0x02
    f0cc:	b5 01       	movw	r22, r10
    f0ce:	c8 01       	movw	r24, r16
    f0d0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <qstr_find_strn>
    f0d4:	00 97       	sbiw	r24, 0x00	; 0
    f0d6:	41 f0       	breq	.+16     	; 0xf0e8 <mp_obj_str_make_new+0x130>
    f0d8:	88 0f       	add	r24, r24
    f0da:	99 1f       	adc	r25, r25
    f0dc:	88 0f       	add	r24, r24
    f0de:	99 1f       	adc	r25, r25
    f0e0:	88 0f       	add	r24, r24
    f0e2:	99 1f       	adc	r25, r25
    f0e4:	82 60       	ori	r24, 0x02	; 2
    f0e6:	1c c0       	rjmp	.+56     	; 0xf120 <mp_obj_str_make_new+0x168>
    f0e8:	a5 01       	movw	r20, r10
    f0ea:	60 e0       	ldi	r22, 0x00	; 0
    f0ec:	70 e0       	ldi	r23, 0x00	; 0
    f0ee:	c6 01       	movw	r24, r12
    f0f0:	0e 94 56 38 	call	0x70ac	; 0x70ac <mp_obj_new_str_copy>
    f0f4:	fc 01       	movw	r30, r24
    f0f6:	17 83       	std	Z+7, r17	; 0x07
    f0f8:	06 83       	std	Z+6, r16	; 0x06
    f0fa:	f3 82       	std	Z+3, r15	; 0x03
    f0fc:	e2 82       	std	Z+2, r14	; 0x02
    f0fe:	10 c0       	rjmp	.+32     	; 0xf120 <mp_obj_str_make_new+0x168>
    f100:	41 e0       	ldi	r20, 0x01	; 1
    f102:	50 e0       	ldi	r21, 0x00	; 0
    f104:	be 01       	movw	r22, r28
    f106:	6f 5f       	subi	r22, 0xFF	; 255
    f108:	7f 4f       	sbci	r23, 0xFF	; 255
    f10a:	0e 94 71 29 	call	0x52e2	; 0x52e2 <mp_get_buffer_raise>
    f10e:	6b 81       	ldd	r22, Y+3	; 0x03
    f110:	7c 81       	ldd	r23, Y+4	; 0x04
    f112:	89 81       	ldd	r24, Y+1	; 0x01
    f114:	9a 81       	ldd	r25, Y+2	; 0x02
    f116:	0e 94 8c 38 	call	0x7118	; 0x7118 <mp_obj_new_str>
    f11a:	02 c0       	rjmp	.+4      	; 0xf120 <mp_obj_str_make_new+0x168>
    f11c:	8a e0       	ldi	r24, 0x0A	; 10
    f11e:	90 e0       	ldi	r25, 0x00	; 0
    f120:	2b 96       	adiw	r28, 0x0b	; 11
    f122:	0f b6       	in	r0, 0x3f	; 63
    f124:	f8 94       	cli
    f126:	de bf       	out	0x3e, r29	; 62
    f128:	0f be       	out	0x3f, r0	; 63
    f12a:	cd bf       	out	0x3d, r28	; 61
    f12c:	df 91       	pop	r29
    f12e:	cf 91       	pop	r28
    f130:	1f 91       	pop	r17
    f132:	0f 91       	pop	r16
    f134:	ff 90       	pop	r15
    f136:	ef 90       	pop	r14
    f138:	df 90       	pop	r13
    f13a:	cf 90       	pop	r12
    f13c:	bf 90       	pop	r11
    f13e:	af 90       	pop	r10
    f140:	08 95       	ret

0000f142 <mp_obj_str_binary_op>:
    f142:	4f 92       	push	r4
    f144:	5f 92       	push	r5
    f146:	6f 92       	push	r6
    f148:	7f 92       	push	r7
    f14a:	8f 92       	push	r8
    f14c:	9f 92       	push	r9
    f14e:	af 92       	push	r10
    f150:	bf 92       	push	r11
    f152:	cf 92       	push	r12
    f154:	df 92       	push	r13
    f156:	ef 92       	push	r14
    f158:	ff 92       	push	r15
    f15a:	0f 93       	push	r16
    f15c:	1f 93       	push	r17
    f15e:	cf 93       	push	r28
    f160:	df 93       	push	r29
    f162:	cd b7       	in	r28, 0x3d	; 61
    f164:	de b7       	in	r29, 0x3e	; 62
    f166:	2b 97       	sbiw	r28, 0x0b	; 11
    f168:	0f b6       	in	r0, 0x3f	; 63
    f16a:	f8 94       	cli
    f16c:	de bf       	out	0x3e, r29	; 62
    f16e:	0f be       	out	0x3f, r0	; 63
    f170:	cd bf       	out	0x3d, r28	; 61
    f172:	81 32       	cpi	r24, 0x21	; 33
    f174:	09 f4       	brne	.+2      	; 0xf178 <mp_obj_str_binary_op+0x36>
    f176:	f8 c0       	rjmp	.+496    	; 0xf368 <mp_obj_str_binary_op+0x226>
    f178:	7a 01       	movw	r14, r20
    f17a:	8b 01       	movw	r16, r22
    f17c:	98 2e       	mov	r9, r24
    f17e:	cb 01       	movw	r24, r22
    f180:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f184:	6c 01       	movw	r12, r24
    f186:	c8 01       	movw	r24, r16
    f188:	87 70       	andi	r24, 0x07	; 7
    f18a:	99 27       	eor	r25, r25
    f18c:	02 97       	sbiw	r24, 0x02	; 2
    f18e:	71 f4       	brne	.+28     	; 0xf1ac <mp_obj_str_binary_op+0x6a>
    f190:	be 01       	movw	r22, r28
    f192:	6f 5f       	subi	r22, 0xFF	; 255
    f194:	7f 4f       	sbci	r23, 0xFF	; 255
    f196:	c8 01       	movw	r24, r16
    f198:	96 95       	lsr	r25
    f19a:	87 95       	ror	r24
    f19c:	96 95       	lsr	r25
    f19e:	87 95       	ror	r24
    f1a0:	96 95       	lsr	r25
    f1a2:	87 95       	ror	r24
    f1a4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f1a8:	5c 01       	movw	r10, r24
    f1aa:	07 c0       	rjmp	.+14     	; 0xf1ba <mp_obj_str_binary_op+0x78>
    f1ac:	f8 01       	movw	r30, r16
    f1ae:	84 81       	ldd	r24, Z+4	; 0x04
    f1b0:	95 81       	ldd	r25, Z+5	; 0x05
    f1b2:	9a 83       	std	Y+2, r25	; 0x02
    f1b4:	89 83       	std	Y+1, r24	; 0x01
    f1b6:	a6 80       	ldd	r10, Z+6	; 0x06
    f1b8:	b7 80       	ldd	r11, Z+7	; 0x07
    f1ba:	fd e1       	ldi	r31, 0x1D	; 29
    f1bc:	9f 12       	cpse	r9, r31
    f1be:	39 c0       	rjmp	.+114    	; 0xf232 <mp_obj_str_binary_op+0xf0>
    f1c0:	be 01       	movw	r22, r28
    f1c2:	66 5f       	subi	r22, 0xF6	; 246
    f1c4:	7f 4f       	sbci	r23, 0xFF	; 255
    f1c6:	c7 01       	movw	r24, r14
    f1c8:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <mp_obj_get_int_maybe>
    f1cc:	88 23       	and	r24, r24
    f1ce:	59 f1       	breq	.+86     	; 0xf226 <mp_obj_str_binary_op+0xe4>
    f1d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f1d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    f1d4:	18 16       	cp	r1, r24
    f1d6:	19 06       	cpc	r1, r25
    f1d8:	44 f0       	brlt	.+16     	; 0xf1ea <mp_obj_str_binary_op+0xa8>
    f1da:	82 e1       	ldi	r24, 0x12	; 18
    f1dc:	c8 16       	cp	r12, r24
    f1de:	8b e1       	ldi	r24, 0x1B	; 27
    f1e0:	d8 06       	cpc	r13, r24
    f1e2:	21 f1       	breq	.+72     	; 0xf22c <mp_obj_str_binary_op+0xea>
    f1e4:	8a ee       	ldi	r24, 0xEA	; 234
    f1e6:	9a e1       	ldi	r25, 0x1A	; 26
    f1e8:	ca c0       	rjmp	.+404    	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f1ea:	29 81       	ldd	r18, Y+1	; 0x01
    f1ec:	3a 81       	ldd	r19, Y+2	; 0x02
    f1ee:	82 9f       	mul	r24, r18
    f1f0:	b0 01       	movw	r22, r0
    f1f2:	83 9f       	mul	r24, r19
    f1f4:	70 0d       	add	r23, r0
    f1f6:	92 9f       	mul	r25, r18
    f1f8:	70 0d       	add	r23, r0
    f1fa:	11 24       	eor	r1, r1
    f1fc:	ce 01       	movw	r24, r28
    f1fe:	03 96       	adiw	r24, 0x03	; 3
    f200:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
    f204:	0f 81       	ldd	r16, Y+7	; 0x07
    f206:	18 85       	ldd	r17, Y+8	; 0x08
    f208:	2a 85       	ldd	r18, Y+10	; 0x0a
    f20a:	3b 85       	ldd	r19, Y+11	; 0x0b
    f20c:	49 81       	ldd	r20, Y+1	; 0x01
    f20e:	5a 81       	ldd	r21, Y+2	; 0x02
    f210:	61 e0       	ldi	r22, 0x01	; 1
    f212:	70 e0       	ldi	r23, 0x00	; 0
    f214:	c5 01       	movw	r24, r10
    f216:	0e 94 42 22 	call	0x4484	; 0x4484 <mp_seq_multiply>
    f21a:	be 01       	movw	r22, r28
    f21c:	6d 5f       	subi	r22, 0xFD	; 253
    f21e:	7f 4f       	sbci	r23, 0xFF	; 255
    f220:	c6 01       	movw	r24, r12
    f222:	f7 dd       	rcall	.-1042   	; 0xee12 <mp_obj_new_str_from_vstr>
    f224:	ac c0       	rjmp	.+344    	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f226:	80 e0       	ldi	r24, 0x00	; 0
    f228:	90 e0       	ldi	r25, 0x00	; 0
    f22a:	a9 c0       	rjmp	.+338    	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f22c:	8a e0       	ldi	r24, 0x0A	; 10
    f22e:	90 e0       	ldi	r25, 0x00	; 0
    f230:	a6 c0       	rjmp	.+332    	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f232:	c7 01       	movw	r24, r14
    f234:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f238:	c8 16       	cp	r12, r24
    f23a:	d9 06       	cpc	r13, r25
    f23c:	e9 f4       	brne	.+58     	; 0xf278 <mp_obj_str_binary_op+0x136>
    f23e:	c7 01       	movw	r24, r14
    f240:	87 70       	andi	r24, 0x07	; 7
    f242:	99 27       	eor	r25, r25
    f244:	02 97       	sbiw	r24, 0x02	; 2
    f246:	71 f4       	brne	.+28     	; 0xf264 <mp_obj_str_binary_op+0x122>
    f248:	be 01       	movw	r22, r28
    f24a:	6d 5f       	subi	r22, 0xFD	; 253
    f24c:	7f 4f       	sbci	r23, 0xFF	; 255
    f24e:	c7 01       	movw	r24, r14
    f250:	96 95       	lsr	r25
    f252:	87 95       	ror	r24
    f254:	96 95       	lsr	r25
    f256:	87 95       	ror	r24
    f258:	96 95       	lsr	r25
    f25a:	87 95       	ror	r24
    f25c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f260:	2c 01       	movw	r4, r24
    f262:	07 c0       	rjmp	.+14     	; 0xf272 <mp_obj_str_binary_op+0x130>
    f264:	f7 01       	movw	r30, r14
    f266:	84 81       	ldd	r24, Z+4	; 0x04
    f268:	95 81       	ldd	r25, Z+5	; 0x05
    f26a:	9c 83       	std	Y+4, r25	; 0x04
    f26c:	8b 83       	std	Y+3, r24	; 0x03
    f26e:	46 80       	ldd	r4, Z+6	; 0x06
    f270:	57 80       	ldd	r5, Z+7	; 0x07
    f272:	6b 80       	ldd	r6, Y+3	; 0x03
    f274:	7c 80       	ldd	r7, Y+4	; 0x04
    f276:	1b c0       	rjmp	.+54     	; 0xf2ae <mp_obj_str_binary_op+0x16c>
    f278:	f2 ef       	ldi	r31, 0xF2	; 242
    f27a:	cf 16       	cp	r12, r31
    f27c:	fa e1       	ldi	r31, 0x1A	; 26
    f27e:	df 06       	cpc	r13, r31
    f280:	91 f4       	brne	.+36     	; 0xf2a6 <mp_obj_str_binary_op+0x164>
    f282:	41 e0       	ldi	r20, 0x01	; 1
    f284:	50 e0       	ldi	r21, 0x00	; 0
    f286:	be 01       	movw	r22, r28
    f288:	6d 5f       	subi	r22, 0xFD	; 253
    f28a:	7f 4f       	sbci	r23, 0xFF	; 255
    f28c:	c7 01       	movw	r24, r14
    f28e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <mp_get_buffer>
    f292:	81 11       	cpse	r24, r1
    f294:	03 c0       	rjmp	.+6      	; 0xf29c <mp_obj_str_binary_op+0x15a>
    f296:	80 e0       	ldi	r24, 0x00	; 0
    f298:	90 e0       	ldi	r25, 0x00	; 0
    f29a:	71 c0       	rjmp	.+226    	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f29c:	4b 80       	ldd	r4, Y+3	; 0x03
    f29e:	5c 80       	ldd	r5, Y+4	; 0x04
    f2a0:	6d 80       	ldd	r6, Y+5	; 0x05
    f2a2:	7e 80       	ldd	r7, Y+6	; 0x06
    f2a4:	04 c0       	rjmp	.+8      	; 0xf2ae <mp_obj_str_binary_op+0x16c>
    f2a6:	81 e7       	ldi	r24, 0x71	; 113
    f2a8:	94 e0       	ldi	r25, 0x04	; 4
    f2aa:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    f2ae:	8e e0       	ldi	r24, 0x0E	; 14
    f2b0:	98 16       	cp	r9, r24
    f2b2:	71 f0       	breq	.+28     	; 0xf2d0 <mp_obj_str_binary_op+0x18e>
    f2b4:	89 15       	cp	r24, r9
    f2b6:	28 f0       	brcs	.+10     	; 0xf2c2 <mp_obj_str_binary_op+0x180>
    f2b8:	e4 e0       	ldi	r30, 0x04	; 4
    f2ba:	e9 15       	cp	r30, r9
    f2bc:	08 f0       	brcs	.+2      	; 0xf2c0 <mp_obj_str_binary_op+0x17e>
    f2be:	46 c0       	rjmp	.+140    	; 0xf34c <mp_obj_str_binary_op+0x20a>
    f2c0:	56 c0       	rjmp	.+172    	; 0xf36e <mp_obj_str_binary_op+0x22c>
    f2c2:	fb e1       	ldi	r31, 0x1B	; 27
    f2c4:	9f 16       	cp	r9, r31
    f2c6:	21 f0       	breq	.+8      	; 0xf2d0 <mp_obj_str_binary_op+0x18e>
    f2c8:	84 e2       	ldi	r24, 0x24	; 36
    f2ca:	98 16       	cp	r9, r24
    f2cc:	89 f1       	breq	.+98     	; 0xf330 <mp_obj_str_binary_op+0x1ee>
    f2ce:	4f c0       	rjmp	.+158    	; 0xf36e <mp_obj_str_binary_op+0x22c>
    f2d0:	89 80       	ldd	r8, Y+1	; 0x01
    f2d2:	9a 80       	ldd	r9, Y+2	; 0x02
    f2d4:	81 14       	cp	r8, r1
    f2d6:	91 04       	cpc	r9, r1
    f2d8:	31 f4       	brne	.+12     	; 0xf2e6 <mp_obj_str_binary_op+0x1a4>
    f2da:	c7 01       	movw	r24, r14
    f2dc:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f2e0:	c8 16       	cp	r12, r24
    f2e2:	d9 06       	cpc	r13, r25
    f2e4:	09 f1       	breq	.+66     	; 0xf328 <mp_obj_str_binary_op+0x1e6>
    f2e6:	61 14       	cp	r6, r1
    f2e8:	71 04       	cpc	r7, r1
    f2ea:	01 f1       	breq	.+64     	; 0xf32c <mp_obj_str_binary_op+0x1ea>
    f2ec:	b3 01       	movw	r22, r6
    f2ee:	68 0d       	add	r22, r8
    f2f0:	79 1d       	adc	r23, r9
    f2f2:	ce 01       	movw	r24, r28
    f2f4:	03 96       	adiw	r24, 0x03	; 3
    f2f6:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
    f2fa:	49 81       	ldd	r20, Y+1	; 0x01
    f2fc:	5a 81       	ldd	r21, Y+2	; 0x02
    f2fe:	b5 01       	movw	r22, r10
    f300:	8f 81       	ldd	r24, Y+7	; 0x07
    f302:	98 85       	ldd	r25, Y+8	; 0x08
    f304:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f308:	2f 81       	ldd	r18, Y+7	; 0x07
    f30a:	38 85       	ldd	r19, Y+8	; 0x08
    f30c:	89 81       	ldd	r24, Y+1	; 0x01
    f30e:	9a 81       	ldd	r25, Y+2	; 0x02
    f310:	a3 01       	movw	r20, r6
    f312:	b2 01       	movw	r22, r4
    f314:	82 0f       	add	r24, r18
    f316:	93 1f       	adc	r25, r19
    f318:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f31c:	be 01       	movw	r22, r28
    f31e:	6d 5f       	subi	r22, 0xFD	; 253
    f320:	7f 4f       	sbci	r23, 0xFF	; 255
    f322:	c6 01       	movw	r24, r12
    f324:	76 dd       	rcall	.-1300   	; 0xee12 <mp_obj_new_str_from_vstr>
    f326:	2b c0       	rjmp	.+86     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f328:	c7 01       	movw	r24, r14
    f32a:	29 c0       	rjmp	.+82     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f32c:	c8 01       	movw	r24, r16
    f32e:	27 c0       	rjmp	.+78     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f330:	69 81       	ldd	r22, Y+1	; 0x01
    f332:	7a 81       	ldd	r23, Y+2	; 0x02
    f334:	01 e0       	ldi	r16, 0x01	; 1
    f336:	10 e0       	ldi	r17, 0x00	; 0
    f338:	93 01       	movw	r18, r6
    f33a:	a2 01       	movw	r20, r4
    f33c:	c5 01       	movw	r24, r10
    f33e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <find_subbytes>
    f342:	89 2b       	or	r24, r25
    f344:	b9 f4       	brne	.+46     	; 0xf374 <mp_obj_str_binary_op+0x232>
    f346:	8e e0       	ldi	r24, 0x0E	; 14
    f348:	90 e0       	ldi	r25, 0x00	; 0
    f34a:	19 c0       	rjmp	.+50     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f34c:	49 81       	ldd	r20, Y+1	; 0x01
    f34e:	5a 81       	ldd	r21, Y+2	; 0x02
    f350:	83 01       	movw	r16, r6
    f352:	92 01       	movw	r18, r4
    f354:	b5 01       	movw	r22, r10
    f356:	89 2d       	mov	r24, r9
    f358:	90 e0       	ldi	r25, 0x00	; 0
    f35a:	0e 94 6f 22 	call	0x44de	; 0x44de <mp_seq_cmp_bytes>
    f35e:	81 11       	cpse	r24, r1
    f360:	0c c0       	rjmp	.+24     	; 0xf37a <mp_obj_str_binary_op+0x238>
    f362:	8e e0       	ldi	r24, 0x0E	; 14
    f364:	90 e0       	ldi	r25, 0x00	; 0
    f366:	0b c0       	rjmp	.+22     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f368:	80 e0       	ldi	r24, 0x00	; 0
    f36a:	90 e0       	ldi	r25, 0x00	; 0
    f36c:	08 c0       	rjmp	.+16     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f36e:	80 e0       	ldi	r24, 0x00	; 0
    f370:	90 e0       	ldi	r25, 0x00	; 0
    f372:	05 c0       	rjmp	.+10     	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f374:	8e e1       	ldi	r24, 0x1E	; 30
    f376:	90 e0       	ldi	r25, 0x00	; 0
    f378:	02 c0       	rjmp	.+4      	; 0xf37e <mp_obj_str_binary_op+0x23c>
    f37a:	8e e1       	ldi	r24, 0x1E	; 30
    f37c:	90 e0       	ldi	r25, 0x00	; 0
    f37e:	2b 96       	adiw	r28, 0x0b	; 11
    f380:	0f b6       	in	r0, 0x3f	; 63
    f382:	f8 94       	cli
    f384:	de bf       	out	0x3e, r29	; 62
    f386:	0f be       	out	0x3f, r0	; 63
    f388:	cd bf       	out	0x3d, r28	; 61
    f38a:	df 91       	pop	r29
    f38c:	cf 91       	pop	r28
    f38e:	1f 91       	pop	r17
    f390:	0f 91       	pop	r16
    f392:	ff 90       	pop	r15
    f394:	ef 90       	pop	r14
    f396:	df 90       	pop	r13
    f398:	cf 90       	pop	r12
    f39a:	bf 90       	pop	r11
    f39c:	af 90       	pop	r10
    f39e:	9f 90       	pop	r9
    f3a0:	8f 90       	pop	r8
    f3a2:	7f 90       	pop	r7
    f3a4:	6f 90       	pop	r6
    f3a6:	5f 90       	pop	r5
    f3a8:	4f 90       	pop	r4
    f3aa:	08 95       	ret

0000f3ac <str_replace>:
    f3ac:	2f 92       	push	r2
    f3ae:	3f 92       	push	r3
    f3b0:	4f 92       	push	r4
    f3b2:	5f 92       	push	r5
    f3b4:	6f 92       	push	r6
    f3b6:	7f 92       	push	r7
    f3b8:	8f 92       	push	r8
    f3ba:	9f 92       	push	r9
    f3bc:	af 92       	push	r10
    f3be:	bf 92       	push	r11
    f3c0:	cf 92       	push	r12
    f3c2:	df 92       	push	r13
    f3c4:	ef 92       	push	r14
    f3c6:	ff 92       	push	r15
    f3c8:	0f 93       	push	r16
    f3ca:	1f 93       	push	r17
    f3cc:	cf 93       	push	r28
    f3ce:	df 93       	push	r29
    f3d0:	cd b7       	in	r28, 0x3d	; 61
    f3d2:	de b7       	in	r29, 0x3e	; 62
    f3d4:	6d 97       	sbiw	r28, 0x1d	; 29
    f3d6:	0f b6       	in	r0, 0x3f	; 63
    f3d8:	f8 94       	cli
    f3da:	de bf       	out	0x3e, r29	; 62
    f3dc:	0f be       	out	0x3f, r0	; 63
    f3de:	cd bf       	out	0x3d, r28	; 61
    f3e0:	7d 8f       	std	Y+29, r23	; 0x1d
    f3e2:	6c 8f       	std	Y+28, r22	; 0x1c
    f3e4:	db 01       	movw	r26, r22
    f3e6:	ed 91       	ld	r30, X+
    f3e8:	fc 91       	ld	r31, X
    f3ea:	9f 01       	movw	r18, r30
    f3ec:	27 70       	andi	r18, 0x07	; 7
    f3ee:	33 27       	eor	r19, r19
    f3f0:	22 30       	cpi	r18, 0x02	; 2
    f3f2:	31 05       	cpc	r19, r1
    f3f4:	79 f0       	breq	.+30     	; 0xf414 <str_replace+0x68>
    f3f6:	9f 01       	movw	r18, r30
    f3f8:	23 70       	andi	r18, 0x03	; 3
    f3fa:	33 27       	eor	r19, r19
    f3fc:	23 2b       	or	r18, r19
    f3fe:	41 f4       	brne	.+16     	; 0xf410 <str_replace+0x64>
    f400:	01 90       	ld	r0, Z+
    f402:	f0 81       	ld	r31, Z
    f404:	e0 2d       	mov	r30, r0
    f406:	26 85       	ldd	r18, Z+14	; 0x0e
    f408:	37 85       	ldd	r19, Z+15	; 0x0f
    f40a:	21 5a       	subi	r18, 0xA1	; 161
    f40c:	38 47       	sbci	r19, 0x78	; 120
    f40e:	11 f0       	breq	.+4      	; 0xf414 <str_replace+0x68>
    f410:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    f414:	04 97       	sbiw	r24, 0x04	; 4
    f416:	c1 f4       	brne	.+48     	; 0xf448 <str_replace+0x9c>
    f418:	ec 8d       	ldd	r30, Y+28	; 0x1c
    f41a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    f41c:	86 81       	ldd	r24, Z+6	; 0x06
    f41e:	97 81       	ldd	r25, Z+7	; 0x07
    f420:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
    f424:	9f 8b       	std	Y+23, r25	; 0x17
    f426:	8e 8b       	std	Y+22, r24	; 0x16
    f428:	89 2b       	or	r24, r25
    f42a:	29 f4       	brne	.+10     	; 0xf436 <str_replace+0x8a>
    f42c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f42e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f430:	8d 91       	ld	r24, X+
    f432:	9c 91       	ld	r25, X
    f434:	59 c1       	rjmp	.+690    	; 0xf6e8 <str_replace+0x33c>
    f436:	ee 89       	ldd	r30, Y+22	; 0x16
    f438:	ff 89       	ldd	r31, Y+23	; 0x17
    f43a:	ff 23       	and	r31, r31
    f43c:	4c f4       	brge	.+18     	; 0xf450 <str_replace+0xa4>
    f43e:	2f ef       	ldi	r18, 0xFF	; 255
    f440:	3f ef       	ldi	r19, 0xFF	; 255
    f442:	3f 8b       	std	Y+23, r19	; 0x17
    f444:	2e 8b       	std	Y+22, r18	; 0x16
    f446:	04 c0       	rjmp	.+8      	; 0xf450 <str_replace+0xa4>
    f448:	8f ef       	ldi	r24, 0xFF	; 255
    f44a:	9f ef       	ldi	r25, 0xFF	; 255
    f44c:	9f 8b       	std	Y+23, r25	; 0x17
    f44e:	8e 8b       	std	Y+22, r24	; 0x16
    f450:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f452:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f454:	0d 91       	ld	r16, X+
    f456:	1c 91       	ld	r17, X
    f458:	c8 01       	movw	r24, r16
    f45a:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f45e:	9b 8f       	std	Y+27, r25	; 0x1b
    f460:	8a 8f       	std	Y+26, r24	; 0x1a
    f462:	ec 8d       	ldd	r30, Y+28	; 0x1c
    f464:	fd 8d       	ldd	r31, Y+29	; 0x1d
    f466:	82 81       	ldd	r24, Z+2	; 0x02
    f468:	93 81       	ldd	r25, Z+3	; 0x03
    f46a:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f46e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    f470:	3b 8d       	ldd	r19, Y+27	; 0x1b
    f472:	28 17       	cp	r18, r24
    f474:	39 07       	cpc	r19, r25
    f476:	21 f0       	breq	.+8      	; 0xf480 <str_replace+0xd4>
    f478:	81 e7       	ldi	r24, 0x71	; 113
    f47a:	94 e0       	ldi	r25, 0x04	; 4
    f47c:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    f480:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f482:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f484:	14 96       	adiw	r26, 0x04	; 4
    f486:	8d 91       	ld	r24, X+
    f488:	9c 91       	ld	r25, X
    f48a:	15 97       	sbiw	r26, 0x05	; 5
    f48c:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f490:	ea 8d       	ldd	r30, Y+26	; 0x1a
    f492:	fb 8d       	ldd	r31, Y+27	; 0x1b
    f494:	e8 17       	cp	r30, r24
    f496:	f9 07       	cpc	r31, r25
    f498:	21 f0       	breq	.+8      	; 0xf4a2 <str_replace+0xf6>
    f49a:	81 e7       	ldi	r24, 0x71	; 113
    f49c:	94 e0       	ldi	r25, 0x04	; 4
    f49e:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
    f4a2:	c8 01       	movw	r24, r16
    f4a4:	87 70       	andi	r24, 0x07	; 7
    f4a6:	99 27       	eor	r25, r25
    f4a8:	02 97       	sbiw	r24, 0x02	; 2
    f4aa:	79 f4       	brne	.+30     	; 0xf4ca <str_replace+0x11e>
    f4ac:	be 01       	movw	r22, r28
    f4ae:	6f 5f       	subi	r22, 0xFF	; 255
    f4b0:	7f 4f       	sbci	r23, 0xFF	; 255
    f4b2:	c8 01       	movw	r24, r16
    f4b4:	96 95       	lsr	r25
    f4b6:	87 95       	ror	r24
    f4b8:	96 95       	lsr	r25
    f4ba:	87 95       	ror	r24
    f4bc:	96 95       	lsr	r25
    f4be:	87 95       	ror	r24
    f4c0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f4c4:	99 8b       	std	Y+17, r25	; 0x11
    f4c6:	88 8b       	std	Y+16, r24	; 0x10
    f4c8:	0d c0       	rjmp	.+26     	; 0xf4e4 <str_replace+0x138>
    f4ca:	d8 01       	movw	r26, r16
    f4cc:	14 96       	adiw	r26, 0x04	; 4
    f4ce:	8d 91       	ld	r24, X+
    f4d0:	9c 91       	ld	r25, X
    f4d2:	15 97       	sbiw	r26, 0x05	; 5
    f4d4:	9a 83       	std	Y+2, r25	; 0x02
    f4d6:	89 83       	std	Y+1, r24	; 0x01
    f4d8:	16 96       	adiw	r26, 0x06	; 6
    f4da:	ed 91       	ld	r30, X+
    f4dc:	fc 91       	ld	r31, X
    f4de:	17 97       	sbiw	r26, 0x07	; 7
    f4e0:	f9 8b       	std	Y+17, r31	; 0x11
    f4e2:	e8 8b       	std	Y+16, r30	; 0x10
    f4e4:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f4e6:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f4e8:	12 96       	adiw	r26, 0x02	; 2
    f4ea:	ed 91       	ld	r30, X+
    f4ec:	fc 91       	ld	r31, X
    f4ee:	13 97       	sbiw	r26, 0x03	; 3
    f4f0:	cf 01       	movw	r24, r30
    f4f2:	87 70       	andi	r24, 0x07	; 7
    f4f4:	99 27       	eor	r25, r25
    f4f6:	02 97       	sbiw	r24, 0x02	; 2
    f4f8:	79 f4       	brne	.+30     	; 0xf518 <str_replace+0x16c>
    f4fa:	be 01       	movw	r22, r28
    f4fc:	6d 5f       	subi	r22, 0xFD	; 253
    f4fe:	7f 4f       	sbci	r23, 0xFF	; 255
    f500:	cf 01       	movw	r24, r30
    f502:	96 95       	lsr	r25
    f504:	87 95       	ror	r24
    f506:	96 95       	lsr	r25
    f508:	87 95       	ror	r24
    f50a:	96 95       	lsr	r25
    f50c:	87 95       	ror	r24
    f50e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f512:	9f 87       	std	Y+15, r25	; 0x0f
    f514:	8e 87       	std	Y+14, r24	; 0x0e
    f516:	08 c0       	rjmp	.+16     	; 0xf528 <str_replace+0x17c>
    f518:	84 81       	ldd	r24, Z+4	; 0x04
    f51a:	95 81       	ldd	r25, Z+5	; 0x05
    f51c:	9c 83       	std	Y+4, r25	; 0x04
    f51e:	8b 83       	std	Y+3, r24	; 0x03
    f520:	26 81       	ldd	r18, Z+6	; 0x06
    f522:	37 81       	ldd	r19, Z+7	; 0x07
    f524:	3f 87       	std	Y+15, r19	; 0x0f
    f526:	2e 87       	std	Y+14, r18	; 0x0e
    f528:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f52a:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f52c:	14 96       	adiw	r26, 0x04	; 4
    f52e:	ed 91       	ld	r30, X+
    f530:	fc 91       	ld	r31, X
    f532:	15 97       	sbiw	r26, 0x05	; 5
    f534:	cf 01       	movw	r24, r30
    f536:	87 70       	andi	r24, 0x07	; 7
    f538:	99 27       	eor	r25, r25
    f53a:	02 97       	sbiw	r24, 0x02	; 2
    f53c:	79 f4       	brne	.+30     	; 0xf55c <str_replace+0x1b0>
    f53e:	be 01       	movw	r22, r28
    f540:	6b 5f       	subi	r22, 0xFB	; 251
    f542:	7f 4f       	sbci	r23, 0xFF	; 255
    f544:	cf 01       	movw	r24, r30
    f546:	96 95       	lsr	r25
    f548:	87 95       	ror	r24
    f54a:	96 95       	lsr	r25
    f54c:	87 95       	ror	r24
    f54e:	96 95       	lsr	r25
    f550:	87 95       	ror	r24
    f552:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f556:	9b 8b       	std	Y+19, r25	; 0x13
    f558:	8a 8b       	std	Y+18, r24	; 0x12
    f55a:	08 c0       	rjmp	.+16     	; 0xf56c <str_replace+0x1c0>
    f55c:	84 81       	ldd	r24, Z+4	; 0x04
    f55e:	95 81       	ldd	r25, Z+5	; 0x05
    f560:	9e 83       	std	Y+6, r25	; 0x06
    f562:	8d 83       	std	Y+5, r24	; 0x05
    f564:	26 81       	ldd	r18, Z+6	; 0x06
    f566:	37 81       	ldd	r19, Z+7	; 0x07
    f568:	3b 8b       	std	Y+19, r19	; 0x13
    f56a:	2a 8b       	std	Y+18, r18	; 0x12
    f56c:	2b 81       	ldd	r18, Y+3	; 0x03
    f56e:	3c 81       	ldd	r19, Y+4	; 0x04
    f570:	89 81       	ldd	r24, Y+1	; 0x01
    f572:	9a 81       	ldd	r25, Y+2	; 0x02
    f574:	82 17       	cp	r24, r18
    f576:	93 07       	cpc	r25, r19
    f578:	28 f4       	brcc	.+10     	; 0xf584 <str_replace+0x1d8>
    f57a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f57c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f57e:	8d 91       	ld	r24, X+
    f580:	9c 91       	ld	r25, X
    f582:	b2 c0       	rjmp	.+356    	; 0xf6e8 <str_replace+0x33c>
    f584:	a1 2c       	mov	r10, r1
    f586:	b1 2c       	mov	r11, r1
    f588:	6e 88       	ldd	r6, Y+22	; 0x16
    f58a:	7f 88       	ldd	r7, Y+23	; 0x17
    f58c:	b8 89       	ldd	r27, Y+16	; 0x10
    f58e:	b8 8f       	std	Y+24, r27	; 0x18
    f590:	e9 89       	ldd	r30, Y+17	; 0x11
    f592:	e9 8f       	std	Y+25, r30	; 0x19
    f594:	29 80       	ldd	r2, Y+1	; 0x01
    f596:	3a 80       	ldd	r3, Y+2	; 0x02
    f598:	8b 81       	ldd	r24, Y+3	; 0x03
    f59a:	9c 81       	ldd	r25, Y+4	; 0x04
    f59c:	89 2b       	or	r24, r25
    f59e:	81 f4       	brne	.+32     	; 0xf5c0 <str_replace+0x214>
    f5a0:	a1 14       	cp	r10, r1
    f5a2:	b1 04       	cpc	r11, r1
    f5a4:	39 f0       	breq	.+14     	; 0xf5b4 <str_replace+0x208>
    f5a6:	4d 81       	ldd	r20, Y+5	; 0x05
    f5a8:	5e 81       	ldd	r21, Y+6	; 0x06
    f5aa:	6a 89       	ldd	r22, Y+18	; 0x12
    f5ac:	7b 89       	ldd	r23, Y+19	; 0x13
    f5ae:	c5 01       	movw	r24, r10
    f5b0:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f5b4:	8d 80       	ldd	r8, Y+5	; 0x05
    f5b6:	9e 80       	ldd	r9, Y+6	; 0x06
    f5b8:	ee 24       	eor	r14, r14
    f5ba:	e3 94       	inc	r14
    f5bc:	f1 2c       	mov	r15, r1
    f5be:	04 c0       	rjmp	.+8      	; 0xf5c8 <str_replace+0x21c>
    f5c0:	e1 2c       	mov	r14, r1
    f5c2:	f1 2c       	mov	r15, r1
    f5c4:	81 2c       	mov	r8, r1
    f5c6:	91 2c       	mov	r9, r1
    f5c8:	7d 8a       	std	Y+21, r7	; 0x15
    f5ca:	6c 8a       	std	Y+20, r6	; 0x14
    f5cc:	2e 89       	ldd	r18, Y+22	; 0x16
    f5ce:	3f 89       	ldd	r19, Y+23	; 0x17
    f5d0:	e2 16       	cp	r14, r18
    f5d2:	f3 06       	cpc	r15, r19
    f5d4:	09 f4       	brne	.+2      	; 0xf5d8 <str_replace+0x22c>
    f5d6:	53 c0       	rjmp	.+166    	; 0xf67e <str_replace+0x2d2>
    f5d8:	21 14       	cp	r2, r1
    f5da:	31 04       	cpc	r3, r1
    f5dc:	e1 f5       	brne	.+120    	; 0xf656 <str_replace+0x2aa>
    f5de:	48 8c       	ldd	r4, Y+24	; 0x18
    f5e0:	59 8c       	ldd	r5, Y+25	; 0x19
    f5e2:	fd 8a       	std	Y+21, r15	; 0x15
    f5e4:	ec 8a       	std	Y+20, r14	; 0x14
    f5e6:	50 c0       	rjmp	.+160    	; 0xf688 <str_replace+0x2dc>
    f5e8:	cd 28       	or	r12, r13
    f5ea:	11 f4       	brne	.+4      	; 0xf5f0 <str_replace+0x244>
    f5ec:	0f 5f       	subi	r16, 0xFF	; 255
    f5ee:	1f 4f       	sbci	r17, 0xFF	; 255
    f5f0:	a1 14       	cp	r10, r1
    f5f2:	b1 04       	cpc	r11, r1
    f5f4:	09 f4       	brne	.+2      	; 0xf5f8 <str_replace+0x24c>
    f5f6:	6a c0       	rjmp	.+212    	; 0xf6cc <str_replace+0x320>
    f5f8:	68 01       	movw	r12, r16
    f5fa:	c4 18       	sub	r12, r4
    f5fc:	d5 08       	sbc	r13, r5
    f5fe:	a6 01       	movw	r20, r12
    f600:	b2 01       	movw	r22, r4
    f602:	c5 01       	movw	r24, r10
    f604:	88 0d       	add	r24, r8
    f606:	99 1d       	adc	r25, r9
    f608:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f60c:	8c 0c       	add	r8, r12
    f60e:	9d 1c       	adc	r9, r13
    f610:	4d 81       	ldd	r20, Y+5	; 0x05
    f612:	5e 81       	ldd	r21, Y+6	; 0x06
    f614:	6a 89       	ldd	r22, Y+18	; 0x12
    f616:	7b 89       	ldd	r23, Y+19	; 0x13
    f618:	c5 01       	movw	r24, r10
    f61a:	88 0d       	add	r24, r8
    f61c:	99 1d       	adc	r25, r9
    f61e:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f622:	8d 81       	ldd	r24, Y+5	; 0x05
    f624:	9e 81       	ldd	r25, Y+6	; 0x06
    f626:	88 0e       	add	r8, r24
    f628:	99 1e       	adc	r9, r25
    f62a:	4b 80       	ldd	r4, Y+3	; 0x03
    f62c:	5c 80       	ldd	r5, Y+4	; 0x04
    f62e:	40 0e       	add	r4, r16
    f630:	51 1e       	adc	r5, r17
    f632:	29 80       	ldd	r2, Y+1	; 0x01
    f634:	3a 80       	ldd	r3, Y+2	; 0x02
    f636:	88 89       	ldd	r24, Y+16	; 0x10
    f638:	99 89       	ldd	r25, Y+17	; 0x11
    f63a:	28 0e       	add	r2, r24
    f63c:	39 1e       	adc	r3, r25
    f63e:	24 18       	sub	r2, r4
    f640:	35 08       	sbc	r3, r5
    f642:	9f ef       	ldi	r25, 0xFF	; 255
    f644:	e9 1a       	sub	r14, r25
    f646:	f9 0a       	sbc	r15, r25
    f648:	e6 14       	cp	r14, r6
    f64a:	f7 04       	cpc	r15, r7
    f64c:	e9 f0       	breq	.+58     	; 0xf688 <str_replace+0x2dc>
    f64e:	21 14       	cp	r2, r1
    f650:	31 04       	cpc	r3, r1
    f652:	19 f4       	brne	.+6      	; 0xf65a <str_replace+0x2ae>
    f654:	17 c0       	rjmp	.+46     	; 0xf684 <str_replace+0x2d8>
    f656:	48 8c       	ldd	r4, Y+24	; 0x18
    f658:	59 8c       	ldd	r5, Y+25	; 0x19
    f65a:	cb 80       	ldd	r12, Y+3	; 0x03
    f65c:	dc 80       	ldd	r13, Y+4	; 0x04
    f65e:	01 e0       	ldi	r16, 0x01	; 1
    f660:	10 e0       	ldi	r17, 0x00	; 0
    f662:	96 01       	movw	r18, r12
    f664:	4e 85       	ldd	r20, Y+14	; 0x0e
    f666:	5f 85       	ldd	r21, Y+15	; 0x0f
    f668:	b1 01       	movw	r22, r2
    f66a:	c2 01       	movw	r24, r4
    f66c:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <find_subbytes>
    f670:	8c 01       	movw	r16, r24
    f672:	89 2b       	or	r24, r25
    f674:	09 f0       	breq	.+2      	; 0xf678 <str_replace+0x2cc>
    f676:	b8 cf       	rjmp	.-144    	; 0xf5e8 <str_replace+0x23c>
    f678:	fd 8a       	std	Y+21, r15	; 0x15
    f67a:	ec 8a       	std	Y+20, r14	; 0x14
    f67c:	05 c0       	rjmp	.+10     	; 0xf688 <str_replace+0x2dc>
    f67e:	48 8c       	ldd	r4, Y+24	; 0x18
    f680:	59 8c       	ldd	r5, Y+25	; 0x19
    f682:	02 c0       	rjmp	.+4      	; 0xf688 <str_replace+0x2dc>
    f684:	fd 8a       	std	Y+21, r15	; 0x15
    f686:	ec 8a       	std	Y+20, r14	; 0x14
    f688:	a1 14       	cp	r10, r1
    f68a:	b1 04       	cpc	r11, r1
    f68c:	29 f1       	breq	.+74     	; 0xf6d8 <str_replace+0x32c>
    f68e:	a1 01       	movw	r20, r2
    f690:	b2 01       	movw	r22, r4
    f692:	c5 01       	movw	r24, r10
    f694:	88 0d       	add	r24, r8
    f696:	99 1d       	adc	r25, r9
    f698:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f69c:	be 01       	movw	r22, r28
    f69e:	69 5f       	subi	r22, 0xF9	; 249
    f6a0:	7f 4f       	sbci	r23, 0xFF	; 255
    f6a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f6a4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    f6a6:	b5 db       	rcall	.-2198   	; 0xee12 <mp_obj_new_str_from_vstr>
    f6a8:	1f c0       	rjmp	.+62     	; 0xf6e8 <str_replace+0x33c>
    f6aa:	ac 8d       	ldd	r26, Y+28	; 0x1c
    f6ac:	bd 8d       	ldd	r27, Y+29	; 0x1d
    f6ae:	8d 91       	ld	r24, X+
    f6b0:	9c 91       	ld	r25, X
    f6b2:	1a c0       	rjmp	.+52     	; 0xf6e8 <str_replace+0x33c>
    f6b4:	ce 01       	movw	r24, r28
    f6b6:	07 96       	adiw	r24, 0x07	; 7
    f6b8:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
    f6bc:	ab 84       	ldd	r10, Y+11	; 0x0b
    f6be:	bc 84       	ldd	r11, Y+12	; 0x0c
    f6c0:	a1 14       	cp	r10, r1
    f6c2:	b1 04       	cpc	r11, r1
    f6c4:	09 f0       	breq	.+2      	; 0xf6c8 <str_replace+0x31c>
    f6c6:	66 cf       	rjmp	.-308    	; 0xf594 <str_replace+0x1e8>
    f6c8:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    f6cc:	c8 01       	movw	r24, r16
    f6ce:	84 19       	sub	r24, r4
    f6d0:	95 09       	sbc	r25, r5
    f6d2:	88 0e       	add	r8, r24
    f6d4:	99 1e       	adc	r9, r25
    f6d6:	a5 cf       	rjmp	.-182    	; 0xf622 <str_replace+0x276>
    f6d8:	b4 01       	movw	r22, r8
    f6da:	62 0d       	add	r22, r2
    f6dc:	73 1d       	adc	r23, r3
    f6de:	ec 89       	ldd	r30, Y+20	; 0x14
    f6e0:	fd 89       	ldd	r31, Y+21	; 0x15
    f6e2:	ef 2b       	or	r30, r31
    f6e4:	39 f7       	brne	.-50     	; 0xf6b4 <str_replace+0x308>
    f6e6:	e1 cf       	rjmp	.-62     	; 0xf6aa <str_replace+0x2fe>
    f6e8:	6d 96       	adiw	r28, 0x1d	; 29
    f6ea:	0f b6       	in	r0, 0x3f	; 63
    f6ec:	f8 94       	cli
    f6ee:	de bf       	out	0x3e, r29	; 62
    f6f0:	0f be       	out	0x3f, r0	; 63
    f6f2:	cd bf       	out	0x3d, r28	; 61
    f6f4:	df 91       	pop	r29
    f6f6:	cf 91       	pop	r28
    f6f8:	1f 91       	pop	r17
    f6fa:	0f 91       	pop	r16
    f6fc:	ff 90       	pop	r15
    f6fe:	ef 90       	pop	r14
    f700:	df 90       	pop	r13
    f702:	cf 90       	pop	r12
    f704:	bf 90       	pop	r11
    f706:	af 90       	pop	r10
    f708:	9f 90       	pop	r9
    f70a:	8f 90       	pop	r8
    f70c:	7f 90       	pop	r7
    f70e:	6f 90       	pop	r6
    f710:	5f 90       	pop	r5
    f712:	4f 90       	pop	r4
    f714:	3f 90       	pop	r3
    f716:	2f 90       	pop	r2
    f718:	08 95       	ret

0000f71a <str_caseconv>:
    f71a:	8f 92       	push	r8
    f71c:	9f 92       	push	r9
    f71e:	af 92       	push	r10
    f720:	bf 92       	push	r11
    f722:	cf 92       	push	r12
    f724:	df 92       	push	r13
    f726:	ef 92       	push	r14
    f728:	ff 92       	push	r15
    f72a:	0f 93       	push	r16
    f72c:	1f 93       	push	r17
    f72e:	cf 93       	push	r28
    f730:	df 93       	push	r29
    f732:	cd b7       	in	r28, 0x3d	; 61
    f734:	de b7       	in	r29, 0x3e	; 62
    f736:	29 97       	sbiw	r28, 0x09	; 9
    f738:	0f b6       	in	r0, 0x3f	; 63
    f73a:	f8 94       	cli
    f73c:	de bf       	out	0x3e, r29	; 62
    f73e:	0f be       	out	0x3f, r0	; 63
    f740:	cd bf       	out	0x3d, r28	; 61
    f742:	5c 01       	movw	r10, r24
    f744:	4b 01       	movw	r8, r22
    f746:	cb 01       	movw	r24, r22
    f748:	87 70       	andi	r24, 0x07	; 7
    f74a:	99 27       	eor	r25, r25
    f74c:	02 97       	sbiw	r24, 0x02	; 2
    f74e:	79 f4       	brne	.+30     	; 0xf76e <str_caseconv+0x54>
    f750:	be 01       	movw	r22, r28
    f752:	6f 5f       	subi	r22, 0xFF	; 255
    f754:	7f 4f       	sbci	r23, 0xFF	; 255
    f756:	c4 01       	movw	r24, r8
    f758:	96 95       	lsr	r25
    f75a:	87 95       	ror	r24
    f75c:	96 95       	lsr	r25
    f75e:	87 95       	ror	r24
    f760:	96 95       	lsr	r25
    f762:	87 95       	ror	r24
    f764:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    f768:	08 2f       	mov	r16, r24
    f76a:	19 2f       	mov	r17, r25
    f76c:	07 c0       	rjmp	.+14     	; 0xf77c <str_caseconv+0x62>
    f76e:	fb 01       	movw	r30, r22
    f770:	84 81       	ldd	r24, Z+4	; 0x04
    f772:	95 81       	ldd	r25, Z+5	; 0x05
    f774:	9a 83       	std	Y+2, r25	; 0x02
    f776:	89 83       	std	Y+1, r24	; 0x01
    f778:	06 81       	ldd	r16, Z+6	; 0x06
    f77a:	17 81       	ldd	r17, Z+7	; 0x07
    f77c:	69 81       	ldd	r22, Y+1	; 0x01
    f77e:	7a 81       	ldd	r23, Y+2	; 0x02
    f780:	ce 01       	movw	r24, r28
    f782:	03 96       	adiw	r24, 0x03	; 3
    f784:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
    f788:	3f 81       	ldd	r19, Y+7	; 0x07
    f78a:	28 85       	ldd	r18, Y+8	; 0x08
    f78c:	89 81       	ldd	r24, Y+1	; 0x01
    f78e:	9a 81       	ldd	r25, Y+2	; 0x02
    f790:	89 2b       	or	r24, r25
    f792:	b1 f0       	breq	.+44     	; 0xf7c0 <str_caseconv+0xa6>
    f794:	c0 2e       	mov	r12, r16
    f796:	d1 2e       	mov	r13, r17
    f798:	e3 2e       	mov	r14, r19
    f79a:	f2 2e       	mov	r15, r18
    f79c:	00 e0       	ldi	r16, 0x00	; 0
    f79e:	10 e0       	ldi	r17, 0x00	; 0
    f7a0:	f6 01       	movw	r30, r12
    f7a2:	81 91       	ld	r24, Z+
    f7a4:	6f 01       	movw	r12, r30
    f7a6:	90 e0       	ldi	r25, 0x00	; 0
    f7a8:	f5 01       	movw	r30, r10
    f7aa:	09 95       	icall
    f7ac:	f7 01       	movw	r30, r14
    f7ae:	81 93       	st	Z+, r24
    f7b0:	7f 01       	movw	r14, r30
    f7b2:	0f 5f       	subi	r16, 0xFF	; 255
    f7b4:	1f 4f       	sbci	r17, 0xFF	; 255
    f7b6:	89 81       	ldd	r24, Y+1	; 0x01
    f7b8:	9a 81       	ldd	r25, Y+2	; 0x02
    f7ba:	08 17       	cp	r16, r24
    f7bc:	19 07       	cpc	r17, r25
    f7be:	80 f3       	brcs	.-32     	; 0xf7a0 <str_caseconv+0x86>
    f7c0:	c4 01       	movw	r24, r8
    f7c2:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
    f7c6:	be 01       	movw	r22, r28
    f7c8:	6d 5f       	subi	r22, 0xFD	; 253
    f7ca:	7f 4f       	sbci	r23, 0xFF	; 255
    f7cc:	22 db       	rcall	.-2492   	; 0xee12 <mp_obj_new_str_from_vstr>
    f7ce:	29 96       	adiw	r28, 0x09	; 9
    f7d0:	0f b6       	in	r0, 0x3f	; 63
    f7d2:	f8 94       	cli
    f7d4:	de bf       	out	0x3e, r29	; 62
    f7d6:	0f be       	out	0x3f, r0	; 63
    f7d8:	cd bf       	out	0x3d, r28	; 61
    f7da:	df 91       	pop	r29
    f7dc:	cf 91       	pop	r28
    f7de:	1f 91       	pop	r17
    f7e0:	0f 91       	pop	r16
    f7e2:	ff 90       	pop	r15
    f7e4:	ef 90       	pop	r14
    f7e6:	df 90       	pop	r13
    f7e8:	cf 90       	pop	r12
    f7ea:	bf 90       	pop	r11
    f7ec:	af 90       	pop	r10
    f7ee:	9f 90       	pop	r9
    f7f0:	8f 90       	pop	r8
    f7f2:	08 95       	ret

0000f7f4 <str_lower>:
    f7f4:	bc 01       	movw	r22, r24
    f7f6:	82 e2       	ldi	r24, 0x22	; 34
    f7f8:	91 e0       	ldi	r25, 0x01	; 1
    f7fa:	8f cf       	rjmp	.-226    	; 0xf71a <str_caseconv>
    f7fc:	08 95       	ret

0000f7fe <str_upper>:
    f7fe:	bc 01       	movw	r22, r24
    f800:	8f e2       	ldi	r24, 0x2F	; 47
    f802:	91 e0       	ldi	r25, 0x01	; 1
    f804:	8a cf       	rjmp	.-236    	; 0xf71a <str_caseconv>
    f806:	08 95       	ret

0000f808 <mp_builtin_repr>:
    f808:	ef 92       	push	r14
    f80a:	ff 92       	push	r15
    f80c:	0f 93       	push	r16
    f80e:	1f 93       	push	r17
    f810:	cf 93       	push	r28
    f812:	df 93       	push	r29
    f814:	cd b7       	in	r28, 0x3d	; 61
    f816:	de b7       	in	r29, 0x3e	; 62
    f818:	2b 97       	sbiw	r28, 0x0b	; 11
    f81a:	0f b6       	in	r0, 0x3f	; 63
    f81c:	f8 94       	cli
    f81e:	de bf       	out	0x3e, r29	; 62
    f820:	0f be       	out	0x3f, r0	; 63
    f822:	cd bf       	out	0x3d, r28	; 61
    f824:	7c 01       	movw	r14, r24
    f826:	60 e1       	ldi	r22, 0x10	; 16
    f828:	70 e0       	ldi	r23, 0x00	; 0
    f82a:	8e 01       	movw	r16, r28
    f82c:	0f 5f       	subi	r16, 0xFF	; 255
    f82e:	1f 4f       	sbci	r17, 0xFF	; 255
    f830:	c8 01       	movw	r24, r16
    f832:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
    f836:	19 87       	std	Y+9, r17	; 0x09
    f838:	08 87       	std	Y+8, r16	; 0x08
    f83a:	89 ea       	ldi	r24, 0xA9	; 169
    f83c:	9e e4       	ldi	r25, 0x4E	; 78
    f83e:	9b 87       	std	Y+11, r25	; 0x0b
    f840:	8a 87       	std	Y+10, r24	; 0x0a
    f842:	41 e0       	ldi	r20, 0x01	; 1
    f844:	b7 01       	movw	r22, r14
    f846:	ce 01       	movw	r24, r28
    f848:	08 96       	adiw	r24, 0x08	; 8
    f84a:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
    f84e:	b8 01       	movw	r22, r16
    f850:	82 e1       	ldi	r24, 0x12	; 18
    f852:	9b e1       	ldi	r25, 0x1B	; 27
    f854:	de da       	rcall	.-2628   	; 0xee12 <mp_obj_new_str_from_vstr>
    f856:	2b 96       	adiw	r28, 0x0b	; 11
    f858:	0f b6       	in	r0, 0x3f	; 63
    f85a:	f8 94       	cli
    f85c:	de bf       	out	0x3e, r29	; 62
    f85e:	0f be       	out	0x3f, r0	; 63
    f860:	cd bf       	out	0x3d, r28	; 61
    f862:	df 91       	pop	r29
    f864:	cf 91       	pop	r28
    f866:	1f 91       	pop	r17
    f868:	0f 91       	pop	r16
    f86a:	ff 90       	pop	r15
    f86c:	ef 90       	pop	r14
    f86e:	08 95       	ret

0000f870 <qstr_from_strn>:
    f870:	cf 92       	push	r12
    f872:	df 92       	push	r13
    f874:	ef 92       	push	r14
    f876:	ff 92       	push	r15
    f878:	0f 93       	push	r16
    f87a:	1f 93       	push	r17
    f87c:	cf 93       	push	r28
    f87e:	df 93       	push	r29
    f880:	7c 01       	movw	r14, r24
    f882:	eb 01       	movw	r28, r22
    f884:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <qstr_find_strn>
    f888:	00 97       	sbiw	r24, 0x00	; 0
    f88a:	09 f0       	breq	.+2      	; 0xf88e <qstr_from_strn+0x1e>
    f88c:	f0 c0       	rjmp	.+480    	; 0xfa6e <qstr_from_strn+0x1fe>
    f88e:	cf 3f       	cpi	r28, 0xFF	; 255
    f890:	d1 05       	cpc	r29, r1
    f892:	39 f0       	breq	.+14     	; 0xf8a2 <qstr_from_strn+0x32>
    f894:	30 f0       	brcs	.+12     	; 0xf8a2 <qstr_from_strn+0x32>
    f896:	66 e5       	ldi	r22, 0x56	; 86
    f898:	7a e0       	ldi	r23, 0x0A	; 10
    f89a:	88 ef       	ldi	r24, 0xF8	; 248
    f89c:	9f e1       	ldi	r25, 0x1F	; 31
    f89e:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
    f8a2:	6e 01       	movw	r12, r28
    f8a4:	83 e0       	ldi	r24, 0x03	; 3
    f8a6:	c8 0e       	add	r12, r24
    f8a8:	d1 1c       	adc	r13, r1
    f8aa:	80 91 a2 6b 	lds	r24, 0x6BA2	; 0x806ba2 <mp_state_ctx+0x48>
    f8ae:	90 91 a3 6b 	lds	r25, 0x6BA3	; 0x806ba3 <mp_state_ctx+0x49>
    f8b2:	00 97       	sbiw	r24, 0x00	; 0
    f8b4:	99 f1       	breq	.+102    	; 0xf91c <qstr_from_strn+0xac>
    f8b6:	60 91 a4 6b 	lds	r22, 0x6BA4	; 0x806ba4 <mp_state_ctx+0x4a>
    f8ba:	70 91 a5 6b 	lds	r23, 0x6BA5	; 0x806ba5 <mp_state_ctx+0x4b>
    f8be:	20 91 a6 6b 	lds	r18, 0x6BA6	; 0x806ba6 <mp_state_ctx+0x4c>
    f8c2:	30 91 a7 6b 	lds	r19, 0x6BA7	; 0x806ba7 <mp_state_ctx+0x4d>
    f8c6:	2c 0d       	add	r18, r12
    f8c8:	3d 1d       	adc	r19, r13
    f8ca:	62 17       	cp	r22, r18
    f8cc:	73 07       	cpc	r23, r19
    f8ce:	08 f0       	brcs	.+2      	; 0xf8d2 <qstr_from_strn+0x62>
    f8d0:	4e c0       	rjmp	.+156    	; 0xf96e <qstr_from_strn+0xfe>
    f8d2:	6c 0d       	add	r22, r12
    f8d4:	7d 1d       	adc	r23, r13
    f8d6:	40 e0       	ldi	r20, 0x00	; 0
    f8d8:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <m_realloc_maybe>
    f8dc:	89 2b       	or	r24, r25
    f8de:	81 f4       	brne	.+32     	; 0xf900 <qstr_from_strn+0x90>
    f8e0:	60 91 a6 6b 	lds	r22, 0x6BA6	; 0x806ba6 <mp_state_ctx+0x4c>
    f8e4:	70 91 a7 6b 	lds	r23, 0x6BA7	; 0x806ba7 <mp_state_ctx+0x4d>
    f8e8:	02 ea       	ldi	r16, 0xA2	; 162
    f8ea:	1b e6       	ldi	r17, 0x6B	; 107
    f8ec:	40 e0       	ldi	r20, 0x00	; 0
    f8ee:	d8 01       	movw	r26, r16
    f8f0:	8d 91       	ld	r24, X+
    f8f2:	9c 91       	ld	r25, X
    f8f4:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <m_realloc_maybe>
    f8f8:	f8 01       	movw	r30, r16
    f8fa:	11 82       	std	Z+1, r1	; 0x01
    f8fc:	10 82       	st	Z, r1
    f8fe:	0e c0       	rjmp	.+28     	; 0xf91c <qstr_from_strn+0xac>
    f900:	e4 ea       	ldi	r30, 0xA4	; 164
    f902:	fb e6       	ldi	r31, 0x6B	; 107
    f904:	80 81       	ld	r24, Z
    f906:	91 81       	ldd	r25, Z+1	; 0x01
    f908:	8c 0d       	add	r24, r12
    f90a:	9d 1d       	adc	r25, r13
    f90c:	91 83       	std	Z+1, r25	; 0x01
    f90e:	80 83       	st	Z, r24
    f910:	80 91 a2 6b 	lds	r24, 0x6BA2	; 0x806ba2 <mp_state_ctx+0x48>
    f914:	90 91 a3 6b 	lds	r25, 0x6BA3	; 0x806ba3 <mp_state_ctx+0x49>
    f918:	89 2b       	or	r24, r25
    f91a:	49 f5       	brne	.+82     	; 0xf96e <qstr_from_strn+0xfe>
    f91c:	f0 e8       	ldi	r31, 0x80	; 128
    f91e:	cf 16       	cp	r12, r31
    f920:	d1 04       	cpc	r13, r1
    f922:	18 f4       	brcc	.+6      	; 0xf92a <qstr_from_strn+0xba>
    f924:	00 e8       	ldi	r16, 0x80	; 128
    f926:	10 e0       	ldi	r17, 0x00	; 0
    f928:	02 c0       	rjmp	.+4      	; 0xf92e <qstr_from_strn+0xbe>
    f92a:	0c 2d       	mov	r16, r12
    f92c:	1d 2d       	mov	r17, r13
    f92e:	80 2f       	mov	r24, r16
    f930:	91 2f       	mov	r25, r17
    f932:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    f936:	90 93 a3 6b 	sts	0x6BA3, r25	; 0x806ba3 <mp_state_ctx+0x49>
    f93a:	80 93 a2 6b 	sts	0x6BA2, r24	; 0x806ba2 <mp_state_ctx+0x48>
    f93e:	89 2b       	or	r24, r25
    f940:	71 f4       	brne	.+28     	; 0xf95e <qstr_from_strn+0xee>
    f942:	c6 01       	movw	r24, r12
    f944:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    f948:	90 93 a3 6b 	sts	0x6BA3, r25	; 0x806ba3 <mp_state_ctx+0x49>
    f94c:	80 93 a2 6b 	sts	0x6BA2, r24	; 0x806ba2 <mp_state_ctx+0x48>
    f950:	89 2b       	or	r24, r25
    f952:	19 f4       	brne	.+6      	; 0xf95a <qstr_from_strn+0xea>
    f954:	c6 01       	movw	r24, r12
    f956:	0e 94 ac 31 	call	0x6358	; 0x6358 <m_malloc_fail>
    f95a:	0c 2d       	mov	r16, r12
    f95c:	1d 2d       	mov	r17, r13
    f95e:	00 93 a4 6b 	sts	0x6BA4, r16	; 0x806ba4 <mp_state_ctx+0x4a>
    f962:	10 93 a5 6b 	sts	0x6BA5, r17	; 0x806ba5 <mp_state_ctx+0x4b>
    f966:	10 92 a7 6b 	sts	0x6BA7, r1	; 0x806ba7 <mp_state_ctx+0x4d>
    f96a:	10 92 a6 6b 	sts	0x6BA6, r1	; 0x806ba6 <mp_state_ctx+0x4c>
    f96e:	e6 ea       	ldi	r30, 0xA6	; 166
    f970:	fb e6       	ldi	r31, 0x6B	; 107
    f972:	80 81       	ld	r24, Z
    f974:	91 81       	ldd	r25, Z+1	; 0x01
    f976:	00 91 a2 6b 	lds	r16, 0x6BA2	; 0x806ba2 <mp_state_ctx+0x48>
    f97a:	10 91 a3 6b 	lds	r17, 0x6BA3	; 0x806ba3 <mp_state_ctx+0x49>
    f97e:	08 0f       	add	r16, r24
    f980:	19 1f       	adc	r17, r25
    f982:	8c 0d       	add	r24, r12
    f984:	9d 1d       	adc	r25, r13
    f986:	91 83       	std	Z+1, r25	; 0x01
    f988:	80 83       	st	Z, r24
    f98a:	be 01       	movw	r22, r28
    f98c:	c7 01       	movw	r24, r14
    f98e:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
    f992:	d8 01       	movw	r26, r16
    f994:	8c 93       	st	X, r24
    f996:	11 96       	adiw	r26, 0x01	; 1
    f998:	cc 93       	st	X, r28
    f99a:	ae 01       	movw	r20, r28
    f99c:	b7 01       	movw	r22, r14
    f99e:	c8 01       	movw	r24, r16
    f9a0:	02 96       	adiw	r24, 0x02	; 2
    f9a2:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    f9a6:	c0 0f       	add	r28, r16
    f9a8:	d1 1f       	adc	r29, r17
    f9aa:	1a 82       	std	Y+2, r1	; 0x02
    f9ac:	e0 91 68 6b 	lds	r30, 0x6B68	; 0x806b68 <mp_state_ctx+0xe>
    f9b0:	f0 91 69 6b 	lds	r31, 0x6B69	; 0x806b69 <mp_state_ctx+0xf>
    f9b4:	84 81       	ldd	r24, Z+4	; 0x04
    f9b6:	95 81       	ldd	r25, Z+5	; 0x05
    f9b8:	26 81       	ldd	r18, Z+6	; 0x06
    f9ba:	37 81       	ldd	r19, Z+7	; 0x07
    f9bc:	28 17       	cp	r18, r24
    f9be:	39 07       	cpc	r19, r25
    f9c0:	b8 f1       	brcs	.+110    	; 0xfa30 <qstr_from_strn+0x1c0>
    f9c2:	ec 01       	movw	r28, r24
    f9c4:	cc 0f       	add	r28, r28
    f9c6:	dd 1f       	adc	r29, r29
    f9c8:	ca 30       	cpi	r28, 0x0A	; 10
    f9ca:	d1 05       	cpc	r29, r1
    f9cc:	10 f4       	brcc	.+4      	; 0xf9d2 <qstr_from_strn+0x162>
    f9ce:	ca e0       	ldi	r28, 0x0A	; 10
    f9d0:	d0 e0       	ldi	r29, 0x00	; 0
    f9d2:	ce 01       	movw	r24, r28
    f9d4:	04 96       	adiw	r24, 0x04	; 4
    f9d6:	88 0f       	add	r24, r24
    f9d8:	99 1f       	adc	r25, r25
    f9da:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
    f9de:	fc 01       	movw	r30, r24
    f9e0:	89 2b       	or	r24, r25
    f9e2:	19 f4       	brne	.+6      	; 0xf9ea <qstr_from_strn+0x17a>
    f9e4:	ce 01       	movw	r24, r28
    f9e6:	0e 94 ac 31 	call	0x6358	; 0x6358 <m_malloc_fail>
    f9ea:	6a e5       	ldi	r22, 0x5A	; 90
    f9ec:	7b e6       	ldi	r23, 0x6B	; 107
    f9ee:	db 01       	movw	r26, r22
    f9f0:	1e 96       	adiw	r26, 0x0e	; 14
    f9f2:	8d 91       	ld	r24, X+
    f9f4:	9c 91       	ld	r25, X
    f9f6:	1f 97       	sbiw	r26, 0x0f	; 15
    f9f8:	91 83       	std	Z+1, r25	; 0x01
    f9fa:	80 83       	st	Z, r24
    f9fc:	1e 96       	adiw	r26, 0x0e	; 14
    f9fe:	2d 91       	ld	r18, X+
    fa00:	3c 91       	ld	r19, X
    fa02:	1f 97       	sbiw	r26, 0x0f	; 15
    fa04:	d9 01       	movw	r26, r18
    fa06:	12 96       	adiw	r26, 0x02	; 2
    fa08:	4d 91       	ld	r20, X+
    fa0a:	5c 91       	ld	r21, X
    fa0c:	13 97       	sbiw	r26, 0x03	; 3
    fa0e:	16 96       	adiw	r26, 0x06	; 6
    fa10:	8d 91       	ld	r24, X+
    fa12:	9c 91       	ld	r25, X
    fa14:	17 97       	sbiw	r26, 0x07	; 7
    fa16:	84 0f       	add	r24, r20
    fa18:	95 1f       	adc	r25, r21
    fa1a:	93 83       	std	Z+3, r25	; 0x03
    fa1c:	82 83       	std	Z+2, r24	; 0x02
    fa1e:	d5 83       	std	Z+5, r29	; 0x05
    fa20:	c4 83       	std	Z+4, r28	; 0x04
    fa22:	17 82       	std	Z+7, r1	; 0x07
    fa24:	16 82       	std	Z+6, r1	; 0x06
    fa26:	db 01       	movw	r26, r22
    fa28:	1f 96       	adiw	r26, 0x0f	; 15
    fa2a:	fc 93       	st	X, r31
    fa2c:	ee 93       	st	-X, r30
    fa2e:	1e 97       	sbiw	r26, 0x0e	; 14
    fa30:	aa e5       	ldi	r26, 0x5A	; 90
    fa32:	bb e6       	ldi	r27, 0x6B	; 107
    fa34:	1e 96       	adiw	r26, 0x0e	; 14
    fa36:	ed 91       	ld	r30, X+
    fa38:	fc 91       	ld	r31, X
    fa3a:	1f 97       	sbiw	r26, 0x0f	; 15
    fa3c:	86 81       	ldd	r24, Z+6	; 0x06
    fa3e:	97 81       	ldd	r25, Z+7	; 0x07
    fa40:	9c 01       	movw	r18, r24
    fa42:	2f 5f       	subi	r18, 0xFF	; 255
    fa44:	3f 4f       	sbci	r19, 0xFF	; 255
    fa46:	37 83       	std	Z+7, r19	; 0x07
    fa48:	26 83       	std	Z+6, r18	; 0x06
    fa4a:	04 96       	adiw	r24, 0x04	; 4
    fa4c:	88 0f       	add	r24, r24
    fa4e:	99 1f       	adc	r25, r25
    fa50:	e8 0f       	add	r30, r24
    fa52:	f9 1f       	adc	r31, r25
    fa54:	11 83       	std	Z+1, r17	; 0x01
    fa56:	00 83       	st	Z, r16
    fa58:	1e 96       	adiw	r26, 0x0e	; 14
    fa5a:	ed 91       	ld	r30, X+
    fa5c:	fc 91       	ld	r31, X
    fa5e:	1f 97       	sbiw	r26, 0x0f	; 15
    fa60:	22 81       	ldd	r18, Z+2	; 0x02
    fa62:	33 81       	ldd	r19, Z+3	; 0x03
    fa64:	86 81       	ldd	r24, Z+6	; 0x06
    fa66:	97 81       	ldd	r25, Z+7	; 0x07
    fa68:	82 0f       	add	r24, r18
    fa6a:	93 1f       	adc	r25, r19
    fa6c:	01 97       	sbiw	r24, 0x01	; 1
    fa6e:	df 91       	pop	r29
    fa70:	cf 91       	pop	r28
    fa72:	1f 91       	pop	r17
    fa74:	0f 91       	pop	r16
    fa76:	ff 90       	pop	r15
    fa78:	ef 90       	pop	r14
    fa7a:	df 90       	pop	r13
    fa7c:	cf 90       	pop	r12
    fa7e:	08 95       	ret

0000fa80 <push_result_token>:
    fa80:	ef 92       	push	r14
    fa82:	ff 92       	push	r15
    fa84:	0f 93       	push	r16
    fa86:	1f 93       	push	r17
    fa88:	cf 93       	push	r28
    fa8a:	df 93       	push	r29
    fa8c:	ec 01       	movw	r28, r24
    fa8e:	ec 84       	ldd	r14, Y+12	; 0x0c
    fa90:	fd 84       	ldd	r15, Y+13	; 0x0d
    fa92:	f7 01       	movw	r30, r14
    fa94:	60 a1       	ldd	r22, Z+32	; 0x20
    fa96:	67 30       	cpi	r22, 0x07	; 7
    fa98:	71 f4       	brne	.+28     	; 0xfab6 <push_result_token+0x36>
    fa9a:	63 a1       	ldd	r22, Z+35	; 0x23
    fa9c:	74 a1       	ldd	r23, Z+36	; 0x24
    fa9e:	85 a1       	ldd	r24, Z+37	; 0x25
    faa0:	96 a1       	ldd	r25, Z+38	; 0x26
    faa2:	e6 de       	rcall	.-564    	; 0xf870 <qstr_from_strn>
    faa4:	82 95       	swap	r24
    faa6:	92 95       	swap	r25
    faa8:	90 7f       	andi	r25, 0xF0	; 240
    faaa:	98 27       	eor	r25, r24
    faac:	80 7f       	andi	r24, 0xF0	; 240
    faae:	98 27       	eor	r25, r24
    fab0:	bc 01       	movw	r22, r24
    fab2:	62 60       	ori	r22, 0x02	; 2
    fab4:	94 c0       	rjmp	.+296    	; 0xfbde <push_result_token+0x15e>
    fab6:	68 30       	cpi	r22, 0x08	; 8
    fab8:	61 f5       	brne	.+88     	; 0xfb12 <push_result_token+0x92>
    faba:	f7 01       	movw	r30, r14
    fabc:	63 a1       	ldd	r22, Z+35	; 0x23
    fabe:	74 a1       	ldd	r23, Z+36	; 0x24
    fac0:	97 01       	movw	r18, r14
    fac2:	40 e0       	ldi	r20, 0x00	; 0
    fac4:	50 e0       	ldi	r21, 0x00	; 0
    fac6:	85 a1       	ldd	r24, Z+37	; 0x25
    fac8:	96 a1       	ldd	r25, Z+38	; 0x26
    faca:	0e 94 1c 30 	call	0x6038	; 0x6038 <mp_parse_num_integer>
    face:	8c 01       	movw	r16, r24
    fad0:	80 ff       	sbrs	r24, 0
    fad2:	03 c0       	rjmp	.+6      	; 0xfada <push_result_token+0x5a>
    fad4:	bc 01       	movw	r22, r24
    fad6:	61 60       	ori	r22, 0x01	; 1
    fad8:	82 c0       	rjmp	.+260    	; 0xfbde <push_result_token+0x15e>
    fada:	f7 01       	movw	r30, r14
    fadc:	e4 8c       	ldd	r14, Z+28	; 0x1c
    fade:	f5 8c       	ldd	r15, Z+29	; 0x1d
    fae0:	6a e0       	ldi	r22, 0x0A	; 10
    fae2:	70 e0       	ldi	r23, 0x00	; 0
    fae4:	ce 01       	movw	r24, r28
    fae6:	0e 94 25 32 	call	0x644a	; 0x644a <parser_alloc>
    faea:	fc 01       	movw	r30, r24
    faec:	c7 01       	movw	r24, r14
    faee:	a0 e0       	ldi	r26, 0x00	; 0
    faf0:	b0 e0       	ldi	r27, 0x00	; 0
    faf2:	80 83       	st	Z, r24
    faf4:	91 83       	std	Z+1, r25	; 0x01
    faf6:	a2 83       	std	Z+2, r26	; 0x02
    faf8:	b3 83       	std	Z+3, r27	; 0x03
    fafa:	85 e3       	ldi	r24, 0x35	; 53
    fafc:	91 e0       	ldi	r25, 0x01	; 1
    fafe:	a0 e0       	ldi	r26, 0x00	; 0
    fb00:	b0 e0       	ldi	r27, 0x00	; 0
    fb02:	84 83       	std	Z+4, r24	; 0x04
    fb04:	95 83       	std	Z+5, r25	; 0x05
    fb06:	a6 83       	std	Z+6, r26	; 0x06
    fb08:	b7 83       	std	Z+7, r27	; 0x07
    fb0a:	11 87       	std	Z+9, r17	; 0x09
    fb0c:	00 87       	std	Z+8, r16	; 0x08
    fb0e:	bf 01       	movw	r22, r30
    fb10:	66 c0       	rjmp	.+204    	; 0xfbde <push_result_token+0x15e>
    fb12:	69 30       	cpi	r22, 0x09	; 9
    fb14:	51 f4       	brne	.+20     	; 0xfb2a <push_result_token+0xaa>
    fb16:	f7 01       	movw	r30, r14
    fb18:	63 a1       	ldd	r22, Z+35	; 0x23
    fb1a:	74 a1       	ldd	r23, Z+36	; 0x24
    fb1c:	87 01       	movw	r16, r14
    fb1e:	20 e0       	ldi	r18, 0x00	; 0
    fb20:	41 e0       	ldi	r20, 0x01	; 1
    fb22:	85 a1       	ldd	r24, Z+37	; 0x25
    fb24:	96 a1       	ldd	r25, Z+38	; 0x26
    fb26:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <mp_parse_num_decimal>
    fb2a:	86 ef       	ldi	r24, 0xF6	; 246
    fb2c:	86 0f       	add	r24, r22
    fb2e:	82 30       	cpi	r24, 0x02	; 2
    fb30:	08 f0       	brcs	.+2      	; 0xfb34 <push_result_token+0xb4>
    fb32:	50 c0       	rjmp	.+160    	; 0xfbd4 <push_result_token+0x154>
    fb34:	f7 01       	movw	r30, r14
    fb36:	63 a1       	ldd	r22, Z+35	; 0x23
    fb38:	74 a1       	ldd	r23, Z+36	; 0x24
    fb3a:	6b 30       	cpi	r22, 0x0B	; 11
    fb3c:	71 05       	cpc	r23, r1
    fb3e:	20 f4       	brcc	.+8      	; 0xfb48 <push_result_token+0xc8>
    fb40:	85 a1       	ldd	r24, Z+37	; 0x25
    fb42:	96 a1       	ldd	r25, Z+38	; 0x26
    fb44:	95 de       	rcall	.-726    	; 0xf870 <qstr_from_strn>
    fb46:	05 c0       	rjmp	.+10     	; 0xfb52 <push_result_token+0xd2>
    fb48:	f7 01       	movw	r30, r14
    fb4a:	85 a1       	ldd	r24, Z+37	; 0x25
    fb4c:	96 a1       	ldd	r25, Z+38	; 0x26
    fb4e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <qstr_find_strn>
    fb52:	00 97       	sbiw	r24, 0x00	; 0
    fb54:	99 f0       	breq	.+38     	; 0xfb7c <push_result_token+0xfc>
    fb56:	f7 01       	movw	r30, r14
    fb58:	20 a1       	ldd	r18, Z+32	; 0x20
    fb5a:	2a 30       	cpi	r18, 0x0A	; 10
    fb5c:	19 f0       	breq	.+6      	; 0xfb64 <push_result_token+0xe4>
    fb5e:	2a e0       	ldi	r18, 0x0A	; 10
    fb60:	30 e0       	ldi	r19, 0x00	; 0
    fb62:	02 c0       	rjmp	.+4      	; 0xfb68 <push_result_token+0xe8>
    fb64:	26 e0       	ldi	r18, 0x06	; 6
    fb66:	30 e0       	ldi	r19, 0x00	; 0
    fb68:	82 95       	swap	r24
    fb6a:	92 95       	swap	r25
    fb6c:	90 7f       	andi	r25, 0xF0	; 240
    fb6e:	98 27       	eor	r25, r24
    fb70:	80 7f       	andi	r24, 0xF0	; 240
    fb72:	98 27       	eor	r25, r24
    fb74:	bc 01       	movw	r22, r24
    fb76:	62 2b       	or	r22, r18
    fb78:	73 2b       	or	r23, r19
    fb7a:	31 c0       	rjmp	.+98     	; 0xfbde <push_result_token+0x15e>
    fb7c:	f7 01       	movw	r30, r14
    fb7e:	43 a1       	ldd	r20, Z+35	; 0x23
    fb80:	54 a1       	ldd	r21, Z+36	; 0x24
    fb82:	65 a1       	ldd	r22, Z+37	; 0x25
    fb84:	76 a1       	ldd	r23, Z+38	; 0x26
    fb86:	80 a1       	ldd	r24, Z+32	; 0x20
    fb88:	8a 30       	cpi	r24, 0x0A	; 10
    fb8a:	19 f0       	breq	.+6      	; 0xfb92 <push_result_token+0x112>
    fb8c:	82 ef       	ldi	r24, 0xF2	; 242
    fb8e:	9a e1       	ldi	r25, 0x1A	; 26
    fb90:	02 c0       	rjmp	.+4      	; 0xfb96 <push_result_token+0x116>
    fb92:	82 e1       	ldi	r24, 0x12	; 18
    fb94:	9b e1       	ldi	r25, 0x1B	; 27
    fb96:	0e 94 56 38 	call	0x70ac	; 0x70ac <mp_obj_new_str_copy>
    fb9a:	8c 01       	movw	r16, r24
    fb9c:	f7 01       	movw	r30, r14
    fb9e:	e4 8c       	ldd	r14, Z+28	; 0x1c
    fba0:	f5 8c       	ldd	r15, Z+29	; 0x1d
    fba2:	6a e0       	ldi	r22, 0x0A	; 10
    fba4:	70 e0       	ldi	r23, 0x00	; 0
    fba6:	ce 01       	movw	r24, r28
    fba8:	0e 94 25 32 	call	0x644a	; 0x644a <parser_alloc>
    fbac:	fc 01       	movw	r30, r24
    fbae:	c7 01       	movw	r24, r14
    fbb0:	a0 e0       	ldi	r26, 0x00	; 0
    fbb2:	b0 e0       	ldi	r27, 0x00	; 0
    fbb4:	80 83       	st	Z, r24
    fbb6:	91 83       	std	Z+1, r25	; 0x01
    fbb8:	a2 83       	std	Z+2, r26	; 0x02
    fbba:	b3 83       	std	Z+3, r27	; 0x03
    fbbc:	85 e3       	ldi	r24, 0x35	; 53
    fbbe:	91 e0       	ldi	r25, 0x01	; 1
    fbc0:	a0 e0       	ldi	r26, 0x00	; 0
    fbc2:	b0 e0       	ldi	r27, 0x00	; 0
    fbc4:	84 83       	std	Z+4, r24	; 0x04
    fbc6:	95 83       	std	Z+5, r25	; 0x05
    fbc8:	a6 83       	std	Z+6, r26	; 0x06
    fbca:	b7 83       	std	Z+7, r27	; 0x07
    fbcc:	11 87       	std	Z+9, r17	; 0x09
    fbce:	00 87       	std	Z+8, r16	; 0x08
    fbd0:	bf 01       	movw	r22, r30
    fbd2:	05 c0       	rjmp	.+10     	; 0xfbde <push_result_token+0x15e>
    fbd4:	f0 e1       	ldi	r31, 0x10	; 16
    fbd6:	6f 9f       	mul	r22, r31
    fbd8:	b0 01       	movw	r22, r0
    fbda:	11 24       	eor	r1, r1
    fbdc:	6e 60       	ori	r22, 0x0E	; 14
    fbde:	ce 01       	movw	r24, r28
    fbe0:	0e 94 85 54 	call	0xa90a	; 0xa90a <push_result_node>
    fbe4:	df 91       	pop	r29
    fbe6:	cf 91       	pop	r28
    fbe8:	1f 91       	pop	r17
    fbea:	0f 91       	pop	r16
    fbec:	ff 90       	pop	r15
    fbee:	ef 90       	pop	r14
    fbf0:	08 95       	ret

0000fbf2 <do_import_name>:
    fbf2:	2f 92       	push	r2
    fbf4:	3f 92       	push	r3
    fbf6:	4f 92       	push	r4
    fbf8:	5f 92       	push	r5
    fbfa:	6f 92       	push	r6
    fbfc:	7f 92       	push	r7
    fbfe:	8f 92       	push	r8
    fc00:	9f 92       	push	r9
    fc02:	af 92       	push	r10
    fc04:	bf 92       	push	r11
    fc06:	cf 92       	push	r12
    fc08:	df 92       	push	r13
    fc0a:	ef 92       	push	r14
    fc0c:	ff 92       	push	r15
    fc0e:	0f 93       	push	r16
    fc10:	1f 93       	push	r17
    fc12:	cf 93       	push	r28
    fc14:	df 93       	push	r29
    fc16:	cd b7       	in	r28, 0x3d	; 61
    fc18:	de b7       	in	r29, 0x3e	; 62
    fc1a:	2c 97       	sbiw	r28, 0x0c	; 12
    fc1c:	0f b6       	in	r0, 0x3f	; 63
    fc1e:	f8 94       	cli
    fc20:	de bf       	out	0x3e, r29	; 62
    fc22:	0f be       	out	0x3f, r0	; 63
    fc24:	cd bf       	out	0x3d, r28	; 61
    fc26:	3c 01       	movw	r6, r24
    fc28:	2d b7       	in	r18, 0x3d	; 61
    fc2a:	3e b7       	in	r19, 0x3e	; 62
    fc2c:	38 87       	std	Y+8, r19	; 0x08
    fc2e:	2f 83       	std	Y+7, r18	; 0x07
    fc30:	61 15       	cp	r22, r1
    fc32:	71 05       	cpc	r23, r1
    fc34:	e9 f0       	breq	.+58     	; 0xfc70 <do_import_name+0x7e>
    fc36:	cb 01       	movw	r24, r22
    fc38:	83 70       	andi	r24, 0x03	; 3
    fc3a:	99 27       	eor	r25, r25
    fc3c:	89 2b       	or	r24, r25
    fc3e:	09 f0       	breq	.+2      	; 0xfc42 <do_import_name+0x50>
    fc40:	0d c1       	rjmp	.+538    	; 0xfe5c <do_import_name+0x26a>
    fc42:	fb 01       	movw	r30, r22
    fc44:	84 81       	ldd	r24, Z+4	; 0x04
    fc46:	82 36       	cpi	r24, 0x62	; 98
    fc48:	09 f0       	breq	.+2      	; 0xfc4c <do_import_name+0x5a>
    fc4a:	08 c1       	rjmp	.+528    	; 0xfe5c <do_import_name+0x26a>
    fc4c:	82 85       	ldd	r24, Z+10	; 0x0a
    fc4e:	93 85       	ldd	r25, Z+11	; 0x0b
    fc50:	92 95       	swap	r25
    fc52:	82 95       	swap	r24
    fc54:	8f 70       	andi	r24, 0x0F	; 15
    fc56:	89 27       	eor	r24, r25
    fc58:	9f 70       	andi	r25, 0x0F	; 15
    fc5a:	89 27       	eor	r24, r25
    fc5c:	fa 01       	movw	r30, r20
    fc5e:	91 83       	std	Z+1, r25	; 0x01
    fc60:	80 83       	st	Z, r24
    fc62:	fb 01       	movw	r30, r22
    fc64:	60 85       	ldd	r22, Z+8	; 0x08
    fc66:	71 85       	ldd	r23, Z+9	; 0x09
    fc68:	61 15       	cp	r22, r1
    fc6a:	71 05       	cpc	r23, r1
    fc6c:	09 f0       	breq	.+2      	; 0xfc70 <do_import_name+0x7e>
    fc6e:	04 c1       	rjmp	.+520    	; 0xfe78 <do_import_name+0x286>
    fc70:	81 e0       	ldi	r24, 0x01	; 1
    fc72:	90 e0       	ldi	r25, 0x00	; 0
    fc74:	fa 01       	movw	r30, r20
    fc76:	91 83       	std	Z+1, r25	; 0x01
    fc78:	80 83       	st	Z, r24
    fc7a:	40 e0       	ldi	r20, 0x00	; 0
    fc7c:	50 e0       	ldi	r21, 0x00	; 0
    fc7e:	61 e0       	ldi	r22, 0x01	; 1
    fc80:	70 e0       	ldi	r23, 0x00	; 0
    fc82:	f3 01       	movw	r30, r6
    fc84:	83 8d       	ldd	r24, Z+27	; 0x1b
    fc86:	94 8d       	ldd	r25, Z+28	; 0x1c
    fc88:	0e 94 44 15 	call	0x2a88	; 0x2a88 <mp_emit_bc_import>
    fc8c:	fd c0       	rjmp	.+506    	; 0xfe88 <do_import_name+0x296>
    fc8e:	40 e0       	ldi	r20, 0x00	; 0
    fc90:	50 e0       	ldi	r21, 0x00	; 0
    fc92:	f3 01       	movw	r30, r6
    fc94:	83 8d       	ldd	r24, Z+27	; 0x1b
    fc96:	94 8d       	ldd	r25, Z+28	; 0x1c
    fc98:	0e 94 44 15 	call	0x2a88	; 0x2a88 <mp_emit_bc_import>
    fc9c:	f5 c0       	rjmp	.+490    	; 0xfe88 <do_import_name+0x296>
    fc9e:	cb 01       	movw	r24, r22
    fca0:	83 70       	andi	r24, 0x03	; 3
    fca2:	99 27       	eor	r25, r25
    fca4:	89 2b       	or	r24, r25
    fca6:	29 f4       	brne	.+10     	; 0xfcb2 <do_import_name+0xc0>
    fca8:	1b 01       	movw	r2, r22
    fcaa:	fb 01       	movw	r30, r22
    fcac:	84 81       	ldd	r24, Z+4	; 0x04
    fcae:	86 36       	cpi	r24, 0x66	; 102
    fcb0:	11 f0       	breq	.+4      	; 0xfcb6 <do_import_name+0xc4>
    fcb2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    fcb6:	41 10       	cpse	r4, r1
    fcb8:	0c c0       	rjmp	.+24     	; 0xfcd2 <do_import_name+0xe0>
    fcba:	fb 01       	movw	r30, r22
    fcbc:	80 85       	ldd	r24, Z+8	; 0x08
    fcbe:	91 85       	ldd	r25, Z+9	; 0x09
    fcc0:	92 95       	swap	r25
    fcc2:	82 95       	swap	r24
    fcc4:	8f 70       	andi	r24, 0x0F	; 15
    fcc6:	89 27       	eor	r24, r25
    fcc8:	9f 70       	andi	r25, 0x0F	; 15
    fcca:	89 27       	eor	r24, r25
    fccc:	fa 01       	movw	r30, r20
    fcce:	91 83       	std	Z+1, r25	; 0x01
    fcd0:	80 83       	st	Z, r24
    fcd2:	f1 01       	movw	r30, r2
    fcd4:	84 81       	ldd	r24, Z+4	; 0x04
    fcd6:	95 81       	ldd	r25, Z+5	; 0x05
    fcd8:	a6 81       	ldd	r26, Z+6	; 0x06
    fcda:	b7 81       	ldd	r27, Z+7	; 0x07
    fcdc:	29 2f       	mov	r18, r25
    fcde:	3a 2f       	mov	r19, r26
    fce0:	4b 2f       	mov	r20, r27
    fce2:	55 27       	eor	r21, r21
    fce4:	2b 83       	std	Y+3, r18	; 0x03
    fce6:	3c 83       	std	Y+4, r19	; 0x04
    fce8:	4d 83       	std	Y+5, r20	; 0x05
    fcea:	5e 83       	std	Y+6, r21	; 0x06
    fcec:	8b 80       	ldd	r8, Y+3	; 0x03
    fcee:	9c 80       	ldd	r9, Y+4	; 0x04
    fcf0:	89 01       	movw	r16, r18
    fcf2:	01 50       	subi	r16, 0x01	; 1
    fcf4:	11 09       	sbc	r17, r1
    fcf6:	18 14       	cp	r1, r8
    fcf8:	19 04       	cpc	r1, r9
    fcfa:	0c f0       	brlt	.+2      	; 0xfcfe <do_import_name+0x10c>
    fcfc:	93 c0       	rjmp	.+294    	; 0xfe24 <do_import_name+0x232>
    fcfe:	51 01       	movw	r10, r2
    fd00:	38 e0       	ldi	r19, 0x08	; 8
    fd02:	a3 0e       	add	r10, r19
    fd04:	b1 1c       	adc	r11, r1
    fd06:	64 01       	movw	r12, r8
    fd08:	44 e0       	ldi	r20, 0x04	; 4
    fd0a:	c4 0e       	add	r12, r20
    fd0c:	d1 1c       	adc	r13, r1
    fd0e:	cc 0c       	add	r12, r12
    fd10:	dd 1c       	adc	r13, r13
    fd12:	c2 0c       	add	r12, r2
    fd14:	d3 1c       	adc	r13, r3
    fd16:	75 01       	movw	r14, r10
    fd18:	f7 01       	movw	r30, r14
    fd1a:	81 91       	ld	r24, Z+
    fd1c:	91 91       	ld	r25, Z+
    fd1e:	7f 01       	movw	r14, r30
    fd20:	92 95       	swap	r25
    fd22:	82 95       	swap	r24
    fd24:	8f 70       	andi	r24, 0x0F	; 15
    fd26:	89 27       	eor	r24, r25
    fd28:	9f 70       	andi	r25, 0x0F	; 15
    fd2a:	89 27       	eor	r24, r25
    fd2c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <qstr_len>
    fd30:	08 0f       	add	r16, r24
    fd32:	19 1f       	adc	r17, r25
    fd34:	ce 14       	cp	r12, r14
    fd36:	df 04       	cpc	r13, r15
    fd38:	79 f7       	brne	.-34     	; 0xfd18 <do_import_name+0x126>
    fd3a:	1a 87       	std	Y+10, r17	; 0x0a
    fd3c:	09 87       	std	Y+9, r16	; 0x09
    fd3e:	2d b7       	in	r18, 0x3d	; 61
    fd40:	3e b7       	in	r19, 0x3e	; 62
    fd42:	20 1b       	sub	r18, r16
    fd44:	31 0b       	sbc	r19, r17
    fd46:	0f b6       	in	r0, 0x3f	; 63
    fd48:	f8 94       	cli
    fd4a:	3e bf       	out	0x3e, r19	; 62
    fd4c:	0f be       	out	0x3f, r0	; 63
    fd4e:	2d bf       	out	0x3d, r18	; 61
    fd50:	8d b7       	in	r24, 0x3d	; 61
    fd52:	9e b7       	in	r25, 0x3e	; 62
    fd54:	01 96       	adiw	r24, 0x01	; 1
    fd56:	6c 01       	movw	r12, r24
    fd58:	9c 87       	std	Y+12, r25	; 0x0c
    fd5a:	8b 87       	std	Y+11, r24	; 0x0b
    fd5c:	e1 2c       	mov	r14, r1
    fd5e:	f1 2c       	mov	r15, r1
    fd60:	0f 2e       	mov	r0, r31
    fd62:	fe e2       	ldi	r31, 0x2E	; 46
    fd64:	5f 2e       	mov	r5, r31
    fd66:	f0 2d       	mov	r31, r0
    fd68:	0a c0       	rjmp	.+20     	; 0xfd7e <do_import_name+0x18c>
    fd6a:	1e 14       	cp	r1, r14
    fd6c:	1f 04       	cpc	r1, r15
    fd6e:	34 f4       	brge	.+12     	; 0xfd7c <do_import_name+0x18a>
    fd70:	6f 01       	movw	r12, r30
    fd72:	2f ef       	ldi	r18, 0xFF	; 255
    fd74:	c2 1a       	sub	r12, r18
    fd76:	d2 0a       	sbc	r13, r18
    fd78:	50 82       	st	Z, r5
    fd7a:	01 c0       	rjmp	.+2      	; 0xfd7e <do_import_name+0x18c>
    fd7c:	6f 01       	movw	r12, r30
    fd7e:	f5 01       	movw	r30, r10
    fd80:	81 91       	ld	r24, Z+
    fd82:	91 91       	ld	r25, Z+
    fd84:	5f 01       	movw	r10, r30
    fd86:	be 01       	movw	r22, r28
    fd88:	6f 5f       	subi	r22, 0xFF	; 255
    fd8a:	7f 4f       	sbci	r23, 0xFF	; 255
    fd8c:	92 95       	swap	r25
    fd8e:	82 95       	swap	r24
    fd90:	8f 70       	andi	r24, 0x0F	; 15
    fd92:	89 27       	eor	r24, r25
    fd94:	9f 70       	andi	r25, 0x0F	; 15
    fd96:	89 27       	eor	r24, r25
    fd98:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
    fd9c:	09 81       	ldd	r16, Y+1	; 0x01
    fd9e:	1a 81       	ldd	r17, Y+2	; 0x02
    fda0:	a8 01       	movw	r20, r16
    fda2:	bc 01       	movw	r22, r24
    fda4:	c6 01       	movw	r24, r12
    fda6:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    fdaa:	f6 01       	movw	r30, r12
    fdac:	e0 0f       	add	r30, r16
    fdae:	f1 1f       	adc	r31, r17
    fdb0:	2f ef       	ldi	r18, 0xFF	; 255
    fdb2:	e2 1a       	sub	r14, r18
    fdb4:	f2 0a       	sbc	r15, r18
    fdb6:	e8 14       	cp	r14, r8
    fdb8:	f9 04       	cpc	r15, r9
    fdba:	bc f2       	brlt	.-82     	; 0xfd6a <do_import_name+0x178>
    fdbc:	69 85       	ldd	r22, Y+9	; 0x09
    fdbe:	7a 85       	ldd	r23, Y+10	; 0x0a
    fdc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    fdc2:	9c 85       	ldd	r25, Y+12	; 0x0c
    fdc4:	55 dd       	rcall	.-1366   	; 0xf870 <qstr_from_strn>
    fdc6:	40 e0       	ldi	r20, 0x00	; 0
    fdc8:	50 e0       	ldi	r21, 0x00	; 0
    fdca:	bc 01       	movw	r22, r24
    fdcc:	f3 01       	movw	r30, r6
    fdce:	83 8d       	ldd	r24, Z+27	; 0x1b
    fdd0:	94 8d       	ldd	r25, Z+28	; 0x1c
    fdd2:	0e 94 44 15 	call	0x2a88	; 0x2a88 <mp_emit_bc_import>
    fdd6:	44 20       	and	r4, r4
    fdd8:	09 f4       	brne	.+2      	; 0xfddc <do_import_name+0x1ea>
    fdda:	56 c0       	rjmp	.+172    	; 0xfe88 <do_import_name+0x296>
    fddc:	f2 e0       	ldi	r31, 0x02	; 2
    fdde:	8f 16       	cp	r8, r31
    fde0:	91 04       	cpc	r9, r1
    fde2:	0c f4       	brge	.+2      	; 0xfde6 <do_import_name+0x1f4>
    fde4:	51 c0       	rjmp	.+162    	; 0xfe88 <do_import_name+0x296>
    fde6:	81 01       	movw	r16, r2
    fde8:	06 5f       	subi	r16, 0xF6	; 246
    fdea:	1f 4f       	sbci	r17, 0xFF	; 255
    fdec:	8b 81       	ldd	r24, Y+3	; 0x03
    fdee:	9c 81       	ldd	r25, Y+4	; 0x04
    fdf0:	04 96       	adiw	r24, 0x04	; 4
    fdf2:	88 0f       	add	r24, r24
    fdf4:	99 1f       	adc	r25, r25
    fdf6:	28 0e       	add	r2, r24
    fdf8:	39 1e       	adc	r3, r25
    fdfa:	f8 01       	movw	r30, r16
    fdfc:	61 91       	ld	r22, Z+
    fdfe:	71 91       	ld	r23, Z+
    fe00:	8f 01       	movw	r16, r30
    fe02:	72 95       	swap	r23
    fe04:	62 95       	swap	r22
    fe06:	6f 70       	andi	r22, 0x0F	; 15
    fe08:	67 27       	eor	r22, r23
    fe0a:	7f 70       	andi	r23, 0x0F	; 15
    fe0c:	67 27       	eor	r22, r23
    fe0e:	40 e0       	ldi	r20, 0x00	; 0
    fe10:	50 e0       	ldi	r21, 0x00	; 0
    fe12:	f3 01       	movw	r30, r6
    fe14:	83 8d       	ldd	r24, Z+27	; 0x1b
    fe16:	94 8d       	ldd	r25, Z+28	; 0x1c
    fe18:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <mp_emit_bc_attr>
    fe1c:	02 15       	cp	r16, r2
    fe1e:	13 05       	cpc	r17, r3
    fe20:	61 f7       	brne	.-40     	; 0xfdfa <do_import_name+0x208>
    fe22:	32 c0       	rjmp	.+100    	; 0xfe88 <do_import_name+0x296>
    fe24:	1a 87       	std	Y+10, r17	; 0x0a
    fe26:	09 87       	std	Y+9, r16	; 0x09
    fe28:	ed b7       	in	r30, 0x3d	; 61
    fe2a:	fe b7       	in	r31, 0x3e	; 62
    fe2c:	e0 1b       	sub	r30, r16
    fe2e:	f1 0b       	sbc	r31, r17
    fe30:	0f b6       	in	r0, 0x3f	; 63
    fe32:	f8 94       	cli
    fe34:	fe bf       	out	0x3e, r31	; 62
    fe36:	0f be       	out	0x3f, r0	; 63
    fe38:	ed bf       	out	0x3d, r30	; 61
    fe3a:	2d b7       	in	r18, 0x3d	; 61
    fe3c:	3e b7       	in	r19, 0x3e	; 62
    fe3e:	2f 5f       	subi	r18, 0xFF	; 255
    fe40:	3f 4f       	sbci	r19, 0xFF	; 255
    fe42:	3c 87       	std	Y+12, r19	; 0x0c
    fe44:	2b 87       	std	Y+11, r18	; 0x0b
    fe46:	ba cf       	rjmp	.-140    	; 0xfdbc <do_import_name+0x1ca>
    fe48:	72 95       	swap	r23
    fe4a:	62 95       	swap	r22
    fe4c:	6f 70       	andi	r22, 0x0F	; 15
    fe4e:	67 27       	eor	r22, r23
    fe50:	7f 70       	andi	r23, 0x0F	; 15
    fe52:	67 27       	eor	r22, r23
    fe54:	fa 01       	movw	r30, r20
    fe56:	71 83       	std	Z+1, r23	; 0x01
    fe58:	60 83       	st	Z, r22
    fe5a:	19 cf       	rjmp	.-462    	; 0xfc8e <do_import_name+0x9c>
    fe5c:	cb 01       	movw	r24, r22
    fe5e:	8f 70       	andi	r24, 0x0F	; 15
    fe60:	99 27       	eor	r25, r25
    fe62:	02 97       	sbiw	r24, 0x02	; 2
    fe64:	89 f3       	breq	.-30     	; 0xfe48 <do_import_name+0x256>
    fe66:	41 2c       	mov	r4, r1
    fe68:	1a cf       	rjmp	.-460    	; 0xfc9e <do_import_name+0xac>
    fe6a:	72 95       	swap	r23
    fe6c:	62 95       	swap	r22
    fe6e:	6f 70       	andi	r22, 0x0F	; 15
    fe70:	67 27       	eor	r22, r23
    fe72:	7f 70       	andi	r23, 0x0F	; 15
    fe74:	67 27       	eor	r22, r23
    fe76:	0b cf       	rjmp	.-490    	; 0xfc8e <do_import_name+0x9c>
    fe78:	cb 01       	movw	r24, r22
    fe7a:	8f 70       	andi	r24, 0x0F	; 15
    fe7c:	99 27       	eor	r25, r25
    fe7e:	02 97       	sbiw	r24, 0x02	; 2
    fe80:	a1 f3       	breq	.-24     	; 0xfe6a <do_import_name+0x278>
    fe82:	44 24       	eor	r4, r4
    fe84:	43 94       	inc	r4
    fe86:	0b cf       	rjmp	.-490    	; 0xfc9e <do_import_name+0xac>
    fe88:	2f 81       	ldd	r18, Y+7	; 0x07
    fe8a:	38 85       	ldd	r19, Y+8	; 0x08
    fe8c:	0f b6       	in	r0, 0x3f	; 63
    fe8e:	f8 94       	cli
    fe90:	3e bf       	out	0x3e, r19	; 62
    fe92:	0f be       	out	0x3f, r0	; 63
    fe94:	2d bf       	out	0x3d, r18	; 61
    fe96:	2c 96       	adiw	r28, 0x0c	; 12
    fe98:	0f b6       	in	r0, 0x3f	; 63
    fe9a:	f8 94       	cli
    fe9c:	de bf       	out	0x3e, r29	; 62
    fe9e:	0f be       	out	0x3f, r0	; 63
    fea0:	cd bf       	out	0x3d, r28	; 61
    fea2:	df 91       	pop	r29
    fea4:	cf 91       	pop	r28
    fea6:	1f 91       	pop	r17
    fea8:	0f 91       	pop	r16
    feaa:	ff 90       	pop	r15
    feac:	ef 90       	pop	r14
    feae:	df 90       	pop	r13
    feb0:	cf 90       	pop	r12
    feb2:	bf 90       	pop	r11
    feb4:	af 90       	pop	r10
    feb6:	9f 90       	pop	r9
    feb8:	8f 90       	pop	r8
    feba:	7f 90       	pop	r7
    febc:	6f 90       	pop	r6
    febe:	5f 90       	pop	r5
    fec0:	4f 90       	pop	r4
    fec2:	3f 90       	pop	r3
    fec4:	2f 90       	pop	r2
    fec6:	08 95       	ret

0000fec8 <compile_import_from>:
    fec8:	8f 92       	push	r8
    feca:	9f 92       	push	r9
    fecc:	af 92       	push	r10
    fece:	bf 92       	push	r11
    fed0:	cf 92       	push	r12
    fed2:	df 92       	push	r13
    fed4:	ef 92       	push	r14
    fed6:	ff 92       	push	r15
    fed8:	0f 93       	push	r16
    feda:	1f 93       	push	r17
    fedc:	cf 93       	push	r28
    fede:	df 93       	push	r29
    fee0:	00 d0       	rcall	.+0      	; 0xfee2 <compile_import_from+0x1a>
    fee2:	00 d0       	rcall	.+0      	; 0xfee4 <compile_import_from+0x1c>
    fee4:	cd b7       	in	r28, 0x3d	; 61
    fee6:	de b7       	in	r29, 0x3e	; 62
    fee8:	7c 01       	movw	r14, r24
    feea:	8b 01       	movw	r16, r22
    feec:	fb 01       	movw	r30, r22
    feee:	a0 84       	ldd	r10, Z+8	; 0x08
    fef0:	b1 84       	ldd	r11, Z+9	; 0x09
    fef2:	c5 01       	movw	r24, r10
    fef4:	8f 70       	andi	r24, 0x0F	; 15
    fef6:	99 27       	eor	r25, r25
    fef8:	0e 97       	sbiw	r24, 0x0e	; 14
    fefa:	71 f0       	breq	.+28     	; 0xff18 <compile_import_from+0x50>
    fefc:	a1 14       	cp	r10, r1
    fefe:	b1 04       	cpc	r11, r1
    ff00:	09 f4       	brne	.+2      	; 0xff04 <compile_import_from+0x3c>
    ff02:	3f c0       	rjmp	.+126    	; 0xff82 <compile_import_from+0xba>
    ff04:	c5 01       	movw	r24, r10
    ff06:	83 70       	andi	r24, 0x03	; 3
    ff08:	99 27       	eor	r25, r25
    ff0a:	89 2b       	or	r24, r25
    ff0c:	d1 f5       	brne	.+116    	; 0xff82 <compile_import_from+0xba>
    ff0e:	f5 01       	movw	r30, r10
    ff10:	84 81       	ldd	r24, Z+4	; 0x04
    ff12:	8f 35       	cpi	r24, 0x5F	; 95
    ff14:	09 f0       	breq	.+2      	; 0xff18 <compile_import_from+0x50>
    ff16:	30 c1       	rjmp	.+608    	; 0x10178 <compile_import_from+0x2b0>
    ff18:	bc 82       	std	Y+4, r11	; 0x04
    ff1a:	ab 82       	std	Y+3, r10	; 0x03
    ff1c:	a1 2c       	mov	r10, r1
    ff1e:	b1 2c       	mov	r11, r1
    ff20:	0c c0       	rjmp	.+24     	; 0xff3a <compile_import_from+0x72>
    ff22:	f5 01       	movw	r30, r10
    ff24:	80 85       	ldd	r24, Z+8	; 0x08
    ff26:	91 85       	ldd	r25, Z+9	; 0x09
    ff28:	9c 83       	std	Y+4, r25	; 0x04
    ff2a:	8b 83       	std	Y+3, r24	; 0x03
    ff2c:	a2 84       	ldd	r10, Z+10	; 0x0a
    ff2e:	b3 84       	ldd	r11, Z+11	; 0x0b
    ff30:	a1 14       	cp	r10, r1
    ff32:	b1 04       	cpc	r11, r1
    ff34:	11 f4       	brne	.+4      	; 0xff3a <compile_import_from+0x72>
    ff36:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    ff3a:	ae 01       	movw	r20, r28
    ff3c:	4f 5f       	subi	r20, 0xFF	; 255
    ff3e:	5f 4f       	sbci	r21, 0xFF	; 255
    ff40:	6f e5       	ldi	r22, 0x5F	; 95
    ff42:	70 e0       	ldi	r23, 0x00	; 0
    ff44:	ce 01       	movw	r24, r28
    ff46:	03 96       	adiw	r24, 0x03	; 3
    ff48:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    ff4c:	00 97       	sbiw	r24, 0x00	; 0
    ff4e:	b1 f0       	breq	.+44     	; 0xff7c <compile_import_from+0xb4>
    ff50:	e9 81       	ldd	r30, Y+1	; 0x01
    ff52:	fa 81       	ldd	r31, Y+2	; 0x02
    ff54:	88 0f       	add	r24, r24
    ff56:	99 1f       	adc	r25, r25
    ff58:	8e 0f       	add	r24, r30
    ff5a:	9f 1f       	adc	r25, r31
    ff5c:	60 e0       	ldi	r22, 0x00	; 0
    ff5e:	70 e0       	ldi	r23, 0x00	; 0
    ff60:	21 91       	ld	r18, Z+
    ff62:	31 91       	ld	r19, Z+
    ff64:	2e 39       	cpi	r18, 0x9E	; 158
    ff66:	35 40       	sbci	r19, 0x05	; 5
    ff68:	19 f4       	brne	.+6      	; 0xff70 <compile_import_from+0xa8>
    ff6a:	6f 5f       	subi	r22, 0xFF	; 255
    ff6c:	7f 4f       	sbci	r23, 0xFF	; 255
    ff6e:	02 c0       	rjmp	.+4      	; 0xff74 <compile_import_from+0xac>
    ff70:	6d 5f       	subi	r22, 0xFD	; 253
    ff72:	7f 4f       	sbci	r23, 0xFF	; 255
    ff74:	8e 17       	cp	r24, r30
    ff76:	9f 07       	cpc	r25, r31
    ff78:	99 f7       	brne	.-26     	; 0xff60 <compile_import_from+0x98>
    ff7a:	05 c0       	rjmp	.+10     	; 0xff86 <compile_import_from+0xbe>
    ff7c:	60 e0       	ldi	r22, 0x00	; 0
    ff7e:	70 e0       	ldi	r23, 0x00	; 0
    ff80:	02 c0       	rjmp	.+4      	; 0xff86 <compile_import_from+0xbe>
    ff82:	60 e0       	ldi	r22, 0x00	; 0
    ff84:	70 e0       	ldi	r23, 0x00	; 0
    ff86:	f8 01       	movw	r30, r16
    ff88:	82 85       	ldd	r24, Z+10	; 0x0a
    ff8a:	93 85       	ldd	r25, Z+11	; 0x0b
    ff8c:	8e 3e       	cpi	r24, 0xEE	; 238
    ff8e:	93 40       	sbci	r25, 0x03	; 3
    ff90:	29 f5       	brne	.+74     	; 0xffdc <compile_import_from+0x114>
    ff92:	f7 01       	movw	r30, r14
    ff94:	83 8d       	ldd	r24, Z+27	; 0x1b
    ff96:	94 8d       	ldd	r25, Z+28	; 0x1c
    ff98:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <mp_emit_bc_load_const_small_int>
    ff9c:	65 e0       	ldi	r22, 0x05	; 5
    ff9e:	70 e0       	ldi	r23, 0x00	; 0
    ffa0:	f7 01       	movw	r30, r14
    ffa2:	83 8d       	ldd	r24, Z+27	; 0x1b
    ffa4:	94 8d       	ldd	r25, Z+28	; 0x1c
    ffa6:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
    ffaa:	40 e0       	ldi	r20, 0x00	; 0
    ffac:	50 e0       	ldi	r21, 0x00	; 0
    ffae:	61 e0       	ldi	r22, 0x01	; 1
    ffb0:	70 e0       	ldi	r23, 0x00	; 0
    ffb2:	f7 01       	movw	r30, r14
    ffb4:	83 8d       	ldd	r24, Z+27	; 0x1b
    ffb6:	94 8d       	ldd	r25, Z+28	; 0x1c
    ffb8:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
    ffbc:	ae 01       	movw	r20, r28
    ffbe:	4f 5f       	subi	r20, 0xFF	; 255
    ffc0:	5f 4f       	sbci	r21, 0xFF	; 255
    ffc2:	b5 01       	movw	r22, r10
    ffc4:	c7 01       	movw	r24, r14
    ffc6:	15 de       	rcall	.-982    	; 0xfbf2 <do_import_name>
    ffc8:	42 e0       	ldi	r20, 0x02	; 2
    ffca:	50 e0       	ldi	r21, 0x00	; 0
    ffcc:	60 e0       	ldi	r22, 0x00	; 0
    ffce:	70 e0       	ldi	r23, 0x00	; 0
    ffd0:	f7 01       	movw	r30, r14
    ffd2:	83 8d       	ldd	r24, Z+27	; 0x1b
    ffd4:	94 8d       	ldd	r25, Z+28	; 0x1c
    ffd6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <mp_emit_bc_import>
    ffda:	d4 c0       	rjmp	.+424    	; 0x10184 <compile_import_from+0x2bc>
    ffdc:	f7 01       	movw	r30, r14
    ffde:	83 8d       	ldd	r24, Z+27	; 0x1b
    ffe0:	94 8d       	ldd	r25, Z+28	; 0x1c
    ffe2:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <mp_emit_bc_load_const_small_int>
    ffe6:	ae 01       	movw	r20, r28
    ffe8:	4d 5f       	subi	r20, 0xFD	; 253
    ffea:	5f 4f       	sbci	r21, 0xFF	; 255
    ffec:	64 e6       	ldi	r22, 0x64	; 100
    ffee:	70 e0       	ldi	r23, 0x00	; 0
    fff0:	c8 01       	movw	r24, r16
    fff2:	0a 96       	adiw	r24, 0x0a	; 10
    fff4:	0e 94 19 11 	call	0x2232	; 0x2232 <mp_parse_node_extract_list>
    fff8:	6c 01       	movw	r12, r24
    fffa:	89 2b       	or	r24, r25
    fffc:	09 f4       	brne	.+2      	; 0x10000 <compile_import_from+0x138>
    fffe:	95 c0       	rjmp	.+298    	; 0x1012a <compile_import_from+0x262>
   10000:	eb 81       	ldd	r30, Y+3	; 0x03
   10002:	fc 81       	ldd	r31, Y+4	; 0x04
   10004:	01 90       	ld	r0, Z+
   10006:	f0 81       	ld	r31, Z
   10008:	e0 2d       	mov	r30, r0
   1000a:	30 97       	sbiw	r30, 0x00	; 0
   1000c:	09 f1       	breq	.+66     	; 0x10050 <compile_import_from+0x188>
   1000e:	cf 01       	movw	r24, r30
   10010:	83 70       	andi	r24, 0x03	; 3
   10012:	99 27       	eor	r25, r25
   10014:	89 2b       	or	r24, r25
   10016:	e1 f4       	brne	.+56     	; 0x10050 <compile_import_from+0x188>
   10018:	df 01       	movw	r26, r30
   1001a:	84 81       	ldd	r24, Z+4	; 0x04
   1001c:	81 36       	cpi	r24, 0x61	; 97
   1001e:	c1 f4       	brne	.+48     	; 0x10050 <compile_import_from+0x188>
   10020:	00 e0       	ldi	r16, 0x00	; 0
   10022:	10 e0       	ldi	r17, 0x00	; 0
   10024:	17 c0       	rjmp	.+46     	; 0x10054 <compile_import_from+0x18c>
   10026:	eb 81       	ldd	r30, Y+3	; 0x03
   10028:	fc 81       	ldd	r31, Y+4	; 0x04
   1002a:	c8 01       	movw	r24, r16
   1002c:	88 0f       	add	r24, r24
   1002e:	99 1f       	adc	r25, r25
   10030:	e8 0f       	add	r30, r24
   10032:	f9 1f       	adc	r31, r25
   10034:	01 90       	ld	r0, Z+
   10036:	f0 81       	ld	r31, Z
   10038:	e0 2d       	mov	r30, r0
   1003a:	30 97       	sbiw	r30, 0x00	; 0
   1003c:	49 f0       	breq	.+18     	; 0x10050 <compile_import_from+0x188>
   1003e:	cf 01       	movw	r24, r30
   10040:	83 70       	andi	r24, 0x03	; 3
   10042:	99 27       	eor	r25, r25
   10044:	89 2b       	or	r24, r25
   10046:	21 f4       	brne	.+8      	; 0x10050 <compile_import_from+0x188>
   10048:	df 01       	movw	r26, r30
   1004a:	84 81       	ldd	r24, Z+4	; 0x04
   1004c:	81 36       	cpi	r24, 0x61	; 97
   1004e:	11 f0       	breq	.+4      	; 0x10054 <compile_import_from+0x18c>
   10050:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   10054:	18 96       	adiw	r26, 0x08	; 8
   10056:	6d 91       	ld	r22, X+
   10058:	7c 91       	ld	r23, X
   1005a:	19 97       	sbiw	r26, 0x09	; 9
   1005c:	72 95       	swap	r23
   1005e:	62 95       	swap	r22
   10060:	6f 70       	andi	r22, 0x0F	; 15
   10062:	67 27       	eor	r22, r23
   10064:	7f 70       	andi	r23, 0x0F	; 15
   10066:	67 27       	eor	r22, r23
   10068:	f7 01       	movw	r30, r14
   1006a:	83 8d       	ldd	r24, Z+27	; 0x1b
   1006c:	94 8d       	ldd	r25, Z+28	; 0x1c
   1006e:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <mp_emit_bc_load_const_str>
   10072:	0f 5f       	subi	r16, 0xFF	; 255
   10074:	1f 4f       	sbci	r17, 0xFF	; 255
   10076:	c0 16       	cp	r12, r16
   10078:	d1 06       	cpc	r13, r17
   1007a:	a9 f6       	brne	.-86     	; 0x10026 <compile_import_from+0x15e>
   1007c:	66 c0       	rjmp	.+204    	; 0x1014a <compile_import_from+0x282>
   1007e:	cf 01       	movw	r24, r30
   10080:	83 70       	andi	r24, 0x03	; 3
   10082:	99 27       	eor	r25, r25
   10084:	89 2b       	or	r24, r25
   10086:	e1 f4       	brne	.+56     	; 0x100c0 <compile_import_from+0x1f8>
   10088:	5f 01       	movw	r10, r30
   1008a:	84 81       	ldd	r24, Z+4	; 0x04
   1008c:	81 36       	cpi	r24, 0x61	; 97
   1008e:	c1 f4       	brne	.+48     	; 0x100c0 <compile_import_from+0x1f8>
   10090:	00 e0       	ldi	r16, 0x00	; 0
   10092:	10 e0       	ldi	r17, 0x00	; 0
   10094:	17 c0       	rjmp	.+46     	; 0x100c4 <compile_import_from+0x1fc>
   10096:	eb 81       	ldd	r30, Y+3	; 0x03
   10098:	fc 81       	ldd	r31, Y+4	; 0x04
   1009a:	c8 01       	movw	r24, r16
   1009c:	88 0f       	add	r24, r24
   1009e:	99 1f       	adc	r25, r25
   100a0:	e8 0f       	add	r30, r24
   100a2:	f9 1f       	adc	r31, r25
   100a4:	01 90       	ld	r0, Z+
   100a6:	f0 81       	ld	r31, Z
   100a8:	e0 2d       	mov	r30, r0
   100aa:	30 97       	sbiw	r30, 0x00	; 0
   100ac:	49 f0       	breq	.+18     	; 0x100c0 <compile_import_from+0x1f8>
   100ae:	cf 01       	movw	r24, r30
   100b0:	83 70       	andi	r24, 0x03	; 3
   100b2:	99 27       	eor	r25, r25
   100b4:	89 2b       	or	r24, r25
   100b6:	21 f4       	brne	.+8      	; 0x100c0 <compile_import_from+0x1f8>
   100b8:	5f 01       	movw	r10, r30
   100ba:	84 81       	ldd	r24, Z+4	; 0x04
   100bc:	81 36       	cpi	r24, 0x61	; 97
   100be:	11 f0       	breq	.+4      	; 0x100c4 <compile_import_from+0x1fc>
   100c0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   100c4:	f5 01       	movw	r30, r10
   100c6:	80 84       	ldd	r8, Z+8	; 0x08
   100c8:	91 84       	ldd	r9, Z+9	; 0x09
   100ca:	96 94       	lsr	r9
   100cc:	87 94       	ror	r8
   100ce:	96 94       	lsr	r9
   100d0:	87 94       	ror	r8
   100d2:	96 94       	lsr	r9
   100d4:	87 94       	ror	r8
   100d6:	96 94       	lsr	r9
   100d8:	87 94       	ror	r8
   100da:	41 e0       	ldi	r20, 0x01	; 1
   100dc:	50 e0       	ldi	r21, 0x00	; 0
   100de:	b4 01       	movw	r22, r8
   100e0:	f7 01       	movw	r30, r14
   100e2:	83 8d       	ldd	r24, Z+27	; 0x1b
   100e4:	94 8d       	ldd	r25, Z+28	; 0x1c
   100e6:	0e 94 44 15 	call	0x2a88	; 0x2a88 <mp_emit_bc_import>
   100ea:	f5 01       	movw	r30, r10
   100ec:	62 85       	ldd	r22, Z+10	; 0x0a
   100ee:	73 85       	ldd	r23, Z+11	; 0x0b
   100f0:	61 15       	cp	r22, r1
   100f2:	71 05       	cpc	r23, r1
   100f4:	29 f4       	brne	.+10     	; 0x10100 <compile_import_from+0x238>
   100f6:	b4 01       	movw	r22, r8
   100f8:	c7 01       	movw	r24, r14
   100fa:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
   100fe:	09 c0       	rjmp	.+18     	; 0x10112 <compile_import_from+0x24a>
   10100:	72 95       	swap	r23
   10102:	62 95       	swap	r22
   10104:	6f 70       	andi	r22, 0x0F	; 15
   10106:	67 27       	eor	r22, r23
   10108:	7f 70       	andi	r23, 0x0F	; 15
   1010a:	67 27       	eor	r22, r23
   1010c:	c7 01       	movw	r24, r14
   1010e:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
   10112:	0f 5f       	subi	r16, 0xFF	; 255
   10114:	1f 4f       	sbci	r17, 0xFF	; 255
   10116:	c0 16       	cp	r12, r16
   10118:	d1 06       	cpc	r13, r17
   1011a:	09 f0       	breq	.+2      	; 0x1011e <compile_import_from+0x256>
   1011c:	bc cf       	rjmp	.-136    	; 0x10096 <compile_import_from+0x1ce>
   1011e:	f7 01       	movw	r30, r14
   10120:	83 8d       	ldd	r24, Z+27	; 0x1b
   10122:	94 8d       	ldd	r25, Z+28	; 0x1c
   10124:	0e 94 57 16 	call	0x2cae	; 0x2cae <mp_emit_bc_pop_top>
   10128:	2d c0       	rjmp	.+90     	; 0x10184 <compile_import_from+0x2bc>
   1012a:	40 e0       	ldi	r20, 0x00	; 0
   1012c:	50 e0       	ldi	r21, 0x00	; 0
   1012e:	60 e0       	ldi	r22, 0x00	; 0
   10130:	70 e0       	ldi	r23, 0x00	; 0
   10132:	f7 01       	movw	r30, r14
   10134:	83 8d       	ldd	r24, Z+27	; 0x1b
   10136:	94 8d       	ldd	r25, Z+28	; 0x1c
   10138:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
   1013c:	ae 01       	movw	r20, r28
   1013e:	4f 5f       	subi	r20, 0xFF	; 255
   10140:	5f 4f       	sbci	r21, 0xFF	; 255
   10142:	b5 01       	movw	r22, r10
   10144:	c7 01       	movw	r24, r14
   10146:	55 dd       	rcall	.-1366   	; 0xfbf2 <do_import_name>
   10148:	ea cf       	rjmp	.-44     	; 0x1011e <compile_import_from+0x256>
   1014a:	40 e0       	ldi	r20, 0x00	; 0
   1014c:	50 e0       	ldi	r21, 0x00	; 0
   1014e:	b6 01       	movw	r22, r12
   10150:	f7 01       	movw	r30, r14
   10152:	83 8d       	ldd	r24, Z+27	; 0x1b
   10154:	94 8d       	ldd	r25, Z+28	; 0x1c
   10156:	0e 94 98 17 	call	0x2f30	; 0x2f30 <mp_emit_bc_build>
   1015a:	ae 01       	movw	r20, r28
   1015c:	4f 5f       	subi	r20, 0xFF	; 255
   1015e:	5f 4f       	sbci	r21, 0xFF	; 255
   10160:	b5 01       	movw	r22, r10
   10162:	c7 01       	movw	r24, r14
   10164:	46 dd       	rcall	.-1396   	; 0xfbf2 <do_import_name>
   10166:	eb 81       	ldd	r30, Y+3	; 0x03
   10168:	fc 81       	ldd	r31, Y+4	; 0x04
   1016a:	01 90       	ld	r0, Z+
   1016c:	f0 81       	ld	r31, Z
   1016e:	e0 2d       	mov	r30, r0
   10170:	30 97       	sbiw	r30, 0x00	; 0
   10172:	09 f0       	breq	.+2      	; 0x10176 <compile_import_from+0x2ae>
   10174:	84 cf       	rjmp	.-248    	; 0x1007e <compile_import_from+0x1b6>
   10176:	a4 cf       	rjmp	.-184    	; 0x100c0 <compile_import_from+0x1f8>
   10178:	f5 01       	movw	r30, r10
   1017a:	84 81       	ldd	r24, Z+4	; 0x04
   1017c:	8c 35       	cpi	r24, 0x5C	; 92
   1017e:	09 f0       	breq	.+2      	; 0x10182 <compile_import_from+0x2ba>
   10180:	00 cf       	rjmp	.-512    	; 0xff82 <compile_import_from+0xba>
   10182:	cf ce       	rjmp	.-610    	; 0xff22 <compile_import_from+0x5a>
   10184:	0f 90       	pop	r0
   10186:	0f 90       	pop	r0
   10188:	0f 90       	pop	r0
   1018a:	0f 90       	pop	r0
   1018c:	df 91       	pop	r29
   1018e:	cf 91       	pop	r28
   10190:	1f 91       	pop	r17
   10192:	0f 91       	pop	r16
   10194:	ff 90       	pop	r15
   10196:	ef 90       	pop	r14
   10198:	df 90       	pop	r13
   1019a:	cf 90       	pop	r12
   1019c:	bf 90       	pop	r11
   1019e:	af 90       	pop	r10
   101a0:	9f 90       	pop	r9
   101a2:	8f 90       	pop	r8
   101a4:	08 95       	ret

000101a6 <compile_dotted_as_name>:
   101a6:	ef 92       	push	r14
   101a8:	ff 92       	push	r15
   101aa:	0f 93       	push	r16
   101ac:	1f 93       	push	r17
   101ae:	cf 93       	push	r28
   101b0:	df 93       	push	r29
   101b2:	00 d0       	rcall	.+0      	; 0x101b4 <compile_dotted_as_name+0xe>
   101b4:	cd b7       	in	r28, 0x3d	; 61
   101b6:	de b7       	in	r29, 0x3e	; 62
   101b8:	8c 01       	movw	r16, r24
   101ba:	7b 01       	movw	r14, r22
   101bc:	60 e0       	ldi	r22, 0x00	; 0
   101be:	70 e0       	ldi	r23, 0x00	; 0
   101c0:	fc 01       	movw	r30, r24
   101c2:	83 8d       	ldd	r24, Z+27	; 0x1b
   101c4:	94 8d       	ldd	r25, Z+28	; 0x1c
   101c6:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <mp_emit_bc_load_const_small_int>
   101ca:	6e e0       	ldi	r22, 0x0E	; 14
   101cc:	f8 01       	movw	r30, r16
   101ce:	83 8d       	ldd	r24, Z+27	; 0x1b
   101d0:	94 8d       	ldd	r25, Z+28	; 0x1c
   101d2:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <mp_emit_bc_load_const_tok>
   101d6:	ae 01       	movw	r20, r28
   101d8:	4f 5f       	subi	r20, 0xFF	; 255
   101da:	5f 4f       	sbci	r21, 0xFF	; 255
   101dc:	b7 01       	movw	r22, r14
   101de:	c8 01       	movw	r24, r16
   101e0:	08 dd       	rcall	.-1520   	; 0xfbf2 <do_import_name>
   101e2:	69 81       	ldd	r22, Y+1	; 0x01
   101e4:	7a 81       	ldd	r23, Y+2	; 0x02
   101e6:	c8 01       	movw	r24, r16
   101e8:	0e 94 77 64 	call	0xc8ee	; 0xc8ee <compile_store_id>
   101ec:	0f 90       	pop	r0
   101ee:	0f 90       	pop	r0
   101f0:	df 91       	pop	r29
   101f2:	cf 91       	pop	r28
   101f4:	1f 91       	pop	r17
   101f6:	0f 91       	pop	r16
   101f8:	ff 90       	pop	r15
   101fa:	ef 90       	pop	r14
   101fc:	08 95       	ret

000101fe <mp_obj_new_str_via_qstr>:
   101fe:	38 db       	rcall	.-2448   	; 0xf870 <qstr_from_strn>
   10200:	88 0f       	add	r24, r24
   10202:	99 1f       	adc	r25, r25
   10204:	88 0f       	add	r24, r24
   10206:	99 1f       	adc	r25, r25
   10208:	88 0f       	add	r24, r24
   1020a:	99 1f       	adc	r25, r25
   1020c:	82 60       	ori	r24, 0x02	; 2
   1020e:	08 95       	ret

00010210 <str_it_iternext>:
   10210:	0f 93       	push	r16
   10212:	1f 93       	push	r17
   10214:	cf 93       	push	r28
   10216:	df 93       	push	r29
   10218:	00 d0       	rcall	.+0      	; 0x1021a <str_it_iternext+0xa>
   1021a:	cd b7       	in	r28, 0x3d	; 61
   1021c:	de b7       	in	r29, 0x3e	; 62
   1021e:	8c 01       	movw	r16, r24
   10220:	dc 01       	movw	r26, r24
   10222:	14 96       	adiw	r26, 0x04	; 4
   10224:	ed 91       	ld	r30, X+
   10226:	fc 91       	ld	r31, X
   10228:	15 97       	sbiw	r26, 0x05	; 5
   1022a:	cf 01       	movw	r24, r30
   1022c:	87 70       	andi	r24, 0x07	; 7
   1022e:	99 27       	eor	r25, r25
   10230:	02 97       	sbiw	r24, 0x02	; 2
   10232:	69 f4       	brne	.+26     	; 0x1024e <str_it_iternext+0x3e>
   10234:	be 01       	movw	r22, r28
   10236:	6f 5f       	subi	r22, 0xFF	; 255
   10238:	7f 4f       	sbci	r23, 0xFF	; 255
   1023a:	cf 01       	movw	r24, r30
   1023c:	96 95       	lsr	r25
   1023e:	87 95       	ror	r24
   10240:	96 95       	lsr	r25
   10242:	87 95       	ror	r24
   10244:	96 95       	lsr	r25
   10246:	87 95       	ror	r24
   10248:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
   1024c:	06 c0       	rjmp	.+12     	; 0x1025a <str_it_iternext+0x4a>
   1024e:	84 81       	ldd	r24, Z+4	; 0x04
   10250:	95 81       	ldd	r25, Z+5	; 0x05
   10252:	9a 83       	std	Y+2, r25	; 0x02
   10254:	89 83       	std	Y+1, r24	; 0x01
   10256:	86 81       	ldd	r24, Z+6	; 0x06
   10258:	97 81       	ldd	r25, Z+7	; 0x07
   1025a:	f8 01       	movw	r30, r16
   1025c:	26 81       	ldd	r18, Z+6	; 0x06
   1025e:	37 81       	ldd	r19, Z+7	; 0x07
   10260:	49 81       	ldd	r20, Y+1	; 0x01
   10262:	5a 81       	ldd	r21, Y+2	; 0x02
   10264:	24 17       	cp	r18, r20
   10266:	35 07       	cpc	r19, r21
   10268:	88 f4       	brcc	.+34     	; 0x1028c <str_it_iternext+0x7c>
   1026a:	61 e0       	ldi	r22, 0x01	; 1
   1026c:	70 e0       	ldi	r23, 0x00	; 0
   1026e:	82 0f       	add	r24, r18
   10270:	93 1f       	adc	r25, r19
   10272:	c5 df       	rcall	.-118    	; 0x101fe <mp_obj_new_str_via_qstr>
   10274:	d8 01       	movw	r26, r16
   10276:	16 96       	adiw	r26, 0x06	; 6
   10278:	2d 91       	ld	r18, X+
   1027a:	3c 91       	ld	r19, X
   1027c:	17 97       	sbiw	r26, 0x07	; 7
   1027e:	2f 5f       	subi	r18, 0xFF	; 255
   10280:	3f 4f       	sbci	r19, 0xFF	; 255
   10282:	17 96       	adiw	r26, 0x07	; 7
   10284:	3c 93       	st	X, r19
   10286:	2e 93       	st	-X, r18
   10288:	16 97       	sbiw	r26, 0x06	; 6
   1028a:	02 c0       	rjmp	.+4      	; 0x10290 <str_it_iternext+0x80>
   1028c:	80 e0       	ldi	r24, 0x00	; 0
   1028e:	90 e0       	ldi	r25, 0x00	; 0
   10290:	0f 90       	pop	r0
   10292:	0f 90       	pop	r0
   10294:	df 91       	pop	r29
   10296:	cf 91       	pop	r28
   10298:	1f 91       	pop	r17
   1029a:	0f 91       	pop	r16
   1029c:	08 95       	ret

0001029e <bytes_subscr>:
   1029e:	af 92       	push	r10
   102a0:	bf 92       	push	r11
   102a2:	cf 92       	push	r12
   102a4:	df 92       	push	r13
   102a6:	ef 92       	push	r14
   102a8:	ff 92       	push	r15
   102aa:	0f 93       	push	r16
   102ac:	1f 93       	push	r17
   102ae:	cf 93       	push	r28
   102b0:	df 93       	push	r29
   102b2:	00 d0       	rcall	.+0      	; 0x102b4 <bytes_subscr+0x16>
   102b4:	cd b7       	in	r28, 0x3d	; 61
   102b6:	de b7       	in	r29, 0x3e	; 62
   102b8:	8c 01       	movw	r16, r24
   102ba:	5b 01       	movw	r10, r22
   102bc:	7a 01       	movw	r14, r20
   102be:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   102c2:	6c 01       	movw	r12, r24
   102c4:	c8 01       	movw	r24, r16
   102c6:	87 70       	andi	r24, 0x07	; 7
   102c8:	99 27       	eor	r25, r25
   102ca:	02 97       	sbiw	r24, 0x02	; 2
   102cc:	71 f4       	brne	.+28     	; 0x102ea <bytes_subscr+0x4c>
   102ce:	be 01       	movw	r22, r28
   102d0:	6f 5f       	subi	r22, 0xFF	; 255
   102d2:	7f 4f       	sbci	r23, 0xFF	; 255
   102d4:	c8 01       	movw	r24, r16
   102d6:	96 95       	lsr	r25
   102d8:	87 95       	ror	r24
   102da:	96 95       	lsr	r25
   102dc:	87 95       	ror	r24
   102de:	96 95       	lsr	r25
   102e0:	87 95       	ror	r24
   102e2:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
   102e6:	8c 01       	movw	r16, r24
   102e8:	07 c0       	rjmp	.+14     	; 0x102f8 <bytes_subscr+0x5a>
   102ea:	f8 01       	movw	r30, r16
   102ec:	84 81       	ldd	r24, Z+4	; 0x04
   102ee:	95 81       	ldd	r25, Z+5	; 0x05
   102f0:	9a 83       	std	Y+2, r25	; 0x02
   102f2:	89 83       	std	Y+1, r24	; 0x01
   102f4:	06 81       	ldd	r16, Z+6	; 0x06
   102f6:	17 81       	ldd	r17, Z+7	; 0x07
   102f8:	f4 e0       	ldi	r31, 0x04	; 4
   102fa:	ef 16       	cp	r14, r31
   102fc:	f1 04       	cpc	r15, r1
   102fe:	d9 f4       	brne	.+54     	; 0x10336 <bytes_subscr+0x98>
   10300:	69 81       	ldd	r22, Y+1	; 0x01
   10302:	7a 81       	ldd	r23, Y+2	; 0x02
   10304:	20 e0       	ldi	r18, 0x00	; 0
   10306:	a5 01       	movw	r20, r10
   10308:	c6 01       	movw	r24, r12
   1030a:	0e 94 30 2b 	call	0x5660	; 0x5660 <mp_get_index>
   1030e:	22 ef       	ldi	r18, 0xF2	; 242
   10310:	c2 16       	cp	r12, r18
   10312:	2a e1       	ldi	r18, 0x1A	; 26
   10314:	d2 06       	cpc	r13, r18
   10316:	49 f4       	brne	.+18     	; 0x1032a <bytes_subscr+0x8c>
   10318:	f8 01       	movw	r30, r16
   1031a:	e8 0f       	add	r30, r24
   1031c:	f9 1f       	adc	r31, r25
   1031e:	80 81       	ld	r24, Z
   10320:	90 e0       	ldi	r25, 0x00	; 0
   10322:	88 0f       	add	r24, r24
   10324:	99 1f       	adc	r25, r25
   10326:	81 60       	ori	r24, 0x01	; 1
   10328:	08 c0       	rjmp	.+16     	; 0x1033a <bytes_subscr+0x9c>
   1032a:	61 e0       	ldi	r22, 0x01	; 1
   1032c:	70 e0       	ldi	r23, 0x00	; 0
   1032e:	80 0f       	add	r24, r16
   10330:	91 1f       	adc	r25, r17
   10332:	65 df       	rcall	.-310    	; 0x101fe <mp_obj_new_str_via_qstr>
   10334:	02 c0       	rjmp	.+4      	; 0x1033a <bytes_subscr+0x9c>
   10336:	80 e0       	ldi	r24, 0x00	; 0
   10338:	90 e0       	ldi	r25, 0x00	; 0
   1033a:	0f 90       	pop	r0
   1033c:	0f 90       	pop	r0
   1033e:	df 91       	pop	r29
   10340:	cf 91       	pop	r28
   10342:	1f 91       	pop	r17
   10344:	0f 91       	pop	r16
   10346:	ff 90       	pop	r15
   10348:	ef 90       	pop	r14
   1034a:	df 90       	pop	r13
   1034c:	cf 90       	pop	r12
   1034e:	bf 90       	pop	r11
   10350:	af 90       	pop	r10
   10352:	08 95       	ret

00010354 <mp_obj_str_intern_checked>:
   10354:	cf 93       	push	r28
   10356:	df 93       	push	r29
   10358:	00 d0       	rcall	.+0      	; 0x1035a <mp_obj_str_intern_checked+0x6>
   1035a:	cd b7       	in	r28, 0x3d	; 61
   1035c:	de b7       	in	r29, 0x3e	; 62
   1035e:	be 01       	movw	r22, r28
   10360:	6f 5f       	subi	r22, 0xFF	; 255
   10362:	7f 4f       	sbci	r23, 0xFF	; 255
   10364:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
   10368:	69 81       	ldd	r22, Y+1	; 0x01
   1036a:	7a 81       	ldd	r23, Y+2	; 0x02
   1036c:	48 df       	rcall	.-368    	; 0x101fe <mp_obj_new_str_via_qstr>
   1036e:	0f 90       	pop	r0
   10370:	0f 90       	pop	r0
   10372:	df 91       	pop	r29
   10374:	cf 91       	pop	r28
   10376:	08 95       	ret

00010378 <mp_builtin_chr>:
   10378:	cf 93       	push	r28
   1037a:	df 93       	push	r29
   1037c:	1f 92       	push	r1
   1037e:	cd b7       	in	r28, 0x3d	; 61
   10380:	de b7       	in	r29, 0x3e	; 62
   10382:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
   10386:	8f 3f       	cpi	r24, 0xFF	; 255
   10388:	91 05       	cpc	r25, r1
   1038a:	09 f0       	breq	.+2      	; 0x1038e <mp_builtin_chr+0x16>
   1038c:	38 f4       	brcc	.+14     	; 0x1039c <mp_builtin_chr+0x24>
   1038e:	89 83       	std	Y+1, r24	; 0x01
   10390:	61 e0       	ldi	r22, 0x01	; 1
   10392:	70 e0       	ldi	r23, 0x00	; 0
   10394:	ce 01       	movw	r24, r28
   10396:	01 96       	adiw	r24, 0x01	; 1
   10398:	32 df       	rcall	.-412    	; 0x101fe <mp_obj_new_str_via_qstr>
   1039a:	04 c0       	rjmp	.+8      	; 0x103a4 <mp_builtin_chr+0x2c>
   1039c:	84 e6       	ldi	r24, 0x64	; 100
   1039e:	9a e0       	ldi	r25, 0x0A	; 10
   103a0:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   103a4:	0f 90       	pop	r0
   103a6:	df 91       	pop	r29
   103a8:	cf 91       	pop	r28
   103aa:	08 95       	ret

000103ac <mp_obj_str_get_qstr>:
   103ac:	9c 01       	movw	r18, r24
   103ae:	27 70       	andi	r18, 0x07	; 7
   103b0:	33 27       	eor	r19, r19
   103b2:	22 30       	cpi	r18, 0x02	; 2
   103b4:	31 05       	cpc	r19, r1
   103b6:	39 f4       	brne	.+14     	; 0x103c6 <mp_obj_str_get_qstr+0x1a>
   103b8:	96 95       	lsr	r25
   103ba:	87 95       	ror	r24
   103bc:	96 95       	lsr	r25
   103be:	87 95       	ror	r24
   103c0:	96 95       	lsr	r25
   103c2:	87 95       	ror	r24
   103c4:	08 95       	ret
   103c6:	fc 01       	movw	r30, r24
   103c8:	83 70       	andi	r24, 0x03	; 3
   103ca:	99 27       	eor	r25, r25
   103cc:	89 2b       	or	r24, r25
   103ce:	59 f4       	brne	.+22     	; 0x103e6 <mp_obj_str_get_qstr+0x3a>
   103d0:	80 81       	ld	r24, Z
   103d2:	91 81       	ldd	r25, Z+1	; 0x01
   103d4:	82 51       	subi	r24, 0x12	; 18
   103d6:	9b 41       	sbci	r25, 0x1B	; 27
   103d8:	31 f4       	brne	.+12     	; 0x103e6 <mp_obj_str_get_qstr+0x3a>
   103da:	64 81       	ldd	r22, Z+4	; 0x04
   103dc:	75 81       	ldd	r23, Z+5	; 0x05
   103de:	86 81       	ldd	r24, Z+6	; 0x06
   103e0:	97 81       	ldd	r25, Z+7	; 0x07
   103e2:	46 ca       	rjmp	.-2932   	; 0xf870 <qstr_from_strn>
   103e4:	08 95       	ret
   103e6:	81 e7       	ldi	r24, 0x71	; 113
   103e8:	94 e0       	ldi	r25, 0x04	; 4
   103ea:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>

000103ee <mp_import_all>:
   103ee:	ef 92       	push	r14
   103f0:	ff 92       	push	r15
   103f2:	0f 93       	push	r16
   103f4:	1f 93       	push	r17
   103f6:	cf 93       	push	r28
   103f8:	df 93       	push	r29
   103fa:	dc 01       	movw	r26, r24
   103fc:	12 96       	adiw	r26, 0x02	; 2
   103fe:	0d 91       	ld	r16, X+
   10400:	1c 91       	ld	r17, X
   10402:	13 97       	sbiw	r26, 0x03	; 3
   10404:	f8 01       	movw	r30, r16
   10406:	84 81       	ldd	r24, Z+4	; 0x04
   10408:	95 81       	ldd	r25, Z+5	; 0x05
   1040a:	89 2b       	or	r24, r25
   1040c:	d1 f1       	breq	.+116    	; 0x10482 <mp_import_all+0x94>
   1040e:	c0 e0       	ldi	r28, 0x00	; 0
   10410:	d0 e0       	ldi	r29, 0x00	; 0
   10412:	e1 2c       	mov	r14, r1
   10414:	f1 2c       	mov	r15, r1
   10416:	d8 01       	movw	r26, r16
   10418:	16 96       	adiw	r26, 0x06	; 6
   1041a:	ed 91       	ld	r30, X+
   1041c:	fc 91       	ld	r31, X
   1041e:	17 97       	sbiw	r26, 0x07	; 7
   10420:	ec 0f       	add	r30, r28
   10422:	fd 1f       	adc	r31, r29
   10424:	80 81       	ld	r24, Z
   10426:	91 81       	ldd	r25, Z+1	; 0x01
   10428:	00 97       	sbiw	r24, 0x00	; 0
   1042a:	c9 f0       	breq	.+50     	; 0x1045e <mp_import_all+0x70>
   1042c:	84 30       	cpi	r24, 0x04	; 4
   1042e:	91 05       	cpc	r25, r1
   10430:	09 f5       	brne	.+66     	; 0x10474 <mp_import_all+0x86>
   10432:	15 c0       	rjmp	.+42     	; 0x1045e <mp_import_all+0x70>
   10434:	d8 01       	movw	r26, r16
   10436:	16 96       	adiw	r26, 0x06	; 6
   10438:	ed 91       	ld	r30, X+
   1043a:	fc 91       	ld	r31, X
   1043c:	17 97       	sbiw	r26, 0x07	; 7
   1043e:	ec 0f       	add	r30, r28
   10440:	fd 1f       	adc	r31, r29
   10442:	80 81       	ld	r24, Z
   10444:	91 81       	ldd	r25, Z+1	; 0x01
   10446:	b2 df       	rcall	.-156    	; 0x103ac <mp_obj_str_get_qstr>
   10448:	d8 01       	movw	r26, r16
   1044a:	16 96       	adiw	r26, 0x06	; 6
   1044c:	ed 91       	ld	r30, X+
   1044e:	fc 91       	ld	r31, X
   10450:	17 97       	sbiw	r26, 0x07	; 7
   10452:	ec 0f       	add	r30, r28
   10454:	fd 1f       	adc	r31, r29
   10456:	62 81       	ldd	r22, Z+2	; 0x02
   10458:	73 81       	ldd	r23, Z+3	; 0x03
   1045a:	0e 94 a1 42 	call	0x8542	; 0x8542 <mp_store_name>
   1045e:	bf ef       	ldi	r27, 0xFF	; 255
   10460:	eb 1a       	sub	r14, r27
   10462:	fb 0a       	sbc	r15, r27
   10464:	24 96       	adiw	r28, 0x04	; 4
   10466:	f8 01       	movw	r30, r16
   10468:	84 81       	ldd	r24, Z+4	; 0x04
   1046a:	95 81       	ldd	r25, Z+5	; 0x05
   1046c:	e8 16       	cp	r14, r24
   1046e:	f9 06       	cpc	r15, r25
   10470:	90 f2       	brcs	.-92     	; 0x10416 <mp_import_all+0x28>
   10472:	07 c0       	rjmp	.+14     	; 0x10482 <mp_import_all+0x94>
   10474:	0e 94 9c 29 	call	0x5338	; 0x5338 <mp_obj_str_get_str>
   10478:	dc 01       	movw	r26, r24
   1047a:	8c 91       	ld	r24, X
   1047c:	8f 35       	cpi	r24, 0x5F	; 95
   1047e:	d1 f6       	brne	.-76     	; 0x10434 <mp_import_all+0x46>
   10480:	ee cf       	rjmp	.-36     	; 0x1045e <mp_import_all+0x70>
   10482:	df 91       	pop	r29
   10484:	cf 91       	pop	r28
   10486:	1f 91       	pop	r17
   10488:	0f 91       	pop	r16
   1048a:	ff 90       	pop	r15
   1048c:	ef 90       	pop	r14
   1048e:	08 95       	ret

00010490 <type_make_new>:
   10490:	ef 92       	push	r14
   10492:	ff 92       	push	r15
   10494:	0f 93       	push	r16
   10496:	1f 93       	push	r17
   10498:	cf 93       	push	r28
   1049a:	df 93       	push	r29
   1049c:	eb 01       	movw	r28, r22
   1049e:	ba 01       	movw	r22, r20
   104a0:	89 01       	movw	r16, r18
   104a2:	26 e0       	ldi	r18, 0x06	; 6
   104a4:	30 e0       	ldi	r19, 0x00	; 0
   104a6:	42 e0       	ldi	r20, 0x02	; 2
   104a8:	50 e0       	ldi	r21, 0x00	; 0
   104aa:	ce 01       	movw	r24, r28
   104ac:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
   104b0:	c1 30       	cpi	r28, 0x01	; 1
   104b2:	d1 05       	cpc	r29, r1
   104b4:	19 f0       	breq	.+6      	; 0x104bc <type_make_new+0x2c>
   104b6:	23 97       	sbiw	r28, 0x03	; 3
   104b8:	39 f0       	breq	.+14     	; 0x104c8 <type_make_new+0x38>
   104ba:	13 c0       	rjmp	.+38     	; 0x104e2 <type_make_new+0x52>
   104bc:	f8 01       	movw	r30, r16
   104be:	80 81       	ld	r24, Z
   104c0:	91 81       	ldd	r25, Z+1	; 0x01
   104c2:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   104c6:	11 c0       	rjmp	.+34     	; 0x104ea <type_make_new+0x5a>
   104c8:	f8 01       	movw	r30, r16
   104ca:	e4 80       	ldd	r14, Z+4	; 0x04
   104cc:	f5 80       	ldd	r15, Z+5	; 0x05
   104ce:	c2 81       	ldd	r28, Z+2	; 0x02
   104d0:	d3 81       	ldd	r29, Z+3	; 0x03
   104d2:	80 81       	ld	r24, Z
   104d4:	91 81       	ldd	r25, Z+1	; 0x01
   104d6:	6a df       	rcall	.-300    	; 0x103ac <mp_obj_str_get_qstr>
   104d8:	a7 01       	movw	r20, r14
   104da:	be 01       	movw	r22, r28
   104dc:	0e 94 b7 48 	call	0x916e	; 0x916e <mp_obj_new_type>
   104e0:	04 c0       	rjmp	.+8      	; 0x104ea <type_make_new+0x5a>
   104e2:	80 e8       	ldi	r24, 0x80	; 128
   104e4:	9a e0       	ldi	r25, 0x0A	; 10
   104e6:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   104ea:	df 91       	pop	r29
   104ec:	cf 91       	pop	r28
   104ee:	1f 91       	pop	r17
   104f0:	0f 91       	pop	r16
   104f2:	ff 90       	pop	r15
   104f4:	ef 90       	pop	r14
   104f6:	08 95       	ret

000104f8 <mp_builtin_setattr>:
   104f8:	0f 93       	push	r16
   104fa:	1f 93       	push	r17
   104fc:	cf 93       	push	r28
   104fe:	df 93       	push	r29
   10500:	ec 01       	movw	r28, r24
   10502:	cb 01       	movw	r24, r22
   10504:	8a 01       	movw	r16, r20
   10506:	52 df       	rcall	.-348    	; 0x103ac <mp_obj_str_get_qstr>
   10508:	a8 01       	movw	r20, r16
   1050a:	bc 01       	movw	r22, r24
   1050c:	ce 01       	movw	r24, r28
   1050e:	0e 94 b5 24 	call	0x496a	; 0x496a <mp_store_attr>
   10512:	86 e0       	ldi	r24, 0x06	; 6
   10514:	90 e0       	ldi	r25, 0x00	; 0
   10516:	df 91       	pop	r29
   10518:	cf 91       	pop	r28
   1051a:	1f 91       	pop	r17
   1051c:	0f 91       	pop	r16
   1051e:	08 95       	ret

00010520 <mp_setup_code_state>:
   10520:	2f 92       	push	r2
   10522:	3f 92       	push	r3
   10524:	4f 92       	push	r4
   10526:	5f 92       	push	r5
   10528:	6f 92       	push	r6
   1052a:	7f 92       	push	r7
   1052c:	8f 92       	push	r8
   1052e:	9f 92       	push	r9
   10530:	af 92       	push	r10
   10532:	bf 92       	push	r11
   10534:	cf 92       	push	r12
   10536:	df 92       	push	r13
   10538:	ef 92       	push	r14
   1053a:	ff 92       	push	r15
   1053c:	0f 93       	push	r16
   1053e:	1f 93       	push	r17
   10540:	cf 93       	push	r28
   10542:	df 93       	push	r29
   10544:	cd b7       	in	r28, 0x3d	; 61
   10546:	de b7       	in	r29, 0x3e	; 62
   10548:	64 97       	sbiw	r28, 0x14	; 20
   1054a:	0f b6       	in	r0, 0x3f	; 63
   1054c:	f8 94       	cli
   1054e:	de bf       	out	0x3e, r29	; 62
   10550:	0f be       	out	0x3f, r0	; 63
   10552:	cd bf       	out	0x3d, r28	; 61
   10554:	2c 01       	movw	r4, r24
   10556:	8b 01       	movw	r16, r22
   10558:	5a 01       	movw	r10, r20
   1055a:	3a 83       	std	Y+2, r19	; 0x02
   1055c:	29 83       	std	Y+1, r18	; 0x01
   1055e:	fc 01       	movw	r30, r24
   10560:	01 90       	ld	r0, Z+
   10562:	f0 81       	ld	r31, Z
   10564:	e0 2d       	mov	r30, r0
   10566:	fe 87       	std	Y+14, r31	; 0x0e
   10568:	ed 87       	std	Y+13, r30	; 0x0d
   1056a:	24 81       	ldd	r18, Z+4	; 0x04
   1056c:	35 81       	ldd	r19, Z+5	; 0x05
   1056e:	fc 01       	movw	r30, r24
   10570:	82 81       	ldd	r24, Z+2	; 0x02
   10572:	93 81       	ldd	r25, Z+3	; 0x03
   10574:	82 0f       	add	r24, r18
   10576:	93 1f       	adc	r25, r19
   10578:	e6 80       	ldd	r14, Z+6	; 0x06
   1057a:	f7 80       	ldd	r15, Z+7	; 0x07
   1057c:	fc 86       	std	Y+12, r15	; 0x0c
   1057e:	eb 86       	std	Y+11, r14	; 0x0b
   10580:	9c 01       	movw	r18, r24
   10582:	2f 5f       	subi	r18, 0xFF	; 255
   10584:	3f 4f       	sbci	r19, 0xFF	; 255
   10586:	33 83       	std	Z+3, r19	; 0x03
   10588:	22 83       	std	Z+2, r18	; 0x02
   1058a:	fc 01       	movw	r30, r24
   1058c:	80 81       	ld	r24, Z
   1058e:	98 2f       	mov	r25, r24
   10590:	93 70       	andi	r25, 0x03	; 3
   10592:	e9 2e       	mov	r14, r25
   10594:	f1 2c       	mov	r15, r1
   10596:	fe 82       	std	Y+6, r15	; 0x06
   10598:	ed 82       	std	Y+5, r14	; 0x05
   1059a:	88 23       	and	r24, r24
   1059c:	0c f0       	brlt	.+2      	; 0x105a0 <mp_setup_code_state+0x80>
   1059e:	52 c0       	rjmp	.+164    	; 0x10644 <mp_setup_code_state+0x124>
   105a0:	80 e0       	ldi	r24, 0x00	; 0
   105a2:	90 e0       	ldi	r25, 0x00	; 0
   105a4:	61 2c       	mov	r6, r1
   105a6:	71 2c       	mov	r7, r1
   105a8:	21 2c       	mov	r2, r1
   105aa:	31 2c       	mov	r3, r1
   105ac:	18 86       	std	Y+8, r1	; 0x08
   105ae:	1f 82       	std	Y+7, r1	; 0x07
   105b0:	60 e0       	ldi	r22, 0x00	; 0
   105b2:	70 e0       	ldi	r23, 0x00	; 0
   105b4:	d2 01       	movw	r26, r4
   105b6:	12 96       	adiw	r26, 0x02	; 2
   105b8:	2d 91       	ld	r18, X+
   105ba:	3c 91       	ld	r19, X
   105bc:	13 97       	sbiw	r26, 0x03	; 3
   105be:	a9 01       	movw	r20, r18
   105c0:	4f 5f       	subi	r20, 0xFF	; 255
   105c2:	5f 4f       	sbci	r21, 0xFF	; 255
   105c4:	13 96       	adiw	r26, 0x03	; 3
   105c6:	5c 93       	st	X, r21
   105c8:	4e 93       	st	-X, r20
   105ca:	12 97       	sbiw	r26, 0x02	; 2
   105cc:	f9 01       	movw	r30, r18
   105ce:	20 81       	ld	r18, Z
   105d0:	26 fb       	bst	r18, 6
   105d2:	cc 24       	eor	r12, r12
   105d4:	c0 f8       	bld	r12, 0
   105d6:	d1 2c       	mov	r13, r1
   105d8:	a6 01       	movw	r20, r12
   105da:	08 2e       	mov	r0, r24
   105dc:	02 c0       	rjmp	.+4      	; 0x105e2 <mp_setup_code_state+0xc2>
   105de:	44 0f       	add	r20, r20
   105e0:	55 1f       	adc	r21, r21
   105e2:	0a 94       	dec	r0
   105e4:	e2 f7       	brpl	.-8      	; 0x105de <mp_setup_code_state+0xbe>
   105e6:	64 2b       	or	r22, r20
   105e8:	75 2b       	or	r23, r21
   105ea:	42 2f       	mov	r20, r18
   105ec:	44 70       	andi	r20, 0x04	; 4
   105ee:	50 e0       	ldi	r21, 0x00	; 0
   105f0:	08 2e       	mov	r0, r24
   105f2:	02 c0       	rjmp	.+4      	; 0x105f8 <mp_setup_code_state+0xd8>
   105f4:	44 0f       	add	r20, r20
   105f6:	55 1f       	adc	r21, r21
   105f8:	0a 94       	dec	r0
   105fa:	e2 f7       	brpl	.-8      	; 0x105f4 <mp_setup_code_state+0xd4>
   105fc:	e4 2a       	or	r14, r20
   105fe:	f5 2a       	or	r15, r21
   10600:	23 fb       	bst	r18, 3
   10602:	aa 27       	eor	r26, r26
   10604:	a0 f9       	bld	r26, 0
   10606:	b0 e0       	ldi	r27, 0x00	; 0
   10608:	ad 01       	movw	r20, r26
   1060a:	08 2e       	mov	r0, r24
   1060c:	02 c0       	rjmp	.+4      	; 0x10612 <mp_setup_code_state+0xf2>
   1060e:	44 0f       	add	r20, r20
   10610:	55 1f       	adc	r21, r21
   10612:	0a 94       	dec	r0
   10614:	e2 f7       	brpl	.-8      	; 0x1060e <mp_setup_code_state+0xee>
   10616:	24 2a       	or	r2, r20
   10618:	35 2a       	or	r3, r21
   1061a:	e2 2f       	mov	r30, r18
   1061c:	e1 70       	andi	r30, 0x01	; 1
   1061e:	f0 e0       	ldi	r31, 0x00	; 0
   10620:	af 01       	movw	r20, r30
   10622:	08 2e       	mov	r0, r24
   10624:	02 c0       	rjmp	.+4      	; 0x1062a <mp_setup_code_state+0x10a>
   10626:	44 0f       	add	r20, r20
   10628:	55 1f       	adc	r21, r21
   1062a:	0a 94       	dec	r0
   1062c:	e2 f7       	brpl	.-8      	; 0x10626 <mp_setup_code_state+0x106>
   1062e:	64 2a       	or	r6, r20
   10630:	75 2a       	or	r7, r21
   10632:	01 96       	adiw	r24, 0x01	; 1
   10634:	22 23       	and	r18, r18
   10636:	0c f4       	brge	.+2      	; 0x1063a <mp_setup_code_state+0x11a>
   10638:	bd cf       	rjmp	.-134    	; 0x105b4 <mp_setup_code_state+0x94>
   1063a:	78 87       	std	Y+8, r23	; 0x08
   1063c:	6f 83       	std	Y+7, r22	; 0x07
   1063e:	fe 82       	std	Y+6, r15	; 0x06
   10640:	ed 82       	std	Y+5, r14	; 0x05
   10642:	06 c0       	rjmp	.+12     	; 0x10650 <mp_setup_code_state+0x130>
   10644:	61 2c       	mov	r6, r1
   10646:	71 2c       	mov	r7, r1
   10648:	21 2c       	mov	r2, r1
   1064a:	31 2c       	mov	r3, r1
   1064c:	18 86       	std	Y+8, r1	; 0x08
   1064e:	1f 82       	std	Y+7, r1	; 0x07
   10650:	c2 01       	movw	r24, r4
   10652:	0a 96       	adiw	r24, 0x0a	; 10
   10654:	d2 01       	movw	r26, r4
   10656:	15 96       	adiw	r26, 0x05	; 5
   10658:	9c 93       	st	X, r25
   1065a:	8e 93       	st	-X, r24
   1065c:	14 97       	sbiw	r26, 0x04	; 4
   1065e:	19 96       	adiw	r26, 0x09	; 9
   10660:	1c 92       	st	X, r1
   10662:	1e 92       	st	-X, r1
   10664:	18 97       	sbiw	r26, 0x08	; 8
   10666:	eb 84       	ldd	r14, Y+11	; 0x0b
   10668:	fc 84       	ldd	r15, Y+12	; 0x0c
   1066a:	ee 0c       	add	r14, r14
   1066c:	ff 1c       	adc	r15, r15
   1066e:	a7 01       	movw	r20, r14
   10670:	60 e0       	ldi	r22, 0x00	; 0
   10672:	70 e0       	ldi	r23, 0x00	; 0
   10674:	02 96       	adiw	r24, 0x02	; 2
   10676:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
   1067a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1067c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1067e:	2d 81       	ldd	r18, Y+5	; 0x05
   10680:	3e 81       	ldd	r19, Y+6	; 0x06
   10682:	e2 1b       	sub	r30, r18
   10684:	f3 0b       	sbc	r31, r19
   10686:	f8 8b       	std	Y+16, r31	; 0x10
   10688:	ef 87       	std	Y+15, r30	; 0x0f
   1068a:	cf 01       	movw	r24, r30
   1068c:	82 19       	sub	r24, r2
   1068e:	93 09       	sbc	r25, r3
   10690:	6c 01       	movw	r12, r24
   10692:	31 e0       	ldi	r19, 0x01	; 1
   10694:	c3 1a       	sub	r12, r19
   10696:	d1 08       	sbc	r13, r1
   10698:	dc 01       	movw	r26, r24
   1069a:	15 96       	adiw	r26, 0x05	; 5
   1069c:	aa 0f       	add	r26, r26
   1069e:	bb 1f       	adc	r27, r27
   106a0:	a4 0d       	add	r26, r4
   106a2:	b5 1d       	adc	r27, r5
   106a4:	bc 8b       	std	Y+20, r27	; 0x14
   106a6:	ab 8b       	std	Y+19, r26	; 0x13
   106a8:	ed 81       	ldd	r30, Y+5	; 0x05
   106aa:	fe 81       	ldd	r31, Y+6	; 0x06
   106ac:	e0 17       	cp	r30, r16
   106ae:	f1 07       	cpc	r31, r17
   106b0:	38 f5       	brcc	.+78     	; 0x10700 <mp_setup_code_state+0x1e0>
   106b2:	ff 81       	ldd	r31, Y+7	; 0x07
   106b4:	f2 ff       	sbrs	r31, 2
   106b6:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <mp_arg_error_terse_mismatch>
   106ba:	2b 89       	ldd	r18, Y+19	; 0x13
   106bc:	3c 89       	ldd	r19, Y+20	; 0x14
   106be:	22 50       	subi	r18, 0x02	; 2
   106c0:	31 09       	sbc	r19, r1
   106c2:	3c 8b       	std	Y+20, r19	; 0x14
   106c4:	2b 8b       	std	Y+19, r18	; 0x13
   106c6:	6d 81       	ldd	r22, Y+5	; 0x05
   106c8:	7e 81       	ldd	r23, Y+6	; 0x06
   106ca:	66 0f       	add	r22, r22
   106cc:	77 1f       	adc	r23, r23
   106ce:	89 81       	ldd	r24, Y+1	; 0x01
   106d0:	9a 81       	ldd	r25, Y+2	; 0x02
   106d2:	68 0f       	add	r22, r24
   106d4:	79 1f       	adc	r23, r25
   106d6:	c8 01       	movw	r24, r16
   106d8:	ad 81       	ldd	r26, Y+5	; 0x05
   106da:	be 81       	ldd	r27, Y+6	; 0x06
   106dc:	8a 1b       	sub	r24, r26
   106de:	9b 0b       	sbc	r25, r27
   106e0:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   106e4:	f6 01       	movw	r30, r12
   106e6:	36 96       	adiw	r30, 0x06	; 6
   106e8:	ee 0f       	add	r30, r30
   106ea:	ff 1f       	adc	r31, r31
   106ec:	e4 0d       	add	r30, r4
   106ee:	f5 1d       	adc	r31, r5
   106f0:	91 83       	std	Z+1, r25	; 0x01
   106f2:	80 83       	st	Z, r24
   106f4:	ed 81       	ldd	r30, Y+5	; 0x05
   106f6:	fe 81       	ldd	r31, Y+6	; 0x06
   106f8:	ef 2b       	or	r30, r31
   106fa:	09 f0       	breq	.+2      	; 0x106fe <mp_setup_code_state+0x1de>
   106fc:	4c c0       	rjmp	.+152    	; 0x10796 <mp_setup_code_state+0x276>
   106fe:	63 c0       	rjmp	.+198    	; 0x107c6 <mp_setup_code_state+0x2a6>
   10700:	ff 81       	ldd	r31, Y+7	; 0x07
   10702:	f2 ff       	sbrs	r31, 2
   10704:	10 c0       	rjmp	.+32     	; 0x10726 <mp_setup_code_state+0x206>
   10706:	2b 89       	ldd	r18, Y+19	; 0x13
   10708:	3c 89       	ldd	r19, Y+20	; 0x14
   1070a:	22 50       	subi	r18, 0x02	; 2
   1070c:	31 09       	sbc	r19, r1
   1070e:	3c 8b       	std	Y+20, r19	; 0x14
   10710:	2b 8b       	std	Y+19, r18	; 0x13
   10712:	f6 01       	movw	r30, r12
   10714:	36 96       	adiw	r30, 0x06	; 6
   10716:	ee 0f       	add	r30, r30
   10718:	ff 1f       	adc	r31, r31
   1071a:	e4 0d       	add	r30, r4
   1071c:	f5 1d       	adc	r31, r5
   1071e:	8a ea       	ldi	r24, 0xAA	; 170
   10720:	9a e1       	ldi	r25, 0x1A	; 26
   10722:	91 83       	std	Z+1, r25	; 0x01
   10724:	80 83       	st	Z, r24
   10726:	a1 14       	cp	r10, r1
   10728:	b1 04       	cpc	r11, r1
   1072a:	09 f0       	breq	.+2      	; 0x1072e <mp_setup_code_state+0x20e>
   1072c:	34 c2       	rjmp	.+1128   	; 0x10b96 <mp_setup_code_state+0x676>
   1072e:	3f 81       	ldd	r19, Y+7	; 0x07
   10730:	33 fd       	sbrc	r19, 3
   10732:	49 c2       	rjmp	.+1170   	; 0x10bc6 <mp_setup_code_state+0x6a6>
   10734:	8d 81       	ldd	r24, Y+5	; 0x05
   10736:	9e 81       	ldd	r25, Y+6	; 0x06
   10738:	86 19       	sub	r24, r6
   1073a:	97 09       	sbc	r25, r7
   1073c:	08 17       	cp	r16, r24
   1073e:	19 07       	cpc	r17, r25
   10740:	40 f1       	brcs	.+80     	; 0x10792 <mp_setup_code_state+0x272>
   10742:	8d 81       	ldd	r24, Y+5	; 0x05
   10744:	9e 81       	ldd	r25, Y+6	; 0x06
   10746:	08 17       	cp	r16, r24
   10748:	19 07       	cpc	r17, r25
   1074a:	08 f0       	brcs	.+2      	; 0x1074e <mp_setup_code_state+0x22e>
   1074c:	37 c2       	rjmp	.+1134   	; 0x10bbc <mp_setup_code_state+0x69c>
   1074e:	d8 01       	movw	r26, r16
   10750:	14 96       	adiw	r26, 0x04	; 4
   10752:	a6 0d       	add	r26, r6
   10754:	b7 1d       	adc	r27, r7
   10756:	a8 1b       	sub	r26, r24
   10758:	b9 0b       	sbc	r27, r25
   1075a:	aa 0f       	add	r26, r26
   1075c:	bb 1f       	adc	r27, r27
   1075e:	ed 85       	ldd	r30, Y+13	; 0x0d
   10760:	fe 85       	ldd	r31, Y+14	; 0x0e
   10762:	ae 0f       	add	r26, r30
   10764:	bf 1f       	adc	r27, r31
   10766:	eb 85       	ldd	r30, Y+11	; 0x0b
   10768:	fc 85       	ldd	r31, Y+12	; 0x0c
   1076a:	35 96       	adiw	r30, 0x05	; 5
   1076c:	e0 1b       	sub	r30, r16
   1076e:	f1 0b       	sbc	r31, r17
   10770:	ee 0f       	add	r30, r30
   10772:	ff 1f       	adc	r31, r31
   10774:	32 96       	adiw	r30, 0x02	; 2
   10776:	e4 0d       	add	r30, r4
   10778:	f5 1d       	adc	r31, r5
   1077a:	c8 01       	movw	r24, r16
   1077c:	4d 81       	ldd	r20, Y+5	; 0x05
   1077e:	5e 81       	ldd	r21, Y+6	; 0x06
   10780:	2d 91       	ld	r18, X+
   10782:	3d 91       	ld	r19, X+
   10784:	32 93       	st	-Z, r19
   10786:	22 93       	st	-Z, r18
   10788:	01 96       	adiw	r24, 0x01	; 1
   1078a:	84 17       	cp	r24, r20
   1078c:	95 07       	cpc	r25, r21
   1078e:	c1 f7       	brne	.-16     	; 0x10780 <mp_setup_code_state+0x260>
   10790:	15 c2       	rjmp	.+1066   	; 0x10bbc <mp_setup_code_state+0x69c>
   10792:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <mp_arg_error_terse_mismatch>
   10796:	4d 81       	ldd	r20, Y+5	; 0x05
   10798:	5e 81       	ldd	r21, Y+6	; 0x06
   1079a:	05 c0       	rjmp	.+10     	; 0x107a6 <mp_setup_code_state+0x286>
   1079c:	a8 01       	movw	r20, r16
   1079e:	03 c0       	rjmp	.+6      	; 0x107a6 <mp_setup_code_state+0x286>
   107a0:	a8 01       	movw	r20, r16
   107a2:	01 c0       	rjmp	.+2      	; 0x107a6 <mp_setup_code_state+0x286>
   107a4:	a8 01       	movw	r20, r16
   107a6:	a9 81       	ldd	r26, Y+1	; 0x01
   107a8:	ba 81       	ldd	r27, Y+2	; 0x02
   107aa:	f7 01       	movw	r30, r14
   107ac:	3c 96       	adiw	r30, 0x0c	; 12
   107ae:	e4 0d       	add	r30, r4
   107b0:	f5 1d       	adc	r31, r5
   107b2:	80 e0       	ldi	r24, 0x00	; 0
   107b4:	90 e0       	ldi	r25, 0x00	; 0
   107b6:	2d 91       	ld	r18, X+
   107b8:	3d 91       	ld	r19, X+
   107ba:	32 93       	st	-Z, r19
   107bc:	22 93       	st	-Z, r18
   107be:	01 96       	adiw	r24, 0x01	; 1
   107c0:	84 17       	cp	r24, r20
   107c2:	95 07       	cpc	r25, r21
   107c4:	c0 f3       	brcs	.-16     	; 0x107b6 <mp_setup_code_state+0x296>
   107c6:	a1 14       	cp	r10, r1
   107c8:	b1 04       	cpc	r11, r1
   107ca:	09 f0       	breq	.+2      	; 0x107ce <mp_setup_code_state+0x2ae>
   107cc:	cb c1       	rjmp	.+918    	; 0x10b64 <mp_setup_code_state+0x644>
   107ce:	3f 81       	ldd	r19, Y+7	; 0x07
   107d0:	33 ff       	sbrs	r19, 3
   107d2:	3e c1       	rjmp	.+636    	; 0x10a50 <mp_setup_code_state+0x530>
   107d4:	d7 c1       	rjmp	.+942    	; 0x10b84 <mp_setup_code_state+0x664>
   107d6:	c5 01       	movw	r24, r10
   107d8:	0e 94 28 4a 	call	0x9450	; 0x9450 <mp_obj_new_dict>
   107dc:	9c 83       	std	Y+4, r25	; 0x04
   107de:	8b 83       	std	Y+3, r24	; 0x03
   107e0:	ab 89       	ldd	r26, Y+19	; 0x13
   107e2:	bc 89       	ldd	r27, Y+20	; 0x14
   107e4:	8d 93       	st	X+, r24
   107e6:	9c 93       	st	X, r25
   107e8:	ed 85       	ldd	r30, Y+13	; 0x0d
   107ea:	fe 85       	ldd	r31, Y+14	; 0x0e
   107ec:	e6 80       	ldd	r14, Z+6	; 0x06
   107ee:	f7 80       	ldd	r15, Z+7	; 0x07
   107f0:	a1 14       	cp	r10, r1
   107f2:	b1 04       	cpc	r11, r1
   107f4:	09 f4       	brne	.+2      	; 0x107f8 <mp_setup_code_state+0x2d8>
   107f6:	71 c0       	rjmp	.+226    	; 0x108da <mp_setup_code_state+0x3ba>
   107f8:	00 0f       	add	r16, r16
   107fa:	11 1f       	adc	r17, r17
   107fc:	29 81       	ldd	r18, Y+1	; 0x01
   107fe:	3a 81       	ldd	r19, Y+2	; 0x02
   10800:	02 0f       	add	r16, r18
   10802:	13 1f       	adc	r17, r19
   10804:	c1 2c       	mov	r12, r1
   10806:	d1 2c       	mov	r13, r1
   10808:	8d 81       	ldd	r24, Y+5	; 0x05
   1080a:	9e 81       	ldd	r25, Y+6	; 0x06
   1080c:	82 0d       	add	r24, r2
   1080e:	93 1d       	adc	r25, r3
   10810:	ab 85       	ldd	r26, Y+11	; 0x0b
   10812:	bc 85       	ldd	r27, Y+12	; 0x0c
   10814:	11 97       	sbiw	r26, 0x01	; 1
   10816:	ba 83       	std	Y+2, r27	; 0x02
   10818:	a9 83       	std	Y+1, r26	; 0x01
   1081a:	9c 8b       	std	Y+20, r25	; 0x14
   1081c:	8b 8b       	std	Y+19, r24	; 0x13
   1081e:	d8 01       	movw	r26, r16
   10820:	6d 91       	ld	r22, X+
   10822:	7c 91       	ld	r23, X
   10824:	11 97       	sbiw	r26, 0x01	; 1
   10826:	eb 89       	ldd	r30, Y+19	; 0x13
   10828:	fc 89       	ldd	r31, Y+20	; 0x14
   1082a:	ef 2b       	or	r30, r31
   1082c:	f1 f1       	breq	.+124    	; 0x108aa <mp_setup_code_state+0x38a>
   1082e:	f7 01       	movw	r30, r14
   10830:	80 81       	ld	r24, Z
   10832:	91 81       	ldd	r25, Z+1	; 0x01
   10834:	68 17       	cp	r22, r24
   10836:	79 07       	cpc	r23, r25
   10838:	71 f5       	brne	.+92     	; 0x10896 <mp_setup_code_state+0x376>
   1083a:	06 c0       	rjmp	.+12     	; 0x10848 <mp_setup_code_state+0x328>
   1083c:	21 91       	ld	r18, Z+
   1083e:	31 91       	ld	r19, Z+
   10840:	62 17       	cp	r22, r18
   10842:	73 07       	cpc	r23, r19
   10844:	61 f5       	brne	.+88     	; 0x1089e <mp_setup_code_state+0x37e>
   10846:	02 c0       	rjmp	.+4      	; 0x1084c <mp_setup_code_state+0x32c>
   10848:	80 e0       	ldi	r24, 0x00	; 0
   1084a:	90 e0       	ldi	r25, 0x00	; 0
   1084c:	e9 81       	ldd	r30, Y+1	; 0x01
   1084e:	fa 81       	ldd	r31, Y+2	; 0x02
   10850:	e8 1b       	sub	r30, r24
   10852:	f9 0b       	sbc	r31, r25
   10854:	ee 0f       	add	r30, r30
   10856:	ff 1f       	adc	r31, r31
   10858:	e4 0d       	add	r30, r4
   1085a:	f5 1d       	adc	r31, r5
   1085c:	84 85       	ldd	r24, Z+12	; 0x0c
   1085e:	95 85       	ldd	r25, Z+13	; 0x0d
   10860:	89 2b       	or	r24, r25
   10862:	91 f0       	breq	.+36     	; 0x10888 <mp_setup_code_state+0x368>
   10864:	76 95       	lsr	r23
   10866:	67 95       	ror	r22
   10868:	76 95       	lsr	r23
   1086a:	67 95       	ror	r22
   1086c:	76 95       	lsr	r23
   1086e:	67 95       	ror	r22
   10870:	7f 93       	push	r23
   10872:	6f 93       	push	r22
   10874:	8c e9       	ldi	r24, 0x9C	; 156
   10876:	9a e0       	ldi	r25, 0x0A	; 10
   10878:	9f 93       	push	r25
   1087a:	8f 93       	push	r24
   1087c:	88 e7       	ldi	r24, 0x78	; 120
   1087e:	9f e1       	ldi	r25, 0x1F	; 31
   10880:	9f 93       	push	r25
   10882:	8f 93       	push	r24
   10884:	0e 94 9d 31 	call	0x633a	; 0x633a <mp_raise_msg_varg>
   10888:	12 96       	adiw	r26, 0x02	; 2
   1088a:	8d 91       	ld	r24, X+
   1088c:	9c 91       	ld	r25, X
   1088e:	13 97       	sbiw	r26, 0x03	; 3
   10890:	95 87       	std	Z+13, r25	; 0x0d
   10892:	84 87       	std	Z+12, r24	; 0x0c
   10894:	19 c0       	rjmp	.+50     	; 0x108c8 <mp_setup_code_state+0x3a8>
   10896:	f7 01       	movw	r30, r14
   10898:	32 96       	adiw	r30, 0x02	; 2
   1089a:	80 e0       	ldi	r24, 0x00	; 0
   1089c:	90 e0       	ldi	r25, 0x00	; 0
   1089e:	01 96       	adiw	r24, 0x01	; 1
   108a0:	2b 89       	ldd	r18, Y+19	; 0x13
   108a2:	3c 89       	ldd	r19, Y+20	; 0x14
   108a4:	82 17       	cp	r24, r18
   108a6:	93 07       	cpc	r25, r19
   108a8:	49 f6       	brne	.-110    	; 0x1083c <mp_setup_code_state+0x31c>
   108aa:	81 14       	cp	r8, r1
   108ac:	91 04       	cpc	r9, r1
   108ae:	21 f4       	brne	.+8      	; 0x108b8 <mp_setup_code_state+0x398>
   108b0:	8b ec       	ldi	r24, 0xCB	; 203
   108b2:	9a e0       	ldi	r25, 0x0A	; 10
   108b4:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   108b8:	12 96       	adiw	r26, 0x02	; 2
   108ba:	4d 91       	ld	r20, X+
   108bc:	5c 91       	ld	r21, X
   108be:	13 97       	sbiw	r26, 0x03	; 3
   108c0:	8b 81       	ldd	r24, Y+3	; 0x03
   108c2:	9c 81       	ldd	r25, Y+4	; 0x04
   108c4:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
   108c8:	3f ef       	ldi	r19, 0xFF	; 255
   108ca:	c3 1a       	sub	r12, r19
   108cc:	d3 0a       	sbc	r13, r19
   108ce:	0c 5f       	subi	r16, 0xFC	; 252
   108d0:	1f 4f       	sbci	r17, 0xFF	; 255
   108d2:	ca 14       	cp	r12, r10
   108d4:	db 04       	cpc	r13, r11
   108d6:	08 f4       	brcc	.+2      	; 0x108da <mp_setup_code_state+0x3ba>
   108d8:	a2 cf       	rjmp	.-188    	; 0x1081e <mp_setup_code_state+0x2fe>
   108da:	8f 85       	ldd	r24, Y+15	; 0x0f
   108dc:	98 89       	ldd	r25, Y+16	; 0x10
   108de:	06 96       	adiw	r24, 0x06	; 6
   108e0:	88 0f       	add	r24, r24
   108e2:	99 1f       	adc	r25, r25
   108e4:	84 0d       	add	r24, r4
   108e6:	95 1d       	adc	r25, r5
   108e8:	d3 01       	movw	r26, r6
   108ea:	13 96       	adiw	r26, 0x03	; 3
   108ec:	aa 0f       	add	r26, r26
   108ee:	bb 1f       	adc	r27, r27
   108f0:	ed 85       	ldd	r30, Y+13	; 0x0d
   108f2:	fe 85       	ldd	r31, Y+14	; 0x0e
   108f4:	ae 0f       	add	r26, r30
   108f6:	bf 1f       	adc	r27, r31
   108f8:	61 14       	cp	r6, r1
   108fa:	71 04       	cpc	r7, r1
   108fc:	89 f1       	breq	.+98     	; 0x10960 <mp_setup_code_state+0x440>
   108fe:	93 01       	movw	r18, r6
   10900:	fc 01       	movw	r30, r24
   10902:	40 81       	ld	r20, Z
   10904:	51 81       	ldd	r21, Z+1	; 0x01
   10906:	45 2b       	or	r20, r21
   10908:	29 f4       	brne	.+10     	; 0x10914 <mp_setup_code_state+0x3f4>
   1090a:	4d 91       	ld	r20, X+
   1090c:	5c 91       	ld	r21, X
   1090e:	11 97       	sbiw	r26, 0x01	; 1
   10910:	51 83       	std	Z+1, r21	; 0x01
   10912:	40 83       	st	Z, r20
   10914:	21 50       	subi	r18, 0x01	; 1
   10916:	31 09       	sbc	r19, r1
   10918:	32 96       	adiw	r30, 0x02	; 2
   1091a:	12 97       	sbiw	r26, 0x02	; 2
   1091c:	21 15       	cp	r18, r1
   1091e:	31 05       	cpc	r19, r1
   10920:	81 f7       	brne	.-32     	; 0x10902 <mp_setup_code_state+0x3e2>
   10922:	93 01       	movw	r18, r6
   10924:	22 0f       	add	r18, r18
   10926:	33 1f       	adc	r19, r19
   10928:	82 0f       	add	r24, r18
   1092a:	93 1f       	adc	r25, r19
   1092c:	19 c0       	rjmp	.+50     	; 0x10960 <mp_setup_code_state+0x440>
   1092e:	02 96       	adiw	r24, 0x02	; 2
   10930:	fc 01       	movw	r30, r24
   10932:	32 97       	sbiw	r30, 0x02	; 2
   10934:	40 81       	ld	r20, Z
   10936:	51 81       	ldd	r21, Z+1	; 0x01
   10938:	45 2b       	or	r20, r21
   1093a:	d1 f4       	brne	.+52     	; 0x10970 <mp_setup_code_state+0x450>
   1093c:	7b 01       	movw	r14, r22
   1093e:	e8 1a       	sub	r14, r24
   10940:	f9 0a       	sbc	r15, r25
   10942:	c7 01       	movw	r24, r14
   10944:	95 95       	asr	r25
   10946:	87 95       	ror	r24
   10948:	9f 93       	push	r25
   1094a:	8f 93       	push	r24
   1094c:	87 ee       	ldi	r24, 0xE7	; 231
   1094e:	9a e0       	ldi	r25, 0x0A	; 10
   10950:	9f 93       	push	r25
   10952:	8f 93       	push	r24
   10954:	88 e7       	ldi	r24, 0x78	; 120
   10956:	9f e1       	ldi	r25, 0x1F	; 31
   10958:	9f 93       	push	r25
   1095a:	8f 93       	push	r24
   1095c:	0e 94 9d 31 	call	0x633a	; 0x633a <mp_raise_msg_varg>
   10960:	2b 85       	ldd	r18, Y+11	; 0x0b
   10962:	3c 85       	ldd	r19, Y+12	; 0x0c
   10964:	2a 5f       	subi	r18, 0xFA	; 250
   10966:	3f 4f       	sbci	r19, 0xFF	; 255
   10968:	22 0f       	add	r18, r18
   1096a:	33 1f       	adc	r19, r19
   1096c:	24 0d       	add	r18, r4
   1096e:	35 1d       	adc	r19, r5
   10970:	b9 01       	movw	r22, r18
   10972:	82 17       	cp	r24, r18
   10974:	93 07       	cpc	r25, r19
   10976:	d8 f2       	brcs	.-74     	; 0x1092e <mp_setup_code_state+0x40e>
   10978:	21 14       	cp	r2, r1
   1097a:	31 04       	cpc	r3, r1
   1097c:	09 f4       	brne	.+2      	; 0x10980 <mp_setup_code_state+0x460>
   1097e:	79 c0       	rjmp	.+242    	; 0x10a72 <mp_setup_code_state+0x552>
   10980:	2f 85       	ldd	r18, Y+15	; 0x0f
   10982:	38 89       	ldd	r19, Y+16	; 0x10
   10984:	22 0f       	add	r18, r18
   10986:	33 1f       	adc	r19, r19
   10988:	24 5f       	subi	r18, 0xF4	; 244
   1098a:	3f 4f       	sbci	r19, 0xFF	; 255
   1098c:	24 0d       	add	r18, r4
   1098e:	35 1d       	adc	r19, r5
   10990:	3a 83       	std	Y+2, r19	; 0x02
   10992:	29 83       	std	Y+1, r18	; 0x01
   10994:	8d 80       	ldd	r8, Y+5	; 0x05
   10996:	9e 80       	ldd	r9, Y+6	; 0x06
   10998:	88 0c       	add	r8, r8
   1099a:	99 1c       	adc	r9, r9
   1099c:	8e 0c       	add	r8, r14
   1099e:	9f 1c       	adc	r9, r15
   109a0:	00 e0       	ldi	r16, 0x00	; 0
   109a2:	10 e0       	ldi	r17, 0x00	; 0
   109a4:	af 80       	ldd	r10, Y+7	; 0x07
   109a6:	b8 84       	ldd	r11, Y+8	; 0x08
   109a8:	38 e0       	ldi	r19, 0x08	; 8
   109aa:	a3 22       	and	r10, r19
   109ac:	bb 24       	eor	r11, r11
   109ae:	84 e0       	ldi	r24, 0x04	; 4
   109b0:	68 0e       	add	r6, r24
   109b2:	71 1c       	adc	r7, r1
   109b4:	66 0c       	add	r6, r6
   109b6:	77 1c       	adc	r7, r7
   109b8:	ad 85       	ldd	r26, Y+13	; 0x0d
   109ba:	be 85       	ldd	r27, Y+14	; 0x0e
   109bc:	6a 0e       	add	r6, r26
   109be:	7b 1e       	adc	r7, r27
   109c0:	29 81       	ldd	r18, Y+1	; 0x01
   109c2:	3a 81       	ldd	r19, Y+2	; 0x02
   109c4:	22 50       	subi	r18, 0x02	; 2
   109c6:	31 09       	sbc	r19, r1
   109c8:	3a 83       	std	Y+2, r19	; 0x02
   109ca:	29 83       	std	Y+1, r18	; 0x01
   109cc:	69 01       	movw	r12, r18
   109ce:	d9 01       	movw	r26, r18
   109d0:	8d 91       	ld	r24, X+
   109d2:	9c 91       	ld	r25, X
   109d4:	89 2b       	or	r24, r25
   109d6:	91 f5       	brne	.+100    	; 0x10a3c <mp_setup_code_state+0x51c>
   109d8:	a1 14       	cp	r10, r1
   109da:	b1 04       	cpc	r11, r1
   109dc:	99 f0       	breq	.+38     	; 0x10a04 <mp_setup_code_state+0x4e4>
   109de:	f4 01       	movw	r30, r8
   109e0:	60 81       	ld	r22, Z
   109e2:	71 81       	ldd	r23, Z+1	; 0x01
   109e4:	d3 01       	movw	r26, r6
   109e6:	8d 91       	ld	r24, X+
   109e8:	9c 91       	ld	r25, X
   109ea:	40 e0       	ldi	r20, 0x00	; 0
   109ec:	02 96       	adiw	r24, 0x02	; 2
   109ee:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   109f2:	00 97       	sbiw	r24, 0x00	; 0
   109f4:	39 f0       	breq	.+14     	; 0x10a04 <mp_setup_code_state+0x4e4>
   109f6:	fc 01       	movw	r30, r24
   109f8:	82 81       	ldd	r24, Z+2	; 0x02
   109fa:	93 81       	ldd	r25, Z+3	; 0x03
   109fc:	d6 01       	movw	r26, r12
   109fe:	8d 93       	st	X+, r24
   10a00:	9c 93       	st	X, r25
   10a02:	1c c0       	rjmp	.+56     	; 0x10a3c <mp_setup_code_state+0x51c>
   10a04:	ed 81       	ldd	r30, Y+5	; 0x05
   10a06:	fe 81       	ldd	r31, Y+6	; 0x06
   10a08:	e0 0f       	add	r30, r16
   10a0a:	f1 1f       	adc	r31, r17
   10a0c:	ee 0f       	add	r30, r30
   10a0e:	ff 1f       	adc	r31, r31
   10a10:	ee 0d       	add	r30, r14
   10a12:	ff 1d       	adc	r31, r15
   10a14:	80 81       	ld	r24, Z
   10a16:	91 81       	ldd	r25, Z+1	; 0x01
   10a18:	96 95       	lsr	r25
   10a1a:	87 95       	ror	r24
   10a1c:	96 95       	lsr	r25
   10a1e:	87 95       	ror	r24
   10a20:	96 95       	lsr	r25
   10a22:	87 95       	ror	r24
   10a24:	9f 93       	push	r25
   10a26:	8f 93       	push	r24
   10a28:	89 e1       	ldi	r24, 0x19	; 25
   10a2a:	9b e0       	ldi	r25, 0x0B	; 11
   10a2c:	9f 93       	push	r25
   10a2e:	8f 93       	push	r24
   10a30:	88 e7       	ldi	r24, 0x78	; 120
   10a32:	9f e1       	ldi	r25, 0x1F	; 31
   10a34:	9f 93       	push	r25
   10a36:	8f 93       	push	r24
   10a38:	0e 94 9d 31 	call	0x633a	; 0x633a <mp_raise_msg_varg>
   10a3c:	0f 5f       	subi	r16, 0xFF	; 255
   10a3e:	1f 4f       	sbci	r17, 0xFF	; 255
   10a40:	b2 e0       	ldi	r27, 0x02	; 2
   10a42:	8b 0e       	add	r8, r27
   10a44:	91 1c       	adc	r9, r1
   10a46:	02 15       	cp	r16, r2
   10a48:	13 05       	cpc	r17, r3
   10a4a:	09 f0       	breq	.+2      	; 0x10a4e <mp_setup_code_state+0x52e>
   10a4c:	b9 cf       	rjmp	.-142    	; 0x109c0 <mp_setup_code_state+0x4a0>
   10a4e:	11 c0       	rjmp	.+34     	; 0x10a72 <mp_setup_code_state+0x552>
   10a50:	23 28       	or	r2, r3
   10a52:	21 f0       	breq	.+8      	; 0x10a5c <mp_setup_code_state+0x53c>
   10a54:	89 e4       	ldi	r24, 0x49	; 73
   10a56:	9b e0       	ldi	r25, 0x0B	; 11
   10a58:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   10a5c:	ef 81       	ldd	r30, Y+7	; 0x07
   10a5e:	e1 ff       	sbrs	r30, 1
   10a60:	08 c0       	rjmp	.+16     	; 0x10a72 <mp_setup_code_state+0x552>
   10a62:	80 e0       	ldi	r24, 0x00	; 0
   10a64:	90 e0       	ldi	r25, 0x00	; 0
   10a66:	0e 94 28 4a 	call	0x9450	; 0x9450 <mp_obj_new_dict>
   10a6a:	ab 89       	ldd	r26, Y+19	; 0x13
   10a6c:	bc 89       	ldd	r27, Y+20	; 0x14
   10a6e:	8d 93       	st	X+, r24
   10a70:	9c 93       	st	X, r25
   10a72:	d2 01       	movw	r26, r4
   10a74:	12 96       	adiw	r26, 0x02	; 2
   10a76:	ed 91       	ld	r30, X+
   10a78:	fc 91       	ld	r31, X
   10a7a:	13 97       	sbiw	r26, 0x03	; 3
   10a7c:	9f 01       	movw	r18, r30
   10a7e:	2f 5f       	subi	r18, 0xFF	; 255
   10a80:	3f 4f       	sbci	r19, 0xFF	; 255
   10a82:	80 81       	ld	r24, Z
   10a84:	b8 2f       	mov	r27, r24
   10a86:	b1 70       	andi	r27, 0x01	; 1
   10a88:	b9 87       	std	Y+9, r27	; 0x09
   10a8a:	1a 86       	std	Y+10, r1	; 0x0a
   10a8c:	08 2f       	mov	r16, r24
   10a8e:	0e 77       	andi	r16, 0x7E	; 126
   10a90:	10 e0       	ldi	r17, 0x00	; 0
   10a92:	15 95       	asr	r17
   10a94:	07 95       	ror	r16
   10a96:	88 23       	and	r24, r24
   10a98:	64 f5       	brge	.+88     	; 0x10af2 <mp_setup_code_state+0x5d2>
   10a9a:	66 e0       	ldi	r22, 0x06	; 6
   10a9c:	70 e0       	ldi	r23, 0x00	; 0
   10a9e:	40 e0       	ldi	r20, 0x00	; 0
   10aa0:	50 e0       	ldi	r21, 0x00	; 0
   10aa2:	4f 5f       	subi	r20, 0xFF	; 255
   10aa4:	5f 4f       	sbci	r21, 0xFF	; 255
   10aa6:	2f 5f       	subi	r18, 0xFF	; 255
   10aa8:	3f 4f       	sbci	r19, 0xFF	; 255
   10aaa:	f9 01       	movw	r30, r18
   10aac:	31 97       	sbiw	r30, 0x01	; 1
   10aae:	e0 81       	ld	r30, Z
   10ab0:	ae 2f       	mov	r26, r30
   10ab2:	a1 70       	andi	r26, 0x01	; 1
   10ab4:	b0 e0       	ldi	r27, 0x00	; 0
   10ab6:	cd 01       	movw	r24, r26
   10ab8:	04 2e       	mov	r0, r20
   10aba:	02 c0       	rjmp	.+4      	; 0x10ac0 <mp_setup_code_state+0x5a0>
   10abc:	88 0f       	add	r24, r24
   10abe:	99 1f       	adc	r25, r25
   10ac0:	0a 94       	dec	r0
   10ac2:	e2 f7       	brpl	.-8      	; 0x10abc <mp_setup_code_state+0x59c>
   10ac4:	e9 84       	ldd	r14, Y+9	; 0x09
   10ac6:	fa 84       	ldd	r15, Y+10	; 0x0a
   10ac8:	e8 2a       	or	r14, r24
   10aca:	f9 2a       	or	r15, r25
   10acc:	fa 86       	std	Y+10, r15	; 0x0a
   10ace:	e9 86       	std	Y+9, r14	; 0x09
   10ad0:	8e 2f       	mov	r24, r30
   10ad2:	8e 77       	andi	r24, 0x7E	; 126
   10ad4:	90 e0       	ldi	r25, 0x00	; 0
   10ad6:	95 95       	asr	r25
   10ad8:	87 95       	ror	r24
   10ada:	06 2e       	mov	r0, r22
   10adc:	02 c0       	rjmp	.+4      	; 0x10ae2 <mp_setup_code_state+0x5c2>
   10ade:	88 0f       	add	r24, r24
   10ae0:	99 1f       	adc	r25, r25
   10ae2:	0a 94       	dec	r0
   10ae4:	e2 f7       	brpl	.-8      	; 0x10ade <mp_setup_code_state+0x5be>
   10ae6:	08 2b       	or	r16, r24
   10ae8:	19 2b       	or	r17, r25
   10aea:	6a 5f       	subi	r22, 0xFA	; 250
   10aec:	7f 4f       	sbci	r23, 0xFF	; 255
   10aee:	ee 23       	and	r30, r30
   10af0:	c4 f2       	brlt	.-80     	; 0x10aa2 <mp_setup_code_state+0x582>
   10af2:	02 0f       	add	r16, r18
   10af4:	13 1f       	adc	r17, r19
   10af6:	e9 84       	ldd	r14, Y+9	; 0x09
   10af8:	fa 84       	ldd	r15, Y+10	; 0x0a
   10afa:	ef 28       	or	r14, r15
   10afc:	31 f1       	breq	.+76     	; 0x10b4a <mp_setup_code_state+0x62a>
   10afe:	78 01       	movw	r14, r16
   10b00:	a9 84       	ldd	r10, Y+9	; 0x09
   10b02:	ba 84       	ldd	r11, Y+10	; 0x0a
   10b04:	cb 84       	ldd	r12, Y+11	; 0x0b
   10b06:	dc 84       	ldd	r13, Y+12	; 0x0c
   10b08:	21 e0       	ldi	r18, 0x01	; 1
   10b0a:	c2 1a       	sub	r12, r18
   10b0c:	d1 08       	sbc	r13, r1
   10b0e:	d7 01       	movw	r26, r14
   10b10:	8d 91       	ld	r24, X+
   10b12:	7d 01       	movw	r14, r26
   10b14:	f6 01       	movw	r30, r12
   10b16:	e8 1b       	sub	r30, r24
   10b18:	f1 09       	sbc	r31, r1
   10b1a:	ee 0f       	add	r30, r30
   10b1c:	ff 1f       	adc	r31, r31
   10b1e:	e4 0d       	add	r30, r4
   10b20:	f5 1d       	adc	r31, r5
   10b22:	fa 83       	std	Y+2, r31	; 0x02
   10b24:	e9 83       	std	Y+1, r30	; 0x01
   10b26:	84 85       	ldd	r24, Z+12	; 0x0c
   10b28:	95 85       	ldd	r25, Z+13	; 0x0d
   10b2a:	0e 94 ae 32 	call	0x655c	; 0x655c <mp_obj_new_cell>
   10b2e:	a9 81       	ldd	r26, Y+1	; 0x01
   10b30:	ba 81       	ldd	r27, Y+2	; 0x02
   10b32:	1d 96       	adiw	r26, 0x0d	; 13
   10b34:	9c 93       	st	X, r25
   10b36:	8e 93       	st	-X, r24
   10b38:	1c 97       	sbiw	r26, 0x0c	; 12
   10b3a:	b1 e0       	ldi	r27, 0x01	; 1
   10b3c:	ab 1a       	sub	r10, r27
   10b3e:	b1 08       	sbc	r11, r1
   10b40:	31 f7       	brne	.-52     	; 0x10b0e <mp_setup_code_state+0x5ee>
   10b42:	e9 84       	ldd	r14, Y+9	; 0x09
   10b44:	fa 84       	ldd	r15, Y+10	; 0x0a
   10b46:	0e 0d       	add	r16, r14
   10b48:	1f 1d       	adc	r17, r15
   10b4a:	d2 01       	movw	r26, r4
   10b4c:	13 96       	adiw	r26, 0x03	; 3
   10b4e:	1c 93       	st	X, r17
   10b50:	0e 93       	st	-X, r16
   10b52:	12 97       	sbiw	r26, 0x02	; 2
   10b54:	3d c0       	rjmp	.+122    	; 0x10bd0 <mp_setup_code_state+0x6b0>
   10b56:	ed 85       	ldd	r30, Y+13	; 0x0d
   10b58:	fe 85       	ldd	r31, Y+14	; 0x0e
   10b5a:	e6 80       	ldd	r14, Z+6	; 0x06
   10b5c:	f7 80       	ldd	r15, Z+7	; 0x07
   10b5e:	1c 82       	std	Y+4, r1	; 0x04
   10b60:	1b 82       	std	Y+3, r1	; 0x03
   10b62:	4a ce       	rjmp	.-876    	; 0x107f8 <mp_setup_code_state+0x2d8>
   10b64:	8f 80       	ldd	r8, Y+7	; 0x07
   10b66:	98 84       	ldd	r9, Y+8	; 0x08
   10b68:	f2 e0       	ldi	r31, 0x02	; 2
   10b6a:	8f 22       	and	r8, r31
   10b6c:	99 24       	eor	r9, r9
   10b6e:	ef 80       	ldd	r14, Y+7	; 0x07
   10b70:	e1 fe       	sbrs	r14, 1
   10b72:	f1 cf       	rjmp	.-30     	; 0x10b56 <mp_setup_code_state+0x636>
   10b74:	15 c0       	rjmp	.+42     	; 0x10ba0 <mp_setup_code_state+0x680>
   10b76:	ad 85       	ldd	r26, Y+13	; 0x0d
   10b78:	be 85       	ldd	r27, Y+14	; 0x0e
   10b7a:	16 96       	adiw	r26, 0x06	; 6
   10b7c:	ed 90       	ld	r14, X+
   10b7e:	fc 90       	ld	r15, X
   10b80:	17 97       	sbiw	r26, 0x07	; 7
   10b82:	ab ce       	rjmp	.-682    	; 0x108da <mp_setup_code_state+0x3ba>
   10b84:	8f 80       	ldd	r8, Y+7	; 0x07
   10b86:	98 84       	ldd	r9, Y+8	; 0x08
   10b88:	b2 e0       	ldi	r27, 0x02	; 2
   10b8a:	8b 22       	and	r8, r27
   10b8c:	99 24       	eor	r9, r9
   10b8e:	ef 81       	ldd	r30, Y+7	; 0x07
   10b90:	e1 fd       	sbrc	r30, 1
   10b92:	21 ce       	rjmp	.-958    	; 0x107d6 <mp_setup_code_state+0x2b6>
   10b94:	f0 cf       	rjmp	.-32     	; 0x10b76 <mp_setup_code_state+0x656>
   10b96:	01 15       	cp	r16, r1
   10b98:	11 05       	cpc	r17, r1
   10b9a:	09 f0       	breq	.+2      	; 0x10b9e <mp_setup_code_state+0x67e>
   10b9c:	ff cd       	rjmp	.-1026   	; 0x1079c <mp_setup_code_state+0x27c>
   10b9e:	e2 cf       	rjmp	.-60     	; 0x10b64 <mp_setup_code_state+0x644>
   10ba0:	c5 01       	movw	r24, r10
   10ba2:	0e 94 28 4a 	call	0x9450	; 0x9450 <mp_obj_new_dict>
   10ba6:	9c 83       	std	Y+4, r25	; 0x04
   10ba8:	8b 83       	std	Y+3, r24	; 0x03
   10baa:	ab 89       	ldd	r26, Y+19	; 0x13
   10bac:	bc 89       	ldd	r27, Y+20	; 0x14
   10bae:	8d 93       	st	X+, r24
   10bb0:	9c 93       	st	X, r25
   10bb2:	ed 85       	ldd	r30, Y+13	; 0x0d
   10bb4:	fe 85       	ldd	r31, Y+14	; 0x0e
   10bb6:	e6 80       	ldd	r14, Z+6	; 0x06
   10bb8:	f7 80       	ldd	r15, Z+7	; 0x07
   10bba:	1e ce       	rjmp	.-964    	; 0x107f8 <mp_setup_code_state+0x2d8>
   10bbc:	01 15       	cp	r16, r1
   10bbe:	11 05       	cpc	r17, r1
   10bc0:	09 f0       	breq	.+2      	; 0x10bc4 <mp_setup_code_state+0x6a4>
   10bc2:	ee cd       	rjmp	.-1060   	; 0x107a0 <mp_setup_code_state+0x280>
   10bc4:	45 cf       	rjmp	.-374    	; 0x10a50 <mp_setup_code_state+0x530>
   10bc6:	01 15       	cp	r16, r1
   10bc8:	11 05       	cpc	r17, r1
   10bca:	09 f0       	breq	.+2      	; 0x10bce <mp_setup_code_state+0x6ae>
   10bcc:	eb cd       	rjmp	.-1066   	; 0x107a4 <mp_setup_code_state+0x284>
   10bce:	da cf       	rjmp	.-76     	; 0x10b84 <mp_setup_code_state+0x664>
   10bd0:	64 96       	adiw	r28, 0x14	; 20
   10bd2:	0f b6       	in	r0, 0x3f	; 63
   10bd4:	f8 94       	cli
   10bd6:	de bf       	out	0x3e, r29	; 62
   10bd8:	0f be       	out	0x3f, r0	; 63
   10bda:	cd bf       	out	0x3d, r28	; 61
   10bdc:	df 91       	pop	r29
   10bde:	cf 91       	pop	r28
   10be0:	1f 91       	pop	r17
   10be2:	0f 91       	pop	r16
   10be4:	ff 90       	pop	r15
   10be6:	ef 90       	pop	r14
   10be8:	df 90       	pop	r13
   10bea:	cf 90       	pop	r12
   10bec:	bf 90       	pop	r11
   10bee:	af 90       	pop	r10
   10bf0:	9f 90       	pop	r9
   10bf2:	8f 90       	pop	r8
   10bf4:	7f 90       	pop	r7
   10bf6:	6f 90       	pop	r6
   10bf8:	5f 90       	pop	r5
   10bfa:	4f 90       	pop	r4
   10bfc:	3f 90       	pop	r3
   10bfe:	2f 90       	pop	r2
   10c00:	08 95       	ret

00010c02 <gen_wrap_call>:
   10c02:	8f 92       	push	r8
   10c04:	9f 92       	push	r9
   10c06:	af 92       	push	r10
   10c08:	bf 92       	push	r11
   10c0a:	cf 92       	push	r12
   10c0c:	df 92       	push	r13
   10c0e:	ef 92       	push	r14
   10c10:	ff 92       	push	r15
   10c12:	0f 93       	push	r16
   10c14:	1f 93       	push	r17
   10c16:	cf 93       	push	r28
   10c18:	df 93       	push	r29
   10c1a:	4c 01       	movw	r8, r24
   10c1c:	8b 01       	movw	r16, r22
   10c1e:	6a 01       	movw	r12, r20
   10c20:	79 01       	movw	r14, r18
   10c22:	fc 01       	movw	r30, r24
   10c24:	a4 81       	ldd	r26, Z+4	; 0x04
   10c26:	b5 81       	ldd	r27, Z+5	; 0x05
   10c28:	9d 01       	movw	r18, r26
   10c2a:	2f 5f       	subi	r18, 0xFF	; 255
   10c2c:	3f 4f       	sbci	r19, 0xFF	; 255
   10c2e:	8c 91       	ld	r24, X
   10c30:	48 2f       	mov	r20, r24
   10c32:	46 95       	lsr	r20
   10c34:	46 95       	lsr	r20
   10c36:	46 95       	lsr	r20
   10c38:	4f 70       	andi	r20, 0x0F	; 15
   10c3a:	50 e0       	ldi	r21, 0x00	; 0
   10c3c:	82 fb       	bst	r24, 2
   10c3e:	ee 27       	eor	r30, r30
   10c40:	e0 f9       	bld	r30, 0
   10c42:	f0 e0       	ldi	r31, 0x00	; 0
   10c44:	88 23       	and	r24, r24
   10c46:	fc f4       	brge	.+62     	; 0x10c86 <gen_wrap_call+0x84>
   10c48:	d9 01       	movw	r26, r18
   10c4a:	80 e0       	ldi	r24, 0x00	; 0
   10c4c:	90 e0       	ldi	r25, 0x00	; 0
   10c4e:	cd 91       	ld	r28, X+
   10c50:	2c 2f       	mov	r18, r28
   10c52:	20 73       	andi	r18, 0x30	; 48
   10c54:	30 e0       	ldi	r19, 0x00	; 0
   10c56:	bc 01       	movw	r22, r24
   10c58:	66 0f       	add	r22, r22
   10c5a:	77 1f       	adc	r23, r23
   10c5c:	02 c0       	rjmp	.+4      	; 0x10c62 <gen_wrap_call+0x60>
   10c5e:	22 0f       	add	r18, r18
   10c60:	33 1f       	adc	r19, r19
   10c62:	6a 95       	dec	r22
   10c64:	e2 f7       	brpl	.-8      	; 0x10c5e <gen_wrap_call+0x5c>
   10c66:	42 2b       	or	r20, r18
   10c68:	53 2b       	or	r21, r19
   10c6a:	2c 2f       	mov	r18, r28
   10c6c:	22 70       	andi	r18, 0x02	; 2
   10c6e:	30 e0       	ldi	r19, 0x00	; 0
   10c70:	08 2e       	mov	r0, r24
   10c72:	02 c0       	rjmp	.+4      	; 0x10c78 <gen_wrap_call+0x76>
   10c74:	22 0f       	add	r18, r18
   10c76:	33 1f       	adc	r19, r19
   10c78:	0a 94       	dec	r0
   10c7a:	e2 f7       	brpl	.-8      	; 0x10c74 <gen_wrap_call+0x72>
   10c7c:	e2 2b       	or	r30, r18
   10c7e:	f3 2b       	or	r31, r19
   10c80:	01 96       	adiw	r24, 0x01	; 1
   10c82:	cc 23       	and	r28, r28
   10c84:	24 f3       	brlt	.-56     	; 0x10c4e <gen_wrap_call+0x4c>
   10c86:	5a 01       	movw	r10, r20
   10c88:	8f ef       	ldi	r24, 0xFF	; 255
   10c8a:	a8 1a       	sub	r10, r24
   10c8c:	b8 0a       	sbc	r11, r24
   10c8e:	cf 01       	movw	r24, r30
   10c90:	88 0f       	add	r24, r24
   10c92:	99 1f       	adc	r25, r25
   10c94:	8e 0f       	add	r24, r30
   10c96:	9f 1f       	adc	r25, r31
   10c98:	8a 0d       	add	r24, r10
   10c9a:	9b 1d       	adc	r25, r11
   10c9c:	08 96       	adiw	r24, 0x08	; 8
   10c9e:	88 0f       	add	r24, r24
   10ca0:	99 1f       	adc	r25, r25
   10ca2:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   10ca6:	ec 01       	movw	r28, r24
   10ca8:	8c e2       	ldi	r24, 0x2C	; 44
   10caa:	9e e1       	ldi	r25, 0x1E	; 30
   10cac:	99 83       	std	Y+1, r25	; 0x01
   10cae:	88 83       	st	Y, r24
   10cb0:	86 e0       	ldi	r24, 0x06	; 6
   10cb2:	90 e0       	ldi	r25, 0x00	; 0
   10cb4:	9b 83       	std	Y+3, r25	; 0x03
   10cb6:	8a 83       	std	Y+2, r24	; 0x02
   10cb8:	9d 82       	std	Y+5, r9	; 0x05
   10cba:	8c 82       	std	Y+4, r8	; 0x04
   10cbc:	1f 82       	std	Y+7, r1	; 0x07
   10cbe:	1e 82       	std	Y+6, r1	; 0x06
   10cc0:	bb 86       	std	Y+11, r11	; 0x0b
   10cc2:	aa 86       	std	Y+10, r10	; 0x0a
   10cc4:	97 01       	movw	r18, r14
   10cc6:	a6 01       	movw	r20, r12
   10cc8:	b8 01       	movw	r22, r16
   10cca:	ce 01       	movw	r24, r28
   10ccc:	04 96       	adiw	r24, 0x04	; 4
   10cce:	28 dc       	rcall	.-1968   	; 0x10520 <mp_setup_code_state>
   10cd0:	ce 01       	movw	r24, r28
   10cd2:	df 91       	pop	r29
   10cd4:	cf 91       	pop	r28
   10cd6:	1f 91       	pop	r17
   10cd8:	0f 91       	pop	r16
   10cda:	ff 90       	pop	r15
   10cdc:	ef 90       	pop	r14
   10cde:	df 90       	pop	r13
   10ce0:	cf 90       	pop	r12
   10ce2:	bf 90       	pop	r11
   10ce4:	af 90       	pop	r10
   10ce6:	9f 90       	pop	r9
   10ce8:	8f 90       	pop	r8
   10cea:	08 95       	ret

00010cec <mp_load_method_protected>:
   10cec:	0f 93       	push	r16
   10cee:	1f 93       	push	r17
   10cf0:	cf 93       	push	r28
   10cf2:	df 93       	push	r29
   10cf4:	cd b7       	in	r28, 0x3d	; 61
   10cf6:	de b7       	in	r29, 0x3e	; 62
   10cf8:	a2 97       	sbiw	r28, 0x22	; 34
   10cfa:	0f b6       	in	r0, 0x3f	; 63
   10cfc:	f8 94       	cli
   10cfe:	de bf       	out	0x3e, r29	; 62
   10d00:	0f be       	out	0x3f, r0	; 63
   10d02:	cd bf       	out	0x3d, r28	; 61
   10d04:	9e 8f       	std	Y+30, r25	; 0x1e
   10d06:	8d 8f       	std	Y+29, r24	; 0x1d
   10d08:	78 a3       	std	Y+32, r23	; 0x20
   10d0a:	6f 8f       	std	Y+31, r22	; 0x1f
   10d0c:	5a a3       	std	Y+34, r21	; 0x22
   10d0e:	49 a3       	std	Y+33, r20	; 0x21
   10d10:	2c 8f       	std	Y+28, r18	; 0x1c
   10d12:	ce 01       	movw	r24, r28
   10d14:	01 96       	adiw	r24, 0x01	; 1
   10d16:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   10d1a:	ce 01       	movw	r24, r28
   10d1c:	05 96       	adiw	r24, 0x05	; 5
   10d1e:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   10d22:	89 2b       	or	r24, r25
   10d24:	59 f4       	brne	.+22     	; 0x10d3c <mp_load_method_protected+0x50>
   10d26:	49 a1       	ldd	r20, Y+33	; 0x21
   10d28:	5a a1       	ldd	r21, Y+34	; 0x22
   10d2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
   10d2c:	78 a1       	ldd	r23, Y+32	; 0x20
   10d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
   10d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
   10d32:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
   10d36:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   10d3a:	11 c0       	rjmp	.+34     	; 0x10d5e <mp_load_method_protected+0x72>
   10d3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10d3e:	81 11       	cpse	r24, r1
   10d40:	0e c0       	rjmp	.+28     	; 0x10d5e <mp_load_method_protected+0x72>
   10d42:	0b 81       	ldd	r16, Y+3	; 0x03
   10d44:	1c 81       	ldd	r17, Y+4	; 0x04
   10d46:	68 e1       	ldi	r22, 0x18	; 24
   10d48:	71 e2       	ldi	r23, 0x21	; 33
   10d4a:	f8 01       	movw	r30, r16
   10d4c:	80 81       	ld	r24, Z
   10d4e:	91 81       	ldd	r25, Z+1	; 0x01
   10d50:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   10d54:	81 11       	cpse	r24, r1
   10d56:	03 c0       	rjmp	.+6      	; 0x10d5e <mp_load_method_protected+0x72>
   10d58:	c8 01       	movw	r24, r16
   10d5a:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
   10d5e:	a2 96       	adiw	r28, 0x22	; 34
   10d60:	0f b6       	in	r0, 0x3f	; 63
   10d62:	f8 94       	cli
   10d64:	de bf       	out	0x3e, r29	; 62
   10d66:	0f be       	out	0x3f, r0	; 63
   10d68:	cd bf       	out	0x3d, r28	; 61
   10d6a:	df 91       	pop	r29
   10d6c:	cf 91       	pop	r28
   10d6e:	1f 91       	pop	r17
   10d70:	0f 91       	pop	r16
   10d72:	08 95       	ret

00010d74 <mp_builtin_getattr>:
   10d74:	ef 92       	push	r14
   10d76:	ff 92       	push	r15
   10d78:	0f 93       	push	r16
   10d7a:	1f 93       	push	r17
   10d7c:	cf 93       	push	r28
   10d7e:	df 93       	push	r29
   10d80:	00 d0       	rcall	.+0      	; 0x10d82 <mp_builtin_getattr+0xe>
   10d82:	00 d0       	rcall	.+0      	; 0x10d84 <mp_builtin_getattr+0x10>
   10d84:	cd b7       	in	r28, 0x3d	; 61
   10d86:	de b7       	in	r29, 0x3e	; 62
   10d88:	8b 01       	movw	r16, r22
   10d8a:	03 97       	sbiw	r24, 0x03	; 3
   10d8c:	40 f1       	brcs	.+80     	; 0x10dde <mp_builtin_getattr+0x6a>
   10d8e:	fb 01       	movw	r30, r22
   10d90:	e4 80       	ldd	r14, Z+4	; 0x04
   10d92:	f5 80       	ldd	r15, Z+5	; 0x05
   10d94:	82 81       	ldd	r24, Z+2	; 0x02
   10d96:	93 81       	ldd	r25, Z+3	; 0x03
   10d98:	09 db       	rcall	.-2542   	; 0x103ac <mp_obj_str_get_qstr>
   10d9a:	bc 01       	movw	r22, r24
   10d9c:	f8 01       	movw	r30, r16
   10d9e:	80 81       	ld	r24, Z
   10da0:	91 81       	ldd	r25, Z+1	; 0x01
   10da2:	e1 14       	cp	r14, r1
   10da4:	f1 04       	cpc	r15, r1
   10da6:	41 f4       	brne	.+16     	; 0x10db8 <mp_builtin_getattr+0x44>
   10da8:	ae 01       	movw	r20, r28
   10daa:	4f 5f       	subi	r20, 0xFF	; 255
   10dac:	5f 4f       	sbci	r21, 0xFF	; 255
   10dae:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
   10db2:	e1 2c       	mov	r14, r1
   10db4:	f1 2c       	mov	r15, r1
   10db6:	05 c0       	rjmp	.+10     	; 0x10dc2 <mp_builtin_getattr+0x4e>
   10db8:	20 e0       	ldi	r18, 0x00	; 0
   10dba:	ae 01       	movw	r20, r28
   10dbc:	4f 5f       	subi	r20, 0xFF	; 255
   10dbe:	5f 4f       	sbci	r21, 0xFF	; 255
   10dc0:	95 df       	rcall	.-214    	; 0x10cec <mp_load_method_protected>
   10dc2:	89 81       	ldd	r24, Y+1	; 0x01
   10dc4:	9a 81       	ldd	r25, Y+2	; 0x02
   10dc6:	00 97       	sbiw	r24, 0x00	; 0
   10dc8:	41 f0       	breq	.+16     	; 0x10dda <mp_builtin_getattr+0x66>
   10dca:	6b 81       	ldd	r22, Y+3	; 0x03
   10dcc:	7c 81       	ldd	r23, Y+4	; 0x04
   10dce:	61 15       	cp	r22, r1
   10dd0:	71 05       	cpc	r23, r1
   10dd2:	71 f0       	breq	.+28     	; 0x10df0 <mp_builtin_getattr+0x7c>
   10dd4:	0e 94 97 32 	call	0x652e	; 0x652e <mp_obj_new_bound_meth>
   10dd8:	0b c0       	rjmp	.+22     	; 0x10df0 <mp_builtin_getattr+0x7c>
   10dda:	c7 01       	movw	r24, r14
   10ddc:	09 c0       	rjmp	.+18     	; 0x10df0 <mp_builtin_getattr+0x7c>
   10dde:	fb 01       	movw	r30, r22
   10de0:	82 81       	ldd	r24, Z+2	; 0x02
   10de2:	93 81       	ldd	r25, Z+3	; 0x03
   10de4:	e3 da       	rcall	.-2618   	; 0x103ac <mp_obj_str_get_qstr>
   10de6:	bc 01       	movw	r22, r24
   10de8:	f8 01       	movw	r30, r16
   10dea:	80 81       	ld	r24, Z
   10dec:	91 81       	ldd	r25, Z+1	; 0x01
   10dee:	dc cf       	rjmp	.-72     	; 0x10da8 <mp_builtin_getattr+0x34>
   10df0:	0f 90       	pop	r0
   10df2:	0f 90       	pop	r0
   10df4:	0f 90       	pop	r0
   10df6:	0f 90       	pop	r0
   10df8:	df 91       	pop	r29
   10dfa:	cf 91       	pop	r28
   10dfc:	1f 91       	pop	r17
   10dfe:	0f 91       	pop	r16
   10e00:	ff 90       	pop	r15
   10e02:	ef 90       	pop	r14
   10e04:	08 95       	ret

00010e06 <mp_builtin_dir>:
   10e06:	af 92       	push	r10
   10e08:	bf 92       	push	r11
   10e0a:	cf 92       	push	r12
   10e0c:	df 92       	push	r13
   10e0e:	ef 92       	push	r14
   10e10:	ff 92       	push	r15
   10e12:	0f 93       	push	r16
   10e14:	1f 93       	push	r17
   10e16:	cf 93       	push	r28
   10e18:	df 93       	push	r29
   10e1a:	00 d0       	rcall	.+0      	; 0x10e1c <mp_builtin_dir+0x16>
   10e1c:	00 d0       	rcall	.+0      	; 0x10e1e <mp_builtin_dir+0x18>
   10e1e:	cd b7       	in	r28, 0x3d	; 61
   10e20:	de b7       	in	r29, 0x3e	; 62
   10e22:	8c 01       	movw	r16, r24
   10e24:	6b 01       	movw	r12, r22
   10e26:	60 e0       	ldi	r22, 0x00	; 0
   10e28:	70 e0       	ldi	r23, 0x00	; 0
   10e2a:	80 e0       	ldi	r24, 0x00	; 0
   10e2c:	90 e0       	ldi	r25, 0x00	; 0
   10e2e:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
   10e32:	5c 01       	movw	r10, r24
   10e34:	01 2b       	or	r16, r17
   10e36:	59 f5       	brne	.+86     	; 0x10e8e <mp_builtin_dir+0x88>
   10e38:	c0 90 5e 6b 	lds	r12, 0x6B5E	; 0x806b5e <mp_state_ctx+0x4>
   10e3c:	d0 90 5f 6b 	lds	r13, 0x6B5F	; 0x806b5f <mp_state_ctx+0x5>
   10e40:	d6 01       	movw	r26, r12
   10e42:	14 96       	adiw	r26, 0x04	; 4
   10e44:	8d 91       	ld	r24, X+
   10e46:	9c 91       	ld	r25, X
   10e48:	15 97       	sbiw	r26, 0x05	; 5
   10e4a:	89 2b       	or	r24, r25
   10e4c:	09 f4       	brne	.+2      	; 0x10e50 <mp_builtin_dir+0x4a>
   10e4e:	51 c0       	rjmp	.+162    	; 0x10ef2 <mp_builtin_dir+0xec>
   10e50:	e1 2c       	mov	r14, r1
   10e52:	f1 2c       	mov	r15, r1
   10e54:	00 e0       	ldi	r16, 0x00	; 0
   10e56:	10 e0       	ldi	r17, 0x00	; 0
   10e58:	d6 01       	movw	r26, r12
   10e5a:	16 96       	adiw	r26, 0x06	; 6
   10e5c:	ed 91       	ld	r30, X+
   10e5e:	fc 91       	ld	r31, X
   10e60:	17 97       	sbiw	r26, 0x07	; 7
   10e62:	ee 0d       	add	r30, r14
   10e64:	ff 1d       	adc	r31, r15
   10e66:	60 81       	ld	r22, Z
   10e68:	71 81       	ldd	r23, Z+1	; 0x01
   10e6a:	61 15       	cp	r22, r1
   10e6c:	71 05       	cpc	r23, r1
   10e6e:	19 f0       	breq	.+6      	; 0x10e76 <mp_builtin_dir+0x70>
   10e70:	64 30       	cpi	r22, 0x04	; 4
   10e72:	71 05       	cpc	r23, r1
   10e74:	d1 f5       	brne	.+116    	; 0x10eea <mp_builtin_dir+0xe4>
   10e76:	0f 5f       	subi	r16, 0xFF	; 255
   10e78:	1f 4f       	sbci	r17, 0xFF	; 255
   10e7a:	b4 e0       	ldi	r27, 0x04	; 4
   10e7c:	eb 0e       	add	r14, r27
   10e7e:	f1 1c       	adc	r15, r1
   10e80:	f6 01       	movw	r30, r12
   10e82:	84 81       	ldd	r24, Z+4	; 0x04
   10e84:	95 81       	ldd	r25, Z+5	; 0x05
   10e86:	08 17       	cp	r16, r24
   10e88:	19 07       	cpc	r17, r25
   10e8a:	30 f3       	brcs	.-52     	; 0x10e58 <mp_builtin_dir+0x52>
   10e8c:	32 c0       	rjmp	.+100    	; 0x10ef2 <mp_builtin_dir+0xec>
   10e8e:	e0 91 68 6b 	lds	r30, 0x6B68	; 0x806b68 <mp_state_ctx+0xe>
   10e92:	f0 91 69 6b 	lds	r31, 0x6B69	; 0x806b69 <mp_state_ctx+0xf>
   10e96:	e2 80       	ldd	r14, Z+2	; 0x02
   10e98:	f3 80       	ldd	r15, Z+3	; 0x03
   10e9a:	86 81       	ldd	r24, Z+6	; 0x06
   10e9c:	97 81       	ldd	r25, Z+7	; 0x07
   10e9e:	e8 0e       	add	r14, r24
   10ea0:	f9 1e       	adc	r15, r25
   10ea2:	f3 e0       	ldi	r31, 0x03	; 3
   10ea4:	ef 16       	cp	r14, r31
   10ea6:	f1 04       	cpc	r15, r1
   10ea8:	20 f1       	brcs	.+72     	; 0x10ef2 <mp_builtin_dir+0xec>
   10eaa:	02 e0       	ldi	r16, 0x02	; 2
   10eac:	10 e0       	ldi	r17, 0x00	; 0
   10eae:	20 e0       	ldi	r18, 0x00	; 0
   10eb0:	ae 01       	movw	r20, r28
   10eb2:	4f 5f       	subi	r20, 0xFF	; 255
   10eb4:	5f 4f       	sbci	r21, 0xFF	; 255
   10eb6:	b8 01       	movw	r22, r16
   10eb8:	d6 01       	movw	r26, r12
   10eba:	8d 91       	ld	r24, X+
   10ebc:	9c 91       	ld	r25, X
   10ebe:	16 df       	rcall	.-468    	; 0x10cec <mp_load_method_protected>
   10ec0:	89 81       	ldd	r24, Y+1	; 0x01
   10ec2:	9a 81       	ldd	r25, Y+2	; 0x02
   10ec4:	89 2b       	or	r24, r25
   10ec6:	59 f0       	breq	.+22     	; 0x10ede <mp_builtin_dir+0xd8>
   10ec8:	b8 01       	movw	r22, r16
   10eca:	66 0f       	add	r22, r22
   10ecc:	77 1f       	adc	r23, r23
   10ece:	66 0f       	add	r22, r22
   10ed0:	77 1f       	adc	r23, r23
   10ed2:	66 0f       	add	r22, r22
   10ed4:	77 1f       	adc	r23, r23
   10ed6:	62 60       	ori	r22, 0x02	; 2
   10ed8:	c5 01       	movw	r24, r10
   10eda:	0e 94 d3 72 	call	0xe5a6	; 0xe5a6 <mp_obj_list_append>
   10ede:	0f 5f       	subi	r16, 0xFF	; 255
   10ee0:	1f 4f       	sbci	r17, 0xFF	; 255
   10ee2:	e0 16       	cp	r14, r16
   10ee4:	f1 06       	cpc	r15, r17
   10ee6:	19 f7       	brne	.-58     	; 0x10eae <mp_builtin_dir+0xa8>
   10ee8:	04 c0       	rjmp	.+8      	; 0x10ef2 <mp_builtin_dir+0xec>
   10eea:	c5 01       	movw	r24, r10
   10eec:	0e 94 d3 72 	call	0xe5a6	; 0xe5a6 <mp_obj_list_append>
   10ef0:	c2 cf       	rjmp	.-124    	; 0x10e76 <mp_builtin_dir+0x70>
   10ef2:	c5 01       	movw	r24, r10
   10ef4:	0f 90       	pop	r0
   10ef6:	0f 90       	pop	r0
   10ef8:	0f 90       	pop	r0
   10efa:	0f 90       	pop	r0
   10efc:	df 91       	pop	r29
   10efe:	cf 91       	pop	r28
   10f00:	1f 91       	pop	r17
   10f02:	0f 91       	pop	r16
   10f04:	ff 90       	pop	r15
   10f06:	ef 90       	pop	r14
   10f08:	df 90       	pop	r13
   10f0a:	cf 90       	pop	r12
   10f0c:	bf 90       	pop	r11
   10f0e:	af 90       	pop	r10
   10f10:	08 95       	ret

00010f12 <mp_builtin_hasattr>:
   10f12:	0f 93       	push	r16
   10f14:	1f 93       	push	r17
   10f16:	cf 93       	push	r28
   10f18:	df 93       	push	r29
   10f1a:	00 d0       	rcall	.+0      	; 0x10f1c <mp_builtin_hasattr+0xa>
   10f1c:	00 d0       	rcall	.+0      	; 0x10f1e <mp_builtin_hasattr+0xc>
   10f1e:	cd b7       	in	r28, 0x3d	; 61
   10f20:	de b7       	in	r29, 0x3e	; 62
   10f22:	8c 01       	movw	r16, r24
   10f24:	cb 01       	movw	r24, r22
   10f26:	42 da       	rcall	.-2940   	; 0x103ac <mp_obj_str_get_qstr>
   10f28:	20 e0       	ldi	r18, 0x00	; 0
   10f2a:	ae 01       	movw	r20, r28
   10f2c:	4f 5f       	subi	r20, 0xFF	; 255
   10f2e:	5f 4f       	sbci	r21, 0xFF	; 255
   10f30:	bc 01       	movw	r22, r24
   10f32:	c8 01       	movw	r24, r16
   10f34:	db de       	rcall	.-586    	; 0x10cec <mp_load_method_protected>
   10f36:	89 81       	ldd	r24, Y+1	; 0x01
   10f38:	9a 81       	ldd	r25, Y+2	; 0x02
   10f3a:	89 2b       	or	r24, r25
   10f3c:	19 f4       	brne	.+6      	; 0x10f44 <mp_builtin_hasattr+0x32>
   10f3e:	8e e0       	ldi	r24, 0x0E	; 14
   10f40:	90 e0       	ldi	r25, 0x00	; 0
   10f42:	02 c0       	rjmp	.+4      	; 0x10f48 <mp_builtin_hasattr+0x36>
   10f44:	8e e1       	ldi	r24, 0x1E	; 30
   10f46:	90 e0       	ldi	r25, 0x00	; 0
   10f48:	0f 90       	pop	r0
   10f4a:	0f 90       	pop	r0
   10f4c:	0f 90       	pop	r0
   10f4e:	0f 90       	pop	r0
   10f50:	df 91       	pop	r29
   10f52:	cf 91       	pop	r28
   10f54:	1f 91       	pop	r17
   10f56:	0f 91       	pop	r16
   10f58:	08 95       	ret

00010f5a <mp_iternext>:
   10f5a:	0f 93       	push	r16
   10f5c:	1f 93       	push	r17
   10f5e:	cf 93       	push	r28
   10f60:	df 93       	push	r29
   10f62:	cd b7       	in	r28, 0x3d	; 61
   10f64:	de b7       	in	r29, 0x3e	; 62
   10f66:	6f 97       	sbiw	r28, 0x1f	; 31
   10f68:	0f b6       	in	r0, 0x3f	; 63
   10f6a:	f8 94       	cli
   10f6c:	de bf       	out	0x3e, r29	; 62
   10f6e:	0f be       	out	0x3f, r0	; 63
   10f70:	cd bf       	out	0x3d, r28	; 61
   10f72:	8c 01       	movw	r16, r24
   10f74:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   10f78:	dc 01       	movw	r26, r24
   10f7a:	56 96       	adiw	r26, 0x16	; 22
   10f7c:	ed 91       	ld	r30, X+
   10f7e:	fc 91       	ld	r31, X
   10f80:	57 97       	sbiw	r26, 0x17	; 23
   10f82:	30 97       	sbiw	r30, 0x00	; 0
   10f84:	39 f0       	breq	.+14     	; 0x10f94 <mp_iternext+0x3a>
   10f86:	10 92 67 6b 	sts	0x6B67, r1	; 0x806b67 <mp_state_ctx+0xd>
   10f8a:	10 92 66 6b 	sts	0x6B66, r1	; 0x806b66 <mp_state_ctx+0xc>
   10f8e:	c8 01       	movw	r24, r16
   10f90:	09 95       	icall
   10f92:	42 c0       	rjmp	.+132    	; 0x11018 <mp_iternext+0xbe>
   10f94:	ae 01       	movw	r20, r28
   10f96:	44 5e       	subi	r20, 0xE4	; 228
   10f98:	5f 4f       	sbci	r21, 0xFF	; 255
   10f9a:	69 e1       	ldi	r22, 0x19	; 25
   10f9c:	70 e0       	ldi	r23, 0x00	; 0
   10f9e:	c8 01       	movw	r24, r16
   10fa0:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
   10fa4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10fa6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   10fa8:	89 2b       	or	r24, r25
   10faa:	91 f1       	breq	.+100    	; 0x11010 <mp_iternext+0xb6>
   10fac:	ce 01       	movw	r24, r28
   10fae:	01 96       	adiw	r24, 0x01	; 1
   10fb0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   10fb4:	ce 01       	movw	r24, r28
   10fb6:	05 96       	adiw	r24, 0x05	; 5
   10fb8:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   10fbc:	89 2b       	or	r24, r25
   10fbe:	81 f4       	brne	.+32     	; 0x10fe0 <mp_iternext+0x86>
   10fc0:	ae 01       	movw	r20, r28
   10fc2:	44 5e       	subi	r20, 0xE4	; 228
   10fc4:	5f 4f       	sbci	r21, 0xFF	; 255
   10fc6:	60 e0       	ldi	r22, 0x00	; 0
   10fc8:	70 e0       	ldi	r23, 0x00	; 0
   10fca:	80 e0       	ldi	r24, 0x00	; 0
   10fcc:	90 e0       	ldi	r25, 0x00	; 0
   10fce:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   10fd2:	08 2f       	mov	r16, r24
   10fd4:	19 2f       	mov	r17, r25
   10fd6:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   10fda:	80 2f       	mov	r24, r16
   10fdc:	91 2f       	mov	r25, r17
   10fde:	1c c0       	rjmp	.+56     	; 0x11018 <mp_iternext+0xbe>
   10fe0:	0b 81       	ldd	r16, Y+3	; 0x03
   10fe2:	1c 81       	ldd	r17, Y+4	; 0x04
   10fe4:	68 eb       	ldi	r22, 0xB8	; 184
   10fe6:	71 e2       	ldi	r23, 0x21	; 33
   10fe8:	f8 01       	movw	r30, r16
   10fea:	80 81       	ld	r24, Z
   10fec:	91 81       	ldd	r25, Z+1	; 0x01
   10fee:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   10ff2:	88 23       	and	r24, r24
   10ff4:	51 f0       	breq	.+20     	; 0x1100a <mp_iternext+0xb0>
   10ff6:	c8 01       	movw	r24, r16
   10ff8:	0e 94 88 21 	call	0x4310	; 0x4310 <mp_obj_exception_get_value>
   10ffc:	90 93 67 6b 	sts	0x6B67, r25	; 0x806b67 <mp_state_ctx+0xd>
   11000:	80 93 66 6b 	sts	0x6B66, r24	; 0x806b66 <mp_state_ctx+0xc>
   11004:	80 e0       	ldi	r24, 0x00	; 0
   11006:	90 e0       	ldi	r25, 0x00	; 0
   11008:	07 c0       	rjmp	.+14     	; 0x11018 <mp_iternext+0xbe>
   1100a:	c8 01       	movw	r24, r16
   1100c:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
   11010:	80 ed       	ldi	r24, 0xD0	; 208
   11012:	96 e0       	ldi	r25, 0x06	; 6
   11014:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   11018:	6f 96       	adiw	r28, 0x1f	; 31
   1101a:	0f b6       	in	r0, 0x3f	; 63
   1101c:	f8 94       	cli
   1101e:	de bf       	out	0x3e, r29	; 62
   11020:	0f be       	out	0x3f, r0	; 63
   11022:	cd bf       	out	0x3d, r28	; 61
   11024:	df 91       	pop	r29
   11026:	cf 91       	pop	r28
   11028:	1f 91       	pop	r17
   1102a:	0f 91       	pop	r16
   1102c:	08 95       	ret

0001102e <mp_unpack_sequence>:
   1102e:	af 92       	push	r10
   11030:	bf 92       	push	r11
   11032:	cf 92       	push	r12
   11034:	df 92       	push	r13
   11036:	ef 92       	push	r14
   11038:	ff 92       	push	r15
   1103a:	0f 93       	push	r16
   1103c:	1f 93       	push	r17
   1103e:	cf 93       	push	r28
   11040:	df 93       	push	r29
   11042:	cd b7       	in	r28, 0x3d	; 61
   11044:	de b7       	in	r29, 0x3e	; 62
   11046:	2a 97       	sbiw	r28, 0x0a	; 10
   11048:	0f b6       	in	r0, 0x3f	; 63
   1104a:	f8 94       	cli
   1104c:	de bf       	out	0x3e, r29	; 62
   1104e:	0f be       	out	0x3f, r0	; 63
   11050:	cd bf       	out	0x3d, r28	; 61
   11052:	8b 01       	movw	r16, r22
   11054:	7a 01       	movw	r14, r20
   11056:	9c 01       	movw	r18, r24
   11058:	23 70       	andi	r18, 0x03	; 3
   1105a:	33 27       	eor	r19, r19
   1105c:	23 2b       	or	r18, r19
   1105e:	81 f5       	brne	.+96     	; 0x110c0 <mp_unpack_sequence+0x92>
   11060:	fc 01       	movw	r30, r24
   11062:	20 81       	ld	r18, Z
   11064:	31 81       	ldd	r19, Z+1	; 0x01
   11066:	fa e1       	ldi	r31, 0x1A	; 26
   11068:	2e 3a       	cpi	r18, 0xAE	; 174
   1106a:	3f 07       	cpc	r19, r31
   1106c:	19 f0       	breq	.+6      	; 0x11074 <mp_unpack_sequence+0x46>
   1106e:	2c 52       	subi	r18, 0x2C	; 44
   11070:	3d 41       	sbci	r19, 0x1D	; 29
   11072:	31 f5       	brne	.+76     	; 0x110c0 <mp_unpack_sequence+0x92>
   11074:	ae 01       	movw	r20, r28
   11076:	4d 5f       	subi	r20, 0xFD	; 253
   11078:	5f 4f       	sbci	r21, 0xFF	; 255
   1107a:	be 01       	movw	r22, r28
   1107c:	6f 5f       	subi	r22, 0xFF	; 255
   1107e:	7f 4f       	sbci	r23, 0xFF	; 255
   11080:	0e 94 1b 29 	call	0x5236	; 0x5236 <mp_obj_get_array>
   11084:	89 81       	ldd	r24, Y+1	; 0x01
   11086:	9a 81       	ldd	r25, Y+2	; 0x02
   11088:	80 17       	cp	r24, r16
   1108a:	91 07       	cpc	r25, r17
   1108c:	08 f4       	brcc	.+2      	; 0x11090 <mp_unpack_sequence+0x62>
   1108e:	46 c0       	rjmp	.+140    	; 0x1111c <mp_unpack_sequence+0xee>
   11090:	08 17       	cp	r16, r24
   11092:	19 07       	cpc	r17, r25
   11094:	08 f4       	brcc	.+2      	; 0x11098 <mp_unpack_sequence+0x6a>
   11096:	46 c0       	rjmp	.+140    	; 0x11124 <mp_unpack_sequence+0xf6>
   11098:	01 15       	cp	r16, r1
   1109a:	11 05       	cpc	r17, r1
   1109c:	09 f4       	brne	.+2      	; 0x110a0 <mp_unpack_sequence+0x72>
   1109e:	46 c0       	rjmp	.+140    	; 0x1112c <mp_unpack_sequence+0xfe>
   110a0:	2b 81       	ldd	r18, Y+3	; 0x03
   110a2:	3c 81       	ldd	r19, Y+4	; 0x04
   110a4:	00 0f       	add	r16, r16
   110a6:	11 1f       	adc	r17, r17
   110a8:	f9 01       	movw	r30, r18
   110aa:	e0 0f       	add	r30, r16
   110ac:	f1 1f       	adc	r31, r17
   110ae:	d7 01       	movw	r26, r14
   110b0:	92 91       	ld	r25, -Z
   110b2:	82 91       	ld	r24, -Z
   110b4:	8d 93       	st	X+, r24
   110b6:	9d 93       	st	X+, r25
   110b8:	e2 17       	cp	r30, r18
   110ba:	f3 07       	cpc	r31, r19
   110bc:	c9 f7       	brne	.-14     	; 0x110b0 <mp_unpack_sequence+0x82>
   110be:	36 c0       	rjmp	.+108    	; 0x1112c <mp_unpack_sequence+0xfe>
   110c0:	be 01       	movw	r22, r28
   110c2:	6d 5f       	subi	r22, 0xFD	; 253
   110c4:	7f 4f       	sbci	r23, 0xFF	; 255
   110c6:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   110ca:	6c 01       	movw	r12, r24
   110cc:	1a 82       	std	Y+2, r1	; 0x02
   110ce:	19 82       	std	Y+1, r1	; 0x01
   110d0:	01 15       	cp	r16, r1
   110d2:	11 05       	cpc	r17, r1
   110d4:	f1 f0       	breq	.+60     	; 0x11112 <mp_unpack_sequence+0xe4>
   110d6:	0f 2e       	mov	r0, r31
   110d8:	aa 24       	eor	r10, r10
   110da:	aa 94       	dec	r10
   110dc:	ff e7       	ldi	r31, 0x7F	; 127
   110de:	bf 2e       	mov	r11, r31
   110e0:	f0 2d       	mov	r31, r0
   110e2:	c6 01       	movw	r24, r12
   110e4:	3a df       	rcall	.-396    	; 0x10f5a <mp_iternext>
   110e6:	00 97       	sbiw	r24, 0x00	; 0
   110e8:	c9 f0       	breq	.+50     	; 0x1111c <mp_unpack_sequence+0xee>
   110ea:	29 81       	ldd	r18, Y+1	; 0x01
   110ec:	3a 81       	ldd	r19, Y+2	; 0x02
   110ee:	f5 01       	movw	r30, r10
   110f0:	e2 1b       	sub	r30, r18
   110f2:	f3 0b       	sbc	r31, r19
   110f4:	e0 0f       	add	r30, r16
   110f6:	f1 1f       	adc	r31, r17
   110f8:	ee 0f       	add	r30, r30
   110fa:	ff 1f       	adc	r31, r31
   110fc:	ee 0d       	add	r30, r14
   110fe:	ff 1d       	adc	r31, r15
   11100:	91 83       	std	Z+1, r25	; 0x01
   11102:	80 83       	st	Z, r24
   11104:	2f 5f       	subi	r18, 0xFF	; 255
   11106:	3f 4f       	sbci	r19, 0xFF	; 255
   11108:	3a 83       	std	Y+2, r19	; 0x02
   1110a:	29 83       	std	Y+1, r18	; 0x01
   1110c:	20 17       	cp	r18, r16
   1110e:	31 07       	cpc	r19, r17
   11110:	40 f3       	brcs	.-48     	; 0x110e2 <mp_unpack_sequence+0xb4>
   11112:	c6 01       	movw	r24, r12
   11114:	22 df       	rcall	.-444    	; 0x10f5a <mp_iternext>
   11116:	89 2b       	or	r24, r25
   11118:	49 f0       	breq	.+18     	; 0x1112c <mp_unpack_sequence+0xfe>
   1111a:	04 c0       	rjmp	.+8      	; 0x11124 <mp_unpack_sequence+0xf6>
   1111c:	89 e7       	ldi	r24, 0x79	; 121
   1111e:	9b e0       	ldi	r25, 0x0B	; 11
   11120:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   11124:	89 e7       	ldi	r24, 0x79	; 121
   11126:	9b e0       	ldi	r25, 0x0B	; 11
   11128:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   1112c:	2a 96       	adiw	r28, 0x0a	; 10
   1112e:	0f b6       	in	r0, 0x3f	; 63
   11130:	f8 94       	cli
   11132:	de bf       	out	0x3e, r29	; 62
   11134:	0f be       	out	0x3f, r0	; 63
   11136:	cd bf       	out	0x3d, r28	; 61
   11138:	df 91       	pop	r29
   1113a:	cf 91       	pop	r28
   1113c:	1f 91       	pop	r17
   1113e:	0f 91       	pop	r16
   11140:	ff 90       	pop	r15
   11142:	ef 90       	pop	r14
   11144:	df 90       	pop	r13
   11146:	cf 90       	pop	r12
   11148:	bf 90       	pop	r11
   1114a:	af 90       	pop	r10
   1114c:	08 95       	ret

0001114e <dict_update>:
   1114e:	4f 92       	push	r4
   11150:	5f 92       	push	r5
   11152:	6f 92       	push	r6
   11154:	7f 92       	push	r7
   11156:	8f 92       	push	r8
   11158:	9f 92       	push	r9
   1115a:	af 92       	push	r10
   1115c:	bf 92       	push	r11
   1115e:	cf 92       	push	r12
   11160:	df 92       	push	r13
   11162:	ef 92       	push	r14
   11164:	ff 92       	push	r15
   11166:	0f 93       	push	r16
   11168:	1f 93       	push	r17
   1116a:	cf 93       	push	r28
   1116c:	df 93       	push	r29
   1116e:	00 d0       	rcall	.+0      	; 0x11170 <dict_update+0x22>
   11170:	cd b7       	in	r28, 0x3d	; 61
   11172:	de b7       	in	r29, 0x3e	; 62
   11174:	7c 01       	movw	r14, r24
   11176:	6b 01       	movw	r12, r22
   11178:	8a 01       	movw	r16, r20
   1117a:	db 01       	movw	r26, r22
   1117c:	6d 90       	ld	r6, X+
   1117e:	7c 90       	ld	r7, X
   11180:	c3 01       	movw	r24, r6
   11182:	83 70       	andi	r24, 0x03	; 3
   11184:	99 27       	eor	r25, r25
   11186:	89 2b       	or	r24, r25
   11188:	41 f4       	brne	.+16     	; 0x1119a <dict_update+0x4c>
   1118a:	d3 01       	movw	r26, r6
   1118c:	ed 91       	ld	r30, X+
   1118e:	fc 91       	ld	r31, X
   11190:	80 85       	ldd	r24, Z+8	; 0x08
   11192:	91 85       	ldd	r25, Z+9	; 0x09
   11194:	8a 5a       	subi	r24, 0xAA	; 170
   11196:	99 48       	sbci	r25, 0x89	; 137
   11198:	11 f0       	breq	.+4      	; 0x1119e <dict_update+0x50>
   1119a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   1119e:	c3 01       	movw	r24, r6
   111a0:	0e 94 79 29 	call	0x52f2	; 0x52f2 <mp_ensure_not_fixed>
   111a4:	f8 01       	movw	r30, r16
   111a6:	60 81       	ld	r22, Z
   111a8:	66 95       	lsr	r22
   111aa:	66 95       	lsr	r22
   111ac:	66 95       	lsr	r22
   111ae:	71 81       	ldd	r23, Z+1	; 0x01
   111b0:	87 2f       	mov	r24, r23
   111b2:	82 95       	swap	r24
   111b4:	88 0f       	add	r24, r24
   111b6:	80 7e       	andi	r24, 0xE0	; 224
   111b8:	68 2b       	or	r22, r24
   111ba:	76 95       	lsr	r23
   111bc:	76 95       	lsr	r23
   111be:	76 95       	lsr	r23
   111c0:	25 e0       	ldi	r18, 0x05	; 5
   111c2:	30 e0       	ldi	r19, 0x00	; 0
   111c4:	42 e0       	ldi	r20, 0x02	; 2
   111c6:	50 e0       	ldi	r21, 0x00	; 0
   111c8:	c7 01       	movw	r24, r14
   111ca:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
   111ce:	f2 e0       	ldi	r31, 0x02	; 2
   111d0:	ef 16       	cp	r14, r31
   111d2:	f1 04       	cpc	r15, r1
   111d4:	09 f0       	breq	.+2      	; 0x111d8 <dict_update+0x8a>
   111d6:	92 c0       	rjmp	.+292    	; 0x112fc <dict_update+0x1ae>
   111d8:	d6 01       	movw	r26, r12
   111da:	12 96       	adiw	r26, 0x02	; 2
   111dc:	8d 91       	ld	r24, X+
   111de:	9c 91       	ld	r25, X
   111e0:	13 97       	sbiw	r26, 0x03	; 3
   111e2:	9c 01       	movw	r18, r24
   111e4:	23 70       	andi	r18, 0x03	; 3
   111e6:	33 27       	eor	r19, r19
   111e8:	23 2b       	or	r18, r19
   111ea:	a1 f5       	brne	.+104    	; 0x11254 <dict_update+0x106>
   111ec:	dc 01       	movw	r26, r24
   111ee:	ed 91       	ld	r30, X+
   111f0:	fc 91       	ld	r31, X
   111f2:	20 85       	ldd	r18, Z+8	; 0x08
   111f4:	31 85       	ldd	r19, Z+9	; 0x09
   111f6:	2a 5a       	subi	r18, 0xAA	; 170
   111f8:	39 48       	sbci	r19, 0x89	; 137
   111fa:	61 f5       	brne	.+88     	; 0x11254 <dict_update+0x106>
   111fc:	68 16       	cp	r6, r24
   111fe:	79 06       	cpc	r7, r25
   11200:	09 f1       	breq	.+66     	; 0x11244 <dict_update+0xf6>
   11202:	1a 82       	std	Y+2, r1	; 0x02
   11204:	19 82       	std	Y+1, r1	; 0x01
   11206:	53 01       	movw	r10, r6
   11208:	e2 e0       	ldi	r30, 0x02	; 2
   1120a:	ae 0e       	add	r10, r30
   1120c:	b1 1c       	adc	r11, r1
   1120e:	0f c0       	rjmp	.+30     	; 0x1122e <dict_update+0xe0>
   11210:	d7 01       	movw	r26, r14
   11212:	6d 91       	ld	r22, X+
   11214:	7c 91       	ld	r23, X
   11216:	41 e0       	ldi	r20, 0x01	; 1
   11218:	c5 01       	movw	r24, r10
   1121a:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   1121e:	f7 01       	movw	r30, r14
   11220:	22 81       	ldd	r18, Z+2	; 0x02
   11222:	33 81       	ldd	r19, Z+3	; 0x03
   11224:	dc 01       	movw	r26, r24
   11226:	13 96       	adiw	r26, 0x03	; 3
   11228:	3c 93       	st	X, r19
   1122a:	2e 93       	st	-X, r18
   1122c:	12 97       	sbiw	r26, 0x02	; 2
   1122e:	be 01       	movw	r22, r28
   11230:	6f 5f       	subi	r22, 0xFF	; 255
   11232:	7f 4f       	sbci	r23, 0xFF	; 255
   11234:	f6 01       	movw	r30, r12
   11236:	82 81       	ldd	r24, Z+2	; 0x02
   11238:	93 81       	ldd	r25, Z+3	; 0x03
   1123a:	0e 94 ba 04 	call	0x974	; 0x974 <dict_iter_next>
   1123e:	7c 01       	movw	r14, r24
   11240:	89 2b       	or	r24, r25
   11242:	31 f7       	brne	.-52     	; 0x11210 <dict_update+0xc2>
   11244:	d8 01       	movw	r26, r16
   11246:	12 96       	adiw	r26, 0x02	; 2
   11248:	8d 91       	ld	r24, X+
   1124a:	9c 91       	ld	r25, X
   1124c:	13 97       	sbiw	r26, 0x03	; 3
   1124e:	89 2b       	or	r24, r25
   11250:	81 f5       	brne	.+96     	; 0x112b2 <dict_update+0x164>
   11252:	6b c0       	rjmp	.+214    	; 0x1132a <dict_update+0x1dc>
   11254:	60 e0       	ldi	r22, 0x00	; 0
   11256:	70 e0       	ldi	r23, 0x00	; 0
   11258:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   1125c:	4c 01       	movw	r8, r24
   1125e:	23 01       	movw	r4, r6
   11260:	b2 e0       	ldi	r27, 0x02	; 2
   11262:	4b 0e       	add	r4, r27
   11264:	51 1c       	adc	r5, r1
   11266:	20 c0       	rjmp	.+64     	; 0x112a8 <dict_update+0x15a>
   11268:	60 e0       	ldi	r22, 0x00	; 0
   1126a:	70 e0       	ldi	r23, 0x00	; 0
   1126c:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   11270:	7c 01       	movw	r14, r24
   11272:	73 de       	rcall	.-794    	; 0x10f5a <mp_iternext>
   11274:	5c 01       	movw	r10, r24
   11276:	c7 01       	movw	r24, r14
   11278:	70 de       	rcall	.-800    	; 0x10f5a <mp_iternext>
   1127a:	6c 01       	movw	r12, r24
   1127c:	c7 01       	movw	r24, r14
   1127e:	6d de       	rcall	.-806    	; 0x10f5a <mp_iternext>
   11280:	a1 14       	cp	r10, r1
   11282:	b1 04       	cpc	r11, r1
   11284:	29 f0       	breq	.+10     	; 0x11290 <dict_update+0x142>
   11286:	c1 14       	cp	r12, r1
   11288:	d1 04       	cpc	r13, r1
   1128a:	11 f0       	breq	.+4      	; 0x11290 <dict_update+0x142>
   1128c:	89 2b       	or	r24, r25
   1128e:	21 f0       	breq	.+8      	; 0x11298 <dict_update+0x14a>
   11290:	8a e9       	ldi	r24, 0x9A	; 154
   11292:	9b e0       	ldi	r25, 0x0B	; 11
   11294:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   11298:	41 e0       	ldi	r20, 0x01	; 1
   1129a:	b5 01       	movw	r22, r10
   1129c:	c2 01       	movw	r24, r4
   1129e:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   112a2:	fc 01       	movw	r30, r24
   112a4:	d3 82       	std	Z+3, r13	; 0x03
   112a6:	c2 82       	std	Z+2, r12	; 0x02
   112a8:	c4 01       	movw	r24, r8
   112aa:	57 de       	rcall	.-850    	; 0x10f5a <mp_iternext>
   112ac:	00 97       	sbiw	r24, 0x00	; 0
   112ae:	e1 f6       	brne	.-72     	; 0x11268 <dict_update+0x11a>
   112b0:	c9 cf       	rjmp	.-110    	; 0x11244 <dict_update+0xf6>
   112b2:	e1 2c       	mov	r14, r1
   112b4:	f1 2c       	mov	r15, r1
   112b6:	c1 2c       	mov	r12, r1
   112b8:	d1 2c       	mov	r13, r1
   112ba:	f2 e0       	ldi	r31, 0x02	; 2
   112bc:	6f 0e       	add	r6, r31
   112be:	71 1c       	adc	r7, r1
   112c0:	d8 01       	movw	r26, r16
   112c2:	14 96       	adiw	r26, 0x04	; 4
   112c4:	ed 91       	ld	r30, X+
   112c6:	fc 91       	ld	r31, X
   112c8:	15 97       	sbiw	r26, 0x05	; 5
   112ca:	ee 0d       	add	r30, r14
   112cc:	ff 1d       	adc	r31, r15
   112ce:	60 81       	ld	r22, Z
   112d0:	71 81       	ldd	r23, Z+1	; 0x01
   112d2:	61 15       	cp	r22, r1
   112d4:	71 05       	cpc	r23, r1
   112d6:	19 f0       	breq	.+6      	; 0x112de <dict_update+0x190>
   112d8:	64 30       	cpi	r22, 0x04	; 4
   112da:	71 05       	cpc	r23, r1
   112dc:	a9 f4       	brne	.+42     	; 0x11308 <dict_update+0x1ba>
   112de:	bf ef       	ldi	r27, 0xFF	; 255
   112e0:	cb 1a       	sub	r12, r27
   112e2:	db 0a       	sbc	r13, r27
   112e4:	e4 e0       	ldi	r30, 0x04	; 4
   112e6:	ee 0e       	add	r14, r30
   112e8:	f1 1c       	adc	r15, r1
   112ea:	d8 01       	movw	r26, r16
   112ec:	12 96       	adiw	r26, 0x02	; 2
   112ee:	8d 91       	ld	r24, X+
   112f0:	9c 91       	ld	r25, X
   112f2:	13 97       	sbiw	r26, 0x03	; 3
   112f4:	c8 16       	cp	r12, r24
   112f6:	d9 06       	cpc	r13, r25
   112f8:	18 f3       	brcs	.-58     	; 0x112c0 <dict_update+0x172>
   112fa:	17 c0       	rjmp	.+46     	; 0x1132a <dict_update+0x1dc>
   112fc:	f8 01       	movw	r30, r16
   112fe:	82 81       	ldd	r24, Z+2	; 0x02
   11300:	93 81       	ldd	r25, Z+3	; 0x03
   11302:	89 2b       	or	r24, r25
   11304:	b1 f6       	brne	.-84     	; 0x112b2 <dict_update+0x164>
   11306:	11 c0       	rjmp	.+34     	; 0x1132a <dict_update+0x1dc>
   11308:	41 e0       	ldi	r20, 0x01	; 1
   1130a:	c3 01       	movw	r24, r6
   1130c:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   11310:	d8 01       	movw	r26, r16
   11312:	14 96       	adiw	r26, 0x04	; 4
   11314:	ed 91       	ld	r30, X+
   11316:	fc 91       	ld	r31, X
   11318:	15 97       	sbiw	r26, 0x05	; 5
   1131a:	ee 0d       	add	r30, r14
   1131c:	ff 1d       	adc	r31, r15
   1131e:	22 81       	ldd	r18, Z+2	; 0x02
   11320:	33 81       	ldd	r19, Z+3	; 0x03
   11322:	fc 01       	movw	r30, r24
   11324:	33 83       	std	Z+3, r19	; 0x03
   11326:	22 83       	std	Z+2, r18	; 0x02
   11328:	da cf       	rjmp	.-76     	; 0x112de <dict_update+0x190>
   1132a:	86 e0       	ldi	r24, 0x06	; 6
   1132c:	90 e0       	ldi	r25, 0x00	; 0
   1132e:	0f 90       	pop	r0
   11330:	0f 90       	pop	r0
   11332:	df 91       	pop	r29
   11334:	cf 91       	pop	r28
   11336:	1f 91       	pop	r17
   11338:	0f 91       	pop	r16
   1133a:	ff 90       	pop	r15
   1133c:	ef 90       	pop	r14
   1133e:	df 90       	pop	r13
   11340:	cf 90       	pop	r12
   11342:	bf 90       	pop	r11
   11344:	af 90       	pop	r10
   11346:	9f 90       	pop	r9
   11348:	8f 90       	pop	r8
   1134a:	7f 90       	pop	r7
   1134c:	6f 90       	pop	r6
   1134e:	5f 90       	pop	r5
   11350:	4f 90       	pop	r4
   11352:	08 95       	ret

00011354 <mp_obj_dict_make_new>:
   11354:	8f 92       	push	r8
   11356:	9f 92       	push	r9
   11358:	af 92       	push	r10
   1135a:	bf 92       	push	r11
   1135c:	cf 92       	push	r12
   1135e:	df 92       	push	r13
   11360:	ef 92       	push	r14
   11362:	ff 92       	push	r15
   11364:	0f 93       	push	r16
   11366:	1f 93       	push	r17
   11368:	cf 93       	push	r28
   1136a:	df 93       	push	r29
   1136c:	cd b7       	in	r28, 0x3d	; 61
   1136e:	de b7       	in	r29, 0x3e	; 62
   11370:	2a 97       	sbiw	r28, 0x0a	; 10
   11372:	0f b6       	in	r0, 0x3f	; 63
   11374:	f8 94       	cli
   11376:	de bf       	out	0x3e, r29	; 62
   11378:	0f be       	out	0x3f, r0	; 63
   1137a:	cd bf       	out	0x3d, r28	; 61
   1137c:	4c 01       	movw	r8, r24
   1137e:	6b 01       	movw	r12, r22
   11380:	8a 01       	movw	r16, r20
   11382:	59 01       	movw	r10, r18
   11384:	80 e0       	ldi	r24, 0x00	; 0
   11386:	90 e0       	ldi	r25, 0x00	; 0
   11388:	0e 94 28 4a 	call	0x9450	; 0x9450 <mp_obj_new_dict>
   1138c:	7c 01       	movw	r14, r24
   1138e:	fc 01       	movw	r30, r24
   11390:	91 82       	std	Z+1, r9	; 0x01
   11392:	80 82       	st	Z, r8
   11394:	c1 14       	cp	r12, r1
   11396:	d1 04       	cpc	r13, r1
   11398:	19 f4       	brne	.+6      	; 0x113a0 <mp_obj_dict_make_new+0x4c>
   1139a:	01 15       	cp	r16, r1
   1139c:	11 05       	cpc	r17, r1
   1139e:	61 f1       	breq	.+88     	; 0x113f8 <mp_obj_dict_make_new+0xa4>
   113a0:	f8 86       	std	Y+8, r15	; 0x08
   113a2:	ef 82       	std	Y+7, r14	; 0x07
   113a4:	f5 01       	movw	r30, r10
   113a6:	80 81       	ld	r24, Z
   113a8:	91 81       	ldd	r25, Z+1	; 0x01
   113aa:	9a 87       	std	Y+10, r25	; 0x0a
   113ac:	89 87       	std	Y+9, r24	; 0x09
   113ae:	1c 83       	std	Y+4, r17	; 0x04
   113b0:	0b 83       	std	Y+3, r16	; 0x03
   113b2:	90 2f       	mov	r25, r16
   113b4:	99 0f       	add	r25, r25
   113b6:	99 0f       	add	r25, r25
   113b8:	99 0f       	add	r25, r25
   113ba:	89 81       	ldd	r24, Y+1	; 0x01
   113bc:	87 70       	andi	r24, 0x07	; 7
   113be:	21 2f       	mov	r18, r17
   113c0:	22 0f       	add	r18, r18
   113c2:	22 0f       	add	r18, r18
   113c4:	22 0f       	add	r18, r18
   113c6:	02 95       	swap	r16
   113c8:	06 95       	lsr	r16
   113ca:	07 70       	andi	r16, 0x07	; 7
   113cc:	02 2b       	or	r16, r18
   113ce:	0a 83       	std	Y+2, r16	; 0x02
   113d0:	89 2b       	or	r24, r25
   113d2:	83 60       	ori	r24, 0x03	; 3
   113d4:	84 60       	ori	r24, 0x04	; 4
   113d6:	89 83       	std	Y+1, r24	; 0x01
   113d8:	c6 01       	movw	r24, r12
   113da:	88 0f       	add	r24, r24
   113dc:	99 1f       	adc	r25, r25
   113de:	a8 0e       	add	r10, r24
   113e0:	b9 1e       	adc	r11, r25
   113e2:	be 82       	std	Y+6, r11	; 0x06
   113e4:	ad 82       	std	Y+5, r10	; 0x05
   113e6:	ae 01       	movw	r20, r28
   113e8:	4f 5f       	subi	r20, 0xFF	; 255
   113ea:	5f 4f       	sbci	r21, 0xFF	; 255
   113ec:	be 01       	movw	r22, r28
   113ee:	69 5f       	subi	r22, 0xF9	; 249
   113f0:	7f 4f       	sbci	r23, 0xFF	; 255
   113f2:	c6 01       	movw	r24, r12
   113f4:	01 96       	adiw	r24, 0x01	; 1
   113f6:	ab de       	rcall	.-682    	; 0x1114e <dict_update>
   113f8:	c7 01       	movw	r24, r14
   113fa:	2a 96       	adiw	r28, 0x0a	; 10
   113fc:	0f b6       	in	r0, 0x3f	; 63
   113fe:	f8 94       	cli
   11400:	de bf       	out	0x3e, r29	; 62
   11402:	0f be       	out	0x3f, r0	; 63
   11404:	cd bf       	out	0x3d, r28	; 61
   11406:	df 91       	pop	r29
   11408:	cf 91       	pop	r28
   1140a:	1f 91       	pop	r17
   1140c:	0f 91       	pop	r16
   1140e:	ff 90       	pop	r15
   11410:	ef 90       	pop	r14
   11412:	df 90       	pop	r13
   11414:	cf 90       	pop	r12
   11416:	bf 90       	pop	r11
   11418:	af 90       	pop	r10
   1141a:	9f 90       	pop	r9
   1141c:	8f 90       	pop	r8
   1141e:	08 95       	ret

00011420 <mp_builtin_all>:
   11420:	0f 93       	push	r16
   11422:	1f 93       	push	r17
   11424:	cf 93       	push	r28
   11426:	df 93       	push	r29
   11428:	cd b7       	in	r28, 0x3d	; 61
   1142a:	de b7       	in	r29, 0x3e	; 62
   1142c:	28 97       	sbiw	r28, 0x08	; 8
   1142e:	0f b6       	in	r0, 0x3f	; 63
   11430:	f8 94       	cli
   11432:	de bf       	out	0x3e, r29	; 62
   11434:	0f be       	out	0x3f, r0	; 63
   11436:	cd bf       	out	0x3d, r28	; 61
   11438:	be 01       	movw	r22, r28
   1143a:	6f 5f       	subi	r22, 0xFF	; 255
   1143c:	7f 4f       	sbci	r23, 0xFF	; 255
   1143e:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   11442:	8c 01       	movw	r16, r24
   11444:	04 c0       	rjmp	.+8      	; 0x1144e <mp_builtin_all+0x2e>
   11446:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   1144a:	88 23       	and	r24, r24
   1144c:	39 f0       	breq	.+14     	; 0x1145c <mp_builtin_all+0x3c>
   1144e:	c8 01       	movw	r24, r16
   11450:	84 dd       	rcall	.-1272   	; 0x10f5a <mp_iternext>
   11452:	00 97       	sbiw	r24, 0x00	; 0
   11454:	c1 f7       	brne	.-16     	; 0x11446 <mp_builtin_all+0x26>
   11456:	8e e1       	ldi	r24, 0x1E	; 30
   11458:	90 e0       	ldi	r25, 0x00	; 0
   1145a:	02 c0       	rjmp	.+4      	; 0x11460 <mp_builtin_all+0x40>
   1145c:	8e e0       	ldi	r24, 0x0E	; 14
   1145e:	90 e0       	ldi	r25, 0x00	; 0
   11460:	28 96       	adiw	r28, 0x08	; 8
   11462:	0f b6       	in	r0, 0x3f	; 63
   11464:	f8 94       	cli
   11466:	de bf       	out	0x3e, r29	; 62
   11468:	0f be       	out	0x3f, r0	; 63
   1146a:	cd bf       	out	0x3d, r28	; 61
   1146c:	df 91       	pop	r29
   1146e:	cf 91       	pop	r28
   11470:	1f 91       	pop	r17
   11472:	0f 91       	pop	r16
   11474:	08 95       	ret

00011476 <mp_builtin_any>:
   11476:	0f 93       	push	r16
   11478:	1f 93       	push	r17
   1147a:	cf 93       	push	r28
   1147c:	df 93       	push	r29
   1147e:	cd b7       	in	r28, 0x3d	; 61
   11480:	de b7       	in	r29, 0x3e	; 62
   11482:	28 97       	sbiw	r28, 0x08	; 8
   11484:	0f b6       	in	r0, 0x3f	; 63
   11486:	f8 94       	cli
   11488:	de bf       	out	0x3e, r29	; 62
   1148a:	0f be       	out	0x3f, r0	; 63
   1148c:	cd bf       	out	0x3d, r28	; 61
   1148e:	be 01       	movw	r22, r28
   11490:	6f 5f       	subi	r22, 0xFF	; 255
   11492:	7f 4f       	sbci	r23, 0xFF	; 255
   11494:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   11498:	8c 01       	movw	r16, r24
   1149a:	04 c0       	rjmp	.+8      	; 0x114a4 <mp_builtin_any+0x2e>
   1149c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   114a0:	81 11       	cpse	r24, r1
   114a2:	07 c0       	rjmp	.+14     	; 0x114b2 <mp_builtin_any+0x3c>
   114a4:	c8 01       	movw	r24, r16
   114a6:	59 dd       	rcall	.-1358   	; 0x10f5a <mp_iternext>
   114a8:	00 97       	sbiw	r24, 0x00	; 0
   114aa:	c1 f7       	brne	.-16     	; 0x1149c <mp_builtin_any+0x26>
   114ac:	8e e0       	ldi	r24, 0x0E	; 14
   114ae:	90 e0       	ldi	r25, 0x00	; 0
   114b0:	02 c0       	rjmp	.+4      	; 0x114b6 <mp_builtin_any+0x40>
   114b2:	8e e1       	ldi	r24, 0x1E	; 30
   114b4:	90 e0       	ldi	r25, 0x00	; 0
   114b6:	28 96       	adiw	r28, 0x08	; 8
   114b8:	0f b6       	in	r0, 0x3f	; 63
   114ba:	f8 94       	cli
   114bc:	de bf       	out	0x3e, r29	; 62
   114be:	0f be       	out	0x3f, r0	; 63
   114c0:	cd bf       	out	0x3d, r28	; 61
   114c2:	df 91       	pop	r29
   114c4:	cf 91       	pop	r28
   114c6:	1f 91       	pop	r17
   114c8:	0f 91       	pop	r16
   114ca:	08 95       	ret

000114cc <map_iternext>:
   114cc:	af 92       	push	r10
   114ce:	bf 92       	push	r11
   114d0:	cf 92       	push	r12
   114d2:	df 92       	push	r13
   114d4:	ef 92       	push	r14
   114d6:	ff 92       	push	r15
   114d8:	0f 93       	push	r16
   114da:	1f 93       	push	r17
   114dc:	cf 93       	push	r28
   114de:	df 93       	push	r29
   114e0:	6c 01       	movw	r12, r24
   114e2:	83 70       	andi	r24, 0x03	; 3
   114e4:	99 27       	eor	r25, r25
   114e6:	89 2b       	or	r24, r25
   114e8:	31 f4       	brne	.+12     	; 0x114f6 <map_iternext+0x2a>
   114ea:	f6 01       	movw	r30, r12
   114ec:	80 81       	ld	r24, Z
   114ee:	91 81       	ldd	r25, Z+1	; 0x01
   114f0:	8c 50       	subi	r24, 0x0C	; 12
   114f2:	9d 41       	sbci	r25, 0x1D	; 29
   114f4:	11 f0       	breq	.+4      	; 0x114fa <map_iternext+0x2e>
   114f6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   114fa:	f6 01       	movw	r30, r12
   114fc:	82 81       	ldd	r24, Z+2	; 0x02
   114fe:	93 81       	ldd	r25, Z+3	; 0x03
   11500:	88 0f       	add	r24, r24
   11502:	99 1f       	adc	r25, r25
   11504:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   11508:	a8 2e       	mov	r10, r24
   1150a:	b9 2e       	mov	r11, r25
   1150c:	f6 01       	movw	r30, r12
   1150e:	62 81       	ldd	r22, Z+2	; 0x02
   11510:	73 81       	ldd	r23, Z+3	; 0x03
   11512:	61 15       	cp	r22, r1
   11514:	71 05       	cpc	r23, r1
   11516:	09 f1       	breq	.+66     	; 0x1155a <map_iternext+0x8e>
   11518:	76 01       	movw	r14, r12
   1151a:	f6 e0       	ldi	r31, 0x06	; 6
   1151c:	ef 0e       	add	r14, r31
   1151e:	f1 1c       	adc	r15, r1
   11520:	08 2f       	mov	r16, r24
   11522:	19 2f       	mov	r17, r25
   11524:	c0 e0       	ldi	r28, 0x00	; 0
   11526:	d0 e0       	ldi	r29, 0x00	; 0
   11528:	f7 01       	movw	r30, r14
   1152a:	81 91       	ld	r24, Z+
   1152c:	91 91       	ld	r25, Z+
   1152e:	7f 01       	movw	r14, r30
   11530:	14 dd       	rcall	.-1496   	; 0x10f5a <mp_iternext>
   11532:	00 97       	sbiw	r24, 0x00	; 0
   11534:	39 f4       	brne	.+14     	; 0x11544 <map_iternext+0x78>
   11536:	8a 2d       	mov	r24, r10
   11538:	9b 2d       	mov	r25, r11
   1153a:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
   1153e:	80 e0       	ldi	r24, 0x00	; 0
   11540:	90 e0       	ldi	r25, 0x00	; 0
   11542:	14 c0       	rjmp	.+40     	; 0x1156c <map_iternext+0xa0>
   11544:	f8 01       	movw	r30, r16
   11546:	81 93       	st	Z+, r24
   11548:	91 93       	st	Z+, r25
   1154a:	8f 01       	movw	r16, r30
   1154c:	21 96       	adiw	r28, 0x01	; 1
   1154e:	f6 01       	movw	r30, r12
   11550:	62 81       	ldd	r22, Z+2	; 0x02
   11552:	73 81       	ldd	r23, Z+3	; 0x03
   11554:	c6 17       	cp	r28, r22
   11556:	d7 07       	cpc	r29, r23
   11558:	38 f3       	brcs	.-50     	; 0x11528 <map_iternext+0x5c>
   1155a:	2a 2d       	mov	r18, r10
   1155c:	3b 2d       	mov	r19, r11
   1155e:	40 e0       	ldi	r20, 0x00	; 0
   11560:	50 e0       	ldi	r21, 0x00	; 0
   11562:	f6 01       	movw	r30, r12
   11564:	84 81       	ldd	r24, Z+4	; 0x04
   11566:	95 81       	ldd	r25, Z+5	; 0x05
   11568:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
   1156c:	df 91       	pop	r29
   1156e:	cf 91       	pop	r28
   11570:	1f 91       	pop	r17
   11572:	0f 91       	pop	r16
   11574:	ff 90       	pop	r15
   11576:	ef 90       	pop	r14
   11578:	df 90       	pop	r13
   1157a:	cf 90       	pop	r12
   1157c:	bf 90       	pop	r11
   1157e:	af 90       	pop	r10
   11580:	08 95       	ret

00011582 <mp_binary_op>:
   11582:	8f 92       	push	r8
   11584:	9f 92       	push	r9
   11586:	af 92       	push	r10
   11588:	bf 92       	push	r11
   1158a:	cf 92       	push	r12
   1158c:	df 92       	push	r13
   1158e:	ef 92       	push	r14
   11590:	ff 92       	push	r15
   11592:	0f 93       	push	r16
   11594:	1f 93       	push	r17
   11596:	cf 93       	push	r28
   11598:	df 93       	push	r29
   1159a:	cd b7       	in	r28, 0x3d	; 61
   1159c:	de b7       	in	r29, 0x3e	; 62
   1159e:	28 97       	sbiw	r28, 0x08	; 8
   115a0:	0f b6       	in	r0, 0x3f	; 63
   115a2:	f8 94       	cli
   115a4:	de bf       	out	0x3e, r29	; 62
   115a6:	0f be       	out	0x3f, r0	; 63
   115a8:	cd bf       	out	0x3d, r28	; 61
   115aa:	f8 2e       	mov	r15, r24
   115ac:	6b 01       	movw	r12, r22
   115ae:	8a 01       	movw	r16, r20
   115b0:	27 e0       	ldi	r18, 0x07	; 7
   115b2:	82 13       	cpse	r24, r18
   115b4:	07 c0       	rjmp	.+14     	; 0x115c4 <mp_binary_op+0x42>
   115b6:	64 17       	cp	r22, r20
   115b8:	75 07       	cpc	r23, r21
   115ba:	09 f4       	brne	.+2      	; 0x115be <mp_binary_op+0x3c>
   115bc:	1c c2       	rjmp	.+1080   	; 0x119f6 <mp_binary_op+0x474>
   115be:	8e e0       	ldi	r24, 0x0E	; 14
   115c0:	90 e0       	ldi	r25, 0x00	; 0
   115c2:	48 c2       	rjmp	.+1168   	; 0x11a54 <mp_binary_op+0x4d2>
   115c4:	82 e0       	ldi	r24, 0x02	; 2
   115c6:	f8 16       	cp	r15, r24
   115c8:	19 f0       	breq	.+6      	; 0x115d0 <mp_binary_op+0x4e>
   115ca:	95 e0       	ldi	r25, 0x05	; 5
   115cc:	f9 12       	cpse	r15, r25
   115ce:	06 c0       	rjmp	.+12     	; 0x115dc <mp_binary_op+0x5a>
   115d0:	a8 01       	movw	r20, r16
   115d2:	b6 01       	movw	r22, r12
   115d4:	8f 2d       	mov	r24, r15
   115d6:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <mp_obj_equal_not_equal>
   115da:	3c c2       	rjmp	.+1144   	; 0x11a54 <mp_binary_op+0x4d2>
   115dc:	a8 e0       	ldi	r26, 0x08	; 8
   115de:	fa 12       	cpse	r15, r26
   115e0:	41 c0       	rjmp	.+130    	; 0x11664 <mp_binary_op+0xe2>
   115e2:	ca 01       	movw	r24, r20
   115e4:	0e 94 56 21 	call	0x42ac	; 0x42ac <mp_obj_is_exception_type>
   115e8:	88 23       	and	r24, r24
   115ea:	49 f0       	breq	.+18     	; 0x115fe <mp_binary_op+0x7c>
   115ec:	b8 01       	movw	r22, r16
   115ee:	c6 01       	movw	r24, r12
   115f0:	0e 94 12 22 	call	0x4424	; 0x4424 <mp_obj_exception_match>
   115f4:	81 11       	cpse	r24, r1
   115f6:	02 c2       	rjmp	.+1028   	; 0x119fc <mp_binary_op+0x47a>
   115f8:	8e e0       	ldi	r24, 0x0E	; 14
   115fa:	90 e0       	ldi	r25, 0x00	; 0
   115fc:	2b c2       	rjmp	.+1110   	; 0x11a54 <mp_binary_op+0x4d2>
   115fe:	c8 01       	movw	r24, r16
   11600:	83 70       	andi	r24, 0x03	; 3
   11602:	99 27       	eor	r25, r25
   11604:	89 2b       	or	r24, r25
   11606:	09 f0       	breq	.+2      	; 0x1160a <mp_binary_op+0x88>
   11608:	ec c1       	rjmp	.+984    	; 0x119e2 <mp_binary_op+0x460>
   1160a:	f8 01       	movw	r30, r16
   1160c:	80 81       	ld	r24, Z
   1160e:	91 81       	ldd	r25, Z+1	; 0x01
   11610:	8e 5a       	subi	r24, 0xAE	; 174
   11612:	9a 41       	sbci	r25, 0x1A	; 26
   11614:	09 f0       	breq	.+2      	; 0x11618 <mp_binary_op+0x96>
   11616:	e5 c1       	rjmp	.+970    	; 0x119e2 <mp_binary_op+0x460>
   11618:	d8 01       	movw	r26, r16
   1161a:	12 96       	adiw	r26, 0x02	; 2
   1161c:	8d 90       	ld	r8, X+
   1161e:	9c 90       	ld	r9, X
   11620:	13 97       	sbiw	r26, 0x03	; 3
   11622:	81 14       	cp	r8, r1
   11624:	91 04       	cpc	r9, r1
   11626:	09 f4       	brne	.+2      	; 0x1162a <mp_binary_op+0xa8>
   11628:	ec c1       	rjmp	.+984    	; 0x11a02 <mp_binary_op+0x480>
   1162a:	0c 5f       	subi	r16, 0xFC	; 252
   1162c:	1f 4f       	sbci	r17, 0xFF	; 255
   1162e:	a1 2c       	mov	r10, r1
   11630:	b1 2c       	mov	r11, r1
   11632:	f8 01       	movw	r30, r16
   11634:	e1 90       	ld	r14, Z+
   11636:	f1 90       	ld	r15, Z+
   11638:	8f 01       	movw	r16, r30
   1163a:	c7 01       	movw	r24, r14
   1163c:	0e 94 56 21 	call	0x42ac	; 0x42ac <mp_obj_is_exception_type>
   11640:	88 23       	and	r24, r24
   11642:	09 f4       	brne	.+2      	; 0x11646 <mp_binary_op+0xc4>
   11644:	ce c1       	rjmp	.+924    	; 0x119e2 <mp_binary_op+0x460>
   11646:	b7 01       	movw	r22, r14
   11648:	c6 01       	movw	r24, r12
   1164a:	0e 94 12 22 	call	0x4424	; 0x4424 <mp_obj_exception_match>
   1164e:	81 11       	cpse	r24, r1
   11650:	db c1       	rjmp	.+950    	; 0x11a08 <mp_binary_op+0x486>
   11652:	ff ef       	ldi	r31, 0xFF	; 255
   11654:	af 1a       	sub	r10, r31
   11656:	bf 0a       	sbc	r11, r31
   11658:	a8 14       	cp	r10, r8
   1165a:	b9 04       	cpc	r11, r9
   1165c:	51 f7       	brne	.-44     	; 0x11632 <mp_binary_op+0xb0>
   1165e:	8e e0       	ldi	r24, 0x0E	; 14
   11660:	90 e0       	ldi	r25, 0x00	; 0
   11662:	f8 c1       	rjmp	.+1008   	; 0x11a54 <mp_binary_op+0x4d2>
   11664:	5b 01       	movw	r10, r22
   11666:	60 ff       	sbrs	r22, 0
   11668:	87 c1       	rjmp	.+782    	; 0x11978 <mp_binary_op+0x3f6>
   1166a:	40 ff       	sbrs	r20, 0
   1166c:	85 c1       	rjmp	.+778    	; 0x11978 <mp_binary_op+0x3f6>
   1166e:	b5 94       	asr	r11
   11670:	a7 94       	ror	r10
   11672:	15 95       	asr	r17
   11674:	07 95       	ror	r16
   11676:	24 e1       	ldi	r18, 0x14	; 20
   11678:	f2 16       	cp	r15, r18
   1167a:	09 f4       	brne	.+2      	; 0x1167e <mp_binary_op+0xfc>
   1167c:	e4 c0       	rjmp	.+456    	; 0x11846 <mp_binary_op+0x2c4>
   1167e:	2f 15       	cp	r18, r15
   11680:	d8 f1       	brcs	.+118    	; 0x116f8 <mp_binary_op+0x176>
   11682:	8b e0       	ldi	r24, 0x0B	; 11
   11684:	f8 16       	cp	r15, r24
   11686:	09 f4       	brne	.+2      	; 0x1168a <mp_binary_op+0x108>
   11688:	73 c0       	rjmp	.+230    	; 0x11770 <mp_binary_op+0x1ee>
   1168a:	8f 15       	cp	r24, r15
   1168c:	d0 f0       	brcs	.+52     	; 0x116c2 <mp_binary_op+0x140>
   1168e:	93 e0       	ldi	r25, 0x03	; 3
   11690:	f9 16       	cp	r15, r25
   11692:	09 f4       	brne	.+2      	; 0x11696 <mp_binary_op+0x114>
   11694:	54 c1       	rjmp	.+680    	; 0x1193e <mp_binary_op+0x3bc>
   11696:	9f 15       	cp	r25, r15
   11698:	40 f0       	brcs	.+16     	; 0x116aa <mp_binary_op+0x128>
   1169a:	ff 20       	and	r15, r15
   1169c:	09 f4       	brne	.+2      	; 0x116a0 <mp_binary_op+0x11e>
   1169e:	41 c1       	rjmp	.+642    	; 0x11922 <mp_binary_op+0x3a0>
   116a0:	a1 e0       	ldi	r26, 0x01	; 1
   116a2:	fa 16       	cp	r15, r26
   116a4:	09 f4       	brne	.+2      	; 0x116a8 <mp_binary_op+0x126>
   116a6:	44 c1       	rjmp	.+648    	; 0x11930 <mp_binary_op+0x3ae>
   116a8:	9c c1       	rjmp	.+824    	; 0x119e2 <mp_binary_op+0x460>
   116aa:	b9 e0       	ldi	r27, 0x09	; 9
   116ac:	fb 16       	cp	r15, r27
   116ae:	09 f4       	brne	.+2      	; 0x116b2 <mp_binary_op+0x130>
   116b0:	57 c0       	rjmp	.+174    	; 0x11760 <mp_binary_op+0x1de>
   116b2:	bf 15       	cp	r27, r15
   116b4:	08 f4       	brcc	.+2      	; 0x116b8 <mp_binary_op+0x136>
   116b6:	58 c0       	rjmp	.+176    	; 0x11768 <mp_binary_op+0x1e6>
   116b8:	e4 e0       	ldi	r30, 0x04	; 4
   116ba:	fe 16       	cp	r15, r30
   116bc:	09 f4       	brne	.+2      	; 0x116c0 <mp_binary_op+0x13e>
   116be:	46 c1       	rjmp	.+652    	; 0x1194c <mp_binary_op+0x3ca>
   116c0:	90 c1       	rjmp	.+800    	; 0x119e2 <mp_binary_op+0x460>
   116c2:	fe e0       	ldi	r31, 0x0E	; 14
   116c4:	ff 16       	cp	r15, r31
   116c6:	09 f4       	brne	.+2      	; 0x116ca <mp_binary_op+0x148>
   116c8:	95 c0       	rjmp	.+298    	; 0x117f4 <mp_binary_op+0x272>
   116ca:	ff 15       	cp	r31, r15
   116cc:	48 f0       	brcs	.+18     	; 0x116e0 <mp_binary_op+0x15e>
   116ce:	2c e0       	ldi	r18, 0x0C	; 12
   116d0:	f2 16       	cp	r15, r18
   116d2:	09 f4       	brne	.+2      	; 0x116d6 <mp_binary_op+0x154>
   116d4:	51 c0       	rjmp	.+162    	; 0x11778 <mp_binary_op+0x1f6>
   116d6:	8d e0       	ldi	r24, 0x0D	; 13
   116d8:	f8 16       	cp	r15, r24
   116da:	09 f4       	brne	.+2      	; 0x116de <mp_binary_op+0x15c>
   116dc:	79 c0       	rjmp	.+242    	; 0x117d0 <mp_binary_op+0x24e>
   116de:	81 c1       	rjmp	.+770    	; 0x119e2 <mp_binary_op+0x460>
   116e0:	90 e1       	ldi	r25, 0x10	; 16
   116e2:	f9 16       	cp	r15, r25
   116e4:	09 f4       	brne	.+2      	; 0x116e8 <mp_binary_op+0x166>
   116e6:	8e c0       	rjmp	.+284    	; 0x11804 <mp_binary_op+0x282>
   116e8:	f9 16       	cp	r15, r25
   116ea:	08 f4       	brcc	.+2      	; 0x116ee <mp_binary_op+0x16c>
   116ec:	87 c0       	rjmp	.+270    	; 0x117fc <mp_binary_op+0x27a>
   116ee:	a2 e1       	ldi	r26, 0x12	; 18
   116f0:	fa 16       	cp	r15, r26
   116f2:	09 f4       	brne	.+2      	; 0x116f6 <mp_binary_op+0x174>
   116f4:	9e c0       	rjmp	.+316    	; 0x11832 <mp_binary_op+0x2b0>
   116f6:	75 c1       	rjmp	.+746    	; 0x119e2 <mp_binary_op+0x460>
   116f8:	bb e1       	ldi	r27, 0x1B	; 27
   116fa:	fb 16       	cp	r15, r27
   116fc:	09 f4       	brne	.+2      	; 0x11700 <mp_binary_op+0x17e>
   116fe:	7a c0       	rjmp	.+244    	; 0x117f4 <mp_binary_op+0x272>
   11700:	bf 15       	cp	r27, r15
   11702:	98 f0       	brcs	.+38     	; 0x1172a <mp_binary_op+0x1a8>
   11704:	e7 e1       	ldi	r30, 0x17	; 23
   11706:	fe 16       	cp	r15, r30
   11708:	79 f1       	breq	.+94     	; 0x11768 <mp_binary_op+0x1e6>
   1170a:	ef 15       	cp	r30, r15
   1170c:	40 f0       	brcs	.+16     	; 0x1171e <mp_binary_op+0x19c>
   1170e:	f5 e1       	ldi	r31, 0x15	; 21
   11710:	ff 16       	cp	r15, r31
   11712:	09 f4       	brne	.+2      	; 0x11716 <mp_binary_op+0x194>
   11714:	a2 c0       	rjmp	.+324    	; 0x1185a <mp_binary_op+0x2d8>
   11716:	26 e1       	ldi	r18, 0x16	; 22
   11718:	f2 16       	cp	r15, r18
   1171a:	11 f1       	breq	.+68     	; 0x11760 <mp_binary_op+0x1de>
   1171c:	62 c1       	rjmp	.+708    	; 0x119e2 <mp_binary_op+0x460>
   1171e:	89 e1       	ldi	r24, 0x19	; 25
   11720:	f8 16       	cp	r15, r24
   11722:	51 f1       	breq	.+84     	; 0x11778 <mp_binary_op+0x1f6>
   11724:	8f 15       	cp	r24, r15
   11726:	20 f5       	brcc	.+72     	; 0x11770 <mp_binary_op+0x1ee>
   11728:	53 c0       	rjmp	.+166    	; 0x117d0 <mp_binary_op+0x24e>
   1172a:	9f e1       	ldi	r25, 0x1F	; 31
   1172c:	f9 16       	cp	r15, r25
   1172e:	09 f4       	brne	.+2      	; 0x11732 <mp_binary_op+0x1b0>
   11730:	80 c0       	rjmp	.+256    	; 0x11832 <mp_binary_op+0x2b0>
   11732:	9f 15       	cp	r25, r15
   11734:	48 f0       	brcs	.+18     	; 0x11748 <mp_binary_op+0x1c6>
   11736:	ac e1       	ldi	r26, 0x1C	; 28
   11738:	fa 16       	cp	r15, r26
   1173a:	09 f4       	brne	.+2      	; 0x1173e <mp_binary_op+0x1bc>
   1173c:	5f c0       	rjmp	.+190    	; 0x117fc <mp_binary_op+0x27a>
   1173e:	bd e1       	ldi	r27, 0x1D	; 29
   11740:	fb 16       	cp	r15, r27
   11742:	09 f4       	brne	.+2      	; 0x11746 <mp_binary_op+0x1c4>
   11744:	5f c0       	rjmp	.+190    	; 0x11804 <mp_binary_op+0x282>
   11746:	4d c1       	rjmp	.+666    	; 0x119e2 <mp_binary_op+0x460>
   11748:	e2 e2       	ldi	r30, 0x22	; 34
   1174a:	fe 16       	cp	r15, r30
   1174c:	09 f4       	brne	.+2      	; 0x11750 <mp_binary_op+0x1ce>
   1174e:	85 c0       	rjmp	.+266    	; 0x1185a <mp_binary_op+0x2d8>
   11750:	f3 e2       	ldi	r31, 0x23	; 35
   11752:	ff 16       	cp	r15, r31
   11754:	09 f4       	brne	.+2      	; 0x11758 <mp_binary_op+0x1d6>
   11756:	c2 c0       	rjmp	.+388    	; 0x118dc <mp_binary_op+0x35a>
   11758:	21 e2       	ldi	r18, 0x21	; 33
   1175a:	f2 12       	cpse	r15, r18
   1175c:	42 c1       	rjmp	.+644    	; 0x119e2 <mp_binary_op+0x460>
   1175e:	73 c0       	rjmp	.+230    	; 0x11846 <mp_binary_op+0x2c4>
   11760:	75 01       	movw	r14, r10
   11762:	e0 2a       	or	r14, r16
   11764:	f1 2a       	or	r15, r17
   11766:	f9 c0       	rjmp	.+498    	; 0x1195a <mp_binary_op+0x3d8>
   11768:	75 01       	movw	r14, r10
   1176a:	e0 26       	eor	r14, r16
   1176c:	f1 26       	eor	r15, r17
   1176e:	f5 c0       	rjmp	.+490    	; 0x1195a <mp_binary_op+0x3d8>
   11770:	75 01       	movw	r14, r10
   11772:	e0 22       	and	r14, r16
   11774:	f1 22       	and	r15, r17
   11776:	f1 c0       	rjmp	.+482    	; 0x1195a <mp_binary_op+0x3d8>
   11778:	11 23       	and	r17, r17
   1177a:	24 f4       	brge	.+8      	; 0x11784 <mp_binary_op+0x202>
   1177c:	80 ec       	ldi	r24, 0xC0	; 192
   1177e:	9b e0       	ldi	r25, 0x0B	; 11
   11780:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   11784:	00 31       	cpi	r16, 0x10	; 16
   11786:	11 05       	cpc	r17, r1
   11788:	b4 f4       	brge	.+44     	; 0x117b6 <mp_binary_op+0x234>
   1178a:	8f ef       	ldi	r24, 0xFF	; 255
   1178c:	9f e3       	ldi	r25, 0x3F	; 63
   1178e:	00 2e       	mov	r0, r16
   11790:	02 c0       	rjmp	.+4      	; 0x11796 <mp_binary_op+0x214>
   11792:	95 95       	asr	r25
   11794:	87 95       	ror	r24
   11796:	0a 94       	dec	r0
   11798:	e2 f7       	brpl	.-8      	; 0x11792 <mp_binary_op+0x210>
   1179a:	8a 15       	cp	r24, r10
   1179c:	9b 05       	cpc	r25, r11
   1179e:	5c f0       	brlt	.+22     	; 0x117b6 <mp_binary_op+0x234>
   117a0:	80 e0       	ldi	r24, 0x00	; 0
   117a2:	90 ec       	ldi	r25, 0xC0	; 192
   117a4:	00 2e       	mov	r0, r16
   117a6:	02 c0       	rjmp	.+4      	; 0x117ac <mp_binary_op+0x22a>
   117a8:	95 95       	asr	r25
   117aa:	87 95       	ror	r24
   117ac:	0a 94       	dec	r0
   117ae:	e2 f7       	brpl	.-8      	; 0x117a8 <mp_binary_op+0x226>
   117b0:	a8 16       	cp	r10, r24
   117b2:	b9 06       	cpc	r11, r25
   117b4:	34 f4       	brge	.+12     	; 0x117c2 <mp_binary_op+0x240>
   117b6:	66 e9       	ldi	r22, 0x96	; 150
   117b8:	75 e0       	ldi	r23, 0x05	; 5
   117ba:	88 e7       	ldi	r24, 0x78	; 120
   117bc:	91 e2       	ldi	r25, 0x21	; 33
   117be:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   117c2:	75 01       	movw	r14, r10
   117c4:	02 c0       	rjmp	.+4      	; 0x117ca <mp_binary_op+0x248>
   117c6:	ee 0c       	add	r14, r14
   117c8:	ff 1c       	adc	r15, r15
   117ca:	0a 95       	dec	r16
   117cc:	e2 f7       	brpl	.-8      	; 0x117c6 <mp_binary_op+0x244>
   117ce:	c5 c0       	rjmp	.+394    	; 0x1195a <mp_binary_op+0x3d8>
   117d0:	11 23       	and	r17, r17
   117d2:	24 f4       	brge	.+8      	; 0x117dc <mp_binary_op+0x25a>
   117d4:	80 ec       	ldi	r24, 0xC0	; 192
   117d6:	9b e0       	ldi	r25, 0x0B	; 11
   117d8:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   117dc:	00 31       	cpi	r16, 0x10	; 16
   117de:	11 05       	cpc	r17, r1
   117e0:	14 f0       	brlt	.+4      	; 0x117e6 <mp_binary_op+0x264>
   117e2:	0f e0       	ldi	r16, 0x0F	; 15
   117e4:	10 e0       	ldi	r17, 0x00	; 0
   117e6:	75 01       	movw	r14, r10
   117e8:	02 c0       	rjmp	.+4      	; 0x117ee <mp_binary_op+0x26c>
   117ea:	f5 94       	asr	r15
   117ec:	e7 94       	ror	r14
   117ee:	0a 95       	dec	r16
   117f0:	e2 f7       	brpl	.-8      	; 0x117ea <mp_binary_op+0x268>
   117f2:	b3 c0       	rjmp	.+358    	; 0x1195a <mp_binary_op+0x3d8>
   117f4:	75 01       	movw	r14, r10
   117f6:	e0 0e       	add	r14, r16
   117f8:	f1 1e       	adc	r15, r17
   117fa:	af c0       	rjmp	.+350    	; 0x1195a <mp_binary_op+0x3d8>
   117fc:	75 01       	movw	r14, r10
   117fe:	e0 1a       	sub	r14, r16
   11800:	f1 0a       	sbc	r15, r17
   11802:	ab c0       	rjmp	.+342    	; 0x1195a <mp_binary_op+0x3d8>
   11804:	b8 01       	movw	r22, r16
   11806:	c5 01       	movw	r24, r10
   11808:	0e 94 5e 23 	call	0x46bc	; 0x46bc <mp_small_int_mul_overflow>
   1180c:	88 23       	and	r24, r24
   1180e:	31 f0       	breq	.+12     	; 0x1181c <mp_binary_op+0x29a>
   11810:	66 e9       	ldi	r22, 0x96	; 150
   11812:	75 e0       	ldi	r23, 0x05	; 5
   11814:	88 e7       	ldi	r24, 0x78	; 120
   11816:	91 e2       	ldi	r25, 0x21	; 33
   11818:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   1181c:	a0 9e       	mul	r10, r16
   1181e:	c0 01       	movw	r24, r0
   11820:	a1 9e       	mul	r10, r17
   11822:	90 0d       	add	r25, r0
   11824:	b0 9e       	mul	r11, r16
   11826:	90 0d       	add	r25, r0
   11828:	11 24       	eor	r1, r1
   1182a:	88 0f       	add	r24, r24
   1182c:	99 1f       	adc	r25, r25
   1182e:	81 60       	ori	r24, 0x01	; 1
   11830:	11 c1       	rjmp	.+546    	; 0x11a54 <mp_binary_op+0x4d2>
   11832:	01 15       	cp	r16, r1
   11834:	11 05       	cpc	r17, r1
   11836:	09 f4       	brne	.+2      	; 0x1183a <mp_binary_op+0x2b8>
   11838:	d8 c0       	rjmp	.+432    	; 0x119ea <mp_binary_op+0x468>
   1183a:	b8 01       	movw	r22, r16
   1183c:	c5 01       	movw	r24, r10
   1183e:	0e 94 a9 23 	call	0x4752	; 0x4752 <mp_small_int_floor_divide>
   11842:	7c 01       	movw	r14, r24
   11844:	8a c0       	rjmp	.+276    	; 0x1195a <mp_binary_op+0x3d8>
   11846:	01 15       	cp	r16, r1
   11848:	11 05       	cpc	r17, r1
   1184a:	09 f4       	brne	.+2      	; 0x1184e <mp_binary_op+0x2cc>
   1184c:	ce c0       	rjmp	.+412    	; 0x119ea <mp_binary_op+0x468>
   1184e:	b8 01       	movw	r22, r16
   11850:	c5 01       	movw	r24, r10
   11852:	0e 94 97 23 	call	0x472e	; 0x472e <mp_small_int_modulo>
   11856:	7c 01       	movw	r14, r24
   11858:	80 c0       	rjmp	.+256    	; 0x1195a <mp_binary_op+0x3d8>
   1185a:	11 23       	and	r17, r17
   1185c:	34 f0       	brlt	.+12     	; 0x1186a <mp_binary_op+0x2e8>
   1185e:	10 16       	cp	r1, r16
   11860:	11 06       	cpc	r1, r17
   11862:	3c f0       	brlt	.+14     	; 0x11872 <mp_binary_op+0x2f0>
   11864:	82 e0       	ldi	r24, 0x02	; 2
   11866:	90 e0       	ldi	r25, 0x00	; 0
   11868:	7f c0       	rjmp	.+254    	; 0x11968 <mp_binary_op+0x3e6>
   1186a:	85 ed       	ldi	r24, 0xD5	; 213
   1186c:	9b e0       	ldi	r25, 0x0B	; 11
   1186e:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   11872:	ee 24       	eor	r14, r14
   11874:	e3 94       	inc	r14
   11876:	f1 2c       	mov	r15, r1
   11878:	00 ff       	sbrs	r16, 0
   1187a:	0e c0       	rjmp	.+28     	; 0x11898 <mp_binary_op+0x316>
   1187c:	b5 01       	movw	r22, r10
   1187e:	c7 01       	movw	r24, r14
   11880:	0e 94 5e 23 	call	0x46bc	; 0x46bc <mp_small_int_mul_overflow>
   11884:	81 11       	cpse	r24, r1
   11886:	24 c0       	rjmp	.+72     	; 0x118d0 <mp_binary_op+0x34e>
   11888:	c7 01       	movw	r24, r14
   1188a:	8a 9d       	mul	r24, r10
   1188c:	70 01       	movw	r14, r0
   1188e:	8b 9d       	mul	r24, r11
   11890:	f0 0c       	add	r15, r0
   11892:	9a 9d       	mul	r25, r10
   11894:	f0 0c       	add	r15, r0
   11896:	11 24       	eor	r1, r1
   11898:	01 30       	cpi	r16, 0x01	; 1
   1189a:	11 05       	cpc	r17, r1
   1189c:	09 f4       	brne	.+2      	; 0x118a0 <mp_binary_op+0x31e>
   1189e:	5d c0       	rjmp	.+186    	; 0x1195a <mp_binary_op+0x3d8>
   118a0:	c8 01       	movw	r24, r16
   118a2:	99 23       	and	r25, r25
   118a4:	0c f4       	brge	.+2      	; 0x118a8 <mp_binary_op+0x326>
   118a6:	01 96       	adiw	r24, 0x01	; 1
   118a8:	8c 01       	movw	r16, r24
   118aa:	15 95       	asr	r17
   118ac:	07 95       	ror	r16
   118ae:	b5 01       	movw	r22, r10
   118b0:	c5 01       	movw	r24, r10
   118b2:	0e 94 5e 23 	call	0x46bc	; 0x46bc <mp_small_int_mul_overflow>
   118b6:	81 11       	cpse	r24, r1
   118b8:	0b c0       	rjmp	.+22     	; 0x118d0 <mp_binary_op+0x34e>
   118ba:	d5 01       	movw	r26, r10
   118bc:	aa 9f       	mul	r26, r26
   118be:	50 01       	movw	r10, r0
   118c0:	ab 9f       	mul	r26, r27
   118c2:	b0 0c       	add	r11, r0
   118c4:	b0 0c       	add	r11, r0
   118c6:	11 24       	eor	r1, r1
   118c8:	10 16       	cp	r1, r16
   118ca:	11 06       	cpc	r1, r17
   118cc:	ac f2       	brlt	.-86     	; 0x11878 <mp_binary_op+0x2f6>
   118ce:	45 c0       	rjmp	.+138    	; 0x1195a <mp_binary_op+0x3d8>
   118d0:	66 e9       	ldi	r22, 0x96	; 150
   118d2:	75 e0       	ldi	r23, 0x05	; 5
   118d4:	88 e7       	ldi	r24, 0x78	; 120
   118d6:	91 e2       	ldi	r25, 0x21	; 33
   118d8:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   118dc:	01 15       	cp	r16, r1
   118de:	11 05       	cpc	r17, r1
   118e0:	09 f4       	brne	.+2      	; 0x118e4 <mp_binary_op+0x362>
   118e2:	83 c0       	rjmp	.+262    	; 0x119ea <mp_binary_op+0x468>
   118e4:	60 e0       	ldi	r22, 0x00	; 0
   118e6:	70 e0       	ldi	r23, 0x00	; 0
   118e8:	82 e0       	ldi	r24, 0x02	; 2
   118ea:	90 e0       	ldi	r25, 0x00	; 0
   118ec:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   118f0:	6c 01       	movw	r12, r24
   118f2:	b8 01       	movw	r22, r16
   118f4:	c5 01       	movw	r24, r10
   118f6:	0e 94 a9 23 	call	0x4752	; 0x4752 <mp_small_int_floor_divide>
   118fa:	88 0f       	add	r24, r24
   118fc:	99 1f       	adc	r25, r25
   118fe:	81 60       	ori	r24, 0x01	; 1
   11900:	f6 01       	movw	r30, r12
   11902:	95 83       	std	Z+5, r25	; 0x05
   11904:	84 83       	std	Z+4, r24	; 0x04
   11906:	b8 01       	movw	r22, r16
   11908:	c5 01       	movw	r24, r10
   1190a:	0e 94 97 23 	call	0x472e	; 0x472e <mp_small_int_modulo>
   1190e:	88 0f       	add	r24, r24
   11910:	99 1f       	adc	r25, r25
   11912:	81 60       	ori	r24, 0x01	; 1
   11914:	d6 01       	movw	r26, r12
   11916:	17 96       	adiw	r26, 0x07	; 7
   11918:	9c 93       	st	X, r25
   1191a:	8e 93       	st	-X, r24
   1191c:	16 97       	sbiw	r26, 0x06	; 6
   1191e:	c6 01       	movw	r24, r12
   11920:	99 c0       	rjmp	.+306    	; 0x11a54 <mp_binary_op+0x4d2>
   11922:	a0 16       	cp	r10, r16
   11924:	b1 06       	cpc	r11, r17
   11926:	0c f4       	brge	.+2      	; 0x1192a <mp_binary_op+0x3a8>
   11928:	72 c0       	rjmp	.+228    	; 0x11a0e <mp_binary_op+0x48c>
   1192a:	8e e0       	ldi	r24, 0x0E	; 14
   1192c:	90 e0       	ldi	r25, 0x00	; 0
   1192e:	92 c0       	rjmp	.+292    	; 0x11a54 <mp_binary_op+0x4d2>
   11930:	0a 15       	cp	r16, r10
   11932:	1b 05       	cpc	r17, r11
   11934:	0c f4       	brge	.+2      	; 0x11938 <mp_binary_op+0x3b6>
   11936:	6e c0       	rjmp	.+220    	; 0x11a14 <mp_binary_op+0x492>
   11938:	8e e0       	ldi	r24, 0x0E	; 14
   1193a:	90 e0       	ldi	r25, 0x00	; 0
   1193c:	8b c0       	rjmp	.+278    	; 0x11a54 <mp_binary_op+0x4d2>
   1193e:	0a 15       	cp	r16, r10
   11940:	1b 05       	cpc	r17, r11
   11942:	0c f0       	brlt	.+2      	; 0x11946 <mp_binary_op+0x3c4>
   11944:	6a c0       	rjmp	.+212    	; 0x11a1a <mp_binary_op+0x498>
   11946:	8e e0       	ldi	r24, 0x0E	; 14
   11948:	90 e0       	ldi	r25, 0x00	; 0
   1194a:	84 c0       	rjmp	.+264    	; 0x11a54 <mp_binary_op+0x4d2>
   1194c:	a0 16       	cp	r10, r16
   1194e:	b1 06       	cpc	r11, r17
   11950:	0c f0       	brlt	.+2      	; 0x11954 <mp_binary_op+0x3d2>
   11952:	66 c0       	rjmp	.+204    	; 0x11a20 <mp_binary_op+0x49e>
   11954:	8e e0       	ldi	r24, 0x0E	; 14
   11956:	90 e0       	ldi	r25, 0x00	; 0
   11958:	7d c0       	rjmp	.+250    	; 0x11a54 <mp_binary_op+0x4d2>
   1195a:	c7 01       	movw	r24, r14
   1195c:	88 0f       	add	r24, r24
   1195e:	99 1f       	adc	r25, r25
   11960:	e8 26       	eor	r14, r24
   11962:	f9 26       	eor	r15, r25
   11964:	ff 20       	and	r15, r15
   11966:	14 f0       	brlt	.+4      	; 0x1196c <mp_binary_op+0x3ea>
   11968:	81 60       	ori	r24, 0x01	; 1
   1196a:	74 c0       	rjmp	.+232    	; 0x11a54 <mp_binary_op+0x4d2>
   1196c:	66 e9       	ldi	r22, 0x96	; 150
   1196e:	75 e0       	ldi	r23, 0x05	; 5
   11970:	88 e7       	ldi	r24, 0x78	; 120
   11972:	91 e2       	ldi	r25, 0x21	; 33
   11974:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   11978:	b6 e0       	ldi	r27, 0x06	; 6
   1197a:	fb 16       	cp	r15, r27
   1197c:	09 f4       	brne	.+2      	; 0x11980 <mp_binary_op+0x3fe>
   1197e:	53 c0       	rjmp	.+166    	; 0x11a26 <mp_binary_op+0x4a4>
   11980:	c6 01       	movw	r24, r12
   11982:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   11986:	dc 01       	movw	r26, r24
   11988:	1e 96       	adiw	r26, 0x0e	; 14
   1198a:	ed 91       	ld	r30, X+
   1198c:	fc 91       	ld	r31, X
   1198e:	1f 97       	sbiw	r26, 0x0f	; 15
   11990:	30 97       	sbiw	r30, 0x00	; 0
   11992:	39 f0       	breq	.+14     	; 0x119a2 <mp_binary_op+0x420>
   11994:	a8 01       	movw	r20, r16
   11996:	b6 01       	movw	r22, r12
   11998:	8f 2d       	mov	r24, r15
   1199a:	09 95       	icall
   1199c:	00 97       	sbiw	r24, 0x00	; 0
   1199e:	09 f0       	breq	.+2      	; 0x119a2 <mp_binary_op+0x420>
   119a0:	59 c0       	rjmp	.+178    	; 0x11a54 <mp_binary_op+0x4d2>
   119a2:	b4 e2       	ldi	r27, 0x24	; 36
   119a4:	fb 16       	cp	r15, r27
   119a6:	31 f0       	breq	.+12     	; 0x119b4 <mp_binary_op+0x432>
   119a8:	1c c0       	rjmp	.+56     	; 0x119e2 <mp_binary_op+0x460>
   119aa:	9c 2d       	mov	r25, r12
   119ac:	8d 2d       	mov	r24, r13
   119ae:	68 01       	movw	r12, r16
   119b0:	09 2f       	mov	r16, r25
   119b2:	18 2f       	mov	r17, r24
   119b4:	be 01       	movw	r22, r28
   119b6:	6f 5f       	subi	r22, 0xFF	; 255
   119b8:	7f 4f       	sbci	r23, 0xFF	; 255
   119ba:	c6 01       	movw	r24, r12
   119bc:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   119c0:	7c 01       	movw	r14, r24
   119c2:	05 c0       	rjmp	.+10     	; 0x119ce <mp_binary_op+0x44c>
   119c4:	b8 01       	movw	r22, r16
   119c6:	0e 94 e6 20 	call	0x41cc	; 0x41cc <mp_obj_equal>
   119ca:	81 11       	cpse	r24, r1
   119cc:	07 c0       	rjmp	.+14     	; 0x119dc <mp_binary_op+0x45a>
   119ce:	c7 01       	movw	r24, r14
   119d0:	c4 da       	rcall	.-2680   	; 0x10f5a <mp_iternext>
   119d2:	00 97       	sbiw	r24, 0x00	; 0
   119d4:	b9 f7       	brne	.-18     	; 0x119c4 <mp_binary_op+0x442>
   119d6:	8e e0       	ldi	r24, 0x0E	; 14
   119d8:	90 e0       	ldi	r25, 0x00	; 0
   119da:	3c c0       	rjmp	.+120    	; 0x11a54 <mp_binary_op+0x4d2>
   119dc:	8e e1       	ldi	r24, 0x1E	; 30
   119de:	90 e0       	ldi	r25, 0x00	; 0
   119e0:	39 c0       	rjmp	.+114    	; 0x11a54 <mp_binary_op+0x4d2>
   119e2:	8e eb       	ldi	r24, 0xBE	; 190
   119e4:	95 e0       	ldi	r25, 0x05	; 5
   119e6:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   119ea:	6a ef       	ldi	r22, 0xFA	; 250
   119ec:	7b e0       	ldi	r23, 0x0B	; 11
   119ee:	88 e5       	ldi	r24, 0x58	; 88
   119f0:	91 e2       	ldi	r25, 0x21	; 33
   119f2:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   119f6:	8e e1       	ldi	r24, 0x1E	; 30
   119f8:	90 e0       	ldi	r25, 0x00	; 0
   119fa:	2c c0       	rjmp	.+88     	; 0x11a54 <mp_binary_op+0x4d2>
   119fc:	8e e1       	ldi	r24, 0x1E	; 30
   119fe:	90 e0       	ldi	r25, 0x00	; 0
   11a00:	29 c0       	rjmp	.+82     	; 0x11a54 <mp_binary_op+0x4d2>
   11a02:	8e e0       	ldi	r24, 0x0E	; 14
   11a04:	90 e0       	ldi	r25, 0x00	; 0
   11a06:	26 c0       	rjmp	.+76     	; 0x11a54 <mp_binary_op+0x4d2>
   11a08:	8e e1       	ldi	r24, 0x1E	; 30
   11a0a:	90 e0       	ldi	r25, 0x00	; 0
   11a0c:	23 c0       	rjmp	.+70     	; 0x11a54 <mp_binary_op+0x4d2>
   11a0e:	8e e1       	ldi	r24, 0x1E	; 30
   11a10:	90 e0       	ldi	r25, 0x00	; 0
   11a12:	20 c0       	rjmp	.+64     	; 0x11a54 <mp_binary_op+0x4d2>
   11a14:	8e e1       	ldi	r24, 0x1E	; 30
   11a16:	90 e0       	ldi	r25, 0x00	; 0
   11a18:	1d c0       	rjmp	.+58     	; 0x11a54 <mp_binary_op+0x4d2>
   11a1a:	8e e1       	ldi	r24, 0x1E	; 30
   11a1c:	90 e0       	ldi	r25, 0x00	; 0
   11a1e:	1a c0       	rjmp	.+52     	; 0x11a54 <mp_binary_op+0x4d2>
   11a20:	8e e1       	ldi	r24, 0x1E	; 30
   11a22:	90 e0       	ldi	r25, 0x00	; 0
   11a24:	17 c0       	rjmp	.+46     	; 0x11a54 <mp_binary_op+0x4d2>
   11a26:	c8 01       	movw	r24, r16
   11a28:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   11a2c:	dc 01       	movw	r26, r24
   11a2e:	1e 96       	adiw	r26, 0x0e	; 14
   11a30:	ed 91       	ld	r30, X+
   11a32:	fc 91       	ld	r31, X
   11a34:	1f 97       	sbiw	r26, 0x0f	; 15
   11a36:	30 97       	sbiw	r30, 0x00	; 0
   11a38:	09 f4       	brne	.+2      	; 0x11a3c <mp_binary_op+0x4ba>
   11a3a:	b7 cf       	rjmp	.-146    	; 0x119aa <mp_binary_op+0x428>
   11a3c:	a6 01       	movw	r20, r12
   11a3e:	b8 01       	movw	r22, r16
   11a40:	84 e2       	ldi	r24, 0x24	; 36
   11a42:	09 95       	icall
   11a44:	00 97       	sbiw	r24, 0x00	; 0
   11a46:	31 f4       	brne	.+12     	; 0x11a54 <mp_binary_op+0x4d2>
   11a48:	9c 2d       	mov	r25, r12
   11a4a:	8d 2d       	mov	r24, r13
   11a4c:	68 01       	movw	r12, r16
   11a4e:	09 2f       	mov	r16, r25
   11a50:	18 2f       	mov	r17, r24
   11a52:	b0 cf       	rjmp	.-160    	; 0x119b4 <mp_binary_op+0x432>
   11a54:	28 96       	adiw	r28, 0x08	; 8
   11a56:	0f b6       	in	r0, 0x3f	; 63
   11a58:	f8 94       	cli
   11a5a:	de bf       	out	0x3e, r29	; 62
   11a5c:	0f be       	out	0x3f, r0	; 63
   11a5e:	cd bf       	out	0x3d, r28	; 61
   11a60:	df 91       	pop	r29
   11a62:	cf 91       	pop	r28
   11a64:	1f 91       	pop	r17
   11a66:	0f 91       	pop	r16
   11a68:	ff 90       	pop	r15
   11a6a:	ef 90       	pop	r14
   11a6c:	df 90       	pop	r13
   11a6e:	cf 90       	pop	r12
   11a70:	bf 90       	pop	r11
   11a72:	af 90       	pop	r10
   11a74:	9f 90       	pop	r9
   11a76:	8f 90       	pop	r8
   11a78:	08 95       	ret

00011a7a <bool_binary_op>:
   11a7a:	21 e0       	ldi	r18, 0x01	; 1
   11a7c:	30 e0       	ldi	r19, 0x00	; 0
   11a7e:	6e 30       	cpi	r22, 0x0E	; 14
   11a80:	71 05       	cpc	r23, r1
   11a82:	11 f4       	brne	.+4      	; 0x11a88 <bool_binary_op+0xe>
   11a84:	20 e0       	ldi	r18, 0x00	; 0
   11a86:	30 e0       	ldi	r19, 0x00	; 0
   11a88:	b9 01       	movw	r22, r18
   11a8a:	66 0f       	add	r22, r22
   11a8c:	77 1f       	adc	r23, r23
   11a8e:	61 60       	ori	r22, 0x01	; 1
   11a90:	78 cd       	rjmp	.-1296   	; 0x11582 <mp_binary_op>
   11a92:	08 95       	ret

00011a94 <mp_obj_int_binary_op_extra_cases>:
   11a94:	fa 01       	movw	r30, r20
   11a96:	4e 30       	cpi	r20, 0x0E	; 14
   11a98:	51 05       	cpc	r21, r1
   11a9a:	21 f4       	brne	.+8      	; 0x11aa4 <mp_obj_int_binary_op_extra_cases+0x10>
   11a9c:	41 e0       	ldi	r20, 0x01	; 1
   11a9e:	50 e0       	ldi	r21, 0x00	; 0
   11aa0:	70 cd       	rjmp	.-1312   	; 0x11582 <mp_binary_op>
   11aa2:	08 95       	ret
   11aa4:	4e 31       	cpi	r20, 0x1E	; 30
   11aa6:	51 05       	cpc	r21, r1
   11aa8:	21 f4       	brne	.+8      	; 0x11ab2 <mp_obj_int_binary_op_extra_cases+0x1e>
   11aaa:	43 e0       	ldi	r20, 0x03	; 3
   11aac:	50 e0       	ldi	r21, 0x00	; 0
   11aae:	69 cd       	rjmp	.-1326   	; 0x11582 <mp_binary_op>
   11ab0:	08 95       	ret
   11ab2:	8d 31       	cpi	r24, 0x1D	; 29
   11ab4:	f9 f4       	brne	.+62     	; 0x11af4 <mp_obj_int_binary_op_extra_cases+0x60>
   11ab6:	ca 01       	movw	r24, r20
   11ab8:	87 70       	andi	r24, 0x07	; 7
   11aba:	99 27       	eor	r25, r25
   11abc:	02 97       	sbiw	r24, 0x02	; 2
   11abe:	a9 f0       	breq	.+42     	; 0x11aea <mp_obj_int_binary_op_extra_cases+0x56>
   11ac0:	ca 01       	movw	r24, r20
   11ac2:	83 70       	andi	r24, 0x03	; 3
   11ac4:	99 27       	eor	r25, r25
   11ac6:	89 2b       	or	r24, r25
   11ac8:	c1 f4       	brne	.+48     	; 0x11afa <mp_obj_int_binary_op_extra_cases+0x66>
   11aca:	a0 81       	ld	r26, Z
   11acc:	b1 81       	ldd	r27, Z+1	; 0x01
   11ace:	1e 96       	adiw	r26, 0x0e	; 14
   11ad0:	8d 91       	ld	r24, X+
   11ad2:	9c 91       	ld	r25, X
   11ad4:	1f 97       	sbiw	r26, 0x0f	; 15
   11ad6:	81 5a       	subi	r24, 0xA1	; 161
   11ad8:	98 47       	sbci	r25, 0x78	; 120
   11ada:	39 f0       	breq	.+14     	; 0x11aea <mp_obj_int_binary_op_extra_cases+0x56>
   11adc:	8a e1       	ldi	r24, 0x1A	; 26
   11ade:	ae 3a       	cpi	r26, 0xAE	; 174
   11ae0:	b8 07       	cpc	r27, r24
   11ae2:	19 f0       	breq	.+6      	; 0x11aea <mp_obj_int_binary_op_extra_cases+0x56>
   11ae4:	ac 52       	subi	r26, 0x2C	; 44
   11ae6:	bd 41       	sbci	r27, 0x1D	; 29
   11ae8:	59 f4       	brne	.+22     	; 0x11b00 <mp_obj_int_binary_op_extra_cases+0x6c>
   11aea:	ab 01       	movw	r20, r22
   11aec:	bf 01       	movw	r22, r30
   11aee:	8d e1       	ldi	r24, 0x1D	; 29
   11af0:	48 cd       	rjmp	.-1392   	; 0x11582 <mp_binary_op>
   11af2:	08 95       	ret
   11af4:	80 e0       	ldi	r24, 0x00	; 0
   11af6:	90 e0       	ldi	r25, 0x00	; 0
   11af8:	08 95       	ret
   11afa:	80 e0       	ldi	r24, 0x00	; 0
   11afc:	90 e0       	ldi	r25, 0x00	; 0
   11afe:	08 95       	ret
   11b00:	80 e0       	ldi	r24, 0x00	; 0
   11b02:	90 e0       	ldi	r25, 0x00	; 0
   11b04:	08 95       	ret

00011b06 <mp_obj_int_binary_op>:
   11b06:	c6 cf       	rjmp	.-116    	; 0x11a94 <mp_obj_int_binary_op_extra_cases>
   11b08:	08 95       	ret

00011b0a <mp_quicksort>:
   11b0a:	6f 92       	push	r6
   11b0c:	7f 92       	push	r7
   11b0e:	8f 92       	push	r8
   11b10:	9f 92       	push	r9
   11b12:	af 92       	push	r10
   11b14:	bf 92       	push	r11
   11b16:	cf 92       	push	r12
   11b18:	df 92       	push	r13
   11b1a:	ef 92       	push	r14
   11b1c:	ff 92       	push	r15
   11b1e:	0f 93       	push	r16
   11b20:	1f 93       	push	r17
   11b22:	cf 93       	push	r28
   11b24:	df 93       	push	r29
   11b26:	3c 01       	movw	r6, r24
   11b28:	4b 01       	movw	r8, r22
   11b2a:	8a 01       	movw	r16, r20
   11b2c:	69 01       	movw	r12, r18
   11b2e:	86 17       	cp	r24, r22
   11b30:	97 07       	cpc	r25, r23
   11b32:	08 f0       	brcs	.+2      	; 0x11b36 <mp_quicksort+0x2c>
   11b34:	7f c0       	rjmp	.+254    	; 0x11c34 <mp_quicksort+0x12a>
   11b36:	73 01       	movw	r14, r6
   11b38:	82 e0       	ldi	r24, 0x02	; 2
   11b3a:	e8 1a       	sub	r14, r24
   11b3c:	f1 08       	sbc	r15, r1
   11b3e:	01 15       	cp	r16, r1
   11b40:	11 05       	cpc	r17, r1
   11b42:	21 f4       	brne	.+8      	; 0x11b4c <mp_quicksort+0x42>
   11b44:	f4 01       	movw	r30, r8
   11b46:	a0 80       	ld	r10, Z
   11b48:	b1 80       	ldd	r11, Z+1	; 0x01
   11b4a:	07 c0       	rjmp	.+14     	; 0x11b5a <mp_quicksort+0x50>
   11b4c:	f4 01       	movw	r30, r8
   11b4e:	60 81       	ld	r22, Z
   11b50:	71 81       	ldd	r23, Z+1	; 0x01
   11b52:	c8 01       	movw	r24, r16
   11b54:	0e 94 29 25 	call	0x4a52	; 0x4a52 <mp_call_function_1>
   11b58:	5c 01       	movw	r10, r24
   11b5a:	e4 01       	movw	r28, r8
   11b5c:	f2 e0       	ldi	r31, 0x02	; 2
   11b5e:	ef 0e       	add	r14, r31
   11b60:	f1 1c       	adc	r15, r1
   11b62:	ec 16       	cp	r14, r28
   11b64:	fd 06       	cpc	r15, r29
   11b66:	a0 f4       	brcc	.+40     	; 0x11b90 <mp_quicksort+0x86>
   11b68:	01 15       	cp	r16, r1
   11b6a:	11 05       	cpc	r17, r1
   11b6c:	21 f4       	brne	.+8      	; 0x11b76 <mp_quicksort+0x6c>
   11b6e:	f7 01       	movw	r30, r14
   11b70:	60 81       	ld	r22, Z
   11b72:	71 81       	ldd	r23, Z+1	; 0x01
   11b74:	07 c0       	rjmp	.+14     	; 0x11b84 <mp_quicksort+0x7a>
   11b76:	f7 01       	movw	r30, r14
   11b78:	60 81       	ld	r22, Z
   11b7a:	71 81       	ldd	r23, Z+1	; 0x01
   11b7c:	c8 01       	movw	r24, r16
   11b7e:	0e 94 29 25 	call	0x4a52	; 0x4a52 <mp_call_function_1>
   11b82:	bc 01       	movw	r22, r24
   11b84:	a5 01       	movw	r20, r10
   11b86:	80 e0       	ldi	r24, 0x00	; 0
   11b88:	fc dc       	rcall	.-1544   	; 0x11582 <mp_binary_op>
   11b8a:	c8 16       	cp	r12, r24
   11b8c:	d9 06       	cpc	r13, r25
   11b8e:	31 f3       	breq	.-52     	; 0x11b5c <mp_quicksort+0x52>
   11b90:	22 97       	sbiw	r28, 0x02	; 2
   11b92:	ec 16       	cp	r14, r28
   11b94:	fd 06       	cpc	r15, r29
   11b96:	48 f5       	brcc	.+82     	; 0x11bea <mp_quicksort+0xe0>
   11b98:	01 15       	cp	r16, r1
   11b9a:	11 05       	cpc	r17, r1
   11b9c:	19 f4       	brne	.+6      	; 0x11ba4 <mp_quicksort+0x9a>
   11b9e:	48 81       	ld	r20, Y
   11ba0:	59 81       	ldd	r21, Y+1	; 0x01
   11ba2:	06 c0       	rjmp	.+12     	; 0x11bb0 <mp_quicksort+0xa6>
   11ba4:	68 81       	ld	r22, Y
   11ba6:	79 81       	ldd	r23, Y+1	; 0x01
   11ba8:	c8 01       	movw	r24, r16
   11baa:	0e 94 29 25 	call	0x4a52	; 0x4a52 <mp_call_function_1>
   11bae:	ac 01       	movw	r20, r24
   11bb0:	b5 01       	movw	r22, r10
   11bb2:	80 e0       	ldi	r24, 0x00	; 0
   11bb4:	e6 dc       	rcall	.-1588   	; 0x11582 <mp_binary_op>
   11bb6:	c8 16       	cp	r12, r24
   11bb8:	d9 06       	cpc	r13, r25
   11bba:	51 f3       	breq	.-44     	; 0x11b90 <mp_quicksort+0x86>
   11bbc:	31 c0       	rjmp	.+98     	; 0x11c20 <mp_quicksort+0x116>
   11bbe:	96 01       	movw	r18, r12
   11bc0:	a8 01       	movw	r20, r16
   11bc2:	be 01       	movw	r22, r28
   11bc4:	c3 01       	movw	r24, r6
   11bc6:	a1 df       	rcall	.-190    	; 0x11b0a <mp_quicksort>
   11bc8:	37 01       	movw	r6, r14
   11bca:	f2 e0       	ldi	r31, 0x02	; 2
   11bcc:	6f 0e       	add	r6, r31
   11bce:	71 1c       	adc	r7, r1
   11bd0:	07 c0       	rjmp	.+14     	; 0x11be0 <mp_quicksort+0xd6>
   11bd2:	96 01       	movw	r18, r12
   11bd4:	a8 01       	movw	r20, r16
   11bd6:	b4 01       	movw	r22, r8
   11bd8:	c7 01       	movw	r24, r14
   11bda:	02 96       	adiw	r24, 0x02	; 2
   11bdc:	96 df       	rcall	.-212    	; 0x11b0a <mp_quicksort>
   11bde:	4e 01       	movw	r8, r28
   11be0:	68 14       	cp	r6, r8
   11be2:	79 04       	cpc	r7, r9
   11be4:	08 f4       	brcc	.+2      	; 0x11be8 <mp_quicksort+0xde>
   11be6:	a7 cf       	rjmp	.-178    	; 0x11b36 <mp_quicksort+0x2c>
   11be8:	25 c0       	rjmp	.+74     	; 0x11c34 <mp_quicksort+0x12a>
   11bea:	f7 01       	movw	r30, r14
   11bec:	80 81       	ld	r24, Z
   11bee:	91 81       	ldd	r25, Z+1	; 0x01
   11bf0:	f4 01       	movw	r30, r8
   11bf2:	20 81       	ld	r18, Z
   11bf4:	31 81       	ldd	r19, Z+1	; 0x01
   11bf6:	f7 01       	movw	r30, r14
   11bf8:	31 83       	std	Z+1, r19	; 0x01
   11bfa:	20 83       	st	Z, r18
   11bfc:	f4 01       	movw	r30, r8
   11bfe:	91 83       	std	Z+1, r25	; 0x01
   11c00:	80 83       	st	Z, r24
   11c02:	9e 01       	movw	r18, r28
   11c04:	26 19       	sub	r18, r6
   11c06:	37 09       	sbc	r19, r7
   11c08:	35 95       	asr	r19
   11c0a:	27 95       	ror	r18
   11c0c:	c4 01       	movw	r24, r8
   11c0e:	8e 19       	sub	r24, r14
   11c10:	9f 09       	sbc	r25, r15
   11c12:	95 95       	asr	r25
   11c14:	87 95       	ror	r24
   11c16:	01 97       	sbiw	r24, 0x01	; 1
   11c18:	28 17       	cp	r18, r24
   11c1a:	39 07       	cpc	r19, r25
   11c1c:	84 f2       	brlt	.-96     	; 0x11bbe <mp_quicksort+0xb4>
   11c1e:	d9 cf       	rjmp	.-78     	; 0x11bd2 <mp_quicksort+0xc8>
   11c20:	f7 01       	movw	r30, r14
   11c22:	80 81       	ld	r24, Z
   11c24:	91 81       	ldd	r25, Z+1	; 0x01
   11c26:	28 81       	ld	r18, Y
   11c28:	39 81       	ldd	r19, Y+1	; 0x01
   11c2a:	31 83       	std	Z+1, r19	; 0x01
   11c2c:	20 83       	st	Z, r18
   11c2e:	99 83       	std	Y+1, r25	; 0x01
   11c30:	88 83       	st	Y, r24
   11c32:	94 cf       	rjmp	.-216    	; 0x11b5c <mp_quicksort+0x52>
   11c34:	df 91       	pop	r29
   11c36:	cf 91       	pop	r28
   11c38:	1f 91       	pop	r17
   11c3a:	0f 91       	pop	r16
   11c3c:	ff 90       	pop	r15
   11c3e:	ef 90       	pop	r14
   11c40:	df 90       	pop	r13
   11c42:	cf 90       	pop	r12
   11c44:	bf 90       	pop	r11
   11c46:	af 90       	pop	r10
   11c48:	9f 90       	pop	r9
   11c4a:	8f 90       	pop	r8
   11c4c:	7f 90       	pop	r7
   11c4e:	6f 90       	pop	r6
   11c50:	08 95       	ret

00011c52 <mp_obj_list_sort>:
   11c52:	cf 92       	push	r12
   11c54:	df 92       	push	r13
   11c56:	ef 92       	push	r14
   11c58:	ff 92       	push	r15
   11c5a:	0f 93       	push	r16
   11c5c:	1f 93       	push	r17
   11c5e:	cf 93       	push	r28
   11c60:	df 93       	push	r29
   11c62:	00 d0       	rcall	.+0      	; 0x11c64 <mp_obj_list_sort+0x12>
   11c64:	00 d0       	rcall	.+0      	; 0x11c66 <mp_obj_list_sort+0x14>
   11c66:	cd b7       	in	r28, 0x3d	; 61
   11c68:	de b7       	in	r29, 0x3e	; 62
   11c6a:	6b 01       	movw	r12, r22
   11c6c:	6e 5f       	subi	r22, 0xFE	; 254
   11c6e:	7f 4f       	sbci	r23, 0xFF	; 255
   11c70:	9e 01       	movw	r18, r28
   11c72:	2f 5f       	subi	r18, 0xFF	; 255
   11c74:	3f 4f       	sbci	r19, 0xFF	; 255
   11c76:	79 01       	movw	r14, r18
   11c78:	07 e7       	ldi	r16, 0x77	; 119
   11c7a:	17 e1       	ldi	r17, 0x17	; 23
   11c7c:	22 e0       	ldi	r18, 0x02	; 2
   11c7e:	30 e0       	ldi	r19, 0x00	; 0
   11c80:	01 97       	sbiw	r24, 0x01	; 1
   11c82:	0e 94 94 40 	call	0x8128	; 0x8128 <mp_arg_parse_all>
   11c86:	d6 01       	movw	r26, r12
   11c88:	ed 91       	ld	r30, X+
   11c8a:	fc 91       	ld	r31, X
   11c8c:	cf 01       	movw	r24, r30
   11c8e:	83 70       	andi	r24, 0x03	; 3
   11c90:	99 27       	eor	r25, r25
   11c92:	89 2b       	or	r24, r25
   11c94:	29 f4       	brne	.+10     	; 0x11ca0 <mp_obj_list_sort+0x4e>
   11c96:	80 81       	ld	r24, Z
   11c98:	91 81       	ldd	r25, Z+1	; 0x01
   11c9a:	8c 52       	subi	r24, 0x2C	; 44
   11c9c:	9d 41       	sbci	r25, 0x1D	; 29
   11c9e:	11 f0       	breq	.+4      	; 0x11ca4 <mp_obj_list_sort+0x52>
   11ca0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   11ca4:	64 81       	ldd	r22, Z+4	; 0x04
   11ca6:	75 81       	ldd	r23, Z+5	; 0x05
   11ca8:	62 30       	cpi	r22, 0x02	; 2
   11caa:	71 05       	cpc	r23, r1
   11cac:	c0 f0       	brcs	.+48     	; 0x11cde <mp_obj_list_sort+0x8c>
   11cae:	8b 81       	ldd	r24, Y+3	; 0x03
   11cb0:	81 11       	cpse	r24, r1
   11cb2:	03 c0       	rjmp	.+6      	; 0x11cba <mp_obj_list_sort+0x68>
   11cb4:	2e e1       	ldi	r18, 0x1E	; 30
   11cb6:	30 e0       	ldi	r19, 0x00	; 0
   11cb8:	02 c0       	rjmp	.+4      	; 0x11cbe <mp_obj_list_sort+0x6c>
   11cba:	2e e0       	ldi	r18, 0x0E	; 14
   11cbc:	30 e0       	ldi	r19, 0x00	; 0
   11cbe:	49 81       	ldd	r20, Y+1	; 0x01
   11cc0:	5a 81       	ldd	r21, Y+2	; 0x02
   11cc2:	46 30       	cpi	r20, 0x06	; 6
   11cc4:	51 05       	cpc	r21, r1
   11cc6:	11 f4       	brne	.+4      	; 0x11ccc <mp_obj_list_sort+0x7a>
   11cc8:	40 e0       	ldi	r20, 0x00	; 0
   11cca:	50 e0       	ldi	r21, 0x00	; 0
   11ccc:	86 81       	ldd	r24, Z+6	; 0x06
   11cce:	97 81       	ldd	r25, Z+7	; 0x07
   11cd0:	61 50       	subi	r22, 0x01	; 1
   11cd2:	70 48       	sbci	r23, 0x80	; 128
   11cd4:	66 0f       	add	r22, r22
   11cd6:	77 1f       	adc	r23, r23
   11cd8:	68 0f       	add	r22, r24
   11cda:	79 1f       	adc	r23, r25
   11cdc:	16 df       	rcall	.-468    	; 0x11b0a <mp_quicksort>
   11cde:	86 e0       	ldi	r24, 0x06	; 6
   11ce0:	90 e0       	ldi	r25, 0x00	; 0
   11ce2:	0f 90       	pop	r0
   11ce4:	0f 90       	pop	r0
   11ce6:	0f 90       	pop	r0
   11ce8:	0f 90       	pop	r0
   11cea:	df 91       	pop	r29
   11cec:	cf 91       	pop	r28
   11cee:	1f 91       	pop	r17
   11cf0:	0f 91       	pop	r16
   11cf2:	ff 90       	pop	r15
   11cf4:	ef 90       	pop	r14
   11cf6:	df 90       	pop	r13
   11cf8:	cf 90       	pop	r12
   11cfa:	08 95       	ret

00011cfc <instance_binary_op>:
   11cfc:	8f 92       	push	r8
   11cfe:	9f 92       	push	r9
   11d00:	af 92       	push	r10
   11d02:	bf 92       	push	r11
   11d04:	cf 92       	push	r12
   11d06:	df 92       	push	r13
   11d08:	ef 92       	push	r14
   11d0a:	ff 92       	push	r15
   11d0c:	0f 93       	push	r16
   11d0e:	1f 93       	push	r17
   11d10:	cf 93       	push	r28
   11d12:	df 93       	push	r29
   11d14:	cd b7       	in	r28, 0x3d	; 61
   11d16:	de b7       	in	r29, 0x3e	; 62
   11d18:	2f 97       	sbiw	r28, 0x0f	; 15
   11d1a:	0f b6       	in	r0, 0x3f	; 63
   11d1c:	f8 94       	cli
   11d1e:	de bf       	out	0x3e, r29	; 62
   11d20:	0f be       	out	0x3f, r0	; 63
   11d22:	cd bf       	out	0x3d, r28	; 61
   11d24:	98 2e       	mov	r9, r24
   11d26:	8b 01       	movw	r16, r22
   11d28:	5a 01       	movw	r10, r20
   11d2a:	0f 2e       	mov	r0, r31
   11d2c:	f6 e0       	ldi	r31, 0x06	; 6
   11d2e:	8f 2e       	mov	r8, r31
   11d30:	f0 2d       	mov	r31, r0
   11d32:	ce 01       	movw	r24, r28
   11d34:	01 96       	adiw	r24, 0x01	; 1
   11d36:	7c 01       	movw	r14, r24
   11d38:	0f 2e       	mov	r0, r31
   11d3a:	fe e0       	ldi	r31, 0x0E	; 14
   11d3c:	cf 2e       	mov	r12, r31
   11d3e:	d1 2c       	mov	r13, r1
   11d40:	f0 2d       	mov	r31, r0
   11d42:	e9 2d       	mov	r30, r9
   11d44:	f0 e0       	ldi	r31, 0x00	; 0
   11d46:	ed 58       	subi	r30, 0x8D	; 141
   11d48:	f5 4e       	sbci	r31, 0xE5	; 229
   11d4a:	80 81       	ld	r24, Z
   11d4c:	90 e0       	ldi	r25, 0x00	; 0
   11d4e:	f7 01       	movw	r30, r14
   11d50:	28 2d       	mov	r18, r8
   11d52:	11 92       	st	Z+, r1
   11d54:	2a 95       	dec	r18
   11d56:	e9 f7       	brne	.-6      	; 0x11d52 <instance_binary_op+0x56>
   11d58:	18 87       	std	Y+8, r17	; 0x08
   11d5a:	0f 83       	std	Y+7, r16	; 0x07
   11d5c:	9a 87       	std	Y+10, r25	; 0x0a
   11d5e:	89 87       	std	Y+9, r24	; 0x09
   11d60:	dc 86       	std	Y+12, r13	; 0x0c
   11d62:	cb 86       	std	Y+11, r12	; 0x0b
   11d64:	fe 86       	std	Y+14, r15	; 0x0e
   11d66:	ed 86       	std	Y+13, r14	; 0x0d
   11d68:	1f 86       	std	Y+15, r1	; 0x0f
   11d6a:	f8 01       	movw	r30, r16
   11d6c:	60 81       	ld	r22, Z
   11d6e:	71 81       	ldd	r23, Z+1	; 0x01
   11d70:	ce 01       	movw	r24, r28
   11d72:	07 96       	adiw	r24, 0x07	; 7
   11d74:	0e 94 09 43 	call	0x8612	; 0x8612 <mp_obj_class_lookup>
   11d78:	89 81       	ldd	r24, Y+1	; 0x01
   11d7a:	9a 81       	ldd	r25, Y+2	; 0x02
   11d7c:	84 30       	cpi	r24, 0x04	; 4
   11d7e:	91 05       	cpc	r25, r1
   11d80:	39 f4       	brne	.+14     	; 0x11d90 <instance_binary_op+0x94>
   11d82:	f8 01       	movw	r30, r16
   11d84:	60 85       	ldd	r22, Z+8	; 0x08
   11d86:	71 85       	ldd	r23, Z+9	; 0x09
   11d88:	a5 01       	movw	r20, r10
   11d8a:	89 2d       	mov	r24, r9
   11d8c:	fa db       	rcall	.-2060   	; 0x11582 <mp_binary_op>
   11d8e:	15 c0       	rjmp	.+42     	; 0x11dba <instance_binary_op+0xbe>
   11d90:	00 97       	sbiw	r24, 0x00	; 0
   11d92:	61 f0       	breq	.+24     	; 0x11dac <instance_binary_op+0xb0>
   11d94:	be 82       	std	Y+6, r11	; 0x06
   11d96:	ad 82       	std	Y+5, r10	; 0x05
   11d98:	ae 01       	movw	r20, r28
   11d9a:	4f 5f       	subi	r20, 0xFF	; 255
   11d9c:	5f 4f       	sbci	r21, 0xFF	; 255
   11d9e:	60 e0       	ldi	r22, 0x00	; 0
   11da0:	70 e0       	ldi	r23, 0x00	; 0
   11da2:	81 e0       	ldi	r24, 0x01	; 1
   11da4:	90 e0       	ldi	r25, 0x00	; 0
   11da6:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   11daa:	07 c0       	rjmp	.+14     	; 0x11dba <instance_binary_op+0xbe>
   11dac:	27 ef       	ldi	r18, 0xF7	; 247
   11dae:	29 0d       	add	r18, r9
   11db0:	2d 30       	cpi	r18, 0x0D	; 13
   11db2:	18 f4       	brcc	.+6      	; 0x11dba <instance_binary_op+0xbe>
   11db4:	fd e0       	ldi	r31, 0x0D	; 13
   11db6:	9f 0e       	add	r9, r31
   11db8:	c4 cf       	rjmp	.-120    	; 0x11d42 <instance_binary_op+0x46>
   11dba:	2f 96       	adiw	r28, 0x0f	; 15
   11dbc:	0f b6       	in	r0, 0x3f	; 63
   11dbe:	f8 94       	cli
   11dc0:	de bf       	out	0x3e, r29	; 62
   11dc2:	0f be       	out	0x3f, r0	; 63
   11dc4:	cd bf       	out	0x3d, r28	; 61
   11dc6:	df 91       	pop	r29
   11dc8:	cf 91       	pop	r28
   11dca:	1f 91       	pop	r17
   11dcc:	0f 91       	pop	r16
   11dce:	ff 90       	pop	r15
   11dd0:	ef 90       	pop	r14
   11dd2:	df 90       	pop	r13
   11dd4:	cf 90       	pop	r12
   11dd6:	bf 90       	pop	r11
   11dd8:	af 90       	pop	r10
   11dda:	9f 90       	pop	r9
   11ddc:	8f 90       	pop	r8
   11dde:	08 95       	ret

00011de0 <mp_seq_cmp_objs>:
   11de0:	2f 92       	push	r2
   11de2:	3f 92       	push	r3
   11de4:	4f 92       	push	r4
   11de6:	5f 92       	push	r5
   11de8:	6f 92       	push	r6
   11dea:	7f 92       	push	r7
   11dec:	8f 92       	push	r8
   11dee:	9f 92       	push	r9
   11df0:	af 92       	push	r10
   11df2:	bf 92       	push	r11
   11df4:	cf 92       	push	r12
   11df6:	df 92       	push	r13
   11df8:	ef 92       	push	r14
   11dfa:	ff 92       	push	r15
   11dfc:	0f 93       	push	r16
   11dfe:	1f 93       	push	r17
   11e00:	cf 93       	push	r28
   11e02:	df 93       	push	r29
   11e04:	6c 01       	movw	r12, r24
   11e06:	2a 01       	movw	r4, r20
   11e08:	82 e0       	ldi	r24, 0x02	; 2
   11e0a:	c8 16       	cp	r12, r24
   11e0c:	d1 04       	cpc	r13, r1
   11e0e:	29 f4       	brne	.+10     	; 0x11e1a <mp_seq_cmp_objs+0x3a>
   11e10:	40 17       	cp	r20, r16
   11e12:	51 07       	cpc	r21, r17
   11e14:	09 f0       	breq	.+2      	; 0x11e18 <mp_seq_cmp_objs+0x38>
   11e16:	6c c0       	rjmp	.+216    	; 0x11ef0 <mp_seq_cmp_objs+0x110>
   11e18:	6d c0       	rjmp	.+218    	; 0x11ef4 <mp_seq_cmp_objs+0x114>
   11e1a:	c1 14       	cp	r12, r1
   11e1c:	d1 04       	cpc	r13, r1
   11e1e:	99 f0       	breq	.+38     	; 0x11e46 <mp_seq_cmp_objs+0x66>
   11e20:	e3 e0       	ldi	r30, 0x03	; 3
   11e22:	ce 16       	cp	r12, r30
   11e24:	d1 04       	cpc	r13, r1
   11e26:	e1 f4       	brne	.+56     	; 0x11e60 <mp_seq_cmp_objs+0x80>
   11e28:	85 2d       	mov	r24, r5
   11e2a:	28 01       	movw	r4, r16
   11e2c:	04 2f       	mov	r16, r20
   11e2e:	18 2f       	mov	r17, r24
   11e30:	96 2f       	mov	r25, r22
   11e32:	87 2f       	mov	r24, r23
   11e34:	62 2f       	mov	r22, r18
   11e36:	73 2f       	mov	r23, r19
   11e38:	29 2f       	mov	r18, r25
   11e3a:	38 2f       	mov	r19, r24
   11e3c:	68 94       	set
   11e3e:	cc 24       	eor	r12, r12
   11e40:	c2 f8       	bld	r12, 2
   11e42:	d1 2c       	mov	r13, r1
   11e44:	0d c0       	rjmp	.+26     	; 0x11e60 <mp_seq_cmp_objs+0x80>
   11e46:	85 2d       	mov	r24, r5
   11e48:	28 01       	movw	r4, r16
   11e4a:	04 2f       	mov	r16, r20
   11e4c:	18 2f       	mov	r17, r24
   11e4e:	96 2f       	mov	r25, r22
   11e50:	87 2f       	mov	r24, r23
   11e52:	62 2f       	mov	r22, r18
   11e54:	73 2f       	mov	r23, r19
   11e56:	29 2f       	mov	r18, r25
   11e58:	38 2f       	mov	r19, r24
   11e5a:	cc 24       	eor	r12, r12
   11e5c:	c3 94       	inc	r12
   11e5e:	d1 2c       	mov	r13, r1
   11e60:	12 01       	movw	r2, r4
   11e62:	04 15       	cp	r16, r4
   11e64:	15 05       	cpc	r17, r5
   11e66:	08 f4       	brcc	.+2      	; 0x11e6a <mp_seq_cmp_objs+0x8a>
   11e68:	18 01       	movw	r2, r16
   11e6a:	21 14       	cp	r2, r1
   11e6c:	31 04       	cpc	r3, r1
   11e6e:	11 f4       	brne	.+4      	; 0x11e74 <mp_seq_cmp_objs+0x94>
   11e70:	30 c0       	rjmp	.+96     	; 0x11ed2 <mp_seq_cmp_objs+0xf2>
   11e72:	18 01       	movw	r2, r16
   11e74:	e2 2e       	mov	r14, r18
   11e76:	f3 2e       	mov	r15, r19
   11e78:	c6 2f       	mov	r28, r22
   11e7a:	d7 2f       	mov	r29, r23
   11e7c:	a1 2c       	mov	r10, r1
   11e7e:	b1 2c       	mov	r11, r1
   11e80:	47 01       	movw	r8, r14
   11e82:	f2 e0       	ldi	r31, 0x02	; 2
   11e84:	ef 0e       	add	r14, r31
   11e86:	f1 1c       	adc	r15, r1
   11e88:	3e 01       	movw	r6, r28
   11e8a:	22 96       	adiw	r28, 0x02	; 2
   11e8c:	f4 01       	movw	r30, r8
   11e8e:	60 81       	ld	r22, Z
   11e90:	71 81       	ldd	r23, Z+1	; 0x01
   11e92:	f3 01       	movw	r30, r6
   11e94:	80 81       	ld	r24, Z
   11e96:	91 81       	ldd	r25, Z+1	; 0x01
   11e98:	0e 94 e6 20 	call	0x41cc	; 0x41cc <mp_obj_equal>
   11e9c:	28 2f       	mov	r18, r24
   11e9e:	88 23       	and	r24, r24
   11ea0:	39 f0       	breq	.+14     	; 0x11eb0 <mp_seq_cmp_objs+0xd0>
   11ea2:	ff ef       	ldi	r31, 0xFF	; 255
   11ea4:	af 1a       	sub	r10, r31
   11ea6:	bf 0a       	sbc	r11, r31
   11ea8:	a2 14       	cp	r10, r2
   11eaa:	b3 04       	cpc	r11, r3
   11eac:	49 f7       	brne	.-46     	; 0x11e80 <mp_seq_cmp_objs+0xa0>
   11eae:	11 c0       	rjmp	.+34     	; 0x11ed2 <mp_seq_cmp_objs+0xf2>
   11eb0:	82 e0       	ldi	r24, 0x02	; 2
   11eb2:	c8 16       	cp	r12, r24
   11eb4:	d1 04       	cpc	r13, r1
   11eb6:	19 f1       	breq	.+70     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11eb8:	f4 01       	movw	r30, r8
   11eba:	40 81       	ld	r20, Z
   11ebc:	51 81       	ldd	r21, Z+1	; 0x01
   11ebe:	f3 01       	movw	r30, r6
   11ec0:	60 81       	ld	r22, Z
   11ec2:	71 81       	ldd	r23, Z+1	; 0x01
   11ec4:	8c 2d       	mov	r24, r12
   11ec6:	5d db       	rcall	.-2374   	; 0x11582 <mp_binary_op>
   11ec8:	21 e0       	ldi	r18, 0x01	; 1
   11eca:	4e 97       	sbiw	r24, 0x1e	; 30
   11ecc:	c1 f0       	breq	.+48     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11ece:	20 e0       	ldi	r18, 0x00	; 0
   11ed0:	16 c0       	rjmp	.+44     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11ed2:	40 16       	cp	r4, r16
   11ed4:	51 06       	cpc	r5, r17
   11ed6:	31 f0       	breq	.+12     	; 0x11ee4 <mp_seq_cmp_objs+0x104>
   11ed8:	21 e0       	ldi	r18, 0x01	; 1
   11eda:	40 16       	cp	r4, r16
   11edc:	51 06       	cpc	r5, r17
   11ede:	78 f4       	brcc	.+30     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11ee0:	20 e0       	ldi	r18, 0x00	; 0
   11ee2:	0d c0       	rjmp	.+26     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11ee4:	21 e0       	ldi	r18, 0x01	; 1
   11ee6:	ca 94       	dec	r12
   11ee8:	cd 28       	or	r12, r13
   11eea:	49 f4       	brne	.+18     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11eec:	20 e0       	ldi	r18, 0x00	; 0
   11eee:	07 c0       	rjmp	.+14     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11ef0:	20 e0       	ldi	r18, 0x00	; 0
   11ef2:	05 c0       	rjmp	.+10     	; 0x11efe <mp_seq_cmp_objs+0x11e>
   11ef4:	01 15       	cp	r16, r1
   11ef6:	11 05       	cpc	r17, r1
   11ef8:	09 f0       	breq	.+2      	; 0x11efc <mp_seq_cmp_objs+0x11c>
   11efa:	bb cf       	rjmp	.-138    	; 0x11e72 <mp_seq_cmp_objs+0x92>
   11efc:	21 e0       	ldi	r18, 0x01	; 1
   11efe:	82 2f       	mov	r24, r18
   11f00:	df 91       	pop	r29
   11f02:	cf 91       	pop	r28
   11f04:	1f 91       	pop	r17
   11f06:	0f 91       	pop	r16
   11f08:	ff 90       	pop	r15
   11f0a:	ef 90       	pop	r14
   11f0c:	df 90       	pop	r13
   11f0e:	cf 90       	pop	r12
   11f10:	bf 90       	pop	r11
   11f12:	af 90       	pop	r10
   11f14:	9f 90       	pop	r9
   11f16:	8f 90       	pop	r8
   11f18:	7f 90       	pop	r7
   11f1a:	6f 90       	pop	r6
   11f1c:	5f 90       	pop	r5
   11f1e:	4f 90       	pop	r4
   11f20:	3f 90       	pop	r3
   11f22:	2f 90       	pop	r2
   11f24:	08 95       	ret

00011f26 <mp_obj_tuple_binary_op>:
   11f26:	af 92       	push	r10
   11f28:	bf 92       	push	r11
   11f2a:	cf 92       	push	r12
   11f2c:	df 92       	push	r13
   11f2e:	ef 92       	push	r14
   11f30:	ff 92       	push	r15
   11f32:	0f 93       	push	r16
   11f34:	1f 93       	push	r17
   11f36:	cf 93       	push	r28
   11f38:	df 93       	push	r29
   11f3a:	00 d0       	rcall	.+0      	; 0x11f3c <mp_obj_tuple_binary_op+0x16>
   11f3c:	cd b7       	in	r28, 0x3d	; 61
   11f3e:	de b7       	in	r29, 0x3e	; 62
   11f40:	5b 01       	movw	r10, r22
   11f42:	6a 01       	movw	r12, r20
   11f44:	8e 30       	cpi	r24, 0x0E	; 14
   11f46:	69 f0       	breq	.+26     	; 0x11f62 <mp_obj_tuple_binary_op+0x3c>
   11f48:	20 f4       	brcc	.+8      	; 0x11f52 <mp_obj_tuple_binary_op+0x2c>
   11f4a:	85 30       	cpi	r24, 0x05	; 5
   11f4c:	08 f4       	brcc	.+2      	; 0x11f50 <mp_obj_tuple_binary_op+0x2a>
   11f4e:	74 c0       	rjmp	.+232    	; 0x12038 <mp_obj_tuple_binary_op+0x112>
   11f50:	a4 c0       	rjmp	.+328    	; 0x1209a <mp_obj_tuple_binary_op+0x174>
   11f52:	8b 31       	cpi	r24, 0x1B	; 27
   11f54:	31 f0       	breq	.+12     	; 0x11f62 <mp_obj_tuple_binary_op+0x3c>
   11f56:	8d 31       	cpi	r24, 0x1D	; 29
   11f58:	e1 f1       	breq	.+120    	; 0x11fd2 <mp_obj_tuple_binary_op+0xac>
   11f5a:	80 31       	cpi	r24, 0x10	; 16
   11f5c:	09 f0       	breq	.+2      	; 0x11f60 <mp_obj_tuple_binary_op+0x3a>
   11f5e:	9d c0       	rjmp	.+314    	; 0x1209a <mp_obj_tuple_binary_op+0x174>
   11f60:	38 c0       	rjmp	.+112    	; 0x11fd2 <mp_obj_tuple_binary_op+0xac>
   11f62:	c6 01       	movw	r24, r12
   11f64:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   11f68:	6e ea       	ldi	r22, 0xAE	; 174
   11f6a:	7a e1       	ldi	r23, 0x1A	; 26
   11f6c:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   11f70:	88 23       	and	r24, r24
   11f72:	09 f4       	brne	.+2      	; 0x11f76 <mp_obj_tuple_binary_op+0x50>
   11f74:	95 c0       	rjmp	.+298    	; 0x120a0 <mp_obj_tuple_binary_op+0x17a>
   11f76:	f5 01       	movw	r30, r10
   11f78:	22 81       	ldd	r18, Z+2	; 0x02
   11f7a:	33 81       	ldd	r19, Z+3	; 0x03
   11f7c:	f6 01       	movw	r30, r12
   11f7e:	82 81       	ldd	r24, Z+2	; 0x02
   11f80:	93 81       	ldd	r25, Z+3	; 0x03
   11f82:	60 e0       	ldi	r22, 0x00	; 0
   11f84:	70 e0       	ldi	r23, 0x00	; 0
   11f86:	82 0f       	add	r24, r18
   11f88:	93 1f       	adc	r25, r19
   11f8a:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   11f8e:	7c 01       	movw	r14, r24
   11f90:	8c 01       	movw	r16, r24
   11f92:	0c 5f       	subi	r16, 0xFC	; 252
   11f94:	1f 4f       	sbci	r17, 0xFF	; 255
   11f96:	f5 01       	movw	r30, r10
   11f98:	42 81       	ldd	r20, Z+2	; 0x02
   11f9a:	53 81       	ldd	r21, Z+3	; 0x03
   11f9c:	44 0f       	add	r20, r20
   11f9e:	55 1f       	adc	r21, r21
   11fa0:	b5 01       	movw	r22, r10
   11fa2:	6c 5f       	subi	r22, 0xFC	; 252
   11fa4:	7f 4f       	sbci	r23, 0xFF	; 255
   11fa6:	c8 01       	movw	r24, r16
   11fa8:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   11fac:	f5 01       	movw	r30, r10
   11fae:	82 81       	ldd	r24, Z+2	; 0x02
   11fb0:	93 81       	ldd	r25, Z+3	; 0x03
   11fb2:	88 0f       	add	r24, r24
   11fb4:	99 1f       	adc	r25, r25
   11fb6:	f6 01       	movw	r30, r12
   11fb8:	42 81       	ldd	r20, Z+2	; 0x02
   11fba:	53 81       	ldd	r21, Z+3	; 0x03
   11fbc:	44 0f       	add	r20, r20
   11fbe:	55 1f       	adc	r21, r21
   11fc0:	b6 01       	movw	r22, r12
   11fc2:	6c 5f       	subi	r22, 0xFC	; 252
   11fc4:	7f 4f       	sbci	r23, 0xFF	; 255
   11fc6:	80 0f       	add	r24, r16
   11fc8:	91 1f       	adc	r25, r17
   11fca:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   11fce:	c7 01       	movw	r24, r14
   11fd0:	6f c0       	rjmp	.+222    	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   11fd2:	be 01       	movw	r22, r28
   11fd4:	6f 5f       	subi	r22, 0xFF	; 255
   11fd6:	7f 4f       	sbci	r23, 0xFF	; 255
   11fd8:	c6 01       	movw	r24, r12
   11fda:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <mp_obj_get_int_maybe>
   11fde:	88 23       	and	r24, r24
   11fe0:	29 f1       	breq	.+74     	; 0x1202c <mp_obj_tuple_binary_op+0x106>
   11fe2:	89 81       	ldd	r24, Y+1	; 0x01
   11fe4:	9a 81       	ldd	r25, Y+2	; 0x02
   11fe6:	18 16       	cp	r1, r24
   11fe8:	19 06       	cpc	r1, r25
   11fea:	1c f5       	brge	.+70     	; 0x12032 <mp_obj_tuple_binary_op+0x10c>
   11fec:	f5 01       	movw	r30, r10
   11fee:	22 81       	ldd	r18, Z+2	; 0x02
   11ff0:	33 81       	ldd	r19, Z+3	; 0x03
   11ff2:	60 e0       	ldi	r22, 0x00	; 0
   11ff4:	70 e0       	ldi	r23, 0x00	; 0
   11ff6:	ac 01       	movw	r20, r24
   11ff8:	42 9f       	mul	r20, r18
   11ffa:	c0 01       	movw	r24, r0
   11ffc:	43 9f       	mul	r20, r19
   11ffe:	90 0d       	add	r25, r0
   12000:	52 9f       	mul	r21, r18
   12002:	90 0d       	add	r25, r0
   12004:	11 24       	eor	r1, r1
   12006:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   1200a:	7c 01       	movw	r14, r24
   1200c:	8c 01       	movw	r16, r24
   1200e:	0c 5f       	subi	r16, 0xFC	; 252
   12010:	1f 4f       	sbci	r17, 0xFF	; 255
   12012:	29 81       	ldd	r18, Y+1	; 0x01
   12014:	3a 81       	ldd	r19, Y+2	; 0x02
   12016:	f5 01       	movw	r30, r10
   12018:	42 81       	ldd	r20, Z+2	; 0x02
   1201a:	53 81       	ldd	r21, Z+3	; 0x03
   1201c:	62 e0       	ldi	r22, 0x02	; 2
   1201e:	70 e0       	ldi	r23, 0x00	; 0
   12020:	c5 01       	movw	r24, r10
   12022:	04 96       	adiw	r24, 0x04	; 4
   12024:	0e 94 42 22 	call	0x4484	; 0x4484 <mp_seq_multiply>
   12028:	c7 01       	movw	r24, r14
   1202a:	42 c0       	rjmp	.+132    	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   1202c:	80 e0       	ldi	r24, 0x00	; 0
   1202e:	90 e0       	ldi	r25, 0x00	; 0
   12030:	3f c0       	rjmp	.+126    	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   12032:	8a ea       	ldi	r24, 0xAA	; 170
   12034:	9a e1       	ldi	r25, 0x1A	; 26
   12036:	3c c0       	rjmp	.+120    	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   12038:	e8 2e       	mov	r14, r24
   1203a:	f1 2c       	mov	r15, r1
   1203c:	cb 01       	movw	r24, r22
   1203e:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   12042:	fc 01       	movw	r30, r24
   12044:	84 89       	ldd	r24, Z+20	; 0x14
   12046:	95 89       	ldd	r25, Z+21	; 0x15
   12048:	82 5b       	subi	r24, 0xB2	; 178
   1204a:	93 40       	sbci	r25, 0x03	; 3
   1204c:	11 f0       	breq	.+4      	; 0x12052 <mp_obj_tuple_binary_op+0x12c>
   1204e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   12052:	c6 01       	movw	r24, r12
   12054:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   12058:	fc 01       	movw	r30, r24
   1205a:	84 89       	ldd	r24, Z+20	; 0x14
   1205c:	95 89       	ldd	r25, Z+21	; 0x15
   1205e:	82 5b       	subi	r24, 0xB2	; 178
   12060:	93 40       	sbci	r25, 0x03	; 3
   12062:	41 f0       	breq	.+16     	; 0x12074 <mp_obj_tuple_binary_op+0x14e>
   12064:	6e ea       	ldi	r22, 0xAE	; 174
   12066:	7a e1       	ldi	r23, 0x1A	; 26
   12068:	c6 01       	movw	r24, r12
   1206a:	0e 94 26 22 	call	0x444c	; 0x444c <mp_obj_cast_to_native_base>
   1206e:	6c 01       	movw	r12, r24
   12070:	89 2b       	or	r24, r25
   12072:	c9 f0       	breq	.+50     	; 0x120a6 <mp_obj_tuple_binary_op+0x180>
   12074:	f6 01       	movw	r30, r12
   12076:	02 81       	ldd	r16, Z+2	; 0x02
   12078:	13 81       	ldd	r17, Z+3	; 0x03
   1207a:	96 01       	movw	r18, r12
   1207c:	2c 5f       	subi	r18, 0xFC	; 252
   1207e:	3f 4f       	sbci	r19, 0xFF	; 255
   12080:	f5 01       	movw	r30, r10
   12082:	42 81       	ldd	r20, Z+2	; 0x02
   12084:	53 81       	ldd	r21, Z+3	; 0x03
   12086:	b5 01       	movw	r22, r10
   12088:	6c 5f       	subi	r22, 0xFC	; 252
   1208a:	7f 4f       	sbci	r23, 0xFF	; 255
   1208c:	c7 01       	movw	r24, r14
   1208e:	a8 de       	rcall	.-688    	; 0x11de0 <mp_seq_cmp_objs>
   12090:	81 11       	cpse	r24, r1
   12092:	0c c0       	rjmp	.+24     	; 0x120ac <mp_obj_tuple_binary_op+0x186>
   12094:	8e e0       	ldi	r24, 0x0E	; 14
   12096:	90 e0       	ldi	r25, 0x00	; 0
   12098:	0b c0       	rjmp	.+22     	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   1209a:	80 e0       	ldi	r24, 0x00	; 0
   1209c:	90 e0       	ldi	r25, 0x00	; 0
   1209e:	08 c0       	rjmp	.+16     	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   120a0:	80 e0       	ldi	r24, 0x00	; 0
   120a2:	90 e0       	ldi	r25, 0x00	; 0
   120a4:	05 c0       	rjmp	.+10     	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   120a6:	80 e0       	ldi	r24, 0x00	; 0
   120a8:	90 e0       	ldi	r25, 0x00	; 0
   120aa:	02 c0       	rjmp	.+4      	; 0x120b0 <mp_obj_tuple_binary_op+0x18a>
   120ac:	8e e1       	ldi	r24, 0x1E	; 30
   120ae:	90 e0       	ldi	r25, 0x00	; 0
   120b0:	0f 90       	pop	r0
   120b2:	0f 90       	pop	r0
   120b4:	df 91       	pop	r29
   120b6:	cf 91       	pop	r28
   120b8:	1f 91       	pop	r17
   120ba:	0f 91       	pop	r16
   120bc:	ff 90       	pop	r15
   120be:	ef 90       	pop	r14
   120c0:	df 90       	pop	r13
   120c2:	cf 90       	pop	r12
   120c4:	bf 90       	pop	r11
   120c6:	af 90       	pop	r10
   120c8:	08 95       	ret

000120ca <mp_builtin_divmod>:
   120ca:	ab 01       	movw	r20, r22
   120cc:	bc 01       	movw	r22, r24
   120ce:	83 e2       	ldi	r24, 0x23	; 35
   120d0:	58 ca       	rjmp	.-2896   	; 0x11582 <mp_binary_op>
   120d2:	08 95       	ret

000120d4 <mp_builtin_pow>:
   120d4:	02 97       	sbiw	r24, 0x02	; 2
   120d6:	41 f4       	brne	.+16     	; 0x120e8 <mp_builtin_pow+0x14>
   120d8:	fb 01       	movw	r30, r22
   120da:	42 81       	ldd	r20, Z+2	; 0x02
   120dc:	53 81       	ldd	r21, Z+3	; 0x03
   120de:	60 81       	ld	r22, Z
   120e0:	71 81       	ldd	r23, Z+1	; 0x01
   120e2:	82 e2       	ldi	r24, 0x22	; 34
   120e4:	4e ca       	rjmp	.-2916   	; 0x11582 <mp_binary_op>
   120e6:	08 95       	ret
   120e8:	89 e0       	ldi	r24, 0x09	; 9
   120ea:	9c e0       	ldi	r25, 0x0C	; 12
   120ec:	0e 94 ce 2a 	call	0x559c	; 0x559c <mp_raise_NotImplementedError>

000120f0 <mp_builtin_sum>:
   120f0:	ef 92       	push	r14
   120f2:	ff 92       	push	r15
   120f4:	0f 93       	push	r16
   120f6:	1f 93       	push	r17
   120f8:	cf 93       	push	r28
   120fa:	df 93       	push	r29
   120fc:	cd b7       	in	r28, 0x3d	; 61
   120fe:	de b7       	in	r29, 0x3e	; 62
   12100:	28 97       	sbiw	r28, 0x08	; 8
   12102:	0f b6       	in	r0, 0x3f	; 63
   12104:	f8 94       	cli
   12106:	de bf       	out	0x3e, r29	; 62
   12108:	0f be       	out	0x3f, r0	; 63
   1210a:	cd bf       	out	0x3d, r28	; 61
   1210c:	fb 01       	movw	r30, r22
   1210e:	01 97       	sbiw	r24, 0x01	; 1
   12110:	19 f0       	breq	.+6      	; 0x12118 <mp_builtin_sum+0x28>
   12112:	02 81       	ldd	r16, Z+2	; 0x02
   12114:	13 81       	ldd	r17, Z+3	; 0x03
   12116:	02 c0       	rjmp	.+4      	; 0x1211c <mp_builtin_sum+0x2c>
   12118:	01 e0       	ldi	r16, 0x01	; 1
   1211a:	10 e0       	ldi	r17, 0x00	; 0
   1211c:	be 01       	movw	r22, r28
   1211e:	6f 5f       	subi	r22, 0xFF	; 255
   12120:	7f 4f       	sbci	r23, 0xFF	; 255
   12122:	80 81       	ld	r24, Z
   12124:	91 81       	ldd	r25, Z+1	; 0x01
   12126:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   1212a:	7c 01       	movw	r14, r24
   1212c:	05 c0       	rjmp	.+10     	; 0x12138 <mp_builtin_sum+0x48>
   1212e:	ac 01       	movw	r20, r24
   12130:	b8 01       	movw	r22, r16
   12132:	8b e1       	ldi	r24, 0x1B	; 27
   12134:	26 da       	rcall	.-2996   	; 0x11582 <mp_binary_op>
   12136:	8c 01       	movw	r16, r24
   12138:	c7 01       	movw	r24, r14
   1213a:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   1213e:	00 97       	sbiw	r24, 0x00	; 0
   12140:	b1 f7       	brne	.-20     	; 0x1212e <mp_builtin_sum+0x3e>
   12142:	c8 01       	movw	r24, r16
   12144:	28 96       	adiw	r28, 0x08	; 8
   12146:	0f b6       	in	r0, 0x3f	; 63
   12148:	f8 94       	cli
   1214a:	de bf       	out	0x3e, r29	; 62
   1214c:	0f be       	out	0x3f, r0	; 63
   1214e:	cd bf       	out	0x3d, r28	; 61
   12150:	df 91       	pop	r29
   12152:	cf 91       	pop	r28
   12154:	1f 91       	pop	r17
   12156:	0f 91       	pop	r16
   12158:	ff 90       	pop	r15
   1215a:	ef 90       	pop	r14
   1215c:	08 95       	ret

0001215e <zip_iternext>:
   1215e:	af 92       	push	r10
   12160:	bf 92       	push	r11
   12162:	cf 92       	push	r12
   12164:	df 92       	push	r13
   12166:	ef 92       	push	r14
   12168:	ff 92       	push	r15
   1216a:	0f 93       	push	r16
   1216c:	1f 93       	push	r17
   1216e:	cf 93       	push	r28
   12170:	df 93       	push	r29
   12172:	7c 01       	movw	r14, r24
   12174:	83 70       	andi	r24, 0x03	; 3
   12176:	99 27       	eor	r25, r25
   12178:	89 2b       	or	r24, r25
   1217a:	31 f4       	brne	.+12     	; 0x12188 <zip_iternext+0x2a>
   1217c:	f7 01       	movw	r30, r14
   1217e:	80 81       	ld	r24, Z
   12180:	91 81       	ldd	r25, Z+1	; 0x01
   12182:	8b 5c       	subi	r24, 0xCB	; 203
   12184:	99 41       	sbci	r25, 0x19	; 25
   12186:	11 f0       	breq	.+4      	; 0x1218c <zip_iternext+0x2e>
   12188:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   1218c:	f7 01       	movw	r30, r14
   1218e:	82 81       	ldd	r24, Z+2	; 0x02
   12190:	93 81       	ldd	r25, Z+3	; 0x03
   12192:	00 97       	sbiw	r24, 0x00	; 0
   12194:	69 f1       	breq	.+90     	; 0x121f0 <zip_iternext+0x92>
   12196:	60 e0       	ldi	r22, 0x00	; 0
   12198:	70 e0       	ldi	r23, 0x00	; 0
   1219a:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   1219e:	6c 01       	movw	r12, r24
   121a0:	f7 01       	movw	r30, r14
   121a2:	82 81       	ldd	r24, Z+2	; 0x02
   121a4:	93 81       	ldd	r25, Z+3	; 0x03
   121a6:	89 2b       	or	r24, r25
   121a8:	31 f1       	breq	.+76     	; 0x121f6 <zip_iternext+0x98>
   121aa:	e7 01       	movw	r28, r14
   121ac:	24 96       	adiw	r28, 0x04	; 4
   121ae:	86 01       	movw	r16, r12
   121b0:	0c 5f       	subi	r16, 0xFC	; 252
   121b2:	1f 4f       	sbci	r17, 0xFF	; 255
   121b4:	a1 2c       	mov	r10, r1
   121b6:	b1 2c       	mov	r11, r1
   121b8:	89 91       	ld	r24, Y+
   121ba:	99 91       	ld	r25, Y+
   121bc:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   121c0:	00 97       	sbiw	r24, 0x00	; 0
   121c2:	31 f4       	brne	.+12     	; 0x121d0 <zip_iternext+0x72>
   121c4:	c6 01       	movw	r24, r12
   121c6:	0e 94 0e 21 	call	0x421c	; 0x421c <mp_obj_tuple_del>
   121ca:	80 e0       	ldi	r24, 0x00	; 0
   121cc:	90 e0       	ldi	r25, 0x00	; 0
   121ce:	15 c0       	rjmp	.+42     	; 0x121fa <zip_iternext+0x9c>
   121d0:	f8 01       	movw	r30, r16
   121d2:	81 93       	st	Z+, r24
   121d4:	91 93       	st	Z+, r25
   121d6:	8f 01       	movw	r16, r30
   121d8:	ff ef       	ldi	r31, 0xFF	; 255
   121da:	af 1a       	sub	r10, r31
   121dc:	bf 0a       	sbc	r11, r31
   121de:	f7 01       	movw	r30, r14
   121e0:	82 81       	ldd	r24, Z+2	; 0x02
   121e2:	93 81       	ldd	r25, Z+3	; 0x03
   121e4:	a8 16       	cp	r10, r24
   121e6:	b9 06       	cpc	r11, r25
   121e8:	38 f3       	brcs	.-50     	; 0x121b8 <zip_iternext+0x5a>
   121ea:	8c 2d       	mov	r24, r12
   121ec:	9d 2d       	mov	r25, r13
   121ee:	05 c0       	rjmp	.+10     	; 0x121fa <zip_iternext+0x9c>
   121f0:	80 e0       	ldi	r24, 0x00	; 0
   121f2:	90 e0       	ldi	r25, 0x00	; 0
   121f4:	02 c0       	rjmp	.+4      	; 0x121fa <zip_iternext+0x9c>
   121f6:	8c 2d       	mov	r24, r12
   121f8:	9d 2d       	mov	r25, r13
   121fa:	df 91       	pop	r29
   121fc:	cf 91       	pop	r28
   121fe:	1f 91       	pop	r17
   12200:	0f 91       	pop	r16
   12202:	ff 90       	pop	r15
   12204:	ef 90       	pop	r14
   12206:	df 90       	pop	r13
   12208:	cf 90       	pop	r12
   1220a:	bf 90       	pop	r11
   1220c:	af 90       	pop	r10
   1220e:	08 95       	ret

00012210 <mp_unpack_ex>:
   12210:	6f 92       	push	r6
   12212:	7f 92       	push	r7
   12214:	8f 92       	push	r8
   12216:	9f 92       	push	r9
   12218:	af 92       	push	r10
   1221a:	bf 92       	push	r11
   1221c:	cf 92       	push	r12
   1221e:	df 92       	push	r13
   12220:	ef 92       	push	r14
   12222:	ff 92       	push	r15
   12224:	0f 93       	push	r16
   12226:	1f 93       	push	r17
   12228:	cf 93       	push	r28
   1222a:	df 93       	push	r29
   1222c:	00 d0       	rcall	.+0      	; 0x1222e <mp_unpack_ex+0x1e>
   1222e:	00 d0       	rcall	.+0      	; 0x12230 <mp_unpack_ex+0x20>
   12230:	00 d0       	rcall	.+0      	; 0x12232 <mp_unpack_ex+0x22>
   12232:	cd b7       	in	r28, 0x3d	; 61
   12234:	de b7       	in	r29, 0x3e	; 62
   12236:	6a 01       	movw	r12, r20
   12238:	7b 01       	movw	r14, r22
   1223a:	ff 24       	eor	r15, r15
   1223c:	07 2f       	mov	r16, r23
   1223e:	11 27       	eor	r17, r17
   12240:	9c 01       	movw	r18, r24
   12242:	23 70       	andi	r18, 0x03	; 3
   12244:	33 27       	eor	r19, r19
   12246:	23 2b       	or	r18, r19
   12248:	09 f0       	breq	.+2      	; 0x1224c <mp_unpack_ex+0x3c>
   1224a:	64 c0       	rjmp	.+200    	; 0x12314 <mp_unpack_ex+0x104>
   1224c:	fc 01       	movw	r30, r24
   1224e:	20 81       	ld	r18, Z
   12250:	31 81       	ldd	r19, Z+1	; 0x01
   12252:	fa e1       	ldi	r31, 0x1A	; 26
   12254:	2e 3a       	cpi	r18, 0xAE	; 174
   12256:	3f 07       	cpc	r19, r31
   12258:	21 f0       	breq	.+8      	; 0x12262 <mp_unpack_ex+0x52>
   1225a:	2c 52       	subi	r18, 0x2C	; 44
   1225c:	3d 41       	sbci	r19, 0x1D	; 29
   1225e:	09 f0       	breq	.+2      	; 0x12262 <mp_unpack_ex+0x52>
   12260:	59 c0       	rjmp	.+178    	; 0x12314 <mp_unpack_ex+0x104>
   12262:	9e 83       	std	Y+6, r25	; 0x06
   12264:	8d 83       	std	Y+5, r24	; 0x05
   12266:	8d 81       	ldd	r24, Y+5	; 0x05
   12268:	9e 81       	ldd	r25, Y+6	; 0x06
   1226a:	ae 01       	movw	r20, r28
   1226c:	4d 5f       	subi	r20, 0xFD	; 253
   1226e:	5f 4f       	sbci	r21, 0xFF	; 255
   12270:	be 01       	movw	r22, r28
   12272:	6f 5f       	subi	r22, 0xFF	; 255
   12274:	7f 4f       	sbci	r23, 0xFF	; 255
   12276:	0e 94 1b 29 	call	0x5236	; 0x5236 <mp_obj_get_array>
   1227a:	89 81       	ldd	r24, Y+1	; 0x01
   1227c:	9a 81       	ldd	r25, Y+2	; 0x02
   1227e:	97 01       	movw	r18, r14
   12280:	20 0f       	add	r18, r16
   12282:	31 1f       	adc	r19, r17
   12284:	82 17       	cp	r24, r18
   12286:	93 07       	cpc	r25, r19
   12288:	08 f4       	brcc	.+2      	; 0x1228c <mp_unpack_ex+0x7c>
   1228a:	ae c0       	rjmp	.+348    	; 0x123e8 <mp_unpack_ex+0x1d8>
   1228c:	01 15       	cp	r16, r1
   1228e:	11 05       	cpc	r17, r1
   12290:	a1 f0       	breq	.+40     	; 0x122ba <mp_unpack_ex+0xaa>
   12292:	ab 81       	ldd	r26, Y+3	; 0x03
   12294:	bc 81       	ldd	r27, Y+4	; 0x04
   12296:	9c 01       	movw	r18, r24
   12298:	22 0f       	add	r18, r18
   1229a:	33 1f       	adc	r19, r19
   1229c:	a2 0f       	add	r26, r18
   1229e:	b3 1f       	adc	r27, r19
   122a0:	f6 01       	movw	r30, r12
   122a2:	a8 01       	movw	r20, r16
   122a4:	44 0f       	add	r20, r20
   122a6:	55 1f       	adc	r21, r21
   122a8:	4c 0d       	add	r20, r12
   122aa:	5d 1d       	adc	r21, r13
   122ac:	3e 91       	ld	r19, -X
   122ae:	2e 91       	ld	r18, -X
   122b0:	21 93       	st	Z+, r18
   122b2:	31 93       	st	Z+, r19
   122b4:	e4 17       	cp	r30, r20
   122b6:	f5 07       	cpc	r31, r21
   122b8:	c9 f7       	brne	.-14     	; 0x122ac <mp_unpack_ex+0x9c>
   122ba:	48 01       	movw	r8, r16
   122bc:	88 0c       	add	r8, r8
   122be:	99 1c       	adc	r9, r9
   122c0:	36 01       	movw	r6, r12
   122c2:	68 0c       	add	r6, r8
   122c4:	79 1c       	adc	r7, r9
   122c6:	57 01       	movw	r10, r14
   122c8:	aa 0c       	add	r10, r10
   122ca:	bb 1c       	adc	r11, r11
   122cc:	6b 81       	ldd	r22, Y+3	; 0x03
   122ce:	7c 81       	ldd	r23, Y+4	; 0x04
   122d0:	6a 0d       	add	r22, r10
   122d2:	7b 1d       	adc	r23, r11
   122d4:	8e 19       	sub	r24, r14
   122d6:	9f 09       	sbc	r25, r15
   122d8:	80 1b       	sub	r24, r16
   122da:	91 0b       	sbc	r25, r17
   122dc:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
   122e0:	f3 01       	movw	r30, r6
   122e2:	91 83       	std	Z+1, r25	; 0x01
   122e4:	80 83       	st	Z, r24
   122e6:	ef 28       	or	r14, r15
   122e8:	91 f0       	breq	.+36     	; 0x1230e <mp_unpack_ex+0xfe>
   122ea:	2b 81       	ldd	r18, Y+3	; 0x03
   122ec:	3c 81       	ldd	r19, Y+4	; 0x04
   122ee:	f9 01       	movw	r30, r18
   122f0:	ea 0d       	add	r30, r10
   122f2:	fb 1d       	adc	r31, r11
   122f4:	42 e0       	ldi	r20, 0x02	; 2
   122f6:	84 0e       	add	r8, r20
   122f8:	91 1c       	adc	r9, r1
   122fa:	d6 01       	movw	r26, r12
   122fc:	a8 0d       	add	r26, r8
   122fe:	b9 1d       	adc	r27, r9
   12300:	92 91       	ld	r25, -Z
   12302:	82 91       	ld	r24, -Z
   12304:	8d 93       	st	X+, r24
   12306:	9d 93       	st	X+, r25
   12308:	2e 17       	cp	r18, r30
   1230a:	3f 07       	cpc	r19, r31
   1230c:	c9 f7       	brne	.-14     	; 0x12300 <mp_unpack_ex+0xf0>
   1230e:	1e 82       	std	Y+6, r1	; 0x06
   12310:	1d 82       	std	Y+5, r1	; 0x05
   12312:	6e c0       	rjmp	.+220    	; 0x123f0 <mp_unpack_ex+0x1e0>
   12314:	60 e0       	ldi	r22, 0x00	; 0
   12316:	70 e0       	ldi	r23, 0x00	; 0
   12318:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   1231c:	5c 01       	movw	r10, r24
   1231e:	1a 82       	std	Y+2, r1	; 0x02
   12320:	19 82       	std	Y+1, r1	; 0x01
   12322:	e1 14       	cp	r14, r1
   12324:	f1 04       	cpc	r15, r1
   12326:	d9 f0       	breq	.+54     	; 0x1235e <mp_unpack_ex+0x14e>
   12328:	47 01       	movw	r8, r14
   1232a:	80 0e       	add	r8, r16
   1232c:	91 1e       	adc	r9, r17
   1232e:	c5 01       	movw	r24, r10
   12330:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   12334:	00 97       	sbiw	r24, 0x00	; 0
   12336:	09 f4       	brne	.+2      	; 0x1233a <mp_unpack_ex+0x12a>
   12338:	57 c0       	rjmp	.+174    	; 0x123e8 <mp_unpack_ex+0x1d8>
   1233a:	29 81       	ldd	r18, Y+1	; 0x01
   1233c:	3a 81       	ldd	r19, Y+2	; 0x02
   1233e:	f4 01       	movw	r30, r8
   12340:	e2 1b       	sub	r30, r18
   12342:	f3 0b       	sbc	r31, r19
   12344:	ee 0f       	add	r30, r30
   12346:	ff 1f       	adc	r31, r31
   12348:	ec 0d       	add	r30, r12
   1234a:	fd 1d       	adc	r31, r13
   1234c:	91 83       	std	Z+1, r25	; 0x01
   1234e:	80 83       	st	Z, r24
   12350:	c9 01       	movw	r24, r18
   12352:	01 96       	adiw	r24, 0x01	; 1
   12354:	9a 83       	std	Y+2, r25	; 0x02
   12356:	89 83       	std	Y+1, r24	; 0x01
   12358:	8e 15       	cp	r24, r14
   1235a:	9f 05       	cpc	r25, r15
   1235c:	40 f3       	brcs	.-48     	; 0x1232e <mp_unpack_ex+0x11e>
   1235e:	60 e0       	ldi	r22, 0x00	; 0
   12360:	70 e0       	ldi	r23, 0x00	; 0
   12362:	80 e0       	ldi	r24, 0x00	; 0
   12364:	90 e0       	ldi	r25, 0x00	; 0
   12366:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
   1236a:	7c 01       	movw	r14, r24
   1236c:	04 c0       	rjmp	.+8      	; 0x12376 <mp_unpack_ex+0x166>
   1236e:	bc 01       	movw	r22, r24
   12370:	c7 01       	movw	r24, r14
   12372:	0e 94 d3 72 	call	0xe5a6	; 0xe5a6 <mp_obj_list_append>
   12376:	c5 01       	movw	r24, r10
   12378:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   1237c:	00 97       	sbiw	r24, 0x00	; 0
   1237e:	b9 f7       	brne	.-18     	; 0x1236e <mp_unpack_ex+0x15e>
   12380:	f7 01       	movw	r30, r14
   12382:	84 81       	ldd	r24, Z+4	; 0x04
   12384:	95 81       	ldd	r25, Z+5	; 0x05
   12386:	80 17       	cp	r24, r16
   12388:	91 07       	cpc	r25, r17
   1238a:	70 f1       	brcs	.+92     	; 0x123e8 <mp_unpack_ex+0x1d8>
   1238c:	d8 01       	movw	r26, r16
   1238e:	aa 0f       	add	r26, r26
   12390:	bb 1f       	adc	r27, r27
   12392:	ac 0d       	add	r26, r12
   12394:	bd 1d       	adc	r27, r13
   12396:	11 96       	adiw	r26, 0x01	; 1
   12398:	fc 92       	st	X, r15
   1239a:	ee 92       	st	-X, r14
   1239c:	01 15       	cp	r16, r1
   1239e:	11 05       	cpc	r17, r1
   123a0:	d9 f0       	breq	.+54     	; 0x123d8 <mp_unpack_ex+0x1c8>
   123a2:	80 e0       	ldi	r24, 0x00	; 0
   123a4:	90 e0       	ldi	r25, 0x00	; 0
   123a6:	f7 01       	movw	r30, r14
   123a8:	24 81       	ldd	r18, Z+4	; 0x04
   123aa:	35 81       	ldd	r19, Z+5	; 0x05
   123ac:	f9 01       	movw	r30, r18
   123ae:	e0 1b       	sub	r30, r16
   123b0:	f1 0b       	sbc	r31, r17
   123b2:	e8 0f       	add	r30, r24
   123b4:	f9 1f       	adc	r31, r25
   123b6:	af 01       	movw	r20, r30
   123b8:	44 0f       	add	r20, r20
   123ba:	55 1f       	adc	r21, r21
   123bc:	f7 01       	movw	r30, r14
   123be:	26 81       	ldd	r18, Z+6	; 0x06
   123c0:	37 81       	ldd	r19, Z+7	; 0x07
   123c2:	fa 01       	movw	r30, r20
   123c4:	e2 0f       	add	r30, r18
   123c6:	f3 1f       	adc	r31, r19
   123c8:	20 81       	ld	r18, Z
   123ca:	31 81       	ldd	r19, Z+1	; 0x01
   123cc:	3e 93       	st	-X, r19
   123ce:	2e 93       	st	-X, r18
   123d0:	01 96       	adiw	r24, 0x01	; 1
   123d2:	08 17       	cp	r16, r24
   123d4:	19 07       	cpc	r17, r25
   123d6:	39 f7       	brne	.-50     	; 0x123a6 <mp_unpack_ex+0x196>
   123d8:	f7 01       	movw	r30, r14
   123da:	84 81       	ldd	r24, Z+4	; 0x04
   123dc:	95 81       	ldd	r25, Z+5	; 0x05
   123de:	80 1b       	sub	r24, r16
   123e0:	91 0b       	sbc	r25, r17
   123e2:	95 83       	std	Z+5, r25	; 0x05
   123e4:	84 83       	std	Z+4, r24	; 0x04
   123e6:	04 c0       	rjmp	.+8      	; 0x123f0 <mp_unpack_ex+0x1e0>
   123e8:	89 e7       	ldi	r24, 0x79	; 121
   123ea:	9b e0       	ldi	r25, 0x0B	; 11
   123ec:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   123f0:	26 96       	adiw	r28, 0x06	; 6
   123f2:	0f b6       	in	r0, 0x3f	; 63
   123f4:	f8 94       	cli
   123f6:	de bf       	out	0x3e, r29	; 62
   123f8:	0f be       	out	0x3f, r0	; 63
   123fa:	cd bf       	out	0x3d, r28	; 61
   123fc:	df 91       	pop	r29
   123fe:	cf 91       	pop	r28
   12400:	1f 91       	pop	r17
   12402:	0f 91       	pop	r16
   12404:	ff 90       	pop	r15
   12406:	ef 90       	pop	r14
   12408:	df 90       	pop	r13
   1240a:	cf 90       	pop	r12
   1240c:	bf 90       	pop	r11
   1240e:	af 90       	pop	r10
   12410:	9f 90       	pop	r9
   12412:	8f 90       	pop	r8
   12414:	7f 90       	pop	r7
   12416:	6f 90       	pop	r6
   12418:	08 95       	ret

0001241a <list_extend_from_iter>:
   1241a:	0f 93       	push	r16
   1241c:	1f 93       	push	r17
   1241e:	cf 93       	push	r28
   12420:	df 93       	push	r29
   12422:	ec 01       	movw	r28, r24
   12424:	cb 01       	movw	r24, r22
   12426:	60 e0       	ldi	r22, 0x00	; 0
   12428:	70 e0       	ldi	r23, 0x00	; 0
   1242a:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   1242e:	8c 01       	movw	r16, r24
   12430:	04 c0       	rjmp	.+8      	; 0x1243a <list_extend_from_iter+0x20>
   12432:	bc 01       	movw	r22, r24
   12434:	ce 01       	movw	r24, r28
   12436:	0e 94 d3 72 	call	0xe5a6	; 0xe5a6 <mp_obj_list_append>
   1243a:	c8 01       	movw	r24, r16
   1243c:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   12440:	00 97       	sbiw	r24, 0x00	; 0
   12442:	b9 f7       	brne	.-18     	; 0x12432 <list_extend_from_iter+0x18>
   12444:	ce 01       	movw	r24, r28
   12446:	df 91       	pop	r29
   12448:	cf 91       	pop	r28
   1244a:	1f 91       	pop	r17
   1244c:	0f 91       	pop	r16
   1244e:	08 95       	ret

00012450 <list_make_new>:
   12450:	0f 93       	push	r16
   12452:	1f 93       	push	r17
   12454:	cf 93       	push	r28
   12456:	df 93       	push	r29
   12458:	eb 01       	movw	r28, r22
   1245a:	ba 01       	movw	r22, r20
   1245c:	89 01       	movw	r16, r18
   1245e:	22 e0       	ldi	r18, 0x02	; 2
   12460:	30 e0       	ldi	r19, 0x00	; 0
   12462:	40 e0       	ldi	r20, 0x00	; 0
   12464:	50 e0       	ldi	r21, 0x00	; 0
   12466:	ce 01       	movw	r24, r28
   12468:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
   1246c:	cd 2b       	or	r28, r29
   1246e:	39 f4       	brne	.+14     	; 0x1247e <list_make_new+0x2e>
   12470:	60 e0       	ldi	r22, 0x00	; 0
   12472:	70 e0       	ldi	r23, 0x00	; 0
   12474:	80 e0       	ldi	r24, 0x00	; 0
   12476:	90 e0       	ldi	r25, 0x00	; 0
   12478:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
   1247c:	0a c0       	rjmp	.+20     	; 0x12492 <list_make_new+0x42>
   1247e:	60 e0       	ldi	r22, 0x00	; 0
   12480:	70 e0       	ldi	r23, 0x00	; 0
   12482:	80 e0       	ldi	r24, 0x00	; 0
   12484:	90 e0       	ldi	r25, 0x00	; 0
   12486:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
   1248a:	f8 01       	movw	r30, r16
   1248c:	60 81       	ld	r22, Z
   1248e:	71 81       	ldd	r23, Z+1	; 0x01
   12490:	c4 df       	rcall	.-120    	; 0x1241a <list_extend_from_iter>
   12492:	df 91       	pop	r29
   12494:	cf 91       	pop	r28
   12496:	1f 91       	pop	r17
   12498:	0f 91       	pop	r16
   1249a:	08 95       	ret

0001249c <mp_builtin_sorted>:
   1249c:	0f 93       	push	r16
   1249e:	1f 93       	push	r17
   124a0:	cf 93       	push	r28
   124a2:	df 93       	push	r29
   124a4:	00 d0       	rcall	.+0      	; 0x124a6 <mp_builtin_sorted+0xa>
   124a6:	cd b7       	in	r28, 0x3d	; 61
   124a8:	de b7       	in	r29, 0x3e	; 62
   124aa:	8a 01       	movw	r16, r20
   124ac:	02 97       	sbiw	r24, 0x02	; 2
   124ae:	20 f0       	brcs	.+8      	; 0x124b8 <mp_builtin_sorted+0x1c>
   124b0:	83 e2       	ldi	r24, 0x23	; 35
   124b2:	9c e0       	ldi	r25, 0x0C	; 12
   124b4:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   124b8:	9b 01       	movw	r18, r22
   124ba:	40 e0       	ldi	r20, 0x00	; 0
   124bc:	50 e0       	ldi	r21, 0x00	; 0
   124be:	61 e0       	ldi	r22, 0x01	; 1
   124c0:	70 e0       	ldi	r23, 0x00	; 0
   124c2:	8c e2       	ldi	r24, 0x2C	; 44
   124c4:	9d e1       	ldi	r25, 0x1D	; 29
   124c6:	c4 df       	rcall	.-120    	; 0x12450 <list_make_new>
   124c8:	9a 83       	std	Y+2, r25	; 0x02
   124ca:	89 83       	std	Y+1, r24	; 0x01
   124cc:	a8 01       	movw	r20, r16
   124ce:	be 01       	movw	r22, r28
   124d0:	6f 5f       	subi	r22, 0xFF	; 255
   124d2:	7f 4f       	sbci	r23, 0xFF	; 255
   124d4:	81 e0       	ldi	r24, 0x01	; 1
   124d6:	90 e0       	ldi	r25, 0x00	; 0
   124d8:	bc db       	rcall	.-2184   	; 0x11c52 <mp_obj_list_sort>
   124da:	89 81       	ldd	r24, Y+1	; 0x01
   124dc:	9a 81       	ldd	r25, Y+2	; 0x02
   124de:	0f 90       	pop	r0
   124e0:	0f 90       	pop	r0
   124e2:	df 91       	pop	r29
   124e4:	cf 91       	pop	r28
   124e6:	1f 91       	pop	r17
   124e8:	0f 91       	pop	r16
   124ea:	08 95       	ret

000124ec <str_join>:
   124ec:	2f 92       	push	r2
   124ee:	3f 92       	push	r3
   124f0:	4f 92       	push	r4
   124f2:	5f 92       	push	r5
   124f4:	6f 92       	push	r6
   124f6:	7f 92       	push	r7
   124f8:	8f 92       	push	r8
   124fa:	9f 92       	push	r9
   124fc:	af 92       	push	r10
   124fe:	bf 92       	push	r11
   12500:	cf 92       	push	r12
   12502:	df 92       	push	r13
   12504:	ef 92       	push	r14
   12506:	ff 92       	push	r15
   12508:	0f 93       	push	r16
   1250a:	1f 93       	push	r17
   1250c:	cf 93       	push	r28
   1250e:	df 93       	push	r29
   12510:	cd b7       	in	r28, 0x3d	; 61
   12512:	de b7       	in	r29, 0x3e	; 62
   12514:	61 97       	sbiw	r28, 0x11	; 17
   12516:	0f b6       	in	r0, 0x3f	; 63
   12518:	f8 94       	cli
   1251a:	de bf       	out	0x3e, r29	; 62
   1251c:	0f be       	out	0x3f, r0	; 63
   1251e:	cd bf       	out	0x3d, r28	; 61
   12520:	8c 01       	movw	r16, r24
   12522:	79 8b       	std	Y+17, r23	; 0x11
   12524:	68 8b       	std	Y+16, r22	; 0x10
   12526:	87 70       	andi	r24, 0x07	; 7
   12528:	99 27       	eor	r25, r25
   1252a:	02 97       	sbiw	r24, 0x02	; 2
   1252c:	09 f4       	brne	.+2      	; 0x12530 <str_join+0x44>
   1252e:	cd c0       	rjmp	.+410    	; 0x126ca <str_join+0x1de>
   12530:	c8 01       	movw	r24, r16
   12532:	83 70       	andi	r24, 0x03	; 3
   12534:	99 27       	eor	r25, r25
   12536:	89 2b       	or	r24, r25
   12538:	49 f4       	brne	.+18     	; 0x1254c <str_join+0x60>
   1253a:	d8 01       	movw	r26, r16
   1253c:	ed 91       	ld	r30, X+
   1253e:	fc 91       	ld	r31, X
   12540:	86 85       	ldd	r24, Z+14	; 0x0e
   12542:	97 85       	ldd	r25, Z+15	; 0x0f
   12544:	81 5a       	subi	r24, 0xA1	; 161
   12546:	98 47       	sbci	r25, 0x78	; 120
   12548:	09 f4       	brne	.+2      	; 0x1254c <str_join+0x60>
   1254a:	d1 c0       	rjmp	.+418    	; 0x126ee <str_join+0x202>
   1254c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   12550:	e8 89       	ldd	r30, Y+16	; 0x10
   12552:	f9 89       	ldd	r31, Y+17	; 0x11
   12554:	cf 01       	movw	r24, r30
   12556:	83 70       	andi	r24, 0x03	; 3
   12558:	99 27       	eor	r25, r25
   1255a:	89 2b       	or	r24, r25
   1255c:	49 f4       	brne	.+18     	; 0x12570 <str_join+0x84>
   1255e:	80 81       	ld	r24, Z
   12560:	91 81       	ldd	r25, Z+1	; 0x01
   12562:	ed e1       	ldi	r30, 0x1D	; 29
   12564:	8c 32       	cpi	r24, 0x2C	; 44
   12566:	9e 07       	cpc	r25, r30
   12568:	79 f0       	breq	.+30     	; 0x12588 <str_join+0x9c>
   1256a:	8e 5a       	subi	r24, 0xAE	; 174
   1256c:	9a 41       	sbci	r25, 0x1A	; 26
   1256e:	61 f0       	breq	.+24     	; 0x12588 <str_join+0x9c>
   12570:	9e 01       	movw	r18, r28
   12572:	20 5f       	subi	r18, 0xF0	; 240
   12574:	3f 4f       	sbci	r19, 0xFF	; 255
   12576:	40 e0       	ldi	r20, 0x00	; 0
   12578:	50 e0       	ldi	r21, 0x00	; 0
   1257a:	61 e0       	ldi	r22, 0x01	; 1
   1257c:	70 e0       	ldi	r23, 0x00	; 0
   1257e:	8c e2       	ldi	r24, 0x2C	; 44
   12580:	9d e1       	ldi	r25, 0x1D	; 29
   12582:	66 df       	rcall	.-308    	; 0x12450 <list_make_new>
   12584:	99 8b       	std	Y+17, r25	; 0x11
   12586:	88 8b       	std	Y+16, r24	; 0x10
   12588:	ae 01       	movw	r20, r28
   1258a:	4b 5f       	subi	r20, 0xFB	; 251
   1258c:	5f 4f       	sbci	r21, 0xFF	; 255
   1258e:	be 01       	movw	r22, r28
   12590:	6d 5f       	subi	r22, 0xFD	; 253
   12592:	7f 4f       	sbci	r23, 0xFF	; 255
   12594:	88 89       	ldd	r24, Y+16	; 0x10
   12596:	99 89       	ldd	r25, Y+17	; 0x11
   12598:	0e 94 1b 29 	call	0x5236	; 0x5236 <mp_obj_get_array>
   1259c:	8b 80       	ldd	r8, Y+3	; 0x03
   1259e:	9c 80       	ldd	r9, Y+4	; 0x04
   125a0:	81 14       	cp	r8, r1
   125a2:	91 04       	cpc	r9, r1
   125a4:	a9 f1       	breq	.+106    	; 0x12610 <str_join+0x124>
   125a6:	49 80       	ldd	r4, Y+1	; 0x01
   125a8:	5a 80       	ldd	r5, Y+2	; 0x02
   125aa:	6d 80       	ldd	r6, Y+5	; 0x05
   125ac:	7e 80       	ldd	r7, Y+6	; 0x06
   125ae:	00 e0       	ldi	r16, 0x00	; 0
   125b0:	10 e0       	ldi	r17, 0x00	; 0
   125b2:	c1 2c       	mov	r12, r1
   125b4:	d1 2c       	mov	r13, r1
   125b6:	d3 01       	movw	r26, r6
   125b8:	ed 90       	ld	r14, X+
   125ba:	fd 90       	ld	r15, X+
   125bc:	3d 01       	movw	r6, r26
   125be:	c7 01       	movw	r24, r14
   125c0:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   125c4:	a8 16       	cp	r10, r24
   125c6:	b9 06       	cpc	r11, r25
   125c8:	21 f0       	breq	.+8      	; 0x125d2 <str_join+0xe6>
   125ca:	8e e4       	ldi	r24, 0x4E	; 78
   125cc:	9c e0       	ldi	r25, 0x0C	; 12
   125ce:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   125d2:	01 15       	cp	r16, r1
   125d4:	11 05       	cpc	r17, r1
   125d6:	11 f0       	breq	.+4      	; 0x125dc <str_join+0xf0>
   125d8:	c4 0c       	add	r12, r4
   125da:	d5 1c       	adc	r13, r5
   125dc:	c7 01       	movw	r24, r14
   125de:	87 70       	andi	r24, 0x07	; 7
   125e0:	99 27       	eor	r25, r25
   125e2:	02 97       	sbiw	r24, 0x02	; 2
   125e4:	51 f4       	brne	.+20     	; 0x125fa <str_join+0x10e>
   125e6:	c7 01       	movw	r24, r14
   125e8:	96 95       	lsr	r25
   125ea:	87 95       	ror	r24
   125ec:	96 95       	lsr	r25
   125ee:	87 95       	ror	r24
   125f0:	96 95       	lsr	r25
   125f2:	87 95       	ror	r24
   125f4:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <qstr_len>
   125f8:	03 c0       	rjmp	.+6      	; 0x12600 <str_join+0x114>
   125fa:	f7 01       	movw	r30, r14
   125fc:	84 81       	ldd	r24, Z+4	; 0x04
   125fe:	95 81       	ldd	r25, Z+5	; 0x05
   12600:	c8 0e       	add	r12, r24
   12602:	d9 1e       	adc	r13, r25
   12604:	0f 5f       	subi	r16, 0xFF	; 255
   12606:	1f 4f       	sbci	r17, 0xFF	; 255
   12608:	08 15       	cp	r16, r8
   1260a:	19 05       	cpc	r17, r9
   1260c:	a1 f6       	brne	.-88     	; 0x125b6 <str_join+0xca>
   1260e:	02 c0       	rjmp	.+4      	; 0x12614 <str_join+0x128>
   12610:	c1 2c       	mov	r12, r1
   12612:	d1 2c       	mov	r13, r1
   12614:	b6 01       	movw	r22, r12
   12616:	ce 01       	movw	r24, r28
   12618:	07 96       	adiw	r24, 0x07	; 7
   1261a:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
   1261e:	eb 84       	ldd	r14, Y+11	; 0x0b
   12620:	fc 84       	ldd	r15, Y+12	; 0x0c
   12622:	8b 81       	ldd	r24, Y+3	; 0x03
   12624:	9c 81       	ldd	r25, Y+4	; 0x04
   12626:	89 2b       	or	r24, r25
   12628:	79 f4       	brne	.+30     	; 0x12648 <str_join+0x15c>
   1262a:	48 c0       	rjmp	.+144    	; 0x126bc <str_join+0x1d0>
   1262c:	01 15       	cp	r16, r1
   1262e:	11 05       	cpc	r17, r1
   12630:	69 f0       	breq	.+26     	; 0x1264c <str_join+0x160>
   12632:	49 81       	ldd	r20, Y+1	; 0x01
   12634:	5a 81       	ldd	r21, Y+2	; 0x02
   12636:	b1 01       	movw	r22, r2
   12638:	c7 01       	movw	r24, r14
   1263a:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   1263e:	89 81       	ldd	r24, Y+1	; 0x01
   12640:	9a 81       	ldd	r25, Y+2	; 0x02
   12642:	e8 0e       	add	r14, r24
   12644:	f9 1e       	adc	r15, r25
   12646:	02 c0       	rjmp	.+4      	; 0x1264c <str_join+0x160>
   12648:	00 e0       	ldi	r16, 0x00	; 0
   1264a:	10 e0       	ldi	r17, 0x00	; 0
   1264c:	ed 81       	ldd	r30, Y+5	; 0x05
   1264e:	fe 81       	ldd	r31, Y+6	; 0x06
   12650:	c8 01       	movw	r24, r16
   12652:	88 0f       	add	r24, r24
   12654:	99 1f       	adc	r25, r25
   12656:	e8 0f       	add	r30, r24
   12658:	f9 1f       	adc	r31, r25
   1265a:	a0 81       	ld	r26, Z
   1265c:	b1 81       	ldd	r27, Z+1	; 0x01
   1265e:	cd 01       	movw	r24, r26
   12660:	87 70       	andi	r24, 0x07	; 7
   12662:	99 27       	eor	r25, r25
   12664:	02 97       	sbiw	r24, 0x02	; 2
   12666:	71 f4       	brne	.+28     	; 0x12684 <str_join+0x198>
   12668:	be 01       	movw	r22, r28
   1266a:	62 5f       	subi	r22, 0xF2	; 242
   1266c:	7f 4f       	sbci	r23, 0xFF	; 255
   1266e:	cd 01       	movw	r24, r26
   12670:	96 95       	lsr	r25
   12672:	87 95       	ror	r24
   12674:	96 95       	lsr	r25
   12676:	87 95       	ror	r24
   12678:	96 95       	lsr	r25
   1267a:	87 95       	ror	r24
   1267c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
   12680:	bc 01       	movw	r22, r24
   12682:	0b c0       	rjmp	.+22     	; 0x1269a <str_join+0x1ae>
   12684:	14 96       	adiw	r26, 0x04	; 4
   12686:	8d 91       	ld	r24, X+
   12688:	9c 91       	ld	r25, X
   1268a:	15 97       	sbiw	r26, 0x05	; 5
   1268c:	9f 87       	std	Y+15, r25	; 0x0f
   1268e:	8e 87       	std	Y+14, r24	; 0x0e
   12690:	01 90       	ld	r0, Z+
   12692:	f0 81       	ld	r31, Z
   12694:	e0 2d       	mov	r30, r0
   12696:	66 81       	ldd	r22, Z+6	; 0x06
   12698:	77 81       	ldd	r23, Z+7	; 0x07
   1269a:	4e 85       	ldd	r20, Y+14	; 0x0e
   1269c:	5f 85       	ldd	r21, Y+15	; 0x0f
   1269e:	c7 01       	movw	r24, r14
   126a0:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   126a4:	8e 85       	ldd	r24, Y+14	; 0x0e
   126a6:	9f 85       	ldd	r25, Y+15	; 0x0f
   126a8:	e8 0e       	add	r14, r24
   126aa:	f9 1e       	adc	r15, r25
   126ac:	0f 5f       	subi	r16, 0xFF	; 255
   126ae:	1f 4f       	sbci	r17, 0xFF	; 255
   126b0:	8b 81       	ldd	r24, Y+3	; 0x03
   126b2:	9c 81       	ldd	r25, Y+4	; 0x04
   126b4:	08 17       	cp	r16, r24
   126b6:	19 07       	cpc	r17, r25
   126b8:	08 f4       	brcc	.+2      	; 0x126bc <str_join+0x1d0>
   126ba:	b8 cf       	rjmp	.-144    	; 0x1262c <str_join+0x140>
   126bc:	be 01       	movw	r22, r28
   126be:	69 5f       	subi	r22, 0xF9	; 249
   126c0:	7f 4f       	sbci	r23, 0xFF	; 255
   126c2:	c5 01       	movw	r24, r10
   126c4:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   126c8:	22 c0       	rjmp	.+68     	; 0x1270e <str_join+0x222>
   126ca:	c8 01       	movw	r24, r16
   126cc:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   126d0:	5c 01       	movw	r10, r24
   126d2:	be 01       	movw	r22, r28
   126d4:	6f 5f       	subi	r22, 0xFF	; 255
   126d6:	7f 4f       	sbci	r23, 0xFF	; 255
   126d8:	c8 01       	movw	r24, r16
   126da:	96 95       	lsr	r25
   126dc:	87 95       	ror	r24
   126de:	96 95       	lsr	r25
   126e0:	87 95       	ror	r24
   126e2:	96 95       	lsr	r25
   126e4:	87 95       	ror	r24
   126e6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
   126ea:	1c 01       	movw	r2, r24
   126ec:	31 cf       	rjmp	.-414    	; 0x12550 <str_join+0x64>
   126ee:	c8 01       	movw	r24, r16
   126f0:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   126f4:	5c 01       	movw	r10, r24
   126f6:	d8 01       	movw	r26, r16
   126f8:	14 96       	adiw	r26, 0x04	; 4
   126fa:	8d 91       	ld	r24, X+
   126fc:	9c 91       	ld	r25, X
   126fe:	15 97       	sbiw	r26, 0x05	; 5
   12700:	9a 83       	std	Y+2, r25	; 0x02
   12702:	89 83       	std	Y+1, r24	; 0x01
   12704:	16 96       	adiw	r26, 0x06	; 6
   12706:	2d 90       	ld	r2, X+
   12708:	3c 90       	ld	r3, X
   1270a:	17 97       	sbiw	r26, 0x07	; 7
   1270c:	21 cf       	rjmp	.-446    	; 0x12550 <str_join+0x64>
   1270e:	61 96       	adiw	r28, 0x11	; 17
   12710:	0f b6       	in	r0, 0x3f	; 63
   12712:	f8 94       	cli
   12714:	de bf       	out	0x3e, r29	; 62
   12716:	0f be       	out	0x3f, r0	; 63
   12718:	cd bf       	out	0x3d, r28	; 61
   1271a:	df 91       	pop	r29
   1271c:	cf 91       	pop	r28
   1271e:	1f 91       	pop	r17
   12720:	0f 91       	pop	r16
   12722:	ff 90       	pop	r15
   12724:	ef 90       	pop	r14
   12726:	df 90       	pop	r13
   12728:	cf 90       	pop	r12
   1272a:	bf 90       	pop	r11
   1272c:	af 90       	pop	r10
   1272e:	9f 90       	pop	r9
   12730:	8f 90       	pop	r8
   12732:	7f 90       	pop	r7
   12734:	6f 90       	pop	r6
   12736:	5f 90       	pop	r5
   12738:	4f 90       	pop	r4
   1273a:	3f 90       	pop	r3
   1273c:	2f 90       	pop	r2
   1273e:	08 95       	ret

00012740 <list_extend>:
   12740:	0f 93       	push	r16
   12742:	1f 93       	push	r17
   12744:	cf 93       	push	r28
   12746:	df 93       	push	r29
   12748:	ec 01       	movw	r28, r24
   1274a:	8b 01       	movw	r16, r22
   1274c:	83 70       	andi	r24, 0x03	; 3
   1274e:	99 27       	eor	r25, r25
   12750:	89 2b       	or	r24, r25
   12752:	29 f4       	brne	.+10     	; 0x1275e <list_extend+0x1e>
   12754:	88 81       	ld	r24, Y
   12756:	99 81       	ldd	r25, Y+1	; 0x01
   12758:	8c 52       	subi	r24, 0x2C	; 44
   1275a:	9d 41       	sbci	r25, 0x1D	; 29
   1275c:	11 f0       	breq	.+4      	; 0x12762 <list_extend+0x22>
   1275e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   12762:	cb 01       	movw	r24, r22
   12764:	83 70       	andi	r24, 0x03	; 3
   12766:	99 27       	eor	r25, r25
   12768:	89 2b       	or	r24, r25
   1276a:	09 f0       	breq	.+2      	; 0x1276e <list_extend+0x2e>
   1276c:	53 c0       	rjmp	.+166    	; 0x12814 <list_extend+0xd4>
   1276e:	fb 01       	movw	r30, r22
   12770:	80 81       	ld	r24, Z
   12772:	91 81       	ldd	r25, Z+1	; 0x01
   12774:	8c 52       	subi	r24, 0x2C	; 44
   12776:	9d 41       	sbci	r25, 0x1D	; 29
   12778:	09 f0       	breq	.+2      	; 0x1277c <list_extend+0x3c>
   1277a:	4c c0       	rjmp	.+152    	; 0x12814 <list_extend+0xd4>
   1277c:	6c 81       	ldd	r22, Y+4	; 0x04
   1277e:	7d 81       	ldd	r23, Y+5	; 0x05
   12780:	f8 01       	movw	r30, r16
   12782:	84 81       	ldd	r24, Z+4	; 0x04
   12784:	95 81       	ldd	r25, Z+5	; 0x05
   12786:	68 0f       	add	r22, r24
   12788:	79 1f       	adc	r23, r25
   1278a:	8a 81       	ldd	r24, Y+2	; 0x02
   1278c:	9b 81       	ldd	r25, Y+3	; 0x03
   1278e:	86 17       	cp	r24, r22
   12790:	97 07       	cpc	r25, r23
   12792:	28 f5       	brcc	.+74     	; 0x127de <list_extend+0x9e>
   12794:	6c 5f       	subi	r22, 0xFC	; 252
   12796:	7f 4f       	sbci	r23, 0xFF	; 255
   12798:	66 0f       	add	r22, r22
   1279a:	77 1f       	adc	r23, r23
   1279c:	8e 81       	ldd	r24, Y+6	; 0x06
   1279e:	9f 81       	ldd	r25, Y+7	; 0x07
   127a0:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
   127a4:	9f 83       	std	Y+7, r25	; 0x07
   127a6:	8e 83       	std	Y+6, r24	; 0x06
   127a8:	6c 81       	ldd	r22, Y+4	; 0x04
   127aa:	7d 81       	ldd	r23, Y+5	; 0x05
   127ac:	f8 01       	movw	r30, r16
   127ae:	44 81       	ldd	r20, Z+4	; 0x04
   127b0:	55 81       	ldd	r21, Z+5	; 0x05
   127b2:	46 0f       	add	r20, r22
   127b4:	57 1f       	adc	r21, r23
   127b6:	4c 5f       	subi	r20, 0xFC	; 252
   127b8:	5f 4f       	sbci	r21, 0xFF	; 255
   127ba:	5b 83       	std	Y+3, r21	; 0x03
   127bc:	4a 83       	std	Y+2, r20	; 0x02
   127be:	24 81       	ldd	r18, Z+4	; 0x04
   127c0:	35 81       	ldd	r19, Z+5	; 0x05
   127c2:	26 0f       	add	r18, r22
   127c4:	37 1f       	adc	r19, r23
   127c6:	42 1b       	sub	r20, r18
   127c8:	53 0b       	sbc	r21, r19
   127ca:	44 0f       	add	r20, r20
   127cc:	55 1f       	adc	r21, r21
   127ce:	22 0f       	add	r18, r18
   127d0:	33 1f       	adc	r19, r19
   127d2:	60 e0       	ldi	r22, 0x00	; 0
   127d4:	70 e0       	ldi	r23, 0x00	; 0
   127d6:	82 0f       	add	r24, r18
   127d8:	93 1f       	adc	r25, r19
   127da:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
   127de:	8c 81       	ldd	r24, Y+4	; 0x04
   127e0:	9d 81       	ldd	r25, Y+5	; 0x05
   127e2:	88 0f       	add	r24, r24
   127e4:	99 1f       	adc	r25, r25
   127e6:	2e 81       	ldd	r18, Y+6	; 0x06
   127e8:	3f 81       	ldd	r19, Y+7	; 0x07
   127ea:	f8 01       	movw	r30, r16
   127ec:	44 81       	ldd	r20, Z+4	; 0x04
   127ee:	55 81       	ldd	r21, Z+5	; 0x05
   127f0:	44 0f       	add	r20, r20
   127f2:	55 1f       	adc	r21, r21
   127f4:	66 81       	ldd	r22, Z+6	; 0x06
   127f6:	77 81       	ldd	r23, Z+7	; 0x07
   127f8:	82 0f       	add	r24, r18
   127fa:	93 1f       	adc	r25, r19
   127fc:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   12800:	2c 81       	ldd	r18, Y+4	; 0x04
   12802:	3d 81       	ldd	r19, Y+5	; 0x05
   12804:	f8 01       	movw	r30, r16
   12806:	84 81       	ldd	r24, Z+4	; 0x04
   12808:	95 81       	ldd	r25, Z+5	; 0x05
   1280a:	82 0f       	add	r24, r18
   1280c:	93 1f       	adc	r25, r19
   1280e:	9d 83       	std	Y+5, r25	; 0x05
   12810:	8c 83       	std	Y+4, r24	; 0x04
   12812:	03 c0       	rjmp	.+6      	; 0x1281a <list_extend+0xda>
   12814:	b8 01       	movw	r22, r16
   12816:	ce 01       	movw	r24, r28
   12818:	00 de       	rcall	.-1024   	; 0x1241a <list_extend_from_iter>
   1281a:	86 e0       	ldi	r24, 0x06	; 6
   1281c:	90 e0       	ldi	r25, 0x00	; 0
   1281e:	df 91       	pop	r29
   12820:	cf 91       	pop	r28
   12822:	1f 91       	pop	r17
   12824:	0f 91       	pop	r16
   12826:	08 95       	ret

00012828 <list_binary_op>:
   12828:	af 92       	push	r10
   1282a:	bf 92       	push	r11
   1282c:	cf 92       	push	r12
   1282e:	df 92       	push	r13
   12830:	ef 92       	push	r14
   12832:	ff 92       	push	r15
   12834:	0f 93       	push	r16
   12836:	1f 93       	push	r17
   12838:	cf 93       	push	r28
   1283a:	df 93       	push	r29
   1283c:	00 d0       	rcall	.+0      	; 0x1283e <list_binary_op+0x16>
   1283e:	cd b7       	in	r28, 0x3d	; 61
   12840:	de b7       	in	r29, 0x3e	; 62
   12842:	6b 01       	movw	r12, r22
   12844:	7a 01       	movw	r14, r20
   12846:	8e 30       	cpi	r24, 0x0E	; 14
   12848:	09 f4       	brne	.+2      	; 0x1284c <list_binary_op+0x24>
   1284a:	4a c0       	rjmp	.+148    	; 0x128e0 <list_binary_op+0xb8>
   1284c:	20 f4       	brcc	.+8      	; 0x12856 <list_binary_op+0x2e>
   1284e:	85 30       	cpi	r24, 0x05	; 5
   12850:	08 f4       	brcc	.+2      	; 0x12854 <list_binary_op+0x2c>
   12852:	82 c0       	rjmp	.+260    	; 0x12958 <list_binary_op+0x130>
   12854:	a2 c0       	rjmp	.+324    	; 0x1299a <list_binary_op+0x172>
   12856:	8b 31       	cpi	r24, 0x1B	; 27
   12858:	21 f0       	breq	.+8      	; 0x12862 <list_binary_op+0x3a>
   1285a:	8d 31       	cpi	r24, 0x1D	; 29
   1285c:	09 f4       	brne	.+2      	; 0x12860 <list_binary_op+0x38>
   1285e:	46 c0       	rjmp	.+140    	; 0x128ec <list_binary_op+0xc4>
   12860:	9c c0       	rjmp	.+312    	; 0x1299a <list_binary_op+0x172>
   12862:	ca 01       	movw	r24, r20
   12864:	83 70       	andi	r24, 0x03	; 3
   12866:	99 27       	eor	r25, r25
   12868:	89 2b       	or	r24, r25
   1286a:	09 f0       	breq	.+2      	; 0x1286e <list_binary_op+0x46>
   1286c:	99 c0       	rjmp	.+306    	; 0x129a0 <list_binary_op+0x178>
   1286e:	fa 01       	movw	r30, r20
   12870:	80 81       	ld	r24, Z
   12872:	91 81       	ldd	r25, Z+1	; 0x01
   12874:	8c 52       	subi	r24, 0x2C	; 44
   12876:	9d 41       	sbci	r25, 0x1D	; 29
   12878:	09 f0       	breq	.+2      	; 0x1287c <list_binary_op+0x54>
   1287a:	95 c0       	rjmp	.+298    	; 0x129a6 <list_binary_op+0x17e>
   1287c:	fb 01       	movw	r30, r22
   1287e:	a4 80       	ldd	r10, Z+4	; 0x04
   12880:	b5 80       	ldd	r11, Z+5	; 0x05
   12882:	fa 01       	movw	r30, r20
   12884:	84 81       	ldd	r24, Z+4	; 0x04
   12886:	95 81       	ldd	r25, Z+5	; 0x05
   12888:	a8 0e       	add	r10, r24
   1288a:	b9 1e       	adc	r11, r25
   1288c:	88 e0       	ldi	r24, 0x08	; 8
   1288e:	90 e0       	ldi	r25, 0x00	; 0
   12890:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   12894:	8c 01       	movw	r16, r24
   12896:	b5 01       	movw	r22, r10
   12898:	0e 94 81 37 	call	0x6f02	; 0x6f02 <mp_obj_list_init>
   1289c:	f6 01       	movw	r30, r12
   1289e:	44 81       	ldd	r20, Z+4	; 0x04
   128a0:	55 81       	ldd	r21, Z+5	; 0x05
   128a2:	44 0f       	add	r20, r20
   128a4:	55 1f       	adc	r21, r21
   128a6:	66 81       	ldd	r22, Z+6	; 0x06
   128a8:	77 81       	ldd	r23, Z+7	; 0x07
   128aa:	f8 01       	movw	r30, r16
   128ac:	86 81       	ldd	r24, Z+6	; 0x06
   128ae:	97 81       	ldd	r25, Z+7	; 0x07
   128b0:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   128b4:	f6 01       	movw	r30, r12
   128b6:	84 81       	ldd	r24, Z+4	; 0x04
   128b8:	95 81       	ldd	r25, Z+5	; 0x05
   128ba:	88 0f       	add	r24, r24
   128bc:	99 1f       	adc	r25, r25
   128be:	f8 01       	movw	r30, r16
   128c0:	26 81       	ldd	r18, Z+6	; 0x06
   128c2:	37 81       	ldd	r19, Z+7	; 0x07
   128c4:	f7 01       	movw	r30, r14
   128c6:	44 81       	ldd	r20, Z+4	; 0x04
   128c8:	55 81       	ldd	r21, Z+5	; 0x05
   128ca:	44 0f       	add	r20, r20
   128cc:	55 1f       	adc	r21, r21
   128ce:	66 81       	ldd	r22, Z+6	; 0x06
   128d0:	77 81       	ldd	r23, Z+7	; 0x07
   128d2:	82 0f       	add	r24, r18
   128d4:	93 1f       	adc	r25, r19
   128d6:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   128da:	80 2f       	mov	r24, r16
   128dc:	91 2f       	mov	r25, r17
   128de:	6b c0       	rjmp	.+214    	; 0x129b6 <list_binary_op+0x18e>
   128e0:	ba 01       	movw	r22, r20
   128e2:	c6 01       	movw	r24, r12
   128e4:	2d df       	rcall	.-422    	; 0x12740 <list_extend>
   128e6:	8c 2d       	mov	r24, r12
   128e8:	9d 2d       	mov	r25, r13
   128ea:	65 c0       	rjmp	.+202    	; 0x129b6 <list_binary_op+0x18e>
   128ec:	be 01       	movw	r22, r28
   128ee:	6f 5f       	subi	r22, 0xFF	; 255
   128f0:	7f 4f       	sbci	r23, 0xFF	; 255
   128f2:	ca 01       	movw	r24, r20
   128f4:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <mp_obj_get_int_maybe>
   128f8:	88 23       	and	r24, r24
   128fa:	59 f1       	breq	.+86     	; 0x12952 <list_binary_op+0x12a>
   128fc:	89 81       	ldd	r24, Y+1	; 0x01
   128fe:	9a 81       	ldd	r25, Y+2	; 0x02
   12900:	99 23       	and	r25, r25
   12902:	14 f4       	brge	.+4      	; 0x12908 <list_binary_op+0xe0>
   12904:	1a 82       	std	Y+2, r1	; 0x02
   12906:	19 82       	std	Y+1, r1	; 0x01
   12908:	f6 01       	movw	r30, r12
   1290a:	24 81       	ldd	r18, Z+4	; 0x04
   1290c:	35 81       	ldd	r19, Z+5	; 0x05
   1290e:	89 81       	ldd	r24, Y+1	; 0x01
   12910:	9a 81       	ldd	r25, Y+2	; 0x02
   12912:	28 9f       	mul	r18, r24
   12914:	80 01       	movw	r16, r0
   12916:	29 9f       	mul	r18, r25
   12918:	10 0d       	add	r17, r0
   1291a:	38 9f       	mul	r19, r24
   1291c:	10 0d       	add	r17, r0
   1291e:	11 24       	eor	r1, r1
   12920:	88 e0       	ldi	r24, 0x08	; 8
   12922:	90 e0       	ldi	r25, 0x00	; 0
   12924:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   12928:	7c 01       	movw	r14, r24
   1292a:	b8 01       	movw	r22, r16
   1292c:	0e 94 81 37 	call	0x6f02	; 0x6f02 <mp_obj_list_init>
   12930:	f7 01       	movw	r30, r14
   12932:	06 81       	ldd	r16, Z+6	; 0x06
   12934:	17 81       	ldd	r17, Z+7	; 0x07
   12936:	29 81       	ldd	r18, Y+1	; 0x01
   12938:	3a 81       	ldd	r19, Y+2	; 0x02
   1293a:	f6 01       	movw	r30, r12
   1293c:	44 81       	ldd	r20, Z+4	; 0x04
   1293e:	55 81       	ldd	r21, Z+5	; 0x05
   12940:	62 e0       	ldi	r22, 0x02	; 2
   12942:	70 e0       	ldi	r23, 0x00	; 0
   12944:	86 81       	ldd	r24, Z+6	; 0x06
   12946:	97 81       	ldd	r25, Z+7	; 0x07
   12948:	0e 94 42 22 	call	0x4484	; 0x4484 <mp_seq_multiply>
   1294c:	8e 2d       	mov	r24, r14
   1294e:	9f 2d       	mov	r25, r15
   12950:	32 c0       	rjmp	.+100    	; 0x129b6 <list_binary_op+0x18e>
   12952:	80 e0       	ldi	r24, 0x00	; 0
   12954:	90 e0       	ldi	r25, 0x00	; 0
   12956:	2f c0       	rjmp	.+94     	; 0x129b6 <list_binary_op+0x18e>
   12958:	9a 01       	movw	r18, r20
   1295a:	23 70       	andi	r18, 0x03	; 3
   1295c:	33 27       	eor	r19, r19
   1295e:	23 2b       	or	r18, r19
   12960:	31 f4       	brne	.+12     	; 0x1296e <list_binary_op+0x146>
   12962:	fa 01       	movw	r30, r20
   12964:	20 81       	ld	r18, Z
   12966:	31 81       	ldd	r19, Z+1	; 0x01
   12968:	2c 52       	subi	r18, 0x2C	; 44
   1296a:	3d 41       	sbci	r19, 0x1D	; 29
   1296c:	29 f0       	breq	.+10     	; 0x12978 <list_binary_op+0x150>
   1296e:	82 30       	cpi	r24, 0x02	; 2
   12970:	e9 f0       	breq	.+58     	; 0x129ac <list_binary_op+0x184>
   12972:	80 e0       	ldi	r24, 0x00	; 0
   12974:	90 e0       	ldi	r25, 0x00	; 0
   12976:	1f c0       	rjmp	.+62     	; 0x129b6 <list_binary_op+0x18e>
   12978:	fa 01       	movw	r30, r20
   1297a:	04 81       	ldd	r16, Z+4	; 0x04
   1297c:	15 81       	ldd	r17, Z+5	; 0x05
   1297e:	26 81       	ldd	r18, Z+6	; 0x06
   12980:	37 81       	ldd	r19, Z+7	; 0x07
   12982:	fb 01       	movw	r30, r22
   12984:	44 81       	ldd	r20, Z+4	; 0x04
   12986:	55 81       	ldd	r21, Z+5	; 0x05
   12988:	66 81       	ldd	r22, Z+6	; 0x06
   1298a:	77 81       	ldd	r23, Z+7	; 0x07
   1298c:	90 e0       	ldi	r25, 0x00	; 0
   1298e:	28 da       	rcall	.-2992   	; 0x11de0 <mp_seq_cmp_objs>
   12990:	81 11       	cpse	r24, r1
   12992:	0f c0       	rjmp	.+30     	; 0x129b2 <list_binary_op+0x18a>
   12994:	8e e0       	ldi	r24, 0x0E	; 14
   12996:	90 e0       	ldi	r25, 0x00	; 0
   12998:	0e c0       	rjmp	.+28     	; 0x129b6 <list_binary_op+0x18e>
   1299a:	80 e0       	ldi	r24, 0x00	; 0
   1299c:	90 e0       	ldi	r25, 0x00	; 0
   1299e:	0b c0       	rjmp	.+22     	; 0x129b6 <list_binary_op+0x18e>
   129a0:	80 e0       	ldi	r24, 0x00	; 0
   129a2:	90 e0       	ldi	r25, 0x00	; 0
   129a4:	08 c0       	rjmp	.+16     	; 0x129b6 <list_binary_op+0x18e>
   129a6:	80 e0       	ldi	r24, 0x00	; 0
   129a8:	90 e0       	ldi	r25, 0x00	; 0
   129aa:	05 c0       	rjmp	.+10     	; 0x129b6 <list_binary_op+0x18e>
   129ac:	8e e0       	ldi	r24, 0x0E	; 14
   129ae:	90 e0       	ldi	r25, 0x00	; 0
   129b0:	02 c0       	rjmp	.+4      	; 0x129b6 <list_binary_op+0x18e>
   129b2:	8e e1       	ldi	r24, 0x1E	; 30
   129b4:	90 e0       	ldi	r25, 0x00	; 0
   129b6:	0f 90       	pop	r0
   129b8:	0f 90       	pop	r0
   129ba:	df 91       	pop	r29
   129bc:	cf 91       	pop	r28
   129be:	1f 91       	pop	r17
   129c0:	0f 91       	pop	r16
   129c2:	ff 90       	pop	r15
   129c4:	ef 90       	pop	r14
   129c6:	df 90       	pop	r13
   129c8:	cf 90       	pop	r12
   129ca:	bf 90       	pop	r11
   129cc:	af 90       	pop	r10
   129ce:	08 95       	ret

000129d0 <bytes_make_new>:
   129d0:	ef 92       	push	r14
   129d2:	ff 92       	push	r15
   129d4:	0f 93       	push	r16
   129d6:	1f 93       	push	r17
   129d8:	cf 93       	push	r28
   129da:	df 93       	push	r29
   129dc:	cd b7       	in	r28, 0x3d	; 61
   129de:	de b7       	in	r29, 0x3e	; 62
   129e0:	6c 97       	sbiw	r28, 0x1c	; 28
   129e2:	0f b6       	in	r0, 0x3f	; 63
   129e4:	f8 94       	cli
   129e6:	de bf       	out	0x3e, r29	; 62
   129e8:	0f be       	out	0x3f, r0	; 63
   129ea:	cd bf       	out	0x3d, r28	; 61
   129ec:	61 15       	cp	r22, r1
   129ee:	71 05       	cpc	r23, r1
   129f0:	09 f4       	brne	.+2      	; 0x129f4 <bytes_make_new+0x24>
   129f2:	c5 c0       	rjmp	.+394    	; 0x12b7e <bytes_make_new+0x1ae>
   129f4:	89 01       	movw	r16, r18
   129f6:	f9 01       	movw	r30, r18
   129f8:	80 81       	ld	r24, Z
   129fa:	91 81       	ldd	r25, Z+1	; 0x01
   129fc:	ac 01       	movw	r20, r24
   129fe:	9c 01       	movw	r18, r24
   12a00:	23 70       	andi	r18, 0x03	; 3
   12a02:	33 27       	eor	r19, r19
   12a04:	23 2b       	or	r18, r19
   12a06:	09 f0       	breq	.+2      	; 0x12a0a <bytes_make_new+0x3a>
   12a08:	c4 c0       	rjmp	.+392    	; 0x12b92 <bytes_make_new+0x1c2>
   12a0a:	fc 01       	movw	r30, r24
   12a0c:	20 81       	ld	r18, Z
   12a0e:	31 81       	ldd	r19, Z+1	; 0x01
   12a10:	fa e1       	ldi	r31, 0x1A	; 26
   12a12:	22 3f       	cpi	r18, 0xF2	; 242
   12a14:	3f 07       	cpc	r19, r31
   12a16:	09 f0       	breq	.+2      	; 0x12a1a <bytes_make_new+0x4a>
   12a18:	b5 c0       	rjmp	.+362    	; 0x12b84 <bytes_make_new+0x1b4>
   12a1a:	d0 c0       	rjmp	.+416    	; 0x12bbc <bytes_make_new+0x1ec>
   12a1c:	22 51       	subi	r18, 0x12	; 18
   12a1e:	3b 41       	sbci	r19, 0x1B	; 27
   12a20:	09 f0       	breq	.+2      	; 0x12a24 <bytes_make_new+0x54>
   12a22:	43 c0       	rjmp	.+134    	; 0x12aaa <bytes_make_new+0xda>
   12a24:	be c0       	rjmp	.+380    	; 0x12ba2 <bytes_make_new+0x1d2>
   12a26:	be 01       	movw	r22, r28
   12a28:	6a 5e       	subi	r22, 0xEA	; 234
   12a2a:	7f 4f       	sbci	r23, 0xFF	; 255
   12a2c:	96 95       	lsr	r25
   12a2e:	87 95       	ror	r24
   12a30:	96 95       	lsr	r25
   12a32:	87 95       	ror	r24
   12a34:	96 95       	lsr	r25
   12a36:	87 95       	ror	r24
   12a38:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
   12a3c:	7c 01       	movw	r14, r24
   12a3e:	f8 01       	movw	r30, r16
   12a40:	80 81       	ld	r24, Z
   12a42:	91 81       	ldd	r25, Z+1	; 0x01
   12a44:	9c 01       	movw	r18, r24
   12a46:	27 70       	andi	r18, 0x07	; 7
   12a48:	33 27       	eor	r19, r19
   12a4a:	22 30       	cpi	r18, 0x02	; 2
   12a4c:	31 05       	cpc	r19, r1
   12a4e:	49 f0       	breq	.+18     	; 0x12a62 <bytes_make_new+0x92>
   12a50:	12 c0       	rjmp	.+36     	; 0x12a76 <bytes_make_new+0xa6>
   12a52:	fc 01       	movw	r30, r24
   12a54:	24 81       	ldd	r18, Z+4	; 0x04
   12a56:	35 81       	ldd	r19, Z+5	; 0x05
   12a58:	3f 8b       	std	Y+23, r19	; 0x17
   12a5a:	2e 8b       	std	Y+22, r18	; 0x16
   12a5c:	e6 80       	ldd	r14, Z+6	; 0x06
   12a5e:	f7 80       	ldd	r15, Z+7	; 0x07
   12a60:	0a c0       	rjmp	.+20     	; 0x12a76 <bytes_make_new+0xa6>
   12a62:	96 95       	lsr	r25
   12a64:	87 95       	ror	r24
   12a66:	96 95       	lsr	r25
   12a68:	87 95       	ror	r24
   12a6a:	96 95       	lsr	r25
   12a6c:	87 95       	ror	r24
   12a6e:	0e 94 4b 0b 	call	0x1696	; 0x1696 <qstr_hash>
   12a72:	8c 01       	movw	r16, r24
   12a74:	03 c0       	rjmp	.+6      	; 0x12a7c <bytes_make_new+0xac>
   12a76:	fc 01       	movw	r30, r24
   12a78:	02 81       	ldd	r16, Z+2	; 0x02
   12a7a:	13 81       	ldd	r17, Z+3	; 0x03
   12a7c:	01 15       	cp	r16, r1
   12a7e:	11 05       	cpc	r17, r1
   12a80:	31 f4       	brne	.+12     	; 0x12a8e <bytes_make_new+0xbe>
   12a82:	6e 89       	ldd	r22, Y+22	; 0x16
   12a84:	7f 89       	ldd	r23, Y+23	; 0x17
   12a86:	c7 01       	movw	r24, r14
   12a88:	0e 94 b5 0a 	call	0x156a	; 0x156a <qstr_compute_hash>
   12a8c:	8c 01       	movw	r16, r24
   12a8e:	4e 89       	ldd	r20, Y+22	; 0x16
   12a90:	5f 89       	ldd	r21, Y+23	; 0x17
   12a92:	60 e0       	ldi	r22, 0x00	; 0
   12a94:	70 e0       	ldi	r23, 0x00	; 0
   12a96:	82 ef       	ldi	r24, 0xF2	; 242
   12a98:	9a e1       	ldi	r25, 0x1A	; 26
   12a9a:	0e 94 56 38 	call	0x70ac	; 0x70ac <mp_obj_new_str_copy>
   12a9e:	fc 01       	movw	r30, r24
   12aa0:	f7 82       	std	Z+7, r15	; 0x07
   12aa2:	e6 82       	std	Z+6, r14	; 0x06
   12aa4:	13 83       	std	Z+3, r17	; 0x03
   12aa6:	02 83       	std	Z+2, r16	; 0x02
   12aa8:	89 c0       	rjmp	.+274    	; 0x12bbc <bytes_make_new+0x1ec>
   12aaa:	62 30       	cpi	r22, 0x02	; 2
   12aac:	71 05       	cpc	r23, r1
   12aae:	08 f0       	brcs	.+2      	; 0x12ab2 <bytes_make_new+0xe2>
   12ab0:	62 c0       	rjmp	.+196    	; 0x12b76 <bytes_make_new+0x1a6>
   12ab2:	40 ff       	sbrs	r20, 0
   12ab4:	1d c0       	rjmp	.+58     	; 0x12af0 <bytes_make_new+0x120>
   12ab6:	8a 01       	movw	r16, r20
   12ab8:	15 95       	asr	r17
   12aba:	07 95       	ror	r16
   12abc:	11 23       	and	r17, r17
   12abe:	24 f4       	brge	.+8      	; 0x12ac8 <bytes_make_new+0xf8>
   12ac0:	80 e0       	ldi	r24, 0x00	; 0
   12ac2:	90 e0       	ldi	r25, 0x00	; 0
   12ac4:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
   12ac8:	b8 01       	movw	r22, r16
   12aca:	ce 01       	movw	r24, r28
   12acc:	46 96       	adiw	r24, 0x16	; 22
   12ace:	0e 94 e8 31 	call	0x63d0	; 0x63d0 <vstr_init_len>
   12ad2:	a8 01       	movw	r20, r16
   12ad4:	60 e0       	ldi	r22, 0x00	; 0
   12ad6:	70 e0       	ldi	r23, 0x00	; 0
   12ad8:	8a 8d       	ldd	r24, Y+26	; 0x1a
   12ada:	9b 8d       	ldd	r25, Y+27	; 0x1b
   12adc:	0e 94 ac c2 	call	0x18558	; 0x18558 <memset>
   12ae0:	be 01       	movw	r22, r28
   12ae2:	6a 5e       	subi	r22, 0xEA	; 234
   12ae4:	7f 4f       	sbci	r23, 0xFF	; 255
   12ae6:	82 ef       	ldi	r24, 0xF2	; 242
   12ae8:	9a e1       	ldi	r25, 0x1A	; 26
   12aea:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   12aee:	66 c0       	rjmp	.+204    	; 0x12bbc <bytes_make_new+0x1ec>
   12af0:	41 e0       	ldi	r20, 0x01	; 1
   12af2:	50 e0       	ldi	r21, 0x00	; 0
   12af4:	be 01       	movw	r22, r28
   12af6:	6f 5f       	subi	r22, 0xFF	; 255
   12af8:	7f 4f       	sbci	r23, 0xFF	; 255
   12afa:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <mp_get_buffer>
   12afe:	88 23       	and	r24, r24
   12b00:	39 f0       	breq	.+14     	; 0x12b10 <bytes_make_new+0x140>
   12b02:	6b 81       	ldd	r22, Y+3	; 0x03
   12b04:	7c 81       	ldd	r23, Y+4	; 0x04
   12b06:	89 81       	ldd	r24, Y+1	; 0x01
   12b08:	9a 81       	ldd	r25, Y+2	; 0x02
   12b0a:	0e 94 a8 38 	call	0x7150	; 0x7150 <mp_obj_new_bytes>
   12b0e:	56 c0       	rjmp	.+172    	; 0x12bbc <bytes_make_new+0x1ec>
   12b10:	f8 01       	movw	r30, r16
   12b12:	80 81       	ld	r24, Z
   12b14:	91 81       	ldd	r25, Z+1	; 0x01
   12b16:	0e 94 88 1c 	call	0x3910	; 0x3910 <mp_obj_len_maybe>
   12b1a:	00 97       	sbiw	r24, 0x00	; 0
   12b1c:	39 f4       	brne	.+14     	; 0x12b2c <bytes_make_new+0x15c>
   12b1e:	60 e1       	ldi	r22, 0x10	; 16
   12b20:	70 e0       	ldi	r23, 0x00	; 0
   12b22:	ce 01       	movw	r24, r28
   12b24:	07 96       	adiw	r24, 0x07	; 7
   12b26:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
   12b2a:	07 c0       	rjmp	.+14     	; 0x12b3a <bytes_make_new+0x16a>
   12b2c:	bc 01       	movw	r22, r24
   12b2e:	75 95       	asr	r23
   12b30:	67 95       	ror	r22
   12b32:	ce 01       	movw	r24, r28
   12b34:	07 96       	adiw	r24, 0x07	; 7
   12b36:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
   12b3a:	be 01       	movw	r22, r28
   12b3c:	62 5f       	subi	r22, 0xF2	; 242
   12b3e:	7f 4f       	sbci	r23, 0xFF	; 255
   12b40:	f8 01       	movw	r30, r16
   12b42:	80 81       	ld	r24, Z
   12b44:	91 81       	ldd	r25, Z+1	; 0x01
   12b46:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   12b4a:	8c 01       	movw	r16, r24
   12b4c:	07 c0       	rjmp	.+14     	; 0x12b5c <bytes_make_new+0x18c>
   12b4e:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
   12b52:	68 2f       	mov	r22, r24
   12b54:	ce 01       	movw	r24, r28
   12b56:	07 96       	adiw	r24, 0x07	; 7
   12b58:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <vstr_add_byte>
   12b5c:	c8 01       	movw	r24, r16
   12b5e:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   12b62:	00 97       	sbiw	r24, 0x00	; 0
   12b64:	a1 f7       	brne	.-24     	; 0x12b4e <bytes_make_new+0x17e>
   12b66:	be 01       	movw	r22, r28
   12b68:	69 5f       	subi	r22, 0xF9	; 249
   12b6a:	7f 4f       	sbci	r23, 0xFF	; 255
   12b6c:	82 ef       	ldi	r24, 0xF2	; 242
   12b6e:	9a e1       	ldi	r25, 0x1A	; 26
   12b70:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   12b74:	23 c0       	rjmp	.+70     	; 0x12bbc <bytes_make_new+0x1ec>
   12b76:	83 e9       	ldi	r24, 0x93	; 147
   12b78:	9c e0       	ldi	r25, 0x0C	; 12
   12b7a:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   12b7e:	8a ee       	ldi	r24, 0xEA	; 234
   12b80:	9a e1       	ldi	r25, 0x1A	; 26
   12b82:	1c c0       	rjmp	.+56     	; 0x12bbc <bytes_make_new+0x1ec>
   12b84:	fc 01       	movw	r30, r24
   12b86:	e7 70       	andi	r30, 0x07	; 7
   12b88:	ff 27       	eor	r31, r31
   12b8a:	32 97       	sbiw	r30, 0x02	; 2
   12b8c:	09 f0       	breq	.+2      	; 0x12b90 <bytes_make_new+0x1c0>
   12b8e:	46 cf       	rjmp	.-372    	; 0x12a1c <bytes_make_new+0x4c>
   12b90:	0f c0       	rjmp	.+30     	; 0x12bb0 <bytes_make_new+0x1e0>
   12b92:	9c 01       	movw	r18, r24
   12b94:	27 70       	andi	r18, 0x07	; 7
   12b96:	33 27       	eor	r19, r19
   12b98:	22 30       	cpi	r18, 0x02	; 2
   12b9a:	31 05       	cpc	r19, r1
   12b9c:	09 f0       	breq	.+2      	; 0x12ba0 <bytes_make_new+0x1d0>
   12b9e:	85 cf       	rjmp	.-246    	; 0x12aaa <bytes_make_new+0xda>
   12ba0:	07 c0       	rjmp	.+14     	; 0x12bb0 <bytes_make_new+0x1e0>
   12ba2:	62 50       	subi	r22, 0x02	; 2
   12ba4:	71 09       	sbc	r23, r1
   12ba6:	62 30       	cpi	r22, 0x02	; 2
   12ba8:	71 05       	cpc	r23, r1
   12baa:	08 f4       	brcc	.+2      	; 0x12bae <bytes_make_new+0x1de>
   12bac:	52 cf       	rjmp	.-348    	; 0x12a52 <bytes_make_new+0x82>
   12bae:	e3 cf       	rjmp	.-58     	; 0x12b76 <bytes_make_new+0x1a6>
   12bb0:	62 50       	subi	r22, 0x02	; 2
   12bb2:	71 09       	sbc	r23, r1
   12bb4:	62 30       	cpi	r22, 0x02	; 2
   12bb6:	71 05       	cpc	r23, r1
   12bb8:	f0 f6       	brcc	.-68     	; 0x12b76 <bytes_make_new+0x1a6>
   12bba:	35 cf       	rjmp	.-406    	; 0x12a26 <bytes_make_new+0x56>
   12bbc:	6c 96       	adiw	r28, 0x1c	; 28
   12bbe:	0f b6       	in	r0, 0x3f	; 63
   12bc0:	f8 94       	cli
   12bc2:	de bf       	out	0x3e, r29	; 62
   12bc4:	0f be       	out	0x3f, r0	; 63
   12bc6:	cd bf       	out	0x3d, r28	; 61
   12bc8:	df 91       	pop	r29
   12bca:	cf 91       	pop	r28
   12bcc:	1f 91       	pop	r17
   12bce:	0f 91       	pop	r16
   12bd0:	ff 90       	pop	r15
   12bd2:	ef 90       	pop	r14
   12bd4:	08 95       	ret

00012bd6 <mp_obj_tuple_make_new>:
   12bd6:	af 92       	push	r10
   12bd8:	bf 92       	push	r11
   12bda:	cf 92       	push	r12
   12bdc:	df 92       	push	r13
   12bde:	ef 92       	push	r14
   12be0:	ff 92       	push	r15
   12be2:	0f 93       	push	r16
   12be4:	1f 93       	push	r17
   12be6:	cf 93       	push	r28
   12be8:	df 93       	push	r29
   12bea:	eb 01       	movw	r28, r22
   12bec:	ba 01       	movw	r22, r20
   12bee:	89 01       	movw	r16, r18
   12bf0:	22 e0       	ldi	r18, 0x02	; 2
   12bf2:	30 e0       	ldi	r19, 0x00	; 0
   12bf4:	40 e0       	ldi	r20, 0x00	; 0
   12bf6:	50 e0       	ldi	r21, 0x00	; 0
   12bf8:	ce 01       	movw	r24, r28
   12bfa:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mp_arg_check_num_sig>
   12bfe:	cd 2b       	or	r28, r29
   12c00:	09 f4       	brne	.+2      	; 0x12c04 <mp_obj_tuple_make_new+0x2e>
   12c02:	48 c0       	rjmp	.+144    	; 0x12c94 <mp_obj_tuple_make_new+0xbe>
   12c04:	f8 01       	movw	r30, r16
   12c06:	80 81       	ld	r24, Z
   12c08:	91 81       	ldd	r25, Z+1	; 0x01
   12c0a:	9c 01       	movw	r18, r24
   12c0c:	23 70       	andi	r18, 0x03	; 3
   12c0e:	33 27       	eor	r19, r19
   12c10:	23 2b       	or	r18, r19
   12c12:	31 f4       	brne	.+12     	; 0x12c20 <mp_obj_tuple_make_new+0x4a>
   12c14:	fc 01       	movw	r30, r24
   12c16:	20 81       	ld	r18, Z
   12c18:	31 81       	ldd	r19, Z+1	; 0x01
   12c1a:	2e 5a       	subi	r18, 0xAE	; 174
   12c1c:	3a 41       	sbci	r19, 0x1A	; 26
   12c1e:	e1 f1       	breq	.+120    	; 0x12c98 <mp_obj_tuple_make_new+0xc2>
   12c20:	88 e0       	ldi	r24, 0x08	; 8
   12c22:	90 e0       	ldi	r25, 0x00	; 0
   12c24:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   12c28:	7c 01       	movw	r14, r24
   12c2a:	60 e0       	ldi	r22, 0x00	; 0
   12c2c:	70 e0       	ldi	r23, 0x00	; 0
   12c2e:	f8 01       	movw	r30, r16
   12c30:	80 81       	ld	r24, Z
   12c32:	91 81       	ldd	r25, Z+1	; 0x01
   12c34:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   12c38:	6c 01       	movw	r12, r24
   12c3a:	c0 e0       	ldi	r28, 0x00	; 0
   12c3c:	d0 e0       	ldi	r29, 0x00	; 0
   12c3e:	04 e0       	ldi	r16, 0x04	; 4
   12c40:	10 e0       	ldi	r17, 0x00	; 0
   12c42:	16 c0       	rjmp	.+44     	; 0x12c70 <mp_obj_tuple_make_new+0x9a>
   12c44:	c0 17       	cp	r28, r16
   12c46:	d1 07       	cpc	r29, r17
   12c48:	58 f0       	brcs	.+22     	; 0x12c60 <mp_obj_tuple_make_new+0x8a>
   12c4a:	b8 01       	movw	r22, r16
   12c4c:	66 0f       	add	r22, r22
   12c4e:	77 1f       	adc	r23, r23
   12c50:	66 0f       	add	r22, r22
   12c52:	77 1f       	adc	r23, r23
   12c54:	c7 01       	movw	r24, r14
   12c56:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
   12c5a:	7c 01       	movw	r14, r24
   12c5c:	00 0f       	add	r16, r16
   12c5e:	11 1f       	adc	r17, r17
   12c60:	fe 01       	movw	r30, r28
   12c62:	ee 0f       	add	r30, r30
   12c64:	ff 1f       	adc	r31, r31
   12c66:	ee 0d       	add	r30, r14
   12c68:	ff 1d       	adc	r31, r15
   12c6a:	b1 82       	std	Z+1, r11	; 0x01
   12c6c:	a0 82       	st	Z, r10
   12c6e:	21 96       	adiw	r28, 0x01	; 1
   12c70:	c6 01       	movw	r24, r12
   12c72:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   12c76:	5c 01       	movw	r10, r24
   12c78:	89 2b       	or	r24, r25
   12c7a:	21 f7       	brne	.-56     	; 0x12c44 <mp_obj_tuple_make_new+0x6e>
   12c7c:	b7 01       	movw	r22, r14
   12c7e:	ce 01       	movw	r24, r28
   12c80:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   12c84:	d8 2f       	mov	r29, r24
   12c86:	c9 2f       	mov	r28, r25
   12c88:	c7 01       	movw	r24, r14
   12c8a:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
   12c8e:	8d 2f       	mov	r24, r29
   12c90:	9c 2f       	mov	r25, r28
   12c92:	02 c0       	rjmp	.+4      	; 0x12c98 <mp_obj_tuple_make_new+0xc2>
   12c94:	8a ea       	ldi	r24, 0xAA	; 170
   12c96:	9a e1       	ldi	r25, 0x1A	; 26
   12c98:	df 91       	pop	r29
   12c9a:	cf 91       	pop	r28
   12c9c:	1f 91       	pop	r17
   12c9e:	0f 91       	pop	r16
   12ca0:	ff 90       	pop	r15
   12ca2:	ef 90       	pop	r14
   12ca4:	df 90       	pop	r13
   12ca6:	cf 90       	pop	r12
   12ca8:	bf 90       	pop	r11
   12caa:	af 90       	pop	r10
   12cac:	08 95       	ret

00012cae <mp_call_method_n_kw_var>:
   12cae:	2f 92       	push	r2
   12cb0:	3f 92       	push	r3
   12cb2:	4f 92       	push	r4
   12cb4:	5f 92       	push	r5
   12cb6:	6f 92       	push	r6
   12cb8:	7f 92       	push	r7
   12cba:	8f 92       	push	r8
   12cbc:	9f 92       	push	r9
   12cbe:	af 92       	push	r10
   12cc0:	bf 92       	push	r11
   12cc2:	cf 92       	push	r12
   12cc4:	df 92       	push	r13
   12cc6:	ef 92       	push	r14
   12cc8:	ff 92       	push	r15
   12cca:	0f 93       	push	r16
   12ccc:	1f 93       	push	r17
   12cce:	cf 93       	push	r28
   12cd0:	df 93       	push	r29
   12cd2:	cd b7       	in	r28, 0x3d	; 61
   12cd4:	de b7       	in	r29, 0x3e	; 62
   12cd6:	62 97       	sbiw	r28, 0x12	; 18
   12cd8:	0f b6       	in	r0, 0x3f	; 63
   12cda:	f8 94       	cli
   12cdc:	de bf       	out	0x3e, r29	; 62
   12cde:	0f be       	out	0x3f, r0	; 63
   12ce0:	cd bf       	out	0x3d, r28	; 61
   12ce2:	da 01       	movw	r26, r20
   12ce4:	0d 90       	ld	r0, X+
   12ce6:	bc 91       	ld	r27, X
   12ce8:	a0 2d       	mov	r26, r0
   12cea:	ba 8b       	std	Y+18, r27	; 0x12
   12cec:	a9 8b       	std	Y+17, r26	; 0x11
   12cee:	81 11       	cpse	r24, r1
   12cf0:	07 c0       	rjmp	.+14     	; 0x12d00 <mp_call_method_n_kw_var+0x52>
   12cf2:	fa 01       	movw	r30, r20
   12cf4:	32 96       	adiw	r30, 0x02	; 2
   12cf6:	fe 87       	std	Y+14, r31	; 0x0e
   12cf8:	ed 87       	std	Y+13, r30	; 0x0d
   12cfa:	c1 2c       	mov	r12, r1
   12cfc:	d1 2c       	mov	r13, r1
   12cfe:	0a c0       	rjmp	.+20     	; 0x12d14 <mp_call_method_n_kw_var+0x66>
   12d00:	9a 01       	movw	r18, r20
   12d02:	2c 5f       	subi	r18, 0xFC	; 252
   12d04:	3f 4f       	sbci	r19, 0xFF	; 255
   12d06:	3e 87       	std	Y+14, r19	; 0x0e
   12d08:	2d 87       	std	Y+13, r18	; 0x0d
   12d0a:	da 01       	movw	r26, r20
   12d0c:	12 96       	adiw	r26, 0x02	; 2
   12d0e:	cd 90       	ld	r12, X+
   12d10:	dc 90       	ld	r13, X
   12d12:	13 97       	sbiw	r26, 0x03	; 3
   12d14:	1b 01       	movw	r2, r22
   12d16:	33 24       	eor	r3, r3
   12d18:	67 2e       	mov	r6, r23
   12d1a:	77 24       	eor	r7, r7
   12d1c:	f3 01       	movw	r30, r6
   12d1e:	ee 0f       	add	r30, r30
   12d20:	ff 1f       	adc	r31, r31
   12d22:	f8 8b       	std	Y+16, r31	; 0x10
   12d24:	ef 87       	std	Y+15, r30	; 0x0f
   12d26:	e2 0d       	add	r30, r2
   12d28:	f3 1d       	adc	r31, r3
   12d2a:	ee 0f       	add	r30, r30
   12d2c:	ff 1f       	adc	r31, r31
   12d2e:	2d 85       	ldd	r18, Y+13	; 0x0d
   12d30:	3e 85       	ldd	r19, Y+14	; 0x0e
   12d32:	e2 0f       	add	r30, r18
   12d34:	f3 1f       	adc	r31, r19
   12d36:	00 81       	ld	r16, Z
   12d38:	11 81       	ldd	r17, Z+1	; 0x01
   12d3a:	42 80       	ldd	r4, Z+2	; 0x02
   12d3c:	53 80       	ldd	r5, Z+3	; 0x03
   12d3e:	41 14       	cp	r4, r1
   12d40:	51 04       	cpc	r5, r1
   12d42:	e1 f0       	breq	.+56     	; 0x12d7c <mp_call_method_n_kw_var+0xce>
   12d44:	c2 01       	movw	r24, r4
   12d46:	83 70       	andi	r24, 0x03	; 3
   12d48:	99 27       	eor	r25, r25
   12d4a:	89 2b       	or	r24, r25
   12d4c:	d1 f4       	brne	.+52     	; 0x12d82 <mp_call_method_n_kw_var+0xd4>
   12d4e:	d2 01       	movw	r26, r4
   12d50:	8d 91       	ld	r24, X+
   12d52:	9c 91       	ld	r25, X
   12d54:	88 57       	subi	r24, 0x78	; 120
   12d56:	92 42       	sbci	r25, 0x22	; 34
   12d58:	b9 f4       	brne	.+46     	; 0x12d88 <mp_call_method_n_kw_var+0xda>
   12d5a:	f2 01       	movw	r30, r4
   12d5c:	82 81       	ldd	r24, Z+2	; 0x02
   12d5e:	86 95       	lsr	r24
   12d60:	86 95       	lsr	r24
   12d62:	86 95       	lsr	r24
   12d64:	93 81       	ldd	r25, Z+3	; 0x03
   12d66:	29 2f       	mov	r18, r25
   12d68:	22 95       	swap	r18
   12d6a:	22 0f       	add	r18, r18
   12d6c:	20 7e       	andi	r18, 0xE0	; 224
   12d6e:	a2 2e       	mov	r10, r18
   12d70:	a8 2a       	or	r10, r24
   12d72:	b9 2e       	mov	r11, r25
   12d74:	b6 94       	lsr	r11
   12d76:	b6 94       	lsr	r11
   12d78:	b6 94       	lsr	r11
   12d7a:	08 c0       	rjmp	.+16     	; 0x12d8c <mp_call_method_n_kw_var+0xde>
   12d7c:	a1 2c       	mov	r10, r1
   12d7e:	b1 2c       	mov	r11, r1
   12d80:	05 c0       	rjmp	.+10     	; 0x12d8c <mp_call_method_n_kw_var+0xde>
   12d82:	a1 2c       	mov	r10, r1
   12d84:	b1 2c       	mov	r11, r1
   12d86:	02 c0       	rjmp	.+4      	; 0x12d8c <mp_call_method_n_kw_var+0xde>
   12d88:	a1 2c       	mov	r10, r1
   12d8a:	b1 2c       	mov	r11, r1
   12d8c:	01 15       	cp	r16, r1
   12d8e:	11 05       	cpc	r17, r1
   12d90:	59 f5       	brne	.+86     	; 0x12de8 <mp_call_method_n_kw_var+0x13a>
   12d92:	a6 0c       	add	r10, r6
   12d94:	b7 1c       	adc	r11, r7
   12d96:	aa 0c       	add	r10, r10
   12d98:	bb 1c       	adc	r11, r11
   12d9a:	71 01       	movw	r14, r2
   12d9c:	ff ef       	ldi	r31, 0xFF	; 255
   12d9e:	ef 1a       	sub	r14, r31
   12da0:	ff 0a       	sbc	r15, r31
   12da2:	ea 0c       	add	r14, r10
   12da4:	fb 1c       	adc	r15, r11
   12da6:	c7 01       	movw	r24, r14
   12da8:	88 0f       	add	r24, r24
   12daa:	99 1f       	adc	r25, r25
   12dac:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   12db0:	5c 01       	movw	r10, r24
   12db2:	c1 14       	cp	r12, r1
   12db4:	d1 04       	cpc	r13, r1
   12db6:	31 f0       	breq	.+12     	; 0x12dc4 <mp_call_method_n_kw_var+0x116>
   12db8:	dc 01       	movw	r26, r24
   12dba:	cd 92       	st	X+, r12
   12dbc:	dc 92       	st	X, r13
   12dbe:	01 e0       	ldi	r16, 0x01	; 1
   12dc0:	10 e0       	ldi	r17, 0x00	; 0
   12dc2:	02 c0       	rjmp	.+4      	; 0x12dc8 <mp_call_method_n_kw_var+0x11a>
   12dc4:	00 e0       	ldi	r16, 0x00	; 0
   12dc6:	10 e0       	ldi	r17, 0x00	; 0
   12dc8:	c8 01       	movw	r24, r16
   12dca:	88 0f       	add	r24, r24
   12dcc:	99 1f       	adc	r25, r25
   12dce:	a1 01       	movw	r20, r2
   12dd0:	44 0f       	add	r20, r20
   12dd2:	55 1f       	adc	r21, r21
   12dd4:	6d 85       	ldd	r22, Y+13	; 0x0d
   12dd6:	7e 85       	ldd	r23, Y+14	; 0x0e
   12dd8:	8a 0d       	add	r24, r10
   12dda:	9b 1d       	adc	r25, r11
   12ddc:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   12de0:	41 01       	movw	r8, r2
   12de2:	80 0e       	add	r8, r16
   12de4:	91 1e       	adc	r9, r17
   12de6:	b2 c0       	rjmp	.+356    	; 0x12f4c <mp_call_method_n_kw_var+0x29e>
   12de8:	c8 01       	movw	r24, r16
   12dea:	83 70       	andi	r24, 0x03	; 3
   12dec:	99 27       	eor	r25, r25
   12dee:	89 2b       	or	r24, r25
   12df0:	09 f0       	breq	.+2      	; 0x12df4 <mp_call_method_n_kw_var+0x146>
   12df2:	56 c0       	rjmp	.+172    	; 0x12ea0 <mp_call_method_n_kw_var+0x1f2>
   12df4:	f8 01       	movw	r30, r16
   12df6:	80 81       	ld	r24, Z
   12df8:	91 81       	ldd	r25, Z+1	; 0x01
   12dfa:	fa e1       	ldi	r31, 0x1A	; 26
   12dfc:	8e 3a       	cpi	r24, 0xAE	; 174
   12dfe:	9f 07       	cpc	r25, r31
   12e00:	21 f0       	breq	.+8      	; 0x12e0a <mp_call_method_n_kw_var+0x15c>
   12e02:	8c 52       	subi	r24, 0x2C	; 44
   12e04:	9d 41       	sbci	r25, 0x1D	; 29
   12e06:	09 f0       	breq	.+2      	; 0x12e0a <mp_call_method_n_kw_var+0x15c>
   12e08:	4b c0       	rjmp	.+150    	; 0x12ea0 <mp_call_method_n_kw_var+0x1f2>
   12e0a:	ae 01       	movw	r20, r28
   12e0c:	4f 5f       	subi	r20, 0xFF	; 255
   12e0e:	5f 4f       	sbci	r21, 0xFF	; 255
   12e10:	be 01       	movw	r22, r28
   12e12:	67 5f       	subi	r22, 0xF7	; 247
   12e14:	7f 4f       	sbci	r23, 0xFF	; 255
   12e16:	c8 01       	movw	r24, r16
   12e18:	0e 94 1b 29 	call	0x5236	; 0x5236 <mp_obj_get_array>
   12e1c:	e9 84       	ldd	r14, Y+9	; 0x09
   12e1e:	fa 84       	ldd	r15, Y+10	; 0x0a
   12e20:	3f ef       	ldi	r19, 0xFF	; 255
   12e22:	e3 1a       	sub	r14, r19
   12e24:	f3 0a       	sbc	r15, r19
   12e26:	c7 01       	movw	r24, r14
   12e28:	82 0d       	add	r24, r2
   12e2a:	93 1d       	adc	r25, r3
   12e2c:	73 01       	movw	r14, r6
   12e2e:	ea 0c       	add	r14, r10
   12e30:	fb 1c       	adc	r15, r11
   12e32:	ee 0c       	add	r14, r14
   12e34:	ff 1c       	adc	r15, r15
   12e36:	e8 0e       	add	r14, r24
   12e38:	f9 1e       	adc	r15, r25
   12e3a:	c7 01       	movw	r24, r14
   12e3c:	88 0f       	add	r24, r24
   12e3e:	99 1f       	adc	r25, r25
   12e40:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   12e44:	5c 01       	movw	r10, r24
   12e46:	c1 14       	cp	r12, r1
   12e48:	d1 04       	cpc	r13, r1
   12e4a:	31 f0       	breq	.+12     	; 0x12e58 <mp_call_method_n_kw_var+0x1aa>
   12e4c:	dc 01       	movw	r26, r24
   12e4e:	cd 92       	st	X+, r12
   12e50:	dc 92       	st	X, r13
   12e52:	01 e0       	ldi	r16, 0x01	; 1
   12e54:	10 e0       	ldi	r17, 0x00	; 0
   12e56:	02 c0       	rjmp	.+4      	; 0x12e5c <mp_call_method_n_kw_var+0x1ae>
   12e58:	00 e0       	ldi	r16, 0x00	; 0
   12e5a:	10 e0       	ldi	r17, 0x00	; 0
   12e5c:	c8 01       	movw	r24, r16
   12e5e:	88 0f       	add	r24, r24
   12e60:	99 1f       	adc	r25, r25
   12e62:	a1 01       	movw	r20, r2
   12e64:	44 0f       	add	r20, r20
   12e66:	55 1f       	adc	r21, r21
   12e68:	6d 85       	ldd	r22, Y+13	; 0x0d
   12e6a:	7e 85       	ldd	r23, Y+14	; 0x0e
   12e6c:	8a 0d       	add	r24, r10
   12e6e:	9b 1d       	adc	r25, r11
   12e70:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   12e74:	c1 01       	movw	r24, r2
   12e76:	80 0f       	add	r24, r16
   12e78:	91 1f       	adc	r25, r17
   12e7a:	88 0f       	add	r24, r24
   12e7c:	99 1f       	adc	r25, r25
   12e7e:	49 85       	ldd	r20, Y+9	; 0x09
   12e80:	5a 85       	ldd	r21, Y+10	; 0x0a
   12e82:	44 0f       	add	r20, r20
   12e84:	55 1f       	adc	r21, r21
   12e86:	69 81       	ldd	r22, Y+1	; 0x01
   12e88:	7a 81       	ldd	r23, Y+2	; 0x02
   12e8a:	8a 0d       	add	r24, r10
   12e8c:	9b 1d       	adc	r25, r11
   12e8e:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   12e92:	89 84       	ldd	r8, Y+9	; 0x09
   12e94:	9a 84       	ldd	r9, Y+10	; 0x0a
   12e96:	82 0c       	add	r8, r2
   12e98:	93 1c       	adc	r9, r3
   12e9a:	80 0e       	add	r8, r16
   12e9c:	91 1e       	adc	r9, r17
   12e9e:	56 c0       	rjmp	.+172    	; 0x12f4c <mp_call_method_n_kw_var+0x29e>
   12ea0:	a6 0c       	add	r10, r6
   12ea2:	b7 1c       	adc	r11, r7
   12ea4:	aa 0c       	add	r10, r10
   12ea6:	bb 1c       	adc	r11, r11
   12ea8:	71 01       	movw	r14, r2
   12eaa:	b4 e0       	ldi	r27, 0x04	; 4
   12eac:	eb 0e       	add	r14, r27
   12eae:	f1 1c       	adc	r15, r1
   12eb0:	ea 0c       	add	r14, r10
   12eb2:	fb 1c       	adc	r15, r11
   12eb4:	c7 01       	movw	r24, r14
   12eb6:	88 0f       	add	r24, r24
   12eb8:	99 1f       	adc	r25, r25
   12eba:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   12ebe:	5c 01       	movw	r10, r24
   12ec0:	c1 14       	cp	r12, r1
   12ec2:	d1 04       	cpc	r13, r1
   12ec4:	39 f0       	breq	.+14     	; 0x12ed4 <mp_call_method_n_kw_var+0x226>
   12ec6:	fc 01       	movw	r30, r24
   12ec8:	d1 82       	std	Z+1, r13	; 0x01
   12eca:	c0 82       	st	Z, r12
   12ecc:	88 24       	eor	r8, r8
   12ece:	83 94       	inc	r8
   12ed0:	91 2c       	mov	r9, r1
   12ed2:	02 c0       	rjmp	.+4      	; 0x12ed8 <mp_call_method_n_kw_var+0x22a>
   12ed4:	81 2c       	mov	r8, r1
   12ed6:	91 2c       	mov	r9, r1
   12ed8:	c4 01       	movw	r24, r8
   12eda:	88 0f       	add	r24, r24
   12edc:	99 1f       	adc	r25, r25
   12ede:	a1 01       	movw	r20, r2
   12ee0:	44 0f       	add	r20, r20
   12ee2:	55 1f       	adc	r21, r21
   12ee4:	6d 85       	ldd	r22, Y+13	; 0x0d
   12ee6:	7e 85       	ldd	r23, Y+14	; 0x0e
   12ee8:	8a 0d       	add	r24, r10
   12eea:	9b 1d       	adc	r25, r11
   12eec:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   12ef0:	82 0c       	add	r8, r2
   12ef2:	93 1c       	adc	r9, r3
   12ef4:	be 01       	movw	r22, r28
   12ef6:	6f 5f       	subi	r22, 0xFF	; 255
   12ef8:	7f 4f       	sbci	r23, 0xFF	; 255
   12efa:	c8 01       	movw	r24, r16
   12efc:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   12f00:	9c 87       	std	Y+12, r25	; 0x0c
   12f02:	8b 87       	std	Y+11, r24	; 0x0b
   12f04:	64 01       	movw	r12, r8
   12f06:	cc 0c       	add	r12, r12
   12f08:	dd 1c       	adc	r13, r13
   12f0a:	19 c0       	rjmp	.+50     	; 0x12f3e <mp_call_method_n_kw_var+0x290>
   12f0c:	8e 14       	cp	r8, r14
   12f0e:	9f 04       	cpc	r9, r15
   12f10:	58 f0       	brcs	.+22     	; 0x12f28 <mp_call_method_n_kw_var+0x27a>
   12f12:	b7 01       	movw	r22, r14
   12f14:	66 0f       	add	r22, r22
   12f16:	77 1f       	adc	r23, r23
   12f18:	66 0f       	add	r22, r22
   12f1a:	77 1f       	adc	r23, r23
   12f1c:	c5 01       	movw	r24, r10
   12f1e:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
   12f22:	5c 01       	movw	r10, r24
   12f24:	ee 0c       	add	r14, r14
   12f26:	ff 1c       	adc	r15, r15
   12f28:	ff ef       	ldi	r31, 0xFF	; 255
   12f2a:	8f 1a       	sub	r8, r31
   12f2c:	9f 0a       	sbc	r9, r31
   12f2e:	f5 01       	movw	r30, r10
   12f30:	ec 0d       	add	r30, r12
   12f32:	fd 1d       	adc	r31, r13
   12f34:	11 83       	std	Z+1, r17	; 0x01
   12f36:	00 83       	st	Z, r16
   12f38:	22 e0       	ldi	r18, 0x02	; 2
   12f3a:	c2 0e       	add	r12, r18
   12f3c:	d1 1c       	adc	r13, r1
   12f3e:	8b 85       	ldd	r24, Y+11	; 0x0b
   12f40:	9c 85       	ldd	r25, Y+12	; 0x0c
   12f42:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   12f46:	8c 01       	movw	r16, r24
   12f48:	89 2b       	or	r24, r25
   12f4a:	01 f7       	brne	.-64     	; 0x12f0c <mp_call_method_n_kw_var+0x25e>
   12f4c:	a3 01       	movw	r20, r6
   12f4e:	44 0f       	add	r20, r20
   12f50:	55 1f       	adc	r21, r21
   12f52:	44 0f       	add	r20, r20
   12f54:	55 1f       	adc	r21, r21
   12f56:	22 0c       	add	r2, r2
   12f58:	33 1c       	adc	r3, r3
   12f5a:	6d 85       	ldd	r22, Y+13	; 0x0d
   12f5c:	7e 85       	ldd	r23, Y+14	; 0x0e
   12f5e:	62 0d       	add	r22, r2
   12f60:	73 1d       	adc	r23, r3
   12f62:	c4 01       	movw	r24, r8
   12f64:	88 0f       	add	r24, r24
   12f66:	99 1f       	adc	r25, r25
   12f68:	8a 0d       	add	r24, r10
   12f6a:	9b 1d       	adc	r25, r11
   12f6c:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   12f70:	cf 84       	ldd	r12, Y+15	; 0x0f
   12f72:	d8 88       	ldd	r13, Y+16	; 0x10
   12f74:	c8 0c       	add	r12, r8
   12f76:	d9 1c       	adc	r13, r9
   12f78:	41 14       	cp	r4, r1
   12f7a:	51 04       	cpc	r5, r1
   12f7c:	09 f4       	brne	.+2      	; 0x12f80 <mp_call_method_n_kw_var+0x2d2>
   12f7e:	ce c0       	rjmp	.+412    	; 0x1311c <mp_call_method_n_kw_var+0x46e>
   12f80:	c2 01       	movw	r24, r4
   12f82:	83 70       	andi	r24, 0x03	; 3
   12f84:	99 27       	eor	r25, r25
   12f86:	89 2b       	or	r24, r25
   12f88:	09 f0       	breq	.+2      	; 0x12f8c <mp_call_method_n_kw_var+0x2de>
   12f8a:	5f c0       	rjmp	.+190    	; 0x1304a <mp_call_method_n_kw_var+0x39c>
   12f8c:	d2 01       	movw	r26, r4
   12f8e:	8d 91       	ld	r24, X+
   12f90:	9c 91       	ld	r25, X
   12f92:	88 57       	subi	r24, 0x78	; 120
   12f94:	92 42       	sbci	r25, 0x22	; 34
   12f96:	09 f0       	breq	.+2      	; 0x12f9a <mp_call_method_n_kw_var+0x2ec>
   12f98:	58 c0       	rjmp	.+176    	; 0x1304a <mp_call_method_n_kw_var+0x39c>
   12f9a:	f2 01       	movw	r30, r4
   12f9c:	22 81       	ldd	r18, Z+2	; 0x02
   12f9e:	26 95       	lsr	r18
   12fa0:	26 95       	lsr	r18
   12fa2:	26 95       	lsr	r18
   12fa4:	33 81       	ldd	r19, Z+3	; 0x03
   12fa6:	43 2f       	mov	r20, r19
   12fa8:	42 95       	swap	r20
   12faa:	44 0f       	add	r20, r20
   12fac:	40 7e       	andi	r20, 0xE0	; 224
   12fae:	84 2f       	mov	r24, r20
   12fb0:	82 2b       	or	r24, r18
   12fb2:	93 2f       	mov	r25, r19
   12fb4:	96 95       	lsr	r25
   12fb6:	96 95       	lsr	r25
   12fb8:	96 95       	lsr	r25
   12fba:	88 0f       	add	r24, r24
   12fbc:	99 1f       	adc	r25, r25
   12fbe:	8c 0d       	add	r24, r12
   12fc0:	9d 1d       	adc	r25, r13
   12fc2:	e8 16       	cp	r14, r24
   12fc4:	f9 06       	cpc	r15, r25
   12fc6:	28 f0       	brcs	.+10     	; 0x12fd2 <mp_call_method_n_kw_var+0x324>
   12fc8:	84 81       	ldd	r24, Z+4	; 0x04
   12fca:	95 81       	ldd	r25, Z+5	; 0x05
   12fcc:	89 2b       	or	r24, r25
   12fce:	19 f4       	brne	.+6      	; 0x12fd6 <mp_call_method_n_kw_var+0x328>
   12fd0:	a5 c0       	rjmp	.+330    	; 0x1311c <mp_call_method_n_kw_var+0x46e>
   12fd2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   12fd6:	00 e0       	ldi	r16, 0x00	; 0
   12fd8:	10 e0       	ldi	r17, 0x00	; 0
   12fda:	e1 2c       	mov	r14, r1
   12fdc:	f1 2c       	mov	r15, r1
   12fde:	d2 01       	movw	r26, r4
   12fe0:	16 96       	adiw	r26, 0x06	; 6
   12fe2:	ed 91       	ld	r30, X+
   12fe4:	fc 91       	ld	r31, X
   12fe6:	17 97       	sbiw	r26, 0x07	; 7
   12fe8:	e0 0f       	add	r30, r16
   12fea:	f1 1f       	adc	r31, r17
   12fec:	80 81       	ld	r24, Z
   12fee:	91 81       	ldd	r25, Z+1	; 0x01
   12ff0:	00 97       	sbiw	r24, 0x00	; 0
   12ff2:	f9 f0       	breq	.+62     	; 0x13032 <mp_call_method_n_kw_var+0x384>
   12ff4:	84 30       	cpi	r24, 0x04	; 4
   12ff6:	91 05       	cpc	r25, r1
   12ff8:	09 f0       	breq	.+2      	; 0x12ffc <mp_call_method_n_kw_var+0x34e>
   12ffa:	88 c0       	rjmp	.+272    	; 0x1310c <mp_call_method_n_kw_var+0x45e>
   12ffc:	1a c0       	rjmp	.+52     	; 0x13032 <mp_call_method_n_kw_var+0x384>
   12ffe:	0e 94 aa 81 	call	0x10354	; 0x10354 <mp_obj_str_intern_checked>
   13002:	f6 01       	movw	r30, r12
   13004:	ee 0f       	add	r30, r30
   13006:	ff 1f       	adc	r31, r31
   13008:	ea 0d       	add	r30, r10
   1300a:	fb 1d       	adc	r31, r11
   1300c:	91 83       	std	Z+1, r25	; 0x01
   1300e:	80 83       	st	Z, r24
   13010:	b2 e0       	ldi	r27, 0x02	; 2
   13012:	cb 0e       	add	r12, r27
   13014:	d1 1c       	adc	r13, r1
   13016:	d2 01       	movw	r26, r4
   13018:	16 96       	adiw	r26, 0x06	; 6
   1301a:	8d 91       	ld	r24, X+
   1301c:	9c 91       	ld	r25, X
   1301e:	17 97       	sbiw	r26, 0x07	; 7
   13020:	dc 01       	movw	r26, r24
   13022:	a0 0f       	add	r26, r16
   13024:	b1 1f       	adc	r27, r17
   13026:	12 96       	adiw	r26, 0x02	; 2
   13028:	8d 91       	ld	r24, X+
   1302a:	9c 91       	ld	r25, X
   1302c:	13 97       	sbiw	r26, 0x03	; 3
   1302e:	93 83       	std	Z+3, r25	; 0x03
   13030:	82 83       	std	Z+2, r24	; 0x02
   13032:	bf ef       	ldi	r27, 0xFF	; 255
   13034:	eb 1a       	sub	r14, r27
   13036:	fb 0a       	sbc	r15, r27
   13038:	0c 5f       	subi	r16, 0xFC	; 252
   1303a:	1f 4f       	sbci	r17, 0xFF	; 255
   1303c:	f2 01       	movw	r30, r4
   1303e:	84 81       	ldd	r24, Z+4	; 0x04
   13040:	95 81       	ldd	r25, Z+5	; 0x05
   13042:	e8 16       	cp	r14, r24
   13044:	f9 06       	cpc	r15, r25
   13046:	58 f2       	brcs	.-106    	; 0x12fde <mp_call_method_n_kw_var+0x330>
   13048:	69 c0       	rjmp	.+210    	; 0x1311c <mp_call_method_n_kw_var+0x46e>
   1304a:	ae 01       	movw	r20, r28
   1304c:	4f 5f       	subi	r20, 0xFF	; 255
   1304e:	5f 4f       	sbci	r21, 0xFF	; 255
   13050:	6a e6       	ldi	r22, 0x6A	; 106
   13052:	70 e0       	ldi	r23, 0x00	; 0
   13054:	c2 01       	movw	r24, r4
   13056:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
   1305a:	ae 01       	movw	r20, r28
   1305c:	4f 5f       	subi	r20, 0xFF	; 255
   1305e:	5f 4f       	sbci	r21, 0xFF	; 255
   13060:	60 e0       	ldi	r22, 0x00	; 0
   13062:	70 e0       	ldi	r23, 0x00	; 0
   13064:	80 e0       	ldi	r24, 0x00	; 0
   13066:	90 e0       	ldi	r25, 0x00	; 0
   13068:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   1306c:	60 e0       	ldi	r22, 0x00	; 0
   1306e:	70 e0       	ldi	r23, 0x00	; 0
   13070:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   13074:	1c 01       	movw	r2, r24
   13076:	36 01       	movw	r6, r12
   13078:	66 0c       	add	r6, r6
   1307a:	77 1c       	adc	r7, r7
   1307c:	3f c0       	rjmp	.+126    	; 0x130fc <mp_call_method_n_kw_var+0x44e>
   1307e:	c6 01       	movw	r24, r12
   13080:	01 96       	adiw	r24, 0x01	; 1
   13082:	8e 15       	cp	r24, r14
   13084:	9f 05       	cpc	r25, r15
   13086:	88 f0       	brcs	.+34     	; 0x130aa <mp_call_method_n_kw_var+0x3fc>
   13088:	ee 0c       	add	r14, r14
   1308a:	ff 1c       	adc	r15, r15
   1308c:	f4 e0       	ldi	r31, 0x04	; 4
   1308e:	ef 16       	cp	r14, r31
   13090:	f1 04       	cpc	r15, r1
   13092:	20 f4       	brcc	.+8      	; 0x1309c <mp_call_method_n_kw_var+0x3ee>
   13094:	68 94       	set
   13096:	ee 24       	eor	r14, r14
   13098:	e2 f8       	bld	r14, 2
   1309a:	f1 2c       	mov	r15, r1
   1309c:	b7 01       	movw	r22, r14
   1309e:	66 0f       	add	r22, r22
   130a0:	77 1f       	adc	r23, r23
   130a2:	c5 01       	movw	r24, r10
   130a4:	0e 94 11 4e 	call	0x9c22	; 0x9c22 <m_realloc>
   130a8:	5c 01       	movw	r10, r24
   130aa:	c8 01       	movw	r24, r16
   130ac:	87 70       	andi	r24, 0x07	; 7
   130ae:	99 27       	eor	r25, r25
   130b0:	02 97       	sbiw	r24, 0x02	; 2
   130b2:	21 f0       	breq	.+8      	; 0x130bc <mp_call_method_n_kw_var+0x40e>
   130b4:	c8 01       	movw	r24, r16
   130b6:	0e 94 aa 81 	call	0x10354	; 0x10354 <mp_obj_str_intern_checked>
   130ba:	8c 01       	movw	r16, r24
   130bc:	ae 01       	movw	r20, r28
   130be:	4f 5f       	subi	r20, 0xFF	; 255
   130c0:	5f 4f       	sbci	r21, 0xFF	; 255
   130c2:	6f e0       	ldi	r22, 0x0F	; 15
   130c4:	70 e0       	ldi	r23, 0x00	; 0
   130c6:	c2 01       	movw	r24, r4
   130c8:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
   130cc:	1e 83       	std	Y+6, r17	; 0x06
   130ce:	0d 83       	std	Y+5, r16	; 0x05
   130d0:	ae 01       	movw	r20, r28
   130d2:	4f 5f       	subi	r20, 0xFF	; 255
   130d4:	5f 4f       	sbci	r21, 0xFF	; 255
   130d6:	60 e0       	ldi	r22, 0x00	; 0
   130d8:	70 e0       	ldi	r23, 0x00	; 0
   130da:	81 e0       	ldi	r24, 0x01	; 1
   130dc:	90 e0       	ldi	r25, 0x00	; 0
   130de:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   130e2:	f5 01       	movw	r30, r10
   130e4:	e6 0d       	add	r30, r6
   130e6:	f7 1d       	adc	r31, r7
   130e8:	11 83       	std	Z+1, r17	; 0x01
   130ea:	00 83       	st	Z, r16
   130ec:	22 e0       	ldi	r18, 0x02	; 2
   130ee:	c2 0e       	add	r12, r18
   130f0:	d1 1c       	adc	r13, r1
   130f2:	93 83       	std	Z+3, r25	; 0x03
   130f4:	82 83       	std	Z+2, r24	; 0x02
   130f6:	34 e0       	ldi	r19, 0x04	; 4
   130f8:	63 0e       	add	r6, r19
   130fa:	71 1c       	adc	r7, r1
   130fc:	c1 01       	movw	r24, r2
   130fe:	0e 94 ad 87 	call	0x10f5a	; 0x10f5a <mp_iternext>
   13102:	8c 01       	movw	r16, r24
   13104:	89 2b       	or	r24, r25
   13106:	09 f0       	breq	.+2      	; 0x1310a <mp_call_method_n_kw_var+0x45c>
   13108:	ba cf       	rjmp	.-140    	; 0x1307e <mp_call_method_n_kw_var+0x3d0>
   1310a:	08 c0       	rjmp	.+16     	; 0x1311c <mp_call_method_n_kw_var+0x46e>
   1310c:	9c 01       	movw	r18, r24
   1310e:	27 70       	andi	r18, 0x07	; 7
   13110:	33 27       	eor	r19, r19
   13112:	22 30       	cpi	r18, 0x02	; 2
   13114:	31 05       	cpc	r19, r1
   13116:	09 f0       	breq	.+2      	; 0x1311a <mp_call_method_n_kw_var+0x46c>
   13118:	72 cf       	rjmp	.-284    	; 0x12ffe <mp_call_method_n_kw_var+0x350>
   1311a:	73 cf       	rjmp	.-282    	; 0x13002 <mp_call_method_n_kw_var+0x354>
   1311c:	a6 01       	movw	r20, r12
   1311e:	48 19       	sub	r20, r8
   13120:	59 09       	sbc	r21, r9
   13122:	56 95       	lsr	r21
   13124:	47 95       	ror	r20
   13126:	95 01       	movw	r18, r10
   13128:	b4 01       	movw	r22, r8
   1312a:	89 89       	ldd	r24, Y+17	; 0x11
   1312c:	9a 89       	ldd	r25, Y+18	; 0x12
   1312e:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
   13132:	8c 01       	movw	r16, r24
   13134:	c5 01       	movw	r24, r10
   13136:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
   1313a:	c8 01       	movw	r24, r16
   1313c:	62 96       	adiw	r28, 0x12	; 18
   1313e:	0f b6       	in	r0, 0x3f	; 63
   13140:	f8 94       	cli
   13142:	de bf       	out	0x3e, r29	; 62
   13144:	0f be       	out	0x3f, r0	; 63
   13146:	cd bf       	out	0x3d, r28	; 61
   13148:	df 91       	pop	r29
   1314a:	cf 91       	pop	r28
   1314c:	1f 91       	pop	r17
   1314e:	0f 91       	pop	r16
   13150:	ff 90       	pop	r15
   13152:	ef 90       	pop	r14
   13154:	df 90       	pop	r13
   13156:	cf 90       	pop	r12
   13158:	bf 90       	pop	r11
   1315a:	af 90       	pop	r10
   1315c:	9f 90       	pop	r9
   1315e:	8f 90       	pop	r8
   13160:	7f 90       	pop	r7
   13162:	6f 90       	pop	r6
   13164:	5f 90       	pop	r5
   13166:	4f 90       	pop	r4
   13168:	3f 90       	pop	r3
   1316a:	2f 90       	pop	r2
   1316c:	08 95       	ret

0001316e <mp_compile>:
   1316e:	2f 92       	push	r2
   13170:	3f 92       	push	r3
   13172:	4f 92       	push	r4
   13174:	5f 92       	push	r5
   13176:	6f 92       	push	r6
   13178:	7f 92       	push	r7
   1317a:	8f 92       	push	r8
   1317c:	9f 92       	push	r9
   1317e:	af 92       	push	r10
   13180:	bf 92       	push	r11
   13182:	cf 92       	push	r12
   13184:	df 92       	push	r13
   13186:	ef 92       	push	r14
   13188:	ff 92       	push	r15
   1318a:	0f 93       	push	r16
   1318c:	1f 93       	push	r17
   1318e:	cf 93       	push	r28
   13190:	df 93       	push	r29
   13192:	cd b7       	in	r28, 0x3d	; 61
   13194:	de b7       	in	r29, 0x3e	; 62
   13196:	a7 97       	sbiw	r28, 0x27	; 39
   13198:	0f b6       	in	r0, 0x3f	; 63
   1319a:	f8 94       	cli
   1319c:	de bf       	out	0x3e, r29	; 62
   1319e:	0f be       	out	0x3f, r0	; 63
   131a0:	cd bf       	out	0x3d, r28	; 61
   131a2:	9d a3       	std	Y+37, r25	; 0x25
   131a4:	8c a3       	std	Y+36, r24	; 0x24
   131a6:	ce 01       	movw	r24, r28
   131a8:	01 96       	adiw	r24, 0x01	; 1
   131aa:	2d e1       	ldi	r18, 0x1D	; 29
   131ac:	dc 01       	movw	r26, r24
   131ae:	1d 92       	st	X+, r1
   131b0:	2a 95       	dec	r18
   131b2:	e9 f7       	brne	.-6      	; 0x131ae <mp_compile+0x40>
   131b4:	7a 83       	std	Y+2, r23	; 0x02
   131b6:	69 83       	std	Y+1, r22	; 0x01
   131b8:	4b 83       	std	Y+3, r20	; 0x03
   131ba:	2f ef       	ldi	r18, 0xFF	; 255
   131bc:	3f ef       	ldi	r19, 0xFF	; 255
   131be:	39 8b       	std	Y+17, r19	; 0x11
   131c0:	28 8b       	std	Y+16, r18	; 0x10
   131c2:	3b 8b       	std	Y+19, r19	; 0x13
   131c4:	2a 8b       	std	Y+18, r18	; 0x12
   131c6:	ec a1       	ldd	r30, Y+36	; 0x24
   131c8:	fd a1       	ldd	r31, Y+37	; 0x25
   131ca:	40 81       	ld	r20, Z
   131cc:	51 81       	ldd	r21, Z+1	; 0x01
   131ce:	20 e0       	ldi	r18, 0x00	; 0
   131d0:	30 e0       	ldi	r19, 0x00	; 0
   131d2:	60 e0       	ldi	r22, 0x00	; 0
   131d4:	0e 94 ca 4c 	call	0x9994	; 0x9994 <scope_new_and_link>
   131d8:	4c 01       	movw	r8, r24
   131da:	0e 94 0c 4e 	call	0x9c18	; 0x9c18 <emit_bc_new>
   131de:	2c 01       	movw	r4, r24
   131e0:	9d 8f       	std	Y+29, r25	; 0x1d
   131e2:	8c 8f       	std	Y+28, r24	; 0x1c
   131e4:	c8 8c       	ldd	r12, Y+24	; 0x18
   131e6:	d9 8c       	ldd	r13, Y+25	; 0x19
   131e8:	c1 14       	cp	r12, r1
   131ea:	d1 04       	cpc	r13, r1
   131ec:	09 f4       	brne	.+2      	; 0x131f0 <mp_compile+0x82>
   131ee:	c5 c1       	rjmp	.+906    	; 0x1357a <mp_compile+0x40c>
   131f0:	8e 81       	ldd	r24, Y+6	; 0x06
   131f2:	9f 81       	ldd	r25, Y+7	; 0x07
   131f4:	89 2b       	or	r24, r25
   131f6:	09 f0       	breq	.+2      	; 0x131fa <mp_compile+0x8c>
   131f8:	c3 c1       	rjmp	.+902    	; 0x13580 <mp_compile+0x412>
   131fa:	21 2c       	mov	r2, r1
   131fc:	31 2c       	mov	r3, r1
   131fe:	41 e0       	ldi	r20, 0x01	; 1
   13200:	b6 01       	movw	r22, r12
   13202:	ce 01       	movw	r24, r28
   13204:	01 96       	adiw	r24, 0x01	; 1
   13206:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <compile_scope>
   1320a:	d6 01       	movw	r26, r12
   1320c:	5f 96       	adiw	r26, 0x1f	; 31
   1320e:	8d 91       	ld	r24, X+
   13210:	9c 91       	ld	r25, X
   13212:	90 97       	sbiw	r26, 0x20	; 32
   13214:	89 2b       	or	r24, r25
   13216:	e9 f0       	breq	.+58     	; 0x13252 <mp_compile+0xe4>
   13218:	e1 2c       	mov	r14, r1
   1321a:	f1 2c       	mov	r15, r1
   1321c:	00 e0       	ldi	r16, 0x00	; 0
   1321e:	10 e0       	ldi	r17, 0x00	; 0
   13220:	d6 01       	movw	r26, r12
   13222:	91 96       	adiw	r26, 0x21	; 33
   13224:	ed 91       	ld	r30, X+
   13226:	fc 91       	ld	r31, X
   13228:	92 97       	sbiw	r26, 0x22	; 34
   1322a:	ee 0d       	add	r30, r14
   1322c:	ff 1d       	adc	r31, r15
   1322e:	80 81       	ld	r24, Z
   13230:	81 30       	cpi	r24, 0x01	; 1
   13232:	21 f4       	brne	.+8      	; 0x1323c <mp_compile+0xce>
   13234:	bf 01       	movw	r22, r30
   13236:	c6 01       	movw	r24, r12
   13238:	0e 94 3e 56 	call	0xac7c	; 0xac7c <scope_check_to_close_over>
   1323c:	0f 5f       	subi	r16, 0xFF	; 255
   1323e:	1f 4f       	sbci	r17, 0xFF	; 255
   13240:	b6 e0       	ldi	r27, 0x06	; 6
   13242:	eb 0e       	add	r14, r27
   13244:	f1 1c       	adc	r15, r1
   13246:	f6 01       	movw	r30, r12
   13248:	87 8d       	ldd	r24, Z+31	; 0x1f
   1324a:	90 a1       	ldd	r25, Z+32	; 0x20
   1324c:	08 17       	cp	r16, r24
   1324e:	19 07       	cpc	r17, r25
   13250:	38 f3       	brcs	.-50     	; 0x13220 <mp_compile+0xb2>
   13252:	8a 85       	ldd	r24, Y+10	; 0x0a
   13254:	9b 85       	ldd	r25, Y+11	; 0x0b
   13256:	28 16       	cp	r2, r24
   13258:	39 06       	cpc	r3, r25
   1325a:	08 f4       	brcc	.+2      	; 0x1325e <mp_compile+0xf0>
   1325c:	1c 01       	movw	r2, r24
   1325e:	d6 01       	movw	r26, r12
   13260:	13 96       	adiw	r26, 0x03	; 3
   13262:	cd 90       	ld	r12, X+
   13264:	dc 90       	ld	r13, X
   13266:	14 97       	sbiw	r26, 0x04	; 4
   13268:	c1 14       	cp	r12, r1
   1326a:	d1 04       	cpc	r13, r1
   1326c:	29 f0       	breq	.+10     	; 0x13278 <mp_compile+0x10a>
   1326e:	8e 81       	ldd	r24, Y+6	; 0x06
   13270:	9f 81       	ldd	r25, Y+7	; 0x07
   13272:	89 2b       	or	r24, r25
   13274:	21 f2       	breq	.-120    	; 0x131fe <mp_compile+0x90>
   13276:	86 c1       	rjmp	.+780    	; 0x13584 <mp_compile+0x416>
   13278:	88 8d       	ldd	r24, Y+24	; 0x18
   1327a:	99 8d       	ldd	r25, Y+25	; 0x19
   1327c:	00 97       	sbiw	r24, 0x00	; 0
   1327e:	09 f4       	brne	.+2      	; 0x13282 <mp_compile+0x114>
   13280:	81 c1       	rjmp	.+770    	; 0x13584 <mp_compile+0x416>
   13282:	2e 81       	ldd	r18, Y+6	; 0x06
   13284:	3f 81       	ldd	r19, Y+7	; 0x07
   13286:	23 2b       	or	r18, r19
   13288:	09 f0       	breq	.+2      	; 0x1328c <mp_compile+0x11e>
   1328a:	7c c1       	rjmp	.+760    	; 0x13584 <mp_compile+0x416>
   1328c:	61 2c       	mov	r6, r1
   1328e:	68 94       	set
   13290:	77 24       	eor	r7, r7
   13292:	71 f8       	bld	r7, 1
   13294:	fc 01       	movw	r30, r24
   13296:	25 85       	ldd	r18, Z+13	; 0x0d
   13298:	22 ff       	sbrs	r18, 2
   1329a:	52 c0       	rjmp	.+164    	; 0x13340 <mp_compile+0x1d2>
   1329c:	27 8d       	ldd	r18, Z+31	; 0x1f
   1329e:	30 a1       	ldd	r19, Z+32	; 0x20
   132a0:	21 50       	subi	r18, 0x01	; 1
   132a2:	31 09       	sbc	r19, r1
   132a4:	a9 01       	movw	r20, r18
   132a6:	0a f4       	brpl	.+2      	; 0x132aa <mp_compile+0x13c>
   132a8:	4b c0       	rjmp	.+150    	; 0x13340 <mp_compile+0x1d2>
   132aa:	a1 a1       	ldd	r26, Z+33	; 0x21
   132ac:	b2 a1       	ldd	r27, Z+34	; 0x22
   132ae:	b9 01       	movw	r22, r18
   132b0:	66 0f       	add	r22, r22
   132b2:	77 1f       	adc	r23, r23
   132b4:	62 0f       	add	r22, r18
   132b6:	73 1f       	adc	r23, r19
   132b8:	66 0f       	add	r22, r22
   132ba:	77 1f       	adc	r23, r23
   132bc:	9d 01       	movw	r18, r26
   132be:	26 0f       	add	r18, r22
   132c0:	37 1f       	adc	r19, r23
   132c2:	f9 01       	movw	r30, r18
   132c4:	f1 80       	ldd	r15, Z+1	; 0x01
   132c6:	f1 fe       	sbrs	r15, 1
   132c8:	25 c0       	rjmp	.+74     	; 0x13314 <mp_compile+0x1a6>
   132ca:	3a c0       	rjmp	.+116    	; 0x13340 <mp_compile+0x1d2>
   132cc:	26 0f       	add	r18, r22
   132ce:	37 1f       	adc	r19, r23
   132d0:	2a 0f       	add	r18, r26
   132d2:	3b 1f       	adc	r19, r27
   132d4:	90 81       	ld	r25, Z
   132d6:	36 97       	sbiw	r30, 0x06	; 6
   132d8:	91 ff       	sbrs	r25, 1
   132da:	28 c0       	rjmp	.+80     	; 0x1332c <mp_compile+0x1be>
   132dc:	c6 01       	movw	r24, r12
   132de:	01 15       	cp	r16, r1
   132e0:	11 05       	cpc	r17, r1
   132e2:	71 f1       	breq	.+92     	; 0x13340 <mp_compile+0x1d2>
   132e4:	46 e0       	ldi	r20, 0x06	; 6
   132e6:	f8 01       	movw	r30, r16
   132e8:	de 01       	movw	r26, r28
   132ea:	5e 96       	adiw	r26, 0x1e	; 30
   132ec:	01 90       	ld	r0, Z+
   132ee:	0d 92       	st	X+, r0
   132f0:	4a 95       	dec	r20
   132f2:	e1 f7       	brne	.-8      	; 0x132ec <mp_compile+0x17e>
   132f4:	46 e0       	ldi	r20, 0x06	; 6
   132f6:	f9 01       	movw	r30, r18
   132f8:	d8 01       	movw	r26, r16
   132fa:	01 90       	ld	r0, Z+
   132fc:	0d 92       	st	X+, r0
   132fe:	4a 95       	dec	r20
   13300:	e1 f7       	brne	.-8      	; 0x132fa <mp_compile+0x18c>
   13302:	46 e0       	ldi	r20, 0x06	; 6
   13304:	fe 01       	movw	r30, r28
   13306:	7e 96       	adiw	r30, 0x1e	; 30
   13308:	d9 01       	movw	r26, r18
   1330a:	01 90       	ld	r0, Z+
   1330c:	0d 92       	st	X+, r0
   1330e:	4a 95       	dec	r20
   13310:	e1 f7       	brne	.-8      	; 0x1330a <mp_compile+0x19c>
   13312:	16 c0       	rjmp	.+44     	; 0x13340 <mp_compile+0x1d2>
   13314:	fb 01       	movw	r30, r22
   13316:	35 97       	sbiw	r30, 0x05	; 5
   13318:	ea 0f       	add	r30, r26
   1331a:	fb 1f       	adc	r31, r27
   1331c:	62 1b       	sub	r22, r18
   1331e:	73 0b       	sbc	r23, r19
   13320:	06 2d       	mov	r16, r6
   13322:	10 e0       	ldi	r17, 0x00	; 0
   13324:	66 50       	subi	r22, 0x06	; 6
   13326:	71 09       	sbc	r23, r1
   13328:	6c 01       	movw	r12, r24
   1332a:	9f 2d       	mov	r25, r15
   1332c:	01 15       	cp	r16, r1
   1332e:	11 05       	cpc	r17, r1
   13330:	19 f4       	brne	.+6      	; 0x13338 <mp_compile+0x1ca>
   13332:	91 30       	cpi	r25, 0x01	; 1
   13334:	09 f4       	brne	.+2      	; 0x13338 <mp_compile+0x1ca>
   13336:	89 01       	movw	r16, r18
   13338:	41 50       	subi	r20, 0x01	; 1
   1333a:	51 09       	sbc	r21, r1
   1333c:	3a f6       	brpl	.-114    	; 0x132cc <mp_compile+0x15e>
   1333e:	c6 01       	movw	r24, r12
   13340:	dc 01       	movw	r26, r24
   13342:	58 96       	adiw	r26, 0x18	; 24
   13344:	1c 92       	st	X, r1
   13346:	1e 92       	st	-X, r1
   13348:	57 97       	sbiw	r26, 0x17	; 23
   1334a:	5f 96       	adiw	r26, 0x1f	; 31
   1334c:	2d 91       	ld	r18, X+
   1334e:	3c 91       	ld	r19, X
   13350:	90 97       	sbiw	r26, 0x20	; 32
   13352:	23 2b       	or	r18, r19
   13354:	09 f4       	brne	.+2      	; 0x13358 <mp_compile+0x1ea>
   13356:	66 c0       	rjmp	.+204    	; 0x13424 <mp_compile+0x2b6>
   13358:	60 e0       	ldi	r22, 0x00	; 0
   1335a:	70 e0       	ldi	r23, 0x00	; 0
   1335c:	40 e0       	ldi	r20, 0x00	; 0
   1335e:	50 e0       	ldi	r21, 0x00	; 0
   13360:	dc 01       	movw	r26, r24
   13362:	91 96       	adiw	r26, 0x21	; 33
   13364:	ed 91       	ld	r30, X+
   13366:	fc 91       	ld	r31, X
   13368:	92 97       	sbiw	r26, 0x22	; 34
   1336a:	e6 0f       	add	r30, r22
   1336c:	f7 1f       	adc	r31, r23
   1336e:	2c 91       	ld	r18, X
   13370:	21 30       	cpi	r18, 0x01	; 1
   13372:	31 f4       	brne	.+12     	; 0x13380 <mp_compile+0x212>
   13374:	24 81       	ldd	r18, Z+4	; 0x04
   13376:	35 81       	ldd	r19, Z+5	; 0x05
   13378:	2a 30       	cpi	r18, 0x0A	; 10
   1337a:	31 05       	cpc	r19, r1
   1337c:	41 f4       	brne	.+16     	; 0x1338e <mp_compile+0x220>
   1337e:	1b c0       	rjmp	.+54     	; 0x133b6 <mp_compile+0x248>
   13380:	22 30       	cpi	r18, 0x02	; 2
   13382:	28 f0       	brcs	.+10     	; 0x1338e <mp_compile+0x220>
   13384:	20 81       	ld	r18, Z
   13386:	21 30       	cpi	r18, 0x01	; 1
   13388:	11 f4       	brne	.+4      	; 0x1338e <mp_compile+0x220>
   1338a:	70 82       	st	Z, r7
   1338c:	03 c0       	rjmp	.+6      	; 0x13394 <mp_compile+0x226>
   1338e:	20 81       	ld	r18, Z
   13390:	23 30       	cpi	r18, 0x03	; 3
   13392:	19 f0       	breq	.+6      	; 0x1339a <mp_compile+0x22c>
   13394:	21 81       	ldd	r18, Z+1	; 0x01
   13396:	20 ff       	sbrs	r18, 0
   13398:	0e c0       	rjmp	.+28     	; 0x133b6 <mp_compile+0x248>
   1339a:	dc 01       	movw	r26, r24
   1339c:	57 96       	adiw	r26, 0x17	; 23
   1339e:	2d 91       	ld	r18, X+
   133a0:	3c 91       	ld	r19, X
   133a2:	58 97       	sbiw	r26, 0x18	; 24
   133a4:	89 01       	movw	r16, r18
   133a6:	0f 5f       	subi	r16, 0xFF	; 255
   133a8:	1f 4f       	sbci	r17, 0xFF	; 255
   133aa:	58 96       	adiw	r26, 0x18	; 24
   133ac:	1c 93       	st	X, r17
   133ae:	0e 93       	st	-X, r16
   133b0:	57 97       	sbiw	r26, 0x17	; 23
   133b2:	33 83       	std	Z+3, r19	; 0x03
   133b4:	22 83       	std	Z+2, r18	; 0x02
   133b6:	4f 5f       	subi	r20, 0xFF	; 255
   133b8:	5f 4f       	sbci	r21, 0xFF	; 255
   133ba:	fc 01       	movw	r30, r24
   133bc:	27 8d       	ldd	r18, Z+31	; 0x1f
   133be:	30 a1       	ldd	r19, Z+32	; 0x20
   133c0:	6a 5f       	subi	r22, 0xFA	; 250
   133c2:	7f 4f       	sbci	r23, 0xFF	; 255
   133c4:	42 17       	cp	r20, r18
   133c6:	53 07       	cpc	r21, r19
   133c8:	58 f2       	brcs	.-106    	; 0x13360 <mp_compile+0x1f2>
   133ca:	23 2b       	or	r18, r19
   133cc:	59 f1       	breq	.+86     	; 0x13424 <mp_compile+0x2b6>
   133ce:	40 e0       	ldi	r20, 0x00	; 0
   133d0:	50 e0       	ldi	r21, 0x00	; 0
   133d2:	20 e0       	ldi	r18, 0x00	; 0
   133d4:	30 e0       	ldi	r19, 0x00	; 0
   133d6:	dc 01       	movw	r26, r24
   133d8:	91 96       	adiw	r26, 0x21	; 33
   133da:	ed 91       	ld	r30, X+
   133dc:	fc 91       	ld	r31, X
   133de:	92 97       	sbiw	r26, 0x22	; 34
   133e0:	e4 0f       	add	r30, r20
   133e2:	f5 1f       	adc	r31, r21
   133e4:	60 81       	ld	r22, Z
   133e6:	64 30       	cpi	r22, 0x04	; 4
   133e8:	99 f4       	brne	.+38     	; 0x13410 <mp_compile+0x2a2>
   133ea:	61 81       	ldd	r22, Z+1	; 0x01
   133ec:	60 fd       	sbrc	r22, 0
   133ee:	10 c0       	rjmp	.+32     	; 0x13410 <mp_compile+0x2a2>
   133f0:	57 96       	adiw	r26, 0x17	; 23
   133f2:	6d 91       	ld	r22, X+
   133f4:	7c 91       	ld	r23, X
   133f6:	58 97       	sbiw	r26, 0x18	; 24
   133f8:	73 83       	std	Z+3, r23	; 0x03
   133fa:	62 83       	std	Z+2, r22	; 0x02
   133fc:	57 96       	adiw	r26, 0x17	; 23
   133fe:	6d 91       	ld	r22, X+
   13400:	7c 91       	ld	r23, X
   13402:	58 97       	sbiw	r26, 0x18	; 24
   13404:	6f 5f       	subi	r22, 0xFF	; 255
   13406:	7f 4f       	sbci	r23, 0xFF	; 255
   13408:	58 96       	adiw	r26, 0x18	; 24
   1340a:	7c 93       	st	X, r23
   1340c:	6e 93       	st	-X, r22
   1340e:	57 97       	sbiw	r26, 0x17	; 23
   13410:	2f 5f       	subi	r18, 0xFF	; 255
   13412:	3f 4f       	sbci	r19, 0xFF	; 255
   13414:	4a 5f       	subi	r20, 0xFA	; 250
   13416:	5f 4f       	sbci	r21, 0xFF	; 255
   13418:	fc 01       	movw	r30, r24
   1341a:	67 8d       	ldd	r22, Z+31	; 0x1f
   1341c:	70 a1       	ldd	r23, Z+32	; 0x20
   1341e:	26 17       	cp	r18, r22
   13420:	37 07       	cpc	r19, r23
   13422:	c8 f2       	brcs	.-78     	; 0x133d6 <mp_compile+0x268>
   13424:	dc 01       	movw	r26, r24
   13426:	11 96       	adiw	r26, 0x01	; 1
   13428:	ed 91       	ld	r30, X+
   1342a:	fc 91       	ld	r31, X
   1342c:	12 97       	sbiw	r26, 0x02	; 2
   1342e:	30 97       	sbiw	r30, 0x00	; 0
   13430:	09 f4       	brne	.+2      	; 0x13434 <mp_compile+0x2c6>
   13432:	98 c0       	rjmp	.+304    	; 0x13564 <mp_compile+0x3f6>
   13434:	27 8d       	ldd	r18, Z+31	; 0x1f
   13436:	30 a1       	ldd	r19, Z+32	; 0x20
   13438:	23 2b       	or	r18, r19
   1343a:	09 f4       	brne	.+2      	; 0x1343e <mp_compile+0x2d0>
   1343c:	93 c0       	rjmp	.+294    	; 0x13564 <mp_compile+0x3f6>
   1343e:	e1 2c       	mov	r14, r1
   13440:	f1 2c       	mov	r15, r1
   13442:	a1 2c       	mov	r10, r1
   13444:	b1 2c       	mov	r11, r1
   13446:	c1 2c       	mov	r12, r1
   13448:	d1 2c       	mov	r13, r1
   1344a:	01 a1       	ldd	r16, Z+33	; 0x21
   1344c:	12 a1       	ldd	r17, Z+34	; 0x22
   1344e:	0e 0d       	add	r16, r14
   13450:	1f 1d       	adc	r17, r15
   13452:	f8 01       	movw	r30, r16
   13454:	20 81       	ld	r18, Z
   13456:	24 50       	subi	r18, 0x04	; 4
   13458:	22 30       	cpi	r18, 0x02	; 2
   1345a:	a8 f5       	brcc	.+106    	; 0x134c6 <mp_compile+0x358>
   1345c:	dc 01       	movw	r26, r24
   1345e:	5f 96       	adiw	r26, 0x1f	; 31
   13460:	2d 91       	ld	r18, X+
   13462:	3c 91       	ld	r19, X
   13464:	90 97       	sbiw	r26, 0x20	; 32
   13466:	23 2b       	or	r18, r19
   13468:	71 f1       	breq	.+92     	; 0x134c6 <mp_compile+0x358>
   1346a:	20 e0       	ldi	r18, 0x00	; 0
   1346c:	30 e0       	ldi	r19, 0x00	; 0
   1346e:	a0 e0       	ldi	r26, 0x00	; 0
   13470:	b0 e0       	ldi	r27, 0x00	; 0
   13472:	fc 01       	movw	r30, r24
   13474:	41 a1       	ldd	r20, Z+33	; 0x21
   13476:	52 a1       	ldd	r21, Z+34	; 0x22
   13478:	ba 01       	movw	r22, r20
   1347a:	62 0f       	add	r22, r18
   1347c:	73 1f       	adc	r23, r19
   1347e:	7f a3       	std	Y+39, r23	; 0x27
   13480:	6e a3       	std	Y+38, r22	; 0x26
   13482:	fb 01       	movw	r30, r22
   13484:	40 81       	ld	r20, Z
   13486:	45 30       	cpi	r20, 0x05	; 5
   13488:	a9 f4       	brne	.+42     	; 0x134b4 <mp_compile+0x346>
   1348a:	f8 01       	movw	r30, r16
   1348c:	64 81       	ldd	r22, Z+4	; 0x04
   1348e:	75 81       	ldd	r23, Z+5	; 0x05
   13490:	ee a1       	ldd	r30, Y+38	; 0x26
   13492:	ff a1       	ldd	r31, Y+39	; 0x27
   13494:	44 81       	ldd	r20, Z+4	; 0x04
   13496:	55 81       	ldd	r21, Z+5	; 0x05
   13498:	64 17       	cp	r22, r20
   1349a:	75 07       	cpc	r23, r21
   1349c:	59 f4       	brne	.+22     	; 0x134b4 <mp_compile+0x346>
   1349e:	41 81       	ldd	r20, Z+1	; 0x01
   134a0:	40 fd       	sbrc	r20, 0
   134a2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   134a6:	ee a1       	ldd	r30, Y+38	; 0x26
   134a8:	ff a1       	ldd	r31, Y+39	; 0x27
   134aa:	b3 82       	std	Z+3, r11	; 0x03
   134ac:	a2 82       	std	Z+2, r10	; 0x02
   134ae:	ff ef       	ldi	r31, 0xFF	; 255
   134b0:	af 1a       	sub	r10, r31
   134b2:	bf 0a       	sbc	r11, r31
   134b4:	11 96       	adiw	r26, 0x01	; 1
   134b6:	2a 5f       	subi	r18, 0xFA	; 250
   134b8:	3f 4f       	sbci	r19, 0xFF	; 255
   134ba:	fc 01       	movw	r30, r24
   134bc:	47 8d       	ldd	r20, Z+31	; 0x1f
   134be:	50 a1       	ldd	r21, Z+32	; 0x20
   134c0:	a4 17       	cp	r26, r20
   134c2:	b5 07       	cpc	r27, r21
   134c4:	b0 f2       	brcs	.-84     	; 0x13472 <mp_compile+0x304>
   134c6:	ff ef       	ldi	r31, 0xFF	; 255
   134c8:	cf 1a       	sub	r12, r31
   134ca:	df 0a       	sbc	r13, r31
   134cc:	dc 01       	movw	r26, r24
   134ce:	11 96       	adiw	r26, 0x01	; 1
   134d0:	ed 91       	ld	r30, X+
   134d2:	fc 91       	ld	r31, X
   134d4:	12 97       	sbiw	r26, 0x02	; 2
   134d6:	b6 e0       	ldi	r27, 0x06	; 6
   134d8:	eb 0e       	add	r14, r27
   134da:	f1 1c       	adc	r15, r1
   134dc:	27 8d       	ldd	r18, Z+31	; 0x1f
   134de:	30 a1       	ldd	r19, Z+32	; 0x20
   134e0:	c2 16       	cp	r12, r18
   134e2:	d3 06       	cpc	r13, r19
   134e4:	08 f4       	brcc	.+2      	; 0x134e8 <mp_compile+0x37a>
   134e6:	b1 cf       	rjmp	.-158    	; 0x1344a <mp_compile+0x2dc>
   134e8:	1a 14       	cp	r1, r10
   134ea:	1b 04       	cpc	r1, r11
   134ec:	dc f5       	brge	.+118    	; 0x13564 <mp_compile+0x3f6>
   134ee:	fc 01       	movw	r30, r24
   134f0:	27 8d       	ldd	r18, Z+31	; 0x1f
   134f2:	30 a1       	ldd	r19, Z+32	; 0x20
   134f4:	23 2b       	or	r18, r19
   134f6:	09 f1       	breq	.+66     	; 0x1353a <mp_compile+0x3cc>
   134f8:	60 e0       	ldi	r22, 0x00	; 0
   134fa:	70 e0       	ldi	r23, 0x00	; 0
   134fc:	40 e0       	ldi	r20, 0x00	; 0
   134fe:	50 e0       	ldi	r21, 0x00	; 0
   13500:	dc 01       	movw	r26, r24
   13502:	91 96       	adiw	r26, 0x21	; 33
   13504:	ed 91       	ld	r30, X+
   13506:	fc 91       	ld	r31, X
   13508:	92 97       	sbiw	r26, 0x22	; 34
   1350a:	e6 0f       	add	r30, r22
   1350c:	f7 1f       	adc	r31, r23
   1350e:	20 81       	ld	r18, Z
   13510:	25 30       	cpi	r18, 0x05	; 5
   13512:	19 f4       	brne	.+6      	; 0x1351a <mp_compile+0x3ac>
   13514:	21 81       	ldd	r18, Z+1	; 0x01
   13516:	20 ff       	sbrs	r18, 0
   13518:	06 c0       	rjmp	.+12     	; 0x13526 <mp_compile+0x3b8>
   1351a:	22 81       	ldd	r18, Z+2	; 0x02
   1351c:	33 81       	ldd	r19, Z+3	; 0x03
   1351e:	2a 0d       	add	r18, r10
   13520:	3b 1d       	adc	r19, r11
   13522:	33 83       	std	Z+3, r19	; 0x03
   13524:	22 83       	std	Z+2, r18	; 0x02
   13526:	4f 5f       	subi	r20, 0xFF	; 255
   13528:	5f 4f       	sbci	r21, 0xFF	; 255
   1352a:	6a 5f       	subi	r22, 0xFA	; 250
   1352c:	7f 4f       	sbci	r23, 0xFF	; 255
   1352e:	fc 01       	movw	r30, r24
   13530:	27 8d       	ldd	r18, Z+31	; 0x1f
   13532:	30 a1       	ldd	r19, Z+32	; 0x20
   13534:	42 17       	cp	r20, r18
   13536:	53 07       	cpc	r21, r19
   13538:	18 f3       	brcs	.-58     	; 0x13500 <mp_compile+0x392>
   1353a:	dc 01       	movw	r26, r24
   1353c:	51 96       	adiw	r26, 0x11	; 17
   1353e:	2d 91       	ld	r18, X+
   13540:	3c 91       	ld	r19, X
   13542:	52 97       	sbiw	r26, 0x12	; 18
   13544:	2a 0d       	add	r18, r10
   13546:	3b 1d       	adc	r19, r11
   13548:	52 96       	adiw	r26, 0x12	; 18
   1354a:	3c 93       	st	X, r19
   1354c:	2e 93       	st	-X, r18
   1354e:	51 97       	sbiw	r26, 0x11	; 17
   13550:	57 96       	adiw	r26, 0x17	; 23
   13552:	2d 91       	ld	r18, X+
   13554:	3c 91       	ld	r19, X
   13556:	58 97       	sbiw	r26, 0x18	; 24
   13558:	a2 0e       	add	r10, r18
   1355a:	b3 1e       	adc	r11, r19
   1355c:	58 96       	adiw	r26, 0x18	; 24
   1355e:	bc 92       	st	X, r11
   13560:	ae 92       	st	-X, r10
   13562:	57 97       	sbiw	r26, 0x17	; 23
   13564:	fc 01       	movw	r30, r24
   13566:	83 81       	ldd	r24, Z+3	; 0x03
   13568:	94 81       	ldd	r25, Z+4	; 0x04
   1356a:	00 97       	sbiw	r24, 0x00	; 0
   1356c:	59 f0       	breq	.+22     	; 0x13584 <mp_compile+0x416>
   1356e:	2e 81       	ldd	r18, Y+6	; 0x06
   13570:	3f 81       	ldd	r19, Y+7	; 0x07
   13572:	23 2b       	or	r18, r19
   13574:	09 f4       	brne	.+2      	; 0x13578 <mp_compile+0x40a>
   13576:	8e ce       	rjmp	.-740    	; 0x13294 <mp_compile+0x126>
   13578:	05 c0       	rjmp	.+10     	; 0x13584 <mp_compile+0x416>
   1357a:	21 2c       	mov	r2, r1
   1357c:	31 2c       	mov	r3, r1
   1357e:	02 c0       	rjmp	.+4      	; 0x13584 <mp_compile+0x416>
   13580:	21 2c       	mov	r2, r1
   13582:	31 2c       	mov	r3, r1
   13584:	b1 01       	movw	r22, r2
   13586:	c2 01       	movw	r24, r4
   13588:	0e 94 89 32 	call	0x6512	; 0x6512 <emit_bc_set_max_num_labels>
   1358c:	08 8d       	ldd	r16, Y+24	; 0x18
   1358e:	19 8d       	ldd	r17, Y+25	; 0x19
   13590:	01 15       	cp	r16, r1
   13592:	11 05       	cpc	r17, r1
   13594:	79 f1       	breq	.+94     	; 0x135f4 <mp_compile+0x486>
   13596:	8e 81       	ldd	r24, Y+6	; 0x06
   13598:	9f 81       	ldd	r25, Y+7	; 0x07
   1359a:	89 2b       	or	r24, r25
   1359c:	79 f5       	brne	.+94     	; 0x135fc <mp_compile+0x48e>
   1359e:	5d 8e       	std	Y+29, r5	; 0x1d
   135a0:	4c 8e       	std	Y+28, r4	; 0x1c
   135a2:	42 e0       	ldi	r20, 0x02	; 2
   135a4:	b8 01       	movw	r22, r16
   135a6:	ce 01       	movw	r24, r28
   135a8:	01 96       	adiw	r24, 0x01	; 1
   135aa:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <compile_scope>
   135ae:	8e 81       	ldd	r24, Y+6	; 0x06
   135b0:	9f 81       	ldd	r25, Y+7	; 0x07
   135b2:	89 2b       	or	r24, r25
   135b4:	09 f0       	breq	.+2      	; 0x135b8 <mp_compile+0x44a>
   135b6:	5f c0       	rjmp	.+190    	; 0x13676 <mp_compile+0x508>
   135b8:	43 e0       	ldi	r20, 0x03	; 3
   135ba:	b8 01       	movw	r22, r16
   135bc:	ce 01       	movw	r24, r28
   135be:	01 96       	adiw	r24, 0x01	; 1
   135c0:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <compile_scope>
   135c4:	8e 81       	ldd	r24, Y+6	; 0x06
   135c6:	9f 81       	ldd	r25, Y+7	; 0x07
   135c8:	89 2b       	or	r24, r25
   135ca:	09 f0       	breq	.+2      	; 0x135ce <mp_compile+0x460>
   135cc:	54 c0       	rjmp	.+168    	; 0x13676 <mp_compile+0x508>
   135ce:	44 e0       	ldi	r20, 0x04	; 4
   135d0:	b8 01       	movw	r22, r16
   135d2:	ce 01       	movw	r24, r28
   135d4:	01 96       	adiw	r24, 0x01	; 1
   135d6:	0e 94 dc 6f 	call	0xdfb8	; 0xdfb8 <compile_scope>
   135da:	d8 01       	movw	r26, r16
   135dc:	13 96       	adiw	r26, 0x03	; 3
   135de:	0d 91       	ld	r16, X+
   135e0:	1c 91       	ld	r17, X
   135e2:	14 97       	sbiw	r26, 0x04	; 4
   135e4:	01 15       	cp	r16, r1
   135e6:	11 05       	cpc	r17, r1
   135e8:	29 f0       	breq	.+10     	; 0x135f4 <mp_compile+0x486>
   135ea:	8e 81       	ldd	r24, Y+6	; 0x06
   135ec:	9f 81       	ldd	r25, Y+7	; 0x07
   135ee:	89 2b       	or	r24, r25
   135f0:	b1 f2       	breq	.-84     	; 0x1359e <mp_compile+0x430>
   135f2:	04 c0       	rjmp	.+8      	; 0x135fc <mp_compile+0x48e>
   135f4:	8e 81       	ldd	r24, Y+6	; 0x06
   135f6:	9f 81       	ldd	r25, Y+7	; 0x07
   135f8:	89 2b       	or	r24, r25
   135fa:	a1 f0       	breq	.+40     	; 0x13624 <mp_compile+0x4b6>
   135fc:	ea 8d       	ldd	r30, Y+26	; 0x1a
   135fe:	fb 8d       	ldd	r31, Y+27	; 0x1b
   13600:	65 81       	ldd	r22, Z+5	; 0x05
   13602:	76 81       	ldd	r23, Z+6	; 0x06
   13604:	ce 01       	movw	r24, r28
   13606:	01 96       	adiw	r24, 0x01	; 1
   13608:	0e 94 a3 01 	call	0x346	; 0x346 <compile_error_set_line>
   1360c:	ea 8d       	ldd	r30, Y+26	; 0x1a
   1360e:	fb 8d       	ldd	r31, Y+27	; 0x1b
   13610:	23 85       	ldd	r18, Z+11	; 0x0b
   13612:	34 85       	ldd	r19, Z+12	; 0x0c
   13614:	48 85       	ldd	r20, Y+8	; 0x08
   13616:	59 85       	ldd	r21, Y+9	; 0x09
   13618:	69 81       	ldd	r22, Y+1	; 0x01
   1361a:	7a 81       	ldd	r23, Y+2	; 0x02
   1361c:	8e 81       	ldd	r24, Y+6	; 0x06
   1361e:	9f 81       	ldd	r25, Y+7	; 0x07
   13620:	0e 94 c4 21 	call	0x4388	; 0x4388 <mp_obj_exception_add_traceback>
   13624:	c2 01       	movw	r24, r4
   13626:	0e 94 01 12 	call	0x2402	; 0x2402 <emit_bc_free>
   1362a:	8c a1       	ldd	r24, Y+36	; 0x24
   1362c:	9d a1       	ldd	r25, Y+37	; 0x25
   1362e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <mp_parse_tree_clear>
   13632:	f4 01       	movw	r30, r8
   13634:	e7 80       	ldd	r14, Z+7	; 0x07
   13636:	f0 84       	ldd	r15, Z+8	; 0x08
   13638:	81 14       	cp	r8, r1
   1363a:	91 04       	cpc	r9, r1
   1363c:	71 f0       	breq	.+28     	; 0x1365a <mp_compile+0x4ec>
   1363e:	d4 01       	movw	r26, r8
   13640:	13 96       	adiw	r26, 0x03	; 3
   13642:	0c 91       	ld	r16, X
   13644:	13 97       	sbiw	r26, 0x03	; 3
   13646:	14 96       	adiw	r26, 0x04	; 4
   13648:	1c 91       	ld	r17, X
   1364a:	c4 01       	movw	r24, r8
   1364c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <scope_free>
   13650:	80 2e       	mov	r8, r16
   13652:	91 2e       	mov	r9, r17
   13654:	81 14       	cp	r8, r1
   13656:	91 04       	cpc	r9, r1
   13658:	91 f7       	brne	.-28     	; 0x1363e <mp_compile+0x4d0>
   1365a:	8e 81       	ldd	r24, Y+6	; 0x06
   1365c:	9f 81       	ldd	r25, Y+7	; 0x07
   1365e:	00 97       	sbiw	r24, 0x00	; 0
   13660:	11 f0       	breq	.+4      	; 0x13666 <mp_compile+0x4f8>
   13662:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
   13666:	40 e0       	ldi	r20, 0x00	; 0
   13668:	50 e0       	ldi	r21, 0x00	; 0
   1366a:	60 e0       	ldi	r22, 0x00	; 0
   1366c:	70 e0       	ldi	r23, 0x00	; 0
   1366e:	c7 01       	movw	r24, r14
   13670:	0e 94 48 34 	call	0x6890	; 0x6890 <mp_make_function_from_raw_code>
   13674:	07 c0       	rjmp	.+14     	; 0x13684 <mp_compile+0x516>
   13676:	f8 01       	movw	r30, r16
   13678:	83 81       	ldd	r24, Z+3	; 0x03
   1367a:	94 81       	ldd	r25, Z+4	; 0x04
   1367c:	89 2b       	or	r24, r25
   1367e:	09 f4       	brne	.+2      	; 0x13682 <mp_compile+0x514>
   13680:	b9 cf       	rjmp	.-142    	; 0x135f4 <mp_compile+0x486>
   13682:	bc cf       	rjmp	.-136    	; 0x135fc <mp_compile+0x48e>
   13684:	a7 96       	adiw	r28, 0x27	; 39
   13686:	0f b6       	in	r0, 0x3f	; 63
   13688:	f8 94       	cli
   1368a:	de bf       	out	0x3e, r29	; 62
   1368c:	0f be       	out	0x3f, r0	; 63
   1368e:	cd bf       	out	0x3d, r28	; 61
   13690:	df 91       	pop	r29
   13692:	cf 91       	pop	r28
   13694:	1f 91       	pop	r17
   13696:	0f 91       	pop	r16
   13698:	ff 90       	pop	r15
   1369a:	ef 90       	pop	r14
   1369c:	df 90       	pop	r13
   1369e:	cf 90       	pop	r12
   136a0:	bf 90       	pop	r11
   136a2:	af 90       	pop	r10
   136a4:	9f 90       	pop	r9
   136a6:	8f 90       	pop	r8
   136a8:	7f 90       	pop	r7
   136aa:	6f 90       	pop	r6
   136ac:	5f 90       	pop	r5
   136ae:	4f 90       	pop	r4
   136b0:	3f 90       	pop	r3
   136b2:	2f 90       	pop	r2
   136b4:	08 95       	ret

000136b6 <mp_parse>:
   136b6:	2f 92       	push	r2
   136b8:	3f 92       	push	r3
   136ba:	4f 92       	push	r4
   136bc:	5f 92       	push	r5
   136be:	6f 92       	push	r6
   136c0:	7f 92       	push	r7
   136c2:	8f 92       	push	r8
   136c4:	9f 92       	push	r9
   136c6:	af 92       	push	r10
   136c8:	bf 92       	push	r11
   136ca:	cf 92       	push	r12
   136cc:	df 92       	push	r13
   136ce:	ef 92       	push	r14
   136d0:	ff 92       	push	r15
   136d2:	0f 93       	push	r16
   136d4:	1f 93       	push	r17
   136d6:	cf 93       	push	r28
   136d8:	df 93       	push	r29
   136da:	cd b7       	in	r28, 0x3d	; 61
   136dc:	de b7       	in	r29, 0x3e	; 62
   136de:	65 97       	sbiw	r28, 0x15	; 21
   136e0:	0f b6       	in	r0, 0x3f	; 63
   136e2:	f8 94       	cli
   136e4:	de bf       	out	0x3e, r29	; 62
   136e6:	0f be       	out	0x3f, r0	; 63
   136e8:	cd bf       	out	0x3d, r28	; 61
   136ea:	4c 01       	movw	r8, r24
   136ec:	6d 8b       	std	Y+21, r22	; 0x15
   136ee:	80 e4       	ldi	r24, 0x40	; 64
   136f0:	90 e0       	ldi	r25, 0x00	; 0
   136f2:	9a 83       	std	Y+2, r25	; 0x02
   136f4:	89 83       	std	Y+1, r24	; 0x01
   136f6:	1c 82       	std	Y+4, r1	; 0x04
   136f8:	1b 82       	std	Y+3, r1	; 0x03
   136fa:	80 e0       	ldi	r24, 0x00	; 0
   136fc:	91 e0       	ldi	r25, 0x01	; 1
   136fe:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   13702:	9e 83       	std	Y+6, r25	; 0x06
   13704:	8d 83       	std	Y+5, r24	; 0x05
   13706:	80 e2       	ldi	r24, 0x20	; 32
   13708:	90 e0       	ldi	r25, 0x00	; 0
   1370a:	98 87       	std	Y+8, r25	; 0x08
   1370c:	8f 83       	std	Y+7, r24	; 0x07
   1370e:	1a 86       	std	Y+10, r1	; 0x0a
   13710:	19 86       	std	Y+9, r1	; 0x09
   13712:	80 e4       	ldi	r24, 0x40	; 64
   13714:	90 e0       	ldi	r25, 0x00	; 0
   13716:	0e 94 c3 31 	call	0x6386	; 0x6386 <m_malloc>
   1371a:	9c 87       	std	Y+12, r25	; 0x0c
   1371c:	8b 87       	std	Y+11, r24	; 0x0b
   1371e:	9e 86       	std	Y+14, r9	; 0x0e
   13720:	8d 86       	std	Y+13, r8	; 0x0d
   13722:	1a 8a       	std	Y+18, r1	; 0x12
   13724:	19 8a       	std	Y+17, r1	; 0x11
   13726:	1c 8a       	std	Y+20, r1	; 0x14
   13728:	1b 8a       	std	Y+19, r1	; 0x13
   1372a:	2d 89       	ldd	r18, Y+21	; 0x15
   1372c:	22 23       	and	r18, r18
   1372e:	31 f0       	breq	.+12     	; 0x1373c <mp_parse+0x86>
   13730:	22 30       	cpi	r18, 0x02	; 2
   13732:	11 f4       	brne	.+4      	; 0x13738 <mp_parse+0x82>
   13734:	4a e3       	ldi	r20, 0x3A	; 58
   13736:	03 c0       	rjmp	.+6      	; 0x1373e <mp_parse+0x88>
   13738:	40 e0       	ldi	r20, 0x00	; 0
   1373a:	01 c0       	rjmp	.+2      	; 0x1373e <mp_parse+0x88>
   1373c:	48 e3       	ldi	r20, 0x38	; 56
   1373e:	d4 01       	movw	r26, r8
   13740:	5c 96       	adiw	r26, 0x1c	; 28
   13742:	6d 91       	ld	r22, X+
   13744:	7c 91       	ld	r23, X
   13746:	5d 97       	sbiw	r26, 0x1d	; 29
   13748:	20 e0       	ldi	r18, 0x00	; 0
   1374a:	30 e0       	ldi	r19, 0x00	; 0
   1374c:	ce 01       	movw	r24, r28
   1374e:	01 96       	adiw	r24, 0x01	; 1
   13750:	0e 94 a7 55 	call	0xab4e	; 0xab4e <push_rule>
   13754:	31 2c       	mov	r3, r1
   13756:	0a c0       	rjmp	.+20     	; 0x1376c <mp_parse+0xb6>
   13758:	33 24       	eor	r3, r3
   1375a:	33 94       	inc	r3
   1375c:	07 c0       	rjmp	.+14     	; 0x1376c <mp_parse+0xb6>
   1375e:	33 24       	eor	r3, r3
   13760:	33 94       	inc	r3
   13762:	04 c0       	rjmp	.+8      	; 0x1376c <mp_parse+0xb6>
   13764:	33 24       	eor	r3, r3
   13766:	33 94       	inc	r3
   13768:	01 c0       	rjmp	.+2      	; 0x1376c <mp_parse+0xb6>
   1376a:	31 2c       	mov	r3, r1
   1376c:	eb 81       	ldd	r30, Y+3	; 0x03
   1376e:	fc 81       	ldd	r31, Y+4	; 0x04
   13770:	30 97       	sbiw	r30, 0x00	; 0
   13772:	09 f4       	brne	.+2      	; 0x13776 <mp_parse+0xc0>
   13774:	58 c2       	rjmp	.+1200   	; 0x13c26 <mp_parse+0x570>
   13776:	31 97       	sbiw	r30, 0x01	; 1
   13778:	fc 83       	std	Y+4, r31	; 0x04
   1377a:	eb 83       	std	Y+3, r30	; 0x03
   1377c:	ee 0f       	add	r30, r30
   1377e:	ff 1f       	adc	r31, r31
   13780:	ee 0f       	add	r30, r30
   13782:	ff 1f       	adc	r31, r31
   13784:	8d 81       	ldd	r24, Y+5	; 0x05
   13786:	9e 81       	ldd	r25, Y+6	; 0x06
   13788:	e8 0f       	add	r30, r24
   1378a:	f9 1f       	adc	r31, r25
   1378c:	51 80       	ldd	r5, Z+1	; 0x01
   1378e:	02 81       	ldd	r16, Z+2	; 0x02
   13790:	13 81       	ldd	r17, Z+3	; 0x03
   13792:	60 80       	ld	r6, Z
   13794:	71 2c       	mov	r7, r1
   13796:	85 2d       	mov	r24, r5
   13798:	90 e0       	ldi	r25, 0x00	; 0
   1379a:	fc 01       	movw	r30, r24
   1379c:	e8 57       	subi	r30, 0x78	; 120
   1379e:	f7 4d       	sbci	r31, 0xD7	; 215
   137a0:	40 80       	ld	r4, Z
   137a2:	fc 01       	movw	r30, r24
   137a4:	e3 56       	subi	r30, 0x63	; 99
   137a6:	fb 4d       	sbci	r31, 0xDB	; 219
   137a8:	c0 80       	ld	r12, Z
   137aa:	d1 2c       	mov	r13, r1
   137ac:	b4 e6       	ldi	r27, 0x64	; 100
   137ae:	b5 15       	cp	r27, r5
   137b0:	10 f4       	brcc	.+4      	; 0x137b6 <mp_parse+0x100>
   137b2:	68 94       	set
   137b4:	d0 f8       	bld	r13, 0
   137b6:	c6 01       	movw	r24, r12
   137b8:	88 0f       	add	r24, r24
   137ba:	99 1f       	adc	r25, r25
   137bc:	fc 01       	movw	r30, r24
   137be:	e0 5c       	subi	r30, 0xC0	; 192
   137c0:	fa 4d       	sbci	r31, 0xDA	; 218
   137c2:	6f 01       	movw	r12, r30
   137c4:	84 2d       	mov	r24, r4
   137c6:	8f 70       	andi	r24, 0x0F	; 15
   137c8:	e8 2e       	mov	r14, r24
   137ca:	f1 2c       	mov	r15, r1
   137cc:	84 2d       	mov	r24, r4
   137ce:	80 73       	andi	r24, 0x30	; 48
   137d0:	80 31       	cpi	r24, 0x10	; 16
   137d2:	21 f0       	breq	.+8      	; 0x137dc <mp_parse+0x126>
   137d4:	80 32       	cpi	r24, 0x20	; 32
   137d6:	09 f4       	brne	.+2      	; 0x137da <mp_parse+0x124>
   137d8:	61 c0       	rjmp	.+194    	; 0x1389c <mp_parse+0x1e6>
   137da:	7a c1       	rjmp	.+756    	; 0x13ad0 <mp_parse+0x41a>
   137dc:	01 15       	cp	r16, r1
   137de:	11 05       	cpc	r17, r1
   137e0:	e9 f4       	brne	.+58     	; 0x1381c <mp_parse+0x166>
   137e2:	0e 15       	cp	r16, r14
   137e4:	1f 05       	cpc	r17, r15
   137e6:	08 f0       	brcs	.+2      	; 0x137ea <mp_parse+0x134>
   137e8:	b7 cf       	rjmp	.-146    	; 0x13758 <mp_parse+0xa2>
   137ea:	f8 01       	movw	r30, r16
   137ec:	ee 0f       	add	r30, r30
   137ee:	ff 1f       	adc	r31, r31
   137f0:	56 01       	movw	r10, r12
   137f2:	ae 0e       	add	r10, r30
   137f4:	bf 1e       	adc	r11, r31
   137f6:	d5 01       	movw	r26, r10
   137f8:	8d 91       	ld	r24, X+
   137fa:	9c 91       	ld	r25, X
   137fc:	ac 01       	movw	r20, r24
   137fe:	44 27       	eor	r20, r20
   13800:	50 7f       	andi	r21, 0xF0	; 240
   13802:	41 15       	cp	r20, r1
   13804:	b0 e1       	ldi	r27, 0x10	; 16
   13806:	5b 07       	cpc	r21, r27
   13808:	21 f5       	brne	.+72     	; 0x13852 <mp_parse+0x19c>
   1380a:	d4 01       	movw	r26, r8
   1380c:	90 96       	adiw	r26, 0x20	; 32
   1380e:	2c 91       	ld	r18, X
   13810:	30 e0       	ldi	r19, 0x00	; 0
   13812:	9f 70       	andi	r25, 0x0F	; 15
   13814:	82 17       	cp	r24, r18
   13816:	93 07       	cpc	r25, r19
   13818:	b1 f5       	brne	.+108    	; 0x13886 <mp_parse+0x1d0>
   1381a:	11 c0       	rjmp	.+34     	; 0x1383e <mp_parse+0x188>
   1381c:	31 10       	cpse	r3, r1
   1381e:	e1 cf       	rjmp	.-62     	; 0x137e2 <mp_parse+0x12c>
   13820:	a5 cf       	rjmp	.-182    	; 0x1376c <mp_parse+0xb6>
   13822:	5f 01       	movw	r10, r30
   13824:	81 91       	ld	r24, Z+
   13826:	91 91       	ld	r25, Z+
   13828:	ac 01       	movw	r20, r24
   1382a:	44 27       	eor	r20, r20
   1382c:	50 7f       	andi	r21, 0xF0	; 240
   1382e:	41 15       	cp	r20, r1
   13830:	b0 e1       	ldi	r27, 0x10	; 16
   13832:	5b 07       	cpc	r21, r27
   13834:	71 f4       	brne	.+28     	; 0x13852 <mp_parse+0x19c>
   13836:	9f 70       	andi	r25, 0x0F	; 15
   13838:	82 17       	cp	r24, r18
   1383a:	93 07       	cpc	r25, r19
   1383c:	39 f5       	brne	.+78     	; 0x1388c <mp_parse+0x1d6>
   1383e:	65 2d       	mov	r22, r5
   13840:	ce 01       	movw	r24, r28
   13842:	01 96       	adiw	r24, 0x01	; 1
   13844:	0e 94 40 7d 	call	0xfa80	; 0xfa80 <push_result_token>
   13848:	c4 01       	movw	r24, r8
   1384a:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <mp_lexer_to_next>
   1384e:	31 2c       	mov	r3, r1
   13850:	8d cf       	rjmp	.-230    	; 0x1376c <mp_parse+0xb6>
   13852:	41 15       	cp	r20, r1
   13854:	50 42       	sbci	r21, 0x20	; 32
   13856:	11 f0       	breq	.+4      	; 0x1385c <mp_parse+0x1a6>
   13858:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   1385c:	98 01       	movw	r18, r16
   1385e:	2f 5f       	subi	r18, 0xFF	; 255
   13860:	3f 4f       	sbci	r19, 0xFF	; 255
   13862:	2e 15       	cp	r18, r14
   13864:	3f 05       	cpc	r19, r15
   13866:	30 f4       	brcc	.+12     	; 0x13874 <mp_parse+0x1be>
   13868:	45 2d       	mov	r20, r5
   1386a:	b3 01       	movw	r22, r6
   1386c:	ce 01       	movw	r24, r28
   1386e:	01 96       	adiw	r24, 0x01	; 1
   13870:	0e 94 a7 55 	call	0xab4e	; 0xab4e <push_rule>
   13874:	d5 01       	movw	r26, r10
   13876:	6d 91       	ld	r22, X+
   13878:	7c 91       	ld	r23, X
   1387a:	ce 01       	movw	r24, r28
   1387c:	01 96       	adiw	r24, 0x01	; 1
   1387e:	0e 94 e2 55 	call	0xabc4	; 0xabc4 <push_rule_from_arg>
   13882:	31 2c       	mov	r3, r1
   13884:	73 cf       	rjmp	.-282    	; 0x1376c <mp_parse+0xb6>
   13886:	32 96       	adiw	r30, 0x02	; 2
   13888:	ec 0d       	add	r30, r12
   1388a:	fd 1d       	adc	r31, r13
   1388c:	0f 5f       	subi	r16, 0xFF	; 255
   1388e:	1f 4f       	sbci	r17, 0xFF	; 255
   13890:	0e 15       	cp	r16, r14
   13892:	1f 05       	cpc	r17, r15
   13894:	30 f2       	brcs	.-116    	; 0x13822 <mp_parse+0x16c>
   13896:	33 24       	eor	r3, r3
   13898:	33 94       	inc	r3
   1389a:	68 cf       	rjmp	.-304    	; 0x1376c <mp_parse+0xb6>
   1389c:	33 20       	and	r3, r3
   1389e:	c9 f0       	breq	.+50     	; 0x138d2 <mp_parse+0x21c>
   138a0:	01 15       	cp	r16, r1
   138a2:	11 05       	cpc	r17, r1
   138a4:	11 f4       	brne	.+4      	; 0x138aa <mp_parse+0x1f4>
   138a6:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   138aa:	f8 01       	movw	r30, r16
   138ac:	e1 50       	subi	r30, 0x01	; 1
   138ae:	f0 48       	sbci	r31, 0x80	; 128
   138b0:	ee 0f       	add	r30, r30
   138b2:	ff 1f       	adc	r31, r31
   138b4:	ec 0d       	add	r30, r12
   138b6:	fd 1d       	adc	r31, r13
   138b8:	80 81       	ld	r24, Z
   138ba:	91 81       	ldd	r25, Z+1	; 0x01
   138bc:	88 27       	eor	r24, r24
   138be:	90 7f       	andi	r25, 0xF0	; 240
   138c0:	81 15       	cp	r24, r1
   138c2:	90 43       	sbci	r25, 0x30	; 48
   138c4:	51 f4       	brne	.+20     	; 0x138da <mp_parse+0x224>
   138c6:	60 e0       	ldi	r22, 0x00	; 0
   138c8:	70 e0       	ldi	r23, 0x00	; 0
   138ca:	ce 01       	movw	r24, r28
   138cc:	01 96       	adiw	r24, 0x01	; 1
   138ce:	0e 94 85 54 	call	0xa90a	; 0xa90a <push_result_node>
   138d2:	0e 15       	cp	r16, r14
   138d4:	1f 05       	cpc	r17, r15
   138d6:	f0 f1       	brcs	.+124    	; 0x13954 <mp_parse+0x29e>
   138d8:	56 c0       	rjmp	.+172    	; 0x13986 <mp_parse+0x2d0>
   138da:	02 30       	cpi	r16, 0x02	; 2
   138dc:	11 05       	cpc	r17, r1
   138de:	08 f4       	brcc	.+2      	; 0x138e2 <mp_parse+0x22c>
   138e0:	45 cf       	rjmp	.-374    	; 0x1376c <mp_parse+0xb6>
   138e2:	c7 c1       	rjmp	.+910    	; 0x13c72 <mp_parse+0x5bc>
   138e4:	15 01       	movw	r2, r10
   138e6:	f5 01       	movw	r30, r10
   138e8:	81 91       	ld	r24, Z+
   138ea:	91 91       	ld	r25, Z+
   138ec:	5f 01       	movw	r10, r30
   138ee:	9c 01       	movw	r18, r24
   138f0:	22 27       	eor	r18, r18
   138f2:	30 7f       	andi	r19, 0xF0	; 240
   138f4:	21 15       	cp	r18, r1
   138f6:	30 41       	sbci	r19, 0x10	; 16
   138f8:	d9 f4       	brne	.+54     	; 0x13930 <mp_parse+0x27a>
   138fa:	d4 01       	movw	r26, r8
   138fc:	90 96       	adiw	r26, 0x20	; 32
   138fe:	9c 91       	ld	r25, X
   13900:	89 13       	cpse	r24, r25
   13902:	10 c0       	rjmp	.+32     	; 0x13924 <mp_parse+0x26e>
   13904:	87 30       	cpi	r24, 0x07	; 7
   13906:	29 f4       	brne	.+10     	; 0x13912 <mp_parse+0x25c>
   13908:	65 2d       	mov	r22, r5
   1390a:	ce 01       	movw	r24, r28
   1390c:	01 96       	adiw	r24, 0x01	; 1
   1390e:	0e 94 40 7d 	call	0xfa80	; 0xfa80 <push_result_token>
   13912:	c4 01       	movw	r24, r8
   13914:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <mp_lexer_to_next>
   13918:	0f 5f       	subi	r16, 0xFF	; 255
   1391a:	1f 4f       	sbci	r17, 0xFF	; 255
   1391c:	0e 15       	cp	r16, r14
   1391e:	1f 05       	cpc	r17, r15
   13920:	08 f3       	brcs	.-62     	; 0x138e4 <mp_parse+0x22e>
   13922:	31 c0       	rjmp	.+98     	; 0x13986 <mp_parse+0x2d0>
   13924:	01 2b       	or	r16, r17
   13926:	09 f0       	breq	.+2      	; 0x1392a <mp_parse+0x274>
   13928:	a4 c1       	rjmp	.+840    	; 0x13c72 <mp_parse+0x5bc>
   1392a:	33 24       	eor	r3, r3
   1392c:	33 94       	inc	r3
   1392e:	1e cf       	rjmp	.-452    	; 0x1376c <mp_parse+0xb6>
   13930:	98 01       	movw	r18, r16
   13932:	2f 5f       	subi	r18, 0xFF	; 255
   13934:	3f 4f       	sbci	r19, 0xFF	; 255
   13936:	45 2d       	mov	r20, r5
   13938:	b3 01       	movw	r22, r6
   1393a:	ce 01       	movw	r24, r28
   1393c:	01 96       	adiw	r24, 0x01	; 1
   1393e:	0e 94 a7 55 	call	0xab4e	; 0xab4e <push_rule>
   13942:	f1 01       	movw	r30, r2
   13944:	60 81       	ld	r22, Z
   13946:	71 81       	ldd	r23, Z+1	; 0x01
   13948:	ce 01       	movw	r24, r28
   1394a:	01 96       	adiw	r24, 0x01	; 1
   1394c:	0e 94 e2 55 	call	0xabc4	; 0xabc4 <push_rule_from_arg>
   13950:	31 2c       	mov	r3, r1
   13952:	0c cf       	rjmp	.-488    	; 0x1376c <mp_parse+0xb6>
   13954:	58 01       	movw	r10, r16
   13956:	aa 0c       	add	r10, r10
   13958:	bb 1c       	adc	r11, r11
   1395a:	16 01       	movw	r2, r12
   1395c:	2a 0c       	add	r2, r10
   1395e:	3b 1c       	adc	r3, r11
   13960:	d1 01       	movw	r26, r2
   13962:	8d 91       	ld	r24, X+
   13964:	9c 91       	ld	r25, X
   13966:	9c 01       	movw	r18, r24
   13968:	22 27       	eor	r18, r18
   1396a:	30 7f       	andi	r19, 0xF0	; 240
   1396c:	21 15       	cp	r18, r1
   1396e:	30 41       	sbci	r19, 0x10	; 16
   13970:	f9 f6       	brne	.-66     	; 0x13930 <mp_parse+0x27a>
   13972:	f4 01       	movw	r30, r8
   13974:	90 a1       	ldd	r25, Z+32	; 0x20
   13976:	89 13       	cpse	r24, r25
   13978:	d5 cf       	rjmp	.-86     	; 0x13924 <mp_parse+0x26e>
   1397a:	f2 e0       	ldi	r31, 0x02	; 2
   1397c:	af 0e       	add	r10, r31
   1397e:	b1 1c       	adc	r11, r1
   13980:	ac 0c       	add	r10, r12
   13982:	bd 1c       	adc	r11, r13
   13984:	bf cf       	rjmp	.-130    	; 0x13904 <mp_parse+0x24e>
   13986:	e0 16       	cp	r14, r16
   13988:	f1 06       	cpc	r15, r17
   1398a:	11 f0       	breq	.+4      	; 0x13990 <mp_parse+0x2da>
   1398c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   13990:	2d 89       	ldd	r18, Y+21	; 0x15
   13992:	22 23       	and	r18, r18
   13994:	d9 f0       	breq	.+54     	; 0x139cc <mp_parse+0x316>
   13996:	35 e0       	ldi	r19, 0x05	; 5
   13998:	53 12       	cpse	r5, r19
   1399a:	18 c0       	rjmp	.+48     	; 0x139cc <mp_parse+0x316>
   1399c:	60 e0       	ldi	r22, 0x00	; 0
   1399e:	70 e0       	ldi	r23, 0x00	; 0
   139a0:	ce 01       	movw	r24, r28
   139a2:	01 96       	adiw	r24, 0x01	; 1
   139a4:	0e 94 33 04 	call	0x866	; 0x866 <peek_result>
   139a8:	89 2b       	or	r24, r25
   139aa:	81 f4       	brne	.+32     	; 0x139cc <mp_parse+0x316>
   139ac:	61 e0       	ldi	r22, 0x01	; 1
   139ae:	70 e0       	ldi	r23, 0x00	; 0
   139b0:	ce 01       	movw	r24, r28
   139b2:	01 96       	adiw	r24, 0x01	; 1
   139b4:	0e 94 33 04 	call	0x866	; 0x866 <peek_result>
   139b8:	9c 01       	movw	r18, r24
   139ba:	23 70       	andi	r18, 0x03	; 3
   139bc:	33 27       	eor	r19, r19
   139be:	23 2b       	or	r18, r19
   139c0:	09 f4       	brne	.+2      	; 0x139c4 <mp_parse+0x30e>
   139c2:	9d c1       	rjmp	.+826    	; 0x13cfe <mp_parse+0x648>
   139c4:	8f 70       	andi	r24, 0x0F	; 15
   139c6:	99 27       	eor	r25, r25
   139c8:	02 97       	sbiw	r24, 0x02	; 2
   139ca:	59 f4       	brne	.+22     	; 0x139e2 <mp_parse+0x32c>
   139cc:	e1 14       	cp	r14, r1
   139ce:	f1 04       	cpc	r15, r1
   139d0:	d1 f4       	brne	.+52     	; 0x13a06 <mp_parse+0x350>
   139d2:	00 e0       	ldi	r16, 0x00	; 0
   139d4:	10 e0       	ldi	r17, 0x00	; 0
   139d6:	69 c0       	rjmp	.+210    	; 0x13aaa <mp_parse+0x3f4>
   139d8:	dc 01       	movw	r26, r24
   139da:	14 96       	adiw	r26, 0x04	; 4
   139dc:	8c 91       	ld	r24, X
   139de:	85 33       	cpi	r24, 0x35	; 53
   139e0:	a9 f7       	brne	.-22     	; 0x139cc <mp_parse+0x316>
   139e2:	ce 01       	movw	r24, r28
   139e4:	01 96       	adiw	r24, 0x01	; 1
   139e6:	0e 94 4d 04 	call	0x89a	; 0x89a <pop_result>
   139ea:	ce 01       	movw	r24, r28
   139ec:	01 96       	adiw	r24, 0x01	; 1
   139ee:	0e 94 4d 04 	call	0x89a	; 0x89a <pop_result>
   139f2:	20 e0       	ldi	r18, 0x00	; 0
   139f4:	30 e0       	ldi	r19, 0x00	; 0
   139f6:	48 e0       	ldi	r20, 0x08	; 8
   139f8:	b3 01       	movw	r22, r6
   139fa:	ce 01       	movw	r24, r28
   139fc:	01 96       	adiw	r24, 0x01	; 1
   139fe:	0e 94 b4 54 	call	0xa968	; 0xa968 <push_result_rule>
   13a02:	31 2c       	mov	r3, r1
   13a04:	b3 ce       	rjmp	.-666    	; 0x1376c <mp_parse+0xb6>
   13a06:	c7 01       	movw	r24, r14
   13a08:	88 0f       	add	r24, r24
   13a0a:	99 1f       	adc	r25, r25
   13a0c:	c8 0e       	add	r12, r24
   13a0e:	d9 1e       	adc	r13, r25
   13a10:	00 e0       	ldi	r16, 0x00	; 0
   13a12:	10 e0       	ldi	r17, 0x00	; 0
   13a14:	a1 2c       	mov	r10, r1
   13a16:	b1 2c       	mov	r11, r1
   13a18:	b1 e0       	ldi	r27, 0x01	; 1
   13a1a:	eb 1a       	sub	r14, r27
   13a1c:	f1 08       	sbc	r15, r1
   13a1e:	f6 01       	movw	r30, r12
   13a20:	92 91       	ld	r25, -Z
   13a22:	82 91       	ld	r24, -Z
   13a24:	6f 01       	movw	r12, r30
   13a26:	9c 01       	movw	r18, r24
   13a28:	22 27       	eor	r18, r18
   13a2a:	30 7f       	andi	r19, 0xF0	; 240
   13a2c:	21 15       	cp	r18, r1
   13a2e:	30 41       	sbci	r19, 0x10	; 16
   13a30:	41 f4       	brne	.+16     	; 0x13a42 <mp_parse+0x38c>
   13a32:	87 30       	cpi	r24, 0x07	; 7
   13a34:	91 f4       	brne	.+36     	; 0x13a5a <mp_parse+0x3a4>
   13a36:	0f 5f       	subi	r16, 0xFF	; 255
   13a38:	1f 4f       	sbci	r17, 0xFF	; 255
   13a3a:	2f ef       	ldi	r18, 0xFF	; 255
   13a3c:	a2 1a       	sub	r10, r18
   13a3e:	b2 0a       	sbc	r11, r18
   13a40:	0c c0       	rjmp	.+24     	; 0x13a5a <mp_parse+0x3a4>
   13a42:	b8 01       	movw	r22, r16
   13a44:	ce 01       	movw	r24, r28
   13a46:	01 96       	adiw	r24, 0x01	; 1
   13a48:	0e 94 33 04 	call	0x866	; 0x866 <peek_result>
   13a4c:	89 2b       	or	r24, r25
   13a4e:	19 f0       	breq	.+6      	; 0x13a56 <mp_parse+0x3a0>
   13a50:	3f ef       	ldi	r19, 0xFF	; 255
   13a52:	a3 1a       	sub	r10, r19
   13a54:	b3 0a       	sbc	r11, r19
   13a56:	0f 5f       	subi	r16, 0xFF	; 255
   13a58:	1f 4f       	sbci	r17, 0xFF	; 255
   13a5a:	e1 14       	cp	r14, r1
   13a5c:	f1 04       	cpc	r15, r1
   13a5e:	e1 f6       	brne	.-72     	; 0x13a18 <mp_parse+0x362>
   13a60:	aa 94       	dec	r10
   13a62:	ab 28       	or	r10, r11
   13a64:	11 f5       	brne	.+68     	; 0x13aaa <mp_parse+0x3f4>
   13a66:	46 fe       	sbrs	r4, 6
   13a68:	20 c0       	rjmp	.+64     	; 0x13aaa <mp_parse+0x3f4>
   13a6a:	01 15       	cp	r16, r1
   13a6c:	11 05       	cpc	r17, r1
   13a6e:	99 f0       	breq	.+38     	; 0x13a96 <mp_parse+0x3e0>
   13a70:	e1 2c       	mov	r14, r1
   13a72:	f1 2c       	mov	r15, r1
   13a74:	c1 2c       	mov	r12, r1
   13a76:	d1 2c       	mov	r13, r1
   13a78:	ce 01       	movw	r24, r28
   13a7a:	01 96       	adiw	r24, 0x01	; 1
   13a7c:	0e 94 4d 04 	call	0x89a	; 0x89a <pop_result>
   13a80:	00 97       	sbiw	r24, 0x00	; 0
   13a82:	11 f0       	breq	.+4      	; 0x13a88 <mp_parse+0x3d2>
   13a84:	c8 2e       	mov	r12, r24
   13a86:	d9 2e       	mov	r13, r25
   13a88:	5f ef       	ldi	r21, 0xFF	; 255
   13a8a:	e5 1a       	sub	r14, r21
   13a8c:	f5 0a       	sbc	r15, r21
   13a8e:	0e 15       	cp	r16, r14
   13a90:	1f 05       	cpc	r17, r15
   13a92:	91 f7       	brne	.-28     	; 0x13a78 <mp_parse+0x3c2>
   13a94:	02 c0       	rjmp	.+4      	; 0x13a9a <mp_parse+0x3e4>
   13a96:	c1 2c       	mov	r12, r1
   13a98:	d1 2c       	mov	r13, r1
   13a9a:	6c 2d       	mov	r22, r12
   13a9c:	7d 2d       	mov	r23, r13
   13a9e:	ce 01       	movw	r24, r28
   13aa0:	01 96       	adiw	r24, 0x01	; 1
   13aa2:	0e 94 85 54 	call	0xa90a	; 0xa90a <push_result_node>
   13aa6:	31 2c       	mov	r3, r1
   13aa8:	61 ce       	rjmp	.-830    	; 0x1376c <mp_parse+0xb6>
   13aaa:	44 20       	and	r4, r4
   13aac:	44 f4       	brge	.+16     	; 0x13abe <mp_parse+0x408>
   13aae:	60 e0       	ldi	r22, 0x00	; 0
   13ab0:	70 e0       	ldi	r23, 0x00	; 0
   13ab2:	ce 01       	movw	r24, r28
   13ab4:	01 96       	adiw	r24, 0x01	; 1
   13ab6:	0e 94 85 54 	call	0xa90a	; 0xa90a <push_result_node>
   13aba:	0f 5f       	subi	r16, 0xFF	; 255
   13abc:	1f 4f       	sbci	r17, 0xFF	; 255
   13abe:	98 01       	movw	r18, r16
   13ac0:	45 2d       	mov	r20, r5
   13ac2:	b3 01       	movw	r22, r6
   13ac4:	ce 01       	movw	r24, r28
   13ac6:	01 96       	adiw	r24, 0x01	; 1
   13ac8:	0e 94 b4 54 	call	0xa968	; 0xa968 <push_result_rule>
   13acc:	31 2c       	mov	r3, r1
   13ace:	4e ce       	rjmp	.-868    	; 0x1376c <mp_parse+0xb6>
   13ad0:	80 33       	cpi	r24, 0x30	; 48
   13ad2:	11 f0       	breq	.+4      	; 0x13ad8 <mp_parse+0x422>
   13ad4:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   13ad8:	31 10       	cpse	r3, r1
   13ada:	14 c0       	rjmp	.+40     	; 0x13b04 <mp_parse+0x44e>
   13adc:	c8 01       	movw	r24, r16
   13ade:	81 70       	andi	r24, 0x01	; 1
   13ae0:	99 27       	eor	r25, r25
   13ae2:	8e 21       	and	r24, r14
   13ae4:	9f 21       	and	r25, r15
   13ae6:	fc 01       	movw	r30, r24
   13ae8:	ee 0f       	add	r30, r30
   13aea:	ff 1f       	adc	r31, r31
   13aec:	ec 0d       	add	r30, r12
   13aee:	fd 1d       	adc	r31, r13
   13af0:	a0 80       	ld	r10, Z
   13af2:	b1 80       	ldd	r11, Z+1	; 0x01
   13af4:	95 01       	movw	r18, r10
   13af6:	22 27       	eor	r18, r18
   13af8:	30 7f       	andi	r19, 0xF0	; 240
   13afa:	21 15       	cp	r18, r1
   13afc:	60 e1       	ldi	r22, 0x10	; 16
   13afe:	36 07       	cpc	r19, r22
   13b00:	b9 f0       	breq	.+46     	; 0x13b30 <mp_parse+0x47a>
   13b02:	4b c0       	rjmp	.+150    	; 0x13b9a <mp_parse+0x4e4>
   13b04:	82 e0       	ldi	r24, 0x02	; 2
   13b06:	e8 16       	cp	r14, r24
   13b08:	f1 04       	cpc	r15, r1
   13b0a:	31 f4       	brne	.+12     	; 0x13b18 <mp_parse+0x462>
   13b0c:	01 30       	cpi	r16, 0x01	; 1
   13b0e:	11 05       	cpc	r17, r1
   13b10:	09 f4       	brne	.+2      	; 0x13b14 <mp_parse+0x45e>
   13b12:	25 ce       	rjmp	.-950    	; 0x1375e <mp_parse+0xa8>
   13b14:	40 e0       	ldi	r20, 0x00	; 0
   13b16:	58 c0       	rjmp	.+176    	; 0x13bc8 <mp_parse+0x512>
   13b18:	01 30       	cpi	r16, 0x01	; 1
   13b1a:	11 05       	cpc	r17, r1
   13b1c:	09 f4       	brne	.+2      	; 0x13b20 <mp_parse+0x46a>
   13b1e:	22 ce       	rjmp	.-956    	; 0x13764 <mp_parse+0xae>
   13b20:	00 ff       	sbrs	r16, 0
   13b22:	4f c0       	rjmp	.+158    	; 0x13bc2 <mp_parse+0x50c>
   13b24:	93 e0       	ldi	r25, 0x03	; 3
   13b26:	e9 16       	cp	r14, r25
   13b28:	f1 04       	cpc	r15, r1
   13b2a:	09 f4       	brne	.+2      	; 0x13b2e <mp_parse+0x478>
   13b2c:	4c c0       	rjmp	.+152    	; 0x13bc6 <mp_parse+0x510>
   13b2e:	a1 c0       	rjmp	.+322    	; 0x13c72 <mp_parse+0x5bc>
   13b30:	d4 01       	movw	r26, r8
   13b32:	90 96       	adiw	r26, 0x20	; 32
   13b34:	2c 91       	ld	r18, X
   13b36:	30 e0       	ldi	r19, 0x00	; 0
   13b38:	bf e0       	ldi	r27, 0x0F	; 15
   13b3a:	bb 22       	and	r11, r27
   13b3c:	2a 15       	cp	r18, r10
   13b3e:	3b 05       	cpc	r19, r11
   13b40:	49 f0       	breq	.+18     	; 0x13b54 <mp_parse+0x49e>
   13b42:	28 c0       	rjmp	.+80     	; 0x13b94 <mp_parse+0x4de>
   13b44:	f4 01       	movw	r30, r8
   13b46:	20 a1       	ldd	r18, Z+32	; 0x20
   13b48:	30 e0       	ldi	r19, 0x00	; 0
   13b4a:	ff e0       	ldi	r31, 0x0F	; 15
   13b4c:	bf 22       	and	r11, r31
   13b4e:	2a 15       	cp	r18, r10
   13b50:	3b 05       	cpc	r19, r11
   13b52:	01 f5       	brne	.+64     	; 0x13b94 <mp_parse+0x4de>
   13b54:	89 2b       	or	r24, r25
   13b56:	29 f4       	brne	.+10     	; 0x13b62 <mp_parse+0x4ac>
   13b58:	65 2d       	mov	r22, r5
   13b5a:	ce 01       	movw	r24, r28
   13b5c:	01 96       	adiw	r24, 0x01	; 1
   13b5e:	0e 94 40 7d 	call	0xfa80	; 0xfa80 <push_result_token>
   13b62:	c4 01       	movw	r24, r8
   13b64:	0e 94 ee 4e 	call	0x9ddc	; 0x9ddc <mp_lexer_to_next>
   13b68:	0f 5f       	subi	r16, 0xFF	; 255
   13b6a:	1f 4f       	sbci	r17, 0xFF	; 255
   13b6c:	c8 01       	movw	r24, r16
   13b6e:	81 70       	andi	r24, 0x01	; 1
   13b70:	99 27       	eor	r25, r25
   13b72:	8e 21       	and	r24, r14
   13b74:	9f 21       	and	r25, r15
   13b76:	fc 01       	movw	r30, r24
   13b78:	ee 0f       	add	r30, r30
   13b7a:	ff 1f       	adc	r31, r31
   13b7c:	ec 0d       	add	r30, r12
   13b7e:	fd 1d       	adc	r31, r13
   13b80:	a0 80       	ld	r10, Z
   13b82:	b1 80       	ldd	r11, Z+1	; 0x01
   13b84:	95 01       	movw	r18, r10
   13b86:	22 27       	eor	r18, r18
   13b88:	30 7f       	andi	r19, 0xF0	; 240
   13b8a:	21 15       	cp	r18, r1
   13b8c:	40 e1       	ldi	r20, 0x10	; 16
   13b8e:	34 07       	cpc	r19, r20
   13b90:	c9 f2       	breq	.-78     	; 0x13b44 <mp_parse+0x48e>
   13b92:	03 c0       	rjmp	.+6      	; 0x13b9a <mp_parse+0x4e4>
   13b94:	0f 5f       	subi	r16, 0xFF	; 255
   13b96:	1f 4f       	sbci	r17, 0xFF	; 255
   13b98:	b5 cf       	rjmp	.-150    	; 0x13b04 <mp_parse+0x44e>
   13b9a:	21 15       	cp	r18, r1
   13b9c:	30 42       	sbci	r19, 0x20	; 32
   13b9e:	11 f0       	breq	.+4      	; 0x13ba4 <mp_parse+0x4ee>
   13ba0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   13ba4:	98 01       	movw	r18, r16
   13ba6:	2f 5f       	subi	r18, 0xFF	; 255
   13ba8:	3f 4f       	sbci	r19, 0xFF	; 255
   13baa:	45 2d       	mov	r20, r5
   13bac:	b3 01       	movw	r22, r6
   13bae:	ce 01       	movw	r24, r28
   13bb0:	01 96       	adiw	r24, 0x01	; 1
   13bb2:	0e 94 a7 55 	call	0xab4e	; 0xab4e <push_rule>
   13bb6:	b5 01       	movw	r22, r10
   13bb8:	ce 01       	movw	r24, r28
   13bba:	01 96       	adiw	r24, 0x01	; 1
   13bbc:	0e 94 e2 55 	call	0xabc4	; 0xabc4 <push_rule_from_arg>
   13bc0:	d5 cd       	rjmp	.-1110   	; 0x1376c <mp_parse+0xb6>
   13bc2:	40 e0       	ldi	r20, 0x00	; 0
   13bc4:	01 c0       	rjmp	.+2      	; 0x13bc8 <mp_parse+0x512>
   13bc6:	41 e0       	ldi	r20, 0x01	; 1
   13bc8:	01 15       	cp	r16, r1
   13bca:	11 05       	cpc	r17, r1
   13bcc:	11 f4       	brne	.+4      	; 0x13bd2 <mp_parse+0x51c>
   13bce:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   13bd2:	98 01       	movw	r18, r16
   13bd4:	21 50       	subi	r18, 0x01	; 1
   13bd6:	31 09       	sbc	r19, r1
   13bd8:	40 fe       	sbrs	r4, 0
   13bda:	0d c0       	rjmp	.+26     	; 0x13bf6 <mp_parse+0x540>
   13bdc:	d6 01       	movw	r26, r12
   13bde:	12 96       	adiw	r26, 0x02	; 2
   13be0:	8d 91       	ld	r24, X+
   13be2:	9c 91       	ld	r25, X
   13be4:	13 97       	sbiw	r26, 0x03	; 3
   13be6:	88 27       	eor	r24, r24
   13be8:	90 7f       	andi	r25, 0xF0	; 240
   13bea:	81 15       	cp	r24, r1
   13bec:	90 41       	sbci	r25, 0x10	; 16
   13bee:	19 f4       	brne	.+6      	; 0x13bf6 <mp_parse+0x540>
   13bf0:	98 01       	movw	r18, r16
   13bf2:	36 95       	lsr	r19
   13bf4:	27 95       	ror	r18
   13bf6:	21 30       	cpi	r18, 0x01	; 1
   13bf8:	31 05       	cpc	r19, r1
   13bfa:	69 f4       	brne	.+26     	; 0x13c16 <mp_parse+0x560>
   13bfc:	44 23       	and	r20, r20
   13bfe:	09 f4       	brne	.+2      	; 0x13c02 <mp_parse+0x54c>
   13c00:	b4 cd       	rjmp	.-1176   	; 0x1376a <mp_parse+0xb4>
   13c02:	21 e0       	ldi	r18, 0x01	; 1
   13c04:	30 e0       	ldi	r19, 0x00	; 0
   13c06:	45 2d       	mov	r20, r5
   13c08:	b3 01       	movw	r22, r6
   13c0a:	ce 01       	movw	r24, r28
   13c0c:	01 96       	adiw	r24, 0x01	; 1
   13c0e:	0e 94 b4 54 	call	0xa968	; 0xa968 <push_result_rule>
   13c12:	31 2c       	mov	r3, r1
   13c14:	ab cd       	rjmp	.-1194   	; 0x1376c <mp_parse+0xb6>
   13c16:	45 2d       	mov	r20, r5
   13c18:	b3 01       	movw	r22, r6
   13c1a:	ce 01       	movw	r24, r28
   13c1c:	01 96       	adiw	r24, 0x01	; 1
   13c1e:	0e 94 b4 54 	call	0xa968	; 0xa968 <push_result_rule>
   13c22:	31 2c       	mov	r3, r1
   13c24:	a3 cd       	rjmp	.-1210   	; 0x1376c <mp_parse+0xb6>
   13c26:	8b 89       	ldd	r24, Y+19	; 0x13
   13c28:	9c 89       	ldd	r25, Y+20	; 0x14
   13c2a:	00 97       	sbiw	r24, 0x00	; 0
   13c2c:	c1 f0       	breq	.+48     	; 0x13c5e <mp_parse+0x5a8>
   13c2e:	fc 01       	movw	r30, r24
   13c30:	62 81       	ldd	r22, Z+2	; 0x02
   13c32:	73 81       	ldd	r23, Z+3	; 0x03
   13c34:	6c 5f       	subi	r22, 0xFC	; 252
   13c36:	7f 4f       	sbci	r23, 0xFF	; 255
   13c38:	40 e0       	ldi	r20, 0x00	; 0
   13c3a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <m_realloc_maybe>
   13c3e:	eb 89       	ldd	r30, Y+19	; 0x13
   13c40:	fc 89       	ldd	r31, Y+20	; 0x14
   13c42:	82 81       	ldd	r24, Z+2	; 0x02
   13c44:	93 81       	ldd	r25, Z+3	; 0x03
   13c46:	91 83       	std	Z+1, r25	; 0x01
   13c48:	80 83       	st	Z, r24
   13c4a:	eb 89       	ldd	r30, Y+19	; 0x13
   13c4c:	fc 89       	ldd	r31, Y+20	; 0x14
   13c4e:	89 89       	ldd	r24, Y+17	; 0x11
   13c50:	9a 89       	ldd	r25, Y+18	; 0x12
   13c52:	93 83       	std	Z+3, r25	; 0x03
   13c54:	82 83       	std	Z+2, r24	; 0x02
   13c56:	8b 89       	ldd	r24, Y+19	; 0x13
   13c58:	9c 89       	ldd	r25, Y+20	; 0x14
   13c5a:	9a 8b       	std	Y+18, r25	; 0x12
   13c5c:	89 8b       	std	Y+17, r24	; 0x11
   13c5e:	d4 01       	movw	r26, r8
   13c60:	90 96       	adiw	r26, 0x20	; 32
   13c62:	8c 91       	ld	r24, X
   13c64:	81 11       	cpse	r24, r1
   13c66:	05 c0       	rjmp	.+10     	; 0x13c72 <mp_parse+0x5bc>
   13c68:	89 85       	ldd	r24, Y+9	; 0x09
   13c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
   13c6c:	00 97       	sbiw	r24, 0x00	; 0
   13c6e:	69 f5       	brne	.+90     	; 0x13cca <mp_parse+0x614>
   13c70:	16 c0       	rjmp	.+44     	; 0x13c9e <mp_parse+0x5e8>
   13c72:	f4 01       	movw	r30, r8
   13c74:	80 a1       	ldd	r24, Z+32	; 0x20
   13c76:	85 30       	cpi	r24, 0x05	; 5
   13c78:	41 f4       	brne	.+16     	; 0x13c8a <mp_parse+0x5d4>
   13c7a:	6d ea       	ldi	r22, 0xAD	; 173
   13c7c:	7c e0       	ldi	r23, 0x0C	; 12
   13c7e:	88 e9       	ldi	r24, 0x98	; 152
   13c80:	9f e1       	ldi	r25, 0x1F	; 31
   13c82:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   13c86:	8c 01       	movw	r16, r24
   13c88:	11 c0       	rjmp	.+34     	; 0x13cac <mp_parse+0x5f6>
   13c8a:	82 30       	cpi	r24, 0x02	; 2
   13c8c:	41 f4       	brne	.+16     	; 0x13c9e <mp_parse+0x5e8>
   13c8e:	6f eb       	ldi	r22, 0xBF	; 191
   13c90:	7c e0       	ldi	r23, 0x0C	; 12
   13c92:	88 e9       	ldi	r24, 0x98	; 152
   13c94:	9f e1       	ldi	r25, 0x1F	; 31
   13c96:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   13c9a:	8c 01       	movw	r16, r24
   13c9c:	07 c0       	rjmp	.+14     	; 0x13cac <mp_parse+0x5f6>
   13c9e:	67 e0       	ldi	r22, 0x07	; 7
   13ca0:	78 e0       	ldi	r23, 0x08	; 8
   13ca2:	88 eb       	ldi	r24, 0xB8	; 184
   13ca4:	9f e1       	ldi	r25, 0x1F	; 31
   13ca6:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   13caa:	8c 01       	movw	r16, r24
   13cac:	d4 01       	movw	r26, r8
   13cae:	5c 96       	adiw	r26, 0x1c	; 28
   13cb0:	4d 91       	ld	r20, X+
   13cb2:	5c 91       	ld	r21, X
   13cb4:	5d 97       	sbiw	r26, 0x1d	; 29
   13cb6:	6d 91       	ld	r22, X+
   13cb8:	7c 91       	ld	r23, X
   13cba:	20 e0       	ldi	r18, 0x00	; 0
   13cbc:	30 e0       	ldi	r19, 0x00	; 0
   13cbe:	c8 01       	movw	r24, r16
   13cc0:	0e 94 c4 21 	call	0x4388	; 0x4388 <mp_obj_exception_add_traceback>
   13cc4:	c8 01       	movw	r24, r16
   13cc6:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
   13cca:	01 97       	sbiw	r24, 0x01	; 1
   13ccc:	11 f0       	breq	.+4      	; 0x13cd2 <mp_parse+0x61c>
   13cce:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   13cd2:	eb 85       	ldd	r30, Y+11	; 0x0b
   13cd4:	fc 85       	ldd	r31, Y+12	; 0x0c
   13cd6:	80 81       	ld	r24, Z
   13cd8:	91 81       	ldd	r25, Z+1	; 0x01
   13cda:	98 8b       	std	Y+16, r25	; 0x10
   13cdc:	8f 87       	std	Y+15, r24	; 0x0f
   13cde:	8d 81       	ldd	r24, Y+5	; 0x05
   13ce0:	9e 81       	ldd	r25, Y+6	; 0x06
   13ce2:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
   13ce6:	8b 85       	ldd	r24, Y+11	; 0x0b
   13ce8:	9c 85       	ldd	r25, Y+12	; 0x0c
   13cea:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
   13cee:	c4 01       	movw	r24, r8
   13cf0:	0e 94 de 10 	call	0x21bc	; 0x21bc <mp_lexer_free>
   13cf4:	6f 85       	ldd	r22, Y+15	; 0x0f
   13cf6:	78 89       	ldd	r23, Y+16	; 0x10
   13cf8:	89 89       	ldd	r24, Y+17	; 0x11
   13cfa:	9a 89       	ldd	r25, Y+18	; 0x12
   13cfc:	04 c0       	rjmp	.+8      	; 0x13d06 <mp_parse+0x650>
   13cfe:	00 97       	sbiw	r24, 0x00	; 0
   13d00:	09 f4       	brne	.+2      	; 0x13d04 <mp_parse+0x64e>
   13d02:	64 ce       	rjmp	.-824    	; 0x139cc <mp_parse+0x316>
   13d04:	69 ce       	rjmp	.-814    	; 0x139d8 <mp_parse+0x322>
   13d06:	65 96       	adiw	r28, 0x15	; 21
   13d08:	0f b6       	in	r0, 0x3f	; 63
   13d0a:	f8 94       	cli
   13d0c:	de bf       	out	0x3e, r29	; 62
   13d0e:	0f be       	out	0x3f, r0	; 63
   13d10:	cd bf       	out	0x3d, r28	; 61
   13d12:	df 91       	pop	r29
   13d14:	cf 91       	pop	r28
   13d16:	1f 91       	pop	r17
   13d18:	0f 91       	pop	r16
   13d1a:	ff 90       	pop	r15
   13d1c:	ef 90       	pop	r14
   13d1e:	df 90       	pop	r13
   13d20:	cf 90       	pop	r12
   13d22:	bf 90       	pop	r11
   13d24:	af 90       	pop	r10
   13d26:	9f 90       	pop	r9
   13d28:	8f 90       	pop	r8
   13d2a:	7f 90       	pop	r7
   13d2c:	6f 90       	pop	r6
   13d2e:	5f 90       	pop	r5
   13d30:	4f 90       	pop	r4
   13d32:	3f 90       	pop	r3
   13d34:	2f 90       	pop	r2
   13d36:	08 95       	ret

00013d38 <execute_from_str>:
   13d38:	cf 93       	push	r28
   13d3a:	df 93       	push	r29
   13d3c:	cd b7       	in	r28, 0x3d	; 61
   13d3e:	de b7       	in	r29, 0x3e	; 62
   13d40:	a1 97       	sbiw	r28, 0x21	; 33
   13d42:	0f b6       	in	r0, 0x3f	; 63
   13d44:	f8 94       	cli
   13d46:	de bf       	out	0x3e, r29	; 62
   13d48:	0f be       	out	0x3f, r0	; 63
   13d4a:	cd bf       	out	0x3d, r28	; 61
   13d4c:	99 a3       	std	Y+33, r25	; 0x21
   13d4e:	88 a3       	std	Y+32, r24	; 0x20
   13d50:	ce 01       	movw	r24, r28
   13d52:	01 96       	adiw	r24, 0x01	; 1
   13d54:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   13d58:	ce 01       	movw	r24, r28
   13d5a:	05 96       	adiw	r24, 0x05	; 5
   13d5c:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   13d60:	89 2b       	or	r24, r25
   13d62:	29 f5       	brne	.+74     	; 0x13dae <execute_from_str+0x76>
   13d64:	e8 a1       	ldd	r30, Y+32	; 0x20
   13d66:	f9 a1       	ldd	r31, Y+33	; 0x21
   13d68:	01 90       	ld	r0, Z+
   13d6a:	00 20       	and	r0, r0
   13d6c:	e9 f7       	brne	.-6      	; 0x13d68 <execute_from_str+0x30>
   13d6e:	31 97       	sbiw	r30, 0x01	; 1
   13d70:	af 01       	movw	r20, r30
   13d72:	88 a1       	ldd	r24, Y+32	; 0x20
   13d74:	99 a1       	ldd	r25, Y+33	; 0x21
   13d76:	48 1b       	sub	r20, r24
   13d78:	59 0b       	sbc	r21, r25
   13d7a:	20 e0       	ldi	r18, 0x00	; 0
   13d7c:	30 e0       	ldi	r19, 0x00	; 0
   13d7e:	bc 01       	movw	r22, r24
   13d80:	81 e0       	ldi	r24, 0x01	; 1
   13d82:	90 e0       	ldi	r25, 0x00	; 0
   13d84:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <mp_lexer_new_from_str_len>
   13d88:	61 e0       	ldi	r22, 0x01	; 1
   13d8a:	95 dc       	rcall	.-1750   	; 0x136b6 <mp_parse>
   13d8c:	6c 8f       	std	Y+28, r22	; 0x1c
   13d8e:	7d 8f       	std	Y+29, r23	; 0x1d
   13d90:	8e 8f       	std	Y+30, r24	; 0x1e
   13d92:	9f 8f       	std	Y+31, r25	; 0x1f
   13d94:	40 e0       	ldi	r20, 0x00	; 0
   13d96:	61 e0       	ldi	r22, 0x01	; 1
   13d98:	70 e0       	ldi	r23, 0x00	; 0
   13d9a:	ce 01       	movw	r24, r28
   13d9c:	4c 96       	adiw	r24, 0x1c	; 28
   13d9e:	e7 d9       	rcall	.-3122   	; 0x1316e <mp_compile>
   13da0:	0e 94 21 25 	call	0x4a42	; 0x4a42 <mp_call_function_0>
   13da4:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   13da8:	80 e0       	ldi	r24, 0x00	; 0
   13daa:	90 e0       	ldi	r25, 0x00	; 0
   13dac:	02 c0       	rjmp	.+4      	; 0x13db2 <execute_from_str+0x7a>
   13dae:	8b 81       	ldd	r24, Y+3	; 0x03
   13db0:	9c 81       	ldd	r25, Y+4	; 0x04
   13db2:	a1 96       	adiw	r28, 0x21	; 33
   13db4:	0f b6       	in	r0, 0x3f	; 63
   13db6:	f8 94       	cli
   13db8:	de bf       	out	0x3e, r29	; 62
   13dba:	0f be       	out	0x3f, r0	; 63
   13dbc:	cd bf       	out	0x3d, r28	; 61
   13dbe:	df 91       	pop	r29
   13dc0:	cf 91       	pop	r28
   13dc2:	08 95       	ret

00013dc4 <mp_parse_compile_execute>:
   13dc4:	0f 93       	push	r16
   13dc6:	1f 93       	push	r17
   13dc8:	cf 93       	push	r28
   13dca:	df 93       	push	r29
   13dcc:	cd b7       	in	r28, 0x3d	; 61
   13dce:	de b7       	in	r29, 0x3e	; 62
   13dd0:	a6 97       	sbiw	r28, 0x26	; 38
   13dd2:	0f b6       	in	r0, 0x3f	; 63
   13dd4:	f8 94       	cli
   13dd6:	de bf       	out	0x3e, r29	; 62
   13dd8:	0f be       	out	0x3f, r0	; 63
   13dda:	cd bf       	out	0x3d, r28	; 61
   13ddc:	9d a3       	std	Y+37, r25	; 0x25
   13dde:	8c a3       	std	Y+36, r24	; 0x24
   13de0:	6e a3       	std	Y+38, r22	; 0x26
   13de2:	ea e5       	ldi	r30, 0x5A	; 90
   13de4:	fb e6       	ldi	r31, 0x6B	; 107
   13de6:	86 81       	ldd	r24, Z+6	; 0x06
   13de8:	97 81       	ldd	r25, Z+7	; 0x07
   13dea:	9a 83       	std	Y+2, r25	; 0x02
   13dec:	89 83       	std	Y+1, r24	; 0x01
   13dee:	84 81       	ldd	r24, Z+4	; 0x04
   13df0:	95 81       	ldd	r25, Z+5	; 0x05
   13df2:	9c 83       	std	Y+4, r25	; 0x04
   13df4:	8b 83       	std	Y+3, r24	; 0x03
   13df6:	57 83       	std	Z+7, r21	; 0x07
   13df8:	46 83       	std	Z+6, r20	; 0x06
   13dfa:	35 83       	std	Z+5, r19	; 0x05
   13dfc:	24 83       	std	Z+4, r18	; 0x04
   13dfe:	ce 01       	movw	r24, r28
   13e00:	05 96       	adiw	r24, 0x05	; 5
   13e02:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   13e06:	ce 01       	movw	r24, r28
   13e08:	09 96       	adiw	r24, 0x09	; 9
   13e0a:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   13e0e:	89 2b       	or	r24, r25
   13e10:	89 f4       	brne	.+34     	; 0x13e34 <mp_parse_compile_execute+0x70>
   13e12:	ec a1       	ldd	r30, Y+36	; 0x24
   13e14:	fd a1       	ldd	r31, Y+37	; 0x25
   13e16:	00 81       	ld	r16, Z
   13e18:	11 81       	ldd	r17, Z+1	; 0x01
   13e1a:	6e a1       	ldd	r22, Y+38	; 0x26
   13e1c:	cf 01       	movw	r24, r30
   13e1e:	4b dc       	rcall	.-1898   	; 0x136b6 <mp_parse>
   13e20:	68 a3       	std	Y+32, r22	; 0x20
   13e22:	79 a3       	std	Y+33, r23	; 0x21
   13e24:	8a a3       	std	Y+34, r24	; 0x22
   13e26:	9b a3       	std	Y+35, r25	; 0x23
   13e28:	41 e0       	ldi	r20, 0x01	; 1
   13e2a:	fe a1       	ldd	r31, Y+38	; 0x26
   13e2c:	ff 23       	and	r31, r31
   13e2e:	81 f0       	breq	.+32     	; 0x13e50 <mp_parse_compile_execute+0x8c>
   13e30:	40 e0       	ldi	r20, 0x00	; 0
   13e32:	0e c0       	rjmp	.+28     	; 0x13e50 <mp_parse_compile_execute+0x8c>
   13e34:	89 81       	ldd	r24, Y+1	; 0x01
   13e36:	9a 81       	ldd	r25, Y+2	; 0x02
   13e38:	ea e5       	ldi	r30, 0x5A	; 90
   13e3a:	fb e6       	ldi	r31, 0x6B	; 107
   13e3c:	97 83       	std	Z+7, r25	; 0x07
   13e3e:	86 83       	std	Z+6, r24	; 0x06
   13e40:	8b 81       	ldd	r24, Y+3	; 0x03
   13e42:	9c 81       	ldd	r25, Y+4	; 0x04
   13e44:	95 83       	std	Z+5, r25	; 0x05
   13e46:	84 83       	std	Z+4, r24	; 0x04
   13e48:	8f 81       	ldd	r24, Y+7	; 0x07
   13e4a:	98 85       	ldd	r25, Y+8	; 0x08
   13e4c:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
   13e50:	b8 01       	movw	r22, r16
   13e52:	ce 01       	movw	r24, r28
   13e54:	80 96       	adiw	r24, 0x20	; 32
   13e56:	8b d9       	rcall	.-3306   	; 0x1316e <mp_compile>
   13e58:	0e 94 21 25 	call	0x4a42	; 0x4a42 <mp_call_function_0>
   13e5c:	8c 01       	movw	r16, r24
   13e5e:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   13e62:	89 81       	ldd	r24, Y+1	; 0x01
   13e64:	9a 81       	ldd	r25, Y+2	; 0x02
   13e66:	ea e5       	ldi	r30, 0x5A	; 90
   13e68:	fb e6       	ldi	r31, 0x6B	; 107
   13e6a:	97 83       	std	Z+7, r25	; 0x07
   13e6c:	86 83       	std	Z+6, r24	; 0x06
   13e6e:	8b 81       	ldd	r24, Y+3	; 0x03
   13e70:	9c 81       	ldd	r25, Y+4	; 0x04
   13e72:	95 83       	std	Z+5, r25	; 0x05
   13e74:	84 83       	std	Z+4, r24	; 0x04
   13e76:	c8 01       	movw	r24, r16
   13e78:	a6 96       	adiw	r28, 0x26	; 38
   13e7a:	0f b6       	in	r0, 0x3f	; 63
   13e7c:	f8 94       	cli
   13e7e:	de bf       	out	0x3e, r29	; 62
   13e80:	0f be       	out	0x3f, r0	; 63
   13e82:	cd bf       	out	0x3d, r28	; 61
   13e84:	df 91       	pop	r29
   13e86:	cf 91       	pop	r28
   13e88:	1f 91       	pop	r17
   13e8a:	0f 91       	pop	r16
   13e8c:	08 95       	ret

00013e8e <eval_exec_helper>:
   13e8e:	af 92       	push	r10
   13e90:	bf 92       	push	r11
   13e92:	df 92       	push	r13
   13e94:	ef 92       	push	r14
   13e96:	ff 92       	push	r15
   13e98:	0f 93       	push	r16
   13e9a:	1f 93       	push	r17
   13e9c:	cf 93       	push	r28
   13e9e:	df 93       	push	r29
   13ea0:	00 d0       	rcall	.+0      	; 0x13ea2 <eval_exec_helper+0x14>
   13ea2:	00 d0       	rcall	.+0      	; 0x13ea4 <eval_exec_helper+0x16>
   13ea4:	00 d0       	rcall	.+0      	; 0x13ea6 <eval_exec_helper+0x18>
   13ea6:	cd b7       	in	r28, 0x3d	; 61
   13ea8:	de b7       	in	r29, 0x3e	; 62
   13eaa:	5b 01       	movw	r10, r22
   13eac:	d4 2e       	mov	r13, r20
   13eae:	ea e5       	ldi	r30, 0x5A	; 90
   13eb0:	fb e6       	ldi	r31, 0x6B	; 107
   13eb2:	e6 80       	ldd	r14, Z+6	; 0x06
   13eb4:	f7 80       	ldd	r15, Z+7	; 0x07
   13eb6:	54 81       	ldd	r21, Z+4	; 0x04
   13eb8:	45 81       	ldd	r20, Z+5	; 0x05
   13eba:	82 30       	cpi	r24, 0x02	; 2
   13ebc:	91 05       	cpc	r25, r1
   13ebe:	78 f1       	brcs	.+94     	; 0x13f1e <eval_exec_helper+0x90>
   13ec0:	fb 01       	movw	r30, r22
   13ec2:	32 96       	adiw	r30, 0x02	; 2
   13ec4:	22 e0       	ldi	r18, 0x02	; 2
   13ec6:	30 e0       	ldi	r19, 0x00	; 0
   13ec8:	03 c0       	rjmp	.+6      	; 0x13ed0 <eval_exec_helper+0x42>
   13eca:	9a 01       	movw	r18, r20
   13ecc:	50 2f       	mov	r21, r16
   13ece:	41 2f       	mov	r20, r17
   13ed0:	01 91       	ld	r16, Z+
   13ed2:	11 91       	ld	r17, Z+
   13ed4:	06 30       	cpi	r16, 0x06	; 6
   13ed6:	11 05       	cpc	r17, r1
   13ed8:	99 f0       	breq	.+38     	; 0x13f00 <eval_exec_helper+0x72>
   13eda:	a8 01       	movw	r20, r16
   13edc:	43 70       	andi	r20, 0x03	; 3
   13ede:	55 27       	eor	r21, r21
   13ee0:	45 2b       	or	r20, r21
   13ee2:	31 f4       	brne	.+12     	; 0x13ef0 <eval_exec_helper+0x62>
   13ee4:	d8 01       	movw	r26, r16
   13ee6:	4d 91       	ld	r20, X+
   13ee8:	5c 91       	ld	r21, X
   13eea:	48 57       	subi	r20, 0x78	; 120
   13eec:	52 42       	sbci	r21, 0x22	; 34
   13eee:	21 f0       	breq	.+8      	; 0x13ef8 <eval_exec_helper+0x6a>
   13ef0:	80 e0       	ldi	r24, 0x00	; 0
   13ef2:	90 e0       	ldi	r25, 0x00	; 0
   13ef4:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
   13ef8:	22 30       	cpi	r18, 0x02	; 2
   13efa:	31 05       	cpc	r19, r1
   13efc:	19 f4       	brne	.+6      	; 0x13f04 <eval_exec_helper+0x76>
   13efe:	06 c0       	rjmp	.+12     	; 0x13f0c <eval_exec_helper+0x7e>
   13f00:	05 2f       	mov	r16, r21
   13f02:	14 2f       	mov	r17, r20
   13f04:	23 30       	cpi	r18, 0x03	; 3
   13f06:	31 05       	cpc	r19, r1
   13f08:	18 f0       	brcs	.+6      	; 0x13f10 <eval_exec_helper+0x82>
   13f0a:	0b c0       	rjmp	.+22     	; 0x13f22 <eval_exec_helper+0x94>
   13f0c:	e0 2e       	mov	r14, r16
   13f0e:	f1 2e       	mov	r15, r17
   13f10:	a9 01       	movw	r20, r18
   13f12:	4f 5f       	subi	r20, 0xFF	; 255
   13f14:	5f 4f       	sbci	r21, 0xFF	; 255
   13f16:	28 17       	cp	r18, r24
   13f18:	39 07       	cpc	r19, r25
   13f1a:	b8 f2       	brcs	.-82     	; 0x13eca <eval_exec_helper+0x3c>
   13f1c:	02 c0       	rjmp	.+4      	; 0x13f22 <eval_exec_helper+0x94>
   13f1e:	05 2f       	mov	r16, r21
   13f20:	14 2f       	mov	r17, r20
   13f22:	41 e0       	ldi	r20, 0x01	; 1
   13f24:	50 e0       	ldi	r21, 0x00	; 0
   13f26:	be 01       	movw	r22, r28
   13f28:	6f 5f       	subi	r22, 0xFF	; 255
   13f2a:	7f 4f       	sbci	r23, 0xFF	; 255
   13f2c:	f5 01       	movw	r30, r10
   13f2e:	80 81       	ld	r24, Z
   13f30:	91 81       	ldd	r25, Z+1	; 0x01
   13f32:	0e 94 71 29 	call	0x52e2	; 0x52e2 <mp_get_buffer_raise>
   13f36:	4b 81       	ldd	r20, Y+3	; 0x03
   13f38:	5c 81       	ldd	r21, Y+4	; 0x04
   13f3a:	69 81       	ldd	r22, Y+1	; 0x01
   13f3c:	7a 81       	ldd	r23, Y+2	; 0x02
   13f3e:	20 e0       	ldi	r18, 0x00	; 0
   13f40:	30 e0       	ldi	r19, 0x00	; 0
   13f42:	80 ec       	ldi	r24, 0xC0	; 192
   13f44:	90 e0       	ldi	r25, 0x00	; 0
   13f46:	0e 94 64 54 	call	0xa8c8	; 0xa8c8 <mp_lexer_new_from_str_len>
   13f4a:	98 01       	movw	r18, r16
   13f4c:	4e 2d       	mov	r20, r14
   13f4e:	5f 2d       	mov	r21, r15
   13f50:	6d 2d       	mov	r22, r13
   13f52:	38 df       	rcall	.-400    	; 0x13dc4 <mp_parse_compile_execute>
   13f54:	26 96       	adiw	r28, 0x06	; 6
   13f56:	0f b6       	in	r0, 0x3f	; 63
   13f58:	f8 94       	cli
   13f5a:	de bf       	out	0x3e, r29	; 62
   13f5c:	0f be       	out	0x3f, r0	; 63
   13f5e:	cd bf       	out	0x3d, r28	; 61
   13f60:	df 91       	pop	r29
   13f62:	cf 91       	pop	r28
   13f64:	1f 91       	pop	r17
   13f66:	0f 91       	pop	r16
   13f68:	ff 90       	pop	r15
   13f6a:	ef 90       	pop	r14
   13f6c:	df 90       	pop	r13
   13f6e:	bf 90       	pop	r11
   13f70:	af 90       	pop	r10
   13f72:	08 95       	ret

00013f74 <mp_builtin_eval>:
   13f74:	42 e0       	ldi	r20, 0x02	; 2
   13f76:	8b cf       	rjmp	.-234    	; 0x13e8e <eval_exec_helper>
   13f78:	08 95       	ret

00013f7a <mp_builtin_exec>:
   13f7a:	41 e0       	ldi	r20, 0x01	; 1
   13f7c:	88 cf       	rjmp	.-240    	; 0x13e8e <eval_exec_helper>
   13f7e:	08 95       	ret

00013f80 <mp_raise_type_arg>:
   13f80:	cf 93       	push	r28
   13f82:	df 93       	push	r29
   13f84:	00 d0       	rcall	.+0      	; 0x13f86 <mp_raise_type_arg+0x6>
   13f86:	cd b7       	in	r28, 0x3d	; 61
   13f88:	de b7       	in	r29, 0x3e	; 62
   13f8a:	7a 83       	std	Y+2, r23	; 0x02
   13f8c:	69 83       	std	Y+1, r22	; 0x01
   13f8e:	fc 01       	movw	r30, r24
   13f90:	20 85       	ldd	r18, Z+8	; 0x08
   13f92:	31 85       	ldd	r19, Z+9	; 0x09
   13f94:	2a 54       	subi	r18, 0x4A	; 74
   13f96:	36 42       	sbci	r19, 0x26	; 38
   13f98:	11 f0       	breq	.+4      	; 0x13f9e <mp_raise_type_arg+0x1e>
   13f9a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   13f9e:	9e 01       	movw	r18, r28
   13fa0:	2f 5f       	subi	r18, 0xFF	; 255
   13fa2:	3f 4f       	sbci	r19, 0xFF	; 255
   13fa4:	40 e0       	ldi	r20, 0x00	; 0
   13fa6:	50 e0       	ldi	r21, 0x00	; 0
   13fa8:	61 e0       	ldi	r22, 0x01	; 1
   13faa:	70 e0       	ldi	r23, 0x00	; 0
   13fac:	0e 94 4a 26 	call	0x4c94	; 0x4c94 <mp_obj_exception_make_new>
   13fb0:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>

00013fb4 <mp_raise_StopIteration>:
   13fb4:	00 97       	sbiw	r24, 0x00	; 0
   13fb6:	31 f4       	brne	.+12     	; 0x13fc4 <mp_raise_StopIteration+0x10>
   13fb8:	60 e0       	ldi	r22, 0x00	; 0
   13fba:	70 e0       	ldi	r23, 0x00	; 0
   13fbc:	88 eb       	ldi	r24, 0xB8	; 184
   13fbe:	91 e2       	ldi	r25, 0x21	; 33
   13fc0:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   13fc4:	bc 01       	movw	r22, r24
   13fc6:	88 eb       	ldi	r24, 0xB8	; 184
   13fc8:	91 e2       	ldi	r25, 0x21	; 33
   13fca:	da df       	rcall	.-76     	; 0x13f80 <mp_raise_type_arg>

00013fcc <mp_builtin_next>:
   13fcc:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <mp_iternext_allow_raise>
   13fd0:	00 97       	sbiw	r24, 0x00	; 0
   13fd2:	29 f4       	brne	.+10     	; 0x13fde <mp_builtin_next+0x12>
   13fd4:	80 91 66 6b 	lds	r24, 0x6B66	; 0x806b66 <mp_state_ctx+0xc>
   13fd8:	90 91 67 6b 	lds	r25, 0x6B67	; 0x806b67 <mp_state_ctx+0xd>
   13fdc:	eb cf       	rjmp	.-42     	; 0x13fb4 <mp_raise_StopIteration>
   13fde:	08 95       	ret

00013fe0 <mp_obj_dict_get>:
   13fe0:	cf 93       	push	r28
   13fe2:	df 93       	push	r29
   13fe4:	eb 01       	movw	r28, r22
   13fe6:	40 e0       	ldi	r20, 0x00	; 0
   13fe8:	02 96       	adiw	r24, 0x02	; 2
   13fea:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   13fee:	00 97       	sbiw	r24, 0x00	; 0
   13ff0:	21 f4       	brne	.+8      	; 0x13ffa <mp_obj_dict_get+0x1a>
   13ff2:	be 01       	movw	r22, r28
   13ff4:	88 e7       	ldi	r24, 0x78	; 120
   13ff6:	90 e2       	ldi	r25, 0x20	; 32
   13ff8:	c3 df       	rcall	.-122    	; 0x13f80 <mp_raise_type_arg>
   13ffa:	fc 01       	movw	r30, r24
   13ffc:	82 81       	ldd	r24, Z+2	; 0x02
   13ffe:	93 81       	ldd	r25, Z+3	; 0x03
   14000:	df 91       	pop	r29
   14002:	cf 91       	pop	r28
   14004:	08 95       	ret

00014006 <dict_get_helper>:
   14006:	cf 92       	push	r12
   14008:	df 92       	push	r13
   1400a:	ef 92       	push	r14
   1400c:	ff 92       	push	r15
   1400e:	1f 93       	push	r17
   14010:	cf 93       	push	r28
   14012:	df 93       	push	r29
   14014:	6c 01       	movw	r12, r24
   14016:	7b 01       	movw	r14, r22
   14018:	14 2f       	mov	r17, r20
   1401a:	db 01       	movw	r26, r22
   1401c:	cd 91       	ld	r28, X+
   1401e:	dc 91       	ld	r29, X
   14020:	ce 01       	movw	r24, r28
   14022:	83 70       	andi	r24, 0x03	; 3
   14024:	99 27       	eor	r25, r25
   14026:	89 2b       	or	r24, r25
   14028:	39 f4       	brne	.+14     	; 0x14038 <dict_get_helper+0x32>
   1402a:	e8 81       	ld	r30, Y
   1402c:	f9 81       	ldd	r31, Y+1	; 0x01
   1402e:	80 85       	ldd	r24, Z+8	; 0x08
   14030:	91 85       	ldd	r25, Z+9	; 0x09
   14032:	8a 5a       	subi	r24, 0xAA	; 170
   14034:	99 48       	sbci	r25, 0x89	; 137
   14036:	11 f0       	breq	.+4      	; 0x1403c <dict_get_helper+0x36>
   14038:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   1403c:	44 23       	and	r20, r20
   1403e:	19 f0       	breq	.+6      	; 0x14046 <dict_get_helper+0x40>
   14040:	ce 01       	movw	r24, r28
   14042:	0e 94 79 29 	call	0x52f2	; 0x52f2 <mp_ensure_not_fixed>
   14046:	f7 01       	movw	r30, r14
   14048:	62 81       	ldd	r22, Z+2	; 0x02
   1404a:	73 81       	ldd	r23, Z+3	; 0x03
   1404c:	41 2f       	mov	r20, r17
   1404e:	ce 01       	movw	r24, r28
   14050:	02 96       	adiw	r24, 0x02	; 2
   14052:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   14056:	fc 01       	movw	r30, r24
   14058:	89 2b       	or	r24, r25
   1405a:	21 f0       	breq	.+8      	; 0x14064 <dict_get_helper+0x5e>
   1405c:	82 81       	ldd	r24, Z+2	; 0x02
   1405e:	93 81       	ldd	r25, Z+3	; 0x03
   14060:	00 97       	sbiw	r24, 0x00	; 0
   14062:	d9 f4       	brne	.+54     	; 0x1409a <dict_get_helper+0x94>
   14064:	22 e0       	ldi	r18, 0x02	; 2
   14066:	c2 16       	cp	r12, r18
   14068:	d1 04       	cpc	r13, r1
   1406a:	51 f4       	brne	.+20     	; 0x14080 <dict_get_helper+0x7a>
   1406c:	12 30       	cpi	r17, 0x02	; 2
   1406e:	71 f4       	brne	.+28     	; 0x1408c <dict_get_helper+0x86>
   14070:	d7 01       	movw	r26, r14
   14072:	12 96       	adiw	r26, 0x02	; 2
   14074:	6d 91       	ld	r22, X+
   14076:	7c 91       	ld	r23, X
   14078:	13 97       	sbiw	r26, 0x03	; 3
   1407a:	88 e7       	ldi	r24, 0x78	; 120
   1407c:	90 e2       	ldi	r25, 0x20	; 32
   1407e:	80 df       	rcall	.-256    	; 0x13f80 <mp_raise_type_arg>
   14080:	d7 01       	movw	r26, r14
   14082:	14 96       	adiw	r26, 0x04	; 4
   14084:	8d 91       	ld	r24, X+
   14086:	9c 91       	ld	r25, X
   14088:	15 97       	sbiw	r26, 0x05	; 5
   1408a:	02 c0       	rjmp	.+4      	; 0x14090 <dict_get_helper+0x8a>
   1408c:	86 e0       	ldi	r24, 0x06	; 6
   1408e:	90 e0       	ldi	r25, 0x00	; 0
   14090:	11 30       	cpi	r17, 0x01	; 1
   14092:	39 f4       	brne	.+14     	; 0x140a2 <dict_get_helper+0x9c>
   14094:	93 83       	std	Z+3, r25	; 0x03
   14096:	82 83       	std	Z+2, r24	; 0x02
   14098:	04 c0       	rjmp	.+8      	; 0x140a2 <dict_get_helper+0x9c>
   1409a:	12 30       	cpi	r17, 0x02	; 2
   1409c:	11 f4       	brne	.+4      	; 0x140a2 <dict_get_helper+0x9c>
   1409e:	13 82       	std	Z+3, r1	; 0x03
   140a0:	12 82       	std	Z+2, r1	; 0x02
   140a2:	df 91       	pop	r29
   140a4:	cf 91       	pop	r28
   140a6:	1f 91       	pop	r17
   140a8:	ff 90       	pop	r15
   140aa:	ef 90       	pop	r14
   140ac:	df 90       	pop	r13
   140ae:	cf 90       	pop	r12
   140b0:	08 95       	ret

000140b2 <dict_setdefault>:
   140b2:	41 e0       	ldi	r20, 0x01	; 1
   140b4:	a8 cf       	rjmp	.-176    	; 0x14006 <dict_get_helper>
   140b6:	08 95       	ret

000140b8 <dict_pop>:
   140b8:	42 e0       	ldi	r20, 0x02	; 2
   140ba:	a5 cf       	rjmp	.-182    	; 0x14006 <dict_get_helper>
   140bc:	08 95       	ret

000140be <dict_get>:
   140be:	40 e0       	ldi	r20, 0x00	; 0
   140c0:	a2 cf       	rjmp	.-188    	; 0x14006 <dict_get_helper>
   140c2:	08 95       	ret

000140c4 <mp_obj_dict_delete>:
   140c4:	0f 93       	push	r16
   140c6:	1f 93       	push	r17
   140c8:	cf 93       	push	r28
   140ca:	df 93       	push	r29
   140cc:	00 d0       	rcall	.+0      	; 0x140ce <mp_obj_dict_delete+0xa>
   140ce:	00 d0       	rcall	.+0      	; 0x140d0 <mp_obj_dict_delete+0xc>
   140d0:	cd b7       	in	r28, 0x3d	; 61
   140d2:	de b7       	in	r29, 0x3e	; 62
   140d4:	8c 01       	movw	r16, r24
   140d6:	9a 83       	std	Y+2, r25	; 0x02
   140d8:	89 83       	std	Y+1, r24	; 0x01
   140da:	7c 83       	std	Y+4, r23	; 0x04
   140dc:	6b 83       	std	Y+3, r22	; 0x03
   140de:	42 e0       	ldi	r20, 0x02	; 2
   140e0:	be 01       	movw	r22, r28
   140e2:	6f 5f       	subi	r22, 0xFF	; 255
   140e4:	7f 4f       	sbci	r23, 0xFF	; 255
   140e6:	82 e0       	ldi	r24, 0x02	; 2
   140e8:	90 e0       	ldi	r25, 0x00	; 0
   140ea:	8d df       	rcall	.-230    	; 0x14006 <dict_get_helper>
   140ec:	c8 01       	movw	r24, r16
   140ee:	0f 90       	pop	r0
   140f0:	0f 90       	pop	r0
   140f2:	0f 90       	pop	r0
   140f4:	0f 90       	pop	r0
   140f6:	df 91       	pop	r29
   140f8:	cf 91       	pop	r28
   140fa:	1f 91       	pop	r17
   140fc:	0f 91       	pop	r16
   140fe:	08 95       	ret

00014100 <mp_delete_name>:
   14100:	88 0f       	add	r24, r24
   14102:	99 1f       	adc	r25, r25
   14104:	88 0f       	add	r24, r24
   14106:	99 1f       	adc	r25, r25
   14108:	88 0f       	add	r24, r24
   1410a:	99 1f       	adc	r25, r25
   1410c:	bc 01       	movw	r22, r24
   1410e:	62 60       	ori	r22, 0x02	; 2
   14110:	80 91 5e 6b 	lds	r24, 0x6B5E	; 0x806b5e <mp_state_ctx+0x4>
   14114:	90 91 5f 6b 	lds	r25, 0x6B5F	; 0x806b5f <mp_state_ctx+0x5>
   14118:	d5 cf       	rjmp	.-86     	; 0x140c4 <mp_obj_dict_delete>
   1411a:	08 95       	ret

0001411c <mp_delete_global>:
   1411c:	88 0f       	add	r24, r24
   1411e:	99 1f       	adc	r25, r25
   14120:	88 0f       	add	r24, r24
   14122:	99 1f       	adc	r25, r25
   14124:	88 0f       	add	r24, r24
   14126:	99 1f       	adc	r25, r25
   14128:	bc 01       	movw	r22, r24
   1412a:	62 60       	ori	r22, 0x02	; 2
   1412c:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
   14130:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
   14134:	c7 cf       	rjmp	.-114    	; 0x140c4 <mp_obj_dict_delete>
   14136:	08 95       	ret

00014138 <module_attr>:
   14138:	cf 93       	push	r28
   1413a:	df 93       	push	r29
   1413c:	ea 01       	movw	r28, r20
   1413e:	28 81       	ld	r18, Y
   14140:	39 81       	ldd	r19, Y+1	; 0x01
   14142:	23 2b       	or	r18, r19
   14144:	b1 f4       	brne	.+44     	; 0x14172 <module_attr+0x3a>
   14146:	66 0f       	add	r22, r22
   14148:	77 1f       	adc	r23, r23
   1414a:	66 0f       	add	r22, r22
   1414c:	77 1f       	adc	r23, r23
   1414e:	66 0f       	add	r22, r22
   14150:	77 1f       	adc	r23, r23
   14152:	62 60       	ori	r22, 0x02	; 2
   14154:	fc 01       	movw	r30, r24
   14156:	82 81       	ldd	r24, Z+2	; 0x02
   14158:	93 81       	ldd	r25, Z+3	; 0x03
   1415a:	40 e0       	ldi	r20, 0x00	; 0
   1415c:	02 96       	adiw	r24, 0x02	; 2
   1415e:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   14162:	00 97       	sbiw	r24, 0x00	; 0
   14164:	31 f1       	breq	.+76     	; 0x141b2 <module_attr+0x7a>
   14166:	fc 01       	movw	r30, r24
   14168:	82 81       	ldd	r24, Z+2	; 0x02
   1416a:	93 81       	ldd	r25, Z+3	; 0x03
   1416c:	99 83       	std	Y+1, r25	; 0x01
   1416e:	88 83       	st	Y, r24
   14170:	20 c0       	rjmp	.+64     	; 0x141b2 <module_attr+0x7a>
   14172:	fc 01       	movw	r30, r24
   14174:	82 81       	ldd	r24, Z+2	; 0x02
   14176:	93 81       	ldd	r25, Z+3	; 0x03
   14178:	fc 01       	movw	r30, r24
   1417a:	22 81       	ldd	r18, Z+2	; 0x02
   1417c:	21 fd       	sbrc	r18, 1
   1417e:	19 c0       	rjmp	.+50     	; 0x141b2 <module_attr+0x7a>
   14180:	4a 81       	ldd	r20, Y+2	; 0x02
   14182:	5b 81       	ldd	r21, Y+3	; 0x03
   14184:	41 15       	cp	r20, r1
   14186:	51 05       	cpc	r21, r1
   14188:	49 f4       	brne	.+18     	; 0x1419c <module_attr+0x64>
   1418a:	66 0f       	add	r22, r22
   1418c:	77 1f       	adc	r23, r23
   1418e:	66 0f       	add	r22, r22
   14190:	77 1f       	adc	r23, r23
   14192:	66 0f       	add	r22, r22
   14194:	77 1f       	adc	r23, r23
   14196:	62 60       	ori	r22, 0x02	; 2
   14198:	95 df       	rcall	.-214    	; 0x140c4 <mp_obj_dict_delete>
   1419a:	09 c0       	rjmp	.+18     	; 0x141ae <module_attr+0x76>
   1419c:	66 0f       	add	r22, r22
   1419e:	77 1f       	adc	r23, r23
   141a0:	66 0f       	add	r22, r22
   141a2:	77 1f       	adc	r23, r23
   141a4:	66 0f       	add	r22, r22
   141a6:	77 1f       	adc	r23, r23
   141a8:	62 60       	ori	r22, 0x02	; 2
   141aa:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
   141ae:	19 82       	std	Y+1, r1	; 0x01
   141b0:	18 82       	st	Y, r1
   141b2:	df 91       	pop	r29
   141b4:	cf 91       	pop	r28
   141b6:	08 95       	ret

000141b8 <dict_subscr>:
   141b8:	cf 93       	push	r28
   141ba:	df 93       	push	r29
   141bc:	eb 01       	movw	r28, r22
   141be:	41 15       	cp	r20, r1
   141c0:	51 05       	cpc	r21, r1
   141c2:	21 f4       	brne	.+8      	; 0x141cc <dict_subscr+0x14>
   141c4:	7f df       	rcall	.-258    	; 0x140c4 <mp_obj_dict_delete>
   141c6:	86 e0       	ldi	r24, 0x06	; 6
   141c8:	90 e0       	ldi	r25, 0x00	; 0
   141ca:	15 c0       	rjmp	.+42     	; 0x141f6 <dict_subscr+0x3e>
   141cc:	44 30       	cpi	r20, 0x04	; 4
   141ce:	51 05       	cpc	r21, r1
   141d0:	71 f4       	brne	.+28     	; 0x141ee <dict_subscr+0x36>
   141d2:	40 e0       	ldi	r20, 0x00	; 0
   141d4:	02 96       	adiw	r24, 0x02	; 2
   141d6:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   141da:	00 97       	sbiw	r24, 0x00	; 0
   141dc:	21 f4       	brne	.+8      	; 0x141e6 <dict_subscr+0x2e>
   141de:	be 01       	movw	r22, r28
   141e0:	88 e7       	ldi	r24, 0x78	; 120
   141e2:	90 e2       	ldi	r25, 0x20	; 32
   141e4:	cd de       	rcall	.-614    	; 0x13f80 <mp_raise_type_arg>
   141e6:	fc 01       	movw	r30, r24
   141e8:	82 81       	ldd	r24, Z+2	; 0x02
   141ea:	93 81       	ldd	r25, Z+3	; 0x03
   141ec:	04 c0       	rjmp	.+8      	; 0x141f6 <dict_subscr+0x3e>
   141ee:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
   141f2:	86 e0       	ldi	r24, 0x06	; 6
   141f4:	90 e0       	ldi	r25, 0x00	; 0
   141f6:	df 91       	pop	r29
   141f8:	cf 91       	pop	r28
   141fa:	08 95       	ret

000141fc <mp_obj_str_format_helper>:
   141fc:	2f 92       	push	r2
   141fe:	3f 92       	push	r3
   14200:	4f 92       	push	r4
   14202:	5f 92       	push	r5
   14204:	6f 92       	push	r6
   14206:	7f 92       	push	r7
   14208:	8f 92       	push	r8
   1420a:	9f 92       	push	r9
   1420c:	af 92       	push	r10
   1420e:	bf 92       	push	r11
   14210:	cf 92       	push	r12
   14212:	df 92       	push	r13
   14214:	ef 92       	push	r14
   14216:	ff 92       	push	r15
   14218:	0f 93       	push	r16
   1421a:	1f 93       	push	r17
   1421c:	cf 93       	push	r28
   1421e:	df 93       	push	r29
   14220:	cd b7       	in	r28, 0x3d	; 61
   14222:	de b7       	in	r29, 0x3e	; 62
   14224:	ab 97       	sbiw	r28, 0x2b	; 43
   14226:	0f b6       	in	r0, 0x3f	; 63
   14228:	f8 94       	cli
   1422a:	de bf       	out	0x3e, r29	; 62
   1422c:	0f be       	out	0x3f, r0	; 63
   1422e:	cd bf       	out	0x3d, r28	; 61
   14230:	6c 01       	movw	r12, r24
   14232:	1b 01       	movw	r2, r22
   14234:	59 a3       	std	Y+33, r21	; 0x21
   14236:	48 a3       	std	Y+32, r20	; 0x20
   14238:	3f a3       	std	Y+39, r19	; 0x27
   1423a:	2e a3       	std	Y+38, r18	; 0x26
   1423c:	1b a3       	std	Y+35, r17	; 0x23
   1423e:	0a a3       	std	Y+34, r16	; 0x22
   14240:	f9 a6       	std	Y+41, r15	; 0x29
   14242:	e8 a6       	std	Y+40, r14	; 0x28
   14244:	8e 01       	movw	r16, r28
   14246:	08 5f       	subi	r16, 0xF8	; 248
   14248:	1f 4f       	sbci	r17, 0xFF	; 255
   1424a:	60 e1       	ldi	r22, 0x10	; 16
   1424c:	70 e0       	ldi	r23, 0x00	; 0
   1424e:	c8 01       	movw	r24, r16
   14250:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
   14254:	18 8b       	std	Y+16, r17	; 0x10
   14256:	0f 87       	std	Y+15, r16	; 0x0f
   14258:	89 ea       	ldi	r24, 0xA9	; 169
   1425a:	9e e4       	ldi	r25, 0x4E	; 78
   1425c:	9a 8b       	std	Y+18, r25	; 0x12
   1425e:	89 8b       	std	Y+17, r24	; 0x11
   14260:	c2 14       	cp	r12, r2
   14262:	d3 04       	cpc	r13, r3
   14264:	08 f0       	brcs	.+2      	; 0x14268 <mp_obj_str_format_helper+0x6c>
   14266:	ad c3       	rjmp	.+1882   	; 0x149c2 <mp_obj_str_format_helper+0x7c6>
   14268:	2e a1       	ldd	r18, Y+38	; 0x26
   1426a:	3f a1       	ldd	r19, Y+39	; 0x27
   1426c:	21 50       	subi	r18, 0x01	; 1
   1426e:	31 09       	sbc	r19, r1
   14270:	3d a3       	std	Y+37, r19	; 0x25
   14272:	2c a3       	std	Y+36, r18	; 0x24
   14274:	3b a6       	std	Y+43, r3	; 0x2b
   14276:	2a a6       	std	Y+42, r2	; 0x2a
   14278:	f6 01       	movw	r30, r12
   1427a:	60 81       	ld	r22, Z
   1427c:	6d 37       	cpi	r22, 0x7D	; 125
   1427e:	89 f4       	brne	.+34     	; 0x142a2 <mp_obj_str_format_helper+0xa6>
   14280:	86 01       	movw	r16, r12
   14282:	0f 5f       	subi	r16, 0xFF	; 255
   14284:	1f 4f       	sbci	r17, 0xFF	; 255
   14286:	02 15       	cp	r16, r2
   14288:	13 05       	cpc	r17, r3
   1428a:	48 f4       	brcc	.+18     	; 0x1429e <mp_obj_str_format_helper+0xa2>
   1428c:	81 81       	ldd	r24, Z+1	; 0x01
   1428e:	8d 37       	cpi	r24, 0x7D	; 125
   14290:	31 f4       	brne	.+12     	; 0x1429e <mp_obj_str_format_helper+0xa2>
   14292:	ce 01       	movw	r24, r28
   14294:	08 96       	adiw	r24, 0x08	; 8
   14296:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <vstr_add_byte>
   1429a:	68 01       	movw	r12, r16
   1429c:	ea c2       	rjmp	.+1492   	; 0x14872 <mp_obj_str_format_helper+0x676>
   1429e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   142a2:	6b 37       	cpi	r22, 0x7B	; 123
   142a4:	29 f0       	breq	.+10     	; 0x142b0 <mp_obj_str_format_helper+0xb4>
   142a6:	ce 01       	movw	r24, r28
   142a8:	08 96       	adiw	r24, 0x08	; 8
   142aa:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <vstr_add_byte>
   142ae:	e1 c2       	rjmp	.+1474   	; 0x14872 <mp_obj_str_format_helper+0x676>
   142b0:	26 01       	movw	r4, r12
   142b2:	ff ef       	ldi	r31, 0xFF	; 255
   142b4:	4f 1a       	sub	r4, r31
   142b6:	5f 0a       	sbc	r5, r31
   142b8:	42 14       	cp	r4, r2
   142ba:	53 04       	cpc	r5, r3
   142bc:	08 f0       	brcs	.+2      	; 0x142c0 <mp_obj_str_format_helper+0xc4>
   142be:	67 c0       	rjmp	.+206    	; 0x1438e <mp_obj_str_format_helper+0x192>
   142c0:	f6 01       	movw	r30, r12
   142c2:	81 81       	ldd	r24, Z+1	; 0x01
   142c4:	8b 37       	cpi	r24, 0x7B	; 123
   142c6:	39 f4       	brne	.+14     	; 0x142d6 <mp_obj_str_format_helper+0xda>
   142c8:	6b e7       	ldi	r22, 0x7B	; 123
   142ca:	ce 01       	movw	r24, r28
   142cc:	08 96       	adiw	r24, 0x08	; 8
   142ce:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <vstr_add_byte>
   142d2:	62 01       	movw	r12, r4
   142d4:	ce c2       	rjmp	.+1436   	; 0x14872 <mp_obj_str_format_helper+0x676>
   142d6:	8d 37       	cpi	r24, 0x7D	; 125
   142d8:	09 f4       	brne	.+2      	; 0x142dc <mp_obj_str_format_helper+0xe0>
   142da:	d3 c2       	rjmp	.+1446   	; 0x14882 <mp_obj_str_format_helper+0x686>
   142dc:	81 32       	cpi	r24, 0x21	; 33
   142de:	09 f4       	brne	.+2      	; 0x142e2 <mp_obj_str_format_helper+0xe6>
   142e0:	d5 c2       	rjmp	.+1450   	; 0x1488c <mp_obj_str_format_helper+0x690>
   142e2:	8a 33       	cpi	r24, 0x3A	; 58
   142e4:	09 f4       	brne	.+2      	; 0x142e8 <mp_obj_str_format_helper+0xec>
   142e6:	d7 c2       	rjmp	.+1454   	; 0x14896 <mp_obj_str_format_helper+0x69a>
   142e8:	f6 01       	movw	r30, r12
   142ea:	32 96       	adiw	r30, 0x02	; 2
   142ec:	2a a5       	ldd	r18, Y+42	; 0x2a
   142ee:	3b a5       	ldd	r19, Y+43	; 0x2b
   142f0:	8f 01       	movw	r16, r30
   142f2:	e2 17       	cp	r30, r18
   142f4:	f3 07       	cpc	r31, r19
   142f6:	e9 f0       	breq	.+58     	; 0x14332 <mp_obj_str_format_helper+0x136>
   142f8:	81 91       	ld	r24, Z+
   142fa:	8d 37       	cpi	r24, 0x7D	; 125
   142fc:	09 f4       	brne	.+2      	; 0x14300 <mp_obj_str_format_helper+0x104>
   142fe:	d0 c2       	rjmp	.+1440   	; 0x148a0 <mp_obj_str_format_helper+0x6a4>
   14300:	81 32       	cpi	r24, 0x21	; 33
   14302:	09 f4       	brne	.+2      	; 0x14306 <mp_obj_str_format_helper+0x10a>
   14304:	d0 c2       	rjmp	.+1440   	; 0x148a6 <mp_obj_str_format_helper+0x6aa>
   14306:	8a 33       	cpi	r24, 0x3A	; 58
   14308:	99 f7       	brne	.-26     	; 0x142f0 <mp_obj_str_format_helper+0xf4>
   1430a:	72 01       	movw	r14, r4
   1430c:	28 01       	movw	r4, r16
   1430e:	cd c2       	rjmp	.+1434   	; 0x148aa <mp_obj_str_format_helper+0x6ae>
   14310:	c2 01       	movw	r24, r4
   14312:	01 96       	adiw	r24, 0x01	; 1
   14314:	82 15       	cp	r24, r2
   14316:	93 05       	cpc	r25, r3
   14318:	50 f4       	brcc	.+20     	; 0x1432e <mp_obj_str_format_helper+0x132>
   1431a:	f2 01       	movw	r30, r4
   1431c:	b1 80       	ldd	r11, Z+1	; 0x01
   1431e:	8e e8       	ldi	r24, 0x8E	; 142
   14320:	8b 0d       	add	r24, r11
   14322:	82 30       	cpi	r24, 0x02	; 2
   14324:	20 f4       	brcc	.+8      	; 0x1432e <mp_obj_str_format_helper+0x132>
   14326:	f2 e0       	ldi	r31, 0x02	; 2
   14328:	4f 0e       	add	r4, r31
   1432a:	51 1c       	adc	r5, r1
   1432c:	05 c0       	rjmp	.+10     	; 0x14338 <mp_obj_str_format_helper+0x13c>
   1432e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   14332:	72 01       	movw	r14, r4
   14334:	2f 01       	movw	r4, r30
   14336:	b1 2c       	mov	r11, r1
   14338:	42 14       	cp	r4, r2
   1433a:	53 04       	cpc	r5, r3
   1433c:	40 f5       	brcc	.+80     	; 0x1438e <mp_obj_str_format_helper+0x192>
   1433e:	f2 01       	movw	r30, r4
   14340:	80 81       	ld	r24, Z
   14342:	8a 33       	cpi	r24, 0x3A	; 58
   14344:	39 f5       	brne	.+78     	; 0x14394 <mp_obj_str_format_helper+0x198>
   14346:	62 01       	movw	r12, r4
   14348:	ff ef       	ldi	r31, 0xFF	; 255
   1434a:	cf 1a       	sub	r12, r31
   1434c:	df 0a       	sbc	r13, r31
   1434e:	f2 01       	movw	r30, r4
   14350:	81 81       	ldd	r24, Z+1	; 0x01
   14352:	8d 37       	cpi	r24, 0x7D	; 125
   14354:	c9 f0       	breq	.+50     	; 0x14388 <mp_obj_str_format_helper+0x18c>
   14356:	c2 14       	cp	r12, r2
   14358:	d3 04       	cpc	r13, r3
   1435a:	c8 f4       	brcc	.+50     	; 0x1438e <mp_obj_str_format_helper+0x192>
   1435c:	f6 01       	movw	r30, r12
   1435e:	21 e0       	ldi	r18, 0x01	; 1
   14360:	30 e0       	ldi	r19, 0x00	; 0
   14362:	4a a5       	ldd	r20, Y+42	; 0x2a
   14364:	5b a5       	ldd	r21, Y+43	; 0x2b
   14366:	2f 01       	movw	r4, r30
   14368:	81 91       	ld	r24, Z+
   1436a:	8b 37       	cpi	r24, 0x7B	; 123
   1436c:	19 f4       	brne	.+6      	; 0x14374 <mp_obj_str_format_helper+0x178>
   1436e:	2f 5f       	subi	r18, 0xFF	; 255
   14370:	3f 4f       	sbci	r19, 0xFF	; 255
   14372:	06 c0       	rjmp	.+12     	; 0x14380 <mp_obj_str_format_helper+0x184>
   14374:	8d 37       	cpi	r24, 0x7D	; 125
   14376:	21 f4       	brne	.+8      	; 0x14380 <mp_obj_str_format_helper+0x184>
   14378:	21 50       	subi	r18, 0x01	; 1
   1437a:	31 09       	sbc	r19, r1
   1437c:	09 f4       	brne	.+2      	; 0x14380 <mp_obj_str_format_helper+0x184>
   1437e:	9c c2       	rjmp	.+1336   	; 0x148b8 <mp_obj_str_format_helper+0x6bc>
   14380:	e4 17       	cp	r30, r20
   14382:	f5 07       	cpc	r31, r21
   14384:	81 f7       	brne	.-32     	; 0x14366 <mp_obj_str_format_helper+0x16a>
   14386:	03 c0       	rjmp	.+6      	; 0x1438e <mp_obj_str_format_helper+0x192>
   14388:	c2 14       	cp	r12, r2
   1438a:	d3 04       	cpc	r13, r3
   1438c:	10 f0       	brcs	.+4      	; 0x14392 <mp_obj_str_format_helper+0x196>
   1438e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   14392:	26 01       	movw	r4, r12
   14394:	f2 01       	movw	r30, r4
   14396:	80 81       	ld	r24, Z
   14398:	8d 37       	cpi	r24, 0x7D	; 125
   1439a:	11 f0       	breq	.+4      	; 0x143a0 <mp_obj_str_format_helper+0x1a4>
   1439c:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   143a0:	c1 2c       	mov	r12, r1
   143a2:	d1 2c       	mov	r13, r1
   143a4:	e1 14       	cp	r14, r1
   143a6:	f1 04       	cpc	r15, r1
   143a8:	09 f4       	brne	.+2      	; 0x143ac <mp_obj_str_format_helper+0x1b0>
   143aa:	73 c0       	rjmp	.+230    	; 0x14492 <mp_obj_str_format_helper+0x296>
   143ac:	1b 8a       	std	Y+19, r1	; 0x13
   143ae:	1c 8a       	std	Y+20, r1	; 0x14
   143b0:	f7 01       	movw	r30, r14
   143b2:	90 80       	ld	r9, Z
   143b4:	89 2d       	mov	r24, r9
   143b6:	90 e0       	ldi	r25, 0x00	; 0
   143b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <unichar_isdigit>
   143bc:	81 11       	cpse	r24, r1
   143be:	0d c0       	rjmp	.+26     	; 0x143da <mp_obj_str_format_helper+0x1de>
   143c0:	e0 16       	cp	r14, r16
   143c2:	f1 06       	cpc	r15, r17
   143c4:	08 f0       	brcs	.+2      	; 0x143c8 <mp_obj_str_format_helper+0x1cc>
   143c6:	45 c0       	rjmp	.+138    	; 0x14452 <mp_obj_str_format_helper+0x256>
   143c8:	fe e2       	ldi	r31, 0x2E	; 46
   143ca:	9f 16       	cp	r9, r31
   143cc:	09 f4       	brne	.+2      	; 0x143d0 <mp_obj_str_format_helper+0x1d4>
   143ce:	43 c0       	rjmp	.+134    	; 0x14456 <mp_obj_str_format_helper+0x25a>
   143d0:	2b e5       	ldi	r18, 0x5B	; 91
   143d2:	92 12       	cpse	r9, r18
   143d4:	31 c0       	rjmp	.+98     	; 0x14438 <mp_obj_str_format_helper+0x23c>
   143d6:	47 01       	movw	r8, r14
   143d8:	3f c0       	rjmp	.+126    	; 0x14458 <mp_obj_str_format_helper+0x25c>
   143da:	e8 a1       	ldd	r30, Y+32	; 0x20
   143dc:	f9 a1       	ldd	r31, Y+33	; 0x21
   143de:	80 81       	ld	r24, Z
   143e0:	91 81       	ldd	r25, Z+1	; 0x01
   143e2:	18 16       	cp	r1, r24
   143e4:	19 06       	cpc	r1, r25
   143e6:	14 f4       	brge	.+4      	; 0x143ec <mp_obj_str_format_helper+0x1f0>
   143e8:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   143ec:	ae 01       	movw	r20, r28
   143ee:	4d 5e       	subi	r20, 0xED	; 237
   143f0:	5f 4f       	sbci	r21, 0xFF	; 255
   143f2:	b8 01       	movw	r22, r16
   143f4:	c7 01       	movw	r24, r14
   143f6:	0e 94 1d 03 	call	0x63a	; 0x63a <str_to_int>
   143fa:	4c 01       	movw	r8, r24
   143fc:	8b 89       	ldd	r24, Y+19	; 0x13
   143fe:	9c 89       	ldd	r25, Y+20	; 0x14
   14400:	2c a1       	ldd	r18, Y+36	; 0x24
   14402:	3d a1       	ldd	r19, Y+37	; 0x25
   14404:	82 17       	cp	r24, r18
   14406:	93 07       	cpc	r25, r19
   14408:	30 f0       	brcs	.+12     	; 0x14416 <mp_obj_str_format_helper+0x21a>
   1440a:	6d ee       	ldi	r22, 0xED	; 237
   1440c:	7c e0       	ldi	r23, 0x0C	; 12
   1440e:	88 e9       	ldi	r24, 0x98	; 152
   14410:	90 e2       	ldi	r25, 0x20	; 32
   14412:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   14416:	fc 01       	movw	r30, r24
   14418:	31 96       	adiw	r30, 0x01	; 1
   1441a:	ee 0f       	add	r30, r30
   1441c:	ff 1f       	adc	r31, r31
   1441e:	8a a1       	ldd	r24, Y+34	; 0x22
   14420:	9b a1       	ldd	r25, Y+35	; 0x23
   14422:	e8 0f       	add	r30, r24
   14424:	f9 1f       	adc	r31, r25
   14426:	60 80       	ld	r6, Z
   14428:	71 80       	ldd	r7, Z+1	; 0x01
   1442a:	2f ef       	ldi	r18, 0xFF	; 255
   1442c:	3f ef       	ldi	r19, 0xFF	; 255
   1442e:	e8 a1       	ldd	r30, Y+32	; 0x20
   14430:	f9 a1       	ldd	r31, Y+33	; 0x21
   14432:	31 83       	std	Z+1, r19	; 0x01
   14434:	20 83       	st	Z, r18
   14436:	26 c0       	rjmp	.+76     	; 0x14484 <mp_obj_str_format_helper+0x288>
   14438:	f7 01       	movw	r30, r14
   1443a:	31 96       	adiw	r30, 0x01	; 1
   1443c:	98 01       	movw	r18, r16
   1443e:	4f 01       	movw	r8, r30
   14440:	2e 17       	cp	r18, r30
   14442:	3f 07       	cpc	r19, r31
   14444:	49 f0       	breq	.+18     	; 0x14458 <mp_obj_str_format_helper+0x25c>
   14446:	81 91       	ld	r24, Z+
   14448:	8e 32       	cpi	r24, 0x2E	; 46
   1444a:	31 f0       	breq	.+12     	; 0x14458 <mp_obj_str_format_helper+0x25c>
   1444c:	8b 35       	cpi	r24, 0x5B	; 91
   1444e:	b9 f7       	brne	.-18     	; 0x1443e <mp_obj_str_format_helper+0x242>
   14450:	03 c0       	rjmp	.+6      	; 0x14458 <mp_obj_str_format_helper+0x25c>
   14452:	47 01       	movw	r8, r14
   14454:	01 c0       	rjmp	.+2      	; 0x14458 <mp_obj_str_format_helper+0x25c>
   14456:	47 01       	movw	r8, r14
   14458:	b4 01       	movw	r22, r8
   1445a:	6e 19       	sub	r22, r14
   1445c:	7f 09       	sbc	r23, r15
   1445e:	c7 01       	movw	r24, r14
   14460:	0e 94 ff 80 	call	0x101fe	; 0x101fe <mp_obj_new_str_via_qstr>
   14464:	3c 01       	movw	r6, r24
   14466:	40 e0       	ldi	r20, 0x00	; 0
   14468:	bc 01       	movw	r22, r24
   1446a:	88 a5       	ldd	r24, Y+40	; 0x28
   1446c:	99 a5       	ldd	r25, Y+41	; 0x29
   1446e:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   14472:	00 97       	sbiw	r24, 0x00	; 0
   14474:	21 f4       	brne	.+8      	; 0x1447e <mp_obj_str_format_helper+0x282>
   14476:	b3 01       	movw	r22, r6
   14478:	88 e7       	ldi	r24, 0x78	; 120
   1447a:	90 e2       	ldi	r25, 0x20	; 32
   1447c:	81 dd       	rcall	.-1278   	; 0x13f80 <mp_raise_type_arg>
   1447e:	fc 01       	movw	r30, r24
   14480:	62 80       	ldd	r6, Z+2	; 0x02
   14482:	73 80       	ldd	r7, Z+3	; 0x03
   14484:	80 16       	cp	r8, r16
   14486:	91 06       	cpc	r9, r17
   14488:	30 f5       	brcc	.+76     	; 0x144d6 <mp_obj_str_format_helper+0x2da>
   1448a:	86 e0       	ldi	r24, 0x06	; 6
   1448c:	9d e0       	ldi	r25, 0x0D	; 13
   1448e:	0e 94 ce 2a 	call	0x559c	; 0x559c <mp_raise_NotImplementedError>
   14492:	e8 a1       	ldd	r30, Y+32	; 0x20
   14494:	f9 a1       	ldd	r31, Y+33	; 0x21
   14496:	80 81       	ld	r24, Z
   14498:	91 81       	ldd	r25, Z+1	; 0x01
   1449a:	99 23       	and	r25, r25
   1449c:	14 f4       	brge	.+4      	; 0x144a2 <mp_obj_str_format_helper+0x2a6>
   1449e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   144a2:	2c a1       	ldd	r18, Y+36	; 0x24
   144a4:	3d a1       	ldd	r19, Y+37	; 0x25
   144a6:	82 17       	cp	r24, r18
   144a8:	93 07       	cpc	r25, r19
   144aa:	30 f0       	brcs	.+12     	; 0x144b8 <mp_obj_str_format_helper+0x2bc>
   144ac:	6d ee       	ldi	r22, 0xED	; 237
   144ae:	7c e0       	ldi	r23, 0x0C	; 12
   144b0:	88 e9       	ldi	r24, 0x98	; 152
   144b2:	90 e2       	ldi	r25, 0x20	; 32
   144b4:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
   144b8:	fc 01       	movw	r30, r24
   144ba:	31 96       	adiw	r30, 0x01	; 1
   144bc:	ee 0f       	add	r30, r30
   144be:	ff 1f       	adc	r31, r31
   144c0:	2a a1       	ldd	r18, Y+34	; 0x22
   144c2:	3b a1       	ldd	r19, Y+35	; 0x23
   144c4:	e2 0f       	add	r30, r18
   144c6:	f3 1f       	adc	r31, r19
   144c8:	60 80       	ld	r6, Z
   144ca:	71 80       	ldd	r7, Z+1	; 0x01
   144cc:	01 96       	adiw	r24, 0x01	; 1
   144ce:	e8 a1       	ldd	r30, Y+32	; 0x20
   144d0:	f9 a1       	ldd	r31, Y+33	; 0x21
   144d2:	91 83       	std	Z+1, r25	; 0x01
   144d4:	80 83       	st	Z, r24
   144d6:	c1 14       	cp	r12, r1
   144d8:	d1 04       	cpc	r13, r1
   144da:	09 f0       	breq	.+2      	; 0x144de <mp_obj_str_format_helper+0x2e2>
   144dc:	f9 c1       	rjmp	.+1010   	; 0x148d0 <mp_obj_str_format_helper+0x6d4>
   144de:	bb 20       	and	r11, r11
   144e0:	09 f4       	brne	.+2      	; 0x144e4 <mp_obj_str_format_helper+0x2e8>
   144e2:	32 c2       	rjmp	.+1124   	; 0x14948 <mp_obj_str_format_helper+0x74c>
   144e4:	f3 e7       	ldi	r31, 0x73	; 115
   144e6:	bf 16       	cp	r11, r31
   144e8:	29 f0       	breq	.+10     	; 0x144f4 <mp_obj_str_format_helper+0x2f8>
   144ea:	22 e7       	ldi	r18, 0x72	; 114
   144ec:	b2 16       	cp	r11, r18
   144ee:	21 f0       	breq	.+8      	; 0x144f8 <mp_obj_str_format_helper+0x2fc>
   144f0:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   144f4:	10 e0       	ldi	r17, 0x00	; 0
   144f6:	01 c0       	rjmp	.+2      	; 0x144fa <mp_obj_str_format_helper+0x2fe>
   144f8:	11 e0       	ldi	r17, 0x01	; 1
   144fa:	60 e1       	ldi	r22, 0x10	; 16
   144fc:	70 e0       	ldi	r23, 0x00	; 0
   144fe:	ce 01       	movw	r24, r28
   14500:	43 96       	adiw	r24, 0x13	; 19
   14502:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
   14506:	83 e1       	ldi	r24, 0x13	; 19
   14508:	90 e0       	ldi	r25, 0x00	; 0
   1450a:	8c 0f       	add	r24, r28
   1450c:	9d 1f       	adc	r25, r29
   1450e:	9b 8f       	std	Y+27, r25	; 0x1b
   14510:	8a 8f       	std	Y+26, r24	; 0x1a
   14512:	e9 ea       	ldi	r30, 0xA9	; 169
   14514:	fe e4       	ldi	r31, 0x4E	; 78
   14516:	fd 8f       	std	Y+29, r31	; 0x1d
   14518:	ec 8f       	std	Y+28, r30	; 0x1c
   1451a:	41 2f       	mov	r20, r17
   1451c:	b3 01       	movw	r22, r6
   1451e:	07 96       	adiw	r24, 0x07	; 7
   14520:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
   14524:	be 01       	movw	r22, r28
   14526:	6d 5e       	subi	r22, 0xED	; 237
   14528:	7f 4f       	sbci	r23, 0xFF	; 255
   1452a:	82 e1       	ldi	r24, 0x12	; 18
   1452c:	9b e1       	ldi	r25, 0x1B	; 27
   1452e:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   14532:	3c 01       	movw	r6, r24
   14534:	2f ef       	ldi	r18, 0xFF	; 255
   14536:	3f ef       	ldi	r19, 0xFF	; 255
   14538:	3f 8f       	std	Y+31, r19	; 0x1f
   1453a:	2e 8f       	std	Y+30, r18	; 0x1e
   1453c:	3b 8f       	std	Y+27, r19	; 0x1b
   1453e:	2a 8f       	std	Y+26, r18	; 0x1a
   14540:	c1 14       	cp	r12, r1
   14542:	d1 04       	cpc	r13, r1
   14544:	09 f4       	brne	.+2      	; 0x14548 <mp_obj_str_format_helper+0x34c>
   14546:	29 c2       	rjmp	.+1106   	; 0x1499a <mp_obj_str_format_helper+0x79e>
   14548:	e8 a4       	ldd	r14, Y+40	; 0x28
   1454a:	f9 a4       	ldd	r15, Y+41	; 0x29
   1454c:	0a a1       	ldd	r16, Y+34	; 0x22
   1454e:	1b a1       	ldd	r17, Y+35	; 0x23
   14550:	2e a1       	ldd	r18, Y+38	; 0x26
   14552:	3f a1       	ldd	r19, Y+39	; 0x27
   14554:	48 a1       	ldd	r20, Y+32	; 0x20
   14556:	59 a1       	ldd	r21, Y+33	; 0x21
   14558:	b2 01       	movw	r22, r4
   1455a:	c6 01       	movw	r24, r12
   1455c:	4f de       	rcall	.-866    	; 0x141fc <mp_obj_str_format_helper>
   1455e:	2b 8b       	std	Y+19, r18	; 0x13
   14560:	3c 8b       	std	Y+20, r19	; 0x14
   14562:	4d 8b       	std	Y+21, r20	; 0x15
   14564:	5e 8b       	std	Y+22, r21	; 0x16
   14566:	6f 8b       	std	Y+23, r22	; 0x17
   14568:	78 8f       	std	Y+24, r23	; 0x18
   1456a:	89 8f       	std	Y+25, r24	; 0x19
   1456c:	ce 01       	movw	r24, r28
   1456e:	43 96       	adiw	r24, 0x13	; 19
   14570:	0e 94 46 4e 	call	0x9c8c	; 0x9c8c <vstr_null_terminated_str>
   14574:	7c 01       	movw	r14, r24
   14576:	cd 88       	ldd	r12, Y+21	; 0x15
   14578:	de 88       	ldd	r13, Y+22	; 0x16
   1457a:	c8 0e       	add	r12, r24
   1457c:	d9 1e       	adc	r13, r25
   1457e:	fc 01       	movw	r30, r24
   14580:	00 81       	ld	r16, Z
   14582:	00 23       	and	r16, r16
   14584:	f1 f1       	breq	.+124    	; 0x14602 <mp_obj_str_format_helper+0x406>
   14586:	60 2f       	mov	r22, r16
   14588:	70 e0       	ldi	r23, 0x00	; 0
   1458a:	83 e2       	ldi	r24, 0x23	; 35
   1458c:	9d e0       	ldi	r25, 0x0D	; 13
   1458e:	0e 94 b3 c2 	call	0x18566	; 0x18566 <strchr>
   14592:	89 2b       	or	r24, r25
   14594:	09 f0       	breq	.+2      	; 0x14598 <mp_obj_str_format_helper+0x39c>
   14596:	9f c1       	rjmp	.+830    	; 0x148d6 <mp_obj_str_format_helper+0x6da>
   14598:	f7 01       	movw	r30, r14
   1459a:	b1 80       	ldd	r11, Z+1	; 0x01
   1459c:	bb 20       	and	r11, r11
   1459e:	61 f0       	breq	.+24     	; 0x145b8 <mp_obj_str_format_helper+0x3bc>
   145a0:	6b 2d       	mov	r22, r11
   145a2:	70 e0       	ldi	r23, 0x00	; 0
   145a4:	83 e2       	ldi	r24, 0x23	; 35
   145a6:	9d e0       	ldi	r25, 0x0D	; 13
   145a8:	0e 94 b3 c2 	call	0x18566	; 0x18566 <strchr>
   145ac:	89 2b       	or	r24, r25
   145ae:	09 f0       	breq	.+2      	; 0x145b2 <mp_obj_str_format_helper+0x3b6>
   145b0:	98 c1       	rjmp	.+816    	; 0x148e2 <mp_obj_str_format_helper+0x6e6>
   145b2:	b1 2c       	mov	r11, r1
   145b4:	00 e0       	ldi	r16, 0x00	; 0
   145b6:	01 c0       	rjmp	.+2      	; 0x145ba <mp_obj_str_format_helper+0x3be>
   145b8:	0b 2d       	mov	r16, r11
   145ba:	f7 01       	movw	r30, r14
   145bc:	80 81       	ld	r24, Z
   145be:	8b 32       	cpi	r24, 0x2B	; 43
   145c0:	49 f0       	breq	.+18     	; 0x145d4 <mp_obj_str_format_helper+0x3d8>
   145c2:	8d 32       	cpi	r24, 0x2D	; 45
   145c4:	61 f0       	breq	.+24     	; 0x145de <mp_obj_str_format_helper+0x3e2>
   145c6:	80 32       	cpi	r24, 0x20	; 32
   145c8:	81 f4       	brne	.+32     	; 0x145ea <mp_obj_str_format_helper+0x3ee>
   145ca:	68 94       	set
   145cc:	88 24       	eor	r8, r8
   145ce:	82 f8       	bld	r8, 2
   145d0:	91 2c       	mov	r9, r1
   145d2:	07 c0       	rjmp	.+14     	; 0x145e2 <mp_obj_str_format_helper+0x3e6>
   145d4:	68 94       	set
   145d6:	88 24       	eor	r8, r8
   145d8:	81 f8       	bld	r8, 1
   145da:	91 2c       	mov	r9, r1
   145dc:	02 c0       	rjmp	.+4      	; 0x145e2 <mp_obj_str_format_helper+0x3e6>
   145de:	81 2c       	mov	r8, r1
   145e0:	91 2c       	mov	r9, r1
   145e2:	ff ef       	ldi	r31, 0xFF	; 255
   145e4:	ef 1a       	sub	r14, r31
   145e6:	ff 0a       	sbc	r15, r31
   145e8:	02 c0       	rjmp	.+4      	; 0x145ee <mp_obj_str_format_helper+0x3f2>
   145ea:	81 2c       	mov	r8, r1
   145ec:	91 2c       	mov	r9, r1
   145ee:	f7 01       	movw	r30, r14
   145f0:	80 81       	ld	r24, Z
   145f2:	83 32       	cpi	r24, 0x23	; 35
   145f4:	49 f4       	brne	.+18     	; 0x14608 <mp_obj_str_format_helper+0x40c>
   145f6:	68 94       	set
   145f8:	84 f8       	bld	r8, 4
   145fa:	ff ef       	ldi	r31, 0xFF	; 255
   145fc:	ef 1a       	sub	r14, r31
   145fe:	ff 0a       	sbc	r15, r31
   14600:	03 c0       	rjmp	.+6      	; 0x14608 <mp_obj_str_format_helper+0x40c>
   14602:	b0 2e       	mov	r11, r16
   14604:	81 2c       	mov	r8, r1
   14606:	91 2c       	mov	r9, r1
   14608:	f7 01       	movw	r30, r14
   1460a:	80 81       	ld	r24, Z
   1460c:	80 33       	cpi	r24, 0x30	; 48
   1460e:	49 f4       	brne	.+18     	; 0x14622 <mp_obj_str_format_helper+0x426>
   14610:	b1 10       	cpse	r11, r1
   14612:	04 c0       	rjmp	.+8      	; 0x1461c <mp_obj_str_format_helper+0x420>
   14614:	0f 2e       	mov	r0, r31
   14616:	fd e3       	ldi	r31, 0x3D	; 61
   14618:	bf 2e       	mov	r11, r31
   1461a:	f0 2d       	mov	r31, r0
   1461c:	01 11       	cpse	r16, r1
   1461e:	01 c0       	rjmp	.+2      	; 0x14622 <mp_obj_str_format_helper+0x426>
   14620:	00 e3       	ldi	r16, 0x30	; 48
   14622:	ae 01       	movw	r20, r28
   14624:	42 5e       	subi	r20, 0xE2	; 226
   14626:	5f 4f       	sbci	r21, 0xFF	; 255
   14628:	b6 01       	movw	r22, r12
   1462a:	c7 01       	movw	r24, r14
   1462c:	0e 94 1d 03 	call	0x63a	; 0x63a <str_to_int>
   14630:	7c 01       	movw	r14, r24
   14632:	fc 01       	movw	r30, r24
   14634:	80 81       	ld	r24, Z
   14636:	8c 32       	cpi	r24, 0x2C	; 44
   14638:	29 f4       	brne	.+10     	; 0x14644 <mp_obj_str_format_helper+0x448>
   1463a:	68 94       	set
   1463c:	85 f8       	bld	r8, 5
   1463e:	ff ef       	ldi	r31, 0xFF	; 255
   14640:	ef 1a       	sub	r14, r31
   14642:	ff 0a       	sbc	r15, r31
   14644:	f7 01       	movw	r30, r14
   14646:	80 81       	ld	r24, Z
   14648:	8e 32       	cpi	r24, 0x2E	; 46
   1464a:	49 f4       	brne	.+18     	; 0x1465e <mp_obj_str_format_helper+0x462>
   1464c:	ae 01       	movw	r20, r28
   1464e:	46 5e       	subi	r20, 0xE6	; 230
   14650:	5f 4f       	sbci	r21, 0xFF	; 255
   14652:	b6 01       	movw	r22, r12
   14654:	c7 01       	movw	r24, r14
   14656:	01 96       	adiw	r24, 0x01	; 1
   14658:	0e 94 1d 03 	call	0x63a	; 0x63a <str_to_int>
   1465c:	7c 01       	movw	r14, r24
   1465e:	f7 01       	movw	r30, r14
   14660:	10 81       	ld	r17, Z
   14662:	11 23       	and	r17, r17
   14664:	59 f0       	breq	.+22     	; 0x1467c <mp_obj_str_format_helper+0x480>
   14666:	61 2f       	mov	r22, r17
   14668:	70 e0       	ldi	r23, 0x00	; 0
   1466a:	88 e2       	ldi	r24, 0x28	; 40
   1466c:	9d e0       	ldi	r25, 0x0D	; 13
   1466e:	0e 94 b3 c2 	call	0x18566	; 0x18566 <strchr>
   14672:	89 2b       	or	r24, r25
   14674:	09 f0       	breq	.+2      	; 0x14678 <mp_obj_str_format_helper+0x47c>
   14676:	39 c1       	rjmp	.+626    	; 0x148ea <mp_obj_str_format_helper+0x6ee>
   14678:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   1467c:	ce 01       	movw	r24, r28
   1467e:	43 96       	adiw	r24, 0x13	; 19
   14680:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vstr_clear>
   14684:	b1 10       	cpse	r11, r1
   14686:	0e c0       	rjmp	.+28     	; 0x146a4 <mp_obj_str_format_helper+0x4a8>
   14688:	c3 01       	movw	r24, r6
   1468a:	0e 94 4b 03 	call	0x696	; 0x696 <arg_looks_integer>
   1468e:	81 11       	cpse	r24, r1
   14690:	05 c0       	rjmp	.+10     	; 0x1469c <mp_obj_str_format_helper+0x4a0>
   14692:	0f 2e       	mov	r0, r31
   14694:	fc e3       	ldi	r31, 0x3C	; 60
   14696:	bf 2e       	mov	r11, r31
   14698:	f0 2d       	mov	r31, r0
   1469a:	04 c0       	rjmp	.+8      	; 0x146a4 <mp_obj_str_format_helper+0x4a8>
   1469c:	0f 2e       	mov	r0, r31
   1469e:	fe e3       	ldi	r31, 0x3E	; 62
   146a0:	bf 2e       	mov	r11, r31
   146a2:	f0 2d       	mov	r31, r0
   146a4:	01 11       	cpse	r16, r1
   146a6:	0a c0       	rjmp	.+20     	; 0x146bc <mp_obj_str_format_helper+0x4c0>
   146a8:	00 e2       	ldi	r16, 0x20	; 32
   146aa:	08 c0       	rjmp	.+16     	; 0x146bc <mp_obj_str_format_helper+0x4c0>
   146ac:	81 2c       	mov	r8, r1
   146ae:	91 2c       	mov	r9, r1
   146b0:	10 e0       	ldi	r17, 0x00	; 0
   146b2:	0f 2e       	mov	r0, r31
   146b4:	fe e3       	ldi	r31, 0x3E	; 62
   146b6:	bf 2e       	mov	r11, r31
   146b8:	f0 2d       	mov	r31, r0
   146ba:	00 e2       	ldi	r16, 0x20	; 32
   146bc:	c4 01       	movw	r24, r8
   146be:	86 70       	andi	r24, 0x06	; 6
   146c0:	99 27       	eor	r25, r25
   146c2:	89 2b       	or	r24, r25
   146c4:	41 f0       	breq	.+16     	; 0x146d6 <mp_obj_str_format_helper+0x4da>
   146c6:	13 37       	cpi	r17, 0x73	; 115
   146c8:	11 f4       	brne	.+4      	; 0x146ce <mp_obj_str_format_helper+0x4d2>
   146ca:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   146ce:	13 36       	cpi	r17, 0x63	; 99
   146d0:	11 f4       	brne	.+4      	; 0x146d6 <mp_obj_str_format_helper+0x4da>
   146d2:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   146d6:	fd e3       	ldi	r31, 0x3D	; 61
   146d8:	bf 16       	cp	r11, r31
   146da:	49 f0       	breq	.+18     	; 0x146ee <mp_obj_str_format_helper+0x4f2>
   146dc:	2e e5       	ldi	r18, 0x5E	; 94
   146de:	b2 16       	cp	r11, r18
   146e0:	71 f0       	breq	.+28     	; 0x146fe <mp_obj_str_format_helper+0x502>
   146e2:	3c e3       	ldi	r19, 0x3C	; 60
   146e4:	b3 12       	cpse	r11, r19
   146e6:	0e c0       	rjmp	.+28     	; 0x14704 <mp_obj_str_format_helper+0x508>
   146e8:	68 94       	set
   146ea:	80 f8       	bld	r8, 0
   146ec:	63 c1       	rjmp	.+710    	; 0x149b4 <mp_obj_str_format_helper+0x7b8>
   146ee:	68 94       	set
   146f0:	86 f8       	bld	r8, 6
   146f2:	c3 01       	movw	r24, r6
   146f4:	0e 94 4b 03 	call	0x696	; 0x696 <arg_looks_integer>
   146f8:	81 11       	cpse	r24, r1
   146fa:	0a c0       	rjmp	.+20     	; 0x14710 <mp_obj_str_format_helper+0x514>
   146fc:	8f c0       	rjmp	.+286    	; 0x1481c <mp_obj_str_format_helper+0x620>
   146fe:	68 94       	set
   14700:	87 f8       	bld	r8, 7
   14702:	58 c1       	rjmp	.+688    	; 0x149b4 <mp_obj_str_format_helper+0x7b8>
   14704:	c3 01       	movw	r24, r6
   14706:	0e 94 4b 03 	call	0x696	; 0x696 <arg_looks_integer>
   1470a:	88 23       	and	r24, r24
   1470c:	09 f4       	brne	.+2      	; 0x14710 <mp_obj_str_format_helper+0x514>
   1470e:	83 c0       	rjmp	.+262    	; 0x14816 <mp_obj_str_format_helper+0x61a>
   14710:	13 36       	cpi	r17, 0x63	; 99
   14712:	91 f1       	breq	.+100    	; 0x14778 <mp_obj_str_format_helper+0x57c>
   14714:	90 f4       	brcc	.+36     	; 0x1473a <mp_obj_str_format_helper+0x53e>
   14716:	18 34       	cpi	r17, 0x48	; 72
   14718:	50 f4       	brcc	.+20     	; 0x1472e <mp_obj_str_format_helper+0x532>
   1471a:	15 34       	cpi	r17, 0x45	; 69
   1471c:	08 f0       	brcs	.+2      	; 0x14720 <mp_obj_str_format_helper+0x524>
   1471e:	79 c0       	rjmp	.+242    	; 0x14812 <mp_obj_str_format_helper+0x616>
   14720:	11 23       	and	r17, r17
   14722:	e1 f1       	breq	.+120    	; 0x1479c <mp_obj_str_format_helper+0x5a0>
   14724:	85 e2       	ldi	r24, 0x25	; 37
   14726:	18 17       	cp	r17, r24
   14728:	09 f4       	brne	.+2      	; 0x1472c <mp_obj_str_format_helper+0x530>
   1472a:	73 c0       	rjmp	.+230    	; 0x14812 <mp_obj_str_format_helper+0x616>
   1472c:	70 c0       	rjmp	.+224    	; 0x1480e <mp_obj_str_format_helper+0x612>
   1472e:	18 35       	cpi	r17, 0x58	; 88
   14730:	09 f4       	brne	.+2      	; 0x14734 <mp_obj_str_format_helper+0x538>
   14732:	5a c0       	rjmp	.+180    	; 0x147e8 <mp_obj_str_format_helper+0x5ec>
   14734:	12 36       	cpi	r17, 0x62	; 98
   14736:	79 f0       	breq	.+30     	; 0x14756 <mp_obj_str_format_helper+0x55a>
   14738:	6a c0       	rjmp	.+212    	; 0x1480e <mp_obj_str_format_helper+0x612>
   1473a:	18 36       	cpi	r17, 0x68	; 104
   1473c:	18 f4       	brcc	.+6      	; 0x14744 <mp_obj_str_format_helper+0x548>
   1473e:	15 36       	cpi	r17, 0x65	; 101
   14740:	68 f1       	brcs	.+90     	; 0x1479c <mp_obj_str_format_helper+0x5a0>
   14742:	67 c0       	rjmp	.+206    	; 0x14812 <mp_obj_str_format_helper+0x616>
   14744:	1f 36       	cpi	r17, 0x6F	; 111
   14746:	d9 f1       	breq	.+118    	; 0x147be <mp_obj_str_format_helper+0x5c2>
   14748:	18 37       	cpi	r17, 0x78	; 120
   1474a:	09 f4       	brne	.+2      	; 0x1474e <mp_obj_str_format_helper+0x552>
   1474c:	4d c0       	rjmp	.+154    	; 0x147e8 <mp_obj_str_format_helper+0x5ec>
   1474e:	1e 36       	cpi	r17, 0x6E	; 110
   14750:	09 f0       	breq	.+2      	; 0x14754 <mp_obj_str_format_helper+0x558>
   14752:	5d c0       	rjmp	.+186    	; 0x1480e <mp_obj_str_format_helper+0x612>
   14754:	23 c0       	rjmp	.+70     	; 0x1479c <mp_obj_str_format_helper+0x5a0>
   14756:	ce 8c       	ldd	r12, Y+30	; 0x1e
   14758:	df 8c       	ldd	r13, Y+31	; 0x1f
   1475a:	a1 2c       	mov	r10, r1
   1475c:	b1 2c       	mov	r11, r1
   1475e:	e0 2e       	mov	r14, r16
   14760:	84 01       	movw	r16, r8
   14762:	21 e6       	ldi	r18, 0x61	; 97
   14764:	30 e0       	ldi	r19, 0x00	; 0
   14766:	42 e0       	ldi	r20, 0x02	; 2
   14768:	50 e0       	ldi	r21, 0x00	; 0
   1476a:	b3 01       	movw	r22, r6
   1476c:	ce 01       	movw	r24, r28
   1476e:	0f 96       	adiw	r24, 0x0f	; 15
   14770:	0e 94 6f 35 	call	0x6ade	; 0x6ade <mp_print_mp_int>
   14774:	62 01       	movw	r12, r4
   14776:	7d c0       	rjmp	.+250    	; 0x14872 <mp_obj_str_format_helper+0x676>
   14778:	c3 01       	movw	r24, r6
   1477a:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <mp_obj_get_int>
   1477e:	8b 8b       	std	Y+19, r24	; 0x13
   14780:	ee 8c       	ldd	r14, Y+30	; 0x1e
   14782:	ff 8c       	ldd	r15, Y+31	; 0x1f
   14784:	94 01       	movw	r18, r8
   14786:	41 e0       	ldi	r20, 0x01	; 1
   14788:	50 e0       	ldi	r21, 0x00	; 0
   1478a:	be 01       	movw	r22, r28
   1478c:	6d 5e       	subi	r22, 0xED	; 237
   1478e:	7f 4f       	sbci	r23, 0xFF	; 255
   14790:	ce 01       	movw	r24, r28
   14792:	0f 96       	adiw	r24, 0x0f	; 15
   14794:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
   14798:	62 01       	movw	r12, r4
   1479a:	6b c0       	rjmp	.+214    	; 0x14872 <mp_obj_str_format_helper+0x676>
   1479c:	ce 8c       	ldd	r12, Y+30	; 0x1e
   1479e:	df 8c       	ldd	r13, Y+31	; 0x1f
   147a0:	a1 2c       	mov	r10, r1
   147a2:	b1 2c       	mov	r11, r1
   147a4:	e0 2e       	mov	r14, r16
   147a6:	84 01       	movw	r16, r8
   147a8:	21 e6       	ldi	r18, 0x61	; 97
   147aa:	30 e0       	ldi	r19, 0x00	; 0
   147ac:	4a e0       	ldi	r20, 0x0A	; 10
   147ae:	50 e0       	ldi	r21, 0x00	; 0
   147b0:	b3 01       	movw	r22, r6
   147b2:	ce 01       	movw	r24, r28
   147b4:	0f 96       	adiw	r24, 0x0f	; 15
   147b6:	0e 94 6f 35 	call	0x6ade	; 0x6ade <mp_print_mp_int>
   147ba:	62 01       	movw	r12, r4
   147bc:	5a c0       	rjmp	.+180    	; 0x14872 <mp_obj_str_format_helper+0x676>
   147be:	84 fe       	sbrs	r8, 4
   147c0:	02 c0       	rjmp	.+4      	; 0x147c6 <mp_obj_str_format_helper+0x5ca>
   147c2:	68 94       	set
   147c4:	91 f8       	bld	r9, 1
   147c6:	ce 8c       	ldd	r12, Y+30	; 0x1e
   147c8:	df 8c       	ldd	r13, Y+31	; 0x1f
   147ca:	a1 2c       	mov	r10, r1
   147cc:	b1 2c       	mov	r11, r1
   147ce:	e0 2e       	mov	r14, r16
   147d0:	84 01       	movw	r16, r8
   147d2:	21 e6       	ldi	r18, 0x61	; 97
   147d4:	30 e0       	ldi	r19, 0x00	; 0
   147d6:	48 e0       	ldi	r20, 0x08	; 8
   147d8:	50 e0       	ldi	r21, 0x00	; 0
   147da:	b3 01       	movw	r22, r6
   147dc:	ce 01       	movw	r24, r28
   147de:	0f 96       	adiw	r24, 0x0f	; 15
   147e0:	0e 94 6f 35 	call	0x6ade	; 0x6ade <mp_print_mp_int>
   147e4:	62 01       	movw	r12, r4
   147e6:	45 c0       	rjmp	.+138    	; 0x14872 <mp_obj_str_format_helper+0x676>
   147e8:	ce 8c       	ldd	r12, Y+30	; 0x1e
   147ea:	df 8c       	ldd	r13, Y+31	; 0x1f
   147ec:	21 2f       	mov	r18, r17
   147ee:	30 e0       	ldi	r19, 0x00	; 0
   147f0:	27 51       	subi	r18, 0x17	; 23
   147f2:	31 09       	sbc	r19, r1
   147f4:	a1 2c       	mov	r10, r1
   147f6:	b1 2c       	mov	r11, r1
   147f8:	e0 2e       	mov	r14, r16
   147fa:	84 01       	movw	r16, r8
   147fc:	40 e1       	ldi	r20, 0x10	; 16
   147fe:	50 e0       	ldi	r21, 0x00	; 0
   14800:	b3 01       	movw	r22, r6
   14802:	ce 01       	movw	r24, r28
   14804:	0f 96       	adiw	r24, 0x0f	; 15
   14806:	0e 94 6f 35 	call	0x6ade	; 0x6ade <mp_print_mp_int>
   1480a:	62 01       	movw	r12, r4
   1480c:	32 c0       	rjmp	.+100    	; 0x14872 <mp_obj_str_format_helper+0x676>
   1480e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   14812:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   14816:	9d e3       	ldi	r25, 0x3D	; 61
   14818:	b9 12       	cpse	r11, r25
   1481a:	02 c0       	rjmp	.+4      	; 0x14820 <mp_obj_str_format_helper+0x624>
   1481c:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   14820:	11 23       	and	r17, r17
   14822:	11 f0       	breq	.+4      	; 0x14828 <mp_obj_str_format_helper+0x62c>
   14824:	13 37       	cpi	r17, 0x73	; 115
   14826:	19 f5       	brne	.+70     	; 0x1486e <mp_obj_str_format_helper+0x672>
   14828:	be 01       	movw	r22, r28
   1482a:	6d 5e       	subi	r22, 0xED	; 237
   1482c:	7f 4f       	sbci	r23, 0xFF	; 255
   1482e:	c3 01       	movw	r24, r6
   14830:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
   14834:	2a 8d       	ldd	r18, Y+26	; 0x1a
   14836:	3b 8d       	ldd	r19, Y+27	; 0x1b
   14838:	33 23       	and	r19, r19
   1483a:	24 f4       	brge	.+8      	; 0x14844 <mp_obj_str_format_helper+0x648>
   1483c:	2b 89       	ldd	r18, Y+19	; 0x13
   1483e:	3c 89       	ldd	r19, Y+20	; 0x14
   14840:	3b 8f       	std	Y+27, r19	; 0x1b
   14842:	2a 8f       	std	Y+26, r18	; 0x1a
   14844:	2a 8d       	ldd	r18, Y+26	; 0x1a
   14846:	3b 8d       	ldd	r19, Y+27	; 0x1b
   14848:	4b 89       	ldd	r20, Y+19	; 0x13
   1484a:	5c 89       	ldd	r21, Y+20	; 0x14
   1484c:	24 17       	cp	r18, r20
   1484e:	35 07       	cpc	r19, r21
   14850:	10 f4       	brcc	.+4      	; 0x14856 <mp_obj_str_format_helper+0x65a>
   14852:	3c 8b       	std	Y+20, r19	; 0x14
   14854:	2b 8b       	std	Y+19, r18	; 0x13
   14856:	ee 8c       	ldd	r14, Y+30	; 0x1e
   14858:	ff 8c       	ldd	r15, Y+31	; 0x1f
   1485a:	4b 89       	ldd	r20, Y+19	; 0x13
   1485c:	5c 89       	ldd	r21, Y+20	; 0x14
   1485e:	94 01       	movw	r18, r8
   14860:	bc 01       	movw	r22, r24
   14862:	ce 01       	movw	r24, r28
   14864:	0f 96       	adiw	r24, 0x0f	; 15
   14866:	0e 94 cf 0c 	call	0x199e	; 0x199e <mp_print_strn>
   1486a:	62 01       	movw	r12, r4
   1486c:	02 c0       	rjmp	.+4      	; 0x14872 <mp_obj_str_format_helper+0x676>
   1486e:	0e 94 f3 24 	call	0x49e6	; 0x49e6 <terse_str_format_value_error>
   14872:	ef ef       	ldi	r30, 0xFF	; 255
   14874:	ce 1a       	sub	r12, r30
   14876:	de 0a       	sbc	r13, r30
   14878:	c2 14       	cp	r12, r2
   1487a:	d3 04       	cpc	r13, r3
   1487c:	08 f4       	brcc	.+2      	; 0x14880 <mp_obj_str_format_helper+0x684>
   1487e:	fc cc       	rjmp	.-1544   	; 0x14278 <mp_obj_str_format_helper+0x7c>
   14880:	a0 c0       	rjmp	.+320    	; 0x149c2 <mp_obj_str_format_helper+0x7c6>
   14882:	00 e0       	ldi	r16, 0x00	; 0
   14884:	10 e0       	ldi	r17, 0x00	; 0
   14886:	e1 2c       	mov	r14, r1
   14888:	f1 2c       	mov	r15, r1
   1488a:	0f c0       	rjmp	.+30     	; 0x148aa <mp_obj_str_format_helper+0x6ae>
   1488c:	00 e0       	ldi	r16, 0x00	; 0
   1488e:	10 e0       	ldi	r17, 0x00	; 0
   14890:	e1 2c       	mov	r14, r1
   14892:	f1 2c       	mov	r15, r1
   14894:	0a c0       	rjmp	.+20     	; 0x148aa <mp_obj_str_format_helper+0x6ae>
   14896:	00 e0       	ldi	r16, 0x00	; 0
   14898:	10 e0       	ldi	r17, 0x00	; 0
   1489a:	e1 2c       	mov	r14, r1
   1489c:	f1 2c       	mov	r15, r1
   1489e:	05 c0       	rjmp	.+10     	; 0x148aa <mp_obj_str_format_helper+0x6ae>
   148a0:	72 01       	movw	r14, r4
   148a2:	28 01       	movw	r4, r16
   148a4:	02 c0       	rjmp	.+4      	; 0x148aa <mp_obj_str_format_helper+0x6ae>
   148a6:	72 01       	movw	r14, r4
   148a8:	28 01       	movw	r4, r16
   148aa:	f2 01       	movw	r30, r4
   148ac:	80 81       	ld	r24, Z
   148ae:	81 32       	cpi	r24, 0x21	; 33
   148b0:	09 f4       	brne	.+2      	; 0x148b4 <mp_obj_str_format_helper+0x6b8>
   148b2:	2e cd       	rjmp	.-1444   	; 0x14310 <mp_obj_str_format_helper+0x114>
   148b4:	b1 2c       	mov	r11, r1
   148b6:	43 cd       	rjmp	.-1402   	; 0x1433e <mp_obj_str_format_helper+0x142>
   148b8:	42 14       	cp	r4, r2
   148ba:	53 04       	cpc	r5, r3
   148bc:	08 f4       	brcc	.+2      	; 0x148c0 <mp_obj_str_format_helper+0x6c4>
   148be:	72 cd       	rjmp	.-1308   	; 0x143a4 <mp_obj_str_format_helper+0x1a8>
   148c0:	66 cd       	rjmp	.-1332   	; 0x1438e <mp_obj_str_format_helper+0x192>
   148c2:	2f ef       	ldi	r18, 0xFF	; 255
   148c4:	3f ef       	ldi	r19, 0xFF	; 255
   148c6:	3f 8f       	std	Y+31, r19	; 0x1f
   148c8:	2e 8f       	std	Y+30, r18	; 0x1e
   148ca:	3b 8f       	std	Y+27, r19	; 0x1b
   148cc:	2a 8f       	std	Y+26, r18	; 0x1a
   148ce:	3c ce       	rjmp	.-904    	; 0x14548 <mp_obj_str_format_helper+0x34c>
   148d0:	bb 20       	and	r11, r11
   148d2:	b9 f3       	breq	.-18     	; 0x148c2 <mp_obj_str_format_helper+0x6c6>
   148d4:	35 c0       	rjmp	.+106    	; 0x14940 <mp_obj_str_format_helper+0x744>
   148d6:	3f ef       	ldi	r19, 0xFF	; 255
   148d8:	e3 1a       	sub	r14, r19
   148da:	f3 0a       	sbc	r15, r19
   148dc:	b0 2e       	mov	r11, r16
   148de:	00 e0       	ldi	r16, 0x00	; 0
   148e0:	6c ce       	rjmp	.-808    	; 0x145ba <mp_obj_str_format_helper+0x3be>
   148e2:	82 e0       	ldi	r24, 0x02	; 2
   148e4:	e8 0e       	add	r14, r24
   148e6:	f1 1c       	adc	r15, r1
   148e8:	68 ce       	rjmp	.-816    	; 0x145ba <mp_obj_str_format_helper+0x3be>
   148ea:	f7 01       	movw	r30, r14
   148ec:	81 81       	ldd	r24, Z+1	; 0x01
   148ee:	88 23       	and	r24, r24
   148f0:	09 f4       	brne	.+2      	; 0x148f4 <mp_obj_str_format_helper+0x6f8>
   148f2:	c4 ce       	rjmp	.-632    	; 0x1467c <mp_obj_str_format_helper+0x480>
   148f4:	c1 ce       	rjmp	.-638    	; 0x14678 <mp_obj_str_format_helper+0x47c>
   148f6:	60 e1       	ldi	r22, 0x10	; 16
   148f8:	70 e0       	ldi	r23, 0x00	; 0
   148fa:	ce 01       	movw	r24, r28
   148fc:	43 96       	adiw	r24, 0x13	; 19
   148fe:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
   14902:	23 e1       	ldi	r18, 0x13	; 19
   14904:	30 e0       	ldi	r19, 0x00	; 0
   14906:	2c 0f       	add	r18, r28
   14908:	3d 1f       	adc	r19, r29
   1490a:	3b 8f       	std	Y+27, r19	; 0x1b
   1490c:	2a 8f       	std	Y+26, r18	; 0x1a
   1490e:	89 ea       	ldi	r24, 0xA9	; 169
   14910:	9e e4       	ldi	r25, 0x4E	; 78
   14912:	9d 8f       	std	Y+29, r25	; 0x1d
   14914:	8c 8f       	std	Y+28, r24	; 0x1c
   14916:	40 e0       	ldi	r20, 0x00	; 0
   14918:	b3 01       	movw	r22, r6
   1491a:	ce 01       	movw	r24, r28
   1491c:	4a 96       	adiw	r24, 0x1a	; 26
   1491e:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
   14922:	be 01       	movw	r22, r28
   14924:	6d 5e       	subi	r22, 0xED	; 237
   14926:	7f 4f       	sbci	r23, 0xFF	; 255
   14928:	82 e1       	ldi	r24, 0x12	; 18
   1492a:	9b e1       	ldi	r25, 0x1B	; 27
   1492c:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   14930:	3c 01       	movw	r6, r24
   14932:	ef ef       	ldi	r30, 0xFF	; 255
   14934:	ff ef       	ldi	r31, 0xFF	; 255
   14936:	ff 8f       	std	Y+31, r31	; 0x1f
   14938:	ee 8f       	std	Y+30, r30	; 0x1e
   1493a:	fb 8f       	std	Y+27, r31	; 0x1b
   1493c:	ea 8f       	std	Y+26, r30	; 0x1a
   1493e:	04 ce       	rjmp	.-1016   	; 0x14548 <mp_obj_str_format_helper+0x34c>
   14940:	f3 e7       	ldi	r31, 0x73	; 115
   14942:	bf 12       	cpse	r11, r31
   14944:	d2 cd       	rjmp	.-1116   	; 0x144ea <mp_obj_str_format_helper+0x2ee>
   14946:	d7 cf       	rjmp	.-82     	; 0x148f6 <mp_obj_str_format_helper+0x6fa>
   14948:	60 e1       	ldi	r22, 0x10	; 16
   1494a:	70 e0       	ldi	r23, 0x00	; 0
   1494c:	ce 01       	movw	r24, r28
   1494e:	43 96       	adiw	r24, 0x13	; 19
   14950:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <vstr_init>
   14954:	23 e1       	ldi	r18, 0x13	; 19
   14956:	30 e0       	ldi	r19, 0x00	; 0
   14958:	2c 0f       	add	r18, r28
   1495a:	3d 1f       	adc	r19, r29
   1495c:	3b 8f       	std	Y+27, r19	; 0x1b
   1495e:	2a 8f       	std	Y+26, r18	; 0x1a
   14960:	89 ea       	ldi	r24, 0xA9	; 169
   14962:	9e e4       	ldi	r25, 0x4E	; 78
   14964:	9d 8f       	std	Y+29, r25	; 0x1d
   14966:	8c 8f       	std	Y+28, r24	; 0x1c
   14968:	40 e0       	ldi	r20, 0x00	; 0
   1496a:	b3 01       	movw	r22, r6
   1496c:	ce 01       	movw	r24, r28
   1496e:	4a 96       	adiw	r24, 0x1a	; 26
   14970:	0e 94 cd 1a 	call	0x359a	; 0x359a <mp_obj_print_helper>
   14974:	be 01       	movw	r22, r28
   14976:	6d 5e       	subi	r22, 0xED	; 237
   14978:	7f 4f       	sbci	r23, 0xFF	; 255
   1497a:	82 e1       	ldi	r24, 0x12	; 18
   1497c:	9b e1       	ldi	r25, 0x1B	; 27
   1497e:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   14982:	3c 01       	movw	r6, r24
   14984:	ef ef       	ldi	r30, 0xFF	; 255
   14986:	ff ef       	ldi	r31, 0xFF	; 255
   14988:	ff 8f       	std	Y+31, r31	; 0x1f
   1498a:	ee 8f       	std	Y+30, r30	; 0x1e
   1498c:	fb 8f       	std	Y+27, r31	; 0x1b
   1498e:	ea 8f       	std	Y+26, r30	; 0x1a
   14990:	81 2c       	mov	r8, r1
   14992:	91 2c       	mov	r9, r1
   14994:	10 e0       	ldi	r17, 0x00	; 0
   14996:	00 e0       	ldi	r16, 0x00	; 0
   14998:	77 ce       	rjmp	.-786    	; 0x14688 <mp_obj_str_format_helper+0x48c>
   1499a:	0e 94 4b 03 	call	0x696	; 0x696 <arg_looks_integer>
   1499e:	81 11       	cpse	r24, r1
   149a0:	85 ce       	rjmp	.-758    	; 0x146ac <mp_obj_str_format_helper+0x4b0>
   149a2:	81 2c       	mov	r8, r1
   149a4:	91 2c       	mov	r9, r1
   149a6:	10 e0       	ldi	r17, 0x00	; 0
   149a8:	00 e0       	ldi	r16, 0x00	; 0
   149aa:	0f 2e       	mov	r0, r31
   149ac:	fc e3       	ldi	r31, 0x3C	; 60
   149ae:	bf 2e       	mov	r11, r31
   149b0:	f0 2d       	mov	r31, r0
   149b2:	78 ce       	rjmp	.-784    	; 0x146a4 <mp_obj_str_format_helper+0x4a8>
   149b4:	c3 01       	movw	r24, r6
   149b6:	0e 94 4b 03 	call	0x696	; 0x696 <arg_looks_integer>
   149ba:	88 23       	and	r24, r24
   149bc:	09 f4       	brne	.+2      	; 0x149c0 <mp_obj_str_format_helper+0x7c4>
   149be:	30 cf       	rjmp	.-416    	; 0x14820 <mp_obj_str_format_helper+0x624>
   149c0:	a7 ce       	rjmp	.-690    	; 0x14710 <mp_obj_str_format_helper+0x514>
   149c2:	87 e0       	ldi	r24, 0x07	; 7
   149c4:	fe 01       	movw	r30, r28
   149c6:	38 96       	adiw	r30, 0x08	; 8
   149c8:	de 01       	movw	r26, r28
   149ca:	11 96       	adiw	r26, 0x01	; 1
   149cc:	01 90       	ld	r0, Z+
   149ce:	0d 92       	st	X+, r0
   149d0:	8a 95       	dec	r24
   149d2:	e1 f7       	brne	.-8      	; 0x149cc <mp_obj_str_format_helper+0x7d0>
   149d4:	29 81       	ldd	r18, Y+1	; 0x01
   149d6:	3a 81       	ldd	r19, Y+2	; 0x02
   149d8:	4b 81       	ldd	r20, Y+3	; 0x03
   149da:	5c 81       	ldd	r21, Y+4	; 0x04
   149dc:	6d 81       	ldd	r22, Y+5	; 0x05
   149de:	7e 81       	ldd	r23, Y+6	; 0x06
   149e0:	8f 81       	ldd	r24, Y+7	; 0x07
   149e2:	90 e0       	ldi	r25, 0x00	; 0
   149e4:	ab 96       	adiw	r28, 0x2b	; 43
   149e6:	0f b6       	in	r0, 0x3f	; 63
   149e8:	f8 94       	cli
   149ea:	de bf       	out	0x3e, r29	; 62
   149ec:	0f be       	out	0x3f, r0	; 63
   149ee:	cd bf       	out	0x3d, r28	; 61
   149f0:	df 91       	pop	r29
   149f2:	cf 91       	pop	r28
   149f4:	1f 91       	pop	r17
   149f6:	0f 91       	pop	r16
   149f8:	ff 90       	pop	r15
   149fa:	ef 90       	pop	r14
   149fc:	df 90       	pop	r13
   149fe:	cf 90       	pop	r12
   14a00:	bf 90       	pop	r11
   14a02:	af 90       	pop	r10
   14a04:	9f 90       	pop	r9
   14a06:	8f 90       	pop	r8
   14a08:	7f 90       	pop	r7
   14a0a:	6f 90       	pop	r6
   14a0c:	5f 90       	pop	r5
   14a0e:	4f 90       	pop	r4
   14a10:	3f 90       	pop	r3
   14a12:	2f 90       	pop	r2
   14a14:	08 95       	ret

00014a16 <mp_obj_str_format>:
   14a16:	af 92       	push	r10
   14a18:	bf 92       	push	r11
   14a1a:	cf 92       	push	r12
   14a1c:	df 92       	push	r13
   14a1e:	ef 92       	push	r14
   14a20:	ff 92       	push	r15
   14a22:	0f 93       	push	r16
   14a24:	1f 93       	push	r17
   14a26:	cf 93       	push	r28
   14a28:	df 93       	push	r29
   14a2a:	cd b7       	in	r28, 0x3d	; 61
   14a2c:	de b7       	in	r29, 0x3e	; 62
   14a2e:	2b 97       	sbiw	r28, 0x0b	; 11
   14a30:	0f b6       	in	r0, 0x3f	; 63
   14a32:	f8 94       	cli
   14a34:	de bf       	out	0x3e, r29	; 62
   14a36:	0f be       	out	0x3f, r0	; 63
   14a38:	cd bf       	out	0x3d, r28	; 61
   14a3a:	5c 01       	movw	r10, r24
   14a3c:	6b 01       	movw	r12, r22
   14a3e:	7a 01       	movw	r14, r20
   14a40:	db 01       	movw	r26, r22
   14a42:	ed 91       	ld	r30, X+
   14a44:	fc 91       	ld	r31, X
   14a46:	cf 01       	movw	r24, r30
   14a48:	87 70       	andi	r24, 0x07	; 7
   14a4a:	99 27       	eor	r25, r25
   14a4c:	02 97       	sbiw	r24, 0x02	; 2
   14a4e:	81 f0       	breq	.+32     	; 0x14a70 <mp_obj_str_format+0x5a>
   14a50:	cf 01       	movw	r24, r30
   14a52:	83 70       	andi	r24, 0x03	; 3
   14a54:	99 27       	eor	r25, r25
   14a56:	89 2b       	or	r24, r25
   14a58:	49 f4       	brne	.+18     	; 0x14a6c <mp_obj_str_format+0x56>
   14a5a:	a0 81       	ld	r26, Z
   14a5c:	b1 81       	ldd	r27, Z+1	; 0x01
   14a5e:	1e 96       	adiw	r26, 0x0e	; 14
   14a60:	8d 91       	ld	r24, X+
   14a62:	9c 91       	ld	r25, X
   14a64:	1f 97       	sbiw	r26, 0x0f	; 15
   14a66:	81 5a       	subi	r24, 0xA1	; 161
   14a68:	98 47       	sbci	r25, 0x78	; 120
   14a6a:	79 f0       	breq	.+30     	; 0x14a8a <mp_obj_str_format+0x74>
   14a6c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   14a70:	be 01       	movw	r22, r28
   14a72:	6f 5f       	subi	r22, 0xFF	; 255
   14a74:	7f 4f       	sbci	r23, 0xFF	; 255
   14a76:	cf 01       	movw	r24, r30
   14a78:	96 95       	lsr	r25
   14a7a:	87 95       	ror	r24
   14a7c:	96 95       	lsr	r25
   14a7e:	87 95       	ror	r24
   14a80:	96 95       	lsr	r25
   14a82:	87 95       	ror	r24
   14a84:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <qstr_data>
   14a88:	06 c0       	rjmp	.+12     	; 0x14a96 <mp_obj_str_format+0x80>
   14a8a:	84 81       	ldd	r24, Z+4	; 0x04
   14a8c:	95 81       	ldd	r25, Z+5	; 0x05
   14a8e:	9a 83       	std	Y+2, r25	; 0x02
   14a90:	89 83       	std	Y+1, r24	; 0x01
   14a92:	86 81       	ldd	r24, Z+6	; 0x06
   14a94:	97 81       	ldd	r25, Z+7	; 0x07
   14a96:	1c 82       	std	Y+4, r1	; 0x04
   14a98:	1b 82       	std	Y+3, r1	; 0x03
   14a9a:	69 81       	ldd	r22, Y+1	; 0x01
   14a9c:	7a 81       	ldd	r23, Y+2	; 0x02
   14a9e:	68 0f       	add	r22, r24
   14aa0:	79 1f       	adc	r23, r25
   14aa2:	86 01       	movw	r16, r12
   14aa4:	95 01       	movw	r18, r10
   14aa6:	ae 01       	movw	r20, r28
   14aa8:	4d 5f       	subi	r20, 0xFD	; 253
   14aaa:	5f 4f       	sbci	r21, 0xFF	; 255
   14aac:	a7 db       	rcall	.-2226   	; 0x141fc <mp_obj_str_format_helper>
   14aae:	2d 83       	std	Y+5, r18	; 0x05
   14ab0:	3e 83       	std	Y+6, r19	; 0x06
   14ab2:	4f 83       	std	Y+7, r20	; 0x07
   14ab4:	58 87       	std	Y+8, r21	; 0x08
   14ab6:	69 87       	std	Y+9, r22	; 0x09
   14ab8:	7a 87       	std	Y+10, r23	; 0x0a
   14aba:	8b 87       	std	Y+11, r24	; 0x0b
   14abc:	f6 01       	movw	r30, r12
   14abe:	80 81       	ld	r24, Z
   14ac0:	91 81       	ldd	r25, Z+1	; 0x01
   14ac2:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   14ac6:	be 01       	movw	r22, r28
   14ac8:	6b 5f       	subi	r22, 0xFB	; 251
   14aca:	7f 4f       	sbci	r23, 0xFF	; 255
   14acc:	0e 94 09 77 	call	0xee12	; 0xee12 <mp_obj_new_str_from_vstr>
   14ad0:	2b 96       	adiw	r28, 0x0b	; 11
   14ad2:	0f b6       	in	r0, 0x3f	; 63
   14ad4:	f8 94       	cli
   14ad6:	de bf       	out	0x3e, r29	; 62
   14ad8:	0f be       	out	0x3f, r0	; 63
   14ada:	cd bf       	out	0x3d, r28	; 61
   14adc:	df 91       	pop	r29
   14ade:	cf 91       	pop	r28
   14ae0:	1f 91       	pop	r17
   14ae2:	0f 91       	pop	r16
   14ae4:	ff 90       	pop	r15
   14ae6:	ef 90       	pop	r14
   14ae8:	df 90       	pop	r13
   14aea:	cf 90       	pop	r12
   14aec:	bf 90       	pop	r11
   14aee:	af 90       	pop	r10
   14af0:	08 95       	ret

00014af2 <mp_builtin_bin>:
   14af2:	cf 93       	push	r28
   14af4:	df 93       	push	r29
   14af6:	00 d0       	rcall	.+0      	; 0x14af8 <mp_builtin_bin+0x6>
   14af8:	00 d0       	rcall	.+0      	; 0x14afa <mp_builtin_bin+0x8>
   14afa:	cd b7       	in	r28, 0x3d	; 61
   14afc:	de b7       	in	r29, 0x3e	; 62
   14afe:	2a ec       	ldi	r18, 0xCA	; 202
   14b00:	35 e0       	ldi	r19, 0x05	; 5
   14b02:	3a 83       	std	Y+2, r19	; 0x02
   14b04:	29 83       	std	Y+1, r18	; 0x01
   14b06:	9c 83       	std	Y+4, r25	; 0x04
   14b08:	8b 83       	std	Y+3, r24	; 0x03
   14b0a:	40 e0       	ldi	r20, 0x00	; 0
   14b0c:	50 e0       	ldi	r21, 0x00	; 0
   14b0e:	be 01       	movw	r22, r28
   14b10:	6f 5f       	subi	r22, 0xFF	; 255
   14b12:	7f 4f       	sbci	r23, 0xFF	; 255
   14b14:	82 e0       	ldi	r24, 0x02	; 2
   14b16:	90 e0       	ldi	r25, 0x00	; 0
   14b18:	7e df       	rcall	.-260    	; 0x14a16 <mp_obj_str_format>
   14b1a:	0f 90       	pop	r0
   14b1c:	0f 90       	pop	r0
   14b1e:	0f 90       	pop	r0
   14b20:	0f 90       	pop	r0
   14b22:	df 91       	pop	r29
   14b24:	cf 91       	pop	r28
   14b26:	08 95       	ret

00014b28 <mp_builtin_hex>:
   14b28:	cf 93       	push	r28
   14b2a:	df 93       	push	r29
   14b2c:	00 d0       	rcall	.+0      	; 0x14b2e <mp_builtin_hex+0x6>
   14b2e:	00 d0       	rcall	.+0      	; 0x14b30 <mp_builtin_hex+0x8>
   14b30:	cd b7       	in	r28, 0x3d	; 61
   14b32:	de b7       	in	r29, 0x3e	; 62
   14b34:	22 ec       	ldi	r18, 0xC2	; 194
   14b36:	35 e0       	ldi	r19, 0x05	; 5
   14b38:	3a 83       	std	Y+2, r19	; 0x02
   14b3a:	29 83       	std	Y+1, r18	; 0x01
   14b3c:	9c 83       	std	Y+4, r25	; 0x04
   14b3e:	8b 83       	std	Y+3, r24	; 0x03
   14b40:	40 e0       	ldi	r20, 0x00	; 0
   14b42:	50 e0       	ldi	r21, 0x00	; 0
   14b44:	be 01       	movw	r22, r28
   14b46:	6f 5f       	subi	r22, 0xFF	; 255
   14b48:	7f 4f       	sbci	r23, 0xFF	; 255
   14b4a:	82 e0       	ldi	r24, 0x02	; 2
   14b4c:	90 e0       	ldi	r25, 0x00	; 0
   14b4e:	63 df       	rcall	.-314    	; 0x14a16 <mp_obj_str_format>
   14b50:	0f 90       	pop	r0
   14b52:	0f 90       	pop	r0
   14b54:	0f 90       	pop	r0
   14b56:	0f 90       	pop	r0
   14b58:	df 91       	pop	r29
   14b5a:	cf 91       	pop	r28
   14b5c:	08 95       	ret

00014b5e <mp_builtin_oct>:
   14b5e:	cf 93       	push	r28
   14b60:	df 93       	push	r29
   14b62:	00 d0       	rcall	.+0      	; 0x14b64 <mp_builtin_oct+0x6>
   14b64:	00 d0       	rcall	.+0      	; 0x14b66 <mp_builtin_oct+0x8>
   14b66:	cd b7       	in	r28, 0x3d	; 61
   14b68:	de b7       	in	r29, 0x3e	; 62
   14b6a:	2a eb       	ldi	r18, 0xBA	; 186
   14b6c:	35 e0       	ldi	r19, 0x05	; 5
   14b6e:	3a 83       	std	Y+2, r19	; 0x02
   14b70:	29 83       	std	Y+1, r18	; 0x01
   14b72:	9c 83       	std	Y+4, r25	; 0x04
   14b74:	8b 83       	std	Y+3, r24	; 0x03
   14b76:	40 e0       	ldi	r20, 0x00	; 0
   14b78:	50 e0       	ldi	r21, 0x00	; 0
   14b7a:	be 01       	movw	r22, r28
   14b7c:	6f 5f       	subi	r22, 0xFF	; 255
   14b7e:	7f 4f       	sbci	r23, 0xFF	; 255
   14b80:	82 e0       	ldi	r24, 0x02	; 2
   14b82:	90 e0       	ldi	r25, 0x00	; 0
   14b84:	48 df       	rcall	.-368    	; 0x14a16 <mp_obj_str_format>
   14b86:	0f 90       	pop	r0
   14b88:	0f 90       	pop	r0
   14b8a:	0f 90       	pop	r0
   14b8c:	0f 90       	pop	r0
   14b8e:	df 91       	pop	r29
   14b90:	cf 91       	pop	r28
   14b92:	08 95       	ret

00014b94 <it_iternext>:
typedef struct _mp_obj_getitem_iter_t {
    mp_obj_base_t base;
    mp_obj_t args[3];
} mp_obj_getitem_iter_t;

STATIC mp_obj_t it_iternext(mp_obj_t self_in) {
   14b94:	0f 93       	push	r16
   14b96:	1f 93       	push	r17
   14b98:	cf 93       	push	r28
   14b9a:	df 93       	push	r29
   14b9c:	cd b7       	in	r28, 0x3d	; 61
   14b9e:	de b7       	in	r29, 0x3e	; 62
   14ba0:	6d 97       	sbiw	r28, 0x1d	; 29
   14ba2:	0f b6       	in	r0, 0x3f	; 63
   14ba4:	f8 94       	cli
   14ba6:	de bf       	out	0x3e, r29	; 62
   14ba8:	0f be       	out	0x3f, r0	; 63
   14baa:	cd bf       	out	0x3d, r28	; 61
   14bac:	9d 8f       	std	Y+29, r25	; 0x1d
   14bae:	8c 8f       	std	Y+28, r24	; 0x1c
    mp_obj_getitem_iter_t *self = MP_OBJ_TO_PTR(self_in);
    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   14bb0:	ce 01       	movw	r24, r28
   14bb2:	01 96       	adiw	r24, 0x01	; 1
   14bb4:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   14bb8:	ce 01       	movw	r24, r28
   14bba:	05 96       	adiw	r24, 0x05	; 5
   14bbc:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   14bc0:	89 2b       	or	r24, r25
   14bc2:	d1 f4       	brne	.+52     	; 0x14bf8 <it_iternext+0x64>
        // try to get next item
        mp_obj_t value = mp_call_method_n_kw(1, 0, self->args);
   14bc4:	4c 8d       	ldd	r20, Y+28	; 0x1c
   14bc6:	5d 8d       	ldd	r21, Y+29	; 0x1d
   14bc8:	4e 5f       	subi	r20, 0xFE	; 254
   14bca:	5f 4f       	sbci	r21, 0xFF	; 255
   14bcc:	60 e0       	ldi	r22, 0x00	; 0
   14bce:	70 e0       	ldi	r23, 0x00	; 0
   14bd0:	81 e0       	ldi	r24, 0x01	; 1
   14bd2:	90 e0       	ldi	r25, 0x00	; 0
   14bd4:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   14bd8:	08 2f       	mov	r16, r24
   14bda:	19 2f       	mov	r17, r25
        self->args[2] = MP_OBJ_NEW_SMALL_INT(MP_OBJ_SMALL_INT_VALUE(self->args[2]) + 1);
   14bdc:	ec 8d       	ldd	r30, Y+28	; 0x1c
   14bde:	fd 8d       	ldd	r31, Y+29	; 0x1d
   14be0:	86 81       	ldd	r24, Z+6	; 0x06
   14be2:	97 81       	ldd	r25, Z+7	; 0x07
   14be4:	8e 7f       	andi	r24, 0xFE	; 254
   14be6:	02 96       	adiw	r24, 0x02	; 2
   14be8:	81 60       	ori	r24, 0x01	; 1
   14bea:	97 83       	std	Z+7, r25	; 0x07
   14bec:	86 83       	std	Z+6, r24	; 0x06
        nlr_pop();
   14bee:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
        return value;
   14bf2:	80 2f       	mov	r24, r16
   14bf4:	91 2f       	mov	r25, r17
   14bf6:	13 c0       	rjmp	.+38     	; 0x14c1e <it_iternext+0x8a>
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t *)((mp_obj_base_t *)nlr.ret_val)->type;
   14bf8:	eb 81       	ldd	r30, Y+3	; 0x03
   14bfa:	fc 81       	ldd	r31, Y+4	; 0x04
   14bfc:	20 81       	ld	r18, Z
   14bfe:	31 81       	ldd	r19, Z+1	; 0x01
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
   14c00:	81 e2       	ldi	r24, 0x21	; 33
   14c02:	28 3b       	cpi	r18, 0xB8	; 184
   14c04:	38 07       	cpc	r19, r24
   14c06:	31 f0       	breq	.+12     	; 0x14c14 <it_iternext+0x80>
   14c08:	28 59       	subi	r18, 0x98	; 152
   14c0a:	30 42       	sbci	r19, 0x20	; 32
   14c0c:	31 f0       	breq	.+12     	; 0x14c1a <it_iternext+0x86>
            return MP_OBJ_STOP_ITERATION;
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
   14c0e:	cf 01       	movw	r24, r30
   14c10:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
        return value;
    } else {
        // an exception was raised
        mp_obj_type_t *t = (mp_obj_type_t *)((mp_obj_base_t *)nlr.ret_val)->type;
        if (t == &mp_type_StopIteration || t == &mp_type_IndexError) {
            return MP_OBJ_STOP_ITERATION;
   14c14:	80 e0       	ldi	r24, 0x00	; 0
   14c16:	90 e0       	ldi	r25, 0x00	; 0
   14c18:	02 c0       	rjmp	.+4      	; 0x14c1e <it_iternext+0x8a>
   14c1a:	80 e0       	ldi	r24, 0x00	; 0
   14c1c:	90 e0       	ldi	r25, 0x00	; 0
        } else {
            // re-raise exception
            nlr_jump(nlr.ret_val);
        }
    }
}
   14c1e:	6d 96       	adiw	r28, 0x1d	; 29
   14c20:	0f b6       	in	r0, 0x3f	; 63
   14c22:	f8 94       	cli
   14c24:	de bf       	out	0x3e, r29	; 62
   14c26:	0f be       	out	0x3f, r0	; 63
   14c28:	cd bf       	out	0x3d, r28	; 61
   14c2a:	df 91       	pop	r29
   14c2c:	cf 91       	pop	r28
   14c2e:	1f 91       	pop	r17
   14c30:	0f 91       	pop	r16
   14c32:	08 95       	ret

00014c34 <do_execute_raw_code>:
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
}
#endif

#if (MICROPY_HAS_FILE_READER && MICROPY_PERSISTENT_CODE_LOAD) || MICROPY_MODULE_FROZEN_MPY
STATIC void do_execute_raw_code(mp_obj_t module_obj, mp_raw_code_t *raw_code, const char *source_name) {
   14c34:	cf 93       	push	r28
   14c36:	df 93       	push	r29
   14c38:	cd b7       	in	r28, 0x3d	; 61
   14c3a:	de b7       	in	r29, 0x3e	; 62
   14c3c:	a1 97       	sbiw	r28, 0x21	; 33
   14c3e:	0f b6       	in	r0, 0x3f	; 63
   14c40:	f8 94       	cli
   14c42:	de bf       	out	0x3e, r29	; 62
   14c44:	0f be       	out	0x3f, r0	; 63
   14c46:	cd bf       	out	0x3d, r28	; 61
   14c48:	79 a3       	std	Y+33, r23	; 0x21
   14c4a:	68 a3       	std	Y+32, r22	; 0x20
typedef struct _mp_obj_module_t {
    mp_obj_base_t base;
    mp_obj_dict_t *globals;
} mp_obj_module_t;
static inline mp_obj_dict_t *mp_obj_module_get_globals(mp_obj_t module) {
    return ((mp_obj_module_t *)MP_OBJ_TO_PTR(module))->globals;
   14c4c:	fc 01       	movw	r30, r24
   14c4e:	82 81       	ldd	r24, Z+2	; 0x02
   14c50:	93 81       	ldd	r25, Z+3	; 0x03
}
static inline void mp_locals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_locals) = d;
}
static inline mp_obj_dict_t *mp_globals_get(void) {
    return MP_STATE_THREAD(dict_globals);
   14c52:	ea e5       	ldi	r30, 0x5A	; 90
   14c54:	fb e6       	ldi	r31, 0x6B	; 107
   14c56:	26 81       	ldd	r18, Z+6	; 0x06
   14c58:	37 81       	ldd	r19, Z+7	; 0x07

    // execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);

    // save context
    mp_obj_dict_t *volatile old_globals = mp_globals_get();
   14c5a:	3a 83       	std	Y+2, r19	; 0x02
   14c5c:	29 83       	std	Y+1, r18	; 0x01
void mp_arg_parse_all_kw_array(size_t n_pos, size_t n_kw, const mp_obj_t *args, size_t n_allowed, const mp_arg_t *allowed, mp_arg_val_t *out_vals);
NORETURN void mp_arg_error_terse_mismatch(void);
NORETURN void mp_arg_error_unimpl_kw(void);

static inline mp_obj_dict_t *mp_locals_get(void) {
    return MP_STATE_THREAD(dict_locals);
   14c5e:	24 81       	ldd	r18, Z+4	; 0x04
   14c60:	35 81       	ldd	r19, Z+5	; 0x05
    mp_obj_dict_t *volatile old_locals = mp_locals_get();
   14c62:	3c 83       	std	Y+4, r19	; 0x04
   14c64:	2b 83       	std	Y+3, r18	; 0x03
}
static inline mp_obj_dict_t *mp_globals_get(void) {
    return MP_STATE_THREAD(dict_globals);
}
static inline void mp_globals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_globals) = d;
   14c66:	97 83       	std	Z+7, r25	; 0x07
   14c68:	86 83       	std	Z+6, r24	; 0x06

static inline mp_obj_dict_t *mp_locals_get(void) {
    return MP_STATE_THREAD(dict_locals);
}
static inline void mp_locals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_locals) = d;
   14c6a:	95 83       	std	Z+5, r25	; 0x05
   14c6c:	84 83       	std	Z+4, r24	; 0x04
    // set new context
    mp_globals_set(mod_globals);
    mp_locals_set(mod_globals);

    nlr_buf_t nlr;
    if (nlr_push(&nlr) == 0) {
   14c6e:	ce 01       	movw	r24, r28
   14c70:	05 96       	adiw	r24, 0x05	; 5
   14c72:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   14c76:	ce 01       	movw	r24, r28
   14c78:	09 96       	adiw	r24, 0x09	; 9
   14c7a:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   14c7e:	89 2b       	or	r24, r25
   14c80:	b9 f4       	brne	.+46     	; 0x14cb0 <do_execute_raw_code+0x7c>
        mp_obj_t module_fun = mp_make_function_from_raw_code(raw_code, MP_OBJ_NULL, MP_OBJ_NULL);
   14c82:	40 e0       	ldi	r20, 0x00	; 0
   14c84:	50 e0       	ldi	r21, 0x00	; 0
   14c86:	60 e0       	ldi	r22, 0x00	; 0
   14c88:	70 e0       	ldi	r23, 0x00	; 0
   14c8a:	88 a1       	ldd	r24, Y+32	; 0x20
   14c8c:	99 a1       	ldd	r25, Y+33	; 0x21
   14c8e:	0e 94 48 34 	call	0x6890	; 0x6890 <mp_make_function_from_raw_code>
        mp_call_function_0(module_fun);
   14c92:	0e 94 21 25 	call	0x4a42	; 0x4a42 <mp_call_function_0>

        // finish nlr block, restore context
        nlr_pop();
   14c96:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
        mp_globals_set(old_globals);
   14c9a:	89 81       	ldd	r24, Y+1	; 0x01
   14c9c:	9a 81       	ldd	r25, Y+2	; 0x02
}
static inline mp_obj_dict_t *mp_globals_get(void) {
    return MP_STATE_THREAD(dict_globals);
}
static inline void mp_globals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_globals) = d;
   14c9e:	ea e5       	ldi	r30, 0x5A	; 90
   14ca0:	fb e6       	ldi	r31, 0x6B	; 107
   14ca2:	97 83       	std	Z+7, r25	; 0x07
   14ca4:	86 83       	std	Z+6, r24	; 0x06
        mp_locals_set(old_locals);
   14ca6:	8b 81       	ldd	r24, Y+3	; 0x03
   14ca8:	9c 81       	ldd	r25, Y+4	; 0x04

static inline mp_obj_dict_t *mp_locals_get(void) {
    return MP_STATE_THREAD(dict_locals);
}
static inline void mp_locals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_locals) = d;
   14caa:	95 83       	std	Z+5, r25	; 0x05
   14cac:	84 83       	std	Z+4, r24	; 0x04
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
        nlr_jump(nlr.ret_val);
    }
}
   14cae:	0e c0       	rjmp	.+28     	; 0x14ccc <do_execute_raw_code+0x98>
        nlr_pop();
        mp_globals_set(old_globals);
        mp_locals_set(old_locals);
    } else {
        // exception; restore context and re-raise same exception
        mp_globals_set(old_globals);
   14cb0:	89 81       	ldd	r24, Y+1	; 0x01
   14cb2:	9a 81       	ldd	r25, Y+2	; 0x02
}
static inline mp_obj_dict_t *mp_globals_get(void) {
    return MP_STATE_THREAD(dict_globals);
}
static inline void mp_globals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_globals) = d;
   14cb4:	ea e5       	ldi	r30, 0x5A	; 90
   14cb6:	fb e6       	ldi	r31, 0x6B	; 107
   14cb8:	97 83       	std	Z+7, r25	; 0x07
   14cba:	86 83       	std	Z+6, r24	; 0x06
        mp_locals_set(old_locals);
   14cbc:	8b 81       	ldd	r24, Y+3	; 0x03
   14cbe:	9c 81       	ldd	r25, Y+4	; 0x04

static inline mp_obj_dict_t *mp_locals_get(void) {
    return MP_STATE_THREAD(dict_locals);
}
static inline void mp_locals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_locals) = d;
   14cc0:	95 83       	std	Z+5, r25	; 0x05
   14cc2:	84 83       	std	Z+4, r24	; 0x04
        nlr_jump(nlr.ret_val);
   14cc4:	8f 81       	ldd	r24, Y+7	; 0x07
   14cc6:	98 85       	ldd	r25, Y+8	; 0x08
   14cc8:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
    }
}
   14ccc:	a1 96       	adiw	r28, 0x21	; 33
   14cce:	0f b6       	in	r0, 0x3f	; 63
   14cd0:	f8 94       	cli
   14cd2:	de bf       	out	0x3e, r29	; 62
   14cd4:	0f be       	out	0x3f, r0	; 63
   14cd6:	cd bf       	out	0x3d, r28	; 61
   14cd8:	df 91       	pop	r29
   14cda:	cf 91       	pop	r28
   14cdc:	08 95       	ret

00014cde <do_load>:
#endif

STATIC void do_load(mp_obj_t module_obj, vstr_t *file) {
   14cde:	cf 92       	push	r12
   14ce0:	df 92       	push	r13
   14ce2:	ef 92       	push	r14
   14ce4:	ff 92       	push	r15
   14ce6:	0f 93       	push	r16
   14ce8:	1f 93       	push	r17
   14cea:	cf 93       	push	r28
   14cec:	df 93       	push	r29
   14cee:	00 d0       	rcall	.+0      	; 0x14cf0 <do_load+0x12>
   14cf0:	cd b7       	in	r28, 0x3d	; 61
   14cf2:	de b7       	in	r29, 0x3e	; 62
   14cf4:	6c 01       	movw	r12, r24
   14cf6:	8b 01       	movw	r16, r22
    #if MICROPY_MODULE_FROZEN || MICROPY_ENABLE_COMPILER || (MICROPY_PERSISTENT_CODE_LOAD && MICROPY_HAS_FILE_READER)
    char *file_str = vstr_null_terminated_str(file);
   14cf8:	cb 01       	movw	r24, r22
   14cfa:	0e 94 46 4e 	call	0x9c8c	; 0x9c8c <vstr_null_terminated_str>
   14cfe:	7c 01       	movw	r14, r24

    // If we support frozen modules (either as str or mpy) then try to find the
    // requested filename in the list of frozen module filenames.
    #if MICROPY_MODULE_FROZEN
    void *modref;
    int frozen_type = mp_find_frozen_module(file_str, file->len, &modref);
   14d00:	f8 01       	movw	r30, r16
   14d02:	62 81       	ldd	r22, Z+2	; 0x02
   14d04:	73 81       	ldd	r23, Z+3	; 0x03
   14d06:	ae 01       	movw	r20, r28
   14d08:	4f 5f       	subi	r20, 0xFF	; 255
   14d0a:	5f 4f       	sbci	r21, 0xFF	; 255
   14d0c:	0e 94 10 24 	call	0x4820	; 0x4820 <mp_find_frozen_module>
    #endif

    // If we support frozen mpy modules and we found a corresponding file (and
    // its data) in the list of frozen files, execute it.
    #if MICROPY_MODULE_FROZEN_MPY
    if (frozen_type == MP_FROZEN_MPY) {
   14d10:	02 97       	sbiw	r24, 0x02	; 2
   14d12:	31 f4       	brne	.+12     	; 0x14d20 <do_load+0x42>
        do_execute_raw_code(module_obj, modref, file_str);
   14d14:	69 81       	ldd	r22, Y+1	; 0x01
   14d16:	7a 81       	ldd	r23, Y+2	; 0x02
   14d18:	a7 01       	movw	r20, r14
   14d1a:	c6 01       	movw	r24, r12
   14d1c:	8b df       	rcall	.-234    	; 0x14c34 <do_execute_raw_code>
        return;
   14d1e:	09 c0       	rjmp	.+18     	; 0x14d32 <do_load+0x54>
    #endif

    // If we can compile scripts then load the file and compile and execute it.
    #if MICROPY_ENABLE_COMPILER
    {
        mp_lexer_t *lex = mp_lexer_new_from_file(file_str);
   14d20:	c7 01       	movw	r24, r14
   14d22:	0e 94 be 00 	call	0x17c	; 0x17c <mp_lexer_new_from_file>
   14d26:	f6 01       	movw	r30, r12
   14d28:	42 81       	ldd	r20, Z+2	; 0x02
   14d2a:	53 81       	ldd	r21, Z+3	; 0x03
    mp_store_attr(module_obj, MP_QSTR___file__, MP_OBJ_NEW_QSTR(source_name));
    #endif

    // parse, compile and execute the module in its context
    mp_obj_dict_t *mod_globals = mp_obj_module_get_globals(module_obj);
    mp_parse_compile_execute(lex, MP_PARSE_FILE_INPUT, mod_globals, mod_globals);
   14d2c:	9a 01       	movw	r18, r20
   14d2e:	61 e0       	ldi	r22, 0x01	; 1
   14d30:	49 d8       	rcall	.-3950   	; 0x13dc4 <mp_parse_compile_execute>
    }
    #else
    // If we get here then the file was not frozen and we can't compile scripts.
    mp_raise_msg(&mp_type_ImportError, MP_ERROR_TEXT("script compilation not supported"));
    #endif
}
   14d32:	0f 90       	pop	r0
   14d34:	0f 90       	pop	r0
   14d36:	df 91       	pop	r29
   14d38:	cf 91       	pop	r28
   14d3a:	1f 91       	pop	r17
   14d3c:	0f 91       	pop	r16
   14d3e:	ff 90       	pop	r15
   14d40:	ef 90       	pop	r14
   14d42:	df 90       	pop	r13
   14d44:	cf 90       	pop	r12
   14d46:	08 95       	ret

00014d48 <mp_builtin___import__>:
        }
    }
    *end = p;
}

mp_obj_t mp_builtin___import__(size_t n_args, const mp_obj_t *args) {
   14d48:	2f 92       	push	r2
   14d4a:	3f 92       	push	r3
   14d4c:	4f 92       	push	r4
   14d4e:	5f 92       	push	r5
   14d50:	6f 92       	push	r6
   14d52:	7f 92       	push	r7
   14d54:	8f 92       	push	r8
   14d56:	9f 92       	push	r9
   14d58:	af 92       	push	r10
   14d5a:	bf 92       	push	r11
   14d5c:	cf 92       	push	r12
   14d5e:	df 92       	push	r13
   14d60:	ef 92       	push	r14
   14d62:	ff 92       	push	r15
   14d64:	0f 93       	push	r16
   14d66:	1f 93       	push	r17
   14d68:	cf 93       	push	r28
   14d6a:	df 93       	push	r29
   14d6c:	cd b7       	in	r28, 0x3d	; 61
   14d6e:	de b7       	in	r29, 0x3e	; 62
   14d70:	c1 51       	subi	r28, 0x11	; 17
   14d72:	d1 40       	sbci	r29, 0x01	; 1
   14d74:	0f b6       	in	r0, 0x3f	; 63
   14d76:	f8 94       	cli
   14d78:	de bf       	out	0x3e, r29	; 62
   14d7a:	0f be       	out	0x3f, r0	; 63
   14d7c:	cd bf       	out	0x3d, r28	; 61
   14d7e:	fb 01       	movw	r30, r22
    if (fromtuple != mp_const_none) {
        return module_obj;
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
}
   14d80:	ad b6       	in	r10, 0x3d	; 61
   14d82:	be b6       	in	r11, 0x3e	; 62
        mp_obj_print_helper(MICROPY_DEBUG_PRINTER, args[i], PRINT_REPR);
        DEBUG_printf("\n");
    }
    #endif

    mp_obj_t module_name = args[0];
   14d84:	80 80       	ld	r8, Z
   14d86:	91 80       	ldd	r9, Z+1	; 0x01
    mp_obj_t fromtuple = mp_const_none;
    mp_int_t level = 0;
    if (n_args >= 4) {
   14d88:	84 30       	cpi	r24, 0x04	; 4
   14d8a:	91 05       	cpc	r25, r1
   14d8c:	08 f4       	brcc	.+2      	; 0x14d90 <mp_builtin___import__+0x48>
   14d8e:	15 c2       	rjmp	.+1066   	; 0x151ba <mp_builtin___import__+0x472>
        fromtuple = args[3];
   14d90:	66 80       	ldd	r6, Z+6	; 0x06
   14d92:	77 80       	ldd	r7, Z+7	; 0x07
        if (n_args >= 5) {
   14d94:	05 97       	sbiw	r24, 0x05	; 5
   14d96:	08 f4       	brcc	.+2      	; 0x14d9a <mp_builtin___import__+0x52>
   14d98:	15 c2       	rjmp	.+1066   	; 0x151c4 <mp_builtin___import__+0x47c>
            level = MP_OBJ_SMALL_INT_VALUE(args[4]);
   14d9a:	e0 84       	ldd	r14, Z+8	; 0x08
   14d9c:	f1 84       	ldd	r15, Z+9	; 0x09
   14d9e:	f5 94       	asr	r15
   14da0:	e7 94       	ror	r14
            if (level < 0) {
   14da2:	ff 20       	and	r15, r15
   14da4:	24 f4       	brge	.+8      	; 0x14dae <mp_builtin___import__+0x66>
                mp_raise_ValueError(NULL);
   14da6:	80 e0       	ldi	r24, 0x00	; 0
   14da8:	90 e0       	ldi	r25, 0x00	; 0
   14daa:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   14dae:	be 01       	movw	r22, r28
   14db0:	6f 5f       	subi	r22, 0xFF	; 255
   14db2:	7f 4f       	sbci	r23, 0xFF	; 255
   14db4:	c4 01       	movw	r24, r8
   14db6:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
   14dba:	6c 01       	movw	r12, r24

    if (level != 0) {
   14dbc:	e1 14       	cp	r14, r1
   14dbe:	f1 04       	cpc	r15, r1
   14dc0:	09 f4       	brne	.+2      	; 0x14dc4 <mp_builtin___import__+0x7c>
   14dc2:	ae c0       	rjmp	.+348    	; 0x14f20 <mp_builtin___import__+0x1d8>
        // module name, thus resolving relative import name into absolute.
        // This even appears to be correct per
        // http://legacy.python.org/dev/peps/pep-0328/#relative-imports-and-name
        // "Relative imports use a module's __name__ attribute to determine that
        // module's position in the package hierarchy."
        level--;
   14dc4:	21 e0       	ldi	r18, 0x01	; 1
   14dc6:	e2 1a       	sub	r14, r18
   14dc8:	f1 08       	sbc	r15, r1
        mp_obj_t this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___name__));
   14dca:	6a eb       	ldi	r22, 0xBA	; 186
   14dcc:	70 e0       	ldi	r23, 0x00	; 0
   14dce:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
   14dd2:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
   14dd6:	04 d9       	rcall	.-3576   	; 0x13fe0 <mp_obj_dict_get>
   14dd8:	8c 01       	movw	r16, r24
        assert(this_name_q != MP_OBJ_NULL);
   14dda:	89 2b       	or	r24, r25
   14ddc:	11 f4       	brne	.+4      	; 0x14de2 <mp_builtin___import__+0x9a>
   14dde:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
        if (MP_OBJ_QSTR_VALUE(this_name_q) == MP_QSTR___main__) {
            // This is a module run by -m command-line switch, get its real name from backup attribute
            this_name_q = mp_obj_dict_get(MP_OBJ_FROM_PTR(mp_globals_get()), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
        }
        #endif
        mp_map_t *globals_map = &mp_globals_get()->map;
   14de2:	80 91 60 6b 	lds	r24, 0x6B60	; 0x806b60 <mp_state_ctx+0x6>
   14de6:	90 91 61 6b 	lds	r25, 0x6B61	; 0x806b61 <mp_state_ctx+0x7>
        mp_map_elem_t *elem = mp_map_lookup(globals_map, MP_OBJ_NEW_QSTR(MP_QSTR___path__), MP_MAP_LOOKUP);
   14dea:	40 e0       	ldi	r20, 0x00	; 0
   14dec:	6a e9       	ldi	r22, 0x9A	; 154
   14dee:	75 e0       	ldi	r23, 0x05	; 5
   14df0:	02 96       	adiw	r24, 0x02	; 2
   14df2:	0e 94 57 3c 	call	0x78ae	; 0x78ae <mp_map_lookup>
   14df6:	4c 01       	movw	r8, r24
        DEBUG_printf(", is_package: %d", is_pkg);
        DEBUG_printf("\n");
        #endif

        size_t this_name_l;
        const char *this_name = mp_obj_str_get_data(this_name_q, &this_name_l);
   14df8:	be 01       	movw	r22, r28
   14dfa:	66 5f       	subi	r22, 0xF6	; 246
   14dfc:	7e 4f       	sbci	r23, 0xFE	; 254
   14dfe:	c8 01       	movw	r24, r16
   14e00:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
   14e04:	bc 01       	movw	r22, r24

        const char *p = this_name + this_name_l;
   14e06:	c6 5f       	subi	r28, 0xF6	; 246
   14e08:	de 4f       	sbci	r29, 0xFE	; 254
   14e0a:	e8 81       	ld	r30, Y
   14e0c:	f9 81       	ldd	r31, Y+1	; 0x01
   14e0e:	ca 50       	subi	r28, 0x0A	; 10
   14e10:	d1 40       	sbci	r29, 0x01	; 1
   14e12:	e8 0f       	add	r30, r24
   14e14:	f9 1f       	adc	r31, r25
        if (!is_pkg) {
   14e16:	89 28       	or	r8, r9
   14e18:	79 f4       	brne	.+30     	; 0x14e38 <mp_builtin___import__+0xf0>
   14e1a:	08 c0       	rjmp	.+16     	; 0x14e2c <mp_builtin___import__+0xe4>
}

STATIC void chop_component(const char *start, const char **end) {
    const char *p = *end;
    while (p > start) {
        if (*--p == '.') {
   14e1c:	82 91       	ld	r24, -Z
   14e1e:	8e 32       	cpi	r24, 0x2E	; 46
   14e20:	59 f0       	breq	.+22     	; 0x14e38 <mp_builtin___import__+0xf0>
    #endif
}

STATIC void chop_component(const char *start, const char **end) {
    const char *p = *end;
    while (p > start) {
   14e22:	6e 17       	cp	r22, r30
   14e24:	7f 07       	cpc	r23, r31
   14e26:	d1 f7       	brne	.-12     	; 0x14e1c <mp_builtin___import__+0xd4>
   14e28:	fb 01       	movw	r30, r22
   14e2a:	06 c0       	rjmp	.+12     	; 0x14e38 <mp_builtin___import__+0xf0>
   14e2c:	8e 17       	cp	r24, r30
   14e2e:	9f 07       	cpc	r25, r31
   14e30:	18 f4       	brcc	.+6      	; 0x14e38 <mp_builtin___import__+0xf0>
        if (*--p == '.') {
   14e32:	82 91       	ld	r24, -Z
   14e34:	8e 32       	cpi	r24, 0x2E	; 46
   14e36:	a9 f7       	brne	.-22     	; 0x14e22 <mp_builtin___import__+0xda>
    #endif
}

STATIC void chop_component(const char *start, const char **end) {
    const char *p = *end;
    while (p > start) {
   14e38:	26 2f       	mov	r18, r22
   14e3a:	97 2f       	mov	r25, r23
   14e3c:	0f c0       	rjmp	.+30     	; 0x14e5c <mp_builtin___import__+0x114>
        if (*--p == '.') {
   14e3e:	82 91       	ld	r24, -Z
   14e40:	8e 32       	cpi	r24, 0x2E	; 46
   14e42:	61 f0       	breq	.+24     	; 0x14e5c <mp_builtin___import__+0x114>
    #endif
}

STATIC void chop_component(const char *start, const char **end) {
    const char *p = *end;
    while (p > start) {
   14e44:	6e 17       	cp	r22, r30
   14e46:	7f 07       	cpc	r23, r31
   14e48:	d1 f7       	brne	.-12     	; 0x14e3e <mp_builtin___import__+0xf6>
   14e4a:	e2 2f       	mov	r30, r18
   14e4c:	f9 2f       	mov	r31, r25
   14e4e:	06 c0       	rjmp	.+12     	; 0x14e5c <mp_builtin___import__+0x114>
   14e50:	6e 17       	cp	r22, r30
   14e52:	7f 07       	cpc	r23, r31
   14e54:	18 f4       	brcc	.+6      	; 0x14e5c <mp_builtin___import__+0x114>
        if (*--p == '.') {
   14e56:	82 91       	ld	r24, -Z
   14e58:	8e 32       	cpi	r24, 0x2E	; 46
   14e5a:	a1 f7       	brne	.-24     	; 0x14e44 <mp_builtin___import__+0xfc>
            // We have module, but relative imports are anchored at package, so
            // go there.
            chop_component(this_name, &p);
        }

        while (level--) {
   14e5c:	81 e0       	ldi	r24, 0x01	; 1
   14e5e:	e8 1a       	sub	r14, r24
   14e60:	f1 08       	sbc	r15, r1
   14e62:	b0 f7       	brcc	.-20     	; 0x14e50 <mp_builtin___import__+0x108>
            chop_component(this_name, &p);
        }

        // We must have some component left over to import from
        if (p == this_name) {
   14e64:	6e 17       	cp	r22, r30
   14e66:	7f 07       	cpc	r23, r31
   14e68:	31 f4       	brne	.+12     	; 0x14e76 <mp_builtin___import__+0x12e>
            mp_raise_msg(&mp_type_ImportError, MP_ERROR_TEXT("can't perform relative import"));
   14e6a:	6e e5       	ldi	r22, 0x5E	; 94
   14e6c:	7d e0       	ldi	r23, 0x0D	; 13
   14e6e:	88 ed       	ldi	r24, 0xD8	; 216
   14e70:	90 e2       	ldi	r25, 0x20	; 32
   14e72:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   14e76:	e9 80       	ldd	r14, Y+1	; 0x01
   14e78:	fa 80       	ldd	r15, Y+2	; 0x02
   14e7a:	e1 14       	cp	r14, r1
   14e7c:	f1 04       	cpc	r15, r1
   14e7e:	a9 f4       	brne	.+42     	; 0x14eaa <mp_builtin___import__+0x162>
   14e80:	8f 01       	movw	r16, r30
   14e82:	06 1b       	sub	r16, r22
   14e84:	17 0b       	sbc	r17, r23
        char *new_mod = mp_local_alloc(new_mod_l);
   14e86:	ed b7       	in	r30, 0x3d	; 61
   14e88:	fe b7       	in	r31, 0x3e	; 62
   14e8a:	e0 1b       	sub	r30, r16
   14e8c:	f1 0b       	sbc	r31, r17
   14e8e:	0f b6       	in	r0, 0x3f	; 63
   14e90:	f8 94       	cli
   14e92:	fe bf       	out	0x3e, r31	; 62
   14e94:	0f be       	out	0x3f, r0	; 63
   14e96:	ed bf       	out	0x3d, r30	; 61
   14e98:	8d b7       	in	r24, 0x3d	; 61
   14e9a:	9e b7       	in	r25, 0x3e	; 62
   14e9c:	01 96       	adiw	r24, 0x01	; 1
   14e9e:	28 2e       	mov	r2, r24
   14ea0:	39 2e       	mov	r3, r25
        memcpy(new_mod, this_name, p - this_name);
   14ea2:	a8 01       	movw	r20, r16
   14ea4:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
   14ea8:	28 c0       	rjmp	.+80     	; 0x14efa <mp_builtin___import__+0x1b2>
        // We must have some component left over to import from
        if (p == this_name) {
            mp_raise_msg(&mp_type_ImportError, MP_ERROR_TEXT("can't perform relative import"));
        }

        uint new_mod_l = (mod_len == 0 ? (size_t)(p - this_name) : (size_t)(p - this_name) + 1 + mod_len);
   14eaa:	2f 01       	movw	r4, r30
   14eac:	46 1a       	sub	r4, r22
   14eae:	57 0a       	sbc	r5, r23
   14eb0:	87 01       	movw	r16, r14
   14eb2:	0f 5f       	subi	r16, 0xFF	; 255
   14eb4:	1f 4f       	sbci	r17, 0xFF	; 255
   14eb6:	04 0d       	add	r16, r4
   14eb8:	15 1d       	adc	r17, r5
        char *new_mod = mp_local_alloc(new_mod_l);
   14eba:	8d b7       	in	r24, 0x3d	; 61
   14ebc:	9e b7       	in	r25, 0x3e	; 62
   14ebe:	80 1b       	sub	r24, r16
   14ec0:	91 0b       	sbc	r25, r17
   14ec2:	0f b6       	in	r0, 0x3f	; 63
   14ec4:	f8 94       	cli
   14ec6:	9e bf       	out	0x3e, r25	; 62
   14ec8:	0f be       	out	0x3f, r0	; 63
   14eca:	8d bf       	out	0x3d, r24	; 61
   14ecc:	ed b7       	in	r30, 0x3d	; 61
   14ece:	fe b7       	in	r31, 0x3e	; 62
   14ed0:	31 96       	adiw	r30, 0x01	; 1
   14ed2:	4f 01       	movw	r8, r30
   14ed4:	2e 2e       	mov	r2, r30
   14ed6:	39 2c       	mov	r3, r9
        memcpy(new_mod, this_name, p - this_name);
   14ed8:	a2 01       	movw	r20, r4
   14eda:	cf 01       	movw	r24, r30
   14edc:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
        if (mod_len != 0) {
            new_mod[p - this_name] = '.';
   14ee0:	f4 01       	movw	r30, r8
   14ee2:	e4 0d       	add	r30, r4
   14ee4:	f5 1d       	adc	r31, r5
   14ee6:	8e e2       	ldi	r24, 0x2E	; 46
   14ee8:	80 83       	st	Z, r24
            memcpy(new_mod + (p - this_name) + 1, mod_str, mod_len);
   14eea:	c2 01       	movw	r24, r4
   14eec:	01 96       	adiw	r24, 0x01	; 1
   14eee:	a7 01       	movw	r20, r14
   14ef0:	b6 01       	movw	r22, r12
   14ef2:	88 0d       	add	r24, r8
   14ef4:	99 1d       	adc	r25, r9
   14ef6:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
        }

        qstr new_mod_q = qstr_from_strn(new_mod, new_mod_l);
   14efa:	b8 01       	movw	r22, r16
   14efc:	82 2d       	mov	r24, r2
   14efe:	93 2d       	mov	r25, r3
   14f00:	0e 94 38 7c 	call	0xf870	; 0xf870 <qstr_from_strn>
        mp_local_free(new_mod);
        DEBUG_printf("Resolved base name for relative import: '%s'\n", qstr_str(new_mod_q));
        module_name = MP_OBJ_NEW_QSTR(new_mod_q);
   14f04:	4c 01       	movw	r8, r24
   14f06:	88 0c       	add	r8, r8
   14f08:	99 1c       	adc	r9, r9
   14f0a:	88 0c       	add	r8, r8
   14f0c:	99 1c       	adc	r9, r9
   14f0e:	88 0c       	add	r8, r8
   14f10:	99 1c       	adc	r9, r9
   14f12:	68 94       	set
   14f14:	81 f8       	bld	r8, 1
        mod_str = qstr_str(new_mod_q);
   14f16:	0e 94 57 0b 	call	0x16ae	; 0x16ae <qstr_str>
   14f1a:	6c 01       	movw	r12, r24
        mod_len = new_mod_l;
   14f1c:	1a 83       	std	Y+2, r17	; 0x02
   14f1e:	09 83       	std	Y+1, r16	; 0x01
    }

    if (mod_len == 0) {
   14f20:	89 81       	ldd	r24, Y+1	; 0x01
   14f22:	9a 81       	ldd	r25, Y+2	; 0x02
   14f24:	89 2b       	or	r24, r25
   14f26:	21 f4       	brne	.+8      	; 0x14f30 <mp_builtin___import__+0x1e8>
        mp_raise_ValueError(NULL);
   14f28:	80 e0       	ldi	r24, 0x00	; 0
   14f2a:	90 e0       	ldi	r25, 0x00	; 0
   14f2c:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
    }

    // check if module already exists
    qstr module_name_qstr = mp_obj_str_get_qstr(module_name);
   14f30:	c4 01       	movw	r24, r8
   14f32:	0e 94 d6 81 	call	0x103ac	; 0x103ac <mp_obj_str_get_qstr>
    mp_obj_t module_obj = mp_module_get(module_name_qstr);
   14f36:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <mp_module_get>
   14f3a:	8c 01       	movw	r16, r24
    if (module_obj != MP_OBJ_NULL) {
   14f3c:	89 2b       	or	r24, r25
   14f3e:	b1 f0       	breq	.+44     	; 0x14f6c <mp_builtin___import__+0x224>
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
   14f40:	6e e2       	ldi	r22, 0x2E	; 46
   14f42:	70 e0       	ldi	r23, 0x00	; 0
   14f44:	c6 01       	movw	r24, r12
   14f46:	0e 94 b3 c2 	call	0x18566	; 0x18566 <strchr>
        if (p == NULL) {
   14f4a:	00 97       	sbiw	r24, 0x00	; 0
   14f4c:	09 f4       	brne	.+2      	; 0x14f50 <mp_builtin___import__+0x208>
   14f4e:	2c c1       	rjmp	.+600    	; 0x151a8 <mp_builtin___import__+0x460>
            return module_obj;
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
   14f50:	f6 e0       	ldi	r31, 0x06	; 6
   14f52:	6f 16       	cp	r6, r31
   14f54:	71 04       	cpc	r7, r1
   14f56:	09 f0       	breq	.+2      	; 0x14f5a <mp_builtin___import__+0x212>
   14f58:	2a c1       	rjmp	.+596    	; 0x151ae <mp_builtin___import__+0x466>
            return module_obj;
        }
        // Otherwise, we need to return top-level package
        qstr pkg_name = qstr_from_strn(mod_str, p - mod_str);
   14f5a:	bc 01       	movw	r22, r24
   14f5c:	6c 19       	sub	r22, r12
   14f5e:	7d 09       	sbc	r23, r13
   14f60:	c6 01       	movw	r24, r12
   14f62:	0e 94 38 7c 	call	0xf870	; 0xf870 <qstr_from_strn>
        return mp_module_get(pkg_name);
   14f66:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <mp_module_get>
   14f6a:	3a c1       	rjmp	.+628    	; 0x151e0 <mp_builtin___import__+0x498>
    vstr_init(vstr, len + 1);
    vstr->len = len;
}

void vstr_init_fixed_buf(vstr_t *vstr, size_t alloc, char *buf) {
    vstr->alloc = alloc;
   14f6c:	80 e0       	ldi	r24, 0x00	; 0
   14f6e:	91 e0       	ldi	r25, 0x01	; 1
   14f70:	9c 83       	std	Y+4, r25	; 0x04
   14f72:	8b 83       	std	Y+3, r24	; 0x03
    vstr->len = 0;
   14f74:	1e 82       	std	Y+6, r1	; 0x06
   14f76:	1d 82       	std	Y+5, r1	; 0x05
    vstr->buf = buf;
   14f78:	ce 01       	movw	r24, r28
   14f7a:	0a 96       	adiw	r24, 0x0a	; 10
   14f7c:	98 87       	std	Y+8, r25	; 0x08
   14f7e:	8f 83       	std	Y+7, r24	; 0x07
    vstr->fixed_buf = true;
   14f80:	89 85       	ldd	r24, Y+9	; 0x09
   14f82:	81 60       	ori	r24, 0x01	; 1
   14f84:	89 87       	std	Y+9, r24	; 0x09
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
    module_obj = MP_OBJ_NULL;
    mp_obj_t top_module_obj = MP_OBJ_NULL;
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
    uint i;
    for (i = 1; i <= mod_len; i++) {
   14f86:	89 81       	ldd	r24, Y+1	; 0x01
   14f88:	9a 81       	ldd	r25, Y+2	; 0x02
   14f8a:	00 97       	sbiw	r24, 0x00	; 0
   14f8c:	09 f4       	brne	.+2      	; 0x14f90 <mp_builtin___import__+0x248>
   14f8e:	f5 c0       	rjmp	.+490    	; 0x1517a <mp_builtin___import__+0x432>
   14f90:	76 01       	movw	r14, r12
   14f92:	01 e0       	ldi	r16, 0x01	; 1
   14f94:	10 e0       	ldi	r17, 0x00	; 0
   14f96:	21 2c       	mov	r2, r1
   14f98:	31 2c       	mov	r3, r1
   14f9a:	c0 5f       	subi	r28, 0xF0	; 240
   14f9c:	de 4f       	sbci	r29, 0xFE	; 254
   14f9e:	19 82       	std	Y+1, r1	; 0x01
   14fa0:	18 82       	st	Y, r1
   14fa2:	c0 51       	subi	r28, 0x10	; 16
   14fa4:	d1 40       	sbci	r29, 0x01	; 1
   14fa6:	81 2c       	mov	r8, r1
   14fa8:	91 2c       	mov	r9, r1
   14faa:	41 2c       	mov	r4, r1
   14fac:	51 2c       	mov	r5, r1
        if (i == mod_len || mod_str[i] == '.') {
   14fae:	08 17       	cp	r16, r24
   14fb0:	19 07       	cpc	r17, r25
   14fb2:	29 f0       	breq	.+10     	; 0x14fbe <mp_builtin___import__+0x276>
   14fb4:	f7 01       	movw	r30, r14
   14fb6:	81 81       	ldd	r24, Z+1	; 0x01
   14fb8:	8e 32       	cpi	r24, 0x2E	; 46
   14fba:	09 f0       	breq	.+2      	; 0x14fbe <mp_builtin___import__+0x276>
   14fbc:	d2 c0       	rjmp	.+420    	; 0x15162 <mp_builtin___import__+0x41a>
            // create a qstr for the module name up to this depth
            qstr mod_name = qstr_from_strn(mod_str, i);
   14fbe:	b8 01       	movw	r22, r16
   14fc0:	c6 01       	movw	r24, r12
   14fc2:	0e 94 38 7c 	call	0xf870	; 0xf870 <qstr_from_strn>
   14fc6:	c2 5f       	subi	r28, 0xF2	; 242
   14fc8:	de 4f       	sbci	r29, 0xFE	; 254
   14fca:	99 83       	std	Y+1, r25	; 0x01
   14fcc:	88 83       	st	Y, r24
   14fce:	ce 50       	subi	r28, 0x0E	; 14
   14fd0:	d1 40       	sbci	r29, 0x01	; 1
            DEBUG_printf("Processing module: %s\n", qstr_str(mod_name));
            DEBUG_printf("Previous path: =%.*s=\n", vstr_len(&path), vstr_str(&path));

            // find the file corresponding to the module name
            mp_import_stat_t stat;
            if (vstr_len(&path) == 0) {
   14fd2:	8d 81       	ldd	r24, Y+5	; 0x05
   14fd4:	9e 81       	ldd	r25, Y+6	; 0x06
   14fd6:	89 2b       	or	r24, r25
   14fd8:	81 f4       	brne	.+32     	; 0x14ffa <mp_builtin___import__+0x2b2>
        return MP_IMPORT_STAT_NO_EXIST;
    }
    #endif

    // mp_sys_path is empty, so just use the given file name
    vstr_add_strn(dest, file_str, file_len);
   14fda:	a8 01       	movw	r20, r16
   14fdc:	b6 01       	movw	r22, r12
   14fde:	ce 01       	movw	r24, r28
   14fe0:	03 96       	adiw	r24, 0x03	; 3
   14fe2:	0e 94 a9 4e 	call	0x9d52	; 0x9d52 <vstr_add_strn>
    return stat_dir_or_file(dest);
   14fe6:	ce 01       	movw	r24, r28
   14fe8:	03 96       	adiw	r24, 0x03	; 3
   14fea:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <stat_dir_or_file>
   14fee:	c4 5f       	subi	r28, 0xF4	; 244
   14ff0:	de 4f       	sbci	r29, 0xFE	; 254
   14ff2:	88 83       	st	Y, r24
   14ff4:	cc 50       	subi	r28, 0x0C	; 12
   14ff6:	d1 40       	sbci	r29, 0x01	; 1
   14ff8:	18 c0       	rjmp	.+48     	; 0x1502a <mp_builtin___import__+0x2e2>
        buf[1] = ((c >> 12) & 0x3F) | 0x80;
        buf[2] = ((c >> 6) & 0x3F) | 0x80;
        buf[3] = (c & 0x3F) | 0x80;
    }
    #else
    vstr_add_byte(vstr, c);
   14ffa:	6f e2       	ldi	r22, 0x2F	; 47
   14ffc:	ce 01       	movw	r24, r28
   14ffe:	03 96       	adiw	r24, 0x03	; 3
   15000:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <vstr_add_byte>
                // first module in the dotted-name; search for a directory or file
                stat = find_file(mod_str, i, &path);
            } else {
                // latter module in the dotted-name; append to path
                vstr_add_char(&path, PATH_SEP_CHAR);
                vstr_add_strn(&path, mod_str + last, i - last);
   15004:	a8 01       	movw	r20, r16
   15006:	48 19       	sub	r20, r8
   15008:	59 09       	sbc	r21, r9
   1500a:	b6 01       	movw	r22, r12
   1500c:	68 0d       	add	r22, r8
   1500e:	79 1d       	adc	r23, r9
   15010:	ce 01       	movw	r24, r28
   15012:	03 96       	adiw	r24, 0x03	; 3
   15014:	0e 94 a9 4e 	call	0x9d52	; 0x9d52 <vstr_add_strn>
                stat = stat_dir_or_file(&path);
   15018:	ce 01       	movw	r24, r28
   1501a:	03 96       	adiw	r24, 0x03	; 3
   1501c:	0e 94 d5 4e 	call	0x9daa	; 0x9daa <stat_dir_or_file>
   15020:	c4 5f       	subi	r28, 0xF4	; 244
   15022:	de 4f       	sbci	r29, 0xFE	; 254
   15024:	88 83       	st	Y, r24
   15026:	cc 50       	subi	r28, 0x0C	; 12
   15028:	d1 40       	sbci	r29, 0x01	; 1
            }
            DEBUG_printf("Current path: %.*s\n", vstr_len(&path), vstr_str(&path));

            if (stat == MP_IMPORT_STAT_NO_EXIST) {
   1502a:	c4 5f       	subi	r28, 0xF4	; 244
   1502c:	de 4f       	sbci	r29, 0xFE	; 254
   1502e:	f8 81       	ld	r31, Y
   15030:	cc 50       	subi	r28, 0x0C	; 12
   15032:	d1 40       	sbci	r29, 0x01	; 1
   15034:	f1 11       	cpse	r31, r1
   15036:	06 c0       	rjmp	.+12     	; 0x15044 <mp_builtin___import__+0x2fc>
                }
                #endif
                if (module_obj == MP_OBJ_NULL) {
                    // couldn't find the file, so fail
                    #if MICROPY_ERROR_REPORTING <= MICROPY_ERROR_REPORTING_TERSE
                    mp_raise_msg(&mp_type_ImportError, MP_ERROR_TEXT("module not found"));
   15038:	6c e7       	ldi	r22, 0x7C	; 124
   1503a:	7d e0       	ldi	r23, 0x0D	; 13
   1503c:	88 ed       	ldi	r24, 0xD8	; 216
   1503e:	90 e2       	ldi	r25, 0x20	; 32
   15040:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>
                    mp_raise_msg_varg(&mp_type_ImportError, MP_ERROR_TEXT("no module named '%q'"), mod_name);
                    #endif
                }
            } else {
                // found the file, so get the module
                module_obj = mp_module_get(mod_name);
   15044:	c2 5f       	subi	r28, 0xF2	; 242
   15046:	de 4f       	sbci	r29, 0xFE	; 254
   15048:	88 81       	ld	r24, Y
   1504a:	99 81       	ldd	r25, Y+1	; 0x01
   1504c:	ce 50       	subi	r28, 0x0E	; 14
   1504e:	d1 40       	sbci	r29, 0x01	; 1
   15050:	0e 94 e8 42 	call	0x85d0	; 0x85d0 <mp_module_get>
   15054:	2c 01       	movw	r4, r24
            }

            if (module_obj == MP_OBJ_NULL) {
   15056:	89 2b       	or	r24, r25
   15058:	09 f0       	breq	.+2      	; 0x1505c <mp_builtin___import__+0x314>
   1505a:	60 c0       	rjmp	.+192    	; 0x1511c <mp_builtin___import__+0x3d4>
                // module not already loaded, so load it!

                module_obj = mp_obj_new_module(mod_name);
   1505c:	c2 5f       	subi	r28, 0xF2	; 242
   1505e:	de 4f       	sbci	r29, 0xFE	; 254
   15060:	88 81       	ld	r24, Y
   15062:	99 81       	ldd	r25, Y+1	; 0x01
   15064:	ce 50       	subi	r28, 0x0E	; 14
   15066:	d1 40       	sbci	r29, 0x01	; 1
   15068:	0e 94 8c 4a 	call	0x9518	; 0x9518 <mp_obj_new_module>
   1506c:	2c 01       	movw	r4, r24
                // for *modules* however - packages never have their names
                // replaced, instead they're -m'ed using a special __main__
                // submodule in them. (This all apparently is done to not
                // touch package name itself, which is important for future
                // imports).
                if (i == mod_len && fromtuple == mp_const_false && stat != MP_IMPORT_STAT_DIR) {
   1506e:	89 81       	ldd	r24, Y+1	; 0x01
   15070:	9a 81       	ldd	r25, Y+2	; 0x02
   15072:	80 17       	cp	r24, r16
   15074:	91 07       	cpc	r25, r17
   15076:	a9 f4       	brne	.+42     	; 0x150a2 <mp_builtin___import__+0x35a>
   15078:	2e e0       	ldi	r18, 0x0E	; 14
   1507a:	62 16       	cp	r6, r18
   1507c:	71 04       	cpc	r7, r1
   1507e:	89 f4       	brne	.+34     	; 0x150a2 <mp_builtin___import__+0x35a>
   15080:	c4 5f       	subi	r28, 0xF4	; 244
   15082:	de 4f       	sbci	r29, 0xFE	; 254
   15084:	88 81       	ld	r24, Y
   15086:	cc 50       	subi	r28, 0x0C	; 12
   15088:	d1 40       	sbci	r29, 0x01	; 1
   1508a:	81 30       	cpi	r24, 0x01	; 1
   1508c:	89 f0       	breq	.+34     	; 0x150b0 <mp_builtin___import__+0x368>
                    mp_obj_module_t *o = MP_OBJ_TO_PTR(module_obj);
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___name__), MP_OBJ_NEW_QSTR(MP_QSTR___main__));
   1508e:	4a ea       	ldi	r20, 0xAA	; 170
   15090:	50 e0       	ldi	r21, 0x00	; 0
   15092:	6a eb       	ldi	r22, 0xBA	; 186
   15094:	70 e0       	ldi	r23, 0x00	; 0
   15096:	f2 01       	movw	r30, r4
   15098:	82 81       	ldd	r24, Z+2	; 0x02
   1509a:	93 81       	ldd	r25, Z+3	; 0x03
   1509c:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
   150a0:	38 c0       	rjmp	.+112    	; 0x15112 <mp_builtin___import__+0x3ca>
                    // Store real name in "__main__" attribute. Chosen semi-randonly, to reuse existing qstr's.
                    mp_obj_dict_store(MP_OBJ_FROM_PTR(o->globals), MP_OBJ_NEW_QSTR(MP_QSTR___main__), MP_OBJ_NEW_QSTR(mod_name));
                    #endif
                }

                if (stat == MP_IMPORT_STAT_DIR) {
   150a2:	c4 5f       	subi	r28, 0xF4	; 244
   150a4:	de 4f       	sbci	r29, 0xFE	; 254
   150a6:	f8 81       	ld	r31, Y
   150a8:	cc 50       	subi	r28, 0x0C	; 12
   150aa:	d1 40       	sbci	r29, 0x01	; 1
   150ac:	f1 30       	cpi	r31, 0x01	; 1
   150ae:	89 f5       	brne	.+98     	; 0x15112 <mp_builtin___import__+0x3ca>
                    DEBUG_printf("%.*s is dir\n", vstr_len(&path), vstr_str(&path));
                    // https://docs.python.org/3/reference/import.html
                    // "Specifically, any module that contains a __path__ attribute is considered a package."
                    mp_store_attr(module_obj, MP_QSTR___path__, mp_obj_new_str(vstr_str(&path), vstr_len(&path)));
   150b0:	6d 81       	ldd	r22, Y+5	; 0x05
   150b2:	7e 81       	ldd	r23, Y+6	; 0x06
   150b4:	8f 81       	ldd	r24, Y+7	; 0x07
   150b6:	98 85       	ldd	r25, Y+8	; 0x08
   150b8:	0e 94 8c 38 	call	0x7118	; 0x7118 <mp_obj_new_str>
   150bc:	ac 01       	movw	r20, r24
   150be:	63 eb       	ldi	r22, 0xB3	; 179
   150c0:	70 e0       	ldi	r23, 0x00	; 0
   150c2:	c2 01       	movw	r24, r4
   150c4:	0e 94 b5 24 	call	0x496a	; 0x496a <mp_store_attr>
                    size_t orig_path_len = path.len;
   150c8:	8d 81       	ldd	r24, Y+5	; 0x05
   150ca:	9e 81       	ldd	r25, Y+6	; 0x06
   150cc:	c4 5f       	subi	r28, 0xF4	; 244
   150ce:	de 4f       	sbci	r29, 0xFE	; 254
   150d0:	99 83       	std	Y+1, r25	; 0x01
   150d2:	88 83       	st	Y, r24
   150d4:	cc 50       	subi	r28, 0x0C	; 12
   150d6:	d1 40       	sbci	r29, 0x01	; 1
   150d8:	6f e2       	ldi	r22, 0x2F	; 47
   150da:	ce 01       	movw	r24, r28
   150dc:	03 96       	adiw	r24, 0x03	; 3
   150de:	0e 94 a0 4e 	call	0x9d40	; 0x9d40 <vstr_add_byte>
                    vstr_add_char(&path, PATH_SEP_CHAR);
                    vstr_add_str(&path, "__init__.py");
   150e2:	6d e8       	ldi	r22, 0x8D	; 141
   150e4:	7d e0       	ldi	r23, 0x0D	; 13
   150e6:	ce 01       	movw	r24, r28
   150e8:	03 96       	adiw	r24, 0x03	; 3
   150ea:	0e 94 cb 4e 	call	0x9d96	; 0x9d96 <vstr_add_str>
    #endif
    return mp_import_stat(path);
}

STATIC mp_import_stat_t stat_file_py_or_mpy(vstr_t *path) {
    mp_import_stat_t stat = mp_import_stat_any(vstr_null_terminated_str(path));
   150ee:	ce 01       	movw	r24, r28
   150f0:	03 96       	adiw	r24, 0x03	; 3
   150f2:	0e 94 46 4e 	call	0x9c8c	; 0x9c8c <vstr_null_terminated_str>
   150f6:	0e 94 04 24 	call	0x4808	; 0x4808 <mp_import_stat_any>
    if (stat == MP_IMPORT_STAT_FILE) {
   150fa:	82 30       	cpi	r24, 0x02	; 2
   150fc:	09 f4       	brne	.+2      	; 0x15100 <mp_builtin___import__+0x3b8>
   150fe:	6a c0       	rjmp	.+212    	; 0x151d4 <mp_builtin___import__+0x48c>
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
                        // mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
                    }
                    path.len = orig_path_len;
   15100:	c4 5f       	subi	r28, 0xF4	; 244
   15102:	de 4f       	sbci	r29, 0xFE	; 254
   15104:	e8 81       	ld	r30, Y
   15106:	f9 81       	ldd	r31, Y+1	; 0x01
   15108:	cc 50       	subi	r28, 0x0C	; 12
   1510a:	d1 40       	sbci	r29, 0x01	; 1
   1510c:	fe 83       	std	Y+6, r31	; 0x06
   1510e:	ed 83       	std	Y+5, r30	; 0x05
   15110:	05 c0       	rjmp	.+10     	; 0x1511c <mp_builtin___import__+0x3d4>
                } else { // MP_IMPORT_STAT_FILE
                    do_load(module_obj, &path);
   15112:	be 01       	movw	r22, r28
   15114:	6d 5f       	subi	r22, 0xFD	; 253
   15116:	7f 4f       	sbci	r23, 0xFF	; 255
   15118:	c2 01       	movw	r24, r4
   1511a:	e1 dd       	rcall	.-1086   	; 0x14cde <do_load>
                    // remaining components then it's an ImportError because the current path
                    // (the module that was just loaded) is not a package.  This will be caught
                    // on the next iteration because the file will not exist.
                }
            }
            if (outer_module_obj != MP_OBJ_NULL) {
   1511c:	21 14       	cp	r2, r1
   1511e:	31 04       	cpc	r3, r1
   15120:	69 f0       	breq	.+26     	; 0x1513c <mp_builtin___import__+0x3f4>
                qstr s = qstr_from_strn(mod_str + last, i - last);
   15122:	b8 01       	movw	r22, r16
   15124:	68 19       	sub	r22, r8
   15126:	79 09       	sbc	r23, r9
   15128:	c6 01       	movw	r24, r12
   1512a:	88 0d       	add	r24, r8
   1512c:	99 1d       	adc	r25, r9
   1512e:	0e 94 38 7c 	call	0xf870	; 0xf870 <qstr_from_strn>
                mp_store_attr(outer_module_obj, s, module_obj);
   15132:	a2 01       	movw	r20, r4
   15134:	bc 01       	movw	r22, r24
   15136:	c1 01       	movw	r24, r2
   15138:	0e 94 b5 24 	call	0x496a	; 0x496a <mp_store_attr>
            }
            outer_module_obj = module_obj;
            if (top_module_obj == MP_OBJ_NULL) {
   1513c:	c0 5f       	subi	r28, 0xF0	; 240
   1513e:	de 4f       	sbci	r29, 0xFE	; 254
   15140:	88 81       	ld	r24, Y
   15142:	99 81       	ldd	r25, Y+1	; 0x01
   15144:	c0 51       	subi	r28, 0x10	; 16
   15146:	d1 40       	sbci	r29, 0x01	; 1
   15148:	89 2b       	or	r24, r25
   1514a:	31 f4       	brne	.+12     	; 0x15158 <mp_builtin___import__+0x410>
                top_module_obj = module_obj;
   1514c:	c0 5f       	subi	r28, 0xF0	; 240
   1514e:	de 4f       	sbci	r29, 0xFE	; 254
   15150:	59 82       	std	Y+1, r5	; 0x01
   15152:	48 82       	st	Y, r4
   15154:	c0 51       	subi	r28, 0x10	; 16
   15156:	d1 40       	sbci	r29, 0x01	; 1
            }
            last = i + 1;
   15158:	48 01       	movw	r8, r16
   1515a:	9f ef       	ldi	r25, 0xFF	; 255
   1515c:	89 1a       	sub	r8, r25
   1515e:	99 0a       	sbc	r9, r25
            }
            if (outer_module_obj != MP_OBJ_NULL) {
                qstr s = qstr_from_strn(mod_str + last, i - last);
                mp_store_attr(outer_module_obj, s, module_obj);
            }
            outer_module_obj = module_obj;
   15160:	12 01       	movw	r2, r4
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
    module_obj = MP_OBJ_NULL;
    mp_obj_t top_module_obj = MP_OBJ_NULL;
    mp_obj_t outer_module_obj = MP_OBJ_NULL;
    uint i;
    for (i = 1; i <= mod_len; i++) {
   15162:	0f 5f       	subi	r16, 0xFF	; 255
   15164:	1f 4f       	sbci	r17, 0xFF	; 255
   15166:	89 81       	ldd	r24, Y+1	; 0x01
   15168:	9a 81       	ldd	r25, Y+2	; 0x02
   1516a:	ef ef       	ldi	r30, 0xFF	; 255
   1516c:	ee 1a       	sub	r14, r30
   1516e:	fe 0a       	sbc	r15, r30
   15170:	80 17       	cp	r24, r16
   15172:	91 07       	cpc	r25, r17
   15174:	08 f0       	brcs	.+2      	; 0x15178 <mp_builtin___import__+0x430>
   15176:	1b cf       	rjmp	.-458    	; 0x14fae <mp_builtin___import__+0x266>
   15178:	08 c0       	rjmp	.+16     	; 0x1518a <mp_builtin___import__+0x442>
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
    module_obj = MP_OBJ_NULL;
    mp_obj_t top_module_obj = MP_OBJ_NULL;
   1517a:	c0 5f       	subi	r28, 0xF0	; 240
   1517c:	de 4f       	sbci	r29, 0xFE	; 254
   1517e:	19 82       	std	Y+1, r1	; 0x01
   15180:	18 82       	st	Y, r1
   15182:	c0 51       	subi	r28, 0x10	; 16
   15184:	d1 40       	sbci	r29, 0x01	; 1
    }
    DEBUG_printf("Module not yet loaded\n");

    uint last = 0;
    VSTR_FIXED(path, MICROPY_ALLOC_PATH_MAX)
    module_obj = MP_OBJ_NULL;
   15186:	41 2c       	mov	r4, r1
   15188:	51 2c       	mov	r5, r1
            last = i + 1;
        }
    }

    // If fromlist is not empty, return leaf module
    if (fromtuple != mp_const_none) {
   1518a:	f6 e0       	ldi	r31, 0x06	; 6
   1518c:	6f 16       	cp	r6, r31
   1518e:	71 04       	cpc	r7, r1
   15190:	89 f4       	brne	.+34     	; 0x151b4 <mp_builtin___import__+0x46c>
   15192:	c0 5f       	subi	r28, 0xF0	; 240
   15194:	de 4f       	sbci	r29, 0xFE	; 254
   15196:	88 81       	ld	r24, Y
   15198:	c0 51       	subi	r28, 0x10	; 16
   1519a:	d1 40       	sbci	r29, 0x01	; 1
   1519c:	cf 5e       	subi	r28, 0xEF	; 239
   1519e:	de 4f       	sbci	r29, 0xFE	; 254
   151a0:	98 81       	ld	r25, Y
   151a2:	c1 51       	subi	r28, 0x11	; 17
   151a4:	d1 40       	sbci	r29, 0x01	; 1
   151a6:	1c c0       	rjmp	.+56     	; 0x151e0 <mp_builtin___import__+0x498>
    if (module_obj != MP_OBJ_NULL) {
        DEBUG_printf("Module already loaded\n");
        // If it's not a package, return module right away
        char *p = strchr(mod_str, '.');
        if (p == NULL) {
            return module_obj;
   151a8:	80 2f       	mov	r24, r16
   151aa:	91 2f       	mov	r25, r17
   151ac:	19 c0       	rjmp	.+50     	; 0x151e0 <mp_builtin___import__+0x498>
        }
        // If fromlist is not empty, return leaf module
        if (fromtuple != mp_const_none) {
            return module_obj;
   151ae:	80 2f       	mov	r24, r16
   151b0:	91 2f       	mov	r25, r17
   151b2:	16 c0       	rjmp	.+44     	; 0x151e0 <mp_builtin___import__+0x498>
   151b4:	84 2d       	mov	r24, r4
   151b6:	95 2d       	mov	r25, r5
   151b8:	13 c0       	rjmp	.+38     	; 0x151e0 <mp_builtin___import__+0x498>
        DEBUG_printf("\n");
    }
    #endif

    mp_obj_t module_name = args[0];
    mp_obj_t fromtuple = mp_const_none;
   151ba:	0f 2e       	mov	r0, r31
   151bc:	f6 e0       	ldi	r31, 0x06	; 6
   151be:	6f 2e       	mov	r6, r31
   151c0:	71 2c       	mov	r7, r1
   151c2:	f0 2d       	mov	r31, r0
            }
        }
    }

    size_t mod_len;
    const char *mod_str = mp_obj_str_get_data(module_name, &mod_len);
   151c4:	be 01       	movw	r22, r28
   151c6:	6f 5f       	subi	r22, 0xFF	; 255
   151c8:	7f 4f       	sbci	r23, 0xFF	; 255
   151ca:	c4 01       	movw	r24, r8
   151cc:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
   151d0:	6c 01       	movw	r12, r24
   151d2:	a6 ce       	rjmp	.-692    	; 0x14f20 <mp_builtin___import__+0x1d8>
                    vstr_add_char(&path, PATH_SEP_CHAR);
                    vstr_add_str(&path, "__init__.py");
                    if (stat_file_py_or_mpy(&path) != MP_IMPORT_STAT_FILE) {
                        // mp_warning("%s is imported as namespace package", vstr_str(&path));
                    } else {
                        do_load(module_obj, &path);
   151d4:	be 01       	movw	r22, r28
   151d6:	6d 5f       	subi	r22, 0xFD	; 253
   151d8:	7f 4f       	sbci	r23, 0xFF	; 255
   151da:	c2 01       	movw	r24, r4
   151dc:	80 dd       	rcall	.-1280   	; 0x14cde <do_load>
   151de:	90 cf       	rjmp	.-224    	; 0x15100 <mp_builtin___import__+0x3b8>
    if (fromtuple != mp_const_none) {
        return module_obj;
    }
    // Otherwise, we need to return top-level package
    return top_module_obj;
}
   151e0:	0f b6       	in	r0, 0x3f	; 63
   151e2:	f8 94       	cli
   151e4:	be be       	out	0x3e, r11	; 62
   151e6:	0f be       	out	0x3f, r0	; 63
   151e8:	ad be       	out	0x3d, r10	; 61
   151ea:	cf 5e       	subi	r28, 0xEF	; 239
   151ec:	de 4f       	sbci	r29, 0xFE	; 254
   151ee:	0f b6       	in	r0, 0x3f	; 63
   151f0:	f8 94       	cli
   151f2:	de bf       	out	0x3e, r29	; 62
   151f4:	0f be       	out	0x3f, r0	; 63
   151f6:	cd bf       	out	0x3d, r28	; 61
   151f8:	df 91       	pop	r29
   151fa:	cf 91       	pop	r28
   151fc:	1f 91       	pop	r17
   151fe:	0f 91       	pop	r16
   15200:	ff 90       	pop	r15
   15202:	ef 90       	pop	r14
   15204:	df 90       	pop	r13
   15206:	cf 90       	pop	r12
   15208:	bf 90       	pop	r11
   1520a:	af 90       	pop	r10
   1520c:	9f 90       	pop	r9
   1520e:	8f 90       	pop	r8
   15210:	7f 90       	pop	r7
   15212:	6f 90       	pop	r6
   15214:	5f 90       	pop	r5
   15216:	4f 90       	pop	r4
   15218:	3f 90       	pop	r3
   1521a:	2f 90       	pop	r2
   1521c:	08 95       	ret

0001521e <mp_import_name>:
        // o cannot be used as an exception, so return a type error (which will be raised by the caller)
        return mp_obj_new_exception_msg(&mp_type_TypeError, MP_ERROR_TEXT("exceptions must derive from BaseException"));
    }
}

mp_obj_t mp_import_name(qstr name, mp_obj_t fromlist, mp_obj_t level) {
   1521e:	cf 93       	push	r28
   15220:	df 93       	push	r29
   15222:	cd b7       	in	r28, 0x3d	; 61
   15224:	de b7       	in	r29, 0x3e	; 62
   15226:	2a 97       	sbiw	r28, 0x0a	; 10
   15228:	0f b6       	in	r0, 0x3f	; 63
   1522a:	f8 94       	cli
   1522c:	de bf       	out	0x3e, r29	; 62
   1522e:	0f be       	out	0x3f, r0	; 63
   15230:	cd bf       	out	0x3d, r28	; 61
    DEBUG_printf("import name '%s' level=%d\n", qstr_str(name), MP_OBJ_SMALL_INT_VALUE(level));

    // build args array
    mp_obj_t args[5];
    args[0] = MP_OBJ_NEW_QSTR(name);
   15232:	88 0f       	add	r24, r24
   15234:	99 1f       	adc	r25, r25
   15236:	88 0f       	add	r24, r24
   15238:	99 1f       	adc	r25, r25
   1523a:	88 0f       	add	r24, r24
   1523c:	99 1f       	adc	r25, r25
   1523e:	82 60       	ori	r24, 0x02	; 2
   15240:	9a 83       	std	Y+2, r25	; 0x02
   15242:	89 83       	std	Y+1, r24	; 0x01
    args[1] = mp_const_none; // TODO should be globals
   15244:	86 e0       	ldi	r24, 0x06	; 6
   15246:	90 e0       	ldi	r25, 0x00	; 0
   15248:	9c 83       	std	Y+4, r25	; 0x04
   1524a:	8b 83       	std	Y+3, r24	; 0x03
    args[2] = mp_const_none; // TODO should be locals
   1524c:	9e 83       	std	Y+6, r25	; 0x06
   1524e:	8d 83       	std	Y+5, r24	; 0x05
    args[3] = fromlist;
   15250:	78 87       	std	Y+8, r23	; 0x08
   15252:	6f 83       	std	Y+7, r22	; 0x07
    args[4] = level;
   15254:	5a 87       	std	Y+10, r21	; 0x0a
   15256:	49 87       	std	Y+9, r20	; 0x09
            return mp_call_function_n_kw(import->value, 5, 0, args);
        }
    }
    #endif

    return mp_builtin___import__(5, args);
   15258:	be 01       	movw	r22, r28
   1525a:	6f 5f       	subi	r22, 0xFF	; 255
   1525c:	7f 4f       	sbci	r23, 0xFF	; 255
   1525e:	85 e0       	ldi	r24, 0x05	; 5
   15260:	90 e0       	ldi	r25, 0x00	; 0
   15262:	72 dd       	rcall	.-1308   	; 0x14d48 <mp_builtin___import__>
}
   15264:	2a 96       	adiw	r28, 0x0a	; 10
   15266:	0f b6       	in	r0, 0x3f	; 63
   15268:	f8 94       	cli
   1526a:	de bf       	out	0x3e, r29	; 62
   1526c:	0f be       	out	0x3f, r0	; 63
   1526e:	cd bf       	out	0x3d, r28	; 61
   15270:	df 91       	pop	r29
   15272:	cf 91       	pop	r28
   15274:	08 95       	ret

00015276 <mp_import_from>:

mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
   15276:	4f 92       	push	r4
   15278:	5f 92       	push	r5
   1527a:	6f 92       	push	r6
   1527c:	7f 92       	push	r7
   1527e:	8f 92       	push	r8
   15280:	9f 92       	push	r9
   15282:	af 92       	push	r10
   15284:	bf 92       	push	r11
   15286:	cf 92       	push	r12
   15288:	df 92       	push	r13
   1528a:	ef 92       	push	r14
   1528c:	ff 92       	push	r15
   1528e:	0f 93       	push	r16
   15290:	1f 93       	push	r17
   15292:	cf 93       	push	r28
   15294:	df 93       	push	r29
   15296:	00 d0       	rcall	.+0      	; 0x15298 <mp_import_from+0x22>
   15298:	00 d0       	rcall	.+0      	; 0x1529a <mp_import_from+0x24>
   1529a:	00 d0       	rcall	.+0      	; 0x1529c <mp_import_from+0x26>
   1529c:	cd b7       	in	r28, 0x3d	; 61
   1529e:	de b7       	in	r29, 0x3e	; 62
   152a0:	7c 01       	movw	r14, r24
   152a2:	46 2e       	mov	r4, r22
   152a4:	57 2e       	mov	r5, r23

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
   152a6:	0d b7       	in	r16, 0x3d	; 61
   152a8:	1e b7       	in	r17, 0x3e	; 62
mp_obj_t mp_import_from(mp_obj_t module, qstr name) {
    DEBUG_printf("import from %p %s\n", module, qstr_str(name));

    mp_obj_t dest[2];

    mp_load_method_maybe(module, name, dest);
   152aa:	ae 01       	movw	r20, r28
   152ac:	4f 5f       	subi	r20, 0xFF	; 255
   152ae:	5f 4f       	sbci	r21, 0xFF	; 255
   152b0:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>

    if (dest[1] != MP_OBJ_NULL) {
   152b4:	8b 81       	ldd	r24, Y+3	; 0x03
   152b6:	9c 81       	ldd	r25, Y+4	; 0x04
   152b8:	89 2b       	or	r24, r25
   152ba:	61 f0       	breq	.+24     	; 0x152d4 <mp_import_from+0x5e>
        // Hopefully we can't import bound method from an object
    import_error:
        mp_raise_msg_varg(&mp_type_ImportError, MP_ERROR_TEXT("can't import name %q"), name);
   152bc:	5f 92       	push	r5
   152be:	4f 92       	push	r4
   152c0:	89 e9       	ldi	r24, 0x99	; 153
   152c2:	9d e0       	ldi	r25, 0x0D	; 13
   152c4:	9f 93       	push	r25
   152c6:	8f 93       	push	r24
   152c8:	88 ed       	ldi	r24, 0xD8	; 216
   152ca:	90 e2       	ldi	r25, 0x20	; 32
   152cc:	9f 93       	push	r25
   152ce:	8f 93       	push	r24
   152d0:	0e 94 9d 31 	call	0x633a	; 0x633a <mp_raise_msg_varg>
    }

    if (dest[0] != MP_OBJ_NULL) {
   152d4:	89 81       	ldd	r24, Y+1	; 0x01
   152d6:	9a 81       	ldd	r25, Y+2	; 0x02
   152d8:	00 97       	sbiw	r24, 0x00	; 0
   152da:	09 f0       	breq	.+2      	; 0x152de <mp_import_from+0x68>
   152dc:	4f c0       	rjmp	.+158    	; 0x1537c <mp_import_from+0x106>
    }

    #if MICROPY_ENABLE_EXTERNAL_IMPORT

    // See if it's a package, then can try FS import
    if (!mp_obj_is_package(module)) {
   152de:	c7 01       	movw	r24, r14
   152e0:	0e 94 6c 3f 	call	0x7ed8	; 0x7ed8 <mp_obj_is_package>
   152e4:	88 23       	and	r24, r24
   152e6:	51 f3       	breq	.-44     	; 0x152bc <mp_import_from+0x46>
        goto import_error;
    }

    mp_load_method_maybe(module, MP_QSTR___name__, dest);
   152e8:	ae 01       	movw	r20, r28
   152ea:	4f 5f       	subi	r20, 0xFF	; 255
   152ec:	5f 4f       	sbci	r21, 0xFF	; 255
   152ee:	67 e1       	ldi	r22, 0x17	; 23
   152f0:	70 e0       	ldi	r23, 0x00	; 0
   152f2:	c7 01       	movw	r24, r14
   152f4:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
    size_t pkg_name_len;
    const char *pkg_name = mp_obj_str_get_data(dest[0], &pkg_name_len);
   152f8:	be 01       	movw	r22, r28
   152fa:	6b 5f       	subi	r22, 0xFB	; 251
   152fc:	7f 4f       	sbci	r23, 0xFF	; 255
   152fe:	89 81       	ldd	r24, Y+1	; 0x01
   15300:	9a 81       	ldd	r25, Y+2	; 0x02
   15302:	0e 94 72 2a 	call	0x54e4	; 0x54e4 <mp_obj_str_get_data>
   15306:	3c 01       	movw	r6, r24

    const uint dot_name_len = pkg_name_len + 1 + qstr_len(name);
   15308:	84 2d       	mov	r24, r4
   1530a:	95 2d       	mov	r25, r5
   1530c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <qstr_len>
   15310:	ed 80       	ldd	r14, Y+5	; 0x05
   15312:	fe 80       	ldd	r15, Y+6	; 0x06
   15314:	47 01       	movw	r8, r14
   15316:	2f ef       	ldi	r18, 0xFF	; 255
   15318:	82 1a       	sub	r8, r18
   1531a:	92 0a       	sbc	r9, r18
   1531c:	5c 01       	movw	r10, r24
   1531e:	a8 0c       	add	r10, r8
   15320:	b9 1c       	adc	r11, r9
    char *dot_name = mp_local_alloc(dot_name_len);
   15322:	8d b7       	in	r24, 0x3d	; 61
   15324:	9e b7       	in	r25, 0x3e	; 62
   15326:	8a 19       	sub	r24, r10
   15328:	9b 09       	sbc	r25, r11
   1532a:	0f b6       	in	r0, 0x3f	; 63
   1532c:	f8 94       	cli
   1532e:	9e bf       	out	0x3e, r25	; 62
   15330:	0f be       	out	0x3f, r0	; 63
   15332:	8d bf       	out	0x3d, r24	; 61
   15334:	01 96       	adiw	r24, 0x01	; 1
   15336:	6c 01       	movw	r12, r24
    memcpy(dot_name, pkg_name, pkg_name_len);
   15338:	a7 01       	movw	r20, r14
   1533a:	b3 01       	movw	r22, r6
   1533c:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    dot_name[pkg_name_len] = '.';
   15340:	f6 01       	movw	r30, r12
   15342:	ee 0d       	add	r30, r14
   15344:	ff 1d       	adc	r31, r15
   15346:	8e e2       	ldi	r24, 0x2E	; 46
   15348:	80 83       	st	Z, r24
    memcpy(dot_name + pkg_name_len + 1, qstr_str(name), qstr_len(name));
   1534a:	84 2d       	mov	r24, r4
   1534c:	95 2d       	mov	r25, r5
   1534e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <qstr_len>
   15352:	7c 01       	movw	r14, r24
   15354:	84 2d       	mov	r24, r4
   15356:	95 2d       	mov	r25, r5
   15358:	0e 94 57 0b 	call	0x16ae	; 0x16ae <qstr_str>
   1535c:	a7 01       	movw	r20, r14
   1535e:	bc 01       	movw	r22, r24
   15360:	c6 01       	movw	r24, r12
   15362:	88 0d       	add	r24, r8
   15364:	99 1d       	adc	r25, r9
   15366:	0e 94 92 c2 	call	0x18524	; 0x18524 <memcpy>
    qstr dot_name_q = qstr_from_strn(dot_name, dot_name_len);
   1536a:	b5 01       	movw	r22, r10
   1536c:	c6 01       	movw	r24, r12
   1536e:	0e 94 38 7c 	call	0xf870	; 0xf870 <qstr_from_strn>
    mp_local_free(dot_name);

    // For fromlist, pass sentinel "non empty" value to force returning of leaf module
    return mp_import_name(dot_name_q, mp_const_true, MP_OBJ_NEW_SMALL_INT(0));
   15372:	41 e0       	ldi	r20, 0x01	; 1
   15374:	50 e0       	ldi	r21, 0x00	; 0
   15376:	6e e1       	ldi	r22, 0x1E	; 30
   15378:	70 e0       	ldi	r23, 0x00	; 0
   1537a:	51 df       	rcall	.-350    	; 0x1521e <mp_import_name>

    // Package import not supported with external imports disabled
    goto import_error;

    #endif
}
   1537c:	0f b6       	in	r0, 0x3f	; 63
   1537e:	f8 94       	cli
   15380:	1e bf       	out	0x3e, r17	; 62
   15382:	0f be       	out	0x3f, r0	; 63
   15384:	0d bf       	out	0x3d, r16	; 61
   15386:	26 96       	adiw	r28, 0x06	; 6
   15388:	0f b6       	in	r0, 0x3f	; 63
   1538a:	f8 94       	cli
   1538c:	de bf       	out	0x3e, r29	; 62
   1538e:	0f be       	out	0x3f, r0	; 63
   15390:	cd bf       	out	0x3d, r28	; 61
   15392:	df 91       	pop	r29
   15394:	cf 91       	pop	r28
   15396:	1f 91       	pop	r17
   15398:	0f 91       	pop	r16
   1539a:	ff 90       	pop	r15
   1539c:	ef 90       	pop	r14
   1539e:	df 90       	pop	r13
   153a0:	cf 90       	pop	r12
   153a2:	bf 90       	pop	r11
   153a4:	af 90       	pop	r10
   153a6:	9f 90       	pop	r9
   153a8:	8f 90       	pop	r8
   153aa:	7f 90       	pop	r7
   153ac:	6f 90       	pop	r6
   153ae:	5f 90       	pop	r5
   153b0:	4f 90       	pop	r4
   153b2:	08 95       	ret

000153b4 <mp_execute_bytecode>:
// sp points to bottom of stack which grows up
// returns:
//  MP_VM_RETURN_NORMAL, sp valid, return value in *sp
//  MP_VM_RETURN_YIELD, ip, sp valid, yielded value in *sp
//  MP_VM_RETURN_EXCEPTION, exception in state[0]
mp_vm_return_kind_t MICROPY_WRAP_MP_EXECUTE_BYTECODE(mp_execute_bytecode)(mp_code_state_t *code_state, volatile mp_obj_t inject_exc) {
   153b4:	2f 92       	push	r2
   153b6:	3f 92       	push	r3
   153b8:	4f 92       	push	r4
   153ba:	5f 92       	push	r5
   153bc:	6f 92       	push	r6
   153be:	7f 92       	push	r7
   153c0:	8f 92       	push	r8
   153c2:	9f 92       	push	r9
   153c4:	af 92       	push	r10
   153c6:	bf 92       	push	r11
   153c8:	cf 92       	push	r12
   153ca:	df 92       	push	r13
   153cc:	ef 92       	push	r14
   153ce:	ff 92       	push	r15
   153d0:	0f 93       	push	r16
   153d2:	1f 93       	push	r17
   153d4:	cf 93       	push	r28
   153d6:	df 93       	push	r29
   153d8:	cd b7       	in	r28, 0x3d	; 61
   153da:	de b7       	in	r29, 0x3e	; 62
   153dc:	ad 97       	sbiw	r28, 0x2d	; 45
   153de:	0f b6       	in	r0, 0x3f	; 63
   153e0:	f8 94       	cli
   153e2:	de bf       	out	0x3e, r29	; 62
   153e4:	0f be       	out	0x3f, r0	; 63
   153e6:	cd bf       	out	0x3d, r28	; 61
   153e8:	9b a3       	std	Y+35, r25	; 0x23
   153ea:	8a a3       	std	Y+34, r24	; 0x22
   153ec:	79 a3       	std	Y+33, r23	; 0x21
   153ee:	68 a3       	std	Y+32, r22	; 0x20

    // Pointers which are constant for particular invocation of mp_execute_bytecode()
    mp_obj_t * /*const*/ fastn;
    mp_exc_stack_t * /*const*/ exc_stack;
    {
        size_t n_state = code_state->n_state;
   153f0:	dc 01       	movw	r26, r24
   153f2:	16 96       	adiw	r26, 0x06	; 6
   153f4:	8d 91       	ld	r24, X+
   153f6:	9c 91       	ld	r25, X
   153f8:	17 97       	sbiw	r26, 0x07	; 7
        fastn = &code_state->state[n_state - 1];
   153fa:	9c 01       	movw	r18, r24
   153fc:	2b 5f       	subi	r18, 0xFB	; 251
   153fe:	3f 4f       	sbci	r19, 0xFF	; 255
   15400:	22 0f       	add	r18, r18
   15402:	33 1f       	adc	r19, r19
   15404:	a2 0f       	add	r26, r18
   15406:	b3 1f       	adc	r27, r19
   15408:	b9 a7       	std	Y+41, r27	; 0x29
   1540a:	a8 a7       	std	Y+40, r26	; 0x28
        exc_stack = (mp_exc_stack_t*)(code_state->state + n_state);
   1540c:	2a a1       	ldd	r18, Y+34	; 0x22
   1540e:	3b a1       	ldd	r19, Y+35	; 0x23
   15410:	24 5f       	subi	r18, 0xF4	; 244
   15412:	3f 4f       	sbci	r19, 0xFF	; 255
   15414:	88 0f       	add	r24, r24
   15416:	99 1f       	adc	r25, r25
   15418:	f9 01       	movw	r30, r18
   1541a:	e8 0f       	add	r30, r24
   1541c:	f9 1f       	adc	r31, r25
   1541e:	fd a3       	std	Y+37, r31	; 0x25
   15420:	ec a3       	std	Y+36, r30	; 0x24
    }

    // variables that are visible to the exception handler (declared volatile)
    mp_exc_stack_t *volatile exc_sp = MP_CODE_STATE_EXC_SP_IDX_TO_PTR(exc_stack, code_state->exc_sp_idx); // stack grows up, exc_sp points to top of stack
   15422:	aa a1       	ldd	r26, Y+34	; 0x22
   15424:	bb a1       	ldd	r27, Y+35	; 0x23
   15426:	18 96       	adiw	r26, 0x08	; 8
   15428:	8d 91       	ld	r24, X+
   1542a:	9c 91       	ld	r25, X
   1542c:	19 97       	sbiw	r26, 0x09	; 9
   1542e:	9c 01       	movw	r18, r24
   15430:	22 0f       	add	r18, r18
   15432:	33 1f       	adc	r19, r19
   15434:	82 0f       	add	r24, r18
   15436:	93 1f       	adc	r25, r19
   15438:	88 0f       	add	r24, r24
   1543a:	99 1f       	adc	r25, r25
   1543c:	06 97       	sbiw	r24, 0x06	; 6
   1543e:	8e 0f       	add	r24, r30
   15440:	9f 1f       	adc	r25, r31
   15442:	9a 83       	std	Y+2, r25	; 0x02
   15444:	89 83       	std	Y+1, r24	; 0x01

    // outer exception handling loop
    for (;;) {
        nlr_buf_t nlr;
outer_dispatch_loop:
        if (nlr_push(&nlr) == 0) {
   15446:	ce 01       	movw	r24, r28
   15448:	03 96       	adiw	r24, 0x03	; 3
   1544a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <nlr_push_tail>
   1544e:	ce 01       	movw	r24, r28
   15450:	07 96       	adiw	r24, 0x07	; 7
   15452:	0e 94 44 c2 	call	0x18488	; 0x18488 <setjmp>
   15456:	89 2b       	or	r24, r25
   15458:	11 f0       	breq	.+4      	; 0x1545e <mp_execute_bytecode+0xaa>
   1545a:	0c 94 f1 b4 	jmp	0x169e2	; 0x169e2 <mp_execute_bytecode+0x162e>
            // local variables that are not visible to the exception handler
            const byte *ip = code_state->ip;
   1545e:	ea a1       	ldd	r30, Y+34	; 0x22
   15460:	fb a1       	ldd	r31, Y+35	; 0x23
   15462:	42 80       	ldd	r4, Z+2	; 0x02
   15464:	53 80       	ldd	r5, Z+3	; 0x03
            mp_obj_t *sp = code_state->sp;
   15466:	64 80       	ldd	r6, Z+4	; 0x04
   15468:	75 80       	ldd	r7, Z+5	; 0x05
            // If we have exception to inject, now that we finish setting up
            // execution context, raise it. This works as if MP_BC_RAISE_OBJ
            // bytecode was executed.
            // Injecting exc into yield from generator is a special case,
            // handled by MP_BC_YIELD_FROM itself
            if (inject_exc != MP_OBJ_NULL && *ip != MP_BC_YIELD_FROM) {
   1546a:	88 a1       	ldd	r24, Y+32	; 0x20
   1546c:	99 a1       	ldd	r25, Y+33	; 0x21
   1546e:	89 2b       	or	r24, r25
   15470:	a1 f0       	breq	.+40     	; 0x1549a <mp_execute_bytecode+0xe6>
   15472:	d2 01       	movw	r26, r4
   15474:	8c 91       	ld	r24, X
   15476:	88 36       	cpi	r24, 0x68	; 104
   15478:	81 f0       	breq	.+32     	; 0x1549a <mp_execute_bytecode+0xe6>
                mp_obj_t exc = inject_exc;
   1547a:	88 a1       	ldd	r24, Y+32	; 0x20
   1547c:	99 a1       	ldd	r25, Y+33	; 0x21
                inject_exc = MP_OBJ_NULL;
   1547e:	19 a2       	std	Y+33, r1	; 0x21
   15480:	18 a2       	std	Y+32, r1	; 0x20
                exc = mp_make_raise_obj(exc);
   15482:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <mp_make_raise_obj>
   15486:	8c 01       	movw	r16, r24
                RAISE(exc);
   15488:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   1548c:	1e 83       	std	Y+6, r17	; 0x06
   1548e:	0d 83       	std	Y+5, r16	; 0x05
   15490:	0c 94 f1 b4 	jmp	0x169e2	; 0x169e2 <mp_execute_bytecode+0x162e>
                // the second slot holds a reference to the iterator object.
                ENTRY(MP_BC_GET_ITER_STACK): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t obj = TOP();
                    mp_obj_iter_buf_t *iter_buf = (mp_obj_iter_buf_t*)sp;
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   15494:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15496:	21 01       	movw	r4, r2
   15498:	10 c0       	rjmp	.+32     	; 0x154ba <mp_execute_bytecode+0x106>
                ENTRY(MP_BC_LOAD_CONST_NONE):
                    PUSH(mp_const_none);
                    DISPATCH();

                ENTRY(MP_BC_LOAD_CONST_TRUE):
                    PUSH(mp_const_true);
   1549a:	0f 2e       	mov	r0, r31
   1549c:	fe e1       	ldi	r31, 0x1E	; 30
   1549e:	cf 2e       	mov	r12, r31
   154a0:	d1 2c       	mov	r13, r1
   154a2:	f0 2d       	mov	r31, r0
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_BUILD_CLASS):
                    MARK_EXC_IP_SELECTIVE();
                    PUSH(mp_load_build_class());
   154a4:	0f 2e       	mov	r0, r31
   154a6:	ff e9       	ldi	r31, 0x9F	; 159
   154a8:	8f 2e       	mov	r8, r31
   154aa:	f9 e1       	ldi	r31, 0x19	; 25
   154ac:	9f 2e       	mov	r9, r31
   154ae:	f0 2d       	mov	r31, r0
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
#endif

                ENTRY(MP_BC_LOAD_CONST_FALSE):
                    PUSH(mp_const_false);
   154b0:	0f 2e       	mov	r0, r31
   154b2:	fe e0       	ldi	r31, 0x0E	; 14
   154b4:	af 2e       	mov	r10, r31
   154b6:	b1 2c       	mov	r11, r1
   154b8:	f0 2d       	mov	r31, r0
dispatch_loop:
#if MICROPY_OPT_COMPUTED_GOTO
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
   154ba:	ea a1       	ldd	r30, Y+34	; 0x22
   154bc:	fb a1       	ldd	r31, Y+35	; 0x23
   154be:	53 82       	std	Z+3, r5	; 0x03
   154c0:	42 82       	std	Z+2, r4	; 0x02
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   154c2:	12 01       	movw	r2, r4
   154c4:	ff ef       	ldi	r31, 0xFF	; 255
   154c6:	2f 1a       	sub	r2, r31
   154c8:	3f 0a       	sbc	r3, r31
   154ca:	d2 01       	movw	r26, r4
   154cc:	8c 91       	ld	r24, X
   154ce:	87 33       	cpi	r24, 0x37	; 55
   154d0:	11 f4       	brne	.+4      	; 0x154d6 <mp_execute_bytecode+0x122>
   154d2:	0c 94 ef b2 	jmp	0x165de	; 0x165de <mp_execute_bytecode+0x122a>
   154d6:	08 f0       	brcs	.+2      	; 0x154da <mp_execute_bytecode+0x126>
   154d8:	6f c0       	rjmp	.+222    	; 0x155b8 <mp_execute_bytecode+0x204>
   154da:	83 32       	cpi	r24, 0x23	; 35
   154dc:	09 f4       	brne	.+2      	; 0x154e0 <mp_execute_bytecode+0x12c>
   154de:	4d c1       	rjmp	.+666    	; 0x1577a <mp_execute_bytecode+0x3c6>
   154e0:	a8 f5       	brcc	.+106    	; 0x1554c <mp_execute_bytecode+0x198>
   154e2:	87 31       	cpi	r24, 0x17	; 23
   154e4:	09 f4       	brne	.+2      	; 0x154e8 <mp_execute_bytecode+0x134>
   154e6:	a8 c2       	rjmp	.+1360   	; 0x15a38 <mp_execute_bytecode+0x684>
   154e8:	a0 f4       	brcc	.+40     	; 0x15512 <mp_execute_bytecode+0x15e>
   154ea:	83 31       	cpi	r24, 0x13	; 19
   154ec:	09 f4       	brne	.+2      	; 0x154f0 <mp_execute_bytecode+0x13c>
   154ee:	ee c1       	rjmp	.+988    	; 0x158cc <mp_execute_bytecode+0x518>
   154f0:	50 f4       	brcc	.+20     	; 0x15506 <mp_execute_bytecode+0x152>
   154f2:	81 31       	cpi	r24, 0x11	; 17
   154f4:	09 f4       	brne	.+2      	; 0x154f8 <mp_execute_bytecode+0x144>
   154f6:	be c1       	rjmp	.+892    	; 0x15874 <mp_execute_bytecode+0x4c0>
   154f8:	08 f0       	brcs	.+2      	; 0x154fc <mp_execute_bytecode+0x148>
   154fa:	d2 c1       	rjmp	.+932    	; 0x158a0 <mp_execute_bytecode+0x4ec>
   154fc:	80 31       	cpi	r24, 0x10	; 16
   154fe:	09 f4       	brne	.+2      	; 0x15502 <mp_execute_bytecode+0x14e>
   15500:	20 c1       	rjmp	.+576    	; 0x15742 <mp_execute_bytecode+0x38e>
   15502:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   15506:	85 31       	cpi	r24, 0x15	; 21
   15508:	09 f4       	brne	.+2      	; 0x1550c <mp_execute_bytecode+0x158>
   1550a:	0a c2       	rjmp	.+1044   	; 0x15920 <mp_execute_bytecode+0x56c>
   1550c:	08 f4       	brcc	.+2      	; 0x15510 <mp_execute_bytecode+0x15c>
   1550e:	f1 c1       	rjmp	.+994    	; 0x158f2 <mp_execute_bytecode+0x53e>
   15510:	7c c2       	rjmp	.+1272   	; 0x15a0a <mp_execute_bytecode+0x656>
   15512:	8b 31       	cpi	r24, 0x1B	; 27
   15514:	11 f4       	brne	.+4      	; 0x1551a <mp_execute_bytecode+0x166>
   15516:	0c 94 35 b4 	jmp	0x1686a	; 0x1686a <mp_execute_bytecode+0x14b6>
   1551a:	30 f4       	brcc	.+12     	; 0x15528 <mp_execute_bytecode+0x174>
   1551c:	89 31       	cpi	r24, 0x19	; 25
   1551e:	09 f4       	brne	.+2      	; 0x15522 <mp_execute_bytecode+0x16e>
   15520:	0e c3       	rjmp	.+1564   	; 0x15b3e <mp_execute_bytecode+0x78a>
   15522:	08 f4       	brcc	.+2      	; 0x15526 <mp_execute_bytecode+0x172>
   15524:	a0 c2       	rjmp	.+1344   	; 0x15a66 <mp_execute_bytecode+0x6b2>
   15526:	18 c3       	rjmp	.+1584   	; 0x15b58 <mp_execute_bytecode+0x7a4>
   15528:	80 32       	cpi	r24, 0x20	; 32
   1552a:	09 f4       	brne	.+2      	; 0x1552e <mp_execute_bytecode+0x17a>
   1552c:	61 c7       	rjmp	.+3778   	; 0x163f0 <mp_execute_bytecode+0x103c>
   1552e:	30 f4       	brcc	.+12     	; 0x1553c <mp_execute_bytecode+0x188>
   15530:	8c 31       	cpi	r24, 0x1C	; 28
   15532:	11 f4       	brne	.+4      	; 0x15538 <mp_execute_bytecode+0x184>
   15534:	0c 94 4e b4 	jmp	0x1689c	; 0x1689c <mp_execute_bytecode+0x14e8>
   15538:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   1553c:	81 32       	cpi	r24, 0x21	; 33
   1553e:	09 f4       	brne	.+2      	; 0x15542 <mp_execute_bytecode+0x18e>
   15540:	8d c7       	rjmp	.+3866   	; 0x1645c <mp_execute_bytecode+0x10a8>
   15542:	82 32       	cpi	r24, 0x22	; 34
   15544:	09 f4       	brne	.+2      	; 0x15548 <mp_execute_bytecode+0x194>
   15546:	d6 c0       	rjmp	.+428    	; 0x156f4 <mp_execute_bytecode+0x340>
   15548:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   1554c:	8c 32       	cpi	r24, 0x2C	; 44
   1554e:	09 f4       	brne	.+2      	; 0x15552 <mp_execute_bytecode+0x19e>
   15550:	50 c6       	rjmp	.+3232   	; 0x161f2 <mp_execute_bytecode+0xe3e>
   15552:	b8 f4       	brcc	.+46     	; 0x15582 <mp_execute_bytecode+0x1ce>
   15554:	87 32       	cpi	r24, 0x27	; 39
   15556:	09 f4       	brne	.+2      	; 0x1555a <mp_execute_bytecode+0x1a6>
   15558:	34 c2       	rjmp	.+1128   	; 0x159c2 <mp_execute_bytecode+0x60e>
   1555a:	30 f4       	brcc	.+12     	; 0x15568 <mp_execute_bytecode+0x1b4>
   1555c:	85 32       	cpi	r24, 0x25	; 37
   1555e:	09 f4       	brne	.+2      	; 0x15562 <mp_execute_bytecode+0x1ae>
   15560:	6c c1       	rjmp	.+728    	; 0x1583a <mp_execute_bytecode+0x486>
   15562:	08 f4       	brcc	.+2      	; 0x15566 <mp_execute_bytecode+0x1b2>
   15564:	3a c1       	rjmp	.+628    	; 0x157da <mp_execute_bytecode+0x426>
   15566:	0d c2       	rjmp	.+1050   	; 0x15982 <mp_execute_bytecode+0x5ce>
   15568:	89 32       	cpi	r24, 0x29	; 41
   1556a:	09 f4       	brne	.+2      	; 0x1556e <mp_execute_bytecode+0x1ba>
   1556c:	c6 c2       	rjmp	.+1420   	; 0x15afa <mp_execute_bytecode+0x746>
   1556e:	08 f4       	brcc	.+2      	; 0x15572 <mp_execute_bytecode+0x1be>
   15570:	a5 c2       	rjmp	.+1354   	; 0x15abc <mp_execute_bytecode+0x708>
   15572:	8a 32       	cpi	r24, 0x2A	; 42
   15574:	09 f4       	brne	.+2      	; 0x15578 <mp_execute_bytecode+0x1c4>
   15576:	fa c5       	rjmp	.+3060   	; 0x1616c <mp_execute_bytecode+0xdb8>
   15578:	8b 32       	cpi	r24, 0x2B	; 43
   1557a:	09 f4       	brne	.+2      	; 0x1557e <mp_execute_bytecode+0x1ca>
   1557c:	18 c6       	rjmp	.+3120   	; 0x161ae <mp_execute_bytecode+0xdfa>
   1557e:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   15582:	82 33       	cpi	r24, 0x32	; 50
   15584:	09 f4       	brne	.+2      	; 0x15588 <mp_execute_bytecode+0x1d4>
   15586:	dc c6       	rjmp	.+3512   	; 0x16340 <mp_execute_bytecode+0xf8c>
   15588:	50 f4       	brcc	.+20     	; 0x1559e <mp_execute_bytecode+0x1ea>
   1558a:	80 33       	cpi	r24, 0x30	; 48
   1558c:	09 f4       	brne	.+2      	; 0x15590 <mp_execute_bytecode+0x1dc>
   1558e:	98 c6       	rjmp	.+3376   	; 0x162c0 <mp_execute_bytecode+0xf0c>
   15590:	08 f0       	brcs	.+2      	; 0x15594 <mp_execute_bytecode+0x1e0>
   15592:	b5 c6       	rjmp	.+3434   	; 0x162fe <mp_execute_bytecode+0xf4a>
   15594:	8f 32       	cpi	r24, 0x2F	; 47
   15596:	09 f4       	brne	.+2      	; 0x1559a <mp_execute_bytecode+0x1e6>
   15598:	5b c6       	rjmp	.+3254   	; 0x16250 <mp_execute_bytecode+0xe9c>
   1559a:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   1559e:	84 33       	cpi	r24, 0x34	; 52
   155a0:	09 f4       	brne	.+2      	; 0x155a4 <mp_execute_bytecode+0x1f0>
   155a2:	92 c7       	rjmp	.+3876   	; 0x164c8 <mp_execute_bytecode+0x1114>
   155a4:	08 f4       	brcc	.+2      	; 0x155a8 <mp_execute_bytecode+0x1f4>
   155a6:	f8 c6       	rjmp	.+3568   	; 0x16398 <mp_execute_bytecode+0xfe4>
   155a8:	85 33       	cpi	r24, 0x35	; 53
   155aa:	09 f4       	brne	.+2      	; 0x155ae <mp_execute_bytecode+0x1fa>
   155ac:	bd c7       	rjmp	.+3962   	; 0x16528 <mp_execute_bytecode+0x1174>
   155ae:	86 33       	cpi	r24, 0x36	; 54
   155b0:	09 f4       	brne	.+2      	; 0x155b4 <mp_execute_bytecode+0x200>
   155b2:	e6 c7       	rjmp	.+4044   	; 0x16580 <mp_execute_bytecode+0x11cc>
   155b4:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   155b8:	86 35       	cpi	r24, 0x56	; 86
   155ba:	09 f4       	brne	.+2      	; 0x155be <mp_execute_bytecode+0x20a>
   155bc:	6e c2       	rjmp	.+1244   	; 0x15a9a <mp_execute_bytecode+0x6e6>
   155be:	a0 f5       	brcc	.+104    	; 0x15628 <mp_execute_bytecode+0x274>
   155c0:	8a 34       	cpi	r24, 0x4A	; 74
   155c2:	b8 f4       	brcc	.+46     	; 0x155f2 <mp_execute_bytecode+0x23e>
   155c4:	88 34       	cpi	r24, 0x48	; 72
   155c6:	08 f0       	brcs	.+2      	; 0x155ca <mp_execute_bytecode+0x216>
   155c8:	f9 c4       	rjmp	.+2546   	; 0x15fbc <mp_execute_bytecode+0xc08>
   155ca:	84 34       	cpi	r24, 0x44	; 68
   155cc:	09 f4       	brne	.+2      	; 0x155d0 <mp_execute_bytecode+0x21c>
   155ce:	46 c3       	rjmp	.+1676   	; 0x15c5c <mp_execute_bytecode+0x8a8>
   155d0:	50 f4       	brcc	.+20     	; 0x155e6 <mp_execute_bytecode+0x232>
   155d2:	82 34       	cpi	r24, 0x42	; 66
   155d4:	09 f4       	brne	.+2      	; 0x155d8 <mp_execute_bytecode+0x224>
   155d6:	15 c3       	rjmp	.+1578   	; 0x15c02 <mp_execute_bytecode+0x84e>
   155d8:	08 f0       	brcs	.+2      	; 0x155dc <mp_execute_bytecode+0x228>
   155da:	22 c3       	rjmp	.+1604   	; 0x15c20 <mp_execute_bytecode+0x86c>
   155dc:	80 34       	cpi	r24, 0x40	; 64
   155de:	09 f4       	brne	.+2      	; 0x155e2 <mp_execute_bytecode+0x22e>
   155e0:	4d c4       	rjmp	.+2202   	; 0x15e7c <mp_execute_bytecode+0xac8>
   155e2:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   155e6:	86 34       	cpi	r24, 0x46	; 70
   155e8:	09 f4       	brne	.+2      	; 0x155ec <mp_execute_bytecode+0x238>
   155ea:	6c c3       	rjmp	.+1752   	; 0x15cc4 <mp_execute_bytecode+0x910>
   155ec:	08 f4       	brcc	.+2      	; 0x155f0 <mp_execute_bytecode+0x23c>
   155ee:	50 c3       	rjmp	.+1696   	; 0x15c90 <mp_execute_bytecode+0x8dc>
   155f0:	83 c3       	rjmp	.+1798   	; 0x15cf8 <mp_execute_bytecode+0x944>
   155f2:	81 35       	cpi	r24, 0x51	; 81
   155f4:	09 f4       	brne	.+2      	; 0x155f8 <mp_execute_bytecode+0x244>
   155f6:	67 c0       	rjmp	.+206    	; 0x156c6 <mp_execute_bytecode+0x312>
   155f8:	50 f4       	brcc	.+20     	; 0x1560e <mp_execute_bytecode+0x25a>
   155fa:	8b 34       	cpi	r24, 0x4B	; 75
   155fc:	09 f4       	brne	.+2      	; 0x15600 <mp_execute_bytecode+0x24c>
   155fe:	68 c5       	rjmp	.+2768   	; 0x160d0 <mp_execute_bytecode+0xd1c>
   15600:	08 f4       	brcc	.+2      	; 0x15604 <mp_execute_bytecode+0x250>
   15602:	95 c5       	rjmp	.+2858   	; 0x1612e <mp_execute_bytecode+0xd7a>
   15604:	80 35       	cpi	r24, 0x50	; 80
   15606:	09 f4       	brne	.+2      	; 0x1560a <mp_execute_bytecode+0x256>
   15608:	54 c0       	rjmp	.+168    	; 0x156b2 <mp_execute_bytecode+0x2fe>
   1560a:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   1560e:	83 35       	cpi	r24, 0x53	; 83
   15610:	09 f4       	brne	.+2      	; 0x15614 <mp_execute_bytecode+0x260>
   15612:	d9 c0       	rjmp	.+434    	; 0x157c6 <mp_execute_bytecode+0x412>
   15614:	08 f4       	brcc	.+2      	; 0x15618 <mp_execute_bytecode+0x264>
   15616:	64 c0       	rjmp	.+200    	; 0x156e0 <mp_execute_bytecode+0x32c>
   15618:	84 35       	cpi	r24, 0x54	; 84
   1561a:	09 f4       	brne	.+2      	; 0x1561e <mp_execute_bytecode+0x26a>
   1561c:	98 c1       	rjmp	.+816    	; 0x1594e <mp_execute_bytecode+0x59a>
   1561e:	85 35       	cpi	r24, 0x55	; 85
   15620:	09 f4       	brne	.+2      	; 0x15624 <mp_execute_bytecode+0x270>
   15622:	9e c1       	rjmp	.+828    	; 0x15960 <mp_execute_bytecode+0x5ac>
   15624:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   15628:	8f 35       	cpi	r24, 0x5F	; 95
   1562a:	09 f4       	brne	.+2      	; 0x1562e <mp_execute_bytecode+0x27a>
   1562c:	3c c5       	rjmp	.+2680   	; 0x160a6 <mp_execute_bytecode+0xcf2>
   1562e:	b8 f4       	brcc	.+46     	; 0x1565e <mp_execute_bytecode+0x2aa>
   15630:	8a 35       	cpi	r24, 0x5A	; 90
   15632:	09 f4       	brne	.+2      	; 0x15636 <mp_execute_bytecode+0x282>
   15634:	c6 c2       	rjmp	.+1420   	; 0x15bc2 <mp_execute_bytecode+0x80e>
   15636:	30 f4       	brcc	.+12     	; 0x15644 <mp_execute_bytecode+0x290>
   15638:	88 35       	cpi	r24, 0x58	; 88
   1563a:	09 f4       	brne	.+2      	; 0x1563e <mp_execute_bytecode+0x28a>
   1563c:	a8 c2       	rjmp	.+1360   	; 0x15b8e <mp_execute_bytecode+0x7da>
   1563e:	08 f4       	brcc	.+2      	; 0x15642 <mp_execute_bytecode+0x28e>
   15640:	9b c2       	rjmp	.+1334   	; 0x15b78 <mp_execute_bytecode+0x7c4>
   15642:	ba c2       	rjmp	.+1396   	; 0x15bb8 <mp_execute_bytecode+0x804>
   15644:	8c 35       	cpi	r24, 0x5C	; 92
   15646:	09 f4       	brne	.+2      	; 0x1564a <mp_execute_bytecode+0x296>
   15648:	9a c3       	rjmp	.+1844   	; 0x15d7e <mp_execute_bytecode+0x9ca>
   1564a:	08 f4       	brcc	.+2      	; 0x1564e <mp_execute_bytecode+0x29a>
   1564c:	c7 c2       	rjmp	.+1422   	; 0x15bdc <mp_execute_bytecode+0x828>
   1564e:	8d 35       	cpi	r24, 0x5D	; 93
   15650:	09 f4       	brne	.+2      	; 0x15654 <mp_execute_bytecode+0x2a0>
   15652:	e7 c4       	rjmp	.+2510   	; 0x16022 <mp_execute_bytecode+0xc6e>
   15654:	8e 35       	cpi	r24, 0x5E	; 94
   15656:	09 f4       	brne	.+2      	; 0x1565a <mp_execute_bytecode+0x2a6>
   15658:	1a c5       	rjmp	.+2612   	; 0x1608e <mp_execute_bytecode+0xcda>
   1565a:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   1565e:	85 36       	cpi	r24, 0x65	; 101
   15660:	11 f4       	brne	.+4      	; 0x15666 <mp_execute_bytecode+0x2b2>
   15662:	0c 94 9b b3 	jmp	0x16736	; 0x16736 <mp_execute_bytecode+0x1382>
   15666:	50 f4       	brcc	.+20     	; 0x1567c <mp_execute_bytecode+0x2c8>
   15668:	83 36       	cpi	r24, 0x63	; 99
   1566a:	c9 f0       	breq	.+50     	; 0x1569e <mp_execute_bytecode+0x2ea>
   1566c:	10 f0       	brcs	.+4      	; 0x15672 <mp_execute_bytecode+0x2be>
   1566e:	0c 94 7b b3 	jmp	0x166f6	; 0x166f6 <mp_execute_bytecode+0x1342>
   15672:	82 36       	cpi	r24, 0x62	; 98
   15674:	09 f4       	brne	.+2      	; 0x15678 <mp_execute_bytecode+0x2c4>
   15676:	da c5       	rjmp	.+2996   	; 0x1622c <mp_execute_bytecode+0xe78>
   15678:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>
   1567c:	87 36       	cpi	r24, 0x67	; 103
   1567e:	11 f4       	brne	.+4      	; 0x15684 <mp_execute_bytecode+0x2d0>
   15680:	0c 94 b2 b3 	jmp	0x16764	; 0x16764 <mp_execute_bytecode+0x13b0>
   15684:	10 f4       	brcc	.+4      	; 0x1568a <mp_execute_bytecode+0x2d6>
   15686:	0c 94 a6 b3 	jmp	0x1674c	; 0x1674c <mp_execute_bytecode+0x1398>
   1568a:	88 36       	cpi	r24, 0x68	; 104
   1568c:	11 f4       	brne	.+4      	; 0x15692 <mp_execute_bytecode+0x2de>
   1568e:	0c 94 d0 b3 	jmp	0x167a0	; 0x167a0 <mp_execute_bytecode+0x13ec>
   15692:	89 36       	cpi	r24, 0x69	; 105
   15694:	11 f4       	brne	.+4      	; 0x1569a <mp_execute_bytecode+0x2e6>
   15696:	0c 94 64 b4 	jmp	0x168c8	; 0x168c8 <mp_execute_bytecode+0x1514>
   1569a:	0c 94 70 b4 	jmp	0x168e0	; 0x168e0 <mp_execute_bytecode+0x152c>

                ENTRY(MP_BC_RETURN_VALUE):
                    MARK_EXC_IP_SELECTIVE();
unwind_return:
                    // Search for and execute finally handlers that aren't already active
                    while (exc_sp >= exc_stack) {
   1569e:	89 81       	ldd	r24, Y+1	; 0x01
   156a0:	9a 81       	ldd	r25, Y+2	; 0x02
   156a2:	ec a1       	ldd	r30, Y+36	; 0x24
   156a4:	fd a1       	ldd	r31, Y+37	; 0x25
   156a6:	8e 17       	cp	r24, r30
   156a8:	9f 07       	cpc	r25, r31
   156aa:	08 f0       	brcs	.+2      	; 0x156ae <mp_execute_bytecode+0x2fa>
   156ac:	c4 c7       	rjmp	.+3976   	; 0x16636 <mp_execute_bytecode+0x1282>
   156ae:	0c 94 6a b3 	jmp	0x166d4	; 0x166d4 <mp_execute_bytecode+0x1320>
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
#endif

                ENTRY(MP_BC_LOAD_CONST_FALSE):
                    PUSH(mp_const_false);
   156b2:	d3 01       	movw	r26, r6
   156b4:	13 96       	adiw	r26, 0x03	; 3
   156b6:	bc 92       	st	X, r11
   156b8:	ae 92       	st	-X, r10
   156ba:	12 97       	sbiw	r26, 0x02	; 2
   156bc:	f3 01       	movw	r30, r6
   156be:	32 96       	adiw	r30, 0x02	; 2
   156c0:	3f 01       	movw	r6, r30
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   156c2:	21 01       	movw	r4, r2
#endif

                ENTRY(MP_BC_LOAD_CONST_FALSE):
                    PUSH(mp_const_false);
                    DISPATCH();
   156c4:	fa ce       	rjmp	.-524    	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY(MP_BC_LOAD_CONST_NONE):
                    PUSH(mp_const_none);
   156c6:	e6 e0       	ldi	r30, 0x06	; 6
   156c8:	f0 e0       	ldi	r31, 0x00	; 0
   156ca:	d3 01       	movw	r26, r6
   156cc:	13 96       	adiw	r26, 0x03	; 3
   156ce:	fc 93       	st	X, r31
   156d0:	ee 93       	st	-X, r30
   156d2:	12 97       	sbiw	r26, 0x02	; 2
   156d4:	93 01       	movw	r18, r6
   156d6:	2e 5f       	subi	r18, 0xFE	; 254
   156d8:	3f 4f       	sbci	r19, 0xFF	; 255
   156da:	39 01       	movw	r6, r18
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   156dc:	21 01       	movw	r4, r2
                    PUSH(mp_const_false);
                    DISPATCH();

                ENTRY(MP_BC_LOAD_CONST_NONE):
                    PUSH(mp_const_none);
                    DISPATCH();
   156de:	ed ce       	rjmp	.-550    	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY(MP_BC_LOAD_CONST_TRUE):
                    PUSH(mp_const_true);
   156e0:	d3 01       	movw	r26, r6
   156e2:	13 96       	adiw	r26, 0x03	; 3
   156e4:	dc 92       	st	X, r13
   156e6:	ce 92       	st	-X, r12
   156e8:	12 97       	sbiw	r26, 0x02	; 2
   156ea:	f3 01       	movw	r30, r6
   156ec:	32 96       	adiw	r30, 0x02	; 2
   156ee:	3f 01       	movw	r6, r30
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   156f0:	21 01       	movw	r4, r2
                    PUSH(mp_const_none);
                    DISPATCH();

                ENTRY(MP_BC_LOAD_CONST_TRUE):
                    PUSH(mp_const_true);
                    DISPATCH();
   156f2:	e3 ce       	rjmp	.-570    	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY(MP_BC_LOAD_CONST_SMALL_INT): {
                    mp_uint_t num = 0;
                    if ((ip[0] & 0x40) != 0) {
   156f4:	d2 01       	movw	r26, r4
   156f6:	11 96       	adiw	r26, 0x01	; 1
   156f8:	8c 91       	ld	r24, X
   156fa:	86 fb       	bst	r24, 6
   156fc:	88 27       	eor	r24, r24
   156fe:	80 f9       	bld	r24, 0
   15700:	8c a7       	std	Y+44, r24	; 0x2c
   15702:	1d a6       	std	Y+45, r1	; 0x2d
   15704:	8c a5       	ldd	r24, Y+44	; 0x2c
   15706:	9d a5       	ldd	r25, Y+45	; 0x2d
   15708:	91 95       	neg	r25
   1570a:	81 95       	neg	r24
   1570c:	91 09       	sbc	r25, r1
                        // Number is negative
                        num--;
                    }
                    do {
                        num = (num << 7) | (*ip & 0x7f);
   1570e:	96 95       	lsr	r25
   15710:	98 2f       	mov	r25, r24
   15712:	88 27       	eor	r24, r24
   15714:	97 95       	ror	r25
   15716:	87 95       	ror	r24
   15718:	f1 01       	movw	r30, r2
   1571a:	21 91       	ld	r18, Z+
   1571c:	1f 01       	movw	r2, r30
   1571e:	32 2f       	mov	r19, r18
   15720:	3f 77       	andi	r19, 0x7F	; 127
   15722:	83 2b       	or	r24, r19
                    } while ((*ip++ & 0x80) != 0);
   15724:	22 23       	and	r18, r18
   15726:	9c f3       	brlt	.-26     	; 0x1570e <mp_execute_bytecode+0x35a>
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
   15728:	88 0f       	add	r24, r24
   1572a:	99 1f       	adc	r25, r25
   1572c:	81 60       	ori	r24, 0x01	; 1
   1572e:	d3 01       	movw	r26, r6
   15730:	13 96       	adiw	r26, 0x03	; 3
   15732:	9c 93       	st	X, r25
   15734:	8e 93       	st	-X, r24
   15736:	12 97       	sbiw	r26, 0x02	; 2
   15738:	f3 01       	movw	r30, r6
   1573a:	32 96       	adiw	r30, 0x02	; 2
   1573c:	3f 01       	movw	r6, r30
                        // Number is negative
                        num--;
                    }
                    do {
                        num = (num << 7) | (*ip & 0x7f);
                    } while ((*ip++ & 0x80) != 0);
   1573e:	21 01       	movw	r4, r2
                    PUSH(MP_OBJ_NEW_SMALL_INT(num));
                    DISPATCH();
   15740:	bc ce       	rjmp	.-648    	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_LOAD_CONST_STRING): {
                    DECODE_QSTR;
   15742:	d2 01       	movw	r26, r4
   15744:	12 96       	adiw	r26, 0x02	; 2
   15746:	8c 91       	ld	r24, X
   15748:	12 97       	sbiw	r26, 0x02	; 2
   1574a:	90 e0       	ldi	r25, 0x00	; 0
   1574c:	98 2f       	mov	r25, r24
   1574e:	88 27       	eor	r24, r24
   15750:	11 96       	adiw	r26, 0x01	; 1
   15752:	2c 91       	ld	r18, X
   15754:	82 2b       	or	r24, r18
   15756:	b3 e0       	ldi	r27, 0x03	; 3
   15758:	4b 0e       	add	r4, r27
   1575a:	51 1c       	adc	r5, r1
                    PUSH(MP_OBJ_NEW_QSTR(qst));
   1575c:	88 0f       	add	r24, r24
   1575e:	99 1f       	adc	r25, r25
   15760:	88 0f       	add	r24, r24
   15762:	99 1f       	adc	r25, r25
   15764:	88 0f       	add	r24, r24
   15766:	99 1f       	adc	r25, r25
   15768:	82 60       	ori	r24, 0x02	; 2
   1576a:	f3 01       	movw	r30, r6
   1576c:	93 83       	std	Z+3, r25	; 0x03
   1576e:	82 83       	std	Z+2, r24	; 0x02
   15770:	93 01       	movw	r18, r6
   15772:	2e 5f       	subi	r18, 0xFE	; 254
   15774:	3f 4f       	sbci	r19, 0xFF	; 255
   15776:	39 01       	movw	r6, r18
                    DISPATCH();
   15778:	a0 ce       	rjmp	.-704    	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1577a:	80 e0       	ldi	r24, 0x00	; 0
   1577c:	90 e0       	ldi	r25, 0x00	; 0
                    PUSH(MP_OBJ_NEW_QSTR(qst));
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_CONST_OBJ): {
                    DECODE_OBJ;
   1577e:	96 95       	lsr	r25
   15780:	98 2f       	mov	r25, r24
   15782:	88 27       	eor	r24, r24
   15784:	97 95       	ror	r25
   15786:	87 95       	ror	r24
   15788:	d1 01       	movw	r26, r2
   1578a:	2d 91       	ld	r18, X+
   1578c:	1d 01       	movw	r2, r26
   1578e:	32 2f       	mov	r19, r18
   15790:	3f 77       	andi	r19, 0x7F	; 127
   15792:	83 0f       	add	r24, r19
   15794:	91 1d       	adc	r25, r1
   15796:	22 23       	and	r18, r18
   15798:	94 f3       	brlt	.-28     	; 0x1577e <mp_execute_bytecode+0x3ca>
   1579a:	aa a1       	ldd	r26, Y+34	; 0x22
   1579c:	bb a1       	ldd	r27, Y+35	; 0x23
   1579e:	ed 91       	ld	r30, X+
   157a0:	fc 91       	ld	r31, X
   157a2:	88 0f       	add	r24, r24
   157a4:	99 1f       	adc	r25, r25
   157a6:	06 80       	ldd	r0, Z+6	; 0x06
   157a8:	f7 81       	ldd	r31, Z+7	; 0x07
   157aa:	e0 2d       	mov	r30, r0
   157ac:	e8 0f       	add	r30, r24
   157ae:	f9 1f       	adc	r31, r25
                    PUSH(obj);
   157b0:	80 81       	ld	r24, Z
   157b2:	91 81       	ldd	r25, Z+1	; 0x01
   157b4:	f3 01       	movw	r30, r6
   157b6:	93 83       	std	Z+3, r25	; 0x03
   157b8:	82 83       	std	Z+2, r24	; 0x02
   157ba:	93 01       	movw	r18, r6
   157bc:	2e 5f       	subi	r18, 0xFE	; 254
   157be:	3f 4f       	sbci	r19, 0xFF	; 255
   157c0:	39 01       	movw	r6, r18
                    PUSH(MP_OBJ_NEW_QSTR(qst));
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_CONST_OBJ): {
                    DECODE_OBJ;
   157c2:	21 01       	movw	r4, r2
                    PUSH(obj);
                    DISPATCH();
   157c4:	7a ce       	rjmp	.-780    	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_LOAD_NULL):
                    PUSH(MP_OBJ_NULL);
   157c6:	d3 01       	movw	r26, r6
   157c8:	13 96       	adiw	r26, 0x03	; 3
   157ca:	1c 92       	st	X, r1
   157cc:	1e 92       	st	-X, r1
   157ce:	12 97       	sbiw	r26, 0x02	; 2
   157d0:	f3 01       	movw	r30, r6
   157d2:	32 96       	adiw	r30, 0x02	; 2
   157d4:	3f 01       	movw	r6, r30
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   157d6:	21 01       	movw	r4, r2
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_NULL):
                    PUSH(MP_OBJ_NULL);
                    DISPATCH();
   157d8:	70 ce       	rjmp	.-800    	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   157da:	80 e0       	ldi	r24, 0x00	; 0
   157dc:	90 e0       	ldi	r25, 0x00	; 0
                ENTRY(MP_BC_LOAD_NULL):
                    PUSH(MP_OBJ_NULL);
                    DISPATCH();

                ENTRY(MP_BC_LOAD_FAST_N): {
                    DECODE_UINT;
   157de:	96 95       	lsr	r25
   157e0:	98 2f       	mov	r25, r24
   157e2:	88 27       	eor	r24, r24
   157e4:	97 95       	ror	r25
   157e6:	87 95       	ror	r24
   157e8:	d1 01       	movw	r26, r2
   157ea:	2d 91       	ld	r18, X+
   157ec:	1d 01       	movw	r2, r26
   157ee:	32 2f       	mov	r19, r18
   157f0:	3f 77       	andi	r19, 0x7F	; 127
   157f2:	83 0f       	add	r24, r19
   157f4:	91 1d       	adc	r25, r1
   157f6:	22 23       	and	r18, r18
   157f8:	94 f3       	brlt	.-28     	; 0x157de <mp_execute_bytecode+0x42a>
                    obj_shared = fastn[-unum];
   157fa:	88 0f       	add	r24, r24
   157fc:	99 1f       	adc	r25, r25
   157fe:	e8 a5       	ldd	r30, Y+40	; 0x28
   15800:	f9 a5       	ldd	r31, Y+41	; 0x29
   15802:	e8 1b       	sub	r30, r24
   15804:	f9 0b       	sbc	r31, r25
   15806:	80 81       	ld	r24, Z
   15808:	91 81       	ldd	r25, Z+1	; 0x01
                ENTRY(MP_BC_LOAD_NULL):
                    PUSH(MP_OBJ_NULL);
                    DISPATCH();

                ENTRY(MP_BC_LOAD_FAST_N): {
                    DECODE_UINT;
   1580a:	2d 01       	movw	r4, r26
                    obj_shared = fastn[-unum];
                    load_check:
                    if (obj_shared == MP_OBJ_NULL) {
   1580c:	00 97       	sbiw	r24, 0x00	; 0
   1580e:	69 f4       	brne	.+26     	; 0x1582a <mp_execute_bytecode+0x476>
                        local_name_error: {
                            MARK_EXC_IP_SELECTIVE();
                            mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NameError, MP_ERROR_TEXT("local variable referenced before assignment"));
   15810:	6e ea       	ldi	r22, 0xAE	; 174
   15812:	7d e0       	ldi	r23, 0x0D	; 13
   15814:	88 e3       	ldi	r24, 0x38	; 56
   15816:	90 e2       	ldi	r25, 0x20	; 32
   15818:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   1581c:	8c 01       	movw	r16, r24
                            RAISE(obj);
   1581e:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   15822:	1e 83       	std	Y+6, r17	; 0x06
   15824:	0d 83       	std	Y+5, r16	; 0x05
   15826:	0c 94 f1 b4 	jmp	0x169e2	; 0x169e2 <mp_execute_bytecode+0x162e>
                        }
                    }
                    PUSH(obj_shared);
   1582a:	f3 01       	movw	r30, r6
   1582c:	93 83       	std	Z+3, r25	; 0x03
   1582e:	82 83       	std	Z+2, r24	; 0x02
   15830:	93 01       	movw	r18, r6
   15832:	2e 5f       	subi	r18, 0xFE	; 254
   15834:	3f 4f       	sbci	r19, 0xFF	; 255
   15836:	39 01       	movw	r6, r18
                    DISPATCH();
   15838:	40 ce       	rjmp	.-896    	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1583a:	80 e0       	ldi	r24, 0x00	; 0
   1583c:	90 e0       	ldi	r25, 0x00	; 0
                    PUSH(obj_shared);
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_DEREF): {
                    DECODE_UINT;
   1583e:	96 95       	lsr	r25
   15840:	98 2f       	mov	r25, r24
   15842:	88 27       	eor	r24, r24
   15844:	97 95       	ror	r25
   15846:	87 95       	ror	r24
   15848:	d1 01       	movw	r26, r2
   1584a:	2d 91       	ld	r18, X+
   1584c:	1d 01       	movw	r2, r26
   1584e:	32 2f       	mov	r19, r18
   15850:	3f 77       	andi	r19, 0x7F	; 127
   15852:	83 0f       	add	r24, r19
   15854:	91 1d       	adc	r25, r1
   15856:	22 23       	and	r18, r18
   15858:	94 f3       	brlt	.-28     	; 0x1583e <mp_execute_bytecode+0x48a>
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
   1585a:	88 0f       	add	r24, r24
   1585c:	99 1f       	adc	r25, r25
   1585e:	e8 a5       	ldd	r30, Y+40	; 0x28
   15860:	f9 a5       	ldd	r31, Y+41	; 0x29
   15862:	e8 1b       	sub	r30, r24
   15864:	f9 0b       	sbc	r31, r25
    mp_obj_t obj;
} mp_obj_cell_t;

mp_obj_t mp_obj_cell_get(mp_obj_t self_in) {
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    return self->obj;
   15866:	01 90       	ld	r0, Z+
   15868:	f0 81       	ld	r31, Z
   1586a:	e0 2d       	mov	r30, r0
   1586c:	82 81       	ldd	r24, Z+2	; 0x02
   1586e:	93 81       	ldd	r25, Z+3	; 0x03
                    PUSH(obj_shared);
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_DEREF): {
                    DECODE_UINT;
   15870:	2d 01       	movw	r4, r26
                    obj_shared = mp_obj_cell_get(fastn[-unum]);
                    goto load_check;
   15872:	cc cf       	rjmp	.-104    	; 0x1580c <mp_execute_bytecode+0x458>
                }

                ENTRY(MP_BC_LOAD_NAME): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15874:	f2 01       	movw	r30, r4
   15876:	82 81       	ldd	r24, Z+2	; 0x02
   15878:	90 e0       	ldi	r25, 0x00	; 0
   1587a:	98 2f       	mov	r25, r24
   1587c:	88 27       	eor	r24, r24
   1587e:	21 81       	ldd	r18, Z+1	; 0x01
   15880:	f3 e0       	ldi	r31, 0x03	; 3
   15882:	4f 0e       	add	r4, r31
   15884:	51 1c       	adc	r5, r1
                    PUSH(mp_load_name(qst));
   15886:	83 01       	movw	r16, r6
   15888:	0e 5f       	subi	r16, 0xFE	; 254
   1588a:	1f 4f       	sbci	r17, 0xFF	; 255
   1588c:	82 2b       	or	r24, r18
   1588e:	0e 94 60 3e 	call	0x7cc0	; 0x7cc0 <mp_load_name>
   15892:	d3 01       	movw	r26, r6
   15894:	13 96       	adiw	r26, 0x03	; 3
   15896:	9c 93       	st	X, r25
   15898:	8e 93       	st	-X, r24
   1589a:	12 97       	sbiw	r26, 0x02	; 2
   1589c:	38 01       	movw	r6, r16
                    DISPATCH();
   1589e:	0d ce       	rjmp	.-998    	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_LOAD_GLOBAL): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   158a0:	f2 01       	movw	r30, r4
   158a2:	82 81       	ldd	r24, Z+2	; 0x02
   158a4:	90 e0       	ldi	r25, 0x00	; 0
   158a6:	98 2f       	mov	r25, r24
   158a8:	88 27       	eor	r24, r24
   158aa:	21 81       	ldd	r18, Z+1	; 0x01
   158ac:	f3 e0       	ldi	r31, 0x03	; 3
   158ae:	4f 0e       	add	r4, r31
   158b0:	51 1c       	adc	r5, r1
                    PUSH(mp_load_global(qst));
   158b2:	83 01       	movw	r16, r6
   158b4:	0e 5f       	subi	r16, 0xFE	; 254
   158b6:	1f 4f       	sbci	r17, 0xFF	; 255
   158b8:	82 2b       	or	r24, r18
   158ba:	0e 94 39 3e 	call	0x7c72	; 0x7c72 <mp_load_global>
   158be:	d3 01       	movw	r26, r6
   158c0:	13 96       	adiw	r26, 0x03	; 3
   158c2:	9c 93       	st	X, r25
   158c4:	8e 93       	st	-X, r24
   158c6:	12 97       	sbiw	r26, 0x02	; 2
   158c8:	38 01       	movw	r6, r16
                    DISPATCH();
   158ca:	f7 cd       	rjmp	.-1042   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_LOAD_ATTR): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   158cc:	f2 01       	movw	r30, r4
   158ce:	62 81       	ldd	r22, Z+2	; 0x02
   158d0:	70 e0       	ldi	r23, 0x00	; 0
   158d2:	76 2f       	mov	r23, r22
   158d4:	66 27       	eor	r22, r22
   158d6:	81 81       	ldd	r24, Z+1	; 0x01
   158d8:	68 2b       	or	r22, r24
   158da:	f3 e0       	ldi	r31, 0x03	; 3
   158dc:	4f 0e       	add	r4, r31
   158de:	51 1c       	adc	r5, r1
                    if (elem) {
                        obj = elem->value;
                    } else
                    #endif
                    {
                        obj = mp_load_attr(top, qst);
   158e0:	d3 01       	movw	r26, r6
   158e2:	8d 91       	ld	r24, X+
   158e4:	9c 91       	ld	r25, X
   158e6:	0e 94 14 3f 	call	0x7e28	; 0x7e28 <mp_load_attr>
                    }
                    SET_TOP(obj);
   158ea:	f3 01       	movw	r30, r6
   158ec:	91 83       	std	Z+1, r25	; 0x01
   158ee:	80 83       	st	Z, r24
                    DISPATCH();
   158f0:	e4 cd       	rjmp	.-1080   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_LOAD_METHOD): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   158f2:	d2 01       	movw	r26, r4
   158f4:	12 96       	adiw	r26, 0x02	; 2
   158f6:	6c 91       	ld	r22, X
   158f8:	12 97       	sbiw	r26, 0x02	; 2
   158fa:	70 e0       	ldi	r23, 0x00	; 0
   158fc:	76 2f       	mov	r23, r22
   158fe:	66 27       	eor	r22, r22
   15900:	11 96       	adiw	r26, 0x01	; 1
   15902:	8c 91       	ld	r24, X
   15904:	68 2b       	or	r22, r24
   15906:	b3 e0       	ldi	r27, 0x03	; 3
   15908:	4b 0e       	add	r4, r27
   1590a:	51 1c       	adc	r5, r1
                    mp_load_method(*sp, qst, sp);
   1590c:	a3 01       	movw	r20, r6
   1590e:	f3 01       	movw	r30, r6
   15910:	80 81       	ld	r24, Z
   15912:	91 81       	ldd	r25, Z+1	; 0x01
   15914:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
                    sp += 1;
   15918:	f2 e0       	ldi	r31, 0x02	; 2
   1591a:	6f 0e       	add	r6, r31
   1591c:	71 1c       	adc	r7, r1
                    DISPATCH();
   1591e:	cd cd       	rjmp	.-1126   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_LOAD_SUPER_METHOD): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15920:	d2 01       	movw	r26, r4
   15922:	12 96       	adiw	r26, 0x02	; 2
   15924:	8c 91       	ld	r24, X
   15926:	12 97       	sbiw	r26, 0x02	; 2
   15928:	90 e0       	ldi	r25, 0x00	; 0
   1592a:	98 2f       	mov	r25, r24
   1592c:	88 27       	eor	r24, r24
   1592e:	11 96       	adiw	r26, 0x01	; 1
   15930:	2c 91       	ld	r18, X
   15932:	b3 e0       	ldi	r27, 0x03	; 3
   15934:	4b 0e       	add	r4, r27
   15936:	51 1c       	adc	r5, r1
                    sp -= 1;
   15938:	83 01       	movw	r16, r6
   1593a:	02 50       	subi	r16, 0x02	; 2
   1593c:	11 09       	sbc	r17, r1
                    mp_load_super_method(qst, sp - 1);
   1593e:	b3 01       	movw	r22, r6
   15940:	64 50       	subi	r22, 0x04	; 4
   15942:	71 09       	sbc	r23, r1
   15944:	82 2b       	or	r24, r18
   15946:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <mp_load_super_method>
                }

                ENTRY(MP_BC_LOAD_SUPER_METHOD): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
                    sp -= 1;
   1594a:	38 01       	movw	r6, r16
   1594c:	b6 cd       	rjmp	.-1172   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_LOAD_BUILD_CLASS):
                    MARK_EXC_IP_SELECTIVE();
                    PUSH(mp_load_build_class());
   1594e:	f3 01       	movw	r30, r6
   15950:	93 82       	std	Z+3, r9	; 0x03
   15952:	82 82       	std	Z+2, r8	; 0x02
   15954:	93 01       	movw	r18, r6
   15956:	2e 5f       	subi	r18, 0xFE	; 254
   15958:	3f 4f       	sbci	r19, 0xFF	; 255
   1595a:	39 01       	movw	r6, r18
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1595c:	21 01       	movw	r4, r2
                }

                ENTRY(MP_BC_LOAD_BUILD_CLASS):
                    MARK_EXC_IP_SELECTIVE();
                    PUSH(mp_load_build_class());
                    DISPATCH();
   1595e:	ad cd       	rjmp	.-1190   	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY(MP_BC_LOAD_SUBSCR): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t index = POP();
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
   15960:	d3 01       	movw	r26, r6
   15962:	6d 91       	ld	r22, X+
   15964:	7c 91       	ld	r23, X
   15966:	44 e0       	ldi	r20, 0x04	; 4
   15968:	50 e0       	ldi	r21, 0x00	; 0
   1596a:	f3 01       	movw	r30, r6
   1596c:	92 91       	ld	r25, -Z
   1596e:	82 91       	ld	r24, -Z
   15970:	8f 01       	movw	r16, r30
   15972:	0e 94 43 29 	call	0x5286	; 0x5286 <mp_obj_subscr>
   15976:	d8 01       	movw	r26, r16
   15978:	8d 93       	st	X+, r24
   1597a:	9c 93       	st	X, r25
                    PUSH(mp_load_build_class());
                    DISPATCH();

                ENTRY(MP_BC_LOAD_SUBSCR): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t index = POP();
   1597c:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1597e:	21 01       	movw	r4, r2

                ENTRY(MP_BC_LOAD_SUBSCR): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t index = POP();
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
                    DISPATCH();
   15980:	9c cd       	rjmp	.-1224   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15982:	80 e0       	ldi	r24, 0x00	; 0
   15984:	90 e0       	ldi	r25, 0x00	; 0
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_FAST_N): {
                    DECODE_UINT;
   15986:	96 95       	lsr	r25
   15988:	98 2f       	mov	r25, r24
   1598a:	88 27       	eor	r24, r24
   1598c:	97 95       	ror	r25
   1598e:	87 95       	ror	r24
   15990:	f1 01       	movw	r30, r2
   15992:	21 91       	ld	r18, Z+
   15994:	1f 01       	movw	r2, r30
   15996:	32 2f       	mov	r19, r18
   15998:	3f 77       	andi	r19, 0x7F	; 127
   1599a:	83 0f       	add	r24, r19
   1599c:	91 1d       	adc	r25, r1
   1599e:	22 23       	and	r18, r18
   159a0:	94 f3       	brlt	.-28     	; 0x15986 <mp_execute_bytecode+0x5d2>
                    fastn[-unum] = POP();
   159a2:	d3 01       	movw	r26, r6
   159a4:	2d 91       	ld	r18, X+
   159a6:	3c 91       	ld	r19, X
   159a8:	88 0f       	add	r24, r24
   159aa:	99 1f       	adc	r25, r25
   159ac:	e8 a5       	ldd	r30, Y+40	; 0x28
   159ae:	f9 a5       	ldd	r31, Y+41	; 0x29
   159b0:	e8 1b       	sub	r30, r24
   159b2:	f9 0b       	sbc	r31, r25
   159b4:	31 83       	std	Z+1, r19	; 0x01
   159b6:	20 83       	st	Z, r18
   159b8:	f3 01       	movw	r30, r6
   159ba:	32 97       	sbiw	r30, 0x02	; 2
   159bc:	3f 01       	movw	r6, r30
                    SET_TOP(mp_obj_subscr(TOP(), index, MP_OBJ_SENTINEL));
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_FAST_N): {
                    DECODE_UINT;
   159be:	21 01       	movw	r4, r2
                    fastn[-unum] = POP();
                    DISPATCH();
   159c0:	7c cd       	rjmp	.-1288   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   159c2:	80 e0       	ldi	r24, 0x00	; 0
   159c4:	90 e0       	ldi	r25, 0x00	; 0
                    fastn[-unum] = POP();
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_DEREF): {
                    DECODE_UINT;
   159c6:	96 95       	lsr	r25
   159c8:	98 2f       	mov	r25, r24
   159ca:	88 27       	eor	r24, r24
   159cc:	97 95       	ror	r25
   159ce:	87 95       	ror	r24
   159d0:	d1 01       	movw	r26, r2
   159d2:	2d 91       	ld	r18, X+
   159d4:	1d 01       	movw	r2, r26
   159d6:	32 2f       	mov	r19, r18
   159d8:	3f 77       	andi	r19, 0x7F	; 127
   159da:	83 0f       	add	r24, r19
   159dc:	91 1d       	adc	r25, r1
   159de:	22 23       	and	r18, r18
   159e0:	94 f3       	brlt	.-28     	; 0x159c6 <mp_execute_bytecode+0x612>
                    mp_obj_cell_set(fastn[-unum], POP());
   159e2:	f3 01       	movw	r30, r6
   159e4:	20 81       	ld	r18, Z
   159e6:	31 81       	ldd	r19, Z+1	; 0x01
   159e8:	88 0f       	add	r24, r24
   159ea:	99 1f       	adc	r25, r25
   159ec:	e8 a5       	ldd	r30, Y+40	; 0x28
   159ee:	f9 a5       	ldd	r31, Y+41	; 0x29
   159f0:	e8 1b       	sub	r30, r24
   159f2:	f9 0b       	sbc	r31, r25
   159f4:	01 90       	ld	r0, Z+
   159f6:	f0 81       	ld	r31, Z
   159f8:	e0 2d       	mov	r30, r0
}

void mp_obj_cell_set(mp_obj_t self_in, mp_obj_t obj) {
    mp_obj_cell_t *self = MP_OBJ_TO_PTR(self_in);
    self->obj = obj;
   159fa:	33 83       	std	Z+3, r19	; 0x03
   159fc:	22 83       	std	Z+2, r18	; 0x02
   159fe:	93 01       	movw	r18, r6
   15a00:	22 50       	subi	r18, 0x02	; 2
   15a02:	31 09       	sbc	r19, r1
   15a04:	39 01       	movw	r6, r18
                    fastn[-unum] = POP();
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_DEREF): {
                    DECODE_UINT;
   15a06:	2d 01       	movw	r4, r26
   15a08:	58 cd       	rjmp	.-1360   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_NAME): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15a0a:	d2 01       	movw	r26, r4
   15a0c:	12 96       	adiw	r26, 0x02	; 2
   15a0e:	8c 91       	ld	r24, X
   15a10:	12 97       	sbiw	r26, 0x02	; 2
   15a12:	90 e0       	ldi	r25, 0x00	; 0
   15a14:	98 2f       	mov	r25, r24
   15a16:	88 27       	eor	r24, r24
   15a18:	11 96       	adiw	r26, 0x01	; 1
   15a1a:	2c 91       	ld	r18, X
   15a1c:	b3 e0       	ldi	r27, 0x03	; 3
   15a1e:	4b 0e       	add	r4, r27
   15a20:	51 1c       	adc	r5, r1
                    mp_store_name(qst, POP());
   15a22:	83 01       	movw	r16, r6
   15a24:	02 50       	subi	r16, 0x02	; 2
   15a26:	11 09       	sbc	r17, r1
   15a28:	f3 01       	movw	r30, r6
   15a2a:	60 81       	ld	r22, Z
   15a2c:	71 81       	ldd	r23, Z+1	; 0x01
   15a2e:	82 2b       	or	r24, r18
   15a30:	0e 94 a1 42 	call	0x8542	; 0x8542 <mp_store_name>
   15a34:	38 01       	movw	r6, r16
   15a36:	41 cd       	rjmp	.-1406   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_GLOBAL): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15a38:	d2 01       	movw	r26, r4
   15a3a:	12 96       	adiw	r26, 0x02	; 2
   15a3c:	8c 91       	ld	r24, X
   15a3e:	12 97       	sbiw	r26, 0x02	; 2
   15a40:	90 e0       	ldi	r25, 0x00	; 0
   15a42:	98 2f       	mov	r25, r24
   15a44:	88 27       	eor	r24, r24
   15a46:	11 96       	adiw	r26, 0x01	; 1
   15a48:	2c 91       	ld	r18, X
   15a4a:	b3 e0       	ldi	r27, 0x03	; 3
   15a4c:	4b 0e       	add	r4, r27
   15a4e:	51 1c       	adc	r5, r1
                    mp_store_global(qst, POP());
   15a50:	83 01       	movw	r16, r6
   15a52:	02 50       	subi	r16, 0x02	; 2
   15a54:	11 09       	sbc	r17, r1
   15a56:	f3 01       	movw	r30, r6
   15a58:	60 81       	ld	r22, Z
   15a5a:	71 81       	ldd	r23, Z+1	; 0x01
   15a5c:	82 2b       	or	r24, r18
   15a5e:	0e 94 b0 42 	call	0x8560	; 0x8560 <mp_store_global>
   15a62:	38 01       	movw	r6, r16
   15a64:	2a cd       	rjmp	.-1452   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_STORE_ATTR): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15a66:	d2 01       	movw	r26, r4
   15a68:	12 96       	adiw	r26, 0x02	; 2
   15a6a:	6c 91       	ld	r22, X
   15a6c:	12 97       	sbiw	r26, 0x02	; 2
   15a6e:	70 e0       	ldi	r23, 0x00	; 0
   15a70:	76 2f       	mov	r23, r22
   15a72:	66 27       	eor	r22, r22
   15a74:	11 96       	adiw	r26, 0x01	; 1
   15a76:	8c 91       	ld	r24, X
   15a78:	68 2b       	or	r22, r24
   15a7a:	b3 e0       	ldi	r27, 0x03	; 3
   15a7c:	4b 0e       	add	r4, r27
   15a7e:	51 1c       	adc	r5, r1
                    mp_store_attr(sp[0], qst, sp[-1]);
   15a80:	f3 01       	movw	r30, r6
   15a82:	32 97       	sbiw	r30, 0x02	; 2
   15a84:	40 81       	ld	r20, Z
   15a86:	51 81       	ldd	r21, Z+1	; 0x01
   15a88:	f3 01       	movw	r30, r6
   15a8a:	80 81       	ld	r24, Z
   15a8c:	91 81       	ldd	r25, Z+1	; 0x01
   15a8e:	0e 94 b5 24 	call	0x496a	; 0x496a <mp_store_attr>
                    sp -= 2;
   15a92:	f4 e0       	ldi	r31, 0x04	; 4
   15a94:	6f 1a       	sub	r6, r31
   15a96:	71 08       	sbc	r7, r1
                    DISPATCH();
   15a98:	10 cd       	rjmp	.-1504   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_STORE_SUBSCR):
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
   15a9a:	f3 01       	movw	r30, r6
   15a9c:	34 97       	sbiw	r30, 0x04	; 4
   15a9e:	40 81       	ld	r20, Z
   15aa0:	51 81       	ldd	r21, Z+1	; 0x01
   15aa2:	d3 01       	movw	r26, r6
   15aa4:	6d 91       	ld	r22, X+
   15aa6:	7c 91       	ld	r23, X
   15aa8:	32 96       	adiw	r30, 0x02	; 2
   15aaa:	80 81       	ld	r24, Z
   15aac:	91 81       	ldd	r25, Z+1	; 0x01
   15aae:	0e 94 43 29 	call	0x5286	; 0x5286 <mp_obj_subscr>
                    sp -= 3;
   15ab2:	b6 e0       	ldi	r27, 0x06	; 6
   15ab4:	6b 1a       	sub	r6, r27
   15ab6:	71 08       	sbc	r7, r1
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15ab8:	21 01       	movw	r4, r2

                ENTRY(MP_BC_STORE_SUBSCR):
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_subscr(sp[-1], sp[0], sp[-2]);
                    sp -= 3;
                    DISPATCH();
   15aba:	ff cc       	rjmp	.-1538   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15abc:	80 e0       	ldi	r24, 0x00	; 0
   15abe:	90 e0       	ldi	r25, 0x00	; 0
                    sp -= 3;
                    DISPATCH();

                ENTRY(MP_BC_DELETE_FAST): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   15ac0:	96 95       	lsr	r25
   15ac2:	98 2f       	mov	r25, r24
   15ac4:	88 27       	eor	r24, r24
   15ac6:	97 95       	ror	r25
   15ac8:	87 95       	ror	r24
   15aca:	f1 01       	movw	r30, r2
   15acc:	21 91       	ld	r18, Z+
   15ace:	1f 01       	movw	r2, r30
   15ad0:	32 2f       	mov	r19, r18
   15ad2:	3f 77       	andi	r19, 0x7F	; 127
   15ad4:	83 0f       	add	r24, r19
   15ad6:	91 1d       	adc	r25, r1
   15ad8:	22 23       	and	r18, r18
   15ada:	94 f3       	brlt	.-28     	; 0x15ac0 <mp_execute_bytecode+0x70c>
                    if (fastn[-unum] == MP_OBJ_NULL) {
   15adc:	88 0f       	add	r24, r24
   15ade:	99 1f       	adc	r25, r25
   15ae0:	e8 a5       	ldd	r30, Y+40	; 0x28
   15ae2:	f9 a5       	ldd	r31, Y+41	; 0x29
   15ae4:	e8 1b       	sub	r30, r24
   15ae6:	f9 0b       	sbc	r31, r25
   15ae8:	80 81       	ld	r24, Z
   15aea:	91 81       	ldd	r25, Z+1	; 0x01
   15aec:	89 2b       	or	r24, r25
   15aee:	09 f4       	brne	.+2      	; 0x15af2 <mp_execute_bytecode+0x73e>
   15af0:	8f ce       	rjmp	.-738    	; 0x15810 <mp_execute_bytecode+0x45c>
                        goto local_name_error;
                    }
                    fastn[-unum] = MP_OBJ_NULL;
   15af2:	11 82       	std	Z+1, r1	; 0x01
   15af4:	10 82       	st	Z, r1
                    sp -= 3;
                    DISPATCH();

                ENTRY(MP_BC_DELETE_FAST): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   15af6:	21 01       	movw	r4, r2
                    if (fastn[-unum] == MP_OBJ_NULL) {
                        goto local_name_error;
                    }
                    fastn[-unum] = MP_OBJ_NULL;
                    DISPATCH();
   15af8:	e0 cc       	rjmp	.-1600   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15afa:	80 e0       	ldi	r24, 0x00	; 0
   15afc:	90 e0       	ldi	r25, 0x00	; 0
                    DISPATCH();
                }

                ENTRY(MP_BC_DELETE_DEREF): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   15afe:	96 95       	lsr	r25
   15b00:	98 2f       	mov	r25, r24
   15b02:	88 27       	eor	r24, r24
   15b04:	97 95       	ror	r25
   15b06:	87 95       	ror	r24
   15b08:	d1 01       	movw	r26, r2
   15b0a:	2d 91       	ld	r18, X+
   15b0c:	1d 01       	movw	r2, r26
   15b0e:	32 2f       	mov	r19, r18
   15b10:	3f 77       	andi	r19, 0x7F	; 127
   15b12:	83 0f       	add	r24, r19
   15b14:	91 1d       	adc	r25, r1
   15b16:	22 23       	and	r18, r18
   15b18:	94 f3       	brlt	.-28     	; 0x15afe <mp_execute_bytecode+0x74a>
                    if (mp_obj_cell_get(fastn[-unum]) == MP_OBJ_NULL) {
   15b1a:	88 0f       	add	r24, r24
   15b1c:	99 1f       	adc	r25, r25
   15b1e:	e8 a5       	ldd	r30, Y+40	; 0x28
   15b20:	f9 a5       	ldd	r31, Y+41	; 0x29
   15b22:	e8 1b       	sub	r30, r24
   15b24:	f9 0b       	sbc	r31, r25
   15b26:	01 90       	ld	r0, Z+
   15b28:	f0 81       	ld	r31, Z
   15b2a:	e0 2d       	mov	r30, r0
   15b2c:	82 81       	ldd	r24, Z+2	; 0x02
   15b2e:	93 81       	ldd	r25, Z+3	; 0x03
   15b30:	89 2b       	or	r24, r25
   15b32:	09 f4       	brne	.+2      	; 0x15b36 <mp_execute_bytecode+0x782>
   15b34:	6d ce       	rjmp	.-806    	; 0x15810 <mp_execute_bytecode+0x45c>
   15b36:	13 82       	std	Z+3, r1	; 0x03
   15b38:	12 82       	std	Z+2, r1	; 0x02
                    DISPATCH();
                }

                ENTRY(MP_BC_DELETE_DEREF): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   15b3a:	2d 01       	movw	r4, r26
   15b3c:	be cc       	rjmp	.-1668   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_DELETE_NAME): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15b3e:	f2 01       	movw	r30, r4
   15b40:	82 81       	ldd	r24, Z+2	; 0x02
   15b42:	90 e0       	ldi	r25, 0x00	; 0
   15b44:	98 2f       	mov	r25, r24
   15b46:	88 27       	eor	r24, r24
   15b48:	21 81       	ldd	r18, Z+1	; 0x01
   15b4a:	f3 e0       	ldi	r31, 0x03	; 3
   15b4c:	4f 0e       	add	r4, r31
   15b4e:	51 1c       	adc	r5, r1
                    mp_delete_name(qst);
   15b50:	82 2b       	or	r24, r18
   15b52:	0e 94 80 a0 	call	0x14100	; 0x14100 <mp_delete_name>
   15b56:	b1 cc       	rjmp	.-1694   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_DELETE_GLOBAL): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   15b58:	d2 01       	movw	r26, r4
   15b5a:	12 96       	adiw	r26, 0x02	; 2
   15b5c:	8c 91       	ld	r24, X
   15b5e:	12 97       	sbiw	r26, 0x02	; 2
   15b60:	90 e0       	ldi	r25, 0x00	; 0
   15b62:	98 2f       	mov	r25, r24
   15b64:	88 27       	eor	r24, r24
   15b66:	11 96       	adiw	r26, 0x01	; 1
   15b68:	2c 91       	ld	r18, X
   15b6a:	b3 e0       	ldi	r27, 0x03	; 3
   15b6c:	4b 0e       	add	r4, r27
   15b6e:	51 1c       	adc	r5, r1
                    mp_delete_global(qst);
   15b70:	82 2b       	or	r24, r18
   15b72:	0e 94 8e a0 	call	0x1411c	; 0x1411c <mp_delete_global>
   15b76:	a1 cc       	rjmp	.-1726   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_DUP_TOP): {
                    mp_obj_t top = TOP();
                    PUSH(top);
   15b78:	f3 01       	movw	r30, r6
   15b7a:	80 81       	ld	r24, Z
   15b7c:	91 81       	ldd	r25, Z+1	; 0x01
   15b7e:	93 83       	std	Z+3, r25	; 0x03
   15b80:	82 83       	std	Z+2, r24	; 0x02
   15b82:	93 01       	movw	r18, r6
   15b84:	2e 5f       	subi	r18, 0xFE	; 254
   15b86:	3f 4f       	sbci	r19, 0xFF	; 255
   15b88:	39 01       	movw	r6, r18
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15b8a:	21 01       	movw	r4, r2
                }

                ENTRY(MP_BC_DUP_TOP): {
                    mp_obj_t top = TOP();
                    PUSH(top);
                    DISPATCH();
   15b8c:	96 cc       	rjmp	.-1748   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_DUP_TOP_TWO):
                    sp += 2;
                    sp[0] = sp[-2];
   15b8e:	d3 01       	movw	r26, r6
   15b90:	8d 91       	ld	r24, X+
   15b92:	9c 91       	ld	r25, X
   15b94:	11 97       	sbiw	r26, 0x01	; 1
   15b96:	15 96       	adiw	r26, 0x05	; 5
   15b98:	9c 93       	st	X, r25
   15b9a:	8e 93       	st	-X, r24
   15b9c:	14 97       	sbiw	r26, 0x04	; 4
                    sp[-1] = sp[-3];
   15b9e:	f3 01       	movw	r30, r6
   15ba0:	32 97       	sbiw	r30, 0x02	; 2
   15ba2:	80 81       	ld	r24, Z
   15ba4:	91 81       	ldd	r25, Z+1	; 0x01
   15ba6:	f3 01       	movw	r30, r6
   15ba8:	93 83       	std	Z+3, r25	; 0x03
   15baa:	82 83       	std	Z+2, r24	; 0x02
                    PUSH(top);
                    DISPATCH();
                }

                ENTRY(MP_BC_DUP_TOP_TWO):
                    sp += 2;
   15bac:	93 01       	movw	r18, r6
   15bae:	2c 5f       	subi	r18, 0xFC	; 252
   15bb0:	3f 4f       	sbci	r19, 0xFF	; 255
   15bb2:	39 01       	movw	r6, r18
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15bb4:	21 01       	movw	r4, r2

                ENTRY(MP_BC_DUP_TOP_TWO):
                    sp += 2;
                    sp[0] = sp[-2];
                    sp[-1] = sp[-3];
                    DISPATCH();
   15bb6:	81 cc       	rjmp	.-1790   	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY(MP_BC_POP_TOP):
                    sp -= 1;
   15bb8:	32 e0       	ldi	r19, 0x02	; 2
   15bba:	63 1a       	sub	r6, r19
   15bbc:	71 08       	sbc	r7, r1
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15bbe:	21 01       	movw	r4, r2
                    sp[-1] = sp[-3];
                    DISPATCH();

                ENTRY(MP_BC_POP_TOP):
                    sp -= 1;
                    DISPATCH();
   15bc0:	7c cc       	rjmp	.-1800   	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY(MP_BC_ROT_TWO): {
                    mp_obj_t top = sp[0];
   15bc2:	d3 01       	movw	r26, r6
   15bc4:	8d 91       	ld	r24, X+
   15bc6:	9c 91       	ld	r25, X
   15bc8:	11 97       	sbiw	r26, 0x01	; 1
                    sp[0] = sp[-1];
   15bca:	f3 01       	movw	r30, r6
   15bcc:	32 91       	ld	r19, -Z
   15bce:	22 91       	ld	r18, -Z
   15bd0:	2d 93       	st	X+, r18
   15bd2:	3c 93       	st	X, r19
                    sp[-1] = top;
   15bd4:	91 83       	std	Z+1, r25	; 0x01
   15bd6:	80 83       	st	Z, r24
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15bd8:	21 01       	movw	r4, r2

                ENTRY(MP_BC_ROT_TWO): {
                    mp_obj_t top = sp[0];
                    sp[0] = sp[-1];
                    sp[-1] = top;
                    DISPATCH();
   15bda:	6f cc       	rjmp	.-1826   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_ROT_THREE): {
                    mp_obj_t top = sp[0];
   15bdc:	f3 01       	movw	r30, r6
   15bde:	80 81       	ld	r24, Z
   15be0:	91 81       	ldd	r25, Z+1	; 0x01
                    sp[0] = sp[-1];
   15be2:	32 91       	ld	r19, -Z
   15be4:	22 91       	ld	r18, -Z
   15be6:	d3 01       	movw	r26, r6
   15be8:	11 96       	adiw	r26, 0x01	; 1
   15bea:	3c 93       	st	X, r19
   15bec:	2e 93       	st	-X, r18
                    sp[-1] = sp[-2];
   15bee:	14 97       	sbiw	r26, 0x04	; 4
   15bf0:	2d 91       	ld	r18, X+
   15bf2:	3c 91       	ld	r19, X
   15bf4:	11 97       	sbiw	r26, 0x01	; 1
   15bf6:	31 83       	std	Z+1, r19	; 0x01
   15bf8:	20 83       	st	Z, r18
                    sp[-2] = top;
   15bfa:	8d 93       	st	X+, r24
   15bfc:	9c 93       	st	X, r25
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15bfe:	21 01       	movw	r4, r2
                ENTRY(MP_BC_ROT_THREE): {
                    mp_obj_t top = sp[0];
                    sp[0] = sp[-1];
                    sp[-1] = sp[-2];
                    sp[-2] = top;
                    DISPATCH();
   15c00:	5c cc       	rjmp	.-1864   	; 0x154ba <mp_execute_bytecode+0x106>
   15c02:	f2 01       	movw	r30, r4
   15c04:	82 81       	ldd	r24, Z+2	; 0x02
   15c06:	90 e0       	ldi	r25, 0x00	; 0
   15c08:	98 2f       	mov	r25, r24
   15c0a:	88 27       	eor	r24, r24
   15c0c:	21 81       	ldd	r18, Z+1	; 0x01
   15c0e:	82 2b       	or	r24, r18
   15c10:	2c 01       	movw	r4, r24
   15c12:	fe ef       	ldi	r31, 0xFE	; 254
   15c14:	4f 1a       	sub	r4, r31
   15c16:	ff e7       	ldi	r31, 0x7F	; 127
   15c18:	5f 0a       	sbc	r5, r31
                }

                ENTRY(MP_BC_JUMP): {
                    DECODE_SLABEL;
                    ip += slab;
   15c1a:	42 0c       	add	r4, r2
   15c1c:	53 1c       	adc	r5, r3
                    DISPATCH_WITH_PEND_EXC_CHECK();
   15c1e:	cd c6       	rjmp	.+3482   	; 0x169ba <mp_execute_bytecode+0x1606>
                }

                ENTRY(MP_BC_POP_JUMP_IF_TRUE): {
                    DECODE_SLABEL;
   15c20:	d2 01       	movw	r26, r4
   15c22:	12 96       	adiw	r26, 0x02	; 2
   15c24:	0c 91       	ld	r16, X
   15c26:	12 97       	sbiw	r26, 0x02	; 2
   15c28:	10 e0       	ldi	r17, 0x00	; 0
   15c2a:	10 2f       	mov	r17, r16
   15c2c:	00 27       	eor	r16, r16
   15c2e:	11 96       	adiw	r26, 0x01	; 1
   15c30:	8c 91       	ld	r24, X
   15c32:	08 2b       	or	r16, r24
   15c34:	10 58       	subi	r17, 0x80	; 128
   15c36:	b3 e0       	ldi	r27, 0x03	; 3
   15c38:	4b 0e       	add	r4, r27
   15c3a:	51 1c       	adc	r5, r1
                    if (mp_obj_is_true(POP())) {
   15c3c:	73 01       	movw	r14, r6
   15c3e:	e2 e0       	ldi	r30, 0x02	; 2
   15c40:	ee 1a       	sub	r14, r30
   15c42:	f1 08       	sbc	r15, r1
   15c44:	d3 01       	movw	r26, r6
   15c46:	8d 91       	ld	r24, X+
   15c48:	9c 91       	ld	r25, X
   15c4a:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   15c4e:	88 23       	and	r24, r24
   15c50:	09 f4       	brne	.+2      	; 0x15c54 <mp_execute_bytecode+0x8a0>
   15c52:	b0 c6       	rjmp	.+3424   	; 0x169b4 <mp_execute_bytecode+0x1600>
                        ip += slab;
   15c54:	40 0e       	add	r4, r16
   15c56:	51 1e       	adc	r5, r17
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_POP_JUMP_IF_TRUE): {
                    DECODE_SLABEL;
                    if (mp_obj_is_true(POP())) {
   15c58:	37 01       	movw	r6, r14
   15c5a:	af c6       	rjmp	.+3422   	; 0x169ba <mp_execute_bytecode+0x1606>
                    }
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_POP_JUMP_IF_FALSE): {
                    DECODE_SLABEL;
   15c5c:	f2 01       	movw	r30, r4
   15c5e:	02 81       	ldd	r16, Z+2	; 0x02
   15c60:	10 e0       	ldi	r17, 0x00	; 0
   15c62:	10 2f       	mov	r17, r16
   15c64:	00 27       	eor	r16, r16
   15c66:	81 81       	ldd	r24, Z+1	; 0x01
   15c68:	08 2b       	or	r16, r24
   15c6a:	10 58       	subi	r17, 0x80	; 128
   15c6c:	f3 e0       	ldi	r31, 0x03	; 3
   15c6e:	4f 0e       	add	r4, r31
   15c70:	51 1c       	adc	r5, r1
                    if (!mp_obj_is_true(POP())) {
   15c72:	73 01       	movw	r14, r6
   15c74:	22 e0       	ldi	r18, 0x02	; 2
   15c76:	e2 1a       	sub	r14, r18
   15c78:	f1 08       	sbc	r15, r1
   15c7a:	d3 01       	movw	r26, r6
   15c7c:	8d 91       	ld	r24, X+
   15c7e:	9c 91       	ld	r25, X
   15c80:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   15c84:	81 11       	cpse	r24, r1
   15c86:	98 c6       	rjmp	.+3376   	; 0x169b8 <mp_execute_bytecode+0x1604>
                        ip += slab;
   15c88:	40 0e       	add	r4, r16
   15c8a:	51 1e       	adc	r5, r17
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_POP_JUMP_IF_FALSE): {
                    DECODE_SLABEL;
                    if (!mp_obj_is_true(POP())) {
   15c8c:	37 01       	movw	r6, r14
   15c8e:	95 c6       	rjmp	.+3370   	; 0x169ba <mp_execute_bytecode+0x1606>
                    }
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_JUMP_IF_TRUE_OR_POP): {
                    DECODE_SLABEL;
   15c90:	f2 01       	movw	r30, r4
   15c92:	82 81       	ldd	r24, Z+2	; 0x02
   15c94:	90 e0       	ldi	r25, 0x00	; 0
   15c96:	98 2f       	mov	r25, r24
   15c98:	88 27       	eor	r24, r24
   15c9a:	21 81       	ldd	r18, Z+1	; 0x01
   15c9c:	82 2b       	or	r24, r18
   15c9e:	8c 01       	movw	r16, r24
   15ca0:	10 58       	subi	r17, 0x80	; 128
   15ca2:	f3 e0       	ldi	r31, 0x03	; 3
   15ca4:	4f 0e       	add	r4, r31
   15ca6:	51 1c       	adc	r5, r1
                    if (mp_obj_is_true(TOP())) {
   15ca8:	d3 01       	movw	r26, r6
   15caa:	8d 91       	ld	r24, X+
   15cac:	9c 91       	ld	r25, X
   15cae:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   15cb2:	88 23       	and	r24, r24
   15cb4:	19 f0       	breq	.+6      	; 0x15cbc <mp_execute_bytecode+0x908>
                        ip += slab;
   15cb6:	40 0e       	add	r4, r16
   15cb8:	51 1e       	adc	r5, r17
   15cba:	7f c6       	rjmp	.+3326   	; 0x169ba <mp_execute_bytecode+0x1606>
                    } else {
                        sp--;
   15cbc:	b2 e0       	ldi	r27, 0x02	; 2
   15cbe:	6b 1a       	sub	r6, r27
   15cc0:	71 08       	sbc	r7, r1
   15cc2:	7b c6       	rjmp	.+3318   	; 0x169ba <mp_execute_bytecode+0x1606>
                    }
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_JUMP_IF_FALSE_OR_POP): {
                    DECODE_SLABEL;
   15cc4:	f2 01       	movw	r30, r4
   15cc6:	82 81       	ldd	r24, Z+2	; 0x02
   15cc8:	90 e0       	ldi	r25, 0x00	; 0
   15cca:	98 2f       	mov	r25, r24
   15ccc:	88 27       	eor	r24, r24
   15cce:	21 81       	ldd	r18, Z+1	; 0x01
   15cd0:	82 2b       	or	r24, r18
   15cd2:	8c 01       	movw	r16, r24
   15cd4:	10 58       	subi	r17, 0x80	; 128
   15cd6:	f3 e0       	ldi	r31, 0x03	; 3
   15cd8:	4f 0e       	add	r4, r31
   15cda:	51 1c       	adc	r5, r1
                    if (mp_obj_is_true(TOP())) {
   15cdc:	d3 01       	movw	r26, r6
   15cde:	8d 91       	ld	r24, X+
   15ce0:	9c 91       	ld	r25, X
   15ce2:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   15ce6:	88 23       	and	r24, r24
   15ce8:	21 f0       	breq	.+8      	; 0x15cf2 <mp_execute_bytecode+0x93e>
                        sp--;
   15cea:	b2 e0       	ldi	r27, 0x02	; 2
   15cec:	6b 1a       	sub	r6, r27
   15cee:	71 08       	sbc	r7, r1
   15cf0:	64 c6       	rjmp	.+3272   	; 0x169ba <mp_execute_bytecode+0x1606>
                    } else {
                        ip += slab;
   15cf2:	40 0e       	add	r4, r16
   15cf4:	51 1e       	adc	r5, r17
   15cf6:	61 c6       	rjmp	.+3266   	; 0x169ba <mp_execute_bytecode+0x1606>
                }

                ENTRY(MP_BC_SETUP_WITH): {
                    MARK_EXC_IP_SELECTIVE();
                    // stack: (..., ctx_mgr)
                    mp_obj_t obj = TOP();
   15cf8:	f3 01       	movw	r30, r6
   15cfa:	e0 80       	ld	r14, Z
   15cfc:	f1 80       	ldd	r15, Z+1	; 0x01
                    mp_load_method(obj, MP_QSTR___exit__, sp);
   15cfe:	a3 01       	movw	r20, r6
   15d00:	6d e0       	ldi	r22, 0x0D	; 13
   15d02:	70 e0       	ldi	r23, 0x00	; 0
   15d04:	c7 01       	movw	r24, r14
   15d06:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
                    mp_load_method(obj, MP_QSTR___enter__, sp + 2);
   15d0a:	83 01       	movw	r16, r6
   15d0c:	0c 5f       	subi	r16, 0xFC	; 252
   15d0e:	1f 4f       	sbci	r17, 0xFF	; 255
   15d10:	a8 01       	movw	r20, r16
   15d12:	6c e0       	ldi	r22, 0x0C	; 12
   15d14:	70 e0       	ldi	r23, 0x00	; 0
   15d16:	c7 01       	movw	r24, r14
   15d18:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
                    mp_obj_t ret = mp_call_method_n_kw(0, 0, sp + 2);
   15d1c:	a8 01       	movw	r20, r16
   15d1e:	60 e0       	ldi	r22, 0x00	; 0
   15d20:	70 e0       	ldi	r23, 0x00	; 0
   15d22:	80 e0       	ldi	r24, 0x00	; 0
   15d24:	90 e0       	ldi	r25, 0x00	; 0
   15d26:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
                    sp += 1;
                    PUSH_EXC_BLOCK(1);
   15d2a:	d2 01       	movw	r26, r4
   15d2c:	12 96       	adiw	r26, 0x02	; 2
   15d2e:	2c 91       	ld	r18, X
   15d30:	12 97       	sbiw	r26, 0x02	; 2
   15d32:	30 e0       	ldi	r19, 0x00	; 0
   15d34:	32 2f       	mov	r19, r18
   15d36:	22 27       	eor	r18, r18
   15d38:	11 96       	adiw	r26, 0x01	; 1
   15d3a:	4c 91       	ld	r20, X
   15d3c:	24 2b       	or	r18, r20
   15d3e:	b3 e0       	ldi	r27, 0x03	; 3
   15d40:	4b 0e       	add	r4, r27
   15d42:	51 1c       	adc	r5, r1
   15d44:	49 81       	ldd	r20, Y+1	; 0x01
   15d46:	5a 81       	ldd	r21, Y+2	; 0x02
   15d48:	4a 5f       	subi	r20, 0xFA	; 250
   15d4a:	5f 4f       	sbci	r21, 0xFF	; 255
   15d4c:	5a 83       	std	Y+2, r21	; 0x02
   15d4e:	49 83       	std	Y+1, r20	; 0x01
   15d50:	e9 81       	ldd	r30, Y+1	; 0x01
   15d52:	fa 81       	ldd	r31, Y+2	; 0x02
   15d54:	24 0d       	add	r18, r4
   15d56:	35 1d       	adc	r19, r5
   15d58:	31 83       	std	Z+1, r19	; 0x01
   15d5a:	20 83       	st	Z, r18
   15d5c:	e9 81       	ldd	r30, Y+1	; 0x01
   15d5e:	fa 81       	ldd	r31, Y+2	; 0x02
   15d60:	93 01       	movw	r18, r6
   15d62:	2e 5f       	subi	r18, 0xFE	; 254
   15d64:	3f 4f       	sbci	r19, 0xFF	; 255
   15d66:	22 60       	ori	r18, 0x02	; 2
   15d68:	33 83       	std	Z+3, r19	; 0x03
   15d6a:	22 83       	std	Z+2, r18	; 0x02
   15d6c:	e9 81       	ldd	r30, Y+1	; 0x01
   15d6e:	fa 81       	ldd	r31, Y+2	; 0x02
   15d70:	15 82       	std	Z+5, r1	; 0x05
   15d72:	14 82       	std	Z+4, r1	; 0x04
                    PUSH(ret);
   15d74:	f3 01       	movw	r30, r6
   15d76:	95 83       	std	Z+5, r25	; 0x05
   15d78:	84 83       	std	Z+4, r24	; 0x04
   15d7a:	38 01       	movw	r6, r16
                    // stack: (..., __exit__, ctx_mgr, as_value)
                    DISPATCH();
   15d7c:	9e cb       	rjmp	.-2244   	; 0x154ba <mp_execute_bytecode+0x106>
                    // and __exit__ method (with self) underneath it. Bytecode calls __exit__,
                    // and "deletes" it off stack, shifting "exception control block"
                    // to its place.
                    // The bytecode emitter ensures that there is enough space on the Python
                    // value stack to hold the __exit__ method plus an additional 4 entries.
                    if (TOP() == mp_const_none) {
   15d7e:	d3 01       	movw	r26, r6
   15d80:	0d 91       	ld	r16, X+
   15d82:	1c 91       	ld	r17, X
   15d84:	11 97       	sbiw	r26, 0x01	; 1
   15d86:	06 30       	cpi	r16, 0x06	; 6
   15d88:	11 05       	cpc	r17, r1
   15d8a:	d9 f4       	brne	.+54     	; 0x15dc2 <mp_execute_bytecode+0xa0e>
                        // stack: (..., __exit__, ctx_mgr, None)
                        sp[1] = mp_const_none;
   15d8c:	e6 e0       	ldi	r30, 0x06	; 6
   15d8e:	f0 e0       	ldi	r31, 0x00	; 0
   15d90:	13 96       	adiw	r26, 0x03	; 3
   15d92:	fc 93       	st	X, r31
   15d94:	ee 93       	st	-X, r30
   15d96:	12 97       	sbiw	r26, 0x02	; 2
                        sp[2] = mp_const_none;
   15d98:	15 96       	adiw	r26, 0x05	; 5
   15d9a:	fc 93       	st	X, r31
   15d9c:	ee 93       	st	-X, r30
   15d9e:	14 97       	sbiw	r26, 0x04	; 4
                        sp -= 2;
   15da0:	f4 e0       	ldi	r31, 0x04	; 4
   15da2:	6f 1a       	sub	r6, r31
   15da4:	71 08       	sbc	r7, r1
                        mp_call_method_n_kw(3, 0, sp);
   15da6:	a3 01       	movw	r20, r6
   15da8:	60 e0       	ldi	r22, 0x00	; 0
   15daa:	70 e0       	ldi	r23, 0x00	; 0
   15dac:	83 e0       	ldi	r24, 0x03	; 3
   15dae:	90 e0       	ldi	r25, 0x00	; 0
   15db0:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
                        SET_TOP(mp_const_none);
   15db4:	e6 e0       	ldi	r30, 0x06	; 6
   15db6:	f0 e0       	ldi	r31, 0x00	; 0
   15db8:	d3 01       	movw	r26, r6
   15dba:	ed 93       	st	X+, r30
   15dbc:	fc 93       	st	X, r31
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15dbe:	21 01       	movw	r4, r2
   15dc0:	7c cb       	rjmp	.-2312   	; 0x154ba <mp_execute_bytecode+0x106>
                        sp[1] = mp_const_none;
                        sp[2] = mp_const_none;
                        sp -= 2;
                        mp_call_method_n_kw(3, 0, sp);
                        SET_TOP(mp_const_none);
                    } else if (mp_obj_is_small_int(TOP())) {
   15dc2:	00 ff       	sbrs	r16, 0
   15dc4:	23 c0       	rjmp	.+70     	; 0x15e0c <mp_execute_bytecode+0xa58>
                        // Getting here there are two distinct cases:
                        //  - unwind return, stack: (..., __exit__, ctx_mgr, ret_val, SMALL_INT(-1))
                        //  - unwind jump, stack:   (..., __exit__, ctx_mgr, dest_ip, SMALL_INT(num_exc))
                        // For both cases we do exactly the same thing.
                        mp_obj_t data = sp[-1];
   15dc6:	f3 01       	movw	r30, r6
   15dc8:	52 90       	ld	r5, -Z
   15dca:	42 90       	ld	r4, -Z
                        mp_obj_t cause = sp[0];
                        sp[-1] = mp_const_none;
   15dcc:	26 e0       	ldi	r18, 0x06	; 6
   15dce:	30 e0       	ldi	r19, 0x00	; 0
   15dd0:	31 83       	std	Z+1, r19	; 0x01
   15dd2:	20 83       	st	Z, r18
                        sp[0] = mp_const_none;
   15dd4:	d3 01       	movw	r26, r6
   15dd6:	11 96       	adiw	r26, 0x01	; 1
   15dd8:	3c 93       	st	X, r19
   15dda:	2e 93       	st	-X, r18
                        sp[1] = mp_const_none;
   15ddc:	13 96       	adiw	r26, 0x03	; 3
   15dde:	3c 93       	st	X, r19
   15de0:	2e 93       	st	-X, r18
   15de2:	12 97       	sbiw	r26, 0x02	; 2
                        mp_call_method_n_kw(3, 0, sp - 3);
   15de4:	73 01       	movw	r14, r6
   15de6:	b6 e0       	ldi	r27, 0x06	; 6
   15de8:	eb 1a       	sub	r14, r27
   15dea:	f1 08       	sbc	r15, r1
   15dec:	a7 01       	movw	r20, r14
   15dee:	60 e0       	ldi	r22, 0x00	; 0
   15df0:	70 e0       	ldi	r23, 0x00	; 0
   15df2:	83 e0       	ldi	r24, 0x03	; 3
   15df4:	90 e0       	ldi	r25, 0x00	; 0
   15df6:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
                        sp[-3] = data;
   15dfa:	f7 01       	movw	r30, r14
   15dfc:	51 82       	std	Z+1, r5	; 0x01
   15dfe:	40 82       	st	Z, r4
                        sp[-2] = cause;
   15e00:	32 96       	adiw	r30, 0x02	; 2
   15e02:	11 83       	std	Z+1, r17	; 0x01
   15e04:	00 83       	st	Z, r16
                        sp -= 2; // we removed (__exit__, ctx_mgr)
   15e06:	3f 01       	movw	r6, r30
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15e08:	21 01       	movw	r4, r2
   15e0a:	57 cb       	rjmp	.-2386   	; 0x154ba <mp_execute_bytecode+0x106>
                        mp_call_method_n_kw(3, 0, sp - 3);
                        sp[-3] = data;
                        sp[-2] = cause;
                        sp -= 2; // we removed (__exit__, ctx_mgr)
                    } else {
                        assert(mp_obj_is_exception_instance(TOP()));
   15e0c:	c8 01       	movw	r24, r16
   15e0e:	0e 94 6d 21 	call	0x42da	; 0x42da <mp_obj_is_exception_instance>
   15e12:	81 11       	cpse	r24, r1
   15e14:	02 c0       	rjmp	.+4      	; 0x15e1a <mp_execute_bytecode+0xa66>
   15e16:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                        // stack: (..., __exit__, ctx_mgr, exc_instance)
                        // Need to pass (exc_type, exc_instance, None) as arguments to __exit__.
                        sp[1] = sp[0];
   15e1a:	d3 01       	movw	r26, r6
   15e1c:	13 96       	adiw	r26, 0x03	; 3
   15e1e:	1c 93       	st	X, r17
   15e20:	0e 93       	st	-X, r16
   15e22:	12 97       	sbiw	r26, 0x02	; 2
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
   15e24:	c8 01       	movw	r24, r16
   15e26:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   15e2a:	f3 01       	movw	r30, r6
   15e2c:	91 83       	std	Z+1, r25	; 0x01
   15e2e:	80 83       	st	Z, r24
                        sp[2] = mp_const_none;
   15e30:	26 e0       	ldi	r18, 0x06	; 6
   15e32:	30 e0       	ldi	r19, 0x00	; 0
   15e34:	35 83       	std	Z+5, r19	; 0x05
   15e36:	24 83       	std	Z+4, r18	; 0x04
                        sp -= 2;
   15e38:	83 01       	movw	r16, r6
   15e3a:	04 50       	subi	r16, 0x04	; 4
   15e3c:	11 09       	sbc	r17, r1
                        mp_obj_t ret_value = mp_call_method_n_kw(3, 0, sp);
   15e3e:	a8 01       	movw	r20, r16
   15e40:	60 e0       	ldi	r22, 0x00	; 0
   15e42:	70 e0       	ldi	r23, 0x00	; 0
   15e44:	83 e0       	ldi	r24, 0x03	; 3
   15e46:	90 e0       	ldi	r25, 0x00	; 0
   15e48:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
                        if (mp_obj_is_true(ret_value)) {
   15e4c:	0e 94 c0 1c 	call	0x3980	; 0x3980 <mp_obj_is_true>
   15e50:	88 23       	and	r24, r24
   15e52:	41 f0       	breq	.+16     	; 0x15e64 <mp_execute_bytecode+0xab0>
                            // We need to silence/swallow the exception.  This is done
                            // by popping the exception and the __exit__ handler and
                            // replacing it with None, which signals END_FINALLY to just
                            // execute the finally handler normally.
                            SET_TOP(mp_const_none);
   15e54:	f8 01       	movw	r30, r16
   15e56:	46 e0       	ldi	r20, 0x06	; 6
   15e58:	50 e0       	ldi	r21, 0x00	; 0
   15e5a:	51 83       	std	Z+1, r21	; 0x01
   15e5c:	40 83       	st	Z, r20
                        // stack: (..., __exit__, ctx_mgr, exc_instance)
                        // Need to pass (exc_type, exc_instance, None) as arguments to __exit__.
                        sp[1] = sp[0];
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
                        sp[2] = mp_const_none;
                        sp -= 2;
   15e5e:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15e60:	21 01       	movw	r4, r2
   15e62:	2b cb       	rjmp	.-2474   	; 0x154ba <mp_execute_bytecode+0x106>
                            // execute the finally handler normally.
                            SET_TOP(mp_const_none);
                        } else {
                            // We need to re-raise the exception.  We pop __exit__ handler
                            // by copying the exception instance down to the new top-of-stack.
                            sp[0] = sp[3];
   15e64:	f3 01       	movw	r30, r6
   15e66:	34 97       	sbiw	r30, 0x04	; 4
   15e68:	d3 01       	movw	r26, r6
   15e6a:	12 96       	adiw	r26, 0x02	; 2
   15e6c:	8d 91       	ld	r24, X+
   15e6e:	9c 91       	ld	r25, X
   15e70:	13 97       	sbiw	r26, 0x03	; 3
   15e72:	91 83       	std	Z+1, r25	; 0x01
   15e74:	80 83       	st	Z, r24
                        // stack: (..., __exit__, ctx_mgr, exc_instance)
                        // Need to pass (exc_type, exc_instance, None) as arguments to __exit__.
                        sp[1] = sp[0];
                        sp[0] = MP_OBJ_FROM_PTR(mp_obj_get_type(sp[0]));
                        sp[2] = mp_const_none;
                        sp -= 2;
   15e76:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   15e78:	21 01       	movw	r4, r2
   15e7a:	1f cb       	rjmp	.-2498   	; 0x154ba <mp_execute_bytecode+0x106>
                    DISPATCH();
                }

                ENTRY(MP_BC_UNWIND_JUMP): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_SLABEL;
   15e7c:	12 01       	movw	r2, r4
   15e7e:	b3 e0       	ldi	r27, 0x03	; 3
   15e80:	2b 0e       	add	r2, r27
   15e82:	31 1c       	adc	r3, r1
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
   15e84:	f2 01       	movw	r30, r4
   15e86:	82 81       	ldd	r24, Z+2	; 0x02
   15e88:	90 e0       	ldi	r25, 0x00	; 0
   15e8a:	98 2f       	mov	r25, r24
   15e8c:	88 27       	eor	r24, r24
   15e8e:	21 81       	ldd	r18, Z+1	; 0x01
   15e90:	82 2b       	or	r24, r18
   15e92:	90 58       	subi	r25, 0x80	; 128
   15e94:	82 0d       	add	r24, r2
   15e96:	93 1d       	adc	r25, r3
   15e98:	d3 01       	movw	r26, r6
   15e9a:	13 96       	adiw	r26, 0x03	; 3
   15e9c:	9c 93       	st	X, r25
   15e9e:	8e 93       	st	-X, r24
   15ea0:	12 97       	sbiw	r26, 0x02	; 2
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
   15ea2:	f3 01       	movw	r30, r6
   15ea4:	34 96       	adiw	r30, 0x04	; 4
   15ea6:	d2 01       	movw	r26, r4
   15ea8:	13 96       	adiw	r26, 0x03	; 3
   15eaa:	8c 91       	ld	r24, X
   15eac:	90 e0       	ldi	r25, 0x00	; 0
   15eae:	d3 01       	movw	r26, r6
   15eb0:	15 96       	adiw	r26, 0x05	; 5
   15eb2:	9c 93       	st	X, r25
   15eb4:	8e 93       	st	-X, r24
   15eb6:	14 97       	sbiw	r26, 0x04	; 4
unwind_jump:;
                    mp_uint_t unum = (mp_uint_t)POP(); // get number of exception handlers to unwind
   15eb8:	7f 01       	movw	r14, r30
   15eba:	b2 e0       	ldi	r27, 0x02	; 2
   15ebc:	eb 1a       	sub	r14, r27
   15ebe:	f1 08       	sbc	r15, r1
   15ec0:	00 81       	ld	r16, Z
   15ec2:	11 81       	ldd	r17, Z+1	; 0x01
                    while ((unum & 0x7f) > 0) {
   15ec4:	c8 01       	movw	r24, r16
   15ec6:	8f 77       	andi	r24, 0x7F	; 127
   15ec8:	99 27       	eor	r25, r25
   15eca:	89 2b       	or	r24, r25
   15ecc:	09 f4       	brne	.+2      	; 0x15ed0 <mp_execute_bytecode+0xb1c>
   15ece:	67 c0       	rjmp	.+206    	; 0x15f9e <mp_execute_bytecode+0xbea>
                        unum -= 1;
   15ed0:	01 50       	subi	r16, 0x01	; 1
   15ed2:	11 09       	sbc	r17, r1
                        assert(exc_sp >= exc_stack);
   15ed4:	89 81       	ldd	r24, Y+1	; 0x01
   15ed6:	9a 81       	ldd	r25, Y+2	; 0x02
   15ed8:	ec a1       	ldd	r30, Y+36	; 0x24
   15eda:	fd a1       	ldd	r31, Y+37	; 0x25
   15edc:	8e 17       	cp	r24, r30
   15ede:	9f 07       	cpc	r25, r31
   15ee0:	50 f4       	brcc	.+20     	; 0x15ef6 <mp_execute_bytecode+0xb42>
   15ee2:	07 c0       	rjmp	.+14     	; 0x15ef2 <mp_execute_bytecode+0xb3e>
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
unwind_jump:;
                    mp_uint_t unum = (mp_uint_t)POP(); // get number of exception handlers to unwind
                    while ((unum & 0x7f) > 0) {
                        unum -= 1;
   15ee4:	01 50       	subi	r16, 0x01	; 1
   15ee6:	11 09       	sbc	r17, r1
                        assert(exc_sp >= exc_stack);
   15ee8:	89 81       	ldd	r24, Y+1	; 0x01
   15eea:	9a 81       	ldd	r25, Y+2	; 0x02
   15eec:	86 15       	cp	r24, r6
   15eee:	97 05       	cpc	r25, r7
   15ef0:	20 f4       	brcc	.+8      	; 0x15efa <mp_execute_bytecode+0xb46>
   15ef2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   15ef6:	6c a0       	ldd	r6, Y+36	; 0x24
   15ef8:	7d a0       	ldd	r7, Y+37	; 0x25

                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   15efa:	e9 81       	ldd	r30, Y+1	; 0x01
   15efc:	fa 81       	ldd	r31, Y+2	; 0x02
   15efe:	82 81       	ldd	r24, Z+2	; 0x02
   15f00:	81 ff       	sbrs	r24, 1
   15f02:	42 c0       	rjmp	.+132    	; 0x15f88 <mp_execute_bytecode+0xbd4>
                            if (exc_sp->handler > ip) {
   15f04:	e9 81       	ldd	r30, Y+1	; 0x01
   15f06:	fa 81       	ldd	r31, Y+2	; 0x02
   15f08:	80 81       	ld	r24, Z
   15f0a:	91 81       	ldd	r25, Z+1	; 0x01
   15f0c:	28 16       	cp	r2, r24
   15f0e:	39 06       	cpc	r3, r25
   15f10:	f0 f4       	brcc	.+60     	; 0x15f4e <mp_execute_bytecode+0xb9a>
                                // Found a finally handler that isn't active; run it.
                                // Getting here the stack looks like:
                                //     (..., X, dest_ip)
                                // where X is pointed to by exc_sp->val_sp and in the case
                                // of a "with" block contains the context manager info.
                                assert(&sp[-1] == MP_TAGPTR_PTR(exc_sp->val_sp));
   15f12:	e9 81       	ldd	r30, Y+1	; 0x01
   15f14:	fa 81       	ldd	r31, Y+2	; 0x02
   15f16:	82 81       	ldd	r24, Z+2	; 0x02
   15f18:	93 81       	ldd	r25, Z+3	; 0x03
   15f1a:	8c 7f       	andi	r24, 0xFC	; 252
   15f1c:	97 01       	movw	r18, r14
   15f1e:	22 50       	subi	r18, 0x02	; 2
   15f20:	31 09       	sbc	r19, r1
   15f22:	28 17       	cp	r18, r24
   15f24:	39 07       	cpc	r19, r25
   15f26:	11 f0       	breq	.+4      	; 0x15f2c <mp_execute_bytecode+0xb78>
   15f28:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                                // (not calling it recursively). Set up a sentinel
                                // on the stack so it can return back to us when it is
                                // done (when WITH_CLEANUP or END_FINALLY reached).
                                // The sentinel is the number of exception handlers left to
                                // unwind, which is a non-negative integer.
                                PUSH(MP_OBJ_NEW_SMALL_INT(unum));
   15f2c:	37 01       	movw	r6, r14
   15f2e:	f2 e0       	ldi	r31, 0x02	; 2
   15f30:	6f 0e       	add	r6, r31
   15f32:	71 1c       	adc	r7, r1
   15f34:	00 0f       	add	r16, r16
   15f36:	11 1f       	adc	r17, r17
   15f38:	01 60       	ori	r16, 0x01	; 1
   15f3a:	d7 01       	movw	r26, r14
   15f3c:	13 96       	adiw	r26, 0x03	; 3
   15f3e:	1c 93       	st	X, r17
   15f40:	0e 93       	st	-X, r16
   15f42:	12 97       	sbiw	r26, 0x02	; 2
                                ip = exc_sp->handler;
   15f44:	e9 81       	ldd	r30, Y+1	; 0x01
   15f46:	fa 81       	ldd	r31, Y+2	; 0x02
   15f48:	40 80       	ld	r4, Z
   15f4a:	51 80       	ldd	r5, Z+1	; 0x01
                                goto dispatch_loop;
   15f4c:	b6 ca       	rjmp	.-2708   	; 0x154ba <mp_execute_bytecode+0x106>
                            } else {
                                // Found a finally handler that is already active; cancel it.
                                CANCEL_ACTIVE_FINALLY(sp);
   15f4e:	f7 01       	movw	r30, r14
   15f50:	32 97       	sbiw	r30, 0x02	; 2
   15f52:	80 81       	ld	r24, Z
   15f54:	91 81       	ldd	r25, Z+1	; 0x01
   15f56:	80 ff       	sbrs	r24, 0
   15f58:	08 c0       	rjmp	.+16     	; 0x15f6a <mp_execute_bytecode+0xbb6>
   15f5a:	32 97       	sbiw	r30, 0x02	; 2
   15f5c:	d7 01       	movw	r26, r14
   15f5e:	8d 91       	ld	r24, X+
   15f60:	9c 91       	ld	r25, X
   15f62:	91 83       	std	Z+1, r25	; 0x01
   15f64:	80 83       	st	Z, r24
   15f66:	7f 01       	movw	r14, r30
   15f68:	0f c0       	rjmp	.+30     	; 0x15f88 <mp_execute_bytecode+0xbd4>
   15f6a:	86 30       	cpi	r24, 0x06	; 6
   15f6c:	91 05       	cpc	r25, r1
   15f6e:	31 f0       	breq	.+12     	; 0x15f7c <mp_execute_bytecode+0xbc8>
   15f70:	0e 94 6d 21 	call	0x42da	; 0x42da <mp_obj_is_exception_instance>
   15f74:	81 11       	cpse	r24, r1
   15f76:	02 c0       	rjmp	.+4      	; 0x15f7c <mp_execute_bytecode+0xbc8>
   15f78:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   15f7c:	f7 01       	movw	r30, r14
   15f7e:	80 81       	ld	r24, Z
   15f80:	91 81       	ldd	r25, Z+1	; 0x01
   15f82:	92 93       	st	-Z, r25
   15f84:	82 93       	st	-Z, r24
   15f86:	7f 01       	movw	r14, r30
                            }
                        }
                        POP_EXC_BLOCK();
   15f88:	89 81       	ldd	r24, Y+1	; 0x01
   15f8a:	9a 81       	ldd	r25, Y+2	; 0x02
   15f8c:	06 97       	sbiw	r24, 0x06	; 6
   15f8e:	9a 83       	std	Y+2, r25	; 0x02
   15f90:	89 83       	std	Y+1, r24	; 0x01
                    DECODE_SLABEL;
                    PUSH((mp_obj_t)(mp_uint_t)(uintptr_t)(ip + slab)); // push destination ip for jump
                    PUSH((mp_obj_t)(mp_uint_t)(*ip)); // push number of exception handlers to unwind (0x80 bit set if we also need to pop stack)
unwind_jump:;
                    mp_uint_t unum = (mp_uint_t)POP(); // get number of exception handlers to unwind
                    while ((unum & 0x7f) > 0) {
   15f92:	c8 01       	movw	r24, r16
   15f94:	8f 77       	andi	r24, 0x7F	; 127
   15f96:	99 27       	eor	r25, r25
   15f98:	89 2b       	or	r24, r25
   15f9a:	09 f0       	breq	.+2      	; 0x15f9e <mp_execute_bytecode+0xbea>
   15f9c:	a3 cf       	rjmp	.-186    	; 0x15ee4 <mp_execute_bytecode+0xb30>
                                CANCEL_ACTIVE_FINALLY(sp);
                            }
                        }
                        POP_EXC_BLOCK();
                    }
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   15f9e:	f7 01       	movw	r30, r14
   15fa0:	40 80       	ld	r4, Z
   15fa2:	51 80       	ldd	r5, Z+1	; 0x01
                    if (unum != 0) {
   15fa4:	01 2b       	or	r16, r17
   15fa6:	29 f4       	brne	.+10     	; 0x15fb2 <mp_execute_bytecode+0xbfe>
                                CANCEL_ACTIVE_FINALLY(sp);
                            }
                        }
                        POP_EXC_BLOCK();
                    }
                    ip = (const byte*)MP_OBJ_TO_PTR(POP()); // pop destination ip for jump
   15fa8:	37 01       	movw	r6, r14
   15faa:	f2 e0       	ldi	r31, 0x02	; 2
   15fac:	6f 1a       	sub	r6, r31
   15fae:	71 08       	sbc	r7, r1
   15fb0:	04 c5       	rjmp	.+2568   	; 0x169ba <mp_execute_bytecode+0x1606>
                    if (unum != 0) {
                        // pop the exhausted iterator
                        sp -= MP_OBJ_ITER_BUF_NSLOTS;
   15fb2:	37 01       	movw	r6, r14
   15fb4:	2a e0       	ldi	r18, 0x0A	; 10
   15fb6:	62 1a       	sub	r6, r18
   15fb8:	71 08       	sbc	r7, r1
   15fba:	ff c4       	rjmp	.+2558   	; 0x169ba <mp_execute_bytecode+0x1606>
                ENTRY(MP_BC_SETUP_FINALLY): {
                    MARK_EXC_IP_SELECTIVE();
                    #if SELECTIVE_EXC_IP
                    PUSH_EXC_BLOCK((code_state->ip[-1] == MP_BC_SETUP_FINALLY) ? 1 : 0);
                    #else
                    PUSH_EXC_BLOCK((code_state->ip[0] == MP_BC_SETUP_FINALLY) ? 1 : 0);
   15fbc:	d2 01       	movw	r26, r4
   15fbe:	12 96       	adiw	r26, 0x02	; 2
   15fc0:	8c 91       	ld	r24, X
   15fc2:	12 97       	sbiw	r26, 0x02	; 2
   15fc4:	90 e0       	ldi	r25, 0x00	; 0
   15fc6:	98 2f       	mov	r25, r24
   15fc8:	88 27       	eor	r24, r24
   15fca:	11 96       	adiw	r26, 0x01	; 1
   15fcc:	2c 91       	ld	r18, X
   15fce:	82 2b       	or	r24, r18
   15fd0:	b3 e0       	ldi	r27, 0x03	; 3
   15fd2:	4b 0e       	add	r4, r27
   15fd4:	51 1c       	adc	r5, r1
   15fd6:	29 81       	ldd	r18, Y+1	; 0x01
   15fd8:	3a 81       	ldd	r19, Y+2	; 0x02
   15fda:	2a 5f       	subi	r18, 0xFA	; 250
   15fdc:	3f 4f       	sbci	r19, 0xFF	; 255
   15fde:	3a 83       	std	Y+2, r19	; 0x02
   15fe0:	29 83       	std	Y+1, r18	; 0x01
   15fe2:	e9 81       	ldd	r30, Y+1	; 0x01
   15fe4:	fa 81       	ldd	r31, Y+2	; 0x02
   15fe6:	84 0d       	add	r24, r4
   15fe8:	95 1d       	adc	r25, r5
   15fea:	91 83       	std	Z+1, r25	; 0x01
   15fec:	80 83       	st	Z, r24
   15fee:	29 81       	ldd	r18, Y+1	; 0x01
   15ff0:	3a 81       	ldd	r19, Y+2	; 0x02
   15ff2:	ea a1       	ldd	r30, Y+34	; 0x22
   15ff4:	fb a1       	ldd	r31, Y+35	; 0x23
   15ff6:	a2 81       	ldd	r26, Z+2	; 0x02
   15ff8:	b3 81       	ldd	r27, Z+3	; 0x03
   15ffa:	8c 91       	ld	r24, X
   15ffc:	89 34       	cpi	r24, 0x49	; 73
   15ffe:	19 f0       	breq	.+6      	; 0x16006 <mp_execute_bytecode+0xc52>
   16000:	80 e0       	ldi	r24, 0x00	; 0
   16002:	90 e0       	ldi	r25, 0x00	; 0
   16004:	02 c0       	rjmp	.+4      	; 0x1600a <mp_execute_bytecode+0xc56>
   16006:	82 e0       	ldi	r24, 0x02	; 2
   16008:	90 e0       	ldi	r25, 0x00	; 0
   1600a:	86 29       	or	r24, r6
   1600c:	97 29       	or	r25, r7
   1600e:	d9 01       	movw	r26, r18
   16010:	13 96       	adiw	r26, 0x03	; 3
   16012:	9c 93       	st	X, r25
   16014:	8e 93       	st	-X, r24
   16016:	12 97       	sbiw	r26, 0x02	; 2
   16018:	e9 81       	ldd	r30, Y+1	; 0x01
   1601a:	fa 81       	ldd	r31, Y+2	; 0x02
   1601c:	15 82       	std	Z+5, r1	; 0x05
   1601e:	14 82       	std	Z+4, r1	; 0x04
                    #endif
                    DISPATCH();
   16020:	4c ca       	rjmp	.-2920   	; 0x154ba <mp_execute_bytecode+0x106>
                ENTRY(MP_BC_END_FINALLY):
                    MARK_EXC_IP_SELECTIVE();
                    // if TOS is None, just pops it and continues
                    // if TOS is an integer, finishes coroutine and returns control to caller
                    // if TOS is an exception, reraises the exception
                    assert(exc_sp >= exc_stack);
   16022:	89 81       	ldd	r24, Y+1	; 0x01
   16024:	9a 81       	ldd	r25, Y+2	; 0x02
   16026:	ec a1       	ldd	r30, Y+36	; 0x24
   16028:	fd a1       	ldd	r31, Y+37	; 0x25
   1602a:	8e 17       	cp	r24, r30
   1602c:	9f 07       	cpc	r25, r31
   1602e:	10 f4       	brcc	.+4      	; 0x16034 <mp_execute_bytecode+0xc80>
   16030:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                    POP_EXC_BLOCK();
   16034:	89 81       	ldd	r24, Y+1	; 0x01
   16036:	9a 81       	ldd	r25, Y+2	; 0x02
   16038:	06 97       	sbiw	r24, 0x06	; 6
   1603a:	9a 83       	std	Y+2, r25	; 0x02
   1603c:	89 83       	std	Y+1, r24	; 0x01
                    if (TOP() == mp_const_none) {
   1603e:	d3 01       	movw	r26, r6
   16040:	8d 91       	ld	r24, X+
   16042:	9c 91       	ld	r25, X
   16044:	86 30       	cpi	r24, 0x06	; 6
   16046:	91 05       	cpc	r25, r1
   16048:	29 f4       	brne	.+10     	; 0x16054 <mp_execute_bytecode+0xca0>
                        sp--;
   1604a:	b2 e0       	ldi	r27, 0x02	; 2
   1604c:	6b 1a       	sub	r6, r27
   1604e:	71 08       	sbc	r7, r1
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16050:	21 01       	movw	r4, r2
                        }
                    } else {
                        assert(mp_obj_is_exception_instance(TOP()));
                        RAISE(TOP());
                    }
                    DISPATCH();
   16052:	33 ca       	rjmp	.-2970   	; 0x154ba <mp_execute_bytecode+0x106>
                    // if TOS is an exception, reraises the exception
                    assert(exc_sp >= exc_stack);
                    POP_EXC_BLOCK();
                    if (TOP() == mp_const_none) {
                        sp--;
                    } else if (mp_obj_is_small_int(TOP())) {
   16054:	80 ff       	sbrs	r24, 0
   16056:	0d c0       	rjmp	.+26     	; 0x16072 <mp_execute_bytecode+0xcbe>
                        // We finished "finally" coroutine and now dispatch back
                        // to our caller, based on TOS value
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   16058:	95 95       	asr	r25
   1605a:	87 95       	ror	r24
                        if (cause < 0) {
   1605c:	99 23       	and	r25, r25
   1605e:	24 f4       	brge	.+8      	; 0x16068 <mp_execute_bytecode+0xcb4>
                    if (TOP() == mp_const_none) {
                        sp--;
                    } else if (mp_obj_is_small_int(TOP())) {
                        // We finished "finally" coroutine and now dispatch back
                        // to our caller, based on TOS value
                        mp_int_t cause = MP_OBJ_SMALL_INT_VALUE(POP());
   16060:	e2 e0       	ldi	r30, 0x02	; 2
   16062:	6e 1a       	sub	r6, r30
   16064:	71 08       	sbc	r7, r1
   16066:	1b cb       	rjmp	.-2506   	; 0x1569e <mp_execute_bytecode+0x2ea>
                            // A negative cause indicates unwind return
                            goto unwind_return;
                        } else {
                            // Otherwise it's an unwind jump and we must push as a raw
                            // number the number of exception handlers to unwind
                            PUSH((mp_obj_t)cause);
   16068:	d3 01       	movw	r26, r6
   1606a:	8d 93       	st	X+, r24
   1606c:	9c 93       	st	X, r25
                            goto unwind_jump;
   1606e:	f3 01       	movw	r30, r6
   16070:	23 cf       	rjmp	.-442    	; 0x15eb8 <mp_execute_bytecode+0xb04>
                        }
                    } else {
                        assert(mp_obj_is_exception_instance(TOP()));
   16072:	0e 94 6d 21 	call	0x42da	; 0x42da <mp_obj_is_exception_instance>
   16076:	81 11       	cpse	r24, r1
   16078:	02 c0       	rjmp	.+4      	; 0x1607e <mp_execute_bytecode+0xcca>
   1607a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                        RAISE(TOP());
   1607e:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   16082:	f3 01       	movw	r30, r6
   16084:	80 81       	ld	r24, Z
   16086:	91 81       	ldd	r25, Z+1	; 0x01
   16088:	9e 83       	std	Y+6, r25	; 0x06
   1608a:	8d 83       	std	Y+5, r24	; 0x05
   1608c:	aa c4       	rjmp	.+2388   	; 0x169e2 <mp_execute_bytecode+0x162e>
                    }
                    DISPATCH();

                ENTRY(MP_BC_GET_ITER):
                    MARK_EXC_IP_SELECTIVE();
                    SET_TOP(mp_getiter(TOP(), NULL));
   1608e:	60 e0       	ldi	r22, 0x00	; 0
   16090:	70 e0       	ldi	r23, 0x00	; 0
   16092:	d3 01       	movw	r26, r6
   16094:	8d 91       	ld	r24, X+
   16096:	9c 91       	ld	r25, X
   16098:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
   1609c:	f3 01       	movw	r30, r6
   1609e:	91 83       	std	Z+1, r25	; 0x01
   160a0:	80 83       	st	Z, r24
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   160a2:	21 01       	movw	r4, r2
                    DISPATCH();

                ENTRY(MP_BC_GET_ITER):
                    MARK_EXC_IP_SELECTIVE();
                    SET_TOP(mp_getiter(TOP(), NULL));
                    DISPATCH();
   160a4:	0a ca       	rjmp	.-3052   	; 0x154ba <mp_execute_bytecode+0x106>
                // the second slot holds a reference to the iterator object.
                ENTRY(MP_BC_GET_ITER_STACK): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t obj = TOP();
                    mp_obj_iter_buf_t *iter_buf = (mp_obj_iter_buf_t*)sp;
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   160a6:	83 01       	movw	r16, r6
   160a8:	0a 5f       	subi	r16, 0xFA	; 250
   160aa:	1f 4f       	sbci	r17, 0xFF	; 255
                    obj = mp_getiter(obj, iter_buf);
   160ac:	b3 01       	movw	r22, r6
   160ae:	d3 01       	movw	r26, r6
   160b0:	8d 91       	ld	r24, X+
   160b2:	9c 91       	ld	r25, X
   160b4:	0e 94 85 3f 	call	0x7f0a	; 0x7f0a <mp_getiter>
                    if (obj != MP_OBJ_FROM_PTR(iter_buf)) {
   160b8:	68 16       	cp	r6, r24
   160ba:	79 06       	cpc	r7, r25
   160bc:	09 f4       	brne	.+2      	; 0x160c0 <mp_execute_bytecode+0xd0c>
   160be:	ea c9       	rjmp	.-3116   	; 0x15494 <mp_execute_bytecode+0xe0>
                        // Iterator didn't use the stack so indicate that with MP_OBJ_NULL.
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] = MP_OBJ_NULL;
   160c0:	f3 01       	movw	r30, r6
   160c2:	11 82       	std	Z+1, r1	; 0x01
   160c4:	10 82       	st	Z, r1
                        sp[-MP_OBJ_ITER_BUF_NSLOTS + 2] = obj;
   160c6:	93 83       	std	Z+3, r25	; 0x03
   160c8:	82 83       	std	Z+2, r24	; 0x02
                // the second slot holds a reference to the iterator object.
                ENTRY(MP_BC_GET_ITER_STACK): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t obj = TOP();
                    mp_obj_iter_buf_t *iter_buf = (mp_obj_iter_buf_t*)sp;
                    sp += MP_OBJ_ITER_BUF_NSLOTS - 1;
   160ca:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   160cc:	21 01       	movw	r4, r2
   160ce:	f5 c9       	rjmp	.-3094   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_FOR_ITER): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   160d0:	d2 01       	movw	r26, r4
   160d2:	11 96       	adiw	r26, 0x01	; 1
   160d4:	0c 91       	ld	r16, X
   160d6:	11 97       	sbiw	r26, 0x01	; 1
   160d8:	12 96       	adiw	r26, 0x02	; 2
   160da:	1c 91       	ld	r17, X
   160dc:	b3 e0       	ldi	r27, 0x03	; 3
   160de:	4b 0e       	add	r4, r27
   160e0:	51 1c       	adc	r5, r1
                    code_state->sp = sp;
   160e2:	ea a1       	ldd	r30, Y+34	; 0x22
   160e4:	fb a1       	ldd	r31, Y+35	; 0x23
   160e6:	75 82       	std	Z+5, r7	; 0x05
   160e8:	64 82       	std	Z+4, r6	; 0x04
                    mp_obj_t obj;
                    if (sp[-MP_OBJ_ITER_BUF_NSLOTS + 1] == MP_OBJ_NULL) {
   160ea:	f3 01       	movw	r30, r6
   160ec:	36 97       	sbiw	r30, 0x06	; 6
   160ee:	80 81       	ld	r24, Z
   160f0:	91 81       	ldd	r25, Z+1	; 0x01
   160f2:	89 2b       	or	r24, r25
   160f4:	21 f4       	brne	.+8      	; 0x160fe <mp_execute_bytecode+0xd4a>
                        obj = sp[-MP_OBJ_ITER_BUF_NSLOTS + 2];
   160f6:	32 96       	adiw	r30, 0x02	; 2
   160f8:	80 81       	ld	r24, Z
   160fa:	91 81       	ldd	r25, Z+1	; 0x01
   160fc:	02 c0       	rjmp	.+4      	; 0x16102 <mp_execute_bytecode+0xd4e>
                    } else {
                        obj = MP_OBJ_FROM_PTR(&sp[-MP_OBJ_ITER_BUF_NSLOTS + 1]);
   160fe:	c3 01       	movw	r24, r6
   16100:	06 97       	sbiw	r24, 0x06	; 6
                    }
                    mp_obj_t value = mp_iternext_allow_raise(obj);
   16102:	0e 94 31 3f 	call	0x7e62	; 0x7e62 <mp_iternext_allow_raise>
                    if (value == MP_OBJ_STOP_ITERATION) {
   16106:	00 97       	sbiw	r24, 0x00	; 0
   16108:	49 f4       	brne	.+18     	; 0x1611c <mp_execute_bytecode+0xd68>
                        sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   1610a:	f8 e0       	ldi	r31, 0x08	; 8
   1610c:	6f 1a       	sub	r6, r31
   1610e:	71 08       	sbc	r7, r1
                        ip += ulab; // jump to after for-block
   16110:	80 2f       	mov	r24, r16
   16112:	90 e0       	ldi	r25, 0x00	; 0
   16114:	91 2b       	or	r25, r17
   16116:	48 0e       	add	r4, r24
   16118:	59 1e       	adc	r5, r25
   1611a:	cf c9       	rjmp	.-3170   	; 0x154ba <mp_execute_bytecode+0x106>
                    } else {
                        PUSH(value); // push the next iteration value
   1611c:	d3 01       	movw	r26, r6
   1611e:	13 96       	adiw	r26, 0x03	; 3
   16120:	9c 93       	st	X, r25
   16122:	8e 93       	st	-X, r24
   16124:	12 97       	sbiw	r26, 0x02	; 2
   16126:	f3 01       	movw	r30, r6
   16128:	32 96       	adiw	r30, 0x02	; 2
   1612a:	3f 01       	movw	r6, r30
   1612c:	c6 c9       	rjmp	.-3188   	; 0x154ba <mp_execute_bytecode+0x106>
                    }
                    DISPATCH();
                }

                ENTRY(MP_BC_POP_EXCEPT_JUMP): {
                    assert(exc_sp >= exc_stack);
   1612e:	89 81       	ldd	r24, Y+1	; 0x01
   16130:	9a 81       	ldd	r25, Y+2	; 0x02
   16132:	2c a1       	ldd	r18, Y+36	; 0x24
   16134:	3d a1       	ldd	r19, Y+37	; 0x25
   16136:	82 17       	cp	r24, r18
   16138:	93 07       	cpc	r25, r19
   1613a:	10 f4       	brcc	.+4      	; 0x16140 <mp_execute_bytecode+0xd8c>
   1613c:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                    POP_EXC_BLOCK();
   16140:	89 81       	ldd	r24, Y+1	; 0x01
   16142:	9a 81       	ldd	r25, Y+2	; 0x02
   16144:	06 97       	sbiw	r24, 0x06	; 6
   16146:	9a 83       	std	Y+2, r25	; 0x02
   16148:	89 83       	std	Y+1, r24	; 0x01
   1614a:	d2 01       	movw	r26, r4
   1614c:	12 96       	adiw	r26, 0x02	; 2
   1614e:	8c 91       	ld	r24, X
   16150:	12 97       	sbiw	r26, 0x02	; 2
   16152:	90 e0       	ldi	r25, 0x00	; 0
   16154:	98 2f       	mov	r25, r24
   16156:	88 27       	eor	r24, r24
   16158:	11 96       	adiw	r26, 0x01	; 1
   1615a:	2c 91       	ld	r18, X
   1615c:	82 2b       	or	r24, r18
   1615e:	2c 01       	movw	r4, r24
   16160:	b2 e0       	ldi	r27, 0x02	; 2
   16162:	4b 0e       	add	r4, r27
   16164:	51 1c       	adc	r5, r1
                    DECODE_ULABEL;
                    ip += ulab;
   16166:	42 0c       	add	r4, r2
   16168:	53 1c       	adc	r5, r3
                    DISPATCH_WITH_PEND_EXC_CHECK();
   1616a:	27 c4       	rjmp	.+2126   	; 0x169ba <mp_execute_bytecode+0x1606>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1616c:	80 e0       	ldi	r24, 0x00	; 0
   1616e:	90 e0       	ldi	r25, 0x00	; 0
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_BUILD_TUPLE): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16170:	96 95       	lsr	r25
   16172:	98 2f       	mov	r25, r24
   16174:	88 27       	eor	r24, r24
   16176:	97 95       	ror	r25
   16178:	87 95       	ror	r24
   1617a:	f1 01       	movw	r30, r2
   1617c:	21 91       	ld	r18, Z+
   1617e:	1f 01       	movw	r2, r30
   16180:	32 2f       	mov	r19, r18
   16182:	3f 77       	andi	r19, 0x7F	; 127
   16184:	83 0f       	add	r24, r19
   16186:	91 1d       	adc	r25, r1
   16188:	22 23       	and	r18, r18
   1618a:	94 f3       	brlt	.-28     	; 0x16170 <mp_execute_bytecode+0xdbc>
                    sp -= unum - 1;
   1618c:	9c 01       	movw	r18, r24
   1618e:	22 0f       	add	r18, r18
   16190:	33 1f       	adc	r19, r19
   16192:	a3 01       	movw	r20, r6
   16194:	42 1b       	sub	r20, r18
   16196:	53 0b       	sbc	r21, r19
   16198:	da 01       	movw	r26, r20
   1619a:	12 96       	adiw	r26, 0x02	; 2
   1619c:	3d 01       	movw	r6, r26
                    SET_TOP(mp_obj_new_tuple(unum, sp));
   1619e:	bd 01       	movw	r22, r26
   161a0:	0e 94 29 3a 	call	0x7452	; 0x7452 <mp_obj_new_tuple>
   161a4:	f3 01       	movw	r30, r6
   161a6:	91 83       	std	Z+1, r25	; 0x01
   161a8:	80 83       	st	Z, r24
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_BUILD_TUPLE): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   161aa:	21 01       	movw	r4, r2
                    sp -= unum - 1;
                    SET_TOP(mp_obj_new_tuple(unum, sp));
                    DISPATCH();
   161ac:	86 c9       	rjmp	.-3316   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   161ae:	80 e0       	ldi	r24, 0x00	; 0
   161b0:	90 e0       	ldi	r25, 0x00	; 0
                    DISPATCH();
                }

                ENTRY(MP_BC_BUILD_LIST): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   161b2:	96 95       	lsr	r25
   161b4:	98 2f       	mov	r25, r24
   161b6:	88 27       	eor	r24, r24
   161b8:	97 95       	ror	r25
   161ba:	87 95       	ror	r24
   161bc:	d1 01       	movw	r26, r2
   161be:	2d 91       	ld	r18, X+
   161c0:	1d 01       	movw	r2, r26
   161c2:	32 2f       	mov	r19, r18
   161c4:	3f 77       	andi	r19, 0x7F	; 127
   161c6:	83 0f       	add	r24, r19
   161c8:	91 1d       	adc	r25, r1
   161ca:	22 23       	and	r18, r18
   161cc:	94 f3       	brlt	.-28     	; 0x161b2 <mp_execute_bytecode+0xdfe>
                    sp -= unum - 1;
   161ce:	9c 01       	movw	r18, r24
   161d0:	22 0f       	add	r18, r18
   161d2:	33 1f       	adc	r19, r19
   161d4:	f3 01       	movw	r30, r6
   161d6:	e2 1b       	sub	r30, r18
   161d8:	f3 0b       	sbc	r31, r19
   161da:	af 01       	movw	r20, r30
   161dc:	4e 5f       	subi	r20, 0xFE	; 254
   161de:	5f 4f       	sbci	r21, 0xFF	; 255
   161e0:	3a 01       	movw	r6, r20
                    SET_TOP(mp_obj_new_list(unum, sp));
   161e2:	ba 01       	movw	r22, r20
   161e4:	0e 94 b0 37 	call	0x6f60	; 0x6f60 <mp_obj_new_list>
   161e8:	d3 01       	movw	r26, r6
   161ea:	8d 93       	st	X+, r24
   161ec:	9c 93       	st	X, r25
                    DISPATCH();
                }

                ENTRY(MP_BC_BUILD_LIST): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   161ee:	21 01       	movw	r4, r2
                    sp -= unum - 1;
                    SET_TOP(mp_obj_new_list(unum, sp));
                    DISPATCH();
   161f0:	64 c9       	rjmp	.-3384   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   161f2:	80 e0       	ldi	r24, 0x00	; 0
   161f4:	90 e0       	ldi	r25, 0x00	; 0
                    DISPATCH();
                }

                ENTRY(MP_BC_BUILD_MAP): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   161f6:	96 95       	lsr	r25
   161f8:	98 2f       	mov	r25, r24
   161fa:	88 27       	eor	r24, r24
   161fc:	97 95       	ror	r25
   161fe:	87 95       	ror	r24
   16200:	f1 01       	movw	r30, r2
   16202:	21 91       	ld	r18, Z+
   16204:	1f 01       	movw	r2, r30
   16206:	32 2f       	mov	r19, r18
   16208:	3f 77       	andi	r19, 0x7F	; 127
   1620a:	83 0f       	add	r24, r19
   1620c:	91 1d       	adc	r25, r1
   1620e:	22 23       	and	r18, r18
   16210:	94 f3       	brlt	.-28     	; 0x161f6 <mp_execute_bytecode+0xe42>
                    PUSH(mp_obj_new_dict(unum));
   16212:	83 01       	movw	r16, r6
   16214:	0e 5f       	subi	r16, 0xFE	; 254
   16216:	1f 4f       	sbci	r17, 0xFF	; 255
   16218:	0e 94 28 4a 	call	0x9450	; 0x9450 <mp_obj_new_dict>
   1621c:	d3 01       	movw	r26, r6
   1621e:	13 96       	adiw	r26, 0x03	; 3
   16220:	9c 93       	st	X, r25
   16222:	8e 93       	st	-X, r24
   16224:	12 97       	sbiw	r26, 0x02	; 2
   16226:	38 01       	movw	r6, r16
                    DISPATCH();
                }

                ENTRY(MP_BC_BUILD_MAP): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16228:	21 01       	movw	r4, r2
                    PUSH(mp_obj_new_dict(unum));
                    DISPATCH();
   1622a:	47 c9       	rjmp	.-3442   	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_STORE_MAP):
                    MARK_EXC_IP_SELECTIVE();
                    sp -= 2;
   1622c:	83 01       	movw	r16, r6
   1622e:	04 50       	subi	r16, 0x04	; 4
   16230:	11 09       	sbc	r17, r1
                    mp_obj_dict_store(sp[0], sp[2], sp[1]);
   16232:	f3 01       	movw	r30, r6
   16234:	32 97       	sbiw	r30, 0x02	; 2
   16236:	40 81       	ld	r20, Z
   16238:	51 81       	ldd	r21, Z+1	; 0x01
   1623a:	f3 01       	movw	r30, r6
   1623c:	60 81       	ld	r22, Z
   1623e:	71 81       	ldd	r23, Z+1	; 0x01
   16240:	d8 01       	movw	r26, r16
   16242:	8d 91       	ld	r24, X+
   16244:	9c 91       	ld	r25, X
   16246:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
                    DISPATCH();
                }

                ENTRY(MP_BC_STORE_MAP):
                    MARK_EXC_IP_SELECTIVE();
                    sp -= 2;
   1624a:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1624c:	21 01       	movw	r4, r2
   1624e:	35 c9       	rjmp	.-3478   	; 0x154ba <mp_execute_bytecode+0x106>
   16250:	20 e0       	ldi	r18, 0x00	; 0
   16252:	30 e0       	ldi	r19, 0x00	; 0
                }
#endif

                ENTRY(MP_BC_STORE_COMP): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16254:	36 95       	lsr	r19
   16256:	32 2f       	mov	r19, r18
   16258:	22 27       	eor	r18, r18
   1625a:	37 95       	ror	r19
   1625c:	27 95       	ror	r18
   1625e:	f1 01       	movw	r30, r2
   16260:	81 91       	ld	r24, Z+
   16262:	1f 01       	movw	r2, r30
   16264:	98 2f       	mov	r25, r24
   16266:	9f 77       	andi	r25, 0x7F	; 127
   16268:	29 0f       	add	r18, r25
   1626a:	31 1d       	adc	r19, r1
   1626c:	88 23       	and	r24, r24
   1626e:	94 f3       	brlt	.-28     	; 0x16254 <mp_execute_bytecode+0xea0>
                    mp_obj_t obj = sp[-(unum >> 2)];
   16270:	c9 01       	movw	r24, r18
   16272:	96 95       	lsr	r25
   16274:	87 95       	ror	r24
   16276:	96 95       	lsr	r25
   16278:	87 95       	ror	r24
   1627a:	88 0f       	add	r24, r24
   1627c:	99 1f       	adc	r25, r25
   1627e:	f3 01       	movw	r30, r6
   16280:	e8 1b       	sub	r30, r24
   16282:	f9 0b       	sbc	r31, r25
   16284:	80 81       	ld	r24, Z
   16286:	91 81       	ldd	r25, Z+1	; 0x01
                    if ((unum & 3) == 0) {
   16288:	23 70       	andi	r18, 0x03	; 3
   1628a:	33 27       	eor	r19, r19
   1628c:	23 2b       	or	r18, r19
   1628e:	51 f4       	brne	.+20     	; 0x162a4 <mp_execute_bytecode+0xef0>
                        mp_obj_list_append(obj, sp[0]);
   16290:	d3 01       	movw	r26, r6
   16292:	6d 91       	ld	r22, X+
   16294:	7c 91       	ld	r23, X
   16296:	0e 94 d3 72 	call	0xe5a6	; 0xe5a6 <mp_obj_list_append>
                        sp--;
   1629a:	b2 e0       	ldi	r27, 0x02	; 2
   1629c:	6b 1a       	sub	r6, r27
   1629e:	71 08       	sbc	r7, r1
                }
#endif

                ENTRY(MP_BC_STORE_COMP): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   162a0:	21 01       	movw	r4, r2
   162a2:	0b c9       	rjmp	.-3562   	; 0x154ba <mp_execute_bytecode+0x106>
                    mp_obj_t obj = sp[-(unum >> 2)];
                    if ((unum & 3) == 0) {
                        mp_obj_list_append(obj, sp[0]);
                        sp--;
                    } else if (!MICROPY_PY_BUILTINS_SET || (unum & 3) == 1) {
                        mp_obj_dict_store(obj, sp[0], sp[-1]);
   162a4:	f3 01       	movw	r30, r6
   162a6:	32 97       	sbiw	r30, 0x02	; 2
   162a8:	40 81       	ld	r20, Z
   162aa:	51 81       	ldd	r21, Z+1	; 0x01
   162ac:	f3 01       	movw	r30, r6
   162ae:	60 81       	ld	r22, Z
   162b0:	71 81       	ldd	r23, Z+1	; 0x01
   162b2:	0e 94 78 42 	call	0x84f0	; 0x84f0 <mp_obj_dict_store>
                        sp -= 2;
   162b6:	f4 e0       	ldi	r31, 0x04	; 4
   162b8:	6f 1a       	sub	r6, r31
   162ba:	71 08       	sbc	r7, r1
                }
#endif

                ENTRY(MP_BC_STORE_COMP): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   162bc:	21 01       	movw	r4, r2
   162be:	fd c8       	rjmp	.-3590   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   162c0:	00 e0       	ldi	r16, 0x00	; 0
   162c2:	10 e0       	ldi	r17, 0x00	; 0
                    DISPATCH();
                }

                ENTRY(MP_BC_UNPACK_SEQUENCE): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   162c4:	16 95       	lsr	r17
   162c6:	10 2f       	mov	r17, r16
   162c8:	00 27       	eor	r16, r16
   162ca:	17 95       	ror	r17
   162cc:	07 95       	ror	r16
   162ce:	d1 01       	movw	r26, r2
   162d0:	8d 91       	ld	r24, X+
   162d2:	1d 01       	movw	r2, r26
   162d4:	98 2f       	mov	r25, r24
   162d6:	9f 77       	andi	r25, 0x7F	; 127
   162d8:	09 0f       	add	r16, r25
   162da:	11 1d       	adc	r17, r1
   162dc:	88 23       	and	r24, r24
   162de:	94 f3       	brlt	.-28     	; 0x162c4 <mp_execute_bytecode+0xf10>
                    mp_unpack_sequence(sp[0], unum, sp);
   162e0:	a3 01       	movw	r20, r6
   162e2:	b8 01       	movw	r22, r16
   162e4:	f3 01       	movw	r30, r6
   162e6:	80 81       	ld	r24, Z
   162e8:	91 81       	ldd	r25, Z+1	; 0x01
   162ea:	0e 94 17 88 	call	0x1102e	; 0x1102e <mp_unpack_sequence>
                    sp += unum - 1;
   162ee:	01 50       	subi	r16, 0x01	; 1
   162f0:	10 48       	sbci	r17, 0x80	; 128
   162f2:	00 0f       	add	r16, r16
   162f4:	11 1f       	adc	r17, r17
   162f6:	60 0e       	add	r6, r16
   162f8:	71 1e       	adc	r7, r17
                    DISPATCH();
                }

                ENTRY(MP_BC_UNPACK_SEQUENCE): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   162fa:	21 01       	movw	r4, r2
                    mp_unpack_sequence(sp[0], unum, sp);
                    sp += unum - 1;
                    DISPATCH();
   162fc:	de c8       	rjmp	.-3652   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   162fe:	00 e0       	ldi	r16, 0x00	; 0
   16300:	10 e0       	ldi	r17, 0x00	; 0
                    DISPATCH();
                }

                ENTRY(MP_BC_UNPACK_EX): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16302:	16 95       	lsr	r17
   16304:	10 2f       	mov	r17, r16
   16306:	00 27       	eor	r16, r16
   16308:	17 95       	ror	r17
   1630a:	07 95       	ror	r16
   1630c:	d1 01       	movw	r26, r2
   1630e:	8d 91       	ld	r24, X+
   16310:	1d 01       	movw	r2, r26
   16312:	98 2f       	mov	r25, r24
   16314:	9f 77       	andi	r25, 0x7F	; 127
   16316:	09 0f       	add	r16, r25
   16318:	11 1d       	adc	r17, r1
   1631a:	88 23       	and	r24, r24
   1631c:	94 f3       	brlt	.-28     	; 0x16302 <mp_execute_bytecode+0xf4e>
                    mp_unpack_ex(sp[0], unum, sp);
   1631e:	a3 01       	movw	r20, r6
   16320:	b8 01       	movw	r22, r16
   16322:	f3 01       	movw	r30, r6
   16324:	80 81       	ld	r24, Z
   16326:	91 81       	ldd	r25, Z+1	; 0x01
   16328:	0e 94 08 91 	call	0x12210	; 0x12210 <mp_unpack_ex>
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
   1632c:	81 2f       	mov	r24, r17
   1632e:	99 27       	eor	r25, r25
   16330:	80 0f       	add	r24, r16
   16332:	91 1d       	adc	r25, r1
   16334:	88 0f       	add	r24, r24
   16336:	99 1f       	adc	r25, r25
   16338:	68 0e       	add	r6, r24
   1633a:	79 1e       	adc	r7, r25
                    DISPATCH();
                }

                ENTRY(MP_BC_UNPACK_EX): {
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   1633c:	21 01       	movw	r4, r2
                    mp_unpack_ex(sp[0], unum, sp);
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
                    DISPATCH();
   1633e:	bd c8       	rjmp	.-3718   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16340:	80 e0       	ldi	r24, 0x00	; 0
   16342:	90 e0       	ldi	r25, 0x00	; 0
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_FUNCTION): {
                    DECODE_PTR;
   16344:	96 95       	lsr	r25
   16346:	98 2f       	mov	r25, r24
   16348:	88 27       	eor	r24, r24
   1634a:	97 95       	ror	r25
   1634c:	87 95       	ror	r24
   1634e:	d1 01       	movw	r26, r2
   16350:	2d 91       	ld	r18, X+
   16352:	1d 01       	movw	r2, r26
   16354:	32 2f       	mov	r19, r18
   16356:	3f 77       	andi	r19, 0x7F	; 127
   16358:	83 0f       	add	r24, r19
   1635a:	91 1d       	adc	r25, r1
   1635c:	22 23       	and	r18, r18
   1635e:	94 f3       	brlt	.-28     	; 0x16344 <mp_execute_bytecode+0xf90>
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   16360:	83 01       	movw	r16, r6
   16362:	0e 5f       	subi	r16, 0xFE	; 254
   16364:	1f 4f       	sbci	r17, 0xFF	; 255
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_FUNCTION): {
                    DECODE_PTR;
   16366:	aa a1       	ldd	r26, Y+34	; 0x22
   16368:	bb a1       	ldd	r27, Y+35	; 0x23
   1636a:	ed 91       	ld	r30, X+
   1636c:	fc 91       	ld	r31, X
   1636e:	88 0f       	add	r24, r24
   16370:	99 1f       	adc	r25, r25
   16372:	06 80       	ldd	r0, Z+6	; 0x06
   16374:	f7 81       	ldd	r31, Z+7	; 0x07
   16376:	e0 2d       	mov	r30, r0
   16378:	e8 0f       	add	r30, r24
   1637a:	f9 1f       	adc	r31, r25
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
   1637c:	40 e0       	ldi	r20, 0x00	; 0
   1637e:	50 e0       	ldi	r21, 0x00	; 0
   16380:	60 e0       	ldi	r22, 0x00	; 0
   16382:	70 e0       	ldi	r23, 0x00	; 0
   16384:	80 81       	ld	r24, Z
   16386:	91 81       	ldd	r25, Z+1	; 0x01
   16388:	0e 94 48 34 	call	0x6890	; 0x6890 <mp_make_function_from_raw_code>
   1638c:	f3 01       	movw	r30, r6
   1638e:	93 83       	std	Z+3, r25	; 0x03
   16390:	82 83       	std	Z+2, r24	; 0x02
   16392:	38 01       	movw	r6, r16
                    sp += (unum & 0xff) + ((unum >> 8) & 0xff);
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_FUNCTION): {
                    DECODE_PTR;
   16394:	21 01       	movw	r4, r2
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
                    DISPATCH();
   16396:	91 c8       	rjmp	.-3806   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16398:	80 e0       	ldi	r24, 0x00	; 0
   1639a:	90 e0       	ldi	r25, 0x00	; 0
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_FUNCTION_DEFARGS): {
                    DECODE_PTR;
   1639c:	96 95       	lsr	r25
   1639e:	98 2f       	mov	r25, r24
   163a0:	88 27       	eor	r24, r24
   163a2:	97 95       	ror	r25
   163a4:	87 95       	ror	r24
   163a6:	d1 01       	movw	r26, r2
   163a8:	2d 91       	ld	r18, X+
   163aa:	1d 01       	movw	r2, r26
   163ac:	32 2f       	mov	r19, r18
   163ae:	3f 77       	andi	r19, 0x7F	; 127
   163b0:	83 0f       	add	r24, r19
   163b2:	91 1d       	adc	r25, r1
   163b4:	22 23       	and	r18, r18
   163b6:	94 f3       	brlt	.-28     	; 0x1639c <mp_execute_bytecode+0xfe8>
                    // Stack layout: def_tuple def_dict <- TOS
                    mp_obj_t def_dict = POP();
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   163b8:	f3 01       	movw	r30, r6
   163ba:	40 81       	ld	r20, Z
   163bc:	51 81       	ldd	r21, Z+1	; 0x01
   163be:	d3 01       	movw	r26, r6
   163c0:	7e 91       	ld	r23, -X
   163c2:	6e 91       	ld	r22, -X
   163c4:	8d 01       	movw	r16, r26
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_FUNCTION_DEFARGS): {
                    DECODE_PTR;
   163c6:	aa a1       	ldd	r26, Y+34	; 0x22
   163c8:	bb a1       	ldd	r27, Y+35	; 0x23
   163ca:	ed 91       	ld	r30, X+
   163cc:	fc 91       	ld	r31, X
   163ce:	88 0f       	add	r24, r24
   163d0:	99 1f       	adc	r25, r25
   163d2:	06 80       	ldd	r0, Z+6	; 0x06
   163d4:	f7 81       	ldd	r31, Z+7	; 0x07
   163d6:	e0 2d       	mov	r30, r0
   163d8:	e8 0f       	add	r30, r24
   163da:	f9 1f       	adc	r31, r25
                    // Stack layout: def_tuple def_dict <- TOS
                    mp_obj_t def_dict = POP();
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
   163dc:	80 81       	ld	r24, Z
   163de:	91 81       	ldd	r25, Z+1	; 0x01
   163e0:	0e 94 48 34 	call	0x6890	; 0x6890 <mp_make_function_from_raw_code>
   163e4:	f8 01       	movw	r30, r16
   163e6:	91 83       	std	Z+1, r25	; 0x01
   163e8:	80 83       	st	Z, r24
                }

                ENTRY(MP_BC_MAKE_FUNCTION_DEFARGS): {
                    DECODE_PTR;
                    // Stack layout: def_tuple def_dict <- TOS
                    mp_obj_t def_dict = POP();
   163ea:	38 01       	movw	r6, r16
                    PUSH(mp_make_function_from_raw_code(ptr, MP_OBJ_NULL, MP_OBJ_NULL));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_FUNCTION_DEFARGS): {
                    DECODE_PTR;
   163ec:	21 01       	movw	r4, r2
                    // Stack layout: def_tuple def_dict <- TOS
                    mp_obj_t def_dict = POP();
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
                    DISPATCH();
   163ee:	65 c8       	rjmp	.-3894   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   163f0:	80 e0       	ldi	r24, 0x00	; 0
   163f2:	90 e0       	ldi	r25, 0x00	; 0
   163f4:	01 c0       	rjmp	.+2      	; 0x163f8 <mp_execute_bytecode+0x1044>
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_CLOSURE): {
                    DECODE_PTR;
   163f6:	1f 01       	movw	r2, r30
   163f8:	96 95       	lsr	r25
   163fa:	98 2f       	mov	r25, r24
   163fc:	88 27       	eor	r24, r24
   163fe:	97 95       	ror	r25
   16400:	87 95       	ror	r24
   16402:	f1 01       	movw	r30, r2
   16404:	21 91       	ld	r18, Z+
   16406:	32 2f       	mov	r19, r18
   16408:	3f 77       	andi	r19, 0x7F	; 127
   1640a:	83 0f       	add	r24, r19
   1640c:	91 1d       	adc	r25, r1
   1640e:	22 23       	and	r18, r18
   16410:	94 f3       	brlt	.-28     	; 0x163f6 <mp_execute_bytecode+0x1042>
                    size_t n_closed_over = *ip++;
   16412:	21 01       	movw	r4, r2
   16414:	f2 e0       	ldi	r31, 0x02	; 2
   16416:	4f 0e       	add	r4, r31
   16418:	51 1c       	adc	r5, r1
   1641a:	d1 01       	movw	r26, r2
   1641c:	11 96       	adiw	r26, 0x01	; 1
   1641e:	6c 91       	ld	r22, X
   16420:	70 e0       	ldi	r23, 0x00	; 0
                    // Stack layout: closed_overs <- TOS
                    sp -= n_closed_over - 1;
   16422:	9b 01       	movw	r18, r22
   16424:	22 0f       	add	r18, r18
   16426:	33 1f       	adc	r19, r19
   16428:	f3 01       	movw	r30, r6
   1642a:	e2 1b       	sub	r30, r18
   1642c:	f3 0b       	sbc	r31, r19
   1642e:	af 01       	movw	r20, r30
   16430:	4e 5f       	subi	r20, 0xFE	; 254
   16432:	5f 4f       	sbci	r21, 0xFF	; 255
   16434:	3a 01       	movw	r6, r20
                    SET_TOP(mp_make_function_from_raw_code(ptr, TOP(), def_dict));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_CLOSURE): {
                    DECODE_PTR;
   16436:	aa a1       	ldd	r26, Y+34	; 0x22
   16438:	bb a1       	ldd	r27, Y+35	; 0x23
   1643a:	ed 91       	ld	r30, X+
   1643c:	fc 91       	ld	r31, X
   1643e:	88 0f       	add	r24, r24
   16440:	99 1f       	adc	r25, r25
   16442:	06 80       	ldd	r0, Z+6	; 0x06
   16444:	f7 81       	ldd	r31, Z+7	; 0x07
   16446:	e0 2d       	mov	r30, r0
   16448:	e8 0f       	add	r30, r24
   1644a:	f9 1f       	adc	r31, r25
                    size_t n_closed_over = *ip++;
                    // Stack layout: closed_overs <- TOS
                    sp -= n_closed_over - 1;
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
   1644c:	80 81       	ld	r24, Z
   1644e:	91 81       	ldd	r25, Z+1	; 0x01
   16450:	0e 94 86 34 	call	0x690c	; 0x690c <mp_make_closure_from_raw_code>
   16454:	f3 01       	movw	r30, r6
   16456:	91 83       	std	Z+1, r25	; 0x01
   16458:	80 83       	st	Z, r24
                    DISPATCH();
   1645a:	2f c8       	rjmp	.-4002   	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1645c:	80 e0       	ldi	r24, 0x00	; 0
   1645e:	90 e0       	ldi	r25, 0x00	; 0
   16460:	01 c0       	rjmp	.+2      	; 0x16464 <mp_execute_bytecode+0x10b0>
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_CLOSURE_DEFARGS): {
                    DECODE_PTR;
   16462:	1f 01       	movw	r2, r30
   16464:	96 95       	lsr	r25
   16466:	98 2f       	mov	r25, r24
   16468:	88 27       	eor	r24, r24
   1646a:	97 95       	ror	r25
   1646c:	87 95       	ror	r24
   1646e:	f1 01       	movw	r30, r2
   16470:	21 91       	ld	r18, Z+
   16472:	32 2f       	mov	r19, r18
   16474:	3f 77       	andi	r19, 0x7F	; 127
   16476:	83 0f       	add	r24, r19
   16478:	91 1d       	adc	r25, r1
   1647a:	22 23       	and	r18, r18
   1647c:	94 f3       	brlt	.-28     	; 0x16462 <mp_execute_bytecode+0x10ae>
                    size_t n_closed_over = *ip++;
   1647e:	21 01       	movw	r4, r2
   16480:	f2 e0       	ldi	r31, 0x02	; 2
   16482:	4f 0e       	add	r4, r31
   16484:	51 1c       	adc	r5, r1
   16486:	d1 01       	movw	r26, r2
   16488:	11 96       	adiw	r26, 0x01	; 1
   1648a:	6c 91       	ld	r22, X
   1648c:	70 e0       	ldi	r23, 0x00	; 0
                    // Stack layout: def_tuple def_dict closed_overs <- TOS
                    sp -= 2 + n_closed_over - 1;
   1648e:	9b 01       	movw	r18, r22
   16490:	20 95       	com	r18
   16492:	30 95       	com	r19
   16494:	22 0f       	add	r18, r18
   16496:	33 1f       	adc	r19, r19
   16498:	62 0e       	add	r6, r18
   1649a:	73 1e       	adc	r7, r19
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   1649c:	71 60       	ori	r23, 0x01	; 1
                    SET_TOP(mp_make_closure_from_raw_code(ptr, n_closed_over, sp));
                    DISPATCH();
                }

                ENTRY(MP_BC_MAKE_CLOSURE_DEFARGS): {
                    DECODE_PTR;
   1649e:	aa a1       	ldd	r26, Y+34	; 0x22
   164a0:	bb a1       	ldd	r27, Y+35	; 0x23
   164a2:	ed 91       	ld	r30, X+
   164a4:	fc 91       	ld	r31, X
   164a6:	88 0f       	add	r24, r24
   164a8:	99 1f       	adc	r25, r25
   164aa:	06 80       	ldd	r0, Z+6	; 0x06
   164ac:	f7 81       	ldd	r31, Z+7	; 0x07
   164ae:	e0 2d       	mov	r30, r0
   164b0:	e8 0f       	add	r30, r24
   164b2:	f9 1f       	adc	r31, r25
                    size_t n_closed_over = *ip++;
                    // Stack layout: def_tuple def_dict closed_overs <- TOS
                    sp -= 2 + n_closed_over - 1;
                    SET_TOP(mp_make_closure_from_raw_code(ptr, 0x100 | n_closed_over, sp));
   164b4:	a3 01       	movw	r20, r6
   164b6:	80 81       	ld	r24, Z
   164b8:	91 81       	ldd	r25, Z+1	; 0x01
   164ba:	0e 94 86 34 	call	0x690c	; 0x690c <mp_make_closure_from_raw_code>
   164be:	f3 01       	movw	r30, r6
   164c0:	91 83       	std	Z+1, r25	; 0x01
   164c2:	80 83       	st	Z, r24
                    DISPATCH();
   164c4:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   164c8:	40 e0       	ldi	r20, 0x00	; 0
   164ca:	50 e0       	ldi	r21, 0x00	; 0
                }

                ENTRY(MP_BC_CALL_FUNCTION): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   164cc:	56 95       	lsr	r21
   164ce:	54 2f       	mov	r21, r20
   164d0:	44 27       	eor	r20, r20
   164d2:	57 95       	ror	r21
   164d4:	47 95       	ror	r20
   164d6:	d1 01       	movw	r26, r2
   164d8:	8d 91       	ld	r24, X+
   164da:	1d 01       	movw	r2, r26
   164dc:	98 2f       	mov	r25, r24
   164de:	9f 77       	andi	r25, 0x7F	; 127
   164e0:	49 0f       	add	r20, r25
   164e2:	51 1d       	adc	r21, r1
   164e4:	88 23       	and	r24, r24
   164e6:	94 f3       	brlt	.-28     	; 0x164cc <mp_execute_bytecode+0x1118>
                    // unum & 0xff == n_positional
                    // (unum >> 8) & 0xff == n_keyword
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe);
   164e8:	ba 01       	movw	r22, r20
   164ea:	77 27       	eor	r23, r23
   164ec:	ca 01       	movw	r24, r20
   164ee:	88 0f       	add	r24, r24
   164f0:	89 2f       	mov	r24, r25
   164f2:	88 1f       	adc	r24, r24
   164f4:	99 0b       	sbc	r25, r25
   164f6:	91 95       	neg	r25
   164f8:	8e 7f       	andi	r24, 0xFE	; 254
   164fa:	91 70       	andi	r25, 0x01	; 1
   164fc:	86 0f       	add	r24, r22
   164fe:	97 1f       	adc	r25, r23
   16500:	88 0f       	add	r24, r24
   16502:	99 1f       	adc	r25, r25
   16504:	68 1a       	sub	r6, r24
   16506:	79 0a       	sbc	r7, r25
                            nlr_pop();
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
   16508:	93 01       	movw	r18, r6
   1650a:	2e 5f       	subi	r18, 0xFE	; 254
   1650c:	3f 4f       	sbci	r19, 0xFF	; 255
   1650e:	45 2f       	mov	r20, r21
   16510:	50 e0       	ldi	r21, 0x00	; 0
   16512:	f3 01       	movw	r30, r6
   16514:	80 81       	ld	r24, Z
   16516:	91 81       	ldd	r25, Z+1	; 0x01
   16518:	0e 94 fa 24 	call	0x49f4	; 0x49f4 <mp_call_function_n_kw>
   1651c:	d3 01       	movw	r26, r6
   1651e:	8d 93       	st	X+, r24
   16520:	9c 93       	st	X, r25
                }

                ENTRY(MP_BC_CALL_FUNCTION): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16522:	21 01       	movw	r4, r2
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_function_n_kw(*sp, unum & 0xff, (unum >> 8) & 0xff, sp + 1));
                    DISPATCH();
   16524:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16528:	60 e0       	ldi	r22, 0x00	; 0
   1652a:	70 e0       	ldi	r23, 0x00	; 0
                }

                ENTRY(MP_BC_CALL_FUNCTION_VAR_KW): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   1652c:	76 95       	lsr	r23
   1652e:	76 2f       	mov	r23, r22
   16530:	66 27       	eor	r22, r22
   16532:	77 95       	ror	r23
   16534:	67 95       	ror	r22
   16536:	f1 01       	movw	r30, r2
   16538:	81 91       	ld	r24, Z+
   1653a:	1f 01       	movw	r2, r30
   1653c:	98 2f       	mov	r25, r24
   1653e:	9f 77       	andi	r25, 0x7F	; 127
   16540:	69 0f       	add	r22, r25
   16542:	71 1d       	adc	r23, r1
   16544:	88 23       	and	r24, r24
   16546:	94 f3       	brlt	.-28     	; 0x1652c <mp_execute_bytecode+0x1178>
                    // unum & 0xff == n_positional
                    // (unum >> 8) & 0xff == n_keyword
                    // We have following stack layout here:
                    // fun arg0 arg1 ... kw0 val0 kw1 val1 ... seq dict <- TOS
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 2;
   16548:	cb 01       	movw	r24, r22
   1654a:	88 0f       	add	r24, r24
   1654c:	89 2f       	mov	r24, r25
   1654e:	88 1f       	adc	r24, r24
   16550:	99 0b       	sbc	r25, r25
   16552:	91 95       	neg	r25
   16554:	8e 7f       	andi	r24, 0xFE	; 254
   16556:	91 70       	andi	r25, 0x01	; 1
   16558:	86 0f       	add	r24, r22
   1655a:	91 1d       	adc	r25, r1
   1655c:	88 0f       	add	r24, r24
   1655e:	99 1f       	adc	r25, r25
   16560:	93 01       	movw	r18, r6
   16562:	28 1b       	sub	r18, r24
   16564:	39 0b       	sbc	r19, r25
   16566:	a9 01       	movw	r20, r18
   16568:	44 50       	subi	r20, 0x04	; 4
   1656a:	51 09       	sbc	r21, r1
   1656c:	3a 01       	movw	r6, r20
                            nlr_pop();
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
   1656e:	80 e0       	ldi	r24, 0x00	; 0
   16570:	0e 94 57 96 	call	0x12cae	; 0x12cae <mp_call_method_n_kw_var>
   16574:	d3 01       	movw	r26, r6
   16576:	8d 93       	st	X+, r24
   16578:	9c 93       	st	X, r25
                }

                ENTRY(MP_BC_CALL_FUNCTION_VAR_KW): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   1657a:	21 01       	movw	r4, r2
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_method_n_kw_var(false, unum, sp));
                    DISPATCH();
   1657c:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16580:	20 e0       	ldi	r18, 0x00	; 0
   16582:	30 e0       	ldi	r19, 0x00	; 0
                }

                ENTRY(MP_BC_CALL_METHOD): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16584:	36 95       	lsr	r19
   16586:	32 2f       	mov	r19, r18
   16588:	22 27       	eor	r18, r18
   1658a:	37 95       	ror	r19
   1658c:	27 95       	ror	r18
   1658e:	f1 01       	movw	r30, r2
   16590:	81 91       	ld	r24, Z+
   16592:	1f 01       	movw	r2, r30
   16594:	98 2f       	mov	r25, r24
   16596:	9f 77       	andi	r25, 0x7F	; 127
   16598:	29 0f       	add	r18, r25
   1659a:	31 1d       	adc	r19, r1
   1659c:	88 23       	and	r24, r24
   1659e:	94 f3       	brlt	.-28     	; 0x16584 <mp_execute_bytecode+0x11d0>
                    // unum & 0xff == n_positional
                    // (unum >> 8) & 0xff == n_keyword
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 1;
   165a0:	c9 01       	movw	r24, r18
   165a2:	99 27       	eor	r25, r25
   165a4:	a9 01       	movw	r20, r18
   165a6:	44 0f       	add	r20, r20
   165a8:	45 2f       	mov	r20, r21
   165aa:	44 1f       	adc	r20, r20
   165ac:	55 0b       	sbc	r21, r21
   165ae:	51 95       	neg	r21
   165b0:	ba 01       	movw	r22, r20
   165b2:	6e 7f       	andi	r22, 0xFE	; 254
   165b4:	71 70       	andi	r23, 0x01	; 1
   165b6:	ac 01       	movw	r20, r24
   165b8:	4f 5f       	subi	r20, 0xFF	; 255
   165ba:	5f 4f       	sbci	r21, 0xFF	; 255
   165bc:	46 0f       	add	r20, r22
   165be:	57 1f       	adc	r21, r23
   165c0:	44 0f       	add	r20, r20
   165c2:	55 1f       	adc	r21, r21
   165c4:	64 1a       	sub	r6, r20
   165c6:	75 0a       	sbc	r7, r21
                            nlr_pop();
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
   165c8:	a3 01       	movw	r20, r6
   165ca:	63 2f       	mov	r22, r19
   165cc:	70 e0       	ldi	r23, 0x00	; 0
   165ce:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   165d2:	d3 01       	movw	r26, r6
   165d4:	8d 93       	st	X+, r24
   165d6:	9c 93       	st	X, r25
                }

                ENTRY(MP_BC_CALL_METHOD): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   165d8:	21 01       	movw	r4, r2
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_method_n_kw(unum & 0xff, (unum >> 8) & 0xff, sp));
                    DISPATCH();
   165da:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   165de:	60 e0       	ldi	r22, 0x00	; 0
   165e0:	70 e0       	ldi	r23, 0x00	; 0
                }

                ENTRY(MP_BC_CALL_METHOD_VAR_KW): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   165e2:	76 95       	lsr	r23
   165e4:	76 2f       	mov	r23, r22
   165e6:	66 27       	eor	r22, r22
   165e8:	77 95       	ror	r23
   165ea:	67 95       	ror	r22
   165ec:	f1 01       	movw	r30, r2
   165ee:	81 91       	ld	r24, Z+
   165f0:	1f 01       	movw	r2, r30
   165f2:	98 2f       	mov	r25, r24
   165f4:	9f 77       	andi	r25, 0x7F	; 127
   165f6:	69 0f       	add	r22, r25
   165f8:	71 1d       	adc	r23, r1
   165fa:	88 23       	and	r24, r24
   165fc:	94 f3       	brlt	.-28     	; 0x165e2 <mp_execute_bytecode+0x122e>
                    // unum & 0xff == n_positional
                    // (unum >> 8) & 0xff == n_keyword
                    // We have following stack layout here:
                    // fun self arg0 arg1 ... kw0 val0 kw1 val1 ... seq dict <- TOS
                    sp -= (unum & 0xff) + ((unum >> 7) & 0x1fe) + 3;
   165fe:	cb 01       	movw	r24, r22
   16600:	88 0f       	add	r24, r24
   16602:	89 2f       	mov	r24, r25
   16604:	88 1f       	adc	r24, r24
   16606:	99 0b       	sbc	r25, r25
   16608:	91 95       	neg	r25
   1660a:	8e 7f       	andi	r24, 0xFE	; 254
   1660c:	91 70       	andi	r25, 0x01	; 1
   1660e:	86 0f       	add	r24, r22
   16610:	91 1d       	adc	r25, r1
   16612:	88 0f       	add	r24, r24
   16614:	99 1f       	adc	r25, r25
   16616:	93 01       	movw	r18, r6
   16618:	28 1b       	sub	r18, r24
   1661a:	39 0b       	sbc	r19, r25
   1661c:	a9 01       	movw	r20, r18
   1661e:	46 50       	subi	r20, 0x06	; 6
   16620:	51 09       	sbc	r21, r1
   16622:	3a 01       	movw	r6, r20
                            nlr_pop();
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
   16624:	81 e0       	ldi	r24, 0x01	; 1
   16626:	0e 94 57 96 	call	0x12cae	; 0x12cae <mp_call_method_n_kw_var>
   1662a:	d3 01       	movw	r26, r6
   1662c:	8d 93       	st	X+, r24
   1662e:	9c 93       	st	X, r25
                }

                ENTRY(MP_BC_CALL_METHOD_VAR_KW): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_UINT;
   16630:	21 01       	movw	r4, r2
                            goto run_code_state;
                        }
                    }
                    #endif
                    SET_TOP(mp_call_method_n_kw_var(true, unum, sp));
                    DISPATCH();
   16632:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
   16636:	0c a1       	ldd	r16, Y+36	; 0x24
   16638:	1d a1       	ldd	r17, Y+37	; 0x25
                ENTRY(MP_BC_RETURN_VALUE):
                    MARK_EXC_IP_SELECTIVE();
unwind_return:
                    // Search for and execute finally handlers that aren't already active
                    while (exc_sp >= exc_stack) {
                        if (MP_TAGPTR_TAG1(exc_sp->val_sp)) {
   1663a:	e9 81       	ldd	r30, Y+1	; 0x01
   1663c:	fa 81       	ldd	r31, Y+2	; 0x02
   1663e:	82 81       	ldd	r24, Z+2	; 0x02
   16640:	81 ff       	sbrs	r24, 1
   16642:	3d c0       	rjmp	.+122    	; 0x166be <mp_execute_bytecode+0x130a>
                            if (exc_sp->handler > ip) {
   16644:	e9 81       	ldd	r30, Y+1	; 0x01
   16646:	fa 81       	ldd	r31, Y+2	; 0x02
   16648:	80 81       	ld	r24, Z
   1664a:	91 81       	ldd	r25, Z+1	; 0x01
   1664c:	28 16       	cp	r2, r24
   1664e:	39 06       	cpc	r3, r25
   16650:	c8 f4       	brcc	.+50     	; 0x16684 <mp_execute_bytecode+0x12d0>
                                // There may be 0 or more for-iterators between X and the
                                // return value, and these must be removed before control can
                                // pass to the finally code.  We simply copy the ret_value down
                                // over these iterators, if they exist.  If they don't then the
                                // following is a null operation.
                                mp_obj_t *finally_sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   16652:	e9 81       	ldd	r30, Y+1	; 0x01
   16654:	fa 81       	ldd	r31, Y+2	; 0x02
   16656:	02 80       	ldd	r0, Z+2	; 0x02
   16658:	f3 81       	ldd	r31, Z+3	; 0x03
   1665a:	e0 2d       	mov	r30, r0
   1665c:	ec 7f       	andi	r30, 0xFC	; 252
                                finally_sp[1] = sp[0];
   1665e:	d3 01       	movw	r26, r6
   16660:	8d 91       	ld	r24, X+
   16662:	9c 91       	ld	r25, X
   16664:	93 83       	std	Z+3, r25	; 0x03
   16666:	82 83       	std	Z+2, r24	; 0x02
                                sp = &finally_sp[1];
                                // We're going to run "finally" code as a coroutine
                                // (not calling it recursively). Set up a sentinel
                                // on a stack so it can return back to us when it is
                                // done (when WITH_CLEANUP or END_FINALLY reached).
                                PUSH(MP_OBJ_NEW_SMALL_INT(-1));
   16668:	3f 01       	movw	r6, r30
   1666a:	b4 e0       	ldi	r27, 0x04	; 4
   1666c:	6b 0e       	add	r6, r27
   1666e:	71 1c       	adc	r7, r1
   16670:	2f ef       	ldi	r18, 0xFF	; 255
   16672:	3f ef       	ldi	r19, 0xFF	; 255
   16674:	35 83       	std	Z+5, r19	; 0x05
   16676:	24 83       	std	Z+4, r18	; 0x04
                                ip = exc_sp->handler;
   16678:	e9 81       	ldd	r30, Y+1	; 0x01
   1667a:	fa 81       	ldd	r31, Y+2	; 0x02
   1667c:	40 80       	ld	r4, Z
   1667e:	51 80       	ldd	r5, Z+1	; 0x01
                                goto dispatch_loop;
   16680:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                            } else {
                                // Found a finally handler that is already active; cancel it.
                                CANCEL_ACTIVE_FINALLY(sp);
   16684:	f3 01       	movw	r30, r6
   16686:	32 97       	sbiw	r30, 0x02	; 2
   16688:	80 81       	ld	r24, Z
   1668a:	91 81       	ldd	r25, Z+1	; 0x01
   1668c:	80 ff       	sbrs	r24, 0
   1668e:	08 c0       	rjmp	.+16     	; 0x166a0 <mp_execute_bytecode+0x12ec>
   16690:	32 97       	sbiw	r30, 0x02	; 2
   16692:	d3 01       	movw	r26, r6
   16694:	8d 91       	ld	r24, X+
   16696:	9c 91       	ld	r25, X
   16698:	91 83       	std	Z+1, r25	; 0x01
   1669a:	80 83       	st	Z, r24
   1669c:	3f 01       	movw	r6, r30
   1669e:	0f c0       	rjmp	.+30     	; 0x166be <mp_execute_bytecode+0x130a>
   166a0:	86 30       	cpi	r24, 0x06	; 6
   166a2:	91 05       	cpc	r25, r1
   166a4:	31 f0       	breq	.+12     	; 0x166b2 <mp_execute_bytecode+0x12fe>
   166a6:	0e 94 6d 21 	call	0x42da	; 0x42da <mp_obj_is_exception_instance>
   166aa:	81 11       	cpse	r24, r1
   166ac:	02 c0       	rjmp	.+4      	; 0x166b2 <mp_execute_bytecode+0x12fe>
   166ae:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   166b2:	f3 01       	movw	r30, r6
   166b4:	80 81       	ld	r24, Z
   166b6:	91 81       	ldd	r25, Z+1	; 0x01
   166b8:	92 93       	st	-Z, r25
   166ba:	82 93       	st	-Z, r24
   166bc:	3f 01       	movw	r6, r30
                            }
                        }
                        POP_EXC_BLOCK();
   166be:	89 81       	ldd	r24, Y+1	; 0x01
   166c0:	9a 81       	ldd	r25, Y+2	; 0x02
   166c2:	06 97       	sbiw	r24, 0x06	; 6
   166c4:	9a 83       	std	Y+2, r25	; 0x02
   166c6:	89 83       	std	Y+1, r24	; 0x01

                ENTRY(MP_BC_RETURN_VALUE):
                    MARK_EXC_IP_SELECTIVE();
unwind_return:
                    // Search for and execute finally handlers that aren't already active
                    while (exc_sp >= exc_stack) {
   166c8:	89 81       	ldd	r24, Y+1	; 0x01
   166ca:	9a 81       	ldd	r25, Y+2	; 0x02
   166cc:	80 17       	cp	r24, r16
   166ce:	91 07       	cpc	r25, r17
   166d0:	08 f0       	brcs	.+2      	; 0x166d4 <mp_execute_bytecode+0x1320>
   166d2:	b3 cf       	rjmp	.-154    	; 0x1663a <mp_execute_bytecode+0x1286>
                                CANCEL_ACTIVE_FINALLY(sp);
                            }
                        }
                        POP_EXC_BLOCK();
                    }
                    nlr_pop();
   166d4:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
                    code_state->sp = sp;
   166d8:	ea a1       	ldd	r30, Y+34	; 0x22
   166da:	fb a1       	ldd	r31, Y+35	; 0x23
   166dc:	75 82       	std	Z+5, r7	; 0x05
   166de:	64 82       	std	Z+4, r6	; 0x04
                    assert(exc_sp == exc_stack - 1);
   166e0:	29 81       	ldd	r18, Y+1	; 0x01
   166e2:	3a 81       	ldd	r19, Y+2	; 0x02
   166e4:	8c a1       	ldd	r24, Y+36	; 0x24
   166e6:	9d a1       	ldd	r25, Y+37	; 0x25
   166e8:	06 97       	sbiw	r24, 0x06	; 6
   166ea:	28 17       	cp	r18, r24
   166ec:	39 07       	cpc	r19, r25
   166ee:	09 f4       	brne	.+2      	; 0x166f2 <mp_execute_bytecode+0x133e>
   166f0:	e6 c2       	rjmp	.+1484   	; 0x16cbe <mp_execute_bytecode+0x190a>
   166f2:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>

                ENTRY(MP_BC_RAISE_LAST): {
                    MARK_EXC_IP_SELECTIVE();
                    // search for the inner-most previous exception, to reraise it
                    mp_obj_t obj = MP_OBJ_NULL;
                    for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; --e) {
   166f6:	e9 81       	ldd	r30, Y+1	; 0x01
   166f8:	fa 81       	ldd	r31, Y+2	; 0x02
   166fa:	2c a1       	ldd	r18, Y+36	; 0x24
   166fc:	3d a1       	ldd	r19, Y+37	; 0x25
   166fe:	e2 17       	cp	r30, r18
   16700:	f3 07       	cpc	r31, r19
   16702:	08 f4       	brcc	.+2      	; 0x16706 <mp_execute_bytecode+0x1352>
   16704:	de c2       	rjmp	.+1468   	; 0x16cc2 <mp_execute_bytecode+0x190e>
                        if (e->prev_exc != NULL) {
   16706:	04 81       	ldd	r16, Z+4	; 0x04
   16708:	15 81       	ldd	r17, Z+5	; 0x05
   1670a:	01 15       	cp	r16, r1
   1670c:	11 05       	cpc	r17, r1
   1670e:	39 f0       	breq	.+14     	; 0x1671e <mp_execute_bytecode+0x136a>
   16710:	0d c0       	rjmp	.+26     	; 0x1672c <mp_execute_bytecode+0x1378>
   16712:	04 81       	ldd	r16, Z+4	; 0x04
   16714:	15 81       	ldd	r17, Z+5	; 0x05
   16716:	01 15       	cp	r16, r1
   16718:	11 05       	cpc	r17, r1
   1671a:	41 f4       	brne	.+16     	; 0x1672c <mp_execute_bytecode+0x1378>
   1671c:	02 c0       	rjmp	.+4      	; 0x16722 <mp_execute_bytecode+0x136e>
   1671e:	8c a1       	ldd	r24, Y+36	; 0x24
   16720:	9d a1       	ldd	r25, Y+37	; 0x25

                ENTRY(MP_BC_RAISE_LAST): {
                    MARK_EXC_IP_SELECTIVE();
                    // search for the inner-most previous exception, to reraise it
                    mp_obj_t obj = MP_OBJ_NULL;
                    for (mp_exc_stack_t *e = exc_sp; e >= exc_stack; --e) {
   16722:	36 97       	sbiw	r30, 0x06	; 6
   16724:	e8 17       	cp	r30, r24
   16726:	f9 07       	cpc	r31, r25
   16728:	a0 f7       	brcc	.-24     	; 0x16712 <mp_execute_bytecode+0x135e>
   1672a:	cb c2       	rjmp	.+1430   	; 0x16cc2 <mp_execute_bytecode+0x190e>
                        }
                    }
                    if (obj == MP_OBJ_NULL) {
                        obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, MP_ERROR_TEXT("no active exception to reraise"));
                    }
                    RAISE(obj);
   1672c:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   16730:	1e 83       	std	Y+6, r17	; 0x06
   16732:	0d 83       	std	Y+5, r16	; 0x05
   16734:	56 c1       	rjmp	.+684    	; 0x169e2 <mp_execute_bytecode+0x162e>
                }

                ENTRY(MP_BC_RAISE_OBJ): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t obj = mp_make_raise_obj(TOP());
   16736:	d3 01       	movw	r26, r6
   16738:	8d 91       	ld	r24, X+
   1673a:	9c 91       	ld	r25, X
   1673c:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <mp_make_raise_obj>
   16740:	8c 01       	movw	r16, r24
                    RAISE(obj);
   16742:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   16746:	1e 83       	std	Y+6, r17	; 0x06
   16748:	0d 83       	std	Y+5, r16	; 0x05
   1674a:	4b c1       	rjmp	.+662    	; 0x169e2 <mp_execute_bytecode+0x162e>

                ENTRY(MP_BC_RAISE_FROM): {
                    MARK_EXC_IP_SELECTIVE();
                    mp_warning(NULL, "exception chaining not supported");
                    sp--; // ignore (pop) "from" argument
                    mp_obj_t obj = mp_make_raise_obj(TOP());
   1674c:	f3 01       	movw	r30, r6
   1674e:	32 97       	sbiw	r30, 0x02	; 2
   16750:	80 81       	ld	r24, Z
   16752:	91 81       	ldd	r25, Z+1	; 0x01
   16754:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <mp_make_raise_obj>
   16758:	8c 01       	movw	r16, r24
                    RAISE(obj);
   1675a:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   1675e:	1e 83       	std	Y+6, r17	; 0x06
   16760:	0d 83       	std	Y+5, r16	; 0x05
   16762:	3f c1       	rjmp	.+638    	; 0x169e2 <mp_execute_bytecode+0x162e>
                }

                ENTRY(MP_BC_YIELD_VALUE):
yield:
                    nlr_pop();
   16764:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
                    code_state->ip = ip;
   16768:	ea a1       	ldd	r30, Y+34	; 0x22
   1676a:	fb a1       	ldd	r31, Y+35	; 0x23
   1676c:	33 82       	std	Z+3, r3	; 0x03
   1676e:	22 82       	std	Z+2, r2	; 0x02
                    code_state->sp = sp;
   16770:	75 82       	std	Z+5, r7	; 0x05
   16772:	64 82       	std	Z+4, r6	; 0x04
                    code_state->exc_sp_idx = MP_CODE_STATE_EXC_SP_IDX_FROM_PTR(exc_stack, exc_sp);
   16774:	89 81       	ldd	r24, Y+1	; 0x01
   16776:	9a 81       	ldd	r25, Y+2	; 0x02
   16778:	06 96       	adiw	r24, 0x06	; 6
   1677a:	2c a1       	ldd	r18, Y+36	; 0x24
   1677c:	3d a1       	ldd	r19, Y+37	; 0x25
   1677e:	82 1b       	sub	r24, r18
   16780:	93 0b       	sbc	r25, r19
   16782:	95 95       	asr	r25
   16784:	87 95       	ror	r24
   16786:	4b ea       	ldi	r20, 0xAB	; 171
   16788:	5a ea       	ldi	r21, 0xAA	; 170
   1678a:	84 9f       	mul	r24, r20
   1678c:	90 01       	movw	r18, r0
   1678e:	85 9f       	mul	r24, r21
   16790:	30 0d       	add	r19, r0
   16792:	94 9f       	mul	r25, r20
   16794:	30 0d       	add	r19, r0
   16796:	11 24       	eor	r1, r1
   16798:	31 87       	std	Z+9, r19	; 0x09
   1679a:	20 87       	std	Z+8, r18	; 0x08
                    FRAME_LEAVE();
                    return MP_VM_RETURN_YIELD;
   1679c:	81 e0       	ldi	r24, 0x01	; 1
   1679e:	99 c2       	rjmp	.+1330   	; 0x16cd2 <mp_execute_bytecode+0x191e>
                    MARK_EXC_IP_SELECTIVE();
//#define EXC_MATCH(exc, type) mp_obj_is_type(exc, type)
#define EXC_MATCH(exc, type) mp_obj_exception_match(exc, type)
#define GENERATOR_EXIT_IF_NEEDED(t) if (t != MP_OBJ_NULL && EXC_MATCH(t, MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) { mp_obj_t raise_t = mp_make_raise_obj(t); RAISE(raise_t); }
                    mp_vm_return_kind_t ret_kind;
                    mp_obj_t send_value = POP();
   167a0:	83 01       	movw	r16, r6
   167a2:	02 50       	subi	r16, 0x02	; 2
   167a4:	11 09       	sbc	r17, r1
   167a6:	d3 01       	movw	r26, r6
   167a8:	6d 91       	ld	r22, X+
   167aa:	7c 91       	ld	r23, X
                    mp_obj_t t_exc = MP_OBJ_NULL;
                    mp_obj_t ret_value;
                    code_state->sp = sp; // Save sp because it's needed if mp_resume raises StopIteration
   167ac:	ea a1       	ldd	r30, Y+34	; 0x22
   167ae:	fb a1       	ldd	r31, Y+35	; 0x23
   167b0:	15 83       	std	Z+5, r17	; 0x05
   167b2:	04 83       	std	Z+4, r16	; 0x04
                    if (inject_exc != MP_OBJ_NULL) {
   167b4:	88 a1       	ldd	r24, Y+32	; 0x20
   167b6:	99 a1       	ldd	r25, Y+33	; 0x21
   167b8:	89 2b       	or	r24, r25
   167ba:	79 f0       	breq	.+30     	; 0x167da <mp_execute_bytecode+0x1426>
                        t_exc = inject_exc;
   167bc:	e8 a0       	ldd	r14, Y+32	; 0x20
   167be:	f9 a0       	ldd	r15, Y+33	; 0x21
                        inject_exc = MP_OBJ_NULL;
   167c0:	19 a2       	std	Y+33, r1	; 0x21
   167c2:	18 a2       	std	Y+32, r1	; 0x20
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
   167c4:	9e 01       	movw	r18, r28
   167c6:	22 5e       	subi	r18, 0xE2	; 226
   167c8:	3f 4f       	sbci	r19, 0xFF	; 255
   167ca:	a7 01       	movw	r20, r14
   167cc:	60 e0       	ldi	r22, 0x00	; 0
   167ce:	70 e0       	ldi	r23, 0x00	; 0
   167d0:	f8 01       	movw	r30, r16
   167d2:	80 81       	ld	r24, Z
   167d4:	91 81       	ldd	r25, Z+1	; 0x01
   167d6:	23 d3       	rcall	.+1606   	; 0x16e1e <mp_resume>
   167d8:	0c c0       	rjmp	.+24     	; 0x167f2 <mp_execute_bytecode+0x143e>
                    } else {
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
   167da:	9e 01       	movw	r18, r28
   167dc:	22 5e       	subi	r18, 0xE2	; 226
   167de:	3f 4f       	sbci	r19, 0xFF	; 255
   167e0:	40 e0       	ldi	r20, 0x00	; 0
   167e2:	50 e0       	ldi	r21, 0x00	; 0
   167e4:	f3 01       	movw	r30, r6
   167e6:	32 97       	sbiw	r30, 0x02	; 2
   167e8:	80 81       	ld	r24, Z
   167ea:	91 81       	ldd	r25, Z+1	; 0x01
   167ec:	18 d3       	rcall	.+1584   	; 0x16e1e <mp_resume>
//#define EXC_MATCH(exc, type) mp_obj_is_type(exc, type)
#define EXC_MATCH(exc, type) mp_obj_exception_match(exc, type)
#define GENERATOR_EXIT_IF_NEEDED(t) if (t != MP_OBJ_NULL && EXC_MATCH(t, MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) { mp_obj_t raise_t = mp_make_raise_obj(t); RAISE(raise_t); }
                    mp_vm_return_kind_t ret_kind;
                    mp_obj_t send_value = POP();
                    mp_obj_t t_exc = MP_OBJ_NULL;
   167ee:	e1 2c       	mov	r14, r1
   167f0:	f1 2c       	mov	r15, r1
                        ret_kind = mp_resume(TOP(), MP_OBJ_NULL, t_exc, &ret_value);
                    } else {
                        ret_kind = mp_resume(TOP(), send_value, MP_OBJ_NULL, &ret_value);
                    }

                    if (ret_kind == MP_VM_RETURN_YIELD) {
   167f2:	81 30       	cpi	r24, 0x01	; 1
   167f4:	39 f4       	brne	.+14     	; 0x16804 <mp_execute_bytecode+0x1450>
                        ip--;
                        PUSH(ret_value);
   167f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
   167f8:	9f 8d       	ldd	r25, Y+31	; 0x1f
   167fa:	d3 01       	movw	r26, r6
   167fc:	8d 93       	st	X+, r24
   167fe:	9c 93       	st	X, r25
                        goto yield;
   16800:	12 01       	movw	r2, r4
   16802:	b0 cf       	rjmp	.-160    	; 0x16764 <mp_execute_bytecode+0x13b0>
                    } else if (ret_kind == MP_VM_RETURN_NORMAL) {
   16804:	81 11       	cpse	r24, r1
   16806:	19 c0       	rjmp	.+50     	; 0x1683a <mp_execute_bytecode+0x1486>
                        // The generator has finished, and returned a value via StopIteration
                        // Replace exhausted generator with the returned value
                        SET_TOP(ret_value);
   16808:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1680a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1680c:	f3 01       	movw	r30, r6
   1680e:	32 97       	sbiw	r30, 0x02	; 2
   16810:	91 83       	std	Z+1, r25	; 0x01
   16812:	80 83       	st	Z, r24
                        // If we injected GeneratorExit downstream, then even
                        // if it was swallowed, we re-raise GeneratorExit
                        GENERATOR_EXIT_IF_NEEDED(t_exc);
   16814:	e1 14       	cp	r14, r1
   16816:	f1 04       	cpc	r15, r1
   16818:	21 f1       	breq	.+72     	; 0x16862 <mp_execute_bytecode+0x14ae>
   1681a:	68 ef       	ldi	r22, 0xF8	; 248
   1681c:	71 e2       	ldi	r23, 0x21	; 33
   1681e:	c7 01       	movw	r24, r14
   16820:	0e 94 12 22 	call	0x4424	; 0x4424 <mp_obj_exception_match>
   16824:	88 23       	and	r24, r24
   16826:	e9 f0       	breq	.+58     	; 0x16862 <mp_execute_bytecode+0x14ae>
   16828:	c7 01       	movw	r24, r14
   1682a:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <mp_make_raise_obj>
   1682e:	8c 01       	movw	r16, r24
   16830:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   16834:	1e 83       	std	Y+6, r17	; 0x06
   16836:	0d 83       	std	Y+5, r16	; 0x05
   16838:	d4 c0       	rjmp	.+424    	; 0x169e2 <mp_execute_bytecode+0x162e>
                        DISPATCH();
                    } else {
                        assert(ret_kind == MP_VM_RETURN_EXCEPTION);
   1683a:	82 30       	cpi	r24, 0x02	; 2
   1683c:	11 f0       	breq	.+4      	; 0x16842 <mp_execute_bytecode+0x148e>
   1683e:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                        assert(!EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration)));
   16842:	68 eb       	ldi	r22, 0xB8	; 184
   16844:	71 e2       	ldi	r23, 0x21	; 33
   16846:	8e 8d       	ldd	r24, Y+30	; 0x1e
   16848:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1684a:	0e 94 12 22 	call	0x4424	; 0x4424 <mp_obj_exception_match>
   1684e:	81 11       	cpse	r24, r1
   16850:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
                        // Pop exhausted gen
                        sp--;
                        RAISE(ret_value);
   16854:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   16858:	8e 8d       	ldd	r24, Y+30	; 0x1e
   1685a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   1685c:	9e 83       	std	Y+6, r25	; 0x06
   1685e:	8d 83       	std	Y+5, r24	; 0x05
   16860:	c0 c0       	rjmp	.+384    	; 0x169e2 <mp_execute_bytecode+0x162e>
                    MARK_EXC_IP_SELECTIVE();
//#define EXC_MATCH(exc, type) mp_obj_is_type(exc, type)
#define EXC_MATCH(exc, type) mp_obj_exception_match(exc, type)
#define GENERATOR_EXIT_IF_NEEDED(t) if (t != MP_OBJ_NULL && EXC_MATCH(t, MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) { mp_obj_t raise_t = mp_make_raise_obj(t); RAISE(raise_t); }
                    mp_vm_return_kind_t ret_kind;
                    mp_obj_t send_value = POP();
   16862:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16864:	21 01       	movw	r4, r2
   16866:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_IMPORT_NAME): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   1686a:	f2 01       	movw	r30, r4
   1686c:	82 81       	ldd	r24, Z+2	; 0x02
   1686e:	90 e0       	ldi	r25, 0x00	; 0
   16870:	98 2f       	mov	r25, r24
   16872:	88 27       	eor	r24, r24
   16874:	21 81       	ldd	r18, Z+1	; 0x01
   16876:	f3 e0       	ldi	r31, 0x03	; 3
   16878:	4f 0e       	add	r4, r31
   1687a:	51 1c       	adc	r5, r1
                    mp_obj_t obj = POP();
                    SET_TOP(mp_import_name(qst, obj, TOP()));
   1687c:	d3 01       	movw	r26, r6
   1687e:	5e 91       	ld	r21, -X
   16880:	4e 91       	ld	r20, -X
   16882:	8d 01       	movw	r16, r26
   16884:	f3 01       	movw	r30, r6
   16886:	60 81       	ld	r22, Z
   16888:	71 81       	ldd	r23, Z+1	; 0x01
   1688a:	82 2b       	or	r24, r18
   1688c:	0e 94 0f a9 	call	0x1521e	; 0x1521e <mp_import_name>
   16890:	d8 01       	movw	r26, r16
   16892:	8d 93       	st	X+, r24
   16894:	9c 93       	st	X, r25

                ENTRY(MP_BC_IMPORT_NAME): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
                    mp_obj_t obj = POP();
   16896:	38 01       	movw	r6, r16
                    SET_TOP(mp_import_name(qst, obj, TOP()));
                    DISPATCH();
   16898:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_IMPORT_FROM): {
                    FRAME_UPDATE();
                    MARK_EXC_IP_SELECTIVE();
                    DECODE_QSTR;
   1689c:	f2 01       	movw	r30, r4
   1689e:	62 81       	ldd	r22, Z+2	; 0x02
   168a0:	70 e0       	ldi	r23, 0x00	; 0
   168a2:	76 2f       	mov	r23, r22
   168a4:	66 27       	eor	r22, r22
   168a6:	81 81       	ldd	r24, Z+1	; 0x01
   168a8:	68 2b       	or	r22, r24
   168aa:	f3 e0       	ldi	r31, 0x03	; 3
   168ac:	4f 0e       	add	r4, r31
   168ae:	51 1c       	adc	r5, r1
                    mp_obj_t obj = mp_import_from(TOP(), qst);
   168b0:	d3 01       	movw	r26, r6
   168b2:	8d 91       	ld	r24, X+
   168b4:	9d 91       	ld	r25, X+
   168b6:	8d 01       	movw	r16, r26
   168b8:	0e 94 3b a9 	call	0x15276	; 0x15276 <mp_import_from>
                    PUSH(obj);
   168bc:	f3 01       	movw	r30, r6
   168be:	93 83       	std	Z+3, r25	; 0x03
   168c0:	82 83       	std	Z+2, r24	; 0x02
   168c2:	38 01       	movw	r6, r16
                    DISPATCH();
   168c4:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                }

                ENTRY(MP_BC_IMPORT_STAR):
                    MARK_EXC_IP_SELECTIVE();
                    mp_import_all(POP());
   168c8:	83 01       	movw	r16, r6
   168ca:	02 50       	subi	r16, 0x02	; 2
   168cc:	11 09       	sbc	r17, r1
   168ce:	d3 01       	movw	r26, r6
   168d0:	8d 91       	ld	r24, X+
   168d2:	9c 91       	ld	r25, X
   168d4:	0e 94 f7 81 	call	0x103ee	; 0x103ee <mp_import_all>
   168d8:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   168da:	21 01       	movw	r4, r2
   168dc:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>

                ENTRY_DEFAULT:
                    MARK_EXC_IP_SELECTIVE();
#else
                ENTRY_DEFAULT:
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM) {
   168e0:	80 3b       	cpi	r24, 0xB0	; 176
   168e2:	80 f4       	brcc	.+32     	; 0x16904 <mp_execute_bytecode+0x1550>
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS));
   168e4:	90 e0       	ldi	r25, 0x00	; 0
   168e6:	80 58       	subi	r24, 0x80	; 128
   168e8:	91 09       	sbc	r25, r1
   168ea:	88 0f       	add	r24, r24
   168ec:	99 1f       	adc	r25, r25
   168ee:	81 60       	ori	r24, 0x01	; 1
   168f0:	f3 01       	movw	r30, r6
   168f2:	93 83       	std	Z+3, r25	; 0x03
   168f4:	82 83       	std	Z+2, r24	; 0x02
   168f6:	93 01       	movw	r18, r6
   168f8:	2e 5f       	subi	r18, 0xFE	; 254
   168fa:	3f 4f       	sbci	r19, 0xFF	; 255
   168fc:	39 01       	movw	r6, r18
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   168fe:	21 01       	movw	r4, r2
                    MARK_EXC_IP_SELECTIVE();
#else
                ENTRY_DEFAULT:
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM) {
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS));
                        DISPATCH();
   16900:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + MP_BC_LOAD_FAST_MULTI_NUM) {
   16904:	80 3c       	cpi	r24, 0xC0	; 192
   16906:	78 f4       	brcc	.+30     	; 0x16926 <mp_execute_bytecode+0x1572>
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
   16908:	e0 eb       	ldi	r30, 0xB0	; 176
   1690a:	f0 e0       	ldi	r31, 0x00	; 0
   1690c:	e8 1b       	sub	r30, r24
   1690e:	f1 09       	sbc	r31, r1
   16910:	ee 0f       	add	r30, r30
   16912:	ff 1f       	adc	r31, r31
   16914:	48 a5       	ldd	r20, Y+40	; 0x28
   16916:	59 a5       	ldd	r21, Y+41	; 0x29
   16918:	e4 0f       	add	r30, r20
   1691a:	f5 1f       	adc	r31, r21
   1691c:	80 81       	ld	r24, Z
   1691e:	91 81       	ldd	r25, Z+1	; 0x01
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16920:	21 01       	movw	r4, r2
                    if (ip[-1] < MP_BC_LOAD_CONST_SMALL_INT_MULTI + MP_BC_LOAD_CONST_SMALL_INT_MULTI_NUM) {
                        PUSH(MP_OBJ_NEW_SMALL_INT((mp_int_t)ip[-1] - MP_BC_LOAD_CONST_SMALL_INT_MULTI - MP_BC_LOAD_CONST_SMALL_INT_MULTI_EXCESS));
                        DISPATCH();
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + MP_BC_LOAD_FAST_MULTI_NUM) {
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
                        goto load_check;
   16922:	0c 94 06 ac 	jmp	0x1580c	; 0x1580c <mp_execute_bytecode+0x458>
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + MP_BC_STORE_FAST_MULTI_NUM) {
   16926:	80 3d       	cpi	r24, 0xD0	; 208
   16928:	a8 f4       	brcc	.+42     	; 0x16954 <mp_execute_bytecode+0x15a0>
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
   1692a:	d3 01       	movw	r26, r6
   1692c:	2d 91       	ld	r18, X+
   1692e:	3c 91       	ld	r19, X
   16930:	e0 ec       	ldi	r30, 0xC0	; 192
   16932:	f0 e0       	ldi	r31, 0x00	; 0
   16934:	e8 1b       	sub	r30, r24
   16936:	f1 09       	sbc	r31, r1
   16938:	ee 0f       	add	r30, r30
   1693a:	ff 1f       	adc	r31, r31
   1693c:	48 a5       	ldd	r20, Y+40	; 0x28
   1693e:	59 a5       	ldd	r21, Y+41	; 0x29
   16940:	e4 0f       	add	r30, r20
   16942:	f5 1f       	adc	r31, r21
   16944:	31 83       	std	Z+1, r19	; 0x01
   16946:	20 83       	st	Z, r18
   16948:	c3 01       	movw	r24, r6
   1694a:	02 97       	sbiw	r24, 0x02	; 2
   1694c:	3c 01       	movw	r6, r24
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1694e:	21 01       	movw	r4, r2
                    } else if (ip[-1] < MP_BC_LOAD_FAST_MULTI + MP_BC_LOAD_FAST_MULTI_NUM) {
                        obj_shared = fastn[MP_BC_LOAD_FAST_MULTI - (mp_int_t)ip[-1]];
                        goto load_check;
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + MP_BC_STORE_FAST_MULTI_NUM) {
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
                        DISPATCH();
   16950:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_BC_UNARY_OP_MULTI_NUM) {
   16954:	84 3d       	cpi	r24, 0xD4	; 212
   16956:	60 f4       	brcc	.+24     	; 0x16970 <mp_execute_bytecode+0x15bc>
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
   16958:	d3 01       	movw	r26, r6
   1695a:	6d 91       	ld	r22, X+
   1695c:	7c 91       	ld	r23, X
   1695e:	80 5d       	subi	r24, 0xD0	; 208
   16960:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <mp_unary_op>
   16964:	f3 01       	movw	r30, r6
   16966:	91 83       	std	Z+1, r25	; 0x01
   16968:	80 83       	st	Z, r24
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   1696a:	21 01       	movw	r4, r2
                    } else if (ip[-1] < MP_BC_STORE_FAST_MULTI + MP_BC_STORE_FAST_MULTI_NUM) {
                        fastn[MP_BC_STORE_FAST_MULTI - (mp_int_t)ip[-1]] = POP();
                        DISPATCH();
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_BC_UNARY_OP_MULTI_NUM) {
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
                        DISPATCH();
   1696c:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BC_BINARY_OP_MULTI_NUM) {
   16970:	8a 3f       	cpi	r24, 0xFA	; 250
   16972:	88 f4       	brcc	.+34     	; 0x16996 <mp_execute_bytecode+0x15e2>
                        mp_obj_t rhs = POP();
                        mp_obj_t lhs = TOP();
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
   16974:	d3 01       	movw	r26, r6
   16976:	4d 91       	ld	r20, X+
   16978:	5c 91       	ld	r21, X
   1697a:	f3 01       	movw	r30, r6
   1697c:	72 91       	ld	r23, -Z
   1697e:	62 91       	ld	r22, -Z
   16980:	8f 01       	movw	r16, r30
   16982:	87 5d       	subi	r24, 0xD7	; 215
   16984:	0e 94 c1 8a 	call	0x11582	; 0x11582 <mp_binary_op>
   16988:	d8 01       	movw	r26, r16
   1698a:	8d 93       	st	X+, r24
   1698c:	9c 93       	st	X, r25
                        DISPATCH();
                    } else if (ip[-1] < MP_BC_UNARY_OP_MULTI + MP_BC_UNARY_OP_MULTI_NUM) {
                        SET_TOP(mp_unary_op(ip[-1] - MP_BC_UNARY_OP_MULTI, TOP()));
                        DISPATCH();
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BC_BINARY_OP_MULTI_NUM) {
                        mp_obj_t rhs = POP();
   1698e:	38 01       	movw	r6, r16
                DISPATCH();
#else
                TRACE(ip);
                MARK_EXC_IP_GLOBAL();
                TRACE_TICK(ip, sp, false);
                switch (*ip++) {
   16990:	21 01       	movw	r4, r2
                        DISPATCH();
                    } else if (ip[-1] < MP_BC_BINARY_OP_MULTI + MP_BC_BINARY_OP_MULTI_NUM) {
                        mp_obj_t rhs = POP();
                        mp_obj_t lhs = TOP();
                        SET_TOP(mp_binary_op(ip[-1] - MP_BC_BINARY_OP_MULTI, lhs, rhs));
                        DISPATCH();
   16992:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                    } else
#endif
                {

                    mp_obj_t obj = mp_obj_new_exception_msg(&mp_type_NotImplementedError, MP_ERROR_TEXT("opcode"));
   16996:	6a ed       	ldi	r22, 0xDA	; 218
   16998:	7d e0       	ldi	r23, 0x0D	; 13
   1699a:	88 ed       	ldi	r24, 0xD8	; 216
   1699c:	9f e1       	ldi	r25, 0x1F	; 31
   1699e:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   169a2:	8c 01       	movw	r16, r24
                    nlr_pop();
   169a4:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
                    code_state->state[0] = obj;
   169a8:	ea a1       	ldd	r30, Y+34	; 0x22
   169aa:	fb a1       	ldd	r31, Y+35	; 0x23
   169ac:	15 87       	std	Z+13, r17	; 0x0d
   169ae:	04 87       	std	Z+12, r16	; 0x0c
                    FRAME_LEAVE();
                    return MP_VM_RETURN_EXCEPTION;
   169b0:	82 e0       	ldi	r24, 0x02	; 2
   169b2:	8f c1       	rjmp	.+798    	; 0x16cd2 <mp_execute_bytecode+0x191e>
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_POP_JUMP_IF_TRUE): {
                    DECODE_SLABEL;
                    if (mp_obj_is_true(POP())) {
   169b4:	37 01       	movw	r6, r14
   169b6:	01 c0       	rjmp	.+2      	; 0x169ba <mp_execute_bytecode+0x1606>
                    DISPATCH_WITH_PEND_EXC_CHECK();
                }

                ENTRY(MP_BC_POP_JUMP_IF_FALSE): {
                    DECODE_SLABEL;
                    if (!mp_obj_is_true(POP())) {
   169b8:	37 01       	movw	r6, r14
                        MICROPY_END_ATOMIC_SECTION(atomic_state);
                    }
                }
                #else
                // This is an inlined variant of mp_handle_pending
                if (MP_STATE_THREAD(mp_pending_exception) != MP_OBJ_NULL) {
   169ba:	80 91 64 6b 	lds	r24, 0x6B64	; 0x806b64 <mp_state_ctx+0xa>
   169be:	90 91 65 6b 	lds	r25, 0x6B65	; 0x806b65 <mp_state_ctx+0xb>
   169c2:	89 2b       	or	r24, r25
   169c4:	11 f4       	brne	.+4      	; 0x169ca <mp_execute_bytecode+0x1616>
   169c6:	0c 94 5d aa 	jmp	0x154ba	; 0x154ba <mp_execute_bytecode+0x106>
                    MARK_EXC_IP_SELECTIVE();
                    mp_obj_t obj = MP_STATE_THREAD(mp_pending_exception);
   169ca:	00 91 64 6b 	lds	r16, 0x6B64	; 0x806b64 <mp_state_ctx+0xa>
   169ce:	10 91 65 6b 	lds	r17, 0x6B65	; 0x806b65 <mp_state_ctx+0xb>
                    MP_STATE_THREAD(mp_pending_exception) = MP_OBJ_NULL;
   169d2:	10 92 65 6b 	sts	0x6B65, r1	; 0x806b65 <mp_state_ctx+0xb>
   169d6:	10 92 64 6b 	sts	0x6B64, r1	; 0x806b64 <mp_state_ctx+0xa>
                    RAISE(obj);
   169da:	0e 94 9b 06 	call	0xd36	; 0xd36 <nlr_pop>
   169de:	1e 83       	std	Y+6, r17	; 0x06
   169e0:	0d 83       	std	Y+5, r16	; 0x05
            #if SELECTIVE_EXC_IP
            // with selective ip, we store the ip 1 byte past the opcode, so move ptr back
            code_state->ip -= 1;
            #endif

            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(((mp_obj_base_t*)nlr.ret_val)->type), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   169e2:	0d 81       	ldd	r16, Y+5	; 0x05
   169e4:	1e 81       	ldd	r17, Y+6	; 0x06
   169e6:	68 eb       	ldi	r22, 0xB8	; 184
   169e8:	71 e2       	ldi	r23, 0x21	; 33
   169ea:	d8 01       	movw	r26, r16
   169ec:	8d 91       	ld	r24, X+
   169ee:	9c 91       	ld	r25, X
   169f0:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   169f4:	88 23       	and	r24, r24
   169f6:	d9 f1       	breq	.+118    	; 0x16a6e <mp_execute_bytecode+0x16ba>
                if (code_state->ip) {
   169f8:	aa a1       	ldd	r26, Y+34	; 0x22
   169fa:	bb a1       	ldd	r27, Y+35	; 0x23
   169fc:	12 96       	adiw	r26, 0x02	; 2
   169fe:	ed 91       	ld	r30, X+
   16a00:	fc 91       	ld	r31, X
   16a02:	13 97       	sbiw	r26, 0x03	; 3
   16a04:	30 97       	sbiw	r30, 0x00	; 0
   16a06:	99 f1       	breq	.+102    	; 0x16a6e <mp_execute_bytecode+0x16ba>
                    // check if it's a StopIteration within a for block
                    if (*code_state->ip == MP_BC_FOR_ITER) {
   16a08:	80 81       	ld	r24, Z
   16a0a:	8b 34       	cpi	r24, 0x4B	; 75
   16a0c:	d9 f4       	brne	.+54     	; 0x16a44 <mp_execute_bytecode+0x1690>
                        const byte *ip = code_state->ip + 1;
                        DECODE_ULABEL; // the jump offset if iteration finishes; for labels are always forward
   16a0e:	9f 01       	movw	r18, r30
   16a10:	2d 5f       	subi	r18, 0xFD	; 253
   16a12:	3f 4f       	sbci	r19, 0xFF	; 255
                        code_state->ip = ip + ulab; // jump to after for-block
   16a14:	92 81       	ldd	r25, Z+2	; 0x02
   16a16:	89 2f       	mov	r24, r25
   16a18:	90 e0       	ldi	r25, 0x00	; 0
   16a1a:	98 2f       	mov	r25, r24
   16a1c:	88 27       	eor	r24, r24
   16a1e:	41 81       	ldd	r20, Z+1	; 0x01
   16a20:	84 2b       	or	r24, r20
   16a22:	82 0f       	add	r24, r18
   16a24:	93 1f       	adc	r25, r19
   16a26:	13 96       	adiw	r26, 0x03	; 3
   16a28:	9c 93       	st	X, r25
   16a2a:	8e 93       	st	-X, r24
   16a2c:	12 97       	sbiw	r26, 0x02	; 2
                        code_state->sp -= MP_OBJ_ITER_BUF_NSLOTS; // pop the exhausted iterator
   16a2e:	14 96       	adiw	r26, 0x04	; 4
   16a30:	8d 91       	ld	r24, X+
   16a32:	9c 91       	ld	r25, X
   16a34:	15 97       	sbiw	r26, 0x05	; 5
   16a36:	08 97       	sbiw	r24, 0x08	; 8
   16a38:	15 96       	adiw	r26, 0x05	; 5
   16a3a:	9c 93       	st	X, r25
   16a3c:	8e 93       	st	-X, r24
   16a3e:	14 97       	sbiw	r26, 0x04	; 4
                        goto outer_dispatch_loop; // continue with dispatch loop
   16a40:	0c 94 23 aa 	jmp	0x15446	; 0x15446 <mp_execute_bytecode+0x92>
                    } else if (*code_state->ip == MP_BC_YIELD_FROM) {
   16a44:	88 36       	cpi	r24, 0x68	; 104
   16a46:	99 f4       	brne	.+38     	; 0x16a6e <mp_execute_bytecode+0x16ba>
                        // StopIteration inside yield from call means return a value of
                        // yield from, so inject exception's value as yield from's result
                        // (Instead of stack pop then push we just replace exhausted gen with value)
                        *code_state->sp = mp_obj_exception_get_value(MP_OBJ_FROM_PTR(nlr.ret_val));
   16a48:	ea a1       	ldd	r30, Y+34	; 0x22
   16a4a:	fb a1       	ldd	r31, Y+35	; 0x23
   16a4c:	e4 80       	ldd	r14, Z+4	; 0x04
   16a4e:	f5 80       	ldd	r15, Z+5	; 0x05
   16a50:	c8 01       	movw	r24, r16
   16a52:	0e 94 88 21 	call	0x4310	; 0x4310 <mp_obj_exception_get_value>
   16a56:	d7 01       	movw	r26, r14
   16a58:	8d 93       	st	X+, r24
   16a5a:	9c 93       	st	X, r25
                        code_state->ip++; // yield from is over, move to next instruction
   16a5c:	ea a1       	ldd	r30, Y+34	; 0x22
   16a5e:	fb a1       	ldd	r31, Y+35	; 0x23
   16a60:	82 81       	ldd	r24, Z+2	; 0x02
   16a62:	93 81       	ldd	r25, Z+3	; 0x03
   16a64:	01 96       	adiw	r24, 0x01	; 1
   16a66:	93 83       	std	Z+3, r25	; 0x03
   16a68:	82 83       	std	Z+2, r24	; 0x02
                        goto outer_dispatch_loop; // continue with dispatch loop
   16a6a:	0c 94 23 aa 	jmp	0x15446	; 0x15446 <mp_execute_bytecode+0x92>
#endif
            // Set traceback info (file and line number) where the exception occurred, but not for:
            // - constant GeneratorExit object, because it's const
            // - exceptions re-raised by END_FINALLY
            // - exceptions re-raised explicitly by "raise"
            if (nlr.ret_val != &mp_const_GeneratorExit_obj
   16a6e:	fe e1       	ldi	r31, 0x1E	; 30
   16a70:	00 39       	cpi	r16, 0x90	; 144
   16a72:	1f 07       	cpc	r17, r31
   16a74:	61 f0       	breq	.+24     	; 0x16a8e <mp_execute_bytecode+0x16da>
                && *code_state->ip != MP_BC_END_FINALLY
   16a76:	aa a1       	ldd	r26, Y+34	; 0x22
   16a78:	bb a1       	ldd	r27, Y+35	; 0x23
   16a7a:	12 96       	adiw	r26, 0x02	; 2
   16a7c:	cd 90       	ld	r12, X+
   16a7e:	dc 90       	ld	r13, X
   16a80:	13 97       	sbiw	r26, 0x03	; 3
   16a82:	f6 01       	movw	r30, r12
   16a84:	80 81       	ld	r24, Z
   16a86:	8d 35       	cpi	r24, 0x5D	; 93
   16a88:	11 f0       	breq	.+4      	; 0x16a8e <mp_execute_bytecode+0x16da>
                && *code_state->ip != MP_BC_RAISE_LAST) {
   16a8a:	84 36       	cpi	r24, 0x64	; 100
   16a8c:	f9 f4       	brne	.+62     	; 0x16acc <mp_execute_bytecode+0x1718>
                #endif
                size_t source_line = mp_bytecode_get_source_line(ip, bc);
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
            }

            while (exc_sp >= exc_stack && exc_sp->handler <= code_state->ip) {
   16a8e:	89 81       	ldd	r24, Y+1	; 0x01
   16a90:	9a 81       	ldd	r25, Y+2	; 0x02
   16a92:	2c a1       	ldd	r18, Y+36	; 0x24
   16a94:	3d a1       	ldd	r19, Y+37	; 0x25
   16a96:	82 17       	cp	r24, r18
   16a98:	93 07       	cpc	r25, r19
   16a9a:	08 f4       	brcc	.+2      	; 0x16a9e <mp_execute_bytecode+0x16ea>
   16a9c:	de c0       	rjmp	.+444    	; 0x16c5a <mp_execute_bytecode+0x18a6>
   16a9e:	e9 81       	ldd	r30, Y+1	; 0x01
   16aa0:	fa 81       	ldd	r31, Y+2	; 0x02
   16aa2:	aa a1       	ldd	r26, Y+34	; 0x22
   16aa4:	bb a1       	ldd	r27, Y+35	; 0x23
   16aa6:	12 96       	adiw	r26, 0x02	; 2
   16aa8:	2d 91       	ld	r18, X+
   16aaa:	3c 91       	ld	r19, X
   16aac:	13 97       	sbiw	r26, 0x03	; 3
   16aae:	80 81       	ld	r24, Z
   16ab0:	91 81       	ldd	r25, Z+1	; 0x01
   16ab2:	28 17       	cp	r18, r24
   16ab4:	39 07       	cpc	r19, r25
   16ab6:	08 f4       	brcc	.+2      	; 0x16aba <mp_execute_bytecode+0x1706>
   16ab8:	d0 c0       	rjmp	.+416    	; 0x16c5a <mp_execute_bytecode+0x18a6>

                // nested exception

                assert(exc_sp >= exc_stack);
   16aba:	89 81       	ldd	r24, Y+1	; 0x01
   16abc:	9a 81       	ldd	r25, Y+2	; 0x02
   16abe:	ec a1       	ldd	r30, Y+36	; 0x24
   16ac0:	fd a1       	ldd	r31, Y+37	; 0x25
   16ac2:	8e 17       	cp	r24, r30
   16ac4:	9f 07       	cpc	r25, r31
   16ac6:	08 f0       	brcs	.+2      	; 0x16aca <mp_execute_bytecode+0x1716>
   16ac8:	b5 c0       	rjmp	.+362    	; 0x16c34 <mp_execute_bytecode+0x1880>
   16aca:	b2 c0       	rjmp	.+356    	; 0x16c30 <mp_execute_bytecode+0x187c>
            // - exceptions re-raised by END_FINALLY
            // - exceptions re-raised explicitly by "raise"
            if (nlr.ret_val != &mp_const_GeneratorExit_obj
                && *code_state->ip != MP_BC_END_FINALLY
                && *code_state->ip != MP_BC_RAISE_LAST) {
                const byte *ip = code_state->fun_bc->bytecode;
   16acc:	ea a1       	ldd	r30, Y+34	; 0x22
   16ace:	fb a1       	ldd	r31, Y+35	; 0x23
   16ad0:	a0 81       	ld	r26, Z
   16ad2:	b1 81       	ldd	r27, Z+1	; 0x01
   16ad4:	14 96       	adiw	r26, 0x04	; 4
   16ad6:	0d 90       	ld	r0, X+
   16ad8:	bc 91       	ld	r27, X
   16ada:	a0 2d       	mov	r26, r0
                MP_BC_PRELUDE_SIG_DECODE(ip);
   16adc:	cd 01       	movw	r24, r26
   16ade:	01 96       	adiw	r24, 0x01	; 1
   16ae0:	2c 91       	ld	r18, X
   16ae2:	22 23       	and	r18, r18
   16ae4:	34 f4       	brge	.+12     	; 0x16af2 <mp_execute_bytecode+0x173e>
   16ae6:	01 96       	adiw	r24, 0x01	; 1
   16ae8:	fc 01       	movw	r30, r24
   16aea:	31 97       	sbiw	r30, 0x01	; 1
   16aec:	20 81       	ld	r18, Z
   16aee:	22 23       	and	r18, r18
   16af0:	d4 f3       	brlt	.-12     	; 0x16ae6 <mp_execute_bytecode+0x1732>
                MP_BC_PRELUDE_SIZE_DECODE(ip);
   16af2:	dc 01       	movw	r26, r24
   16af4:	11 96       	adiw	r26, 0x01	; 1
   16af6:	fc 01       	movw	r30, r24
   16af8:	20 81       	ld	r18, Z
   16afa:	f2 2f       	mov	r31, r18
   16afc:	f1 70       	andi	r31, 0x01	; 1
   16afe:	fe a3       	std	Y+38, r31	; 0x26
   16b00:	1f a2       	std	Y+39, r1	; 0x27
   16b02:	62 2f       	mov	r22, r18
   16b04:	6e 77       	andi	r22, 0x7E	; 126
   16b06:	70 e0       	ldi	r23, 0x00	; 0
   16b08:	75 95       	asr	r23
   16b0a:	67 95       	ror	r22
   16b0c:	22 23       	and	r18, r18
   16b0e:	9c f5       	brge	.+102    	; 0x16b76 <mp_execute_bytecode+0x17c2>
   16b10:	46 e0       	ldi	r20, 0x06	; 6
   16b12:	50 e0       	ldi	r21, 0x00	; 0
   16b14:	20 e0       	ldi	r18, 0x00	; 0
   16b16:	30 e0       	ldi	r19, 0x00	; 0
   16b18:	48 01       	movw	r8, r16
   16b1a:	ae a0       	ldd	r10, Y+38	; 0x26
   16b1c:	bf a0       	ldd	r11, Y+39	; 0x27
   16b1e:	01 c0       	rjmp	.+2      	; 0x16b22 <mp_execute_bytecode+0x176e>
   16b20:	d7 01       	movw	r26, r14
   16b22:	2f 5f       	subi	r18, 0xFF	; 255
   16b24:	3f 4f       	sbci	r19, 0xFF	; 255
   16b26:	7d 01       	movw	r14, r26
   16b28:	8f ef       	ldi	r24, 0xFF	; 255
   16b2a:	e8 1a       	sub	r14, r24
   16b2c:	f8 0a       	sbc	r15, r24
   16b2e:	1c 91       	ld	r17, X
   16b30:	e1 2f       	mov	r30, r17
   16b32:	e1 70       	andi	r30, 0x01	; 1
   16b34:	f0 e0       	ldi	r31, 0x00	; 0
   16b36:	cf 01       	movw	r24, r30
   16b38:	02 2e       	mov	r0, r18
   16b3a:	02 c0       	rjmp	.+4      	; 0x16b40 <mp_execute_bytecode+0x178c>
   16b3c:	88 0f       	add	r24, r24
   16b3e:	99 1f       	adc	r25, r25
   16b40:	0a 94       	dec	r0
   16b42:	e2 f7       	brpl	.-8      	; 0x16b3c <mp_execute_bytecode+0x1788>
   16b44:	a8 2a       	or	r10, r24
   16b46:	b9 2a       	or	r11, r25
   16b48:	81 2f       	mov	r24, r17
   16b4a:	8e 77       	andi	r24, 0x7E	; 126
   16b4c:	90 e0       	ldi	r25, 0x00	; 0
   16b4e:	95 95       	asr	r25
   16b50:	87 95       	ror	r24
   16b52:	04 2e       	mov	r0, r20
   16b54:	02 c0       	rjmp	.+4      	; 0x16b5a <mp_execute_bytecode+0x17a6>
   16b56:	88 0f       	add	r24, r24
   16b58:	99 1f       	adc	r25, r25
   16b5a:	0a 94       	dec	r0
   16b5c:	e2 f7       	brpl	.-8      	; 0x16b56 <mp_execute_bytecode+0x17a2>
   16b5e:	68 2b       	or	r22, r24
   16b60:	79 2b       	or	r23, r25
   16b62:	4a 5f       	subi	r20, 0xFA	; 250
   16b64:	5f 4f       	sbci	r21, 0xFF	; 255
   16b66:	11 23       	and	r17, r17
   16b68:	dc f2       	brlt	.-74     	; 0x16b20 <mp_execute_bytecode+0x176c>
   16b6a:	84 01       	movw	r16, r8
   16b6c:	bf a2       	std	Y+39, r11	; 0x27
   16b6e:	ae a2       	std	Y+38, r10	; 0x26
   16b70:	fb a7       	std	Y+43, r31	; 0x2b
   16b72:	ea a7       	std	Y+42, r30	; 0x2a
   16b74:	02 c0       	rjmp	.+4      	; 0x16b7a <mp_execute_bytecode+0x17c6>
   16b76:	7d 01       	movw	r14, r26
   16b78:	dc 01       	movw	r26, r24
                const byte *bytecode_start = ip + n_info + n_cell;
                #if !MICROPY_PERSISTENT_CODE
                // so bytecode is aligned
                bytecode_start = MP_ALIGN(bytecode_start, sizeof(mp_uint_t));
                #endif
                size_t bc = code_state->ip - bytecode_start;
   16b7a:	ee a1       	ldd	r30, Y+38	; 0x26
   16b7c:	ff a1       	ldd	r31, Y+39	; 0x27
   16b7e:	6e 0f       	add	r22, r30
   16b80:	7f 1f       	adc	r23, r31
   16b82:	e6 0e       	add	r14, r22
   16b84:	f7 1e       	adc	r15, r23
   16b86:	96 01       	movw	r18, r12
   16b88:	2e 19       	sub	r18, r14
   16b8a:	3f 09       	sbc	r19, r15
   16b8c:	79 01       	movw	r14, r18
                #if MICROPY_PERSISTENT_CODE
                qstr block_name = ip[0] | (ip[1] << 8);
   16b8e:	12 96       	adiw	r26, 0x02	; 2
   16b90:	2c 91       	ld	r18, X
   16b92:	12 97       	sbiw	r26, 0x02	; 2
   16b94:	30 e0       	ldi	r19, 0x00	; 0
   16b96:	32 2f       	mov	r19, r18
   16b98:	22 27       	eor	r18, r18
   16b9a:	11 96       	adiw	r26, 0x01	; 1
   16b9c:	8c 91       	ld	r24, X
   16b9e:	11 97       	sbiw	r26, 0x01	; 1
   16ba0:	28 2b       	or	r18, r24
                qstr source_file = ip[2] | (ip[3] << 8);
   16ba2:	14 96       	adiw	r26, 0x04	; 4
   16ba4:	6c 91       	ld	r22, X
   16ba6:	14 97       	sbiw	r26, 0x04	; 4
   16ba8:	70 e0       	ldi	r23, 0x00	; 0
   16baa:	76 2f       	mov	r23, r22
   16bac:	66 27       	eor	r22, r22
   16bae:	13 96       	adiw	r26, 0x03	; 3
   16bb0:	8c 91       	ld	r24, X
   16bb2:	13 97       	sbiw	r26, 0x03	; 3
   16bb4:	68 2b       	or	r22, r24
                ip += 4;
   16bb6:	fd 01       	movw	r30, r26
   16bb8:	35 96       	adiw	r30, 0x05	; 5
#endif

static inline size_t mp_bytecode_get_source_line(const byte *line_info, size_t bc_offset) {
    size_t source_line = 1;
    size_t c;
    while ((c = *line_info)) {
   16bba:	15 96       	adiw	r26, 0x05	; 5
   16bbc:	8c 91       	ld	r24, X
   16bbe:	a8 2f       	mov	r26, r24
   16bc0:	b0 e0       	ldi	r27, 0x00	; 0
   16bc2:	10 97       	sbiw	r26, 0x00	; 0
   16bc4:	51 f1       	breq	.+84     	; 0x16c1a <mp_execute_bytecode+0x1866>
   16bc6:	41 e0       	ldi	r20, 0x01	; 1
   16bc8:	50 e0       	ldi	r21, 0x00	; 0
        size_t b, l;
        if ((c & 0x80) == 0) {
   16bca:	88 23       	and	r24, r24
   16bcc:	64 f0       	brlt	.+24     	; 0x16be6 <mp_execute_bytecode+0x1832>
            // 0b0LLBBBBB encoding
            b = c & 0x1f;
   16bce:	8f 71       	andi	r24, 0x1F	; 31
   16bd0:	90 e0       	ldi	r25, 0x00	; 0
            l = c >> 5;
   16bd2:	b6 95       	lsr	r27
   16bd4:	a7 95       	ror	r26
   16bd6:	b2 95       	swap	r27
   16bd8:	a2 95       	swap	r26
   16bda:	af 70       	andi	r26, 0x0F	; 15
   16bdc:	ab 27       	eor	r26, r27
   16bde:	bf 70       	andi	r27, 0x0F	; 15
   16be0:	ab 27       	eor	r26, r27
            line_info += 1;
   16be2:	31 96       	adiw	r30, 0x01	; 1
   16be4:	0d c0       	rjmp	.+26     	; 0x16c00 <mp_execute_bytecode+0x184c>
        } else {
            // 0b1LLLBBBB 0bLLLLLLLL encoding (l's LSB in second byte)
            b = c & 0xf;
   16be6:	8f 70       	andi	r24, 0x0F	; 15
   16be8:	90 e0       	ldi	r25, 0x00	; 0
            l = ((c << 4) & 0x700) | line_info[1];
   16bea:	a2 95       	swap	r26
   16bec:	b2 95       	swap	r27
   16bee:	b0 7f       	andi	r27, 0xF0	; 240
   16bf0:	ba 27       	eor	r27, r26
   16bf2:	a0 7f       	andi	r26, 0xF0	; 240
   16bf4:	ba 27       	eor	r27, r26
   16bf6:	aa 27       	eor	r26, r26
   16bf8:	b7 70       	andi	r27, 0x07	; 7
   16bfa:	d1 80       	ldd	r13, Z+1	; 0x01
   16bfc:	ad 29       	or	r26, r13
            line_info += 2;
   16bfe:	32 96       	adiw	r30, 0x02	; 2
        }
        if (bc_offset >= b) {
   16c00:	e8 16       	cp	r14, r24
   16c02:	f9 06       	cpc	r15, r25
   16c04:	60 f0       	brcs	.+24     	; 0x16c1e <mp_execute_bytecode+0x186a>
            bc_offset -= b;
   16c06:	e8 1a       	sub	r14, r24
   16c08:	f9 0a       	sbc	r15, r25
            source_line += l;
   16c0a:	4a 0f       	add	r20, r26
   16c0c:	5b 1f       	adc	r21, r27
#endif

static inline size_t mp_bytecode_get_source_line(const byte *line_info, size_t bc_offset) {
    size_t source_line = 1;
    size_t c;
    while ((c = *line_info)) {
   16c0e:	80 81       	ld	r24, Z
   16c10:	a8 2f       	mov	r26, r24
   16c12:	b0 e0       	ldi	r27, 0x00	; 0
   16c14:	10 97       	sbiw	r26, 0x00	; 0
   16c16:	c9 f6       	brne	.-78     	; 0x16bca <mp_execute_bytecode+0x1816>
   16c18:	02 c0       	rjmp	.+4      	; 0x16c1e <mp_execute_bytecode+0x186a>
uint mp_opcode_format(const byte *ip, size_t *opcode_size, bool count_var_uint);

#endif

static inline size_t mp_bytecode_get_source_line(const byte *line_info, size_t bc_offset) {
    size_t source_line = 1;
   16c1a:	41 e0       	ldi	r20, 0x01	; 1
   16c1c:	50 e0       	ldi	r21, 0x00	; 0
                ip = mp_decode_uint_skip(ip);
                qstr source_file = mp_decode_uint_value(ip);
                ip = mp_decode_uint_skip(ip);
                #endif
                size_t source_line = mp_bytecode_get_source_line(ip, bc);
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
   16c1e:	c8 01       	movw	r24, r16
   16c20:	0e 94 c4 21 	call	0x4388	; 0x4388 <mp_obj_exception_add_traceback>
   16c24:	34 cf       	rjmp	.-408    	; 0x16a8e <mp_execute_bytecode+0x16da>

            while (exc_sp >= exc_stack && exc_sp->handler <= code_state->ip) {

                // nested exception

                assert(exc_sp >= exc_stack);
   16c26:	89 81       	ldd	r24, Y+1	; 0x01
   16c28:	9a 81       	ldd	r25, Y+2	; 0x02
   16c2a:	84 17       	cp	r24, r20
   16c2c:	95 07       	cpc	r25, r21
   16c2e:	20 f4       	brcc	.+8      	; 0x16c38 <mp_execute_bytecode+0x1884>
   16c30:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
   16c34:	4c a1       	ldd	r20, Y+36	; 0x24
   16c36:	5d a1       	ldd	r21, Y+37	; 0x25

                // TODO make a proper message for nested exception
                // at the moment we are just raising the very last exception (the one that caused the nested exception)

                // move up to previous exception handler
                POP_EXC_BLOCK();
   16c38:	89 81       	ldd	r24, Y+1	; 0x01
   16c3a:	9a 81       	ldd	r25, Y+2	; 0x02
   16c3c:	06 97       	sbiw	r24, 0x06	; 6
   16c3e:	9a 83       	std	Y+2, r25	; 0x02
   16c40:	89 83       	std	Y+1, r24	; 0x01
                #endif
                size_t source_line = mp_bytecode_get_source_line(ip, bc);
                mp_obj_exception_add_traceback(MP_OBJ_FROM_PTR(nlr.ret_val), source_file, source_line, block_name);
            }

            while (exc_sp >= exc_stack && exc_sp->handler <= code_state->ip) {
   16c42:	89 81       	ldd	r24, Y+1	; 0x01
   16c44:	9a 81       	ldd	r25, Y+2	; 0x02
   16c46:	84 17       	cp	r24, r20
   16c48:	95 07       	cpc	r25, r21
   16c4a:	38 f0       	brcs	.+14     	; 0x16c5a <mp_execute_bytecode+0x18a6>
   16c4c:	e9 81       	ldd	r30, Y+1	; 0x01
   16c4e:	fa 81       	ldd	r31, Y+2	; 0x02
   16c50:	80 81       	ld	r24, Z
   16c52:	91 81       	ldd	r25, Z+1	; 0x01
   16c54:	28 17       	cp	r18, r24
   16c56:	39 07       	cpc	r19, r25
   16c58:	30 f7       	brcc	.-52     	; 0x16c26 <mp_execute_bytecode+0x1872>

                // move up to previous exception handler
                POP_EXC_BLOCK();
            }

            if (exc_sp >= exc_stack) {
   16c5a:	89 81       	ldd	r24, Y+1	; 0x01
   16c5c:	9a 81       	ldd	r25, Y+2	; 0x02
   16c5e:	4c a1       	ldd	r20, Y+36	; 0x24
   16c60:	5d a1       	ldd	r21, Y+37	; 0x25
   16c62:	84 17       	cp	r24, r20
   16c64:	95 07       	cpc	r25, r21
   16c66:	18 f1       	brcs	.+70     	; 0x16cae <mp_execute_bytecode+0x18fa>
                // catch exception and pass to byte code
                code_state->ip = exc_sp->handler;
   16c68:	e9 81       	ldd	r30, Y+1	; 0x01
   16c6a:	fa 81       	ldd	r31, Y+2	; 0x02
   16c6c:	80 81       	ld	r24, Z
   16c6e:	91 81       	ldd	r25, Z+1	; 0x01
   16c70:	aa a1       	ldd	r26, Y+34	; 0x22
   16c72:	bb a1       	ldd	r27, Y+35	; 0x23
   16c74:	13 96       	adiw	r26, 0x03	; 3
   16c76:	9c 93       	st	X, r25
   16c78:	8e 93       	st	-X, r24
   16c7a:	12 97       	sbiw	r26, 0x02	; 2
                mp_obj_t *sp = MP_TAGPTR_PTR(exc_sp->val_sp);
   16c7c:	e9 81       	ldd	r30, Y+1	; 0x01
   16c7e:	fa 81       	ldd	r31, Y+2	; 0x02
   16c80:	02 80       	ldd	r0, Z+2	; 0x02
   16c82:	f3 81       	ldd	r31, Z+3	; 0x03
   16c84:	e0 2d       	mov	r30, r0
   16c86:	ec 7f       	andi	r30, 0xFC	; 252
                // save this exception in the stack so it can be used in a reraise, if needed
                exc_sp->prev_exc = nlr.ret_val;
   16c88:	a9 81       	ldd	r26, Y+1	; 0x01
   16c8a:	ba 81       	ldd	r27, Y+2	; 0x02
   16c8c:	8d 81       	ldd	r24, Y+5	; 0x05
   16c8e:	9e 81       	ldd	r25, Y+6	; 0x06
   16c90:	15 96       	adiw	r26, 0x05	; 5
   16c92:	9c 93       	st	X, r25
   16c94:	8e 93       	st	-X, r24
   16c96:	14 97       	sbiw	r26, 0x04	; 4
                // push exception object so it can be handled by bytecode
                PUSH(MP_OBJ_FROM_PTR(nlr.ret_val));
   16c98:	93 83       	std	Z+3, r25	; 0x03
   16c9a:	82 83       	std	Z+2, r24	; 0x02
                code_state->sp = sp;
   16c9c:	32 96       	adiw	r30, 0x02	; 2
   16c9e:	aa a1       	ldd	r26, Y+34	; 0x22
   16ca0:	bb a1       	ldd	r27, Y+35	; 0x23
   16ca2:	15 96       	adiw	r26, 0x05	; 5
   16ca4:	fc 93       	st	X, r31
   16ca6:	ee 93       	st	-X, r30
   16ca8:	14 97       	sbiw	r26, 0x04	; 4
   16caa:	0c 94 23 aa 	jmp	0x15446	; 0x15446 <mp_execute_bytecode+0x92>

            #endif
            } else {
                // propagate exception to higher level
                // Note: ip and sp don't have usable values at this point
                code_state->state[0] = MP_OBJ_FROM_PTR(nlr.ret_val); // put exception here because sp is invalid
   16cae:	8d 81       	ldd	r24, Y+5	; 0x05
   16cb0:	9e 81       	ldd	r25, Y+6	; 0x06
   16cb2:	ea a1       	ldd	r30, Y+34	; 0x22
   16cb4:	fb a1       	ldd	r31, Y+35	; 0x23
   16cb6:	95 87       	std	Z+13, r25	; 0x0d
   16cb8:	84 87       	std	Z+12, r24	; 0x0c
                FRAME_LEAVE();
                return MP_VM_RETURN_EXCEPTION;
   16cba:	82 e0       	ldi	r24, 0x02	; 2
   16cbc:	0a c0       	rjmp	.+20     	; 0x16cd2 <mp_execute_bytecode+0x191e>
                        *code_state->sp = res;
                        goto run_code_state_from_return;
                    }
                    #endif
                    FRAME_LEAVE();
                    return MP_VM_RETURN_NORMAL;
   16cbe:	80 e0       	ldi	r24, 0x00	; 0
   16cc0:	08 c0       	rjmp	.+16     	; 0x16cd2 <mp_execute_bytecode+0x191e>
                            obj = MP_OBJ_FROM_PTR(e->prev_exc);
                            break;
                        }
                    }
                    if (obj == MP_OBJ_NULL) {
                        obj = mp_obj_new_exception_msg(&mp_type_RuntimeError, MP_ERROR_TEXT("no active exception to reraise"));
   16cc2:	61 ee       	ldi	r22, 0xE1	; 225
   16cc4:	7d e0       	ldi	r23, 0x0D	; 13
   16cc6:	88 ef       	ldi	r24, 0xF8	; 248
   16cc8:	9f e1       	ldi	r25, 0x1F	; 31
   16cca:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   16cce:	8c 01       	movw	r16, r24
   16cd0:	2d cd       	rjmp	.-1446   	; 0x1672c <mp_execute_bytecode+0x1378>
                FRAME_LEAVE();
                return MP_VM_RETURN_EXCEPTION;
            }
        }
    }
}
   16cd2:	ad 96       	adiw	r28, 0x2d	; 45
   16cd4:	0f b6       	in	r0, 0x3f	; 63
   16cd6:	f8 94       	cli
   16cd8:	de bf       	out	0x3e, r29	; 62
   16cda:	0f be       	out	0x3f, r0	; 63
   16cdc:	cd bf       	out	0x3d, r28	; 61
   16cde:	df 91       	pop	r29
   16ce0:	cf 91       	pop	r28
   16ce2:	1f 91       	pop	r17
   16ce4:	0f 91       	pop	r16
   16ce6:	ff 90       	pop	r15
   16ce8:	ef 90       	pop	r14
   16cea:	df 90       	pop	r13
   16cec:	cf 90       	pop	r12
   16cee:	bf 90       	pop	r11
   16cf0:	af 90       	pop	r10
   16cf2:	9f 90       	pop	r9
   16cf4:	8f 90       	pop	r8
   16cf6:	7f 90       	pop	r7
   16cf8:	6f 90       	pop	r6
   16cfa:	5f 90       	pop	r5
   16cfc:	4f 90       	pop	r4
   16cfe:	3f 90       	pop	r3
   16d00:	2f 90       	pop	r2
   16d02:	08 95       	ret

00016d04 <mp_obj_gen_resume>:
    (void)kind;
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    mp_printf(print, "<generator object '%q' at %p>", mp_obj_fun_get_name(MP_OBJ_FROM_PTR(self->code_state.fun_bc)), self);
}

mp_vm_return_kind_t mp_obj_gen_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   16d04:	ef 92       	push	r14
   16d06:	ff 92       	push	r15
   16d08:	0f 93       	push	r16
   16d0a:	1f 93       	push	r17
   16d0c:	cf 93       	push	r28
   16d0e:	df 93       	push	r29
   16d10:	ec 01       	movw	r28, r24
   16d12:	79 01       	movw	r14, r18
    MP_STACK_CHECK();
    mp_check_self(mp_obj_is_type(self_in, &mp_type_gen_instance));
   16d14:	83 70       	andi	r24, 0x03	; 3
   16d16:	99 27       	eor	r25, r25
   16d18:	89 2b       	or	r24, r25
   16d1a:	29 f4       	brne	.+10     	; 0x16d26 <mp_obj_gen_resume+0x22>
   16d1c:	88 81       	ld	r24, Y
   16d1e:	99 81       	ldd	r25, Y+1	; 0x01
   16d20:	8c 52       	subi	r24, 0x2C	; 44
   16d22:	9e 41       	sbci	r25, 0x1E	; 30
   16d24:	11 f0       	breq	.+4      	; 0x16d2a <mp_obj_gen_resume+0x26>
   16d26:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    mp_obj_gen_instance_t *self = MP_OBJ_TO_PTR(self_in);
    if (self->code_state.ip == 0) {
   16d2a:	8e 81       	ldd	r24, Y+6	; 0x06
   16d2c:	9f 81       	ldd	r25, Y+7	; 0x07
   16d2e:	89 2b       	or	r24, r25
   16d30:	39 f4       	brne	.+14     	; 0x16d40 <mp_obj_gen_resume+0x3c>
        // Trying to resume an already stopped generator.
        // This is an optimised "raise StopIteration(None)".
        *ret_val = mp_const_none;
   16d32:	86 e0       	ldi	r24, 0x06	; 6
   16d34:	90 e0       	ldi	r25, 0x00	; 0
   16d36:	f7 01       	movw	r30, r14
   16d38:	91 83       	std	Z+1, r25	; 0x01
   16d3a:	80 83       	st	Z, r24
        return MP_VM_RETURN_NORMAL;
   16d3c:	80 e0       	ldi	r24, 0x00	; 0
   16d3e:	68 c0       	rjmp	.+208    	; 0x16e10 <mp_obj_gen_resume+0x10c>
    }

    // Ensure the generator cannot be reentered during execution
    if (self->pend_exc == MP_OBJ_NULL) {
   16d40:	8a 81       	ldd	r24, Y+2	; 0x02
   16d42:	9b 81       	ldd	r25, Y+3	; 0x03
   16d44:	89 2b       	or	r24, r25
   16d46:	21 f4       	brne	.+8      	; 0x16d50 <mp_obj_gen_resume+0x4c>
        mp_raise_ValueError(MP_ERROR_TEXT("generator already executing"));
   16d48:	80 e0       	ldi	r24, 0x00	; 0
   16d4a:	9e e0       	ldi	r25, 0x0E	; 14
   16d4c:	0e 94 ef 24 	call	0x49de	; 0x49de <mp_raise_ValueError>
        throw_value = self->pend_exc;
    }
    #endif

    // If the generator is started, allow sending a value.
    if (self->code_state.sp == self->code_state.state - 1) {
   16d50:	e8 85       	ldd	r30, Y+8	; 0x08
   16d52:	f9 85       	ldd	r31, Y+9	; 0x09
   16d54:	ce 01       	movw	r24, r28
   16d56:	0e 96       	adiw	r24, 0x0e	; 14
   16d58:	e8 17       	cp	r30, r24
   16d5a:	f9 07       	cpc	r31, r25
   16d5c:	39 f4       	brne	.+14     	; 0x16d6c <mp_obj_gen_resume+0x68>
        if (send_value != mp_const_none) {
   16d5e:	66 30       	cpi	r22, 0x06	; 6
   16d60:	71 05       	cpc	r23, r1
   16d62:	31 f0       	breq	.+12     	; 0x16d70 <mp_obj_gen_resume+0x6c>
            mp_raise_TypeError(MP_ERROR_TEXT("can't send non-None value to a just-started generator"));
   16d64:	8c e1       	ldi	r24, 0x1C	; 28
   16d66:	9e e0       	ldi	r25, 0x0E	; 14
   16d68:	0e 94 f6 24 	call	0x49ec	; 0x49ec <mp_raise_TypeError>
        }
    } else {
        *self->code_state.sp = send_value;
   16d6c:	71 83       	std	Z+1, r23	; 0x01
   16d6e:	60 83       	st	Z, r22
    }

    // Mark as running
    self->pend_exc = MP_OBJ_NULL;
   16d70:	1b 82       	std	Y+3, r1	; 0x03
   16d72:	1a 82       	std	Y+2, r1	; 0x02
}
static inline mp_obj_dict_t *mp_globals_get(void) {
    return MP_STATE_THREAD(dict_globals);
   16d74:	0a e5       	ldi	r16, 0x5A	; 90
   16d76:	1b e6       	ldi	r17, 0x6B	; 107

    // Set up the correct globals context for the generator and execute it
    self->code_state.old_globals = mp_globals_get();
   16d78:	f8 01       	movw	r30, r16
   16d7a:	86 81       	ldd	r24, Z+6	; 0x06
   16d7c:	97 81       	ldd	r25, Z+7	; 0x07
   16d7e:	9f 87       	std	Y+15, r25	; 0x0f
   16d80:	8e 87       	std	Y+14, r24	; 0x0e
    mp_globals_set(self->code_state.fun_bc->globals);
   16d82:	ec 81       	ldd	r30, Y+4	; 0x04
   16d84:	fd 81       	ldd	r31, Y+5	; 0x05
   16d86:	82 81       	ldd	r24, Z+2	; 0x02
   16d88:	93 81       	ldd	r25, Z+3	; 0x03
}
static inline void mp_globals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_globals) = d;
   16d8a:	f8 01       	movw	r30, r16
   16d8c:	97 83       	std	Z+7, r25	; 0x07
   16d8e:	86 83       	std	Z+6, r24	; 0x06
        ret_kind = fun((void *)&self->code_state, throw_value);
    } else
    #endif
    {
        // A bytecode generator
        ret_kind = mp_execute_bytecode(&self->code_state, throw_value);
   16d90:	ba 01       	movw	r22, r20
   16d92:	ce 01       	movw	r24, r28
   16d94:	04 96       	adiw	r24, 0x04	; 4
   16d96:	0e 94 da a9 	call	0x153b4	; 0x153b4 <mp_execute_bytecode>
   16d9a:	2e 85       	ldd	r18, Y+14	; 0x0e
   16d9c:	3f 85       	ldd	r19, Y+15	; 0x0f
   16d9e:	f8 01       	movw	r30, r16
   16da0:	37 83       	std	Z+7, r19	; 0x07
   16da2:	26 83       	std	Z+6, r18	; 0x06
    }

    mp_globals_set(self->code_state.old_globals);

    // Mark as not running
    self->pend_exc = mp_const_none;
   16da4:	26 e0       	ldi	r18, 0x06	; 6
   16da6:	30 e0       	ldi	r19, 0x00	; 0
   16da8:	3b 83       	std	Y+3, r19	; 0x03
   16daa:	2a 83       	std	Y+2, r18	; 0x02

    switch (ret_kind) {
   16dac:	81 30       	cpi	r24, 0x01	; 1
   16dae:	61 f0       	breq	.+24     	; 0x16dc8 <mp_obj_gen_resume+0xc4>
   16db0:	82 30       	cpi	r24, 0x02	; 2
   16db2:	99 f0       	breq	.+38     	; 0x16dda <mp_obj_gen_resume+0xd6>
        case MP_VM_RETURN_NORMAL:
        default:
            // Explicitly mark generator as completed. If we don't do this,
            // subsequent next() may re-execute statements after last yield
            // again and again, leading to side effects.
            self->code_state.ip = 0;
   16db4:	1f 82       	std	Y+7, r1	; 0x07
   16db6:	1e 82       	std	Y+6, r1	; 0x06
            // This is an optimised "raise StopIteration(*ret_val)".
            *ret_val = *self->code_state.sp;
   16db8:	e8 85       	ldd	r30, Y+8	; 0x08
   16dba:	f9 85       	ldd	r31, Y+9	; 0x09
   16dbc:	20 81       	ld	r18, Z
   16dbe:	31 81       	ldd	r19, Z+1	; 0x01
   16dc0:	f7 01       	movw	r30, r14
   16dc2:	31 83       	std	Z+1, r19	; 0x01
   16dc4:	20 83       	st	Z, r18
            break;
   16dc6:	24 c0       	rjmp	.+72     	; 0x16e10 <mp_obj_gen_resume+0x10c>

        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
   16dc8:	e8 85       	ldd	r30, Y+8	; 0x08
   16dca:	f9 85       	ldd	r31, Y+9	; 0x09
   16dcc:	80 81       	ld	r24, Z
   16dce:	91 81       	ldd	r25, Z+1	; 0x01
   16dd0:	f7 01       	movw	r30, r14
   16dd2:	91 83       	std	Z+1, r25	; 0x01
   16dd4:	80 83       	st	Z, r24
            }
            break;
        }
    }

    return ret_kind;
   16dd6:	81 e0       	ldi	r24, 0x01	; 1
        case MP_VM_RETURN_YIELD:
            *ret_val = *self->code_state.sp;
            #if MICROPY_PY_GENERATOR_PEND_THROW
            *self->code_state.sp = mp_const_none;
            #endif
            break;
   16dd8:	1b c0       	rjmp	.+54     	; 0x16e10 <mp_obj_gen_resume+0x10c>

        case MP_VM_RETURN_EXCEPTION: {
            self->code_state.ip = 0;
   16dda:	1f 82       	std	Y+7, r1	; 0x07
   16ddc:	1e 82       	std	Y+6, r1	; 0x06
            *ret_val = self->code_state.state[0];
   16dde:	88 89       	ldd	r24, Y+16	; 0x10
   16de0:	99 89       	ldd	r25, Y+17	; 0x11
   16de2:	f7 01       	movw	r30, r14
   16de4:	91 83       	std	Z+1, r25	; 0x01
   16de6:	80 83       	st	Z, r24
            // PEP479: if StopIteration is raised inside a generator it is replaced with RuntimeError
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(*ret_val)), MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   16de8:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   16dec:	68 eb       	ldi	r22, 0xB8	; 184
   16dee:	71 e2       	ldi	r23, 0x21	; 33
   16df0:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   16df4:	88 23       	and	r24, r24
   16df6:	59 f0       	breq	.+22     	; 0x16e0e <mp_obj_gen_resume+0x10a>
                *ret_val = mp_obj_new_exception_msg(&mp_type_RuntimeError, MP_ERROR_TEXT("generator raised StopIteration"));
   16df8:	62 e5       	ldi	r22, 0x52	; 82
   16dfa:	7e e0       	ldi	r23, 0x0E	; 14
   16dfc:	88 ef       	ldi	r24, 0xF8	; 248
   16dfe:	9f e1       	ldi	r25, 0x1F	; 31
   16e00:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   16e04:	f7 01       	movw	r30, r14
   16e06:	91 83       	std	Z+1, r25	; 0x01
   16e08:	80 83       	st	Z, r24
            }
            break;
        }
    }

    return ret_kind;
   16e0a:	82 e0       	ldi	r24, 0x02	; 2
   16e0c:	01 c0       	rjmp	.+2      	; 0x16e10 <mp_obj_gen_resume+0x10c>
   16e0e:	82 e0       	ldi	r24, 0x02	; 2
}
   16e10:	df 91       	pop	r29
   16e12:	cf 91       	pop	r28
   16e14:	1f 91       	pop	r17
   16e16:	0f 91       	pop	r16
   16e18:	ff 90       	pop	r15
   16e1a:	ef 90       	pop	r14
   16e1c:	08 95       	ret

00016e1e <mp_resume>:
            #endif
        }
    }
}

mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val) {
   16e1e:	af 92       	push	r10
   16e20:	bf 92       	push	r11
   16e22:	cf 92       	push	r12
   16e24:	df 92       	push	r13
   16e26:	ef 92       	push	r14
   16e28:	ff 92       	push	r15
   16e2a:	0f 93       	push	r16
   16e2c:	1f 93       	push	r17
   16e2e:	cf 93       	push	r28
   16e30:	df 93       	push	r29
   16e32:	00 d0       	rcall	.+0      	; 0x16e34 <mp_resume+0x16>
   16e34:	00 d0       	rcall	.+0      	; 0x16e36 <mp_resume+0x18>
   16e36:	00 d0       	rcall	.+0      	; 0x16e38 <mp_resume+0x1a>
   16e38:	cd b7       	in	r28, 0x3d	; 61
   16e3a:	de b7       	in	r29, 0x3e	; 62
   16e3c:	6c 01       	movw	r12, r24
   16e3e:	8b 01       	movw	r16, r22
   16e40:	7a 01       	movw	r14, r20
   16e42:	59 01       	movw	r10, r18
    assert((send_value != MP_OBJ_NULL) ^ (throw_value != MP_OBJ_NULL));
   16e44:	91 e0       	ldi	r25, 0x01	; 1
   16e46:	67 2b       	or	r22, r23
   16e48:	09 f4       	brne	.+2      	; 0x16e4c <mp_resume+0x2e>
   16e4a:	90 e0       	ldi	r25, 0x00	; 0
   16e4c:	81 e0       	ldi	r24, 0x01	; 1
   16e4e:	e1 14       	cp	r14, r1
   16e50:	f1 04       	cpc	r15, r1
   16e52:	09 f4       	brne	.+2      	; 0x16e56 <mp_resume+0x38>
   16e54:	80 e0       	ldi	r24, 0x00	; 0
   16e56:	98 13       	cpse	r25, r24
   16e58:	02 c0       	rjmp	.+4      	; 0x16e5e <mp_resume+0x40>
   16e5a:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    const mp_obj_type_t *type = mp_obj_get_type(self_in);
   16e5e:	c6 01       	movw	r24, r12
   16e60:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>

    if (type == &mp_type_gen_instance) {
   16e64:	2e e1       	ldi	r18, 0x1E	; 30
   16e66:	8c 32       	cpi	r24, 0x2C	; 44
   16e68:	92 07       	cpc	r25, r18
   16e6a:	31 f4       	brne	.+12     	; 0x16e78 <mp_resume+0x5a>
        return mp_obj_gen_resume(self_in, send_value, throw_value, ret_val);
   16e6c:	95 01       	movw	r18, r10
   16e6e:	a7 01       	movw	r20, r14
   16e70:	b8 01       	movw	r22, r16
   16e72:	c6 01       	movw	r24, r12
   16e74:	47 df       	rcall	.-370    	; 0x16d04 <mp_obj_gen_resume>
   16e76:	be c0       	rjmp	.+380    	; 0x16ff4 <mp_resume+0x1d6>
    }

    if (type->iternext != NULL && send_value == mp_const_none) {
   16e78:	dc 01       	movw	r26, r24
   16e7a:	56 96       	adiw	r26, 0x16	; 22
   16e7c:	ed 91       	ld	r30, X+
   16e7e:	fc 91       	ld	r31, X
   16e80:	57 97       	sbiw	r26, 0x17	; 23
   16e82:	30 97       	sbiw	r30, 0x00	; 0
   16e84:	f1 f0       	breq	.+60     	; 0x16ec2 <mp_resume+0xa4>
   16e86:	06 30       	cpi	r16, 0x06	; 6
   16e88:	11 05       	cpc	r17, r1
   16e8a:	c1 f5       	brne	.+112    	; 0x16efc <mp_resume+0xde>
        MP_STATE_THREAD(stop_iteration_arg) = MP_OBJ_NULL;
   16e8c:	10 92 67 6b 	sts	0x6B67, r1	; 0x806b67 <mp_state_ctx+0xd>
   16e90:	10 92 66 6b 	sts	0x6B66, r1	; 0x806b66 <mp_state_ctx+0xc>
        mp_obj_t ret = type->iternext(self_in);
   16e94:	c6 01       	movw	r24, r12
   16e96:	09 95       	icall
        *ret_val = ret;
   16e98:	f5 01       	movw	r30, r10
   16e9a:	91 83       	std	Z+1, r25	; 0x01
   16e9c:	80 83       	st	Z, r24
        if (ret != MP_OBJ_STOP_ITERATION) {
   16e9e:	89 2b       	or	r24, r25
   16ea0:	09 f0       	breq	.+2      	; 0x16ea4 <mp_resume+0x86>
   16ea2:	a5 c0       	rjmp	.+330    	; 0x16fee <mp_resume+0x1d0>
            return MP_VM_RETURN_YIELD;
        } else {
            // The generator is finished.
            // This is an optimised "raise StopIteration(*ret_val)".
            *ret_val = MP_STATE_THREAD(stop_iteration_arg);
   16ea4:	80 91 66 6b 	lds	r24, 0x6B66	; 0x806b66 <mp_state_ctx+0xc>
   16ea8:	90 91 67 6b 	lds	r25, 0x6B67	; 0x806b67 <mp_state_ctx+0xd>
   16eac:	91 83       	std	Z+1, r25	; 0x01
   16eae:	80 83       	st	Z, r24
            if (*ret_val == MP_OBJ_NULL) {
   16eb0:	89 2b       	or	r24, r25
   16eb2:	09 f0       	breq	.+2      	; 0x16eb6 <mp_resume+0x98>
   16eb4:	9e c0       	rjmp	.+316    	; 0x16ff2 <mp_resume+0x1d4>
                *ret_val = mp_const_none;
   16eb6:	86 e0       	ldi	r24, 0x06	; 6
   16eb8:	90 e0       	ldi	r25, 0x00	; 0
   16eba:	91 83       	std	Z+1, r25	; 0x01
   16ebc:	80 83       	st	Z, r24
            }
            return MP_VM_RETURN_NORMAL;
   16ebe:	80 e0       	ldi	r24, 0x00	; 0
   16ec0:	99 c0       	rjmp	.+306    	; 0x16ff4 <mp_resume+0x1d6>
    }

    mp_obj_t dest[3]; // Reserve slot for send() arg

    // Python instance iterator protocol
    if (send_value == mp_const_none) {
   16ec2:	06 30       	cpi	r16, 0x06	; 6
   16ec4:	11 05       	cpc	r17, r1
   16ec6:	d1 f4       	brne	.+52     	; 0x16efc <mp_resume+0xde>
        mp_load_method_maybe(self_in, MP_QSTR___next__, dest);
   16ec8:	ae 01       	movw	r20, r28
   16eca:	4f 5f       	subi	r20, 0xFF	; 255
   16ecc:	5f 4f       	sbci	r21, 0xFF	; 255
   16ece:	69 e1       	ldi	r22, 0x19	; 25
   16ed0:	70 e0       	ldi	r23, 0x00	; 0
   16ed2:	c6 01       	movw	r24, r12
   16ed4:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
        if (dest[0] != MP_OBJ_NULL) {
   16ed8:	89 81       	ldd	r24, Y+1	; 0x01
   16eda:	9a 81       	ldd	r25, Y+2	; 0x02
   16edc:	89 2b       	or	r24, r25
   16ede:	89 f0       	breq	.+34     	; 0x16f02 <mp_resume+0xe4>
            *ret_val = mp_call_method_n_kw(0, 0, dest);
   16ee0:	ae 01       	movw	r20, r28
   16ee2:	4f 5f       	subi	r20, 0xFF	; 255
   16ee4:	5f 4f       	sbci	r21, 0xFF	; 255
   16ee6:	60 e0       	ldi	r22, 0x00	; 0
   16ee8:	70 e0       	ldi	r23, 0x00	; 0
   16eea:	80 e0       	ldi	r24, 0x00	; 0
   16eec:	90 e0       	ldi	r25, 0x00	; 0
   16eee:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   16ef2:	d5 01       	movw	r26, r10
   16ef4:	8d 93       	st	X+, r24
   16ef6:	9c 93       	st	X, r25
            return MP_VM_RETURN_YIELD;
   16ef8:	81 e0       	ldi	r24, 0x01	; 1
   16efa:	7c c0       	rjmp	.+248    	; 0x16ff4 <mp_resume+0x1d6>
        }
    }

    // Either python instance generator protocol, or native object
    // generator protocol.
    if (send_value != MP_OBJ_NULL) {
   16efc:	01 15       	cp	r16, r1
   16efe:	11 05       	cpc	r17, r1
   16f00:	c1 f0       	breq	.+48     	; 0x16f32 <mp_resume+0x114>
        mp_load_method(self_in, MP_QSTR_send, dest);
   16f02:	ae 01       	movw	r20, r28
   16f04:	4f 5f       	subi	r20, 0xFF	; 255
   16f06:	5f 4f       	sbci	r21, 0xFF	; 255
   16f08:	6a e8       	ldi	r22, 0x8A	; 138
   16f0a:	70 e0       	ldi	r23, 0x00	; 0
   16f0c:	c6 01       	movw	r24, r12
   16f0e:	0e 94 e1 3e 	call	0x7dc2	; 0x7dc2 <mp_load_method>
        dest[2] = send_value;
   16f12:	1e 83       	std	Y+6, r17	; 0x06
   16f14:	0d 83       	std	Y+5, r16	; 0x05
        *ret_val = mp_call_method_n_kw(1, 0, dest);
   16f16:	ae 01       	movw	r20, r28
   16f18:	4f 5f       	subi	r20, 0xFF	; 255
   16f1a:	5f 4f       	sbci	r21, 0xFF	; 255
   16f1c:	60 e0       	ldi	r22, 0x00	; 0
   16f1e:	70 e0       	ldi	r23, 0x00	; 0
   16f20:	81 e0       	ldi	r24, 0x01	; 1
   16f22:	90 e0       	ldi	r25, 0x00	; 0
   16f24:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   16f28:	f5 01       	movw	r30, r10
   16f2a:	91 83       	std	Z+1, r25	; 0x01
   16f2c:	80 83       	st	Z, r24
        return MP_VM_RETURN_YIELD;
   16f2e:	81 e0       	ldi	r24, 0x01	; 1
   16f30:	61 c0       	rjmp	.+194    	; 0x16ff4 <mp_resume+0x1d6>
    }

    assert(throw_value != MP_OBJ_NULL);
   16f32:	e1 14       	cp	r14, r1
   16f34:	f1 04       	cpc	r15, r1
   16f36:	11 f4       	brne	.+4      	; 0x16f3c <mp_resume+0x11e>
   16f38:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
    {
        if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(throw_value)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
   16f3c:	c7 01       	movw	r24, r14
   16f3e:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   16f42:	68 ef       	ldi	r22, 0xF8	; 248
   16f44:	71 e2       	ldi	r23, 0x21	; 33
   16f46:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   16f4a:	88 23       	and	r24, r24
   16f4c:	d1 f0       	breq	.+52     	; 0x16f82 <mp_resume+0x164>
            mp_load_method_maybe(self_in, MP_QSTR_close, dest);
   16f4e:	ae 01       	movw	r20, r28
   16f50:	4f 5f       	subi	r20, 0xFF	; 255
   16f52:	5f 4f       	sbci	r21, 0xFF	; 255
   16f54:	67 e4       	ldi	r22, 0x47	; 71
   16f56:	70 e0       	ldi	r23, 0x00	; 0
   16f58:	c6 01       	movw	r24, r12
   16f5a:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
   16f5e:	89 81       	ldd	r24, Y+1	; 0x01
   16f60:	9a 81       	ldd	r25, Y+2	; 0x02
   16f62:	89 2b       	or	r24, r25
   16f64:	51 f1       	breq	.+84     	; 0x16fba <mp_resume+0x19c>
                // TODO: Exceptions raised in close() are not propagated,
                // printed to sys.stderr
                *ret_val = mp_call_method_n_kw(0, 0, dest);
   16f66:	ae 01       	movw	r20, r28
   16f68:	4f 5f       	subi	r20, 0xFF	; 255
   16f6a:	5f 4f       	sbci	r21, 0xFF	; 255
   16f6c:	60 e0       	ldi	r22, 0x00	; 0
   16f6e:	70 e0       	ldi	r23, 0x00	; 0
   16f70:	80 e0       	ldi	r24, 0x00	; 0
   16f72:	90 e0       	ldi	r25, 0x00	; 0
   16f74:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   16f78:	d5 01       	movw	r26, r10
   16f7a:	8d 93       	st	X+, r24
   16f7c:	9c 93       	st	X, r25
                // We assume one can't "yield" from close()
                return MP_VM_RETURN_NORMAL;
   16f7e:	80 e0       	ldi	r24, 0x00	; 0
   16f80:	39 c0       	rjmp	.+114    	; 0x16ff4 <mp_resume+0x1d6>
            }
        } else {
            mp_load_method_maybe(self_in, MP_QSTR_throw, dest);
   16f82:	ae 01       	movw	r20, r28
   16f84:	4f 5f       	subi	r20, 0xFF	; 255
   16f86:	5f 4f       	sbci	r21, 0xFF	; 255
   16f88:	6b e9       	ldi	r22, 0x9B	; 155
   16f8a:	70 e0       	ldi	r23, 0x00	; 0
   16f8c:	c6 01       	movw	r24, r12
   16f8e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <mp_load_method_maybe>
            if (dest[0] != MP_OBJ_NULL) {
   16f92:	89 81       	ldd	r24, Y+1	; 0x01
   16f94:	9a 81       	ldd	r25, Y+2	; 0x02
   16f96:	89 2b       	or	r24, r25
   16f98:	81 f0       	breq	.+32     	; 0x16fba <mp_resume+0x19c>
                dest[2] = throw_value;
   16f9a:	fe 82       	std	Y+6, r15	; 0x06
   16f9c:	ed 82       	std	Y+5, r14	; 0x05
                *ret_val = mp_call_method_n_kw(1, 0, dest);
   16f9e:	ae 01       	movw	r20, r28
   16fa0:	4f 5f       	subi	r20, 0xFF	; 255
   16fa2:	5f 4f       	sbci	r21, 0xFF	; 255
   16fa4:	60 e0       	ldi	r22, 0x00	; 0
   16fa6:	70 e0       	ldi	r23, 0x00	; 0
   16fa8:	81 e0       	ldi	r24, 0x01	; 1
   16faa:	90 e0       	ldi	r25, 0x00	; 0
   16fac:	0e 94 3d 25 	call	0x4a7a	; 0x4a7a <mp_call_method_n_kw>
   16fb0:	f5 01       	movw	r30, r10
   16fb2:	91 83       	std	Z+1, r25	; 0x01
   16fb4:	80 83       	st	Z, r24
                // If .throw() method returned, we assume it's value to yield
                // - any exception would be thrown with nlr_raise().
                return MP_VM_RETURN_YIELD;
   16fb6:	81 e0       	ldi	r24, 0x01	; 1
   16fb8:	1d c0       	rjmp	.+58     	; 0x16ff4 <mp_resume+0x1d6>
        // If there's nowhere to throw exception into, then we assume that object
        // is just incapable to handle it, so any exception thrown into it
        // will be propagated up. This behavior is approved by test_pep380.py
        // test_delegation_of_close_to_non_generator(),
        //  test_delegating_throw_to_non_generator()
        if (mp_obj_exception_match(throw_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
   16fba:	68 eb       	ldi	r22, 0xB8	; 184
   16fbc:	71 e2       	ldi	r23, 0x21	; 33
   16fbe:	c7 01       	movw	r24, r14
   16fc0:	0e 94 12 22 	call	0x4424	; 0x4424 <mp_obj_exception_match>
   16fc4:	88 23       	and	r24, r24
   16fc6:	59 f0       	breq	.+22     	; 0x16fde <mp_resume+0x1c0>
            // PEP479: if StopIteration is raised inside a generator it is replaced with RuntimeError
            *ret_val = mp_obj_new_exception_msg(&mp_type_RuntimeError, MP_ERROR_TEXT("generator raised StopIteration"));
   16fc8:	62 e5       	ldi	r22, 0x52	; 82
   16fca:	7e e0       	ldi	r23, 0x0E	; 14
   16fcc:	88 ef       	ldi	r24, 0xF8	; 248
   16fce:	9f e1       	ldi	r25, 0x1F	; 31
   16fd0:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <mp_obj_new_exception_msg>
   16fd4:	d5 01       	movw	r26, r10
   16fd6:	8d 93       	st	X+, r24
   16fd8:	9c 93       	st	X, r25
        } else {
            *ret_val = mp_make_raise_obj(throw_value);
        }
        return MP_VM_RETURN_EXCEPTION;
   16fda:	82 e0       	ldi	r24, 0x02	; 2
   16fdc:	0b c0       	rjmp	.+22     	; 0x16ff4 <mp_resume+0x1d6>
        //  test_delegating_throw_to_non_generator()
        if (mp_obj_exception_match(throw_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))) {
            // PEP479: if StopIteration is raised inside a generator it is replaced with RuntimeError
            *ret_val = mp_obj_new_exception_msg(&mp_type_RuntimeError, MP_ERROR_TEXT("generator raised StopIteration"));
        } else {
            *ret_val = mp_make_raise_obj(throw_value);
   16fde:	c7 01       	movw	r24, r14
   16fe0:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <mp_make_raise_obj>
   16fe4:	f5 01       	movw	r30, r10
   16fe6:	91 83       	std	Z+1, r25	; 0x01
   16fe8:	80 83       	st	Z, r24
        }
        return MP_VM_RETURN_EXCEPTION;
   16fea:	82 e0       	ldi	r24, 0x02	; 2
   16fec:	03 c0       	rjmp	.+6      	; 0x16ff4 <mp_resume+0x1d6>
    if (type->iternext != NULL && send_value == mp_const_none) {
        MP_STATE_THREAD(stop_iteration_arg) = MP_OBJ_NULL;
        mp_obj_t ret = type->iternext(self_in);
        *ret_val = ret;
        if (ret != MP_OBJ_STOP_ITERATION) {
            return MP_VM_RETURN_YIELD;
   16fee:	81 e0       	ldi	r24, 0x01	; 1
   16ff0:	01 c0       	rjmp	.+2      	; 0x16ff4 <mp_resume+0x1d6>
            // This is an optimised "raise StopIteration(*ret_val)".
            *ret_val = MP_STATE_THREAD(stop_iteration_arg);
            if (*ret_val == MP_OBJ_NULL) {
                *ret_val = mp_const_none;
            }
            return MP_VM_RETURN_NORMAL;
   16ff2:	80 e0       	ldi	r24, 0x00	; 0
        } else {
            *ret_val = mp_make_raise_obj(throw_value);
        }
        return MP_VM_RETURN_EXCEPTION;
    }
}
   16ff4:	26 96       	adiw	r28, 0x06	; 6
   16ff6:	0f b6       	in	r0, 0x3f	; 63
   16ff8:	f8 94       	cli
   16ffa:	de bf       	out	0x3e, r29	; 62
   16ffc:	0f be       	out	0x3f, r0	; 63
   16ffe:	cd bf       	out	0x3d, r28	; 61
   17000:	df 91       	pop	r29
   17002:	cf 91       	pop	r28
   17004:	1f 91       	pop	r17
   17006:	0f 91       	pop	r16
   17008:	ff 90       	pop	r15
   1700a:	ef 90       	pop	r14
   1700c:	df 90       	pop	r13
   1700e:	cf 90       	pop	r12
   17010:	bf 90       	pop	r11
   17012:	af 90       	pop	r10
   17014:	08 95       	ret

00017016 <fun_bc_call>:

    return code_state;
}
#endif

STATIC mp_obj_t fun_bc_call(mp_obj_t self_in, size_t n_args, size_t n_kw, const mp_obj_t *args) {
   17016:	2f 92       	push	r2
   17018:	3f 92       	push	r3
   1701a:	4f 92       	push	r4
   1701c:	5f 92       	push	r5
   1701e:	6f 92       	push	r6
   17020:	7f 92       	push	r7
   17022:	8f 92       	push	r8
   17024:	9f 92       	push	r9
   17026:	af 92       	push	r10
   17028:	bf 92       	push	r11
   1702a:	cf 92       	push	r12
   1702c:	df 92       	push	r13
   1702e:	ef 92       	push	r14
   17030:	ff 92       	push	r15
   17032:	0f 93       	push	r16
   17034:	1f 93       	push	r17
   17036:	cf 93       	push	r28
   17038:	df 93       	push	r29
   1703a:	cd b7       	in	r28, 0x3d	; 61
   1703c:	de b7       	in	r29, 0x3e	; 62
   1703e:	5c 01       	movw	r10, r24
   17040:	1b 01       	movw	r2, r22
   17042:	2a 01       	movw	r4, r20
   17044:	39 01       	movw	r6, r18
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
        return result;
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    }
}
   17046:	8d b6       	in	r8, 0x3d	; 61
   17048:	9e b6       	in	r9, 0x3e	; 62
    dump_args(args + n_args, n_kw * 2);

    mp_obj_fun_bc_t *self = MP_OBJ_TO_PTR(self_in);

    size_t n_state, state_size;
    DECODE_CODESTATE_SIZE(self->bytecode, n_state, state_size);
   1704a:	dc 01       	movw	r26, r24
   1704c:	14 96       	adiw	r26, 0x04	; 4
   1704e:	8d 91       	ld	r24, X+
   17050:	9c 91       	ld	r25, X
   17052:	15 97       	sbiw	r26, 0x05	; 5
   17054:	dc 01       	movw	r26, r24
   17056:	11 96       	adiw	r26, 0x01	; 1
   17058:	fc 01       	movw	r30, r24
   1705a:	80 81       	ld	r24, Z
   1705c:	98 2f       	mov	r25, r24
   1705e:	96 95       	lsr	r25
   17060:	96 95       	lsr	r25
   17062:	96 95       	lsr	r25
   17064:	9f 70       	andi	r25, 0x0F	; 15
   17066:	e9 2e       	mov	r14, r25
   17068:	f1 2c       	mov	r15, r1
   1706a:	82 fb       	bst	r24, 2
   1706c:	ee 27       	eor	r30, r30
   1706e:	e0 f9       	bld	r30, 0
   17070:	f0 e0       	ldi	r31, 0x00	; 0
   17072:	88 23       	and	r24, r24
   17074:	fc f4       	brge	.+62     	; 0x170b4 <fun_bc_call+0x9e>
   17076:	20 e0       	ldi	r18, 0x00	; 0
   17078:	30 e0       	ldi	r19, 0x00	; 0
   1707a:	6d 91       	ld	r22, X+
   1707c:	86 2f       	mov	r24, r22
   1707e:	80 73       	andi	r24, 0x30	; 48
   17080:	90 e0       	ldi	r25, 0x00	; 0
   17082:	a9 01       	movw	r20, r18
   17084:	44 0f       	add	r20, r20
   17086:	55 1f       	adc	r21, r21
   17088:	02 c0       	rjmp	.+4      	; 0x1708e <fun_bc_call+0x78>
   1708a:	88 0f       	add	r24, r24
   1708c:	99 1f       	adc	r25, r25
   1708e:	4a 95       	dec	r20
   17090:	e2 f7       	brpl	.-8      	; 0x1708a <fun_bc_call+0x74>
   17092:	e8 2a       	or	r14, r24
   17094:	f9 2a       	or	r15, r25
   17096:	86 2f       	mov	r24, r22
   17098:	82 70       	andi	r24, 0x02	; 2
   1709a:	90 e0       	ldi	r25, 0x00	; 0
   1709c:	02 2e       	mov	r0, r18
   1709e:	02 c0       	rjmp	.+4      	; 0x170a4 <fun_bc_call+0x8e>
   170a0:	88 0f       	add	r24, r24
   170a2:	99 1f       	adc	r25, r25
   170a4:	0a 94       	dec	r0
   170a6:	e2 f7       	brpl	.-8      	; 0x170a0 <fun_bc_call+0x8a>
   170a8:	e8 2b       	or	r30, r24
   170aa:	f9 2b       	or	r31, r25
   170ac:	2f 5f       	subi	r18, 0xFF	; 255
   170ae:	3f 4f       	sbci	r19, 0xFF	; 255
   170b0:	66 23       	and	r22, r22
   170b2:	1c f3       	brlt	.-58     	; 0x1707a <fun_bc_call+0x64>
   170b4:	8f ef       	ldi	r24, 0xFF	; 255
   170b6:	e8 1a       	sub	r14, r24
   170b8:	f8 0a       	sbc	r15, r24
   170ba:	8f 01       	movw	r16, r30
   170bc:	00 0f       	add	r16, r16
   170be:	11 1f       	adc	r17, r17
   170c0:	0e 0f       	add	r16, r30
   170c2:	1f 1f       	adc	r17, r31
   170c4:	0e 0d       	add	r16, r14
   170c6:	1f 1d       	adc	r17, r15
   170c8:	00 0f       	add	r16, r16
   170ca:	11 1f       	adc	r17, r17
    // allocate state for locals and stack
    mp_code_state_t *code_state = NULL;
    #if MICROPY_ENABLE_PYSTACK
    code_state = mp_pystack_alloc(sizeof(mp_code_state_t) + state_size);
    #else
    if (state_size > VM_MAX_STATE_ON_STACK) {
   170cc:	07 31       	cpi	r16, 0x17	; 23
   170ce:	11 05       	cpc	r17, r1
   170d0:	38 f0       	brcs	.+14     	; 0x170e0 <fun_bc_call+0xca>
        code_state = m_new_obj_var_maybe(mp_code_state_t, byte, state_size);
   170d2:	c8 01       	movw	r24, r16
   170d4:	0c 96       	adiw	r24, 0x0c	; 12
   170d6:	0e 94 25 08 	call	0x104a	; 0x104a <m_malloc_maybe>
   170da:	6c 01       	movw	r12, r24
        if (code_state != NULL) {
            memset(code_state->state, 0, state_size);
        }
        #endif
    }
    if (code_state == NULL) {
   170dc:	89 2b       	or	r24, r25
   170de:	89 f4       	brne	.+34     	; 0x17102 <fun_bc_call+0xec>
        code_state = alloca(sizeof(mp_code_state_t) + state_size);
   170e0:	04 5f       	subi	r16, 0xF4	; 244
   170e2:	1f 4f       	sbci	r17, 0xFF	; 255
   170e4:	ad b7       	in	r26, 0x3d	; 61
   170e6:	be b7       	in	r27, 0x3e	; 62
   170e8:	a0 1b       	sub	r26, r16
   170ea:	b1 0b       	sbc	r27, r17
   170ec:	0f b6       	in	r0, 0x3f	; 63
   170ee:	f8 94       	cli
   170f0:	be bf       	out	0x3e, r27	; 62
   170f2:	0f be       	out	0x3f, r0	; 63
   170f4:	ad bf       	out	0x3d, r26	; 61
   170f6:	ed b7       	in	r30, 0x3d	; 61
   170f8:	fe b7       	in	r31, 0x3e	; 62
   170fa:	31 96       	adiw	r30, 0x01	; 1
   170fc:	6f 01       	movw	r12, r30
        #if MICROPY_DEBUG_VM_STACK_OVERFLOW
        memset(code_state->state, 0, state_size);
        #endif
        state_size = 0; // indicate that we allocated using alloca
   170fe:	00 e0       	ldi	r16, 0x00	; 0
   17100:	10 e0       	ldi	r17, 0x00	; 0
    }
    #endif

    INIT_CODESTATE(code_state, self, n_state, n_args, n_kw, args);
   17102:	d6 01       	movw	r26, r12
   17104:	11 96       	adiw	r26, 0x01	; 1
   17106:	bc 92       	st	X, r11
   17108:	ae 92       	st	-X, r10
   1710a:	13 96       	adiw	r26, 0x03	; 3
   1710c:	1c 92       	st	X, r1
   1710e:	1e 92       	st	-X, r1
   17110:	12 97       	sbiw	r26, 0x02	; 2
   17112:	17 96       	adiw	r26, 0x07	; 7
   17114:	fc 92       	st	X, r15
   17116:	ee 92       	st	-X, r14
   17118:	16 97       	sbiw	r26, 0x06	; 6
   1711a:	93 01       	movw	r18, r6
   1711c:	a2 01       	movw	r20, r4
   1711e:	b1 01       	movw	r22, r2
   17120:	c6 01       	movw	r24, r12
   17122:	0e 94 90 82 	call	0x10520	; 0x10520 <mp_setup_code_state>
}
static inline void mp_locals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_locals) = d;
}
static inline mp_obj_dict_t *mp_globals_get(void) {
    return MP_STATE_THREAD(dict_globals);
   17126:	0f 2e       	mov	r0, r31
   17128:	fa e5       	ldi	r31, 0x5A	; 90
   1712a:	ef 2e       	mov	r14, r31
   1712c:	fb e6       	ldi	r31, 0x6B	; 107
   1712e:	ff 2e       	mov	r15, r31
   17130:	f0 2d       	mov	r31, r0
   17132:	f7 01       	movw	r30, r14
   17134:	86 81       	ldd	r24, Z+6	; 0x06
   17136:	97 81       	ldd	r25, Z+7	; 0x07
   17138:	d6 01       	movw	r26, r12
   1713a:	1b 96       	adiw	r26, 0x0b	; 11
   1713c:	9c 93       	st	X, r25
   1713e:	8e 93       	st	-X, r24
   17140:	1a 97       	sbiw	r26, 0x0a	; 10

    // execute the byte code with the correct globals context
    mp_globals_set(self->globals);
   17142:	f5 01       	movw	r30, r10
   17144:	82 81       	ldd	r24, Z+2	; 0x02
   17146:	93 81       	ldd	r25, Z+3	; 0x03
}
static inline void mp_globals_set(mp_obj_dict_t *d) {
    MP_STATE_THREAD(dict_globals) = d;
   17148:	d7 01       	movw	r26, r14
   1714a:	17 96       	adiw	r26, 0x07	; 7
   1714c:	9c 93       	st	X, r25
   1714e:	8e 93       	st	-X, r24
   17150:	16 97       	sbiw	r26, 0x06	; 6
    mp_vm_return_kind_t vm_return_kind = mp_execute_bytecode(code_state, MP_OBJ_NULL);
   17152:	60 e0       	ldi	r22, 0x00	; 0
   17154:	70 e0       	ldi	r23, 0x00	; 0
   17156:	c6 01       	movw	r24, r12
   17158:	0e 94 da a9 	call	0x153b4	; 0x153b4 <mp_execute_bytecode>
   1715c:	f6 01       	movw	r30, r12
   1715e:	22 85       	ldd	r18, Z+10	; 0x0a
   17160:	33 85       	ldd	r19, Z+11	; 0x0b
   17162:	d7 01       	movw	r26, r14
   17164:	17 96       	adiw	r26, 0x07	; 7
   17166:	3c 93       	st	X, r19
   17168:	2e 93       	st	-X, r18
   1716a:	16 97       	sbiw	r26, 0x06	; 6
        }
    }
    #endif

    mp_obj_t result;
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
   1716c:	81 11       	cpse	r24, r1
   1716e:	08 c0       	rjmp	.+16     	; 0x17180 <fun_bc_call+0x16a>
        // return value is in *sp
        result = *code_state->sp;
   17170:	04 80       	ldd	r0, Z+4	; 0x04
   17172:	f5 81       	ldd	r31, Z+5	; 0x05
   17174:	e0 2d       	mov	r30, r0
   17176:	e0 80       	ld	r14, Z
   17178:	f1 80       	ldd	r15, Z+1	; 0x01

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
   1717a:	01 2b       	or	r16, r17
   1717c:	a9 f0       	breq	.+42     	; 0x171a8 <fun_bc_call+0x192>
   1717e:	0c c0       	rjmp	.+24     	; 0x17198 <fun_bc_call+0x182>
    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
        // return value is in *sp
        result = *code_state->sp;
    } else {
        // must be an exception because normal functions can't yield
        assert(vm_return_kind == MP_VM_RETURN_EXCEPTION);
   17180:	82 30       	cpi	r24, 0x02	; 2
   17182:	11 f0       	breq	.+4      	; 0x17188 <fun_bc_call+0x172>
   17184:	0e 94 40 c2 	call	0x18480	; 0x18480 <abort>
        // returned exception is in state[0]
        result = code_state->state[0];
   17188:	f6 01       	movw	r30, r12
   1718a:	e4 84       	ldd	r14, Z+12	; 0x0c
   1718c:	f5 84       	ldd	r15, Z+13	; 0x0d

    #if MICROPY_ENABLE_PYSTACK
    mp_pystack_free(code_state);
    #else
    // free the state if it was allocated on the heap
    if (state_size != 0) {
   1718e:	01 2b       	or	r16, r17
   17190:	39 f4       	brne	.+14     	; 0x171a0 <fun_bc_call+0x18a>
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
        return result;
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
   17192:	c7 01       	movw	r24, r14
   17194:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
void m_free(void *ptr, size_t num_bytes)
#else
void m_free(void *ptr)
#endif
{
    free(ptr);
   17198:	c6 01       	movw	r24, r12
   1719a:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
        m_del_var(mp_code_state_t, byte, state_size, code_state);
    }
    #endif

    if (vm_return_kind == MP_VM_RETURN_NORMAL) {
        return result;
   1719e:	04 c0       	rjmp	.+8      	; 0x171a8 <fun_bc_call+0x192>
   171a0:	c6 01       	movw	r24, r12
   171a2:	0e 94 29 08 	call	0x1052	; 0x1052 <gc_free>
   171a6:	f5 cf       	rjmp	.-22     	; 0x17192 <fun_bc_call+0x17c>
    } else { // MP_VM_RETURN_EXCEPTION
        nlr_raise(result);
    }
}
   171a8:	c7 01       	movw	r24, r14
   171aa:	0f b6       	in	r0, 0x3f	; 63
   171ac:	f8 94       	cli
   171ae:	9e be       	out	0x3e, r9	; 62
   171b0:	0f be       	out	0x3f, r0	; 63
   171b2:	8d be       	out	0x3d, r8	; 61
   171b4:	df 91       	pop	r29
   171b6:	cf 91       	pop	r28
   171b8:	1f 91       	pop	r17
   171ba:	0f 91       	pop	r16
   171bc:	ff 90       	pop	r15
   171be:	ef 90       	pop	r14
   171c0:	df 90       	pop	r13
   171c2:	cf 90       	pop	r12
   171c4:	bf 90       	pop	r11
   171c6:	af 90       	pop	r10
   171c8:	9f 90       	pop	r9
   171ca:	8f 90       	pop	r8
   171cc:	7f 90       	pop	r7
   171ce:	6f 90       	pop	r6
   171d0:	5f 90       	pop	r5
   171d2:	4f 90       	pop	r4
   171d4:	3f 90       	pop	r3
   171d6:	2f 90       	pop	r2
   171d8:	08 95       	ret

000171da <gen_resume_and_raise>:

STATIC mp_obj_t gen_resume_and_raise(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, bool raise_stop_iteration) {
   171da:	1f 93       	push	r17
   171dc:	cf 93       	push	r28
   171de:	df 93       	push	r29
   171e0:	00 d0       	rcall	.+0      	; 0x171e2 <gen_resume_and_raise+0x8>
   171e2:	cd b7       	in	r28, 0x3d	; 61
   171e4:	de b7       	in	r29, 0x3e	; 62
   171e6:	12 2f       	mov	r17, r18
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, send_value, throw_value, &ret)) {
   171e8:	9e 01       	movw	r18, r28
   171ea:	2f 5f       	subi	r18, 0xFF	; 255
   171ec:	3f 4f       	sbci	r19, 0xFF	; 255
   171ee:	8a dd       	rcall	.-1260   	; 0x16d04 <mp_obj_gen_resume>
   171f0:	81 30       	cpi	r24, 0x01	; 1
   171f2:	b9 f0       	breq	.+46     	; 0x17222 <gen_resume_and_raise+0x48>
   171f4:	82 30       	cpi	r24, 0x02	; 2
   171f6:	c1 f0       	breq	.+48     	; 0x17228 <gen_resume_and_raise+0x4e>
        case MP_VM_RETURN_NORMAL:
        default:
            // A normal return is a StopIteration, either raise it or return
            // MP_OBJ_STOP_ITERATION as an optimisation.
            if (ret == mp_const_none) {
   171f8:	89 81       	ldd	r24, Y+1	; 0x01
   171fa:	9a 81       	ldd	r25, Y+2	; 0x02
   171fc:	06 97       	sbiw	r24, 0x06	; 6
   171fe:	11 f4       	brne	.+4      	; 0x17204 <gen_resume_and_raise+0x2a>
                ret = MP_OBJ_NULL;
   17200:	1a 82       	std	Y+2, r1	; 0x02
   17202:	19 82       	std	Y+1, r1	; 0x01
            }
            if (raise_stop_iteration) {
   17204:	11 23       	and	r17, r17
   17206:	21 f0       	breq	.+8      	; 0x17210 <gen_resume_and_raise+0x36>
                mp_raise_StopIteration(ret);
   17208:	89 81       	ldd	r24, Y+1	; 0x01
   1720a:	9a 81       	ldd	r25, Y+2	; 0x02
   1720c:	0e 94 da 9f 	call	0x13fb4	; 0x13fb4 <mp_raise_StopIteration>
mp_obj_t mp_iternext_allow_raise(mp_obj_t o); // may return MP_OBJ_STOP_ITERATION instead of raising StopIteration()
mp_obj_t mp_iternext(mp_obj_t o); // will always return MP_OBJ_STOP_ITERATION instead of raising StopIteration(...)
mp_vm_return_kind_t mp_resume(mp_obj_t self_in, mp_obj_t send_value, mp_obj_t throw_value, mp_obj_t *ret_val);

static inline mp_obj_t mp_make_stop_iteration(mp_obj_t o) {
    MP_STATE_THREAD(stop_iteration_arg) = o;
   17210:	89 81       	ldd	r24, Y+1	; 0x01
   17212:	9a 81       	ldd	r25, Y+2	; 0x02
   17214:	90 93 67 6b 	sts	0x6B67, r25	; 0x806b67 <mp_state_ctx+0xd>
   17218:	80 93 66 6b 	sts	0x6B66, r24	; 0x806b66 <mp_state_ctx+0xc>
            } else {
                return mp_make_stop_iteration(ret);
   1721c:	80 e0       	ldi	r24, 0x00	; 0
   1721e:	90 e0       	ldi	r25, 0x00	; 0
   17220:	07 c0       	rjmp	.+14     	; 0x17230 <gen_resume_and_raise+0x56>
            }

        case MP_VM_RETURN_YIELD:
            return ret;
   17222:	89 81       	ldd	r24, Y+1	; 0x01
   17224:	9a 81       	ldd	r25, Y+2	; 0x02
   17226:	04 c0       	rjmp	.+8      	; 0x17230 <gen_resume_and_raise+0x56>

        case MP_VM_RETURN_EXCEPTION:
            nlr_raise(ret);
   17228:	89 81       	ldd	r24, Y+1	; 0x01
   1722a:	9a 81       	ldd	r25, Y+2	; 0x02
   1722c:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>
    }
}
   17230:	0f 90       	pop	r0
   17232:	0f 90       	pop	r0
   17234:	df 91       	pop	r29
   17236:	cf 91       	pop	r28
   17238:	1f 91       	pop	r17
   1723a:	08 95       	ret

0001723c <gen_instance_throw>:
STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
    return gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL, true);
}
STATIC MP_DEFINE_CONST_FUN_OBJ_2(gen_instance_send_obj, gen_instance_send);

STATIC mp_obj_t gen_instance_throw(size_t n_args, const mp_obj_t *args) {
   1723c:	fb 01       	movw	r30, r22
    //   passed through (in the standard case it is an exception class or instance)
    // - if args[2] is given and not None it is passed through (in the standard
    //   case it would be an exception instance and args[1] its corresponding class)
    // - args[3] is always ignored

    mp_obj_t exc = args[1];
   1723e:	42 81       	ldd	r20, Z+2	; 0x02
   17240:	53 81       	ldd	r21, Z+3	; 0x03
    if (n_args > 2 && args[2] != mp_const_none) {
   17242:	03 97       	sbiw	r24, 0x03	; 3
   17244:	38 f0       	brcs	.+14     	; 0x17254 <gen_instance_throw+0x18>
   17246:	84 81       	ldd	r24, Z+4	; 0x04
   17248:	95 81       	ldd	r25, Z+5	; 0x05
   1724a:	86 30       	cpi	r24, 0x06	; 6
   1724c:	91 05       	cpc	r25, r1
   1724e:	11 f0       	breq	.+4      	; 0x17254 <gen_instance_throw+0x18>
        exc = args[2];
   17250:	48 2f       	mov	r20, r24
   17252:	59 2f       	mov	r21, r25
    }

    return gen_resume_and_raise(args[0], mp_const_none, exc, true);
   17254:	21 e0       	ldi	r18, 0x01	; 1
   17256:	66 e0       	ldi	r22, 0x06	; 6
   17258:	70 e0       	ldi	r23, 0x00	; 0
   1725a:	80 81       	ld	r24, Z
   1725c:	91 81       	ldd	r25, Z+1	; 0x01
   1725e:	bd cf       	rjmp	.-134    	; 0x171da <gen_resume_and_raise>
}
   17260:	08 95       	ret

00017262 <gen_instance_send>:
STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL, false);
}

STATIC mp_obj_t gen_instance_send(mp_obj_t self_in, mp_obj_t send_value) {
    return gen_resume_and_raise(self_in, send_value, MP_OBJ_NULL, true);
   17262:	21 e0       	ldi	r18, 0x01	; 1
   17264:	40 e0       	ldi	r20, 0x00	; 0
   17266:	50 e0       	ldi	r21, 0x00	; 0
   17268:	b8 cf       	rjmp	.-144    	; 0x171da <gen_resume_and_raise>
}
   1726a:	08 95       	ret

0001726c <gen_instance_iternext>:
            nlr_raise(ret);
    }
}

STATIC mp_obj_t gen_instance_iternext(mp_obj_t self_in) {
    return gen_resume_and_raise(self_in, mp_const_none, MP_OBJ_NULL, false);
   1726c:	20 e0       	ldi	r18, 0x00	; 0
   1726e:	40 e0       	ldi	r20, 0x00	; 0
   17270:	50 e0       	ldi	r21, 0x00	; 0
   17272:	66 e0       	ldi	r22, 0x06	; 6
   17274:	70 e0       	ldi	r23, 0x00	; 0
   17276:	b1 cf       	rjmp	.-158    	; 0x171da <gen_resume_and_raise>
}
   17278:	08 95       	ret

0001727a <gen_instance_close>:

    return gen_resume_and_raise(args[0], mp_const_none, exc, true);
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(gen_instance_throw_obj, 2, 4, gen_instance_throw);

STATIC mp_obj_t gen_instance_close(mp_obj_t self_in) {
   1727a:	0f 93       	push	r16
   1727c:	1f 93       	push	r17
   1727e:	cf 93       	push	r28
   17280:	df 93       	push	r29
   17282:	00 d0       	rcall	.+0      	; 0x17284 <gen_instance_close+0xa>
   17284:	cd b7       	in	r28, 0x3d	; 61
   17286:	de b7       	in	r29, 0x3e	; 62
    mp_obj_t ret;
    switch (mp_obj_gen_resume(self_in, mp_const_none, MP_OBJ_FROM_PTR(&mp_const_GeneratorExit_obj), &ret)) {
   17288:	9e 01       	movw	r18, r28
   1728a:	2f 5f       	subi	r18, 0xFF	; 255
   1728c:	3f 4f       	sbci	r19, 0xFF	; 255
   1728e:	40 e9       	ldi	r20, 0x90	; 144
   17290:	5e e1       	ldi	r21, 0x1E	; 30
   17292:	66 e0       	ldi	r22, 0x06	; 6
   17294:	70 e0       	ldi	r23, 0x00	; 0
   17296:	36 dd       	rcall	.-1428   	; 0x16d04 <mp_obj_gen_resume>
   17298:	81 30       	cpi	r24, 0x01	; 1
   1729a:	19 f0       	breq	.+6      	; 0x172a2 <gen_instance_close+0x28>
   1729c:	82 30       	cpi	r24, 0x02	; 2
   1729e:	39 f0       	breq	.+14     	; 0x172ae <gen_instance_close+0x34>
   172a0:	14 c0       	rjmp	.+40     	; 0x172ca <gen_instance_close+0x50>
        case MP_VM_RETURN_YIELD:
            mp_raise_msg(&mp_type_RuntimeError, MP_ERROR_TEXT("generator ignored GeneratorExit"));
   172a2:	61 e7       	ldi	r22, 0x71	; 113
   172a4:	7e e0       	ldi	r23, 0x0E	; 14
   172a6:	88 ef       	ldi	r24, 0xF8	; 248
   172a8:	9f e1       	ldi	r25, 0x1F	; 31
   172aa:	0e 94 ae 24 	call	0x495c	; 0x495c <mp_raise_msg>

        // Swallow GeneratorExit (== successful close), and re-raise any other
        case MP_VM_RETURN_EXCEPTION:
            // ret should always be an instance of an exception class
            if (mp_obj_is_subclass_fast(MP_OBJ_FROM_PTR(mp_obj_get_type(ret)), MP_OBJ_FROM_PTR(&mp_type_GeneratorExit))) {
   172ae:	09 81       	ldd	r16, Y+1	; 0x01
   172b0:	1a 81       	ldd	r17, Y+2	; 0x02
   172b2:	c8 01       	movw	r24, r16
   172b4:	0e 94 20 1a 	call	0x3440	; 0x3440 <mp_obj_get_type>
   172b8:	68 ef       	ldi	r22, 0xF8	; 248
   172ba:	71 e2       	ldi	r23, 0x21	; 33
   172bc:	0e 94 1e 21 	call	0x423c	; 0x423c <mp_obj_is_subclass_fast>
   172c0:	81 11       	cpse	r24, r1
   172c2:	03 c0       	rjmp	.+6      	; 0x172ca <gen_instance_close+0x50>
                return mp_const_none;
            }
            nlr_raise(ret);
   172c4:	c8 01       	movw	r24, r16
   172c6:	0e 94 86 24 	call	0x490c	; 0x490c <nlr_jump>

        default:
            // The only choice left is MP_VM_RETURN_NORMAL which is successful close
            return mp_const_none;
    }
}
   172ca:	86 e0       	ldi	r24, 0x06	; 6
   172cc:	90 e0       	ldi	r25, 0x00	; 0
   172ce:	0f 90       	pop	r0
   172d0:	0f 90       	pop	r0
   172d2:	df 91       	pop	r29
   172d4:	cf 91       	pop	r28
   172d6:	1f 91       	pop	r17
   172d8:	0f 91       	pop	r16
   172da:	08 95       	ret

000172dc <SetupHardware>:
// INITIALISATION
#pragma region

// Configures the board hardware and chip peripherals for the demo's functionality.
void SetupHardware(void)
{
   172dc:	cf 93       	push	r28
   172de:	df 93       	push	r29
   172e0:	cd b7       	in	r28, 0x3d	; 61
   172e2:	de b7       	in	r29, 0x3e	; 62
   172e4:	a8 97       	sbiw	r28, 0x28	; 40
   172e6:	0f b6       	in	r0, 0x3f	; 63
   172e8:	f8 94       	cli
   172ea:	de bf       	out	0x3e, r29	; 62
   172ec:	0f be       	out	0x3f, r0	; 63
   172ee:	cd bf       	out	0x3d, r28	; 61
	#if (ARCH == ARCH_AVR8)
	    // Disable watchdog if enabled by bootloader/fuses
	    MCUSR &= ~(1 << WDRF);
   172f0:	84 b7       	in	r24, 0x34	; 52
   172f2:	87 7f       	andi	r24, 0xF7	; 247
   172f4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
   172f6:	0f b6       	in	r0, 0x3f	; 63
   172f8:	f8 94       	cli
   172fa:	a8 95       	wdr
   172fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__+0x6fff60>
   17300:	88 61       	ori	r24, 0x18	; 24
   17302:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__+0x6fff60>
   17306:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__+0x6fff60>
   1730a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
   1730c:	90 e0       	ldi	r25, 0x00	; 0
   1730e:	80 e8       	ldi	r24, 0x80	; 128
   17310:	0f b6       	in	r0, 0x3f	; 63
   17312:	f8 94       	cli
   17314:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x6fff61>
   17318:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x6fff61>
   1731c:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
   1731e:	8a b1       	in	r24, 0x0a	; 10
   17320:	80 6f       	ori	r24, 0xF0	; 240
   17322:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
   17324:	8b b1       	in	r24, 0x0b	; 11
   17326:	8f 70       	andi	r24, 0x0F	; 15
   17328:	8b b9       	out	0x0b, r24	; 11
	    clock_prescale_set(clock_div_1);
	#endif

	// Hardware Initialization
	LEDs_Init();
	USB_Init();
   1732a:	8f d5       	rcall	.+2846   	; 0x17e4a <USB_Init>
	
	// MicroPython Initialization
	mp_stack_set_limit(40000 * (sizeof(void *) / 4)); // Initialized stack limit
	gc_init(heap, heap + sizeof(heap)); // Initialize heap
   1732c:	62 e4       	ldi	r22, 0x42	; 66
   1732e:	7a e6       	ldi	r23, 0x6A	; 106
   17330:	82 e4       	ldi	r24, 0x42	; 66
   17332:	9a e2       	ldi	r25, 0x2A	; 42
   17334:	0e 94 a4 06 	call	0xd48	; 0xd48 <gc_init>
	mp_init(); // Initialize interpreter
   17338:	0e 94 02 4a 	call	0x9404	; 0x9404 <mp_init>

	const char str[] = "print('Hello world of easy embedding!')";
   1733c:	88 e2       	ldi	r24, 0x28	; 40
   1733e:	e1 e9       	ldi	r30, 0x91	; 145
   17340:	fe e0       	ldi	r31, 0x0E	; 14
   17342:	de 01       	movw	r26, r28
   17344:	11 96       	adiw	r26, 0x01	; 1
   17346:	01 90       	ld	r0, Z+
   17348:	0d 92       	st	X+, r0
   1734a:	8a 95       	dec	r24
   1734c:	e1 f7       	brne	.-8      	; 0x17346 <SetupHardware+0x6a>
	if (execute_from_str(str)) { printf("Error\n"); }
   1734e:	ce 01       	movw	r24, r28
   17350:	01 96       	adiw	r24, 0x01	; 1
   17352:	0e 94 9c 9e 	call	0x13d38	; 0x13d38 <execute_from_str>
   17356:	89 2b       	or	r24, r25
   17358:	21 f0       	breq	.+8      	; 0x17362 <SetupHardware+0x86>
   1735a:	89 ea       	ldi	r24, 0xA9	; 169
   1735c:	90 e1       	ldi	r25, 0x10	; 16
   1735e:	0e 94 78 24 	call	0x48f0	; 0x48f0 <puts>
}
   17362:	a8 96       	adiw	r28, 0x28	; 40
   17364:	0f b6       	in	r0, 0x3f	; 63
   17366:	f8 94       	cli
   17368:	de bf       	out	0x3e, r29	; 62
   1736a:	0f be       	out	0x3f, r0	; 63
   1736c:	cd bf       	out	0x3d, r28	; 61
   1736e:	df 91       	pop	r29
   17370:	cf 91       	pop	r28
   17372:	08 95       	ret

00017374 <main>:

// Main program entry point. This routine contains the overall program flow, including initial
// setup of all components and the main program loop.
int main(void)
{
	SetupHardware();
   17374:	b3 df       	rcall	.-154    	; 0x172dc <SetupHardware>
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
   17376:	ee e4       	ldi	r30, 0x4E	; 78
   17378:	fb e6       	ldi	r31, 0x6B	; 107
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1737a:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1737c:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
   1737e:	8e ec       	ldi	r24, 0xCE	; 206
   17380:	9a e6       	ldi	r25, 0x6A	; 106
   17382:	91 83       	std	Z+1, r25	; 0x01
   17384:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
   17386:	93 83       	std	Z+3, r25	; 0x03
   17388:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
   1738a:	95 83       	std	Z+5, r25	; 0x05
   1738c:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
   1738e:	8e e4       	ldi	r24, 0x4E	; 78
   17390:	9b e6       	ldi	r25, 0x6B	; 107
   17392:	97 83       	std	Z+7, r25	; 0x07
   17394:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
   17396:	20 e8       	ldi	r18, 0x80	; 128
   17398:	30 e0       	ldi	r19, 0x00	; 0
   1739a:	31 87       	std	Z+9, r19	; 0x09
   1739c:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
   1739e:	13 86       	std	Z+11, r1	; 0x0b
   173a0:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   173a2:	4f bf       	out	0x3f, r20	; 63
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
   173a4:	e2 ec       	ldi	r30, 0xC2	; 194
   173a6:	fa e6       	ldi	r31, 0x6A	; 106
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   173a8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   173aa:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
   173ac:	82 e4       	ldi	r24, 0x42	; 66
   173ae:	9a e6       	ldi	r25, 0x6A	; 106
   173b0:	91 83       	std	Z+1, r25	; 0x01
   173b2:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
   173b4:	93 83       	std	Z+3, r25	; 0x03
   173b6:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
   173b8:	95 83       	std	Z+5, r25	; 0x05
   173ba:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
   173bc:	82 ec       	ldi	r24, 0xC2	; 194
   173be:	9a e6       	ldi	r25, 0x6A	; 106
   173c0:	97 83       	std	Z+7, r25	; 0x07
   173c2:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
   173c4:	31 87       	std	Z+9, r19	; 0x09
   173c6:	20 87       	std	Z+8, r18	; 0x08
			Buffer->Count  = 0;
   173c8:	13 86       	std	Z+11, r1	; 0x0b
   173ca:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   173cc:	4f bf       	out	0x3f, r20	; 63
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
   173ce:	8b b1       	in	r24, 0x0b	; 11
   173d0:	8f 70       	andi	r24, 0x0F	; 15
   173d2:	80 61       	ori	r24, 0x10	; 16
   173d4:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   173d6:	78 94       	sei
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
   173d8:	0f 2e       	mov	r0, r31
   173da:	fe e4       	ldi	r31, 0x4E	; 78
   173dc:	ef 2e       	mov	r14, r31
   173de:	fb e6       	ldi	r31, 0x6B	; 107
   173e0:	ff 2e       	mov	r15, r31
   173e2:	f0 2d       	mov	r31, r0
   173e4:	02 ec       	ldi	r16, 0xC2	; 194
   173e6:	1a e6       	ldi	r17, 0x6A	; 106
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   173e8:	0f 2e       	mov	r0, r31
   173ea:	f9 ee       	ldi	r31, 0xE9	; 233
   173ec:	af 2e       	mov	r10, r31
   173ee:	b1 2c       	mov	r11, r1
   173f0:	f0 2d       	mov	r31, r0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   173f2:	0f 2e       	mov	r0, r31
   173f4:	f8 ee       	ldi	r31, 0xE8	; 232
   173f6:	cf 2e       	mov	r12, r31
   173f8:	d1 2c       	mov	r13, r1
   173fa:	f0 2d       	mov	r31, r0
			// until it completes as there is a chance nothing is listening and a lengthy timeout could occur
			if (Endpoint_IsINReady())
			{
				// Never send more than one bank size less one byte to the host at a time, so that we don't block
				// while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
   173fc:	0f 2e       	mov	r0, r31
   173fe:	ff e0       	ldi	r31, 0x0F	; 15
   17400:	5f 2e       	mov	r5, r31
   17402:	f0 2d       	mov	r31, r0
   17404:	61 2c       	mov	r6, r1
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
   17406:	c8 ec       	ldi	r28, 0xC8	; 200
   17408:	d0 e0       	ldi	r29, 0x00	; 0
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
				UDR1 = DataByte;
   1740a:	0f 2e       	mov	r0, r31
   1740c:	fe ec       	ldi	r31, 0xCE	; 206
   1740e:	8f 2e       	mov	r8, r31
   17410:	91 2c       	mov	r9, r1
   17412:	f0 2d       	mov	r31, r0
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   17414:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   17416:	f8 94       	cli
   17418:	d7 01       	movw	r26, r14
   1741a:	1a 96       	adiw	r26, 0x0a	; 10
   1741c:	2d 91       	ld	r18, X+
   1741e:	3c 91       	ld	r19, X
   17420:	1b 97       	sbiw	r26, 0x0b	; 11
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   17422:	8f bf       	out	0x3f, r24	; 63
	GlobalInterruptEnable();

	for (;;)
	{
		// Only try to read in bytes from the CDC interface if the transmit buffer is not full
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
   17424:	f7 01       	movw	r30, r14
   17426:	80 85       	ldd	r24, Z+8	; 0x08
   17428:	91 85       	ldd	r25, Z+9	; 0x09
   1742a:	28 17       	cp	r18, r24
   1742c:	39 07       	cpc	r19, r25
   1742e:	f9 f0       	breq	.+62     	; 0x1746e <main+0xfa>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
   17430:	80 e0       	ldi	r24, 0x00	; 0
   17432:	91 e0       	ldi	r25, 0x01	; 1
   17434:	da d1       	rcall	.+948    	; 0x177ea <CDC_Device_ReceiveByte>

			// Store received byte into the USART transmit buffer
			if (!(ReceivedByte < 0))
   17436:	99 23       	and	r25, r25
   17438:	d4 f0       	brlt	.+52     	; 0x1746e <main+0xfa>
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
   1743a:	f7 01       	movw	r30, r14

			*Buffer->In = Data;
   1743c:	a0 81       	ld	r26, Z
   1743e:	b1 81       	ldd	r27, Z+1	; 0x01
   17440:	8c 93       	st	X, r24

			if (++Buffer->In == Buffer->End)
   17442:	80 81       	ld	r24, Z
   17444:	91 81       	ldd	r25, Z+1	; 0x01
   17446:	01 96       	adiw	r24, 0x01	; 1
   17448:	91 83       	std	Z+1, r25	; 0x01
   1744a:	80 83       	st	Z, r24
   1744c:	26 81       	ldd	r18, Z+6	; 0x06
   1744e:	37 81       	ldd	r19, Z+7	; 0x07
   17450:	82 17       	cp	r24, r18
   17452:	93 07       	cpc	r25, r19
   17454:	21 f4       	brne	.+8      	; 0x1745e <main+0xea>
			  Buffer->In = Buffer->Start;
   17456:	84 81       	ldd	r24, Z+4	; 0x04
   17458:	95 81       	ldd	r25, Z+5	; 0x05
   1745a:	91 83       	std	Z+1, r25	; 0x01
   1745c:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1745e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   17460:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
   17462:	82 85       	ldd	r24, Z+10	; 0x0a
   17464:	93 85       	ldd	r25, Z+11	; 0x0b
   17466:	01 96       	adiw	r24, 0x01	; 1
   17468:	93 87       	std	Z+11, r25	; 0x0b
   1746a:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1746c:	2f bf       	out	0x3f, r18	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1746e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   17470:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
   17472:	d8 01       	movw	r26, r16
   17474:	1a 96       	adiw	r26, 0x0a	; 10
   17476:	8d 91       	ld	r24, X+
   17478:	9c 91       	ld	r25, X
   1747a:	1b 97       	sbiw	r26, 0x0b	; 11
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1747c:	2f bf       	out	0x3f, r18	; 63
		
		
		// !!! CONTINUE !!!

		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if (BufferCount)
   1747e:	00 97       	sbiw	r24, 0x00	; 0
   17480:	a9 f1       	breq	.+106    	; 0x174ec <main+0x178>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   17482:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <VirtualSerial_CDC_Interface+0x1>
   17486:	2f 70       	andi	r18, 0x0F	; 15
   17488:	f5 01       	movw	r30, r10
   1748a:	20 83       	st	Z, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1748c:	d6 01       	movw	r26, r12
   1748e:	2c 91       	ld	r18, X
		{
			Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

			// Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
			// until it completes as there is a chance nothing is listening and a lengthy timeout could occur
			if (Endpoint_IsINReady())
   17490:	20 ff       	sbrs	r18, 0
   17492:	2c c0       	rjmp	.+88     	; 0x174ec <main+0x178>
			{
				// Never send more than one bank size less one byte to the host at a time, so that we don't block
				// while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
   17494:	80 31       	cpi	r24, 0x10	; 16
   17496:	91 05       	cpc	r25, r1
   17498:	08 f0       	brcs	.+2      	; 0x1749c <main+0x128>
   1749a:	85 2d       	mov	r24, r5

				// Read bytes from the USART receive buffer into the USB IN endpoint
				while (BytesToSend--)
   1749c:	88 23       	and	r24, r24
   1749e:	31 f1       	breq	.+76     	; 0x174ec <main+0x178>
   174a0:	78 2e       	mov	r7, r24
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
   174a2:	d8 01       	movw	r26, r16
   174a4:	12 96       	adiw	r26, 0x02	; 2
   174a6:	ed 91       	ld	r30, X+
   174a8:	fc 91       	ld	r31, X
   174aa:	13 97       	sbiw	r26, 0x03	; 3
				{
					// Try to send the next byte of data to the host, abort if there is an error without dequeuing
					if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Peek(&USARTtoUSB_Buffer)) != ENDPOINT_READYWAIT_NoError) { break; }
   174ac:	60 81       	ld	r22, Z
   174ae:	80 e0       	ldi	r24, 0x00	; 0
   174b0:	91 e0       	ldi	r25, 0x01	; 1
   174b2:	2e d1       	rcall	.+604    	; 0x17710 <CDC_Device_SendByte>
   174b4:	81 11       	cpse	r24, r1
   174b6:	1a c0       	rjmp	.+52     	; 0x174ec <main+0x178>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
   174b8:	f8 01       	movw	r30, r16

			uint8_t Data = *Buffer->Out;

			if (++Buffer->Out == Buffer->End)
   174ba:	82 81       	ldd	r24, Z+2	; 0x02
   174bc:	93 81       	ldd	r25, Z+3	; 0x03
   174be:	01 96       	adiw	r24, 0x01	; 1
   174c0:	93 83       	std	Z+3, r25	; 0x03
   174c2:	82 83       	std	Z+2, r24	; 0x02
   174c4:	26 81       	ldd	r18, Z+6	; 0x06
   174c6:	37 81       	ldd	r19, Z+7	; 0x07
   174c8:	82 17       	cp	r24, r18
   174ca:	93 07       	cpc	r25, r19
   174cc:	21 f4       	brne	.+8      	; 0x174d6 <main+0x162>
			  Buffer->Out = Buffer->Start;
   174ce:	84 81       	ldd	r24, Z+4	; 0x04
   174d0:	95 81       	ldd	r25, Z+5	; 0x05
   174d2:	93 83       	std	Z+3, r25	; 0x03
   174d4:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   174d6:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   174d8:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
   174da:	82 85       	ldd	r24, Z+10	; 0x0a
   174dc:	93 85       	ldd	r25, Z+11	; 0x0b
   174de:	01 97       	sbiw	r24, 0x01	; 1
   174e0:	93 87       	std	Z+11, r25	; 0x0b
   174e2:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   174e4:	2f bf       	out	0x3f, r18	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
   174e6:	7a 94       	dec	r7
				// Never send more than one bank size less one byte to the host at a time, so that we don't block
				// while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening
				uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

				// Read bytes from the USART receive buffer into the USB IN endpoint
				while (BytesToSend--)
   174e8:	71 10       	cpse	r7, r1
   174ea:	db cf       	rjmp	.-74     	; 0x174a2 <main+0x12e>
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
   174ec:	88 81       	ld	r24, Y
				}
			}
		}

		// Load the next byte from the USART transmit buffer into the USART if transmit buffer space is available
		if (Serial_IsSendReady() && !(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
   174ee:	85 ff       	sbrs	r24, 5
   174f0:	23 c0       	rjmp	.+70     	; 0x17538 <main+0x1c4>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   174f2:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   174f4:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
   174f6:	f7 01       	movw	r30, r14
   174f8:	82 85       	ldd	r24, Z+10	; 0x0a
   174fa:	93 85       	ldd	r25, Z+11	; 0x0b
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   174fc:	2f bf       	out	0x3f, r18	; 63
   174fe:	89 2b       	or	r24, r25
   17500:	d9 f0       	breq	.+54     	; 0x17538 <main+0x1c4>
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);

			uint8_t Data = *Buffer->Out;
   17502:	a2 81       	ldd	r26, Z+2	; 0x02
   17504:	b3 81       	ldd	r27, Z+3	; 0x03
   17506:	2d 91       	ld	r18, X+

			if (++Buffer->Out == Buffer->End)
   17508:	b3 83       	std	Z+3, r27	; 0x03
   1750a:	a2 83       	std	Z+2, r26	; 0x02
   1750c:	86 81       	ldd	r24, Z+6	; 0x06
   1750e:	97 81       	ldd	r25, Z+7	; 0x07
   17510:	a8 17       	cp	r26, r24
   17512:	b9 07       	cpc	r27, r25
   17514:	21 f4       	brne	.+8      	; 0x1751e <main+0x1aa>
			  Buffer->Out = Buffer->Start;
   17516:	84 81       	ldd	r24, Z+4	; 0x04
   17518:	95 81       	ldd	r25, Z+5	; 0x05
   1751a:	93 83       	std	Z+3, r25	; 0x03
   1751c:	82 83       	std	Z+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1751e:	3f b7       	in	r19, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   17520:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
   17522:	82 85       	ldd	r24, Z+10	; 0x0a
   17524:	93 85       	ldd	r25, Z+11	; 0x0b
   17526:	01 97       	sbiw	r24, 0x01	; 1
   17528:	93 87       	std	Z+11, r25	; 0x0b
   1752a:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1752c:	3f bf       	out	0x3f, r19	; 63
   1752e:	88 81       	ld	r24, Y
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
   17530:	85 ff       	sbrs	r24, 5
   17532:	fd cf       	rjmp	.-6      	; 0x1752e <main+0x1ba>
				UDR1 = DataByte;
   17534:	d4 01       	movw	r26, r8
		{
			Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
		}

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
   17536:	2c 93       	st	X, r18
   17538:	80 e0       	ldi	r24, 0x00	; 0
   1753a:	91 e0       	ldi	r25, 0x01	; 1
		USB_USBTask();
   1753c:	3f d1       	rcall	.+638    	; 0x177bc <CDC_Device_USBTask>
   1753e:	2f d7       	rcall	.+3678   	; 0x1839e <USB_USBTask>
	}
   17540:	69 cf       	rjmp	.-302    	; 0x17414 <main+0xa0>

00017542 <EVENT_USB_Device_Connect>:
   17542:	8b b1       	in	r24, 0x0b	; 11
   17544:	8f 70       	andi	r24, 0x0F	; 15
   17546:	80 6a       	ori	r24, 0xA0	; 160
   17548:	8b b9       	out	0x0b, r24	; 11
   1754a:	08 95       	ret

0001754c <EVENT_USB_Device_Disconnect>:
   1754c:	8b b1       	in	r24, 0x0b	; 11
   1754e:	8f 70       	andi	r24, 0x0F	; 15
   17550:	80 61       	ori	r24, 0x10	; 16
   17552:	8b b9       	out	0x0b, r24	; 11
   17554:	08 95       	ret

00017556 <EVENT_USB_Device_ConfigurationChanged>:

// Event handler for the library USB Configuration Changed event.
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
   17556:	80 e0       	ldi	r24, 0x00	; 0
   17558:	91 e0       	ldi	r25, 0x01	; 1
   1755a:	b8 d0       	rcall	.+368    	; 0x176cc <CDC_Device_ConfigureEndpoints>
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
   1755c:	81 11       	cpse	r24, r1
   1755e:	02 c0       	rjmp	.+4      	; 0x17564 <EVENT_USB_Device_ConfigurationChanged+0xe>
   17560:	90 e9       	ldi	r25, 0x90	; 144
   17562:	01 c0       	rjmp	.+2      	; 0x17566 <EVENT_USB_Device_ConfigurationChanged+0x10>
   17564:	90 e6       	ldi	r25, 0x60	; 96
   17566:	8b b1       	in	r24, 0x0b	; 11
   17568:	8f 70       	andi	r24, 0x0F	; 15
   1756a:	89 2b       	or	r24, r25
   1756c:	8b b9       	out	0x0b, r24	; 11
   1756e:	08 95       	ret

00017570 <EVENT_USB_Device_ControlRequest>:
}

// Event handler for the library USB Control Request reception event.
void EVENT_USB_Device_ControlRequest(void) { CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface); }
   17570:	80 e0       	ldi	r24, 0x00	; 0
   17572:	91 e0       	ldi	r25, 0x01	; 1
   17574:	75 c1       	rjmp	.+746    	; 0x17860 <CDC_Device_ProcessControlRequest>
   17576:	08 95       	ret

00017578 <__vector_25>:

// ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
// for later transmission to the host.
ISR(USART1_RX_vect, ISR_BLOCK)
{
   17578:	1f 92       	push	r1
   1757a:	0f 92       	push	r0
   1757c:	0f b6       	in	r0, 0x3f	; 63
   1757e:	0f 92       	push	r0
   17580:	11 24       	eor	r1, r1
   17582:	0b b6       	in	r0, 0x3b	; 59
   17584:	0f 92       	push	r0
   17586:	2f 93       	push	r18
   17588:	3f 93       	push	r19
   1758a:	4f 93       	push	r20
   1758c:	5f 93       	push	r21
   1758e:	8f 93       	push	r24
   17590:	9f 93       	push	r25
   17592:	af 93       	push	r26
   17594:	bf 93       	push	r27
   17596:	ef 93       	push	r30
   17598:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
   1759a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6fffce>
	if ((USB_DeviceState == DEVICE_STATE_Configured) && !(RingBuffer_IsFull(&USARTtoUSB_Buffer)))
   1759e:	8e b3       	in	r24, 0x1e	; 30
   175a0:	84 30       	cpi	r24, 0x04	; 4
   175a2:	29 f5       	brne	.+74     	; 0x175ee <__vector_25+0x76>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   175a4:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   175a6:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
   175a8:	e2 ec       	ldi	r30, 0xC2	; 194
   175aa:	fa e6       	ldi	r31, 0x6A	; 106
   175ac:	42 85       	ldd	r20, Z+10	; 0x0a
   175ae:	53 85       	ldd	r21, Z+11	; 0x0b
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   175b0:	8f bf       	out	0x3f, r24	; 63
   175b2:	20 85       	ldd	r18, Z+8	; 0x08
   175b4:	31 85       	ldd	r19, Z+9	; 0x09
   175b6:	42 17       	cp	r20, r18
   175b8:	53 07       	cpc	r21, r19
   175ba:	c9 f0       	breq	.+50     	; 0x175ee <__vector_25+0x76>
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer,
		                                     const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);

			*Buffer->In = Data;
   175bc:	a0 81       	ld	r26, Z
   175be:	b1 81       	ldd	r27, Z+1	; 0x01
   175c0:	9c 93       	st	X, r25

			if (++Buffer->In == Buffer->End)
   175c2:	80 81       	ld	r24, Z
   175c4:	91 81       	ldd	r25, Z+1	; 0x01
   175c6:	01 96       	adiw	r24, 0x01	; 1
   175c8:	91 83       	std	Z+1, r25	; 0x01
   175ca:	80 83       	st	Z, r24
   175cc:	26 81       	ldd	r18, Z+6	; 0x06
   175ce:	37 81       	ldd	r19, Z+7	; 0x07
   175d0:	82 17       	cp	r24, r18
   175d2:	93 07       	cpc	r25, r19
   175d4:	21 f4       	brne	.+8      	; 0x175de <__vector_25+0x66>
			  Buffer->In = Buffer->Start;
   175d6:	84 81       	ldd	r24, Z+4	; 0x04
   175d8:	95 81       	ldd	r25, Z+5	; 0x05
   175da:	91 83       	std	Z+1, r25	; 0x01
   175dc:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   175de:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   175e0:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
   175e2:	82 85       	ldd	r24, Z+10	; 0x0a
   175e4:	93 85       	ldd	r25, Z+11	; 0x0b
   175e6:	01 96       	adiw	r24, 0x01	; 1
   175e8:	93 87       	std	Z+11, r25	; 0x0b
   175ea:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   175ec:	2f bf       	out	0x3f, r18	; 63
	{
        RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
	}
}
   175ee:	ff 91       	pop	r31
   175f0:	ef 91       	pop	r30
   175f2:	bf 91       	pop	r27
   175f4:	af 91       	pop	r26
   175f6:	9f 91       	pop	r25
   175f8:	8f 91       	pop	r24
   175fa:	5f 91       	pop	r21
   175fc:	4f 91       	pop	r20
   175fe:	3f 91       	pop	r19
   17600:	2f 91       	pop	r18
   17602:	0f 90       	pop	r0
   17604:	0b be       	out	0x3b, r0	; 59
   17606:	0f 90       	pop	r0
   17608:	0f be       	out	0x3f, r0	; 63
   1760a:	0f 90       	pop	r0
   1760c:	1f 90       	pop	r1
   1760e:	18 95       	reti

00017610 <EVENT_CDC_Device_LineEncodingChanged>:

// Event handler for the CDC Class driver Line Encoding Changed event.
// \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   17610:	cf 92       	push	r12
   17612:	df 92       	push	r13
   17614:	ef 92       	push	r14
   17616:	ff 92       	push	r15
   17618:	0f 93       	push	r16
   1761a:	1f 93       	push	r17
   1761c:	cf 93       	push	r28
   1761e:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
   17620:	81 8d       	ldd	r24, Z+25	; 0x19
   17622:	81 30       	cpi	r24, 0x01	; 1
   17624:	19 f0       	breq	.+6      	; 0x1762c <EVENT_CDC_Device_LineEncodingChanged+0x1c>
   17626:	82 30       	cpi	r24, 0x02	; 2
   17628:	19 f0       	breq	.+6      	; 0x17630 <EVENT_CDC_Device_LineEncodingChanged+0x20>
   1762a:	04 c0       	rjmp	.+8      	; 0x17634 <EVENT_CDC_Device_LineEncodingChanged+0x24>
	{
		case (CDC_PARITY_Odd): { ConfigMask = ((1 << UPM11) | (1 << UPM10)); } break;
   1762c:	c0 e3       	ldi	r28, 0x30	; 48
   1762e:	03 c0       	rjmp	.+6      	; 0x17636 <EVENT_CDC_Device_LineEncodingChanged+0x26>
		case (CDC_PARITY_Even): { ConfigMask = (1 << UPM11); } break;
   17630:	c0 e2       	ldi	r28, 0x20	; 32
   17632:	01 c0       	rjmp	.+2      	; 0x17636 <EVENT_CDC_Device_LineEncodingChanged+0x26>

// Event handler for the CDC Class driver Line Encoding Changed event.
// \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	uint8_t ConfigMask = 0;
   17634:	c0 e0       	ldi	r28, 0x00	; 0
		case (CDC_PARITY_Odd): { ConfigMask = ((1 << UPM11) | (1 << UPM10)); } break;
		case (CDC_PARITY_Even): { ConfigMask = (1 << UPM11); } break;
		default: { } break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits) { ConfigMask |= (1 << USBS1); }
   17636:	80 8d       	ldd	r24, Z+24	; 0x18
   17638:	82 30       	cpi	r24, 0x02	; 2
   1763a:	09 f4       	brne	.+2      	; 0x1763e <EVENT_CDC_Device_LineEncodingChanged+0x2e>
   1763c:	c8 60       	ori	r28, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
   1763e:	82 8d       	ldd	r24, Z+26	; 0x1a
   17640:	87 30       	cpi	r24, 0x07	; 7
   17642:	31 f0       	breq	.+12     	; 0x17650 <EVENT_CDC_Device_LineEncodingChanged+0x40>
   17644:	88 30       	cpi	r24, 0x08	; 8
   17646:	31 f0       	breq	.+12     	; 0x17654 <EVENT_CDC_Device_LineEncodingChanged+0x44>
   17648:	86 30       	cpi	r24, 0x06	; 6
   1764a:	29 f4       	brne	.+10     	; 0x17656 <EVENT_CDC_Device_LineEncodingChanged+0x46>
	{
		case (6): { ConfigMask |= (1 << UCSZ10); } break;
   1764c:	c2 60       	ori	r28, 0x02	; 2
   1764e:	03 c0       	rjmp	.+6      	; 0x17656 <EVENT_CDC_Device_LineEncodingChanged+0x46>
		case (7): { ConfigMask |= (1 << UCSZ11); } break;
   17650:	c4 60       	ori	r28, 0x04	; 4
   17652:	01 c0       	rjmp	.+2      	; 0x17656 <EVENT_CDC_Device_LineEncodingChanged+0x46>
		case (8): { ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10)); } break;
   17654:	c6 60       	ori	r28, 0x06	; 6
		default: { } break;
	}

	// Keep the TX line held high (idle) while the USART is reconfigured
	PORTD |= (1 << 3);
   17656:	5b 9a       	sbi	0x0b, 3	; 11

	// Must turn off USART before reconfiguring it, otherwise incorrect operation may occur
	UCSR1B = 0;
   17658:	09 ec       	ldi	r16, 0xC9	; 201
   1765a:	10 e0       	ldi	r17, 0x00	; 0
   1765c:	d8 01       	movw	r26, r16
   1765e:	1c 92       	st	X, r1
	UCSR1A = 0;
   17660:	0f 2e       	mov	r0, r31
   17662:	f8 ec       	ldi	r31, 0xC8	; 200
   17664:	ef 2e       	mov	r14, r31
   17666:	f1 2c       	mov	r15, r1
   17668:	f0 2d       	mov	r31, r0
   1766a:	d7 01       	movw	r26, r14
   1766c:	1c 92       	st	X, r1
	UCSR1C = 0;
   1766e:	0f 2e       	mov	r0, r31
   17670:	fa ec       	ldi	r31, 0xCA	; 202
   17672:	cf 2e       	mov	r12, r31
   17674:	d1 2c       	mov	r13, r1
   17676:	f0 2d       	mov	r31, r0
   17678:	d6 01       	movw	r26, r12
   1767a:	1c 92       	st	X, r1

	// Set the new baud rate before configuring the USART
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
   1767c:	24 89       	ldd	r18, Z+20	; 0x14
   1767e:	35 89       	ldd	r19, Z+21	; 0x15
   17680:	46 89       	ldd	r20, Z+22	; 0x16
   17682:	57 89       	ldd	r21, Z+23	; 0x17
   17684:	da 01       	movw	r26, r20
   17686:	c9 01       	movw	r24, r18
   17688:	b6 95       	lsr	r27
   1768a:	a7 95       	ror	r26
   1768c:	97 95       	ror	r25
   1768e:	87 95       	ror	r24
   17690:	bc 01       	movw	r22, r24
   17692:	cd 01       	movw	r24, r26
   17694:	60 5c       	subi	r22, 0xC0	; 192
   17696:	7d 4b       	sbci	r23, 0xBD	; 189
   17698:	80 4f       	sbci	r24, 0xF0	; 240
   1769a:	9f 4f       	sbci	r25, 0xFF	; 255
   1769c:	c0 d6       	rcall	.+3456   	; 0x1841e <__udivmodsi4>
   1769e:	21 50       	subi	r18, 0x01	; 1
   176a0:	31 09       	sbc	r19, r1
   176a2:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6fffcd>
   176a6:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6fffcc>

	// Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy
	UCSR1C = ConfigMask;
   176aa:	f6 01       	movw	r30, r12
   176ac:	c0 83       	st	Z, r28
	UCSR1A = (1 << U2X1);
   176ae:	82 e0       	ldi	r24, 0x02	; 2
   176b0:	d7 01       	movw	r26, r14
   176b2:	8c 93       	st	X, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
   176b4:	88 e9       	ldi	r24, 0x98	; 152
   176b6:	f8 01       	movw	r30, r16
   176b8:	80 83       	st	Z, r24

	// Release the TX line after the USART has been reconfigured
	PORTD &= ~(1 << 3);
   176ba:	5b 98       	cbi	0x0b, 3	; 11
}
   176bc:	cf 91       	pop	r28
   176be:	1f 91       	pop	r17
   176c0:	0f 91       	pop	r16
   176c2:	ff 90       	pop	r15
   176c4:	ef 90       	pop	r14
   176c6:	df 90       	pop	r13
   176c8:	cf 90       	pop	r12
   176ca:	08 95       	ret

000176cc <CDC_Device_ConfigureEndpoints>:

void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                                     FILE* const Stream)
{
	*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
	fdev_set_udata(Stream, CDCInterfaceInfo);
   176cc:	cf 93       	push	r28
   176ce:	df 93       	push	r29
   176d0:	ec 01       	movw	r28, r24
   176d2:	fc 01       	movw	r30, r24
   176d4:	70 96       	adiw	r30, 0x10	; 16
   176d6:	8b e0       	ldi	r24, 0x0B	; 11
   176d8:	df 01       	movw	r26, r30
   176da:	1d 92       	st	X+, r1
   176dc:	8a 95       	dec	r24
   176de:	e9 f7       	brne	.-6      	; 0x176da <CDC_Device_ConfigureEndpoints+0xe>
   176e0:	82 e0       	ldi	r24, 0x02	; 2
   176e2:	8c 83       	std	Y+4, r24	; 0x04
   176e4:	89 87       	std	Y+9, r24	; 0x09
   176e6:	83 e0       	ldi	r24, 0x03	; 3
   176e8:	8e 87       	std	Y+14, r24	; 0x0e
   176ea:	61 e0       	ldi	r22, 0x01	; 1
   176ec:	ce 01       	movw	r24, r28
   176ee:	01 96       	adiw	r24, 0x01	; 1
   176f0:	b7 d2       	rcall	.+1390   	; 0x17c60 <Endpoint_ConfigureEndpointTable>
   176f2:	88 23       	and	r24, r24
   176f4:	51 f0       	breq	.+20     	; 0x1770a <CDC_Device_ConfigureEndpoints+0x3e>
   176f6:	61 e0       	ldi	r22, 0x01	; 1
   176f8:	ce 01       	movw	r24, r28
   176fa:	06 96       	adiw	r24, 0x06	; 6
   176fc:	b1 d2       	rcall	.+1378   	; 0x17c60 <Endpoint_ConfigureEndpointTable>
   176fe:	88 23       	and	r24, r24
   17700:	21 f0       	breq	.+8      	; 0x1770a <CDC_Device_ConfigureEndpoints+0x3e>
   17702:	61 e0       	ldi	r22, 0x01	; 1
   17704:	ce 01       	movw	r24, r28
   17706:	0b 96       	adiw	r24, 0x0b	; 11
   17708:	ab d2       	rcall	.+1366   	; 0x17c60 <Endpoint_ConfigureEndpointTable>
   1770a:	df 91       	pop	r29
   1770c:	cf 91       	pop	r28
   1770e:	08 95       	ret

00017710 <CDC_Device_SendByte>:
   17710:	cf 93       	push	r28
   17712:	fc 01       	movw	r30, r24
   17714:	9e b3       	in	r25, 0x1e	; 30
   17716:	94 30       	cpi	r25, 0x04	; 4
   17718:	e9 f4       	brne	.+58     	; 0x17754 <CDC_Device_SendByte+0x44>
   1771a:	84 89       	ldd	r24, Z+20	; 0x14
   1771c:	95 89       	ldd	r25, Z+21	; 0x15
   1771e:	a6 89       	ldd	r26, Z+22	; 0x16
   17720:	b7 89       	ldd	r27, Z+23	; 0x17
   17722:	89 2b       	or	r24, r25
   17724:	8a 2b       	or	r24, r26
   17726:	8b 2b       	or	r24, r27
   17728:	b9 f0       	breq	.+46     	; 0x17758 <CDC_Device_SendByte+0x48>
   1772a:	c6 2f       	mov	r28, r22
   1772c:	81 81       	ldd	r24, Z+1	; 0x01
   1772e:	8f 70       	andi	r24, 0x0F	; 15
   17730:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   17734:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>
   17738:	85 fd       	sbrc	r24, 5
   1773a:	08 c0       	rjmp	.+16     	; 0x1774c <CDC_Device_SendByte+0x3c>
   1773c:	e8 ee       	ldi	r30, 0xE8	; 232
   1773e:	f0 e0       	ldi	r31, 0x00	; 0
   17740:	80 81       	ld	r24, Z
   17742:	8e 77       	andi	r24, 0x7E	; 126
   17744:	80 83       	st	Z, r24
   17746:	fd d2       	rcall	.+1530   	; 0x17d42 <Endpoint_WaitUntilReady>
   17748:	81 11       	cpse	r24, r1
   1774a:	07 c0       	rjmp	.+14     	; 0x1775a <CDC_Device_SendByte+0x4a>
   1774c:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x6ffff1>
   17750:	80 e0       	ldi	r24, 0x00	; 0
   17752:	03 c0       	rjmp	.+6      	; 0x1775a <CDC_Device_SendByte+0x4a>
   17754:	82 e0       	ldi	r24, 0x02	; 2
   17756:	01 c0       	rjmp	.+2      	; 0x1775a <CDC_Device_SendByte+0x4a>
   17758:	82 e0       	ldi	r24, 0x02	; 2
   1775a:	cf 91       	pop	r28
   1775c:	08 95       	ret

0001775e <CDC_Device_Flush>:
   1775e:	fc 01       	movw	r30, r24
   17760:	9e b3       	in	r25, 0x1e	; 30
   17762:	94 30       	cpi	r25, 0x04	; 4
   17764:	19 f5       	brne	.+70     	; 0x177ac <CDC_Device_Flush+0x4e>
   17766:	84 89       	ldd	r24, Z+20	; 0x14
   17768:	95 89       	ldd	r25, Z+21	; 0x15
   1776a:	a6 89       	ldd	r26, Z+22	; 0x16
   1776c:	b7 89       	ldd	r27, Z+23	; 0x17
   1776e:	89 2b       	or	r24, r25
   17770:	8a 2b       	or	r24, r26
   17772:	8b 2b       	or	r24, r27
   17774:	e9 f0       	breq	.+58     	; 0x177b0 <CDC_Device_Flush+0x52>
   17776:	81 81       	ldd	r24, Z+1	; 0x01
   17778:	8f 70       	andi	r24, 0x0F	; 15
   1777a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   1777e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x6ffff2>
   17782:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x6ffff3>
   17786:	89 2b       	or	r24, r25
   17788:	a9 f0       	breq	.+42     	; 0x177b4 <CDC_Device_Flush+0x56>
   1778a:	e8 ee       	ldi	r30, 0xE8	; 232
   1778c:	f0 e0       	ldi	r31, 0x00	; 0
   1778e:	90 81       	ld	r25, Z
   17790:	80 81       	ld	r24, Z
   17792:	8e 77       	andi	r24, 0x7E	; 126
   17794:	80 83       	st	Z, r24
   17796:	95 fd       	sbrc	r25, 5
   17798:	0f c0       	rjmp	.+30     	; 0x177b8 <CDC_Device_Flush+0x5a>
   1779a:	d3 d2       	rcall	.+1446   	; 0x17d42 <Endpoint_WaitUntilReady>
   1779c:	81 11       	cpse	r24, r1
   1779e:	0d c0       	rjmp	.+26     	; 0x177ba <CDC_Device_Flush+0x5c>
   177a0:	e8 ee       	ldi	r30, 0xE8	; 232
   177a2:	f0 e0       	ldi	r31, 0x00	; 0
   177a4:	90 81       	ld	r25, Z
   177a6:	9e 77       	andi	r25, 0x7E	; 126
   177a8:	90 83       	st	Z, r25
   177aa:	08 95       	ret
   177ac:	82 e0       	ldi	r24, 0x02	; 2
   177ae:	08 95       	ret
   177b0:	82 e0       	ldi	r24, 0x02	; 2
   177b2:	08 95       	ret
   177b4:	80 e0       	ldi	r24, 0x00	; 0
   177b6:	08 95       	ret
   177b8:	80 e0       	ldi	r24, 0x00	; 0
   177ba:	08 95       	ret

000177bc <CDC_Device_USBTask>:
   177bc:	fc 01       	movw	r30, r24
   177be:	9e b3       	in	r25, 0x1e	; 30
   177c0:	94 30       	cpi	r25, 0x04	; 4
   177c2:	91 f4       	brne	.+36     	; 0x177e8 <CDC_Device_USBTask+0x2c>
   177c4:	84 89       	ldd	r24, Z+20	; 0x14
   177c6:	95 89       	ldd	r25, Z+21	; 0x15
   177c8:	a6 89       	ldd	r26, Z+22	; 0x16
   177ca:	b7 89       	ldd	r27, Z+23	; 0x17
   177cc:	89 2b       	or	r24, r25
   177ce:	8a 2b       	or	r24, r26
   177d0:	8b 2b       	or	r24, r27
   177d2:	51 f0       	breq	.+20     	; 0x177e8 <CDC_Device_USBTask+0x2c>
   177d4:	81 81       	ldd	r24, Z+1	; 0x01
   177d6:	8f 70       	andi	r24, 0x0F	; 15
   177d8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   177dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>
   177e0:	80 ff       	sbrs	r24, 0
   177e2:	02 c0       	rjmp	.+4      	; 0x177e8 <CDC_Device_USBTask+0x2c>
   177e4:	cf 01       	movw	r24, r30
   177e6:	bb cf       	rjmp	.-138    	; 0x1775e <CDC_Device_Flush>
   177e8:	08 95       	ret

000177ea <CDC_Device_ReceiveByte>:
   177ea:	2e b3       	in	r18, 0x1e	; 30
   177ec:	24 30       	cpi	r18, 0x04	; 4
   177ee:	59 f5       	brne	.+86     	; 0x17846 <CDC_Device_ReceiveByte+0x5c>
   177f0:	fc 01       	movw	r30, r24
   177f2:	44 89       	ldd	r20, Z+20	; 0x14
   177f4:	55 89       	ldd	r21, Z+21	; 0x15
   177f6:	66 89       	ldd	r22, Z+22	; 0x16
   177f8:	77 89       	ldd	r23, Z+23	; 0x17
   177fa:	45 2b       	or	r20, r21
   177fc:	46 2b       	or	r20, r22
   177fe:	47 2b       	or	r20, r23
   17800:	29 f1       	breq	.+74     	; 0x1784c <CDC_Device_ReceiveByte+0x62>
   17802:	86 81       	ldd	r24, Z+6	; 0x06
   17804:	8f 70       	andi	r24, 0x0F	; 15
   17806:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   1780a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>
   1780e:	82 ff       	sbrs	r24, 2
   17810:	20 c0       	rjmp	.+64     	; 0x17852 <CDC_Device_ReceiveByte+0x68>
   17812:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x6ffff2>
   17816:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x6ffff3>
   1781a:	89 2b       	or	r24, r25
   1781c:	21 f0       	breq	.+8      	; 0x17826 <CDC_Device_ReceiveByte+0x3c>
   1781e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x6ffff1>
   17822:	30 e0       	ldi	r19, 0x00	; 0
   17824:	02 c0       	rjmp	.+4      	; 0x1782a <CDC_Device_ReceiveByte+0x40>
   17826:	2f ef       	ldi	r18, 0xFF	; 255
   17828:	3f ef       	ldi	r19, 0xFF	; 255
   1782a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x6ffff2>
   1782e:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x6ffff3>
   17832:	89 2b       	or	r24, r25
   17834:	89 f4       	brne	.+34     	; 0x17858 <CDC_Device_ReceiveByte+0x6e>
   17836:	e8 ee       	ldi	r30, 0xE8	; 232
   17838:	f0 e0       	ldi	r31, 0x00	; 0
   1783a:	80 81       	ld	r24, Z
   1783c:	8b 77       	andi	r24, 0x7B	; 123
   1783e:	80 83       	st	Z, r24
   17840:	82 2f       	mov	r24, r18
   17842:	93 2f       	mov	r25, r19
   17844:	08 95       	ret
   17846:	8f ef       	ldi	r24, 0xFF	; 255
   17848:	9f ef       	ldi	r25, 0xFF	; 255
   1784a:	08 95       	ret
   1784c:	8f ef       	ldi	r24, 0xFF	; 255
   1784e:	9f ef       	ldi	r25, 0xFF	; 255
   17850:	08 95       	ret
   17852:	8f ef       	ldi	r24, 0xFF	; 255
   17854:	9f ef       	ldi	r25, 0xFF	; 255
   17856:	08 95       	ret
   17858:	82 2f       	mov	r24, r18
   1785a:	93 2f       	mov	r25, r19
   1785c:	08 95       	ret

0001785e <CDC_Device_Event_Stub>:
	return ReceivedByte;
}
#endif

void CDC_Device_Event_Stub(void)
{
   1785e:	08 95       	ret

00017860 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
   17860:	cf 93       	push	r28
   17862:	df 93       	push	r29
   17864:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   17866:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>
	if (!(Endpoint_IsSETUPReceived()))
   1786a:	93 ff       	sbrs	r25, 3
   1786c:	95 c0       	rjmp	.+298    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
   1786e:	20 81       	ld	r18, Z
   17870:	30 e0       	ldi	r19, 0x00	; 0
   17872:	80 91 40 6c 	lds	r24, 0x6C40	; 0x806c40 <USB_ControlRequest+0x4>
   17876:	90 91 41 6c 	lds	r25, 0x6C41	; 0x806c41 <USB_ControlRequest+0x5>
   1787a:	82 17       	cp	r24, r18
   1787c:	93 07       	cpc	r25, r19
   1787e:	09 f0       	breq	.+2      	; 0x17882 <CDC_Device_ProcessControlRequest+0x22>
   17880:	8b c0       	rjmp	.+278    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
   17882:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
   17884:	80 91 3d 6c 	lds	r24, 0x6C3D	; 0x806c3d <USB_ControlRequest+0x1>
   17888:	81 32       	cpi	r24, 0x21	; 33
   1788a:	59 f0       	breq	.+22     	; 0x178a2 <CDC_Device_ProcessControlRequest+0x42>
   1788c:	18 f4       	brcc	.+6      	; 0x17894 <CDC_Device_ProcessControlRequest+0x34>
   1788e:	80 32       	cpi	r24, 0x20	; 32
   17890:	b9 f1       	breq	.+110    	; 0x17900 <CDC_Device_ProcessControlRequest+0xa0>
   17892:	82 c0       	rjmp	.+260    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
   17894:	82 32       	cpi	r24, 0x22	; 34
   17896:	09 f4       	brne	.+2      	; 0x1789a <CDC_Device_ProcessControlRequest+0x3a>
   17898:	5e c0       	rjmp	.+188    	; 0x17956 <CDC_Device_ProcessControlRequest+0xf6>
   1789a:	83 32       	cpi	r24, 0x23	; 35
   1789c:	09 f4       	brne	.+2      	; 0x178a0 <CDC_Device_ProcessControlRequest+0x40>
   1789e:	6e c0       	rjmp	.+220    	; 0x1797c <CDC_Device_ProcessControlRequest+0x11c>
   178a0:	7b c0       	rjmp	.+246    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   178a2:	80 91 3c 6c 	lds	r24, 0x6C3C	; 0x806c3c <USB_ControlRequest>
   178a6:	81 3a       	cpi	r24, 0xA1	; 161
   178a8:	09 f0       	breq	.+2      	; 0x178ac <CDC_Device_ProcessControlRequest+0x4c>
   178aa:	76 c0       	rjmp	.+236    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   178ac:	e8 ee       	ldi	r30, 0xE8	; 232
   178ae:	f0 e0       	ldi	r31, 0x00	; 0
   178b0:	80 81       	ld	r24, Z
   178b2:	87 7f       	andi	r24, 0xF7	; 247
   178b4:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   178b6:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
   178b8:	80 ff       	sbrs	r24, 0
   178ba:	fd cf       	rjmp	.-6      	; 0x178b6 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
   178bc:	8c 89       	ldd	r24, Y+20	; 0x14
   178be:	9d 89       	ldd	r25, Y+21	; 0x15
   178c0:	ae 89       	ldd	r26, Y+22	; 0x16
   178c2:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
   178c4:	e1 ef       	ldi	r30, 0xF1	; 241
   178c6:	f0 e0       	ldi	r31, 0x00	; 0
   178c8:	80 83       	st	Z, r24
				UEDATX = (Data >> 8);
   178ca:	49 2f       	mov	r20, r25
   178cc:	5a 2f       	mov	r21, r26
   178ce:	6b 2f       	mov	r22, r27
   178d0:	77 27       	eor	r23, r23
   178d2:	40 83       	st	Z, r20
				UEDATX = (Data >> 16);
   178d4:	ad 01       	movw	r20, r26
   178d6:	66 27       	eor	r22, r22
   178d8:	77 27       	eor	r23, r23
   178da:	40 83       	st	Z, r20
				UEDATX = (Data >> 24);
   178dc:	8b 2f       	mov	r24, r27
   178de:	99 27       	eor	r25, r25
   178e0:	aa 27       	eor	r26, r26
   178e2:	bb 27       	eor	r27, r27
   178e4:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
   178e6:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   178e8:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
   178ea:	89 8d       	ldd	r24, Y+25	; 0x19
   178ec:	80 83       	st	Z, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
   178ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
   178f0:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   178f2:	e8 ee       	ldi	r30, 0xE8	; 232
   178f4:	f0 e0       	ldi	r31, 0x00	; 0
   178f6:	80 81       	ld	r24, Z
   178f8:	8e 77       	andi	r24, 0x7E	; 126
   178fa:	80 83       	st	Z, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
   178fc:	00 d2       	rcall	.+1024   	; 0x17cfe <Endpoint_ClearStatusStage>
   178fe:	4c c0       	rjmp	.+152    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   17900:	80 91 3c 6c 	lds	r24, 0x6C3C	; 0x806c3c <USB_ControlRequest>
   17904:	81 32       	cpi	r24, 0x21	; 33
   17906:	09 f0       	breq	.+2      	; 0x1790a <CDC_Device_ProcessControlRequest+0xaa>
   17908:	47 c0       	rjmp	.+142    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1790a:	e8 ee       	ldi	r30, 0xE8	; 232
   1790c:	f0 e0       	ldi	r31, 0x00	; 0
   1790e:	80 81       	ld	r24, Z
   17910:	87 7f       	andi	r24, 0xF7	; 247
   17912:	80 83       	st	Z, r24
   17914:	04 c0       	rjmp	.+8      	; 0x1791e <CDC_Device_ProcessControlRequest+0xbe>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
   17916:	8e b3       	in	r24, 0x1e	; 30
   17918:	88 23       	and	r24, r24
   1791a:	09 f4       	brne	.+2      	; 0x1791e <CDC_Device_ProcessControlRequest+0xbe>
   1791c:	3d c0       	rjmp	.+122    	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1791e:	80 81       	ld	r24, Z
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
   17920:	82 ff       	sbrs	r24, 2
   17922:	f9 cf       	rjmp	.-14     	; 0x17916 <CDC_Device_ProcessControlRequest+0xb6>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
   17924:	e1 ef       	ldi	r30, 0xF1	; 241
   17926:	f0 e0       	ldi	r31, 0x00	; 0
   17928:	30 81       	ld	r19, Z
				Data.Bytes[1] = UEDATX;
   1792a:	20 81       	ld	r18, Z
				Data.Bytes[2] = UEDATX;
   1792c:	90 81       	ld	r25, Z
				Data.Bytes[3] = UEDATX;
   1792e:	80 81       	ld	r24, Z
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
   17930:	3c 8b       	std	Y+20, r19	; 0x14
   17932:	2d 8b       	std	Y+21, r18	; 0x15
   17934:	9e 8b       	std	Y+22, r25	; 0x16
   17936:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   17938:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
   1793a:	88 8f       	std	Y+24, r24	; 0x18
   1793c:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
   1793e:	89 8f       	std	Y+25, r24	; 0x19
   17940:	80 81       	ld	r24, Z
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
   17942:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   17944:	e8 ee       	ldi	r30, 0xE8	; 232
   17946:	f0 e0       	ldi	r31, 0x00	; 0
   17948:	80 81       	ld	r24, Z
   1794a:	8b 77       	andi	r24, 0x7B	; 123

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
   1794c:	80 83       	st	Z, r24

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
   1794e:	d7 d1       	rcall	.+942    	; 0x17cfe <Endpoint_ClearStatusStage>
   17950:	ce 01       	movw	r24, r28
   17952:	5e de       	rcall	.-836    	; 0x17610 <EVENT_CDC_Device_LineEncodingChanged>
   17954:	21 c0       	rjmp	.+66     	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   17956:	80 91 3c 6c 	lds	r24, 0x6C3C	; 0x806c3c <USB_ControlRequest>
   1795a:	81 32       	cpi	r24, 0x21	; 33
   1795c:	e9 f4       	brne	.+58     	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1795e:	e8 ee       	ldi	r30, 0xE8	; 232
   17960:	f0 e0       	ldi	r31, 0x00	; 0
   17962:	80 81       	ld	r24, Z
   17964:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   17966:	80 83       	st	Z, r24
   17968:	ca d1       	rcall	.+916    	; 0x17cfe <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
   1796a:	80 91 3e 6c 	lds	r24, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   1796e:	90 91 3f 6c 	lds	r25, 0x6C3F	; 0x806c3f <USB_ControlRequest+0x3>
   17972:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
   17974:	88 8b       	std	Y+16, r24	; 0x10
   17976:	ce 01       	movw	r24, r28
   17978:	72 df       	rcall	.-284    	; 0x1785e <CDC_Device_Event_Stub>
   1797a:	0e c0       	rjmp	.+28     	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1797c:	80 91 3c 6c 	lds	r24, 0x6C3C	; 0x806c3c <USB_ControlRequest>
   17980:	81 32       	cpi	r24, 0x21	; 33
   17982:	51 f4       	brne	.+20     	; 0x17998 <CDC_Device_ProcessControlRequest+0x138>
   17984:	e8 ee       	ldi	r30, 0xE8	; 232
   17986:	f0 e0       	ldi	r31, 0x00	; 0
   17988:	80 81       	ld	r24, Z
   1798a:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
   1798c:	80 83       	st	Z, r24
   1798e:	b7 d1       	rcall	.+878    	; 0x17cfe <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
   17990:	60 91 3e 6c 	lds	r22, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   17994:	ce 01       	movw	r24, r28
   17996:	63 df       	rcall	.-314    	; 0x1785e <CDC_Device_Event_Stub>
   17998:	df 91       	pop	r29
			}

			break;
	}
}
   1799a:	cf 91       	pop	r28
   1799c:	08 95       	ret

0001799e <Endpoint_Write_Control_Stream_LE>:
   1799e:	ef 92       	push	r14
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   179a0:	ff 92       	push	r15
   179a2:	0f 93       	push	r16
   179a4:	1f 93       	push	r17
   179a6:	cf 93       	push	r28
   179a8:	df 93       	push	r29
   179aa:	20 91 42 6c 	lds	r18, 0x6C42	; 0x806c42 <USB_ControlRequest+0x6>
   179ae:	30 91 43 6c 	lds	r19, 0x6C43	; 0x806c43 <USB_ControlRequest+0x7>
   179b2:	26 17       	cp	r18, r22
   179b4:	37 07       	cpc	r19, r23
   179b6:	58 f0       	brcs	.+22     	; 0x179ce <Endpoint_Write_Control_Stream_LE+0x30>
   179b8:	61 15       	cp	r22, r1
   179ba:	71 05       	cpc	r23, r1
   179bc:	39 f4       	brne	.+14     	; 0x179cc <Endpoint_Write_Control_Stream_LE+0x2e>
   179be:	e8 ee       	ldi	r30, 0xE8	; 232
   179c0:	f0 e0       	ldi	r31, 0x00	; 0
   179c2:	20 81       	ld	r18, Z
   179c4:	2e 77       	andi	r18, 0x7E	; 126
   179c6:	20 83       	st	Z, r18
   179c8:	9b 01       	movw	r18, r22
   179ca:	01 c0       	rjmp	.+2      	; 0x179ce <Endpoint_Write_Control_Stream_LE+0x30>
   179cc:	9b 01       	movw	r18, r22
   179ce:	a8 2f       	mov	r26, r24
   179d0:	b9 2f       	mov	r27, r25
   179d2:	90 e0       	ldi	r25, 0x00	; 0
   179d4:	e8 ee       	ldi	r30, 0xE8	; 232
   179d6:	f0 e0       	ldi	r31, 0x00	; 0
   179d8:	62 ef       	ldi	r22, 0xF2	; 242
   179da:	70 e0       	ldi	r23, 0x00	; 0
   179dc:	0f 2e       	mov	r0, r31
   179de:	f1 ef       	ldi	r31, 0xF1	; 241
   179e0:	ef 2e       	mov	r14, r31
   179e2:	f1 2c       	mov	r15, r1
   179e4:	f0 2d       	mov	r31, r0
   179e6:	11 e0       	ldi	r17, 0x01	; 1
   179e8:	00 e0       	ldi	r16, 0x00	; 0
   179ea:	2e c0       	rjmp	.+92     	; 0x17a48 <Endpoint_Write_Control_Stream_LE+0xaa>
   179ec:	8e b3       	in	r24, 0x1e	; 30
   179ee:	88 23       	and	r24, r24
   179f0:	09 f4       	brne	.+2      	; 0x179f4 <Endpoint_Write_Control_Stream_LE+0x56>
   179f2:	40 c0       	rjmp	.+128    	; 0x17a74 <Endpoint_Write_Control_Stream_LE+0xd6>
   179f4:	85 30       	cpi	r24, 0x05	; 5
   179f6:	09 f4       	brne	.+2      	; 0x179fa <Endpoint_Write_Control_Stream_LE+0x5c>
   179f8:	3f c0       	rjmp	.+126    	; 0x17a78 <Endpoint_Write_Control_Stream_LE+0xda>
   179fa:	80 81       	ld	r24, Z
   179fc:	83 fd       	sbrc	r24, 3
   179fe:	3e c0       	rjmp	.+124    	; 0x17a7c <Endpoint_Write_Control_Stream_LE+0xde>
   17a00:	80 81       	ld	r24, Z
   17a02:	82 fd       	sbrc	r24, 2
   17a04:	30 c0       	rjmp	.+96     	; 0x17a66 <Endpoint_Write_Control_Stream_LE+0xc8>
   17a06:	80 81       	ld	r24, Z
   17a08:	80 ff       	sbrs	r24, 0
   17a0a:	1e c0       	rjmp	.+60     	; 0x17a48 <Endpoint_Write_Control_Stream_LE+0xaa>
   17a0c:	eb 01       	movw	r28, r22
   17a0e:	48 81       	ld	r20, Y
   17a10:	59 81       	ldd	r21, Y+1	; 0x01
   17a12:	21 15       	cp	r18, r1
   17a14:	31 05       	cpc	r19, r1
   17a16:	81 f0       	breq	.+32     	; 0x17a38 <Endpoint_Write_Control_Stream_LE+0x9a>
   17a18:	48 30       	cpi	r20, 0x08	; 8
   17a1a:	51 05       	cpc	r21, r1
   17a1c:	68 f4       	brcc	.+26     	; 0x17a38 <Endpoint_Write_Control_Stream_LE+0x9a>
   17a1e:	8d 91       	ld	r24, X+
   17a20:	e7 01       	movw	r28, r14
   17a22:	88 83       	st	Y, r24
   17a24:	21 50       	subi	r18, 0x01	; 1
   17a26:	31 09       	sbc	r19, r1
   17a28:	4f 5f       	subi	r20, 0xFF	; 255
   17a2a:	5f 4f       	sbci	r21, 0xFF	; 255
   17a2c:	21 15       	cp	r18, r1
   17a2e:	31 05       	cpc	r19, r1
   17a30:	19 f0       	breq	.+6      	; 0x17a38 <Endpoint_Write_Control_Stream_LE+0x9a>
   17a32:	48 30       	cpi	r20, 0x08	; 8
   17a34:	51 05       	cpc	r21, r1
   17a36:	99 f7       	brne	.-26     	; 0x17a1e <Endpoint_Write_Control_Stream_LE+0x80>
   17a38:	91 2f       	mov	r25, r17
   17a3a:	48 30       	cpi	r20, 0x08	; 8
   17a3c:	51 05       	cpc	r21, r1
   17a3e:	09 f0       	breq	.+2      	; 0x17a42 <Endpoint_Write_Control_Stream_LE+0xa4>
   17a40:	90 2f       	mov	r25, r16
   17a42:	80 81       	ld	r24, Z
   17a44:	8e 77       	andi	r24, 0x7E	; 126
   17a46:	80 83       	st	Z, r24
   17a48:	21 15       	cp	r18, r1
   17a4a:	31 05       	cpc	r19, r1
   17a4c:	79 f6       	brne	.-98     	; 0x179ec <Endpoint_Write_Control_Stream_LE+0x4e>
   17a4e:	91 11       	cpse	r25, r1
   17a50:	cd cf       	rjmp	.-102    	; 0x179ec <Endpoint_Write_Control_Stream_LE+0x4e>
   17a52:	09 c0       	rjmp	.+18     	; 0x17a66 <Endpoint_Write_Control_Stream_LE+0xc8>
   17a54:	8e b3       	in	r24, 0x1e	; 30
   17a56:	88 23       	and	r24, r24
   17a58:	99 f0       	breq	.+38     	; 0x17a80 <Endpoint_Write_Control_Stream_LE+0xe2>
   17a5a:	85 30       	cpi	r24, 0x05	; 5
   17a5c:	99 f0       	breq	.+38     	; 0x17a84 <Endpoint_Write_Control_Stream_LE+0xe6>
   17a5e:	80 81       	ld	r24, Z
   17a60:	83 ff       	sbrs	r24, 3
   17a62:	03 c0       	rjmp	.+6      	; 0x17a6a <Endpoint_Write_Control_Stream_LE+0xcc>
   17a64:	11 c0       	rjmp	.+34     	; 0x17a88 <Endpoint_Write_Control_Stream_LE+0xea>
   17a66:	e8 ee       	ldi	r30, 0xE8	; 232
   17a68:	f0 e0       	ldi	r31, 0x00	; 0
   17a6a:	80 81       	ld	r24, Z
   17a6c:	82 ff       	sbrs	r24, 2
   17a6e:	f2 cf       	rjmp	.-28     	; 0x17a54 <Endpoint_Write_Control_Stream_LE+0xb6>
   17a70:	80 e0       	ldi	r24, 0x00	; 0
   17a72:	0b c0       	rjmp	.+22     	; 0x17a8a <Endpoint_Write_Control_Stream_LE+0xec>
   17a74:	82 e0       	ldi	r24, 0x02	; 2
   17a76:	09 c0       	rjmp	.+18     	; 0x17a8a <Endpoint_Write_Control_Stream_LE+0xec>
   17a78:	83 e0       	ldi	r24, 0x03	; 3
   17a7a:	07 c0       	rjmp	.+14     	; 0x17a8a <Endpoint_Write_Control_Stream_LE+0xec>
   17a7c:	81 e0       	ldi	r24, 0x01	; 1
   17a7e:	05 c0       	rjmp	.+10     	; 0x17a8a <Endpoint_Write_Control_Stream_LE+0xec>
   17a80:	82 e0       	ldi	r24, 0x02	; 2
   17a82:	03 c0       	rjmp	.+6      	; 0x17a8a <Endpoint_Write_Control_Stream_LE+0xec>
   17a84:	83 e0       	ldi	r24, 0x03	; 3
   17a86:	01 c0       	rjmp	.+2      	; 0x17a8a <Endpoint_Write_Control_Stream_LE+0xec>
   17a88:	81 e0       	ldi	r24, 0x01	; 1
   17a8a:	df 91       	pop	r29
   17a8c:	cf 91       	pop	r28
   17a8e:	1f 91       	pop	r17
   17a90:	0f 91       	pop	r16
   17a92:	ff 90       	pop	r15
   17a94:	ef 90       	pop	r14
   17a96:	08 95       	ret

00017a98 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   17a98:	ef 92       	push	r14
   17a9a:	ff 92       	push	r15
   17a9c:	0f 93       	push	r16
   17a9e:	1f 93       	push	r17
   17aa0:	cf 93       	push	r28
   17aa2:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   17aa4:	20 91 42 6c 	lds	r18, 0x6C42	; 0x806c42 <USB_ControlRequest+0x6>
   17aa8:	30 91 43 6c 	lds	r19, 0x6C43	; 0x806c43 <USB_ControlRequest+0x7>
   17aac:	26 17       	cp	r18, r22
   17aae:	37 07       	cpc	r19, r23
   17ab0:	58 f0       	brcs	.+22     	; 0x17ac8 <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   17ab2:	61 15       	cp	r22, r1
   17ab4:	71 05       	cpc	r23, r1
   17ab6:	39 f4       	brne	.+14     	; 0x17ac6 <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   17ab8:	e8 ee       	ldi	r30, 0xE8	; 232
   17aba:	f0 e0       	ldi	r31, 0x00	; 0
   17abc:	20 81       	ld	r18, Z
   17abe:	2e 77       	andi	r18, 0x7E	; 126
   17ac0:	20 83       	st	Z, r18
   17ac2:	9b 01       	movw	r18, r22
   17ac4:	01 c0       	rjmp	.+2      	; 0x17ac8 <Endpoint_Write_Control_PStream_LE+0x30>
   17ac6:	9b 01       	movw	r18, r22
   17ac8:	e8 2f       	mov	r30, r24
   17aca:	f9 2f       	mov	r31, r25
   17acc:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   17ace:	a8 ee       	ldi	r26, 0xE8	; 232
   17ad0:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   17ad2:	62 ef       	ldi	r22, 0xF2	; 242
   17ad4:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   17ad6:	0f 2e       	mov	r0, r31
   17ad8:	f1 ef       	ldi	r31, 0xF1	; 241
   17ada:	ef 2e       	mov	r14, r31
   17adc:	f1 2c       	mov	r15, r1
   17ade:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   17ae0:	11 e0       	ldi	r17, 0x01	; 1
   17ae2:	00 e0       	ldi	r16, 0x00	; 0
   17ae4:	2f c0       	rjmp	.+94     	; 0x17b44 <Endpoint_Write_Control_PStream_LE+0xac>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   17ae6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   17ae8:	88 23       	and	r24, r24
   17aea:	09 f4       	brne	.+2      	; 0x17aee <Endpoint_Write_Control_PStream_LE+0x56>
   17aec:	41 c0       	rjmp	.+130    	; 0x17b70 <Endpoint_Write_Control_PStream_LE+0xd8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   17aee:	85 30       	cpi	r24, 0x05	; 5
   17af0:	09 f4       	brne	.+2      	; 0x17af4 <Endpoint_Write_Control_PStream_LE+0x5c>
   17af2:	40 c0       	rjmp	.+128    	; 0x17b74 <Endpoint_Write_Control_PStream_LE+0xdc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   17af4:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   17af6:	83 fd       	sbrc	r24, 3
   17af8:	3f c0       	rjmp	.+126    	; 0x17b78 <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   17afa:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   17afc:	82 fd       	sbrc	r24, 2
   17afe:	31 c0       	rjmp	.+98     	; 0x17b62 <Endpoint_Write_Control_PStream_LE+0xca>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   17b00:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
   17b02:	80 ff       	sbrs	r24, 0
   17b04:	1f c0       	rjmp	.+62     	; 0x17b44 <Endpoint_Write_Control_PStream_LE+0xac>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
   17b06:	eb 01       	movw	r28, r22
   17b08:	48 81       	ld	r20, Y
   17b0a:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   17b0c:	21 15       	cp	r18, r1
   17b0e:	31 05       	cpc	r19, r1
   17b10:	89 f0       	breq	.+34     	; 0x17b34 <Endpoint_Write_Control_PStream_LE+0x9c>
   17b12:	48 30       	cpi	r20, 0x08	; 8
   17b14:	51 05       	cpc	r21, r1
   17b16:	70 f4       	brcc	.+28     	; 0x17b34 <Endpoint_Write_Control_PStream_LE+0x9c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   17b18:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   17b1a:	e7 01       	movw	r28, r14
   17b1c:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
   17b1e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
   17b20:	21 50       	subi	r18, 0x01	; 1
   17b22:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
   17b24:	4f 5f       	subi	r20, 0xFF	; 255
   17b26:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   17b28:	21 15       	cp	r18, r1
   17b2a:	31 05       	cpc	r19, r1
   17b2c:	19 f0       	breq	.+6      	; 0x17b34 <Endpoint_Write_Control_PStream_LE+0x9c>
   17b2e:	48 30       	cpi	r20, 0x08	; 8
   17b30:	51 05       	cpc	r21, r1
   17b32:	91 f7       	brne	.-28     	; 0x17b18 <Endpoint_Write_Control_PStream_LE+0x80>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   17b34:	91 2f       	mov	r25, r17
   17b36:	48 30       	cpi	r20, 0x08	; 8
   17b38:	51 05       	cpc	r21, r1
   17b3a:	09 f0       	breq	.+2      	; 0x17b3e <Endpoint_Write_Control_PStream_LE+0xa6>
   17b3c:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   17b3e:	8c 91       	ld	r24, X
   17b40:	8e 77       	andi	r24, 0x7E	; 126
   17b42:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   17b44:	21 15       	cp	r18, r1
   17b46:	31 05       	cpc	r19, r1
   17b48:	71 f6       	brne	.-100    	; 0x17ae6 <Endpoint_Write_Control_PStream_LE+0x4e>
   17b4a:	91 11       	cpse	r25, r1
   17b4c:	cc cf       	rjmp	.-104    	; 0x17ae6 <Endpoint_Write_Control_PStream_LE+0x4e>
   17b4e:	09 c0       	rjmp	.+18     	; 0x17b62 <Endpoint_Write_Control_PStream_LE+0xca>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   17b50:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   17b52:	88 23       	and	r24, r24
   17b54:	99 f0       	breq	.+38     	; 0x17b7c <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   17b56:	85 30       	cpi	r24, 0x05	; 5
   17b58:	99 f0       	breq	.+38     	; 0x17b80 <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   17b5a:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   17b5c:	83 ff       	sbrs	r24, 3
   17b5e:	03 c0       	rjmp	.+6      	; 0x17b66 <Endpoint_Write_Control_PStream_LE+0xce>
   17b60:	11 c0       	rjmp	.+34     	; 0x17b84 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   17b62:	e8 ee       	ldi	r30, 0xE8	; 232
   17b64:	f0 e0       	ldi	r31, 0x00	; 0
   17b66:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   17b68:	82 ff       	sbrs	r24, 2
   17b6a:	f2 cf       	rjmp	.-28     	; 0x17b50 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   17b6c:	80 e0       	ldi	r24, 0x00	; 0
   17b6e:	0b c0       	rjmp	.+22     	; 0x17b86 <Endpoint_Write_Control_PStream_LE+0xee>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   17b70:	82 e0       	ldi	r24, 0x02	; 2
   17b72:	09 c0       	rjmp	.+18     	; 0x17b86 <Endpoint_Write_Control_PStream_LE+0xee>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   17b74:	83 e0       	ldi	r24, 0x03	; 3
   17b76:	07 c0       	rjmp	.+14     	; 0x17b86 <Endpoint_Write_Control_PStream_LE+0xee>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   17b78:	81 e0       	ldi	r24, 0x01	; 1
   17b7a:	05 c0       	rjmp	.+10     	; 0x17b86 <Endpoint_Write_Control_PStream_LE+0xee>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   17b7c:	82 e0       	ldi	r24, 0x02	; 2
   17b7e:	03 c0       	rjmp	.+6      	; 0x17b86 <Endpoint_Write_Control_PStream_LE+0xee>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   17b80:	83 e0       	ldi	r24, 0x03	; 3
   17b82:	01 c0       	rjmp	.+2      	; 0x17b86 <Endpoint_Write_Control_PStream_LE+0xee>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   17b84:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   17b86:	df 91       	pop	r29
   17b88:	cf 91       	pop	r28
   17b8a:	1f 91       	pop	r17
   17b8c:	0f 91       	pop	r16
   17b8e:	ff 90       	pop	r15
   17b90:	ef 90       	pop	r14
   17b92:	08 95       	ret

00017b94 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
   17b94:	8f 92       	push	r8
   17b96:	9f 92       	push	r9
   17b98:	bf 92       	push	r11
   17b9a:	cf 92       	push	r12
   17b9c:	df 92       	push	r13
   17b9e:	ef 92       	push	r14
   17ba0:	ff 92       	push	r15
   17ba2:	0f 93       	push	r16
   17ba4:	1f 93       	push	r17
   17ba6:	cf 93       	push	r28
   17ba8:	df 93       	push	r29
   17baa:	87 30       	cpi	r24, 0x07	; 7
   17bac:	70 f1       	brcs	.+92     	; 0x17c0a <Endpoint_ConfigureEndpoint_Prv+0x76>
   17bae:	26 c0       	rjmp	.+76     	; 0x17bfc <Endpoint_ConfigureEndpoint_Prv+0x68>
   17bb0:	29 2f       	mov	r18, r25
   17bb2:	2f 70       	andi	r18, 0x0F	; 15
   17bb4:	e7 01       	movw	r28, r14
   17bb6:	28 83       	st	Y, r18
   17bb8:	89 17       	cp	r24, r25
   17bba:	31 f0       	breq	.+12     	; 0x17bc8 <Endpoint_ConfigureEndpoint_Prv+0x34>
   17bbc:	e8 01       	movw	r28, r16
   17bbe:	78 81       	ld	r23, Y
   17bc0:	20 81       	ld	r18, Z
   17bc2:	e4 01       	movw	r28, r8
   17bc4:	58 81       	ld	r21, Y
   17bc6:	03 c0       	rjmp	.+6      	; 0x17bce <Endpoint_ConfigureEndpoint_Prv+0x3a>
   17bc8:	24 2f       	mov	r18, r20
   17bca:	76 2f       	mov	r23, r22
   17bcc:	5b 2d       	mov	r21, r11
   17bce:	21 ff       	sbrs	r18, 1
   17bd0:	12 c0       	rjmp	.+36     	; 0x17bf6 <Endpoint_ConfigureEndpoint_Prv+0x62>
   17bd2:	3c 91       	ld	r19, X
   17bd4:	3e 7f       	andi	r19, 0xFE	; 254
   17bd6:	3c 93       	st	X, r19
   17bd8:	30 81       	ld	r19, Z
   17bda:	3d 7f       	andi	r19, 0xFD	; 253
   17bdc:	30 83       	st	Z, r19
   17bde:	3c 91       	ld	r19, X
   17be0:	31 60       	ori	r19, 0x01	; 1
   17be2:	3c 93       	st	X, r19
   17be4:	e8 01       	movw	r28, r16
   17be6:	78 83       	st	Y, r23
   17be8:	20 83       	st	Z, r18
   17bea:	e4 01       	movw	r28, r8
   17bec:	58 83       	st	Y, r21
   17bee:	e6 01       	movw	r28, r12
   17bf0:	28 81       	ld	r18, Y
   17bf2:	22 23       	and	r18, r18
   17bf4:	44 f4       	brge	.+16     	; 0x17c06 <Endpoint_ConfigureEndpoint_Prv+0x72>
   17bf6:	9f 5f       	subi	r25, 0xFF	; 255
   17bf8:	97 30       	cpi	r25, 0x07	; 7
   17bfa:	d1 f6       	brne	.-76     	; 0x17bb0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
   17bfc:	8f 70       	andi	r24, 0x0F	; 15
   17bfe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   17c02:	81 e0       	ldi	r24, 0x01	; 1
   17c04:	21 c0       	rjmp	.+66     	; 0x17c48 <Endpoint_ConfigureEndpoint_Prv+0xb4>
   17c06:	80 e0       	ldi	r24, 0x00	; 0
   17c08:	1f c0       	rjmp	.+62     	; 0x17c48 <Endpoint_ConfigureEndpoint_Prv+0xb4>
   17c0a:	98 2f       	mov	r25, r24
   17c0c:	9f 70       	andi	r25, 0x0F	; 15
   17c0e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   17c12:	98 2f       	mov	r25, r24
   17c14:	24 2f       	mov	r18, r20
   17c16:	76 2f       	mov	r23, r22
   17c18:	50 e0       	ldi	r21, 0x00	; 0
   17c1a:	ab ee       	ldi	r26, 0xEB	; 235
   17c1c:	b0 e0       	ldi	r27, 0x00	; 0
   17c1e:	ed ee       	ldi	r30, 0xED	; 237
   17c20:	f0 e0       	ldi	r31, 0x00	; 0
   17c22:	0c ee       	ldi	r16, 0xEC	; 236
   17c24:	10 e0       	ldi	r17, 0x00	; 0
   17c26:	0f 2e       	mov	r0, r31
   17c28:	f0 ef       	ldi	r31, 0xF0	; 240
   17c2a:	8f 2e       	mov	r8, r31
   17c2c:	91 2c       	mov	r9, r1
   17c2e:	f0 2d       	mov	r31, r0
   17c30:	0f 2e       	mov	r0, r31
   17c32:	fe ee       	ldi	r31, 0xEE	; 238
   17c34:	cf 2e       	mov	r12, r31
   17c36:	d1 2c       	mov	r13, r1
   17c38:	f0 2d       	mov	r31, r0
   17c3a:	0f 2e       	mov	r0, r31
   17c3c:	f9 ee       	ldi	r31, 0xE9	; 233
   17c3e:	ef 2e       	mov	r14, r31
   17c40:	f1 2c       	mov	r15, r1
   17c42:	f0 2d       	mov	r31, r0
   17c44:	b1 2c       	mov	r11, r1
   17c46:	c3 cf       	rjmp	.-122    	; 0x17bce <Endpoint_ConfigureEndpoint_Prv+0x3a>
   17c48:	df 91       	pop	r29
   17c4a:	cf 91       	pop	r28
   17c4c:	1f 91       	pop	r17
   17c4e:	0f 91       	pop	r16
   17c50:	ff 90       	pop	r15
   17c52:	ef 90       	pop	r14
   17c54:	df 90       	pop	r13
   17c56:	cf 90       	pop	r12
   17c58:	bf 90       	pop	r11
   17c5a:	9f 90       	pop	r9
   17c5c:	8f 90       	pop	r8
   17c5e:	08 95       	ret

00017c60 <Endpoint_ConfigureEndpointTable>:
   17c60:	ef 92       	push	r14
   17c62:	ff 92       	push	r15
   17c64:	0f 93       	push	r16
   17c66:	1f 93       	push	r17
   17c68:	cf 93       	push	r28
   17c6a:	df 93       	push	r29
   17c6c:	66 23       	and	r22, r22
   17c6e:	e9 f1       	breq	.+122    	; 0x17cea <Endpoint_ConfigureEndpointTable+0x8a>
   17c70:	06 2f       	mov	r16, r22
   17c72:	c8 2f       	mov	r28, r24
   17c74:	d9 2f       	mov	r29, r25
   17c76:	10 e0       	ldi	r17, 0x00	; 0
   17c78:	0f 2e       	mov	r0, r31
   17c7a:	f6 e0       	ldi	r31, 0x06	; 6
   17c7c:	ff 2e       	mov	r15, r31
   17c7e:	f0 2d       	mov	r31, r0
   17c80:	68 94       	set
   17c82:	ee 24       	eor	r14, r14
   17c84:	e1 f8       	bld	r14, 1
   17c86:	58 81       	ld	r21, Y
   17c88:	55 23       	and	r21, r21
   17c8a:	49 f1       	breq	.+82     	; 0x17cde <Endpoint_ConfigureEndpointTable+0x7e>
   17c8c:	9c 81       	ldd	r25, Y+4	; 0x04
   17c8e:	e9 81       	ldd	r30, Y+1	; 0x01
   17c90:	fa 81       	ldd	r31, Y+2	; 0x02
   17c92:	6b 81       	ldd	r22, Y+3	; 0x03
   17c94:	85 2f       	mov	r24, r21
   17c96:	8f 70       	andi	r24, 0x0F	; 15
   17c98:	87 30       	cpi	r24, 0x07	; 7
   17c9a:	48 f5       	brcc	.+82     	; 0x17cee <Endpoint_ConfigureEndpointTable+0x8e>
   17c9c:	92 30       	cpi	r25, 0x02	; 2
   17c9e:	10 f4       	brcc	.+4      	; 0x17ca4 <Endpoint_ConfigureEndpointTable+0x44>
   17ca0:	4e 2d       	mov	r20, r14
   17ca2:	01 c0       	rjmp	.+2      	; 0x17ca6 <Endpoint_ConfigureEndpointTable+0x46>
   17ca4:	4f 2d       	mov	r20, r15
   17ca6:	e9 30       	cpi	r30, 0x09	; 9
   17ca8:	f1 05       	cpc	r31, r1
   17caa:	50 f0       	brcs	.+20     	; 0x17cc0 <Endpoint_ConfigureEndpointTable+0x60>
   17cac:	28 e0       	ldi	r18, 0x08	; 8
   17cae:	30 e0       	ldi	r19, 0x00	; 0
   17cb0:	90 e0       	ldi	r25, 0x00	; 0
   17cb2:	9f 5f       	subi	r25, 0xFF	; 255
   17cb4:	22 0f       	add	r18, r18
   17cb6:	33 1f       	adc	r19, r19
   17cb8:	2e 17       	cp	r18, r30
   17cba:	3f 07       	cpc	r19, r31
   17cbc:	d0 f3       	brcs	.-12     	; 0x17cb2 <Endpoint_ConfigureEndpointTable+0x52>
   17cbe:	01 c0       	rjmp	.+2      	; 0x17cc2 <Endpoint_ConfigureEndpointTable+0x62>
   17cc0:	90 e0       	ldi	r25, 0x00	; 0
   17cc2:	92 95       	swap	r25
   17cc4:	90 7f       	andi	r25, 0xF0	; 240
   17cc6:	49 2b       	or	r20, r25
   17cc8:	90 e4       	ldi	r25, 0x40	; 64
   17cca:	69 9f       	mul	r22, r25
   17ccc:	b0 01       	movw	r22, r0
   17cce:	11 24       	eor	r1, r1
   17cd0:	55 1f       	adc	r21, r21
   17cd2:	55 27       	eor	r21, r21
   17cd4:	55 1f       	adc	r21, r21
   17cd6:	65 2b       	or	r22, r21
   17cd8:	5d df       	rcall	.-326    	; 0x17b94 <Endpoint_ConfigureEndpoint_Prv>
   17cda:	88 23       	and	r24, r24
   17cdc:	49 f0       	breq	.+18     	; 0x17cf0 <Endpoint_ConfigureEndpointTable+0x90>
   17cde:	1f 5f       	subi	r17, 0xFF	; 255
   17ce0:	25 96       	adiw	r28, 0x05	; 5
   17ce2:	01 13       	cpse	r16, r17
   17ce4:	d0 cf       	rjmp	.-96     	; 0x17c86 <Endpoint_ConfigureEndpointTable+0x26>
   17ce6:	81 e0       	ldi	r24, 0x01	; 1
   17ce8:	03 c0       	rjmp	.+6      	; 0x17cf0 <Endpoint_ConfigureEndpointTable+0x90>
   17cea:	81 e0       	ldi	r24, 0x01	; 1
   17cec:	01 c0       	rjmp	.+2      	; 0x17cf0 <Endpoint_ConfigureEndpointTable+0x90>
   17cee:	80 e0       	ldi	r24, 0x00	; 0
   17cf0:	df 91       	pop	r29
   17cf2:	cf 91       	pop	r28
   17cf4:	1f 91       	pop	r17
   17cf6:	0f 91       	pop	r16
   17cf8:	ff 90       	pop	r15
   17cfa:	ef 90       	pop	r14
   17cfc:	08 95       	ret

00017cfe <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   17cfe:	80 91 3c 6c 	lds	r24, 0x6C3C	; 0x806c3c <USB_ControlRequest>
   17d02:	88 23       	and	r24, r24
   17d04:	3c f0       	brlt	.+14     	; 0x17d14 <Endpoint_ClearStatusStage+0x16>
   17d06:	e8 ee       	ldi	r30, 0xE8	; 232
   17d08:	f0 e0       	ldi	r31, 0x00	; 0
   17d0a:	12 c0       	rjmp	.+36     	; 0x17d30 <Endpoint_ClearStatusStage+0x32>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   17d0c:	8e b3       	in	r24, 0x1e	; 30
   17d0e:	81 11       	cpse	r24, r1
   17d10:	03 c0       	rjmp	.+6      	; 0x17d18 <Endpoint_ClearStatusStage+0x1a>
   17d12:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   17d14:	e8 ee       	ldi	r30, 0xE8	; 232
   17d16:	f0 e0       	ldi	r31, 0x00	; 0
   17d18:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   17d1a:	82 ff       	sbrs	r24, 2
   17d1c:	f7 cf       	rjmp	.-18     	; 0x17d0c <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   17d1e:	e8 ee       	ldi	r30, 0xE8	; 232
   17d20:	f0 e0       	ldi	r31, 0x00	; 0
   17d22:	80 81       	ld	r24, Z
   17d24:	8b 77       	andi	r24, 0x7B	; 123
   17d26:	80 83       	st	Z, r24
   17d28:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   17d2a:	8e b3       	in	r24, 0x1e	; 30
   17d2c:	88 23       	and	r24, r24
   17d2e:	41 f0       	breq	.+16     	; 0x17d40 <Endpoint_ClearStatusStage+0x42>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   17d30:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   17d32:	80 ff       	sbrs	r24, 0
   17d34:	fa cf       	rjmp	.-12     	; 0x17d2a <Endpoint_ClearStatusStage+0x2c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   17d36:	e8 ee       	ldi	r30, 0xE8	; 232
   17d38:	f0 e0       	ldi	r31, 0x00	; 0
   17d3a:	80 81       	ld	r24, Z
   17d3c:	8e 77       	andi	r24, 0x7E	; 126
   17d3e:	80 83       	st	Z, r24
   17d40:	08 95       	ret

00017d42 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
   17d42:	0f 93       	push	r16
   17d44:	1f 93       	push	r17
   17d46:	cf 93       	push	r28
   17d48:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
   17d4a:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x6fffe4>
   17d4e:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x6fffe5>
   17d52:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   17d54:	ac ee       	ldi	r26, 0xEC	; 236
   17d56:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   17d58:	e8 ee       	ldi	r30, 0xE8	; 232
   17d5a:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   17d5c:	0b ee       	ldi	r16, 0xEB	; 235
   17d5e:	10 e0       	ldi	r17, 0x00	; 0
   17d60:	44 ee       	ldi	r20, 0xE4	; 228
   17d62:	50 e0       	ldi	r21, 0x00	; 0
   17d64:	01 c0       	rjmp	.+2      	; 0x17d68 <Endpoint_WaitUntilReady+0x26>
   17d66:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   17d68:	9c 91       	ld	r25, X
   17d6a:	89 2f       	mov	r24, r25
   17d6c:	81 70       	andi	r24, 0x01	; 1
   17d6e:	90 fd       	sbrc	r25, 0
   17d70:	1c c0       	rjmp	.+56     	; 0x17daa <Endpoint_WaitUntilReady+0x68>
   17d72:	1f c0       	rjmp	.+62     	; 0x17db2 <Endpoint_WaitUntilReady+0x70>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   17d74:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   17d76:	88 23       	and	r24, r24
   17d78:	81 f0       	breq	.+32     	; 0x17d9a <Endpoint_WaitUntilReady+0x58>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   17d7a:	85 30       	cpi	r24, 0x05	; 5
   17d7c:	81 f0       	breq	.+32     	; 0x17d9e <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   17d7e:	e8 01       	movw	r28, r16
   17d80:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
   17d82:	85 fd       	sbrc	r24, 5
   17d84:	0e c0       	rjmp	.+28     	; 0x17da2 <Endpoint_WaitUntilReady+0x60>
   17d86:	ea 01       	movw	r28, r20
   17d88:	88 81       	ld	r24, Y
   17d8a:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
   17d8c:	28 17       	cp	r18, r24
   17d8e:	39 07       	cpc	r19, r25
   17d90:	59 f3       	breq	.-42     	; 0x17d68 <Endpoint_WaitUntilReady+0x26>
   17d92:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
   17d94:	41 f7       	brne	.-48     	; 0x17d66 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
   17d96:	84 e0       	ldi	r24, 0x04	; 4
   17d98:	0f c0       	rjmp	.+30     	; 0x17db8 <Endpoint_WaitUntilReady+0x76>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
   17d9a:	82 e0       	ldi	r24, 0x02	; 2
   17d9c:	0d c0       	rjmp	.+26     	; 0x17db8 <Endpoint_WaitUntilReady+0x76>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
   17d9e:	83 e0       	ldi	r24, 0x03	; 3
   17da0:	0b c0       	rjmp	.+22     	; 0x17db8 <Endpoint_WaitUntilReady+0x76>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
   17da2:	81 e0       	ldi	r24, 0x01	; 1
   17da4:	09 c0       	rjmp	.+18     	; 0x17db8 <Endpoint_WaitUntilReady+0x76>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
   17da6:	80 e0       	ldi	r24, 0x00	; 0
   17da8:	07 c0       	rjmp	.+14     	; 0x17db8 <Endpoint_WaitUntilReady+0x76>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   17daa:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
   17dac:	80 ff       	sbrs	r24, 0
   17dae:	e2 cf       	rjmp	.-60     	; 0x17d74 <Endpoint_WaitUntilReady+0x32>
   17db0:	fa cf       	rjmp	.-12     	; 0x17da6 <Endpoint_WaitUntilReady+0x64>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   17db2:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
   17db4:	92 ff       	sbrs	r25, 2
   17db6:	de cf       	rjmp	.-68     	; 0x17d74 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
   17db8:	df 91       	pop	r29
   17dba:	cf 91       	pop	r28
   17dbc:	1f 91       	pop	r17
   17dbe:	0f 91       	pop	r16
   17dc0:	08 95       	ret

00017dc2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   17dc2:	0f 93       	push	r16
   17dc4:	1f 93       	push	r17
   17dc6:	cf 93       	push	r28
   17dc8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   17dca:	4e d0       	rcall	.+156    	; 0x17e68 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   17dcc:	55 d0       	rcall	.+170    	; 0x17e78 <USB_INT_ClearAllInterrupts>
   17dce:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   17dd0:	d0 e0       	ldi	r29, 0x00	; 0
   17dd2:	88 81       	ld	r24, Y
   17dd4:	8f 77       	andi	r24, 0x7F	; 127
   17dd6:	88 83       	st	Y, r24
   17dd8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
   17dda:	80 68       	ori	r24, 0x80	; 128
   17ddc:	88 83       	st	Y, r24
   17dde:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   17de0:	8f 7d       	andi	r24, 0xDF	; 223
   17de2:	88 83       	st	Y, r24
   17de4:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   17de6:	f0 e0       	ldi	r31, 0x00	; 0
   17de8:	80 81       	ld	r24, Z
   17dea:	80 68       	ori	r24, 0x80	; 128
   17dec:	80 83       	st	Z, r24
   17dee:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   17df0:	1e ba       	out	0x1e, r1	; 30
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   17df2:	10 92 38 6c 	sts	0x6C38, r1	; 0x806c38 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
   17df6:	10 92 3a 6c 	sts	0x6C3A, r1	; 0x806c3a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
   17dfa:	10 92 39 6c 	sts	0x6C39, r1	; 0x806c39 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
   17dfe:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   17e00:	10 e0       	ldi	r17, 0x00	; 0
   17e02:	f8 01       	movw	r30, r16
   17e04:	80 81       	ld	r24, Z
   17e06:	8b 7f       	andi	r24, 0xFB	; 251
   17e08:	80 83       	st	Z, r24
   17e0a:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   17e0c:	81 60       	ori	r24, 0x01	; 1
   17e0e:	88 83       	st	Y, r24
   17e10:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   17e12:	60 e0       	ldi	r22, 0x00	; 0
   17e14:	80 e0       	ldi	r24, 0x00	; 0
   17e16:	be de       	rcall	.-644    	; 0x17b94 <Endpoint_ConfigureEndpoint_Prv>
   17e18:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   17e1a:	f0 e0       	ldi	r31, 0x00	; 0
   17e1c:	80 81       	ld	r24, Z
   17e1e:	8e 7f       	andi	r24, 0xFE	; 254
   17e20:	80 83       	st	Z, r24
   17e22:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   17e24:	f0 e0       	ldi	r31, 0x00	; 0
   17e26:	80 81       	ld	r24, Z
   17e28:	81 60       	ori	r24, 0x01	; 1
   17e2a:	80 83       	st	Z, r24
   17e2c:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   17e2e:	88 60       	ori	r24, 0x08	; 8
   17e30:	80 83       	st	Z, r24
   17e32:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   17e34:	80 81       	ld	r24, Z
   17e36:	8e 7f       	andi	r24, 0xFE	; 254
   17e38:	80 83       	st	Z, r24
   17e3a:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   17e3c:	80 61       	ori	r24, 0x10	; 16
   17e3e:	88 83       	st	Y, r24
   17e40:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   17e42:	cf 91       	pop	r28
   17e44:	1f 91       	pop	r17
   17e46:	0f 91       	pop	r16
   17e48:	08 95       	ret

00017e4a <USB_Init>:
   17e4a:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
   17e4c:	f0 e0       	ldi	r31, 0x00	; 0
   17e4e:	80 81       	ld	r24, Z
   17e50:	8f 7e       	andi	r24, 0xEF	; 239
   17e52:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   17e54:	e7 ed       	ldi	r30, 0xD7	; 215
   17e56:	f0 e0       	ldi	r31, 0x00	; 0
   17e58:	80 81       	ld	r24, Z
   17e5a:	81 60       	ori	r24, 0x01	; 1
   17e5c:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   17e5e:	81 e0       	ldi	r24, 0x01	; 1
   17e60:	80 93 3b 6c 	sts	0x6C3B, r24	; 0x806c3b <USB_IsInitialized>

	USB_ResetInterface();
   17e64:	ae cf       	rjmp	.-164    	; 0x17dc2 <USB_ResetInterface>
   17e66:	08 95       	ret

00017e68 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   17e68:	e8 ed       	ldi	r30, 0xD8	; 216
   17e6a:	f0 e0       	ldi	r31, 0x00	; 0
   17e6c:	80 81       	ld	r24, Z
   17e6e:	8c 7f       	andi	r24, 0xFC	; 252
   17e70:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   17e72:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x6fffe2>
   17e76:	08 95       	ret

00017e78 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   17e78:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x6fffda>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   17e7c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x6fffe1>
   17e80:	08 95       	ret

00017e82 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
   17e82:	1f 92       	push	r1
   17e84:	0f 92       	push	r0
   17e86:	0f b6       	in	r0, 0x3f	; 63
   17e88:	0f 92       	push	r0
   17e8a:	11 24       	eor	r1, r1
   17e8c:	0b b6       	in	r0, 0x3b	; 59
   17e8e:	0f 92       	push	r0
   17e90:	2f 93       	push	r18
   17e92:	3f 93       	push	r19
   17e94:	4f 93       	push	r20
   17e96:	5f 93       	push	r21
   17e98:	6f 93       	push	r22
   17e9a:	7f 93       	push	r23
   17e9c:	8f 93       	push	r24
   17e9e:	9f 93       	push	r25
   17ea0:	af 93       	push	r26
   17ea2:	bf 93       	push	r27
   17ea4:	ef 93       	push	r30
   17ea6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
   17ea8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x6fffe1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
   17eac:	82 ff       	sbrs	r24, 2
   17eae:	0a c0       	rjmp	.+20     	; 0x17ec4 <__vector_10+0x42>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
   17eb0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x6fffe2>
   17eb4:	82 ff       	sbrs	r24, 2
   17eb6:	06 c0       	rjmp	.+12     	; 0x17ec4 <__vector_10+0x42>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
   17eb8:	e1 ee       	ldi	r30, 0xE1	; 225
   17eba:	f0 e0       	ldi	r31, 0x00	; 0
   17ebc:	80 81       	ld	r24, Z
   17ebe:	8b 7f       	andi	r24, 0xFB	; 251
   17ec0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
   17ec2:	6c d2       	rcall	.+1240   	; 0x1839c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   17ec4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x6fffda>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   17ec8:	80 ff       	sbrs	r24, 0
   17eca:	1b c0       	rjmp	.+54     	; 0x17f02 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   17ecc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x6fffd8>
   17ed0:	80 ff       	sbrs	r24, 0
   17ed2:	17 c0       	rjmp	.+46     	; 0x17f02 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   17ed4:	ea ed       	ldi	r30, 0xDA	; 218
   17ed6:	f0 e0       	ldi	r31, 0x00	; 0
   17ed8:	80 81       	ld	r24, Z
   17eda:	8e 7f       	andi	r24, 0xFE	; 254
   17edc:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   17ede:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x6fffd9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   17ee2:	80 ff       	sbrs	r24, 0
   17ee4:	0b c0       	rjmp	.+22     	; 0x17efc <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   17ee6:	8c e0       	ldi	r24, 0x0C	; 12
   17ee8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   17eea:	8e e0       	ldi	r24, 0x0E	; 14
   17eec:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   17eee:	09 b4       	in	r0, 0x29	; 41
   17ef0:	00 fe       	sbrs	r0, 0
   17ef2:	fd cf       	rjmp	.-6      	; 0x17eee <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   17ef4:	81 e0       	ldi	r24, 0x01	; 1
			EVENT_USB_Device_Connect();
   17ef6:	8e bb       	out	0x1e, r24	; 30
   17ef8:	24 db       	rcall	.-2488   	; 0x17542 <EVENT_USB_Device_Connect>
   17efa:	03 c0       	rjmp	.+6      	; 0x17f02 <__vector_10+0x80>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   17efc:	19 bc       	out	0x29, r1	; 41
			EVENT_USB_Device_Disconnect();
   17efe:	1e ba       	out	0x1e, r1	; 30
   17f00:	25 db       	rcall	.-2486   	; 0x1754c <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   17f02:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x6fffe1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   17f06:	80 ff       	sbrs	r24, 0
   17f08:	15 c0       	rjmp	.+42     	; 0x17f34 <__vector_10+0xb2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   17f0a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x6fffe2>
   17f0e:	80 ff       	sbrs	r24, 0
   17f10:	11 c0       	rjmp	.+34     	; 0x17f34 <__vector_10+0xb2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   17f12:	e2 ee       	ldi	r30, 0xE2	; 226
   17f14:	f0 e0       	ldi	r31, 0x00	; 0
   17f16:	80 81       	ld	r24, Z
   17f18:	8e 7f       	andi	r24, 0xFE	; 254
   17f1a:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   17f1c:	80 81       	ld	r24, Z
   17f1e:	80 61       	ori	r24, 0x10	; 16
   17f20:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   17f22:	e8 ed       	ldi	r30, 0xD8	; 216
   17f24:	f0 e0       	ldi	r31, 0x00	; 0
   17f26:	80 81       	ld	r24, Z
   17f28:	80 62       	ori	r24, 0x20	; 32
   17f2a:	80 83       	st	Z, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   17f2c:	19 bc       	out	0x29, r1	; 41
   17f2e:	85 e0       	ldi	r24, 0x05	; 5
		EVENT_USB_Device_Suspend();
   17f30:	8e bb       	out	0x1e, r24	; 30
   17f32:	34 d2       	rcall	.+1128   	; 0x1839c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   17f34:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x6fffe1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   17f38:	84 ff       	sbrs	r24, 4
   17f3a:	2d c0       	rjmp	.+90     	; 0x17f96 <__vector_10+0x114>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   17f3c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x6fffe2>
   17f40:	84 ff       	sbrs	r24, 4
   17f42:	29 c0       	rjmp	.+82     	; 0x17f96 <__vector_10+0x114>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   17f44:	8c e0       	ldi	r24, 0x0C	; 12
   17f46:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   17f48:	8e e0       	ldi	r24, 0x0E	; 14
   17f4a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   17f4c:	09 b4       	in	r0, 0x29	; 41
   17f4e:	00 fe       	sbrs	r0, 0
   17f50:	fd cf       	rjmp	.-6      	; 0x17f4c <__vector_10+0xca>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   17f52:	e8 ed       	ldi	r30, 0xD8	; 216
   17f54:	f0 e0       	ldi	r31, 0x00	; 0
   17f56:	80 81       	ld	r24, Z
   17f58:	8f 7d       	andi	r24, 0xDF	; 223
   17f5a:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   17f5c:	e1 ee       	ldi	r30, 0xE1	; 225
   17f5e:	f0 e0       	ldi	r31, 0x00	; 0
   17f60:	80 81       	ld	r24, Z
   17f62:	8f 7e       	andi	r24, 0xEF	; 239
   17f64:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   17f66:	e2 ee       	ldi	r30, 0xE2	; 226
   17f68:	f0 e0       	ldi	r31, 0x00	; 0
   17f6a:	80 81       	ld	r24, Z
   17f6c:	8f 7e       	andi	r24, 0xEF	; 239
   17f6e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   17f70:	80 81       	ld	r24, Z
   17f72:	81 60       	ori	r24, 0x01	; 1
   17f74:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   17f76:	80 91 38 6c 	lds	r24, 0x6C38	; 0x806c38 <USB_Device_ConfigurationNumber>
   17f7a:	88 23       	and	r24, r24
   17f7c:	19 f0       	breq	.+6      	; 0x17f84 <__vector_10+0x102>
		  USB_DeviceState = DEVICE_STATE_Configured;
   17f7e:	84 e0       	ldi	r24, 0x04	; 4
   17f80:	8e bb       	out	0x1e, r24	; 30
   17f82:	08 c0       	rjmp	.+16     	; 0x17f94 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   17f84:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x6fffe3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
   17f88:	88 23       	and	r24, r24
   17f8a:	14 f0       	brlt	.+4      	; 0x17f90 <__vector_10+0x10e>
   17f8c:	81 e0       	ldi	r24, 0x01	; 1
   17f8e:	01 c0       	rjmp	.+2      	; 0x17f92 <__vector_10+0x110>
   17f90:	83 e0       	ldi	r24, 0x03	; 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   17f92:	8e bb       	out	0x1e, r24	; 30
   17f94:	03 d2       	rcall	.+1030   	; 0x1839c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   17f96:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x6fffe1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   17f9a:	83 ff       	sbrs	r24, 3
   17f9c:	22 c0       	rjmp	.+68     	; 0x17fe2 <__vector_10+0x160>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   17f9e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x6fffe2>
   17fa2:	83 ff       	sbrs	r24, 3
   17fa4:	1e c0       	rjmp	.+60     	; 0x17fe2 <__vector_10+0x160>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   17fa6:	e1 ee       	ldi	r30, 0xE1	; 225
   17fa8:	f0 e0       	ldi	r31, 0x00	; 0
   17faa:	80 81       	ld	r24, Z
   17fac:	87 7f       	andi	r24, 0xF7	; 247
   17fae:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   17fb0:	82 e0       	ldi	r24, 0x02	; 2
   17fb2:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   17fb4:	10 92 38 6c 	sts	0x6C38, r1	; 0x806c38 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   17fb8:	80 81       	ld	r24, Z
   17fba:	8e 7f       	andi	r24, 0xFE	; 254
   17fbc:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   17fbe:	e2 ee       	ldi	r30, 0xE2	; 226
   17fc0:	f0 e0       	ldi	r31, 0x00	; 0
   17fc2:	80 81       	ld	r24, Z
   17fc4:	8e 7f       	andi	r24, 0xFE	; 254
   17fc6:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   17fc8:	80 81       	ld	r24, Z
   17fca:	80 61       	ori	r24, 0x10	; 16
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
   17fcc:	80 83       	st	Z, r24
   17fce:	42 e0       	ldi	r20, 0x02	; 2
   17fd0:	60 e0       	ldi	r22, 0x00	; 0
   17fd2:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   17fd4:	df dd       	rcall	.-1090   	; 0x17b94 <Endpoint_ConfigureEndpoint_Prv>
   17fd6:	e0 ef       	ldi	r30, 0xF0	; 240
   17fd8:	f0 e0       	ldi	r31, 0x00	; 0
   17fda:	80 81       	ld	r24, Z
   17fdc:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   17fde:	80 83       	st	Z, r24
   17fe0:	dd d1       	rcall	.+954    	; 0x1839c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   17fe2:	ff 91       	pop	r31
   17fe4:	ef 91       	pop	r30
   17fe6:	bf 91       	pop	r27
   17fe8:	af 91       	pop	r26
   17fea:	9f 91       	pop	r25
   17fec:	8f 91       	pop	r24
   17fee:	7f 91       	pop	r23
   17ff0:	6f 91       	pop	r22
   17ff2:	5f 91       	pop	r21
   17ff4:	4f 91       	pop	r20
   17ff6:	3f 91       	pop	r19
   17ff8:	2f 91       	pop	r18
   17ffa:	0f 90       	pop	r0
   17ffc:	0b be       	out	0x3b, r0	; 59
   17ffe:	0f 90       	pop	r0
   18000:	0f be       	out	0x3f, r0	; 63
   18002:	0f 90       	pop	r0
   18004:	1f 90       	pop	r1
   18006:	18 95       	reti

00018008 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
   18008:	1f 92       	push	r1
   1800a:	0f 92       	push	r0
   1800c:	0f b6       	in	r0, 0x3f	; 63
   1800e:	0f 92       	push	r0
   18010:	11 24       	eor	r1, r1
   18012:	0b b6       	in	r0, 0x3b	; 59
   18014:	0f 92       	push	r0
   18016:	ef 92       	push	r14
   18018:	ff 92       	push	r15
   1801a:	0f 93       	push	r16
   1801c:	1f 93       	push	r17
   1801e:	2f 93       	push	r18
   18020:	3f 93       	push	r19
   18022:	4f 93       	push	r20
   18024:	5f 93       	push	r21
   18026:	6f 93       	push	r22
   18028:	7f 93       	push	r23
   1802a:	8f 93       	push	r24
   1802c:	9f 93       	push	r25
   1802e:	af 93       	push	r26
   18030:	bf 93       	push	r27
   18032:	cf 93       	push	r28
   18034:	df 93       	push	r29
   18036:	ef 93       	push	r30
   18038:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1803a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   1803e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   18040:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x6fffec>
   18044:	d8 2f       	mov	r29, r24
   18046:	d1 70       	andi	r29, 0x01	; 1
   18048:	80 fd       	sbrc	r24, 0
   1804a:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1804c:	0f 2e       	mov	r0, r31
   1804e:	f9 ee       	ldi	r31, 0xE9	; 233
   18050:	ef 2e       	mov	r14, r31
   18052:	f1 2c       	mov	r15, r1
   18054:	f0 2d       	mov	r31, r0
   18056:	f7 01       	movw	r30, r14
   18058:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
   1805a:	00 ef       	ldi	r16, 0xF0	; 240
   1805c:	10 e0       	ldi	r17, 0x00	; 0
   1805e:	f8 01       	movw	r30, r16
   18060:	80 81       	ld	r24, Z
   18062:	87 7f       	andi	r24, 0xF7	; 247
   18064:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
   18066:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
   18068:	23 d0       	rcall	.+70     	; 0x180b0 <USB_Device_ProcessControlRequest>
   1806a:	f7 01       	movw	r30, r14
   1806c:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
   1806e:	f8 01       	movw	r30, r16
   18070:	80 81       	ld	r24, Z
   18072:	88 60       	ori	r24, 0x08	; 8
   18074:	80 83       	st	Z, r24
   18076:	cd 2b       	or	r28, r29
   18078:	cf 70       	andi	r28, 0x0F	; 15
   1807a:	f7 01       	movw	r30, r14
   1807c:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
   1807e:	ff 91       	pop	r31
   18080:	ef 91       	pop	r30
   18082:	df 91       	pop	r29
   18084:	cf 91       	pop	r28
   18086:	bf 91       	pop	r27
   18088:	af 91       	pop	r26
   1808a:	9f 91       	pop	r25
   1808c:	8f 91       	pop	r24
   1808e:	7f 91       	pop	r23
   18090:	6f 91       	pop	r22
   18092:	5f 91       	pop	r21
   18094:	4f 91       	pop	r20
   18096:	3f 91       	pop	r19
   18098:	2f 91       	pop	r18
   1809a:	1f 91       	pop	r17
   1809c:	0f 91       	pop	r16
   1809e:	ff 90       	pop	r15
   180a0:	ef 90       	pop	r14
   180a2:	0f 90       	pop	r0
   180a4:	0b be       	out	0x3b, r0	; 59
   180a6:	0f 90       	pop	r0
   180a8:	0f be       	out	0x3f, r0	; 63
   180aa:	0f 90       	pop	r0
   180ac:	1f 90       	pop	r1
   180ae:	18 95       	reti

000180b0 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   180b0:	0f 93       	push	r16
   180b2:	1f 93       	push	r17
   180b4:	cf 93       	push	r28
   180b6:	df 93       	push	r29
   180b8:	cd b7       	in	r28, 0x3d	; 61
   180ba:	de b7       	in	r29, 0x3e	; 62
   180bc:	aa 97       	sbiw	r28, 0x2a	; 42
   180be:	0f b6       	in	r0, 0x3f	; 63
   180c0:	f8 94       	cli
   180c2:	de bf       	out	0x3e, r29	; 62
   180c4:	0f be       	out	0x3f, r0	; 63
   180c6:	cd bf       	out	0x3d, r28	; 61
   180c8:	ec e3       	ldi	r30, 0x3C	; 60
   180ca:	fc e6       	ldi	r31, 0x6C	; 108
   180cc:	24 e4       	ldi	r18, 0x44	; 68
   180ce:	3c e6       	ldi	r19, 0x6C	; 108
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   180d0:	a1 ef       	ldi	r26, 0xF1	; 241
   180d2:	b0 e0       	ldi	r27, 0x00	; 0
   180d4:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   180d6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   180d8:	2e 17       	cp	r18, r30
   180da:	3f 07       	cpc	r19, r31
   180dc:	d9 f7       	brne	.-10     	; 0x180d4 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   180de:	48 da       	rcall	.-2928   	; 0x17570 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   180e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>

	if (Endpoint_IsSETUPReceived())
   180e4:	83 ff       	sbrs	r24, 3
   180e6:	35 c1       	rjmp	.+618    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   180e8:	ec e3       	ldi	r30, 0x3C	; 60
   180ea:	fc e6       	ldi	r31, 0x6C	; 108
   180ec:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
   180ee:	81 81       	ldd	r24, Z+1	; 0x01
   180f0:	85 30       	cpi	r24, 0x05	; 5
   180f2:	09 f4       	brne	.+2      	; 0x180f6 <USB_Device_ProcessControlRequest+0x46>
   180f4:	7f c0       	rjmp	.+254    	; 0x181f4 <USB_Device_ProcessControlRequest+0x144>
   180f6:	30 f4       	brcc	.+12     	; 0x18104 <USB_Device_ProcessControlRequest+0x54>
   180f8:	81 30       	cpi	r24, 0x01	; 1
   180fa:	c9 f1       	breq	.+114    	; 0x1816e <USB_Device_ProcessControlRequest+0xbe>
   180fc:	68 f0       	brcs	.+26     	; 0x18118 <USB_Device_ProcessControlRequest+0x68>
   180fe:	83 30       	cpi	r24, 0x03	; 3
   18100:	b1 f1       	breq	.+108    	; 0x1816e <USB_Device_ProcessControlRequest+0xbe>
   18102:	27 c1       	rjmp	.+590    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
   18104:	88 30       	cpi	r24, 0x08	; 8
   18106:	09 f4       	brne	.+2      	; 0x1810a <USB_Device_ProcessControlRequest+0x5a>
   18108:	f1 c0       	rjmp	.+482    	; 0x182ec <USB_Device_ProcessControlRequest+0x23c>
   1810a:	89 30       	cpi	r24, 0x09	; 9
   1810c:	09 f4       	brne	.+2      	; 0x18110 <USB_Device_ProcessControlRequest+0x60>
   1810e:	fe c0       	rjmp	.+508    	; 0x1830c <USB_Device_ProcessControlRequest+0x25c>
   18110:	86 30       	cpi	r24, 0x06	; 6
   18112:	09 f0       	breq	.+2      	; 0x18116 <USB_Device_ProcessControlRequest+0x66>
   18114:	1e c1       	rjmp	.+572    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
   18116:	90 c0       	rjmp	.+288    	; 0x18238 <USB_Device_ProcessControlRequest+0x188>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   18118:	90 38       	cpi	r25, 0x80	; 128
   1811a:	21 f0       	breq	.+8      	; 0x18124 <USB_Device_ProcessControlRequest+0x74>
   1811c:	92 38       	cpi	r25, 0x82	; 130
   1811e:	09 f0       	breq	.+2      	; 0x18122 <USB_Device_ProcessControlRequest+0x72>
   18120:	18 c1       	rjmp	.+560    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
   18122:	08 c0       	rjmp	.+16     	; 0x18134 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   18124:	80 91 39 6c 	lds	r24, 0x6C39	; 0x806c39 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
   18128:	90 91 3a 6c 	lds	r25, 0x6C3A	; 0x806c3a <USB_Device_RemoteWakeupEnabled>
   1812c:	99 23       	and	r25, r25
   1812e:	89 f0       	breq	.+34     	; 0x18152 <USB_Device_ProcessControlRequest+0xa2>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
   18130:	82 60       	ori	r24, 0x02	; 2
   18132:	0f c0       	rjmp	.+30     	; 0x18152 <USB_Device_ProcessControlRequest+0xa2>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   18134:	80 91 40 6c 	lds	r24, 0x6C40	; 0x806c40 <USB_ControlRequest+0x4>
   18138:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   1813a:	87 30       	cpi	r24, 0x07	; 7
   1813c:	08 f0       	brcs	.+2      	; 0x18140 <USB_Device_ProcessControlRequest+0x90>
   1813e:	09 c1       	rjmp	.+530    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   18140:	e9 ee       	ldi	r30, 0xE9	; 233
   18142:	f0 e0       	ldi	r31, 0x00	; 0
   18144:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   18146:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x6fffeb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
   1814a:	85 fb       	bst	r24, 5
   1814c:	88 27       	eor	r24, r24
   1814e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   18150:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   18152:	e8 ee       	ldi	r30, 0xE8	; 232
   18154:	f0 e0       	ldi	r31, 0x00	; 0
   18156:	90 81       	ld	r25, Z
   18158:	97 7f       	andi	r25, 0xF7	; 247
   1815a:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1815c:	a1 ef       	ldi	r26, 0xF1	; 241
   1815e:	b0 e0       	ldi	r27, 0x00	; 0
   18160:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
   18162:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   18164:	80 81       	ld	r24, Z
   18166:	8e 77       	andi	r24, 0x7E	; 126
   18168:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1816a:	c9 dd       	rcall	.-1134   	; 0x17cfe <Endpoint_ClearStatusStage>
   1816c:	f2 c0       	rjmp	.+484    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1816e:	99 23       	and	r25, r25
   18170:	09 f4       	brne	.+2      	; 0x18174 <USB_Device_ProcessControlRequest+0xc4>
   18172:	fe c0       	rjmp	.+508    	; 0x18370 <USB_Device_ProcessControlRequest+0x2c0>
   18174:	92 30       	cpi	r25, 0x02	; 2
   18176:	09 f0       	breq	.+2      	; 0x1817a <USB_Device_ProcessControlRequest+0xca>
   18178:	ec c0       	rjmp	.+472    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
   1817a:	ff c0       	rjmp	.+510    	; 0x1837a <USB_Device_ProcessControlRequest+0x2ca>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
   1817c:	91 e0       	ldi	r25, 0x01	; 1
   1817e:	83 30       	cpi	r24, 0x03	; 3
   18180:	09 f0       	breq	.+2      	; 0x18184 <USB_Device_ProcessControlRequest+0xd4>
   18182:	90 e0       	ldi	r25, 0x00	; 0
   18184:	90 93 3a 6c 	sts	0x6C3A, r25	; 0x806c3a <USB_Device_RemoteWakeupEnabled>
   18188:	2c c0       	rjmp	.+88     	; 0x181e2 <USB_Device_ProcessControlRequest+0x132>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1818a:	80 91 40 6c 	lds	r24, 0x6C40	; 0x806c40 <USB_ControlRequest+0x4>
   1818e:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
   18190:	9f ef       	ldi	r25, 0xFF	; 255
   18192:	98 0f       	add	r25, r24
   18194:	96 30       	cpi	r25, 0x06	; 6
   18196:	08 f0       	brcs	.+2      	; 0x1819a <USB_Device_ProcessControlRequest+0xea>
   18198:	dc c0       	rjmp	.+440    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1819a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1819e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x6fffeb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   181a2:	90 ff       	sbrs	r25, 0
   181a4:	1e c0       	rjmp	.+60     	; 0x181e2 <USB_Device_ProcessControlRequest+0x132>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   181a6:	90 91 3d 6c 	lds	r25, 0x6C3D	; 0x806c3d <USB_ControlRequest+0x1>
   181aa:	93 30       	cpi	r25, 0x03	; 3
   181ac:	31 f4       	brne	.+12     	; 0x181ba <USB_Device_ProcessControlRequest+0x10a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   181ae:	eb ee       	ldi	r30, 0xEB	; 235
   181b0:	f0 e0       	ldi	r31, 0x00	; 0
   181b2:	80 81       	ld	r24, Z
   181b4:	80 62       	ori	r24, 0x20	; 32
   181b6:	80 83       	st	Z, r24
   181b8:	14 c0       	rjmp	.+40     	; 0x181e2 <USB_Device_ProcessControlRequest+0x132>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   181ba:	eb ee       	ldi	r30, 0xEB	; 235
   181bc:	f0 e0       	ldi	r31, 0x00	; 0
   181be:	90 81       	ld	r25, Z
   181c0:	90 61       	ori	r25, 0x10	; 16
   181c2:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   181c4:	21 e0       	ldi	r18, 0x01	; 1
   181c6:	30 e0       	ldi	r19, 0x00	; 0
   181c8:	a9 01       	movw	r20, r18
   181ca:	02 c0       	rjmp	.+4      	; 0x181d0 <USB_Device_ProcessControlRequest+0x120>
   181cc:	44 0f       	add	r20, r20
   181ce:	55 1f       	adc	r21, r21
   181d0:	8a 95       	dec	r24
   181d2:	e2 f7       	brpl	.-8      	; 0x181cc <USB_Device_ProcessControlRequest+0x11c>
   181d4:	aa ee       	ldi	r26, 0xEA	; 234
   181d6:	b0 e0       	ldi	r27, 0x00	; 0
   181d8:	4c 93       	st	X, r20
				UERST = 0;
   181da:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   181dc:	80 81       	ld	r24, Z
   181de:	88 60       	ori	r24, 0x08	; 8
   181e0:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   181e2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   181e6:	e8 ee       	ldi	r30, 0xE8	; 232
   181e8:	f0 e0       	ldi	r31, 0x00	; 0
   181ea:	80 81       	ld	r24, Z
   181ec:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   181ee:	80 83       	st	Z, r24
   181f0:	86 dd       	rcall	.-1268   	; 0x17cfe <Endpoint_ClearStatusStage>
   181f2:	af c0       	rjmp	.+350    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   181f4:	91 11       	cpse	r25, r1
   181f6:	ad c0       	rjmp	.+346    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
   181f8:	10 91 3e 6c 	lds	r17, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   181fc:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   181fe:	e3 ee       	ldi	r30, 0xE3	; 227
   18200:	f0 e0       	ldi	r31, 0x00	; 0
   18202:	80 81       	ld	r24, Z
   18204:	80 78       	andi	r24, 0x80	; 128
   18206:	81 2b       	or	r24, r17
   18208:	80 83       	st	Z, r24
   1820a:	e8 ee       	ldi	r30, 0xE8	; 232
   1820c:	f0 e0       	ldi	r31, 0x00	; 0
   1820e:	80 81       	ld	r24, Z
   18210:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   18212:	80 83       	st	Z, r24
   18214:	74 dd       	rcall	.-1304   	; 0x17cfe <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   18216:	e8 ee       	ldi	r30, 0xE8	; 232
   18218:	f0 e0       	ldi	r31, 0x00	; 0
   1821a:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
   1821c:	80 ff       	sbrs	r24, 0
   1821e:	fd cf       	rjmp	.-6      	; 0x1821a <USB_Device_ProcessControlRequest+0x16a>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
   18220:	e3 ee       	ldi	r30, 0xE3	; 227
   18222:	f0 e0       	ldi	r31, 0x00	; 0
   18224:	80 81       	ld	r24, Z
   18226:	80 68       	ori	r24, 0x80	; 128
   18228:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1822a:	11 11       	cpse	r17, r1
   1822c:	02 c0       	rjmp	.+4      	; 0x18232 <USB_Device_ProcessControlRequest+0x182>
   1822e:	82 e0       	ldi	r24, 0x02	; 2
   18230:	01 c0       	rjmp	.+2      	; 0x18234 <USB_Device_ProcessControlRequest+0x184>
   18232:	83 e0       	ldi	r24, 0x03	; 3
   18234:	8e bb       	out	0x1e, r24	; 30
   18236:	8d c0       	rjmp	.+282    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   18238:	90 58       	subi	r25, 0x80	; 128
   1823a:	92 30       	cpi	r25, 0x02	; 2
   1823c:	08 f0       	brcs	.+2      	; 0x18240 <USB_Device_ProcessControlRequest+0x190>
   1823e:	89 c0       	rjmp	.+274    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
   18240:	80 91 3e 6c 	lds	r24, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   18244:	90 91 3f 6c 	lds	r25, 0x6C3F	; 0x806c3f <USB_ControlRequest+0x3>
   18248:	8c 3d       	cpi	r24, 0xDC	; 220
   1824a:	53 e0       	ldi	r21, 0x03	; 3
   1824c:	95 07       	cpc	r25, r21
   1824e:	99 f5       	brne	.+102    	; 0x182b6 <USB_Device_ProcessControlRequest+0x206>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
   18250:	83 e0       	ldi	r24, 0x03	; 3
   18252:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
   18254:	8a e2       	ldi	r24, 0x2A	; 42
   18256:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   18258:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1825a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
   1825c:	de 01       	movw	r26, r28
   1825e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
   18260:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
   18262:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
   18264:	41 e2       	ldi	r20, 0x21	; 33
   18266:	e3 2f       	mov	r30, r19
   18268:	f0 e0       	ldi	r31, 0x00	; 0
   1826a:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__DATA_REGION_ORIGIN__+0x6fff57>
   1826e:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
   18270:	20 ff       	sbrs	r18, 0
   18272:	03 c0       	rjmp	.+6      	; 0x1827a <USB_Device_ProcessControlRequest+0x1ca>
					{
						SerialByte >>= 4;
   18274:	82 95       	swap	r24
   18276:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
   18278:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
   1827a:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
   1827c:	8a 30       	cpi	r24, 0x0A	; 10
   1827e:	18 f0       	brcs	.+6      	; 0x18286 <USB_Device_ProcessControlRequest+0x1d6>
   18280:	90 e0       	ldi	r25, 0x00	; 0
   18282:	c7 96       	adiw	r24, 0x37	; 55
   18284:	02 c0       	rjmp	.+4      	; 0x1828a <USB_Device_ProcessControlRequest+0x1da>
   18286:	90 e0       	ldi	r25, 0x00	; 0
   18288:	c0 96       	adiw	r24, 0x30	; 48
   1828a:	8d 93       	st	X+, r24
   1828c:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
   1828e:	2f 5f       	subi	r18, 0xFF	; 255
   18290:	24 31       	cpi	r18, 0x14	; 20
   18292:	49 f7       	brne	.-46     	; 0x18266 <USB_Device_ProcessControlRequest+0x1b6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   18294:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   18296:	08 ee       	ldi	r16, 0xE8	; 232
   18298:	10 e0       	ldi	r17, 0x00	; 0
   1829a:	f8 01       	movw	r30, r16
   1829c:	80 81       	ld	r24, Z
   1829e:	87 7f       	andi	r24, 0xF7	; 247
   182a0:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
   182a2:	6a e2       	ldi	r22, 0x2A	; 42
   182a4:	70 e0       	ldi	r23, 0x00	; 0
   182a6:	ce 01       	movw	r24, r28
   182a8:	01 96       	adiw	r24, 0x01	; 1
   182aa:	79 db       	rcall	.-2318   	; 0x1799e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   182ac:	f8 01       	movw	r30, r16
   182ae:	80 81       	ld	r24, Z
   182b0:	8b 77       	andi	r24, 0x7B	; 123
   182b2:	80 83       	st	Z, r24
   182b4:	4e c0       	rjmp	.+156    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   182b6:	60 91 40 6c 	lds	r22, 0x6C40	; 0x806c40 <USB_ControlRequest+0x4>
   182ba:	70 91 41 6c 	lds	r23, 0x6C41	; 0x806c41 <USB_ControlRequest+0x5>
   182be:	ae 01       	movw	r20, r28
   182c0:	4f 5f       	subi	r20, 0xFF	; 255
   182c2:	5f 4f       	sbci	r21, 0xFF	; 255
   182c4:	0e 94 53 06 	call	0xca6	; 0xca6 <CALLBACK_USB_GetDescriptor>
   182c8:	bc 01       	movw	r22, r24
   182ca:	89 2b       	or	r24, r25
   182cc:	09 f4       	brne	.+2      	; 0x182d0 <USB_Device_ProcessControlRequest+0x220>
   182ce:	41 c0       	rjmp	.+130    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   182d0:	08 ee       	ldi	r16, 0xE8	; 232
   182d2:	10 e0       	ldi	r17, 0x00	; 0
   182d4:	f8 01       	movw	r30, r16
   182d6:	90 81       	ld	r25, Z
   182d8:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
   182da:	90 83       	st	Z, r25
   182dc:	89 81       	ldd	r24, Y+1	; 0x01
   182de:	9a 81       	ldd	r25, Y+2	; 0x02
   182e0:	db db       	rcall	.-2122   	; 0x17a98 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   182e2:	f8 01       	movw	r30, r16
   182e4:	80 81       	ld	r24, Z
   182e6:	8b 77       	andi	r24, 0x7B	; 123
   182e8:	80 83       	st	Z, r24
   182ea:	33 c0       	rjmp	.+102    	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   182ec:	90 38       	cpi	r25, 0x80	; 128
   182ee:	89 f5       	brne	.+98     	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   182f0:	e8 ee       	ldi	r30, 0xE8	; 232
   182f2:	f0 e0       	ldi	r31, 0x00	; 0
   182f4:	80 81       	ld	r24, Z
   182f6:	87 7f       	andi	r24, 0xF7	; 247
   182f8:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   182fa:	80 91 38 6c 	lds	r24, 0x6C38	; 0x806c38 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   182fe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x6ffff1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   18302:	80 81       	ld	r24, Z
   18304:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   18306:	80 83       	st	Z, r24
   18308:	fa dc       	rcall	.-1548   	; 0x17cfe <Endpoint_ClearStatusStage>
   1830a:	23 c0       	rjmp	.+70     	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1830c:	91 11       	cpse	r25, r1
   1830e:	21 c0       	rjmp	.+66     	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   18310:	80 91 3e 6c 	lds	r24, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   18314:	90 91 3f 6c 	lds	r25, 0x6C3F	; 0x806c3f <USB_ControlRequest+0x3>
   18318:	99 27       	eor	r25, r25
   1831a:	02 97       	sbiw	r24, 0x02	; 2
   1831c:	d4 f4       	brge	.+52     	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1831e:	e8 ee       	ldi	r30, 0xE8	; 232
   18320:	f0 e0       	ldi	r31, 0x00	; 0
   18322:	80 81       	ld	r24, Z
   18324:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   18326:	80 83       	st	Z, r24
   18328:	80 91 3e 6c 	lds	r24, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   1832c:	80 93 38 6c 	sts	0x6C38, r24	; 0x806c38 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
   18330:	e6 dc       	rcall	.-1588   	; 0x17cfe <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   18332:	80 91 38 6c 	lds	r24, 0x6C38	; 0x806c38 <USB_Device_ConfigurationNumber>
   18336:	88 23       	and	r24, r24
   18338:	19 f0       	breq	.+6      	; 0x18340 <USB_Device_ProcessControlRequest+0x290>
	  USB_DeviceState = DEVICE_STATE_Configured;
   1833a:	84 e0       	ldi	r24, 0x04	; 4
   1833c:	8e bb       	out	0x1e, r24	; 30
   1833e:	08 c0       	rjmp	.+16     	; 0x18350 <USB_Device_ProcessControlRequest+0x2a0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   18340:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x6fffe3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   18344:	88 23       	and	r24, r24
   18346:	14 f0       	brlt	.+4      	; 0x1834c <USB_Device_ProcessControlRequest+0x29c>
   18348:	81 e0       	ldi	r24, 0x01	; 1
   1834a:	01 c0       	rjmp	.+2      	; 0x1834e <USB_Device_ProcessControlRequest+0x29e>
   1834c:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
   1834e:	8e bb       	out	0x1e, r24	; 30
   18350:	02 d9       	rcall	.-3580   	; 0x17556 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   18352:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   18356:	83 ff       	sbrs	r24, 3
   18358:	16 c0       	rjmp	.+44     	; 0x18386 <USB_Device_ProcessControlRequest+0x2d6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1835a:	e8 ee       	ldi	r30, 0xE8	; 232
   1835c:	f0 e0       	ldi	r31, 0x00	; 0
   1835e:	80 81       	ld	r24, Z
   18360:	87 7f       	andi	r24, 0xF7	; 247
   18362:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   18364:	eb ee       	ldi	r30, 0xEB	; 235
   18366:	f0 e0       	ldi	r31, 0x00	; 0
   18368:	80 81       	ld	r24, Z
   1836a:	80 62       	ori	r24, 0x20	; 32
   1836c:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   1836e:	0b c0       	rjmp	.+22     	; 0x18386 <USB_Device_ProcessControlRequest+0x2d6>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
   18370:	90 91 3e 6c 	lds	r25, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   18374:	91 30       	cpi	r25, 0x01	; 1
   18376:	69 f7       	brne	.-38     	; 0x18352 <USB_Device_ProcessControlRequest+0x2a2>
   18378:	01 cf       	rjmp	.-510    	; 0x1817c <USB_Device_ProcessControlRequest+0xcc>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1837a:	80 91 3e 6c 	lds	r24, 0x6C3E	; 0x806c3e <USB_ControlRequest+0x2>
   1837e:	88 23       	and	r24, r24
   18380:	09 f4       	brne	.+2      	; 0x18384 <USB_Device_ProcessControlRequest+0x2d4>
   18382:	03 cf       	rjmp	.-506    	; 0x1818a <USB_Device_ProcessControlRequest+0xda>
   18384:	2e cf       	rjmp	.-420    	; 0x181e2 <USB_Device_ProcessControlRequest+0x132>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
   18386:	aa 96       	adiw	r28, 0x2a	; 42
   18388:	0f b6       	in	r0, 0x3f	; 63
   1838a:	f8 94       	cli
   1838c:	de bf       	out	0x3e, r29	; 62
   1838e:	0f be       	out	0x3f, r0	; 63
   18390:	cd bf       	out	0x3d, r28	; 61
   18392:	df 91       	pop	r29
   18394:	cf 91       	pop	r28
   18396:	1f 91       	pop	r17
   18398:	0f 91       	pop	r16
   1839a:	08 95       	ret

0001839c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
   1839c:	08 95       	ret

0001839e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1839e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
   183a0:	8e b3       	in	r24, 0x1e	; 30
   183a2:	88 23       	and	r24, r24
   183a4:	99 f0       	breq	.+38     	; 0x183cc <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   183a6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
   183aa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   183ac:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x6fffec>
   183b0:	98 2f       	mov	r25, r24
   183b2:	91 70       	andi	r25, 0x01	; 1
   183b4:	80 fd       	sbrc	r24, 0
   183b6:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   183b8:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   183ba:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   183be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x6fffe8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
   183c2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
   183c4:	75 de       	rcall	.-790    	; 0x180b0 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   183c6:	cf 70       	andi	r28, 0x0F	; 15
   183c8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x6fffe9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
   183cc:	cf 91       	pop	r28
   183ce:	08 95       	ret

000183d0 <__udivmodhi4>:
   183d0:	aa 1b       	sub	r26, r26
   183d2:	bb 1b       	sub	r27, r27
   183d4:	51 e1       	ldi	r21, 0x11	; 17
   183d6:	07 c0       	rjmp	.+14     	; 0x183e6 <__udivmodhi4_ep>

000183d8 <__udivmodhi4_loop>:
   183d8:	aa 1f       	adc	r26, r26
   183da:	bb 1f       	adc	r27, r27
   183dc:	a6 17       	cp	r26, r22
   183de:	b7 07       	cpc	r27, r23
   183e0:	10 f0       	brcs	.+4      	; 0x183e6 <__udivmodhi4_ep>
   183e2:	a6 1b       	sub	r26, r22
   183e4:	b7 0b       	sbc	r27, r23

000183e6 <__udivmodhi4_ep>:
   183e6:	88 1f       	adc	r24, r24
   183e8:	99 1f       	adc	r25, r25
   183ea:	5a 95       	dec	r21
   183ec:	a9 f7       	brne	.-22     	; 0x183d8 <__udivmodhi4_loop>
   183ee:	80 95       	com	r24
   183f0:	90 95       	com	r25
   183f2:	bc 01       	movw	r22, r24
   183f4:	cd 01       	movw	r24, r26
   183f6:	08 95       	ret

000183f8 <__divmodhi4>:
   183f8:	97 fb       	bst	r25, 7
   183fa:	07 2e       	mov	r0, r23
   183fc:	16 f4       	brtc	.+4      	; 0x18402 <__divmodhi4+0xa>
   183fe:	00 94       	com	r0
   18400:	06 d0       	rcall	.+12     	; 0x1840e <__divmodhi4_neg1>
   18402:	77 fd       	sbrc	r23, 7
   18404:	08 d0       	rcall	.+16     	; 0x18416 <__divmodhi4_neg2>
   18406:	e4 df       	rcall	.-56     	; 0x183d0 <__udivmodhi4>
   18408:	07 fc       	sbrc	r0, 7
   1840a:	05 d0       	rcall	.+10     	; 0x18416 <__divmodhi4_neg2>
   1840c:	3e f4       	brtc	.+14     	; 0x1841c <__divmodhi4_exit>

0001840e <__divmodhi4_neg1>:
   1840e:	90 95       	com	r25
   18410:	81 95       	neg	r24
   18412:	9f 4f       	sbci	r25, 0xFF	; 255
   18414:	08 95       	ret

00018416 <__divmodhi4_neg2>:
   18416:	70 95       	com	r23
   18418:	61 95       	neg	r22
   1841a:	7f 4f       	sbci	r23, 0xFF	; 255

0001841c <__divmodhi4_exit>:
   1841c:	08 95       	ret

0001841e <__udivmodsi4>:
   1841e:	a1 e2       	ldi	r26, 0x21	; 33
   18420:	1a 2e       	mov	r1, r26
   18422:	aa 1b       	sub	r26, r26
   18424:	bb 1b       	sub	r27, r27
   18426:	fd 01       	movw	r30, r26
   18428:	0d c0       	rjmp	.+26     	; 0x18444 <__udivmodsi4_ep>

0001842a <__udivmodsi4_loop>:
   1842a:	aa 1f       	adc	r26, r26
   1842c:	bb 1f       	adc	r27, r27
   1842e:	ee 1f       	adc	r30, r30
   18430:	ff 1f       	adc	r31, r31
   18432:	a2 17       	cp	r26, r18
   18434:	b3 07       	cpc	r27, r19
   18436:	e4 07       	cpc	r30, r20
   18438:	f5 07       	cpc	r31, r21
   1843a:	20 f0       	brcs	.+8      	; 0x18444 <__udivmodsi4_ep>
   1843c:	a2 1b       	sub	r26, r18
   1843e:	b3 0b       	sbc	r27, r19
   18440:	e4 0b       	sbc	r30, r20
   18442:	f5 0b       	sbc	r31, r21

00018444 <__udivmodsi4_ep>:
   18444:	66 1f       	adc	r22, r22
   18446:	77 1f       	adc	r23, r23
   18448:	88 1f       	adc	r24, r24
   1844a:	99 1f       	adc	r25, r25
   1844c:	1a 94       	dec	r1
   1844e:	69 f7       	brne	.-38     	; 0x1842a <__udivmodsi4_loop>
   18450:	60 95       	com	r22
   18452:	70 95       	com	r23
   18454:	80 95       	com	r24
   18456:	90 95       	com	r25
   18458:	9b 01       	movw	r18, r22
   1845a:	ac 01       	movw	r20, r24
   1845c:	bd 01       	movw	r22, r26
   1845e:	cf 01       	movw	r24, r30
   18460:	08 95       	ret

00018462 <__umulhisi3>:
   18462:	a2 9f       	mul	r26, r18
   18464:	b0 01       	movw	r22, r0
   18466:	b3 9f       	mul	r27, r19
   18468:	c0 01       	movw	r24, r0
   1846a:	a3 9f       	mul	r26, r19
   1846c:	70 0d       	add	r23, r0
   1846e:	81 1d       	adc	r24, r1
   18470:	11 24       	eor	r1, r1
   18472:	91 1d       	adc	r25, r1
   18474:	b2 9f       	mul	r27, r18
   18476:	70 0d       	add	r23, r0
   18478:	81 1d       	adc	r24, r1
   1847a:	11 24       	eor	r1, r1
   1847c:	91 1d       	adc	r25, r1
   1847e:	08 95       	ret

00018480 <abort>:
   18480:	81 e0       	ldi	r24, 0x01	; 1
   18482:	90 e0       	ldi	r25, 0x00	; 0
   18484:	f8 94       	cli
   18486:	83 c0       	rjmp	.+262    	; 0x1858e <_exit>

00018488 <setjmp>:
   18488:	dc 01       	movw	r26, r24
   1848a:	2d 92       	st	X+, r2
   1848c:	3d 92       	st	X+, r3
   1848e:	4d 92       	st	X+, r4
   18490:	5d 92       	st	X+, r5
   18492:	6d 92       	st	X+, r6
   18494:	7d 92       	st	X+, r7
   18496:	8d 92       	st	X+, r8
   18498:	9d 92       	st	X+, r9
   1849a:	ad 92       	st	X+, r10
   1849c:	bd 92       	st	X+, r11
   1849e:	cd 92       	st	X+, r12
   184a0:	dd 92       	st	X+, r13
   184a2:	ed 92       	st	X+, r14
   184a4:	fd 92       	st	X+, r15
   184a6:	0d 93       	st	X+, r16
   184a8:	1d 93       	st	X+, r17
   184aa:	cd 93       	st	X+, r28
   184ac:	dd 93       	st	X+, r29
   184ae:	ff 91       	pop	r31
   184b0:	ef 91       	pop	r30
   184b2:	8d b7       	in	r24, 0x3d	; 61
   184b4:	8d 93       	st	X+, r24
   184b6:	8e b7       	in	r24, 0x3e	; 62
   184b8:	8d 93       	st	X+, r24
   184ba:	8f b7       	in	r24, 0x3f	; 63
   184bc:	8d 93       	st	X+, r24
   184be:	ed 93       	st	X+, r30
   184c0:	fd 93       	st	X+, r31
   184c2:	88 27       	eor	r24, r24
   184c4:	99 27       	eor	r25, r25
   184c6:	09 94       	ijmp

000184c8 <longjmp>:
   184c8:	dc 01       	movw	r26, r24
   184ca:	cb 01       	movw	r24, r22
   184cc:	81 30       	cpi	r24, 0x01	; 1
   184ce:	91 05       	cpc	r25, r1
   184d0:	81 1d       	adc	r24, r1
   184d2:	2d 90       	ld	r2, X+
   184d4:	3d 90       	ld	r3, X+
   184d6:	4d 90       	ld	r4, X+
   184d8:	5d 90       	ld	r5, X+
   184da:	6d 90       	ld	r6, X+
   184dc:	7d 90       	ld	r7, X+
   184de:	8d 90       	ld	r8, X+
   184e0:	9d 90       	ld	r9, X+
   184e2:	ad 90       	ld	r10, X+
   184e4:	bd 90       	ld	r11, X+
   184e6:	cd 90       	ld	r12, X+
   184e8:	dd 90       	ld	r13, X+
   184ea:	ed 90       	ld	r14, X+
   184ec:	fd 90       	ld	r15, X+
   184ee:	0d 91       	ld	r16, X+
   184f0:	1d 91       	ld	r17, X+
   184f2:	cd 91       	ld	r28, X+
   184f4:	dd 91       	ld	r29, X+
   184f6:	ed 91       	ld	r30, X+
   184f8:	fd 91       	ld	r31, X+
   184fa:	0d 90       	ld	r0, X+
   184fc:	f8 94       	cli
   184fe:	fe bf       	out	0x3e, r31	; 62
   18500:	0f be       	out	0x3f, r0	; 63
   18502:	ed bf       	out	0x3d, r30	; 61
   18504:	ed 91       	ld	r30, X+
   18506:	fd 91       	ld	r31, X+
   18508:	09 94       	ijmp

0001850a <memcmp>:
   1850a:	fb 01       	movw	r30, r22
   1850c:	dc 01       	movw	r26, r24
   1850e:	04 c0       	rjmp	.+8      	; 0x18518 <memcmp+0xe>
   18510:	8d 91       	ld	r24, X+
   18512:	01 90       	ld	r0, Z+
   18514:	80 19       	sub	r24, r0
   18516:	21 f4       	brne	.+8      	; 0x18520 <memcmp+0x16>
   18518:	41 50       	subi	r20, 0x01	; 1
   1851a:	50 40       	sbci	r21, 0x00	; 0
   1851c:	c8 f7       	brcc	.-14     	; 0x18510 <memcmp+0x6>
   1851e:	88 1b       	sub	r24, r24
   18520:	99 0b       	sbc	r25, r25
   18522:	08 95       	ret

00018524 <memcpy>:
   18524:	fb 01       	movw	r30, r22
   18526:	dc 01       	movw	r26, r24
   18528:	02 c0       	rjmp	.+4      	; 0x1852e <memcpy+0xa>
   1852a:	01 90       	ld	r0, Z+
   1852c:	0d 92       	st	X+, r0
   1852e:	41 50       	subi	r20, 0x01	; 1
   18530:	50 40       	sbci	r21, 0x00	; 0
   18532:	d8 f7       	brcc	.-10     	; 0x1852a <memcpy+0x6>
   18534:	08 95       	ret

00018536 <memmove>:
   18536:	68 17       	cp	r22, r24
   18538:	79 07       	cpc	r23, r25
   1853a:	68 f4       	brcc	.+26     	; 0x18556 <memmove+0x20>
   1853c:	fb 01       	movw	r30, r22
   1853e:	dc 01       	movw	r26, r24
   18540:	e4 0f       	add	r30, r20
   18542:	f5 1f       	adc	r31, r21
   18544:	a4 0f       	add	r26, r20
   18546:	b5 1f       	adc	r27, r21
   18548:	02 c0       	rjmp	.+4      	; 0x1854e <memmove+0x18>
   1854a:	02 90       	ld	r0, -Z
   1854c:	0e 92       	st	-X, r0
   1854e:	41 50       	subi	r20, 0x01	; 1
   18550:	50 40       	sbci	r21, 0x00	; 0
   18552:	d8 f7       	brcc	.-10     	; 0x1854a <memmove+0x14>
   18554:	08 95       	ret
   18556:	e6 cf       	rjmp	.-52     	; 0x18524 <memcpy>

00018558 <memset>:
   18558:	dc 01       	movw	r26, r24
   1855a:	01 c0       	rjmp	.+2      	; 0x1855e <memset+0x6>
   1855c:	6d 93       	st	X+, r22
   1855e:	41 50       	subi	r20, 0x01	; 1
   18560:	50 40       	sbci	r21, 0x00	; 0
   18562:	e0 f7       	brcc	.-8      	; 0x1855c <memset+0x4>
   18564:	08 95       	ret

00018566 <strchr>:
   18566:	fc 01       	movw	r30, r24
   18568:	81 91       	ld	r24, Z+
   1856a:	86 17       	cp	r24, r22
   1856c:	21 f0       	breq	.+8      	; 0x18576 <strchr+0x10>
   1856e:	88 23       	and	r24, r24
   18570:	d9 f7       	brne	.-10     	; 0x18568 <strchr+0x2>
   18572:	99 27       	eor	r25, r25
   18574:	08 95       	ret
   18576:	31 97       	sbiw	r30, 0x01	; 1
   18578:	cf 01       	movw	r24, r30
   1857a:	08 95       	ret

0001857c <strcmp>:
   1857c:	fb 01       	movw	r30, r22
   1857e:	dc 01       	movw	r26, r24
   18580:	8d 91       	ld	r24, X+
   18582:	01 90       	ld	r0, Z+
   18584:	80 19       	sub	r24, r0
   18586:	01 10       	cpse	r0, r1
   18588:	d9 f3       	breq	.-10     	; 0x18580 <strcmp+0x4>
   1858a:	99 0b       	sbc	r25, r25
   1858c:	08 95       	ret

0001858e <_exit>:
   1858e:	f8 94       	cli

00018590 <__stop_program>:
   18590:	ff cf       	rjmp	.-2      	; 0x18590 <__stop_program>
